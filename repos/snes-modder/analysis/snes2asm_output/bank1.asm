.BANK 1 SLOT 0
.ORG $0000

.SECTION "Bank1" FORCE

	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $E8.b,S		; 03 E8 ; OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	tsb $88.b		; 04 88 ; Test and set bits $88.b [Reads: Accumulator] [Flags: Z]
	ora $90.b,S		; 03 90 ; OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $2A.b		; 04 2A ; Test and set bits $2A.b [Reads: Accumulator] [Flags: Z]
	tsb $34.b		; 04 34 ; Test and set bits $34.b [Reads: Accumulator] [Flags: Z]
	tsb $3E.b		; 04 3E ; Test and set bits $3E.b [Reads: Accumulator] [Flags: Z]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	tsb $52.b		; 04 52 ; Test and set bits $52.b [Reads: Accumulator] [Flags: Z]
	tsb $5C.b		; 04 5C ; Test and set bits $5C.b [Reads: Accumulator] [Flags: Z]
	tsb $66.b		; 04 66 ; Test and set bits $66.b [Reads: Accumulator] [Flags: Z]
	tsb $70.b		; 04 70 ; Test and set bits $70.b [Reads: Accumulator] [Flags: Z]
	tsb $7A.b		; 04 7A ; Test and set bits $7A.b [Reads: Accumulator] [Flags: Z]
	tsb $84.b		; 04 84 ; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	tsb $8E.b		; 04 8E ; Test and set bits $8E.b [Reads: Accumulator] [Flags: Z]
	tsb $98.b		; 04 98 ; Test and set bits $98.b [Reads: Accumulator] [Flags: Z]
	tsb $A2.b		; 04 A2 ; Test and set bits $A2.b [Reads: Accumulator] [Flags: Z]
	tsb $AC.b		; 04 AC ; Test and set bits $AC.b [Reads: Accumulator] [Flags: Z]
	tsb $B6.b		; 04 B6 ; Test and set bits $B6.b [Reads: Accumulator] [Flags: Z]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	tsb $CA.b		; 04 CA ; Test and set bits $CA.b [Reads: Accumulator] [Flags: Z]
	tsb $D4.b		; 04 D4 ; Test and set bits $D4.b [Reads: Accumulator] [Flags: Z]
	tsb $DE.b		; 04 DE ; Test and set bits $DE.b [Reads: Accumulator] [Flags: Z]
	tsb $E8.b		; 04 E8 ; Test and set bits $E8.b [Reads: Accumulator] [Flags: Z]
	tsb $F2.b		; 04 F2 ; Test and set bits $F2.b [Reads: Accumulator] [Flags: Z]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	ora $98.b		; 05 98 ; Logical OR $98.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	asl $42.b		; 06 42 ; Arithmetic shift left $42.b [Reads: Direct Page] [Flags: ZNC]
	asl $4C.b		; 06 4C ; Arithmetic shift left $4C.b [Reads: Direct Page] [Flags: ZNC]
	asl $52.b		; 06 52 ; Arithmetic shift left $52.b [Reads: Direct Page] [Flags: ZNC]
	asl $58.b		; 06 58 ; Arithmetic shift left $58.b [Reads: Direct Page] [Flags: ZNC]
	asl $5E.b		; 06 5E ; Arithmetic shift left $5E.b [Reads: Direct Page] [Flags: ZNC]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: ZNC]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	asl $88.b		; 06 88 ; Arithmetic shift left $88.b [Reads: Direct Page] [Flags: ZNC]
	asl $94.b		; 06 94 ; Arithmetic shift left $94.b [Reads: Direct Page] [Flags: ZNC]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZNC]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZNC]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZNC]
	asl $C8.b		; 06 C8 ; Arithmetic shift left $C8.b [Reads: Direct Page] [Flags: ZNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$AA.b]		; 07 AA ; OR accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$26.b]		; 07 26 ; OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $084A.w		; 0E 4A 08 ; Arithmetic shift left $084A.w [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $82, $08, $CA		; 82 08 CA ; Branch always long to $82, $08, $CA [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora #$0920.w		; 09 20 09 ; Logical OR #$0920.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0930.w		; 09 30 09 ; Logical OR #$0930.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $09.b,X		; 36 09 ; Rotate left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $4209.w,X		; 3C 09 42 ; Test bits $4209.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora #$0948.w		; 09 48 09 ; Logical OR #$0948.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $6C09.w		; 4E 09 6C ; Logical shift right $6C09.w [Flags: ZNC]
	ora #$097E.w		; 09 7E 09 ; Logical OR #$097E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $0209.w		; 8E 09 02 ; Store X register to $0209.w [Reads: X Index]
	ora #$099E.w		; 09 9E 09 ; Logical OR #$099E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora #$09D8.w		; 09 D8 09 ; Logical OR #$09D8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora #$09FA.w		; 09 FA 09 ; Logical OR #$09FA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($9015.w)		; 6C 15 90 ; Jump indirect to ($9015.w) [Flow: jump]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0000.w,X		; 1D 00 00 ; OR accumulator with memory $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	bit $0A.b		; 24 0A ; Test bits $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	mvn $54,$0A		; 54 0A 54 ; Move block negative $54,$0A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	jmp.w [$0014]		; DC 14 00 ; Jump long indirect [$0014] [Flow: jump]
	ora $1E.b,X		; 15 1E ; OR accumulator with memory $1E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $52.b		; 06 52 ; Arithmetic shift left $52.b [Reads: Direct Page] [Flags: ZNC]
	asl $0600.w		; 0E 00 06 ; Arithmetic shift left $0600.w [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $C8.b,S		; 03 C8 ; OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $D8.b		; 02 D8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $48.b		; 05 48 ; Logical OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $4A.b		; 06 4A ; Arithmetic shift left $4A.b [Reads: Direct Page] [Flags: ZNC]
	asl $70.b		; 06 70 ; Arithmetic shift left $70.b [Reads: Direct Page] [Flags: ZNC]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: ZNC]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZNC]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZNC]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZNC]
	asl $C8.b		; 06 C8 ; Arithmetic shift left $C8.b [Reads: Direct Page] [Flags: ZNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$CA.b]		; 07 CA ; OR accumulator with memory (long) [$CA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$4A.b]		; 07 4A ; OR accumulator with memory (long) [$4A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0926.w		; 09 26 09 ; Logical OR #$0926.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora #$0912.w		; 09 12 09 ; Logical OR #$0912.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora #$1D7E.w		; 09 7E 1D ; Logical OR #$1D7E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0A.b,X		; 34 0A ; Test bits $0A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	mvp $54,$0A		; 44 0A 54 ; Move block positive $54,$0A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp ($840A.w)		; 6C 0A 84 ; Jump indirect to ($840A.w) [Flow: jump]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $240A.w		; 9C 0A 24 ; Store zero to $240A.w
	ora $48.b,X		; 15 48 ; OR accumulator with memory $48.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $5A.b,X		; 15 5A ; OR accumulator with memory $5A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	eor ($0E.b)		; 52 0E ; Exclusive OR accumulator with memory (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $A0.b		; 05 A0 ; Logical OR $A0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $A2.b		; 06 A2 ; Arithmetic shift left $A2.b [Reads: Direct Page] [Flags: ZNC]
	asl $12.b		; 06 12 ; Arithmetic shift left $12.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	lsr $0B.b		; 46 0B ; Logical shift right $0B.b [Reads: Direct Page] [Flags: ZNC]
	lsr $0B.b,X		; 56 0B ; Logical shift right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($1F.b)		; 52 1F ; Exclusive OR accumulator with memory (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora $820288.l,X		; 1F 88 02 82 ; Logical OR long $820288.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1DF2.w		; 0E F2 1D ; Arithmetic shift left $1DF2.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $B2.b		; 05 B2 ; Logical OR $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B2.b		; 05 B2 ; Logical OR $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B2.b		; 05 B2 ; Logical OR $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B2.b		; 05 B2 ; Logical OR $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E0.b		; 05 E0 ; Logical OR $E0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZNC]
	asl $E6.b		; 06 E6 ; Arithmetic shift left $E6.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	tsb $160B.w		; 0C 0B 16 ; Test and set bits $160B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $0B.b		; 26 0B ; Rotate left $0B.b [Reads: Direct Page] [Flags: ZNC]
	rol $0B.b,X		; 36 0B ; Rotate left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($1F.b)		; 52 1F ; Exclusive OR accumulator with memory (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora $BA0288.l,X		; 1F 88 02 BA ; Logical OR long $BA0288.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0E82.w		; 0E 82 0E ; Arithmetic shift left $0E82.w [Flags: ZNC]
	sbc ($1D.b)		; F2 1D ; Subtract with carry (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$5A.b]		; 07 5A ; OR accumulator with memory (long) [$5A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$70.b]		; 07 70 ; OR accumulator with memory (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $70.b		; 06 70 ; Arithmetic shift left $70.b [Reads: Direct Page] [Flags: ZNC]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: ZNC]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$5A.b]		; 07 5A ; OR accumulator with memory (long) [$5A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec $880A.w,X		; DE 0A 88 ; Decrement memory $880A.w,X [Reads: X Index] [Flags: ZN]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($B0.b,X)		; 01 B0 ; Logical OR ($B0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($A8.b,X)		; 01 A8 ; Logical OR ($A8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($8A.b)		; 92 8A ; Store accumulator (indirect) ($8A.b) [Reads: Accumulator, Direct Page]
	sta ($8A.b)		; 92 8A ; Store accumulator (indirect) ($8A.b) [Reads: Accumulator, Direct Page]
	ora $0D8B.w		; 0D 8B 0D ; Logical OR $0D8B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	and [$8C.b],Y		; 37 8C ; AND accumulator with memory (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$8C.b],Y		; 37 8C ; AND accumulator with memory (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $798B.w,Y		; 79 8B 79 ; Add $798B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sty $8C61.w		; 8C 61 8C ; Store Y register to $8C61.w [Reads: Y Index]
	adc ($8C.b,X)		; 61 8C ; Add with carry ($8C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sty $8C58.w		; 8C 58 8C ; Store Y register to $8C58.w [Reads: Y Index]
	adc ($8C.b,X)		; 61 8C ; Add with carry ($8C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8C.b,X)		; 61 8C ; Add with carry ($8C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sty $8C58.w		; 8C 58 8C ; Store Y register to $8C58.w [Reads: Y Index]
	adc ($8C.b,X)		; 61 8C ; Add with carry ($8C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8C.b,X)		; 61 8C ; Add with carry ($8C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sty $8C6A.w		; 8C 6A 8C ; Store Y register to $8C6A.w [Reads: Y Index]
	lda $B98C.w,Y		; B9 8C B9 ; Load $B98C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $8C6A.w		; 8C 6A 8C ; Store Y register to $8C6A.w [Reads: Y Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $8CB9.w		; 8C B9 8C ; Store Y register to $8CB9.w [Reads: Y Index]
	lda $6A8C.w,Y		; B9 8C 6A ; Load $6A8C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $8C6A.w		; 8C 6A 8C ; Store Y register to $8C6A.w [Reads: Y Index]
	lda $B98C.w,Y		; B9 8C B9 ; Load $B98C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $8C6A.w		; 8C 6A 8C ; Store Y register to $8C6A.w [Reads: Y Index]
	eor $F08D.w,X		; 5D 8D F0 ; Exclusive OR accumulator with memory $F08D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $8F62.w		; 8E 62 8F ; Store X register to $8F62.w [Reads: X Index]
	.db $62, $8F, $62		; 62 8F 62 ; Push effective relative address $62, $8F, $62 [Writes: Stack Pointer]
	sta $628F62.l		; 8F 62 8F 62 ; Store accumulator (long) $628F62.l [Reads: Accumulator]
	sta $628F62.l		; 8F 62 8F 62 ; Store accumulator (long) $628F62.l [Reads: Accumulator]
	sta $628F62.l		; 8F 62 8F 62 ; Store accumulator (long) $628F62.l [Reads: Accumulator]
	sta $628F62.l		; 8F 62 8F 62 ; Store accumulator (long) $628F62.l [Reads: Accumulator]
	sta $BD8F62.l		; 8F 62 8F BD ; Store accumulator (long) $BD8F62.l [Reads: Accumulator]
	sta $F89001.l		; 8F 01 90 F8 ; Store accumulator (long) $F89001.l [Reads: Accumulator]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	sta ($36.b),Y		; 91 36 ; Store accumulator ($36.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($3F.b),Y		; 91 3F ; Store accumulator ($3F.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($FB.b),Y		; 91 FB ; Store accumulator ($FB.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($FB.b)		; 92 FB ; Store accumulator (indirect) ($FB.b) [Reads: Accumulator, Direct Page]
	sta ($23.b)		; 92 23 ; Store accumulator (indirect) ($23.b) [Reads: Accumulator, Direct Page]
	sta ($6F.b,S),Y		; 93 6F ; Store accumulator (stack relative indirect indexed) ($6F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($87.b,S),Y		; 93 87 ; Store accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($87.b,S),Y		; 93 87 ; Store accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($B7.b,S),Y		; 93 B7 ; Store accumulator (stack relative indirect indexed) ($B7.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($6F.b,S),Y		; 93 6F ; Store accumulator (stack relative indirect indexed) ($6F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($56.b,S),Y		; 93 56 ; Store accumulator (stack relative indirect indexed) ($56.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $62.b,X		; 94 62 ; Store Y register $62.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta $628F62.l		; 8F 62 8F 62 ; Store accumulator (long) $628F62.l [Reads: Accumulator]
	sta $628F62.l		; 8F 62 8F 62 ; Store accumulator (long) $628F62.l [Reads: Accumulator]
	sta $628F62.l		; 8F 62 8F 62 ; Store accumulator (long) $628F62.l [Reads: Accumulator]
	sta $668F62.l		; 8F 62 8F 66 ; Store accumulator (long) $668F62.l [Reads: Accumulator]
	sty $88.b,X		; 94 88 ; Store Y register $88.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $B4.b,X		; 94 B4 ; Store Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $B4.b,X		; 94 B4 ; Store Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $56.b,X		; 94 56 ; Store Y register $56.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $BD.b,X		; 94 BD ; Store Y register $BD.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $DF.b,X		; 94 DF ; Store Y register $DF.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $DF.b,X		; 94 DF ; Store Y register $DF.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $DF.b,X		; 94 DF ; Store Y register $DF.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $DC.b,X		; 94 DC ; Store Y register $DC.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stx $C6.b,Y		; 96 C6 ; Store X register $C6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $9CC6.w		; 9C C6 9C ; Store zero to $9CC6.w
	adc $A38B.w,Y		; 79 8B A3 ; Add $A38B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F996.w,Y		; F9 96 F9 ; Subtract with carry $F996.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $1A.b,Y		; 96 1A ; Store X register $1A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$1A.b],Y		; 97 1A ; Store accumulator (long indexed) [$1A.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$1A.b],Y		; 97 1A ; Store accumulator (long indexed) [$1A.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$1A.b],Y		; 97 1A ; Store accumulator (long indexed) [$1A.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C6.b],Y		; 97 C6 ; Store accumulator (long indexed) [$C6.b],Y [Reads: Accumulator, Direct Page, Y Index]
	stz $9CC6.w		; 9C C6 9C ; Store zero to $9CC6.w
	rol $8F.b,X		; 36 8F ; Rotate left $8F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($EB.b,S),Y		; 93 EB ; Store accumulator (stack relative indirect indexed) ($EB.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	stx $8B7E.w		; 8E 7E 8B ; Store X register to $8B7E.w [Reads: X Index]
	bit #$898A.w		; 89 8A 89 ; Test bits #$898A.w with accumulator [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $8A.b		; [PATTERN: Memory clearing operation] A4 8A ; Load $8A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $8A.b		; A4 8A ; Load $8A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	eor $8C4F8C.l		; 4F 8C 4F 8C ; Exclusive OR accumulator with memory (long) $8C4F8C.l [Writes: Accumulator] [Flags: ZN]
	stz $8B.b,X		; 74 8B ; Store zero to $8B.b,X [Reads: X Index]
	stz $8B.b,X		; 74 8B ; Store zero to $8B.b,X [Reads: X Index]
	cmp $8E.b,S		; C3 8E ; Compare accumulator (stack relative) $8E.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $458F8A.l		; 8F 8A 8F 45 ; Store accumulator (long) $458F8A.l [Reads: Accumulator]
	.db $90, $8F		; 90 8F ; Branch if carry clear to $90, $8F [Flow: branch]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	.db $90, $F9		; 90 F9 ; Branch if carry clear to $90, $F9 [Flow: branch]
	.db $90, $20		; 90 20 ; Branch if carry clear to $90, $20 [Flow: branch]
	sta ($A3.b),Y		; 91 A3 ; Store accumulator ($A3.b),Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0E93.w		; 0E 93 0E ; Arithmetic shift left $0E93.w [Flags: ZNC]
	sta ($57.b,S),Y		; 93 57 ; Store accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($9F.b,S),Y		; 93 9F ; Store accumulator (stack relative indirect indexed) ($9F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($9F.b,S),Y		; 93 9F ; Store accumulator (stack relative indirect indexed) ($9F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($46.b,S),Y		; 93 46 ; Store accumulator (stack relative indirect indexed) ($46.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $8A.b,X		; 94 8A ; Store Y register $8A.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta $468F8A.l		; 8F 8A 8F 46 ; Store accumulator (long) $468F8A.l [Reads: Accumulator]
	sty $E4.b,X		; 94 E4 ; Store Y register $E4.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stx $74.b,Y		; 96 74 ; Store X register $74.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $97.b		; 02 97 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $97.b		; 02 97 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta [$1B.b],Y		; 97 1B ; Store accumulator (long indexed) [$1B.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$1B.b],Y		; 97 1B ; Store accumulator (long indexed) [$1B.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$1B.b],Y		; 97 1B ; Store accumulator (long indexed) [$1B.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$EB.b],Y		; 97 EB ; Store accumulator (long indexed) [$EB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	stz $9CEB.w		; 9C EB 9C ; Store zero to $9CEB.w
	eor [$93.b],Y		; 57 93 ; Exclusive OR accumulator with memory (long indexed) [$93.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $478F.w		; 0C 8F 47 ; Test and set bits $478F.w [Reads: Accumulator] [Flags: Z]
	sta ($BE.b,S),Y		; 93 BE ; Store accumulator (stack relative indirect indexed) ($BE.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	stx $90E2.w		; 8E E2 90 ; Store X register to $90E2.w [Reads: X Index]
.INDEX 8
	sep #$90		; E2 90
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B58F8A.l		; 8F 8A 8F B5 ; Store accumulator (long) $B58F8A.l [Reads: Accumulator]
	sta [$89.b],Y		; 97 89 ; Store accumulator (long indexed) [$89.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit #$7E8A.w		; 89 8A 7E ; Test bits #$7E8A.w with accumulator [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ror $F98B.w,X		; 7E 8B F9 ; Rotate right $F98B.w,X [Reads: X Index] [Flags: ZNC]
	.db $90, $81		; 90 81 ; Branch if carry clear to $90, $81 [Flow: branch]
	lda ($7F.b,S),Y		; B3 7F ; Load accumulator (stack relative indirect indexed) ($7F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $A3.b,X		; B4 A3 ; Load Y register $A3.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$8B.b		; E0 8B ; Compare #$8B.b with X register [Reads: X Index] [Flags: ZNC]
	pea $0E8B.w		; F4 8B 0E ; Push absolute address $0E8B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sty $8C22.w		; 8C 22 8C ; Store Y register to $8C22.w [Reads: Y Index]
	jmp.w [$678D]		; DC 8D 67 ; Jump long indirect [$678D] [Flow: jump]
	stx $8E7B.w		; 8E 7B 8E ; Store X register to $8E7B.w [Reads: X Index]
	sta $8E.b,X		; 95 8E ; Store accumulator to $8E.b,X [Reads: Accumulator, X Index]
	lda #$678E.w		; A9 8E 67 ; Load #$678E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	stx $8E7B.w		; 8E 7B 8E ; Store X register to $8E7B.w [Reads: X Index]
	sta $8E.b,X		; 95 8E ; Store accumulator to $8E.b,X [Reads: Accumulator, X Index]
	lda #$A38E.w		; A9 8E A3 ; Load #$A38E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $D990.w,Y		; D9 90 D9 ; Compare accumulator $D990.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	sta ($62.b),Y		; 91 62 ; Store accumulator ($62.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta $DC8F62.l		; 8F 62 8F DC ; Store accumulator (long) $DC8F62.l [Reads: Accumulator]
	sta [$92.b],Y		; 97 92 ; Store accumulator (long indexed) [$92.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($8A.b)		; 92 8A ; Store accumulator (indirect) ($8A.b) [Reads: Accumulator, Direct Page]
	bit #$898B.w		; 89 8B 89 ; Test bits #$898B.w with accumulator [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($91.b),Y		; 11 91 ; OR accumulator with memory ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($76.b,S),Y		; 93 76 ; Store accumulator (stack relative indirect indexed) ($76.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda ($74.b,S),Y		; B3 74 ; Load accumulator (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $A3.b,X		; B4 A3 ; Load Y register $A3.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $8B.b,X		; 94 8B ; Store Y register $8B.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp [$8C.b]		; C7 8C ; Compare accumulator (long) [$8C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sty $8B.b,X		; 94 8B ; Store Y register $8B.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $A28D.w,X		; 9E 8D A2 ; Store zero to $A28D.w,X [Reads: X Index]
	sta $A58FA5.l		; 8F A5 8F A5 ; Store accumulator (long) $A58FA5.l [Reads: Accumulator]
	sta $A58FA5.l		; 8F A5 8F A5 ; Store accumulator (long) $A58FA5.l [Reads: Accumulator]
	sta $A58FA5.l		; 8F A5 8F A5 ; Store accumulator (long) $A58FA5.l [Reads: Accumulator]
	sta $8F918F.l		; 8F 8F 91 8F ; Store accumulator (long) $8F918F.l [Reads: Accumulator]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($1C.b),Y		; 91 1C ; Store accumulator ($1C.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($BC.b)		; 92 BC ; Store accumulator (indirect) ($BC.b) [Reads: Accumulator, Direct Page]
	sta $A58FBC.l		; 8F BC 8F A5 ; Store accumulator (long) $A58FBC.l [Reads: Accumulator]
	sta $988FA5.l		; 8F A5 8F 98 ; Store accumulator (long) $988FA5.l [Reads: Accumulator]
	sta ($98.b)		; 92 98 ; Store accumulator (indirect) ($98.b) [Reads: Accumulator, Direct Page]
	sta ($98.b)		; 92 98 ; Store accumulator (indirect) ($98.b) [Reads: Accumulator, Direct Page]
	sta ($98.b)		; 92 98 ; Store accumulator (indirect) ($98.b) [Reads: Accumulator, Direct Page]
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Accumulator, Direct Page]
	sta $9501.w		; 8D 01 95 ; Store accumulator to $9501.w [Reads: Accumulator]
	lda $8F.b		; A5 8F ; Load $8F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $8F9D95.l		; EF 95 9D 8F ; Subtract with carry (long) $8F9D95.l [Writes: Accumulator] [Flags: ZVNC]
	and ($97.b,S),Y		; 33 97 ; AND accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$2993]		; DC 93 29 ; Jump long indirect [$2993] [Flow: jump]
	sty $A5.b,X		; 94 A5 ; Store Y register $A5.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta $A58FA5.l		; 8F A5 8F A5 ; Store accumulator (long) $A58FA5.l [Reads: Accumulator]
	sta $A58FA5.l		; 8F A5 8F A5 ; Store accumulator (long) $A58FA5.l [Reads: Accumulator]
	sta $A58FA5.l		; 8F A5 8F A5 ; Store accumulator (long) $A58FA5.l [Reads: Accumulator]
	sta $A58FA5.l		; 8F A5 8F A5 ; Store accumulator (long) $A58FA5.l [Reads: Accumulator]
	sta $A38FA5.l		; 8F A5 8F A3 ; Store accumulator (long) $A38FA5.l [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $0B.b		; 66 0B ; Rotate right $0B.b [Reads: Direct Page] [Flags: ZNC]
	stx $0B.b		; 86 0B ; Store X register to $0B.b [Reads: X Index]
	ldx $0B.b		; A6 0B ; Load $0B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $0B.b		; C6 0B ; Decrement $0B.b [Reads: Direct Page] [Flags: ZN]
	ror $0C.b		; 66 0C ; Rotate right $0C.b [Reads: Direct Page] [Flags: ZNC]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	inc $0B.b		; E6 0B ; Increment $0B.b [Reads: Direct Page] [Flags: ZN]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	rol $0C.b		; 26 0C ; Rotate left $0C.b [Reads: Direct Page] [Flags: ZNC]
	lsr $0C.b		; 46 0C ; Logical shift right $0C.b [Reads: Direct Page] [Flags: ZNC]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: ZN]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: ZNC]
	rol $0D.b		; 26 0D ; Rotate left $0D.b [Reads: Direct Page] [Flags: ZNC]
	lsr $0D.b		; 46 0D ; Logical shift right $0D.b [Reads: Direct Page] [Flags: ZNC]
	ror $0D.b		; 66 0D ; Rotate right $0D.b [Reads: Direct Page] [Flags: ZNC]
	ror $960D.w,X		; 7E 0D 96 ; Rotate right $960D.w,X [Reads: X Index] [Flags: ZNC]
	ora $0DAE.w		; 0D AE 0D ; Logical OR $0DAE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: ZN]
	dec $F60D.w,X		; DE 0D F6 ; Decrement memory $F60D.w,X [Reads: X Index] [Flags: ZN]
	ora $0E0E.w		; 0D 0E 0E ; Logical OR $0E0E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $A8.b,S		; 03 A8 ; OR accumulator with stack relative $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $B0.b,S		; 03 B0 ; OR accumulator with stack relative $B0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $32.b,S		; 03 32 ; OR accumulator with stack relative $32.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0E26.w		; 0E 26 0E ; Arithmetic shift left $0E26.w [Flags: ZNC]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $0ECA.w		; 0E CA 0E ; Arithmetic shift left $0ECA.w [Flags: ZNC]
	cmp ($0E.b)		; D2 0E ; Compare accumulator (indirect) ($0E.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $DE0E.w,X		; DE 0E DE ; Decrement memory $DE0E.w,X [Reads: X Index] [Flags: ZN]
	asl $0F1E.w		; 0E 1E 0F ; Arithmetic shift left $0F1E.w [Flags: ZNC]
	rol $5E0F.w,X		; 3E 0F 5E ; Rotate left $5E0F.w,X [Reads: X Index] [Flags: ZNC]
	ora $F60F6A.l		; 0F 6A 0F F6 ; OR accumulator with memory (long) $F60F6A.l [Writes: Accumulator] [Flags: ZN]
	asl $0F72.w		; 0E 72 0F ; Arithmetic shift left $0F72.w [Flags: ZNC]
	sta ($0F.b)		; 92 0F ; Store accumulator (indirect) ($0F.b) [Reads: Accumulator, Direct Page]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	.db $10, $52		; 10 52 ; Branch if plus to $10, $52 [Flow: branch]
	asl $1108.w		; 0E 08 11 ; Arithmetic shift left $1108.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($A8.b),Y		; 11 A8 ; OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($78.b),Y		; 11 78 ; OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $88.b		; 14 88 ; Test and reset bits $88.b [Reads: Accumulator] [Flags: Z]
	trb $62.b		; 14 62 ; Test and reset bits $62.b [Reads: Accumulator] [Flags: Z]
	jsr $2086.w		; 20 86 20 ; Jump to subroutine at $2086.w [Writes: Stack Pointer] [Flow: call]
	sbc $ED97.w		; ED 97 ED ; Subtract $ED97.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$13.b],Y		; 97 13 ; Store accumulator (long indexed) [$13.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$98		; 54 98 54 ; Move block negative $54,$98 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$98		; 54 98 54 ; Move block negative $54,$98 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $985C98.l		; 5C 98 5C 98 ; Jump long to $985C98.l [Flow: jump]
	jmp $985C98.l		; 5C 98 5C 98 ; Jump long to $985C98.l [Flow: jump]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sbc $3097.w		; ED 97 30 ; Subtract $3097.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $6F9A8D.l		; 8F 8D 9A 6F ; Store accumulator (long) $6F9A8D.l [Reads: Accumulator]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta ($98.b)		; 92 98 ; Store accumulator (indirect) ($98.b) [Reads: Accumulator, Direct Page]
	.db $30, $8F		; 30 8F ; Branch if minus to $30, $8F [Flow: branch]
	inc $E69A.w		; EE 9A E6 ; Increment $E69A.w [Flags: ZN]
	sta $97ED.w,Y		; 99 ED 97 ; Store accumulator to $97ED.w,Y [Reads: Accumulator, Y Index]
	sbc $3097.w		; ED 97 30 ; Subtract $3097.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $EE9895.l		; 8F 95 98 EE ; Store accumulator (long) $EE9895.l [Reads: Accumulator]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc $4897.w		; ED 97 48 ; Subtract $4897.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	.db $50, $9B		; 50 9B ; Branch if overflow clear to $50, $9B [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $86.b		; A4 86 ; Load $86.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $5D.b		; A4 5D ; Load $5D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$6D.b		; A2 6D ; Load #$6D.b into X register [Writes: X Index] [Flags: ZN]
	ldx #$C7.b		; A2 C7 ; Load #$C7.b into X register [Writes: X Index] [Flags: ZN]
	ldx #$DF.b		; A2 DF ; Load #$DF.b into X register [Writes: X Index] [Flags: ZN]
	ldx #$95.b		; A2 95 ; Load #$95.b into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $AE9B.w,X		; 1E 9B AE ; Arithmetic shift left $AE9B.w,X [Reads: X Index] [Flags: ZNC]
	lda $F8.b,S		; A3 F8 ; Load accumulator (stack relative) $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy $A4.b,X		; B4 A4 ; Load Y register $A4.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	and ($A5.b,S),Y		; 33 A5 ; AND accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $A4.b,X		; F5 A4 ; Subtract $A4.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $A5.b		; 84 A5 ; Store Y register to $A5.b [Reads: Y Index]
	lsr $9B.b,X		; 56 9B ; Logical shift right $9B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $99.b		; E6 99 ; Increment $99.b [Reads: Direct Page] [Flags: ZN]
	tsb $129A.w		; 0C 9A 12 ; Test and set bits $129A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	bit $5416.w		; 2C 16 54 ; Test bits $5416.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	asl $0E.b,X		; 16 0E ; Arithmetic shift left $0E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $FC0A.w		; 0C 0A FC ; Test and set bits $FC0A.w [Reads: Accumulator] [Flags: Z]
	ora #$09FE.w		; 09 FE 09 ; Logical OR #$09FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	ora ($0A.b)		; 12 0A ; OR accumulator with memory (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora $1DE2.w,X		; 1D E2 1D ; OR accumulator with memory $1DE2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $1D.b,X		; D6 1D ; Decrement memory $1D.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	nop		; EA ; No operation
	ora $15FC.w,X		; 1D FC 15 ; OR accumulator with memory $15FC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $1DF2.w,X		; 1D F2 1D ; OR accumulator with memory $1DF2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	trb $94.b		; 14 94 ; Test and reset bits $94.b [Reads: Accumulator] [Flags: Z]
	trb $9C.b		; 14 9C ; Test and reset bits $9C.b [Reads: Accumulator] [Flags: Z]
	trb $A4.b		; 14 A4 ; Test and reset bits $A4.b [Reads: Accumulator] [Flags: Z]
	trb $E8.b		; 14 E8 ; Test and reset bits $E8.b [Reads: Accumulator] [Flags: Z]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($E8.b),Y		; 11 E8 ; OR accumulator with memory ($E8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B8.b)		; 12 B8 ; OR accumulator with memory (indirect) ($B8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $C8.b,S		; 03 C8 ; OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($68.b)		; 12 68 ; OR accumulator with memory (indirect) ($68.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($88.b)		; 12 88 ; OR accumulator with memory (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0E62.w		; 0E 62 0E ; Arithmetic shift left $0E62.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $0E, $8A		; 82 0E 8A ; Branch always long to $82, $0E, $8A [Flow: branch]
	asl $14AC.w		; 0E AC 14 ; Arithmetic shift left $14AC.w [Flags: ZNC]
	cpy $14.b		; C4 14 ; Compare $14.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $BE.b,X		; 16 BE ; Arithmetic shift left $BE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $1CEE.w		; 1C EE 1C ; Test and reset bits $1CEE.w [Reads: Accumulator] [Flags: Z]
	asl $4E1D.w,X		; 1E 1D 4E ; Arithmetic shift left $4E1D.w,X [Reads: X Index] [Flags: ZNC]
	ora $1D8E.w,X		; 1D 8E 1D ; OR accumulator with memory $1D8E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $1D.b,Y		; 96 1D ; Store X register $1D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $A61D.w,X		; 9E 1D A6 ; Store zero to $A61D.w,X [Reads: X Index]
	ora $1DAE.w,X		; 1D AE 1D ; OR accumulator with memory $1DAE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $1D.b,Y		; B6 1D ; Load X register $1D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $C61D.w,Y		; BE 1D C6 ; Load X register $C61D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $1DCE.w,X		; 1D CE 1D ; OR accumulator with memory $1DCE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $6002.w		; 20 02 60 ; Jump to subroutine at $6002.w [Writes: Stack Pointer] [Flow: call]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $3A.b		; 02 3A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $921F62.l,X		; 1F 62 1F 92 ; Logical OR long $921F62.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $161FF2.l,X		; 1F F2 1F 16 ; Logical OR long $161FF2.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $1F42.w		; 20 42 1F ; Jump to subroutine at $1F42.w [Writes: Stack Pointer] [Flow: call]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $1F4A.w		; 0E 4A 1F ; Arithmetic shift left $1F4A.w [Flags: ZNC]
	eor ($1F.b)		; 52 1F ; Exclusive OR accumulator with memory (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora $62202E.l,X		; 1F 2E 20 62 ; Logical OR long $62202E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $09B8.w		; 20 B8 09 ; Jump to subroutine at $09B8.w [Writes: Stack Pointer] [Flow: call]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora #$09D0.w		; 09 D0 09 ; Logical OR #$09D0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda ($0F.b)		; B2 0F ; Load accumulator (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $0F.b		; C4 0F ; Compare $0F.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	pea $180F.w		; F4 0F 18 ; Push absolute address $180F.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	.db $10, $B4		; 10 B4 ; Branch if plus to $10, $B4 [Flow: branch]
	ora $D8.b,X		; 15 D8 ; OR accumulator with memory $D8.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F6.b,X		; 15 F6 ; OR accumulator with memory $F6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $0EBA.w		; 20 BA 0E ; Jump to subroutine at $0EBA.w [Writes: Stack Pointer] [Flow: call]
	inc $22.b		; E6 22 ; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	inc $DA22.w		; EE 22 DA ; Increment $DA22.w [Flags: ZN]
	ora $1E.b		; 05 1E ; Logical OR $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cpx #$2A.b		; E0 2A ; Compare #$2A.b with X register [Reads: X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $2F2A.w		; 2D 2A 2F ; Logical AND $2F2A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $22.b,X		; F6 22 ; Increment memory $22.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	asl $23.b,X		; 16 23 ; Arithmetic shift left $23.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $4623.w		; 2E 23 46 ; Rotate left $4623.w [Flags: ZNC]
	and $5E.b,S		; 23 5E ; AND accumulator with stack relative $5E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $76.b,S		; 23 76 ; AND accumulator with stack relative $76.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $B6.b,S		; 23 B6 ; AND accumulator with stack relative $B6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $9A.b,S		; 23 9A ; AND accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0000.w,X		; 1E 00 00 ; Arithmetic shift left $0000.w,X [Reads: X Index] [Flags: ZNC]
	rol $24.b,X		; 36 24 ; Rotate left $24.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $B614.w		; 9C 14 B6 ; Store zero to $B614.w
	bit $E6.b		; 24 E6 ; Test bits $E6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $16.b		; 24 16 ; Test bits $16.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $28.b		; 25 28 ; Logical AND $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $10, $70		; 10 70 ; Branch if plus to $10, $70 [Flow: branch]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9D5D.w,X		; 9D 5D 9D ; Store accumulator to $9D5D.w,X [Reads: Accumulator, X Index]
	adc [$9D.b]		; [PATTERN: Memory clearing operation] 67 9D ; Add with carry (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $9C3E.w		; 9C 3E 9C ; Store zero to $9C3E.w
	rol $3E9C.w,X		; 3E 9C 3E ; Rotate left $3E9C.w,X [Reads: X Index] [Flags: ZNC]
	stz $9C3E.w		; 9C 3E 9C ; Store zero to $9C3E.w
	rol $3E9C.w,X		; [PATTERN: Memory clearing operation] 3E 9C 3E ; Rotate left $3E9C.w,X [Reads: X Index] [Flags: ZNC]
	stz $9C3E.w		; 9C 3E 9C ; Store zero to $9C3E.w
	rol $3E9C.w,X		; 3E 9C 3E ; Rotate left $3E9C.w,X [Reads: X Index] [Flags: ZNC]
	stz $9C44.w		; 9C 44 9C ; Store zero to $9C44.w
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $9C3E.w		; 9C 3E 9C ; Store zero to $9C3E.w
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	lda #$959A.w		; A9 9A 95 ; Load #$959A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $99.b		; E6 99 ; Increment $99.b [Reads: Direct Page] [Flags: ZN]
	stx $9D.b,Y		; 96 9D ; Store X register $9D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta ($B4.b,S),Y		; 93 B4 ; Store accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	mvp $AE,$9C		; 44 9C AE ; Move block positive $AE,$9C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $98		; D0 98 ; Branch if not equal to $D0, $98 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $A30C.w,Y		; 99 0C A3 ; Store accumulator to $A30C.w,Y [Reads: Accumulator, Y Index]
	trb $6EA3.w		; 1C A3 6E ; Test and reset bits $6EA3.w [Reads: Accumulator] [Flags: Z]
	lda $D2.b,S		; A3 D2 ; Load accumulator (stack relative) $D2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $26.b		; A6 26 ; Load $26.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $95.b		; A6 95 ; Load $95.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	stz $A6.b		; 64 A6 ; Store zero to $A6.b
	sta $A6.b,X		; 95 A6 ; Store accumulator to $A6.b,X [Reads: Accumulator, X Index]
	trb $4AA7.w		; 1C A7 4A ; Test and reset bits $4AA7.w [Reads: Accumulator] [Flags: Z]
	lda [$E5.b]		; A7 E5 ; Load accumulator (long) [$E5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $B306.w,X		; 9D 06 B3 ; Store accumulator to $B306.w,X [Reads: Accumulator, X Index]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	.db $30, $9E		; 30 9E ; Branch if minus to $30, $9E [Flow: branch]
	lda $9E.b,S		; A3 9E ; Load accumulator (stack relative) $9E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $B3.b,X		; 95 B3 ; Store accumulator to $B3.b,X [Reads: Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($BB.b,S),Y		; B3 BB ; Load accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9A00.w,Y		; 99 00 9A ; Store accumulator to $9A00.w,Y [Reads: Accumulator, Y Index]
	.db $80, $A3		; 80 A3 ; Branch always to $80, $A3 [Flow: branch]
	cmp $D99B.w,Y		; D9 9B D9 ; Compare accumulator $D99B.w,Y [Reads: Y Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $9B		; 50 9B ; Branch if overflow clear to $50, $9B [Flow: branch]
	.db $50, $9B		; 50 9B ; Branch if overflow clear to $50, $9B [Flow: branch]
	cmp $D99B.w,Y		; D9 9B D9 ; Compare accumulator $D99B.w,Y [Reads: Y Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $90, $9A		; 90 9A ; Branch if carry clear to $90, $9A [Flow: branch]
	.db $90, $9A		; 90 9A ; Branch if carry clear to $90, $9A [Flow: branch]
	lda $9A.b,S		; A3 9A ; Load accumulator (stack relative) $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $9A.b,S		; A3 9A ; Load accumulator (stack relative) $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sbc ($B3.b,X)		; E1 B3 ; Subtract with carry ($B3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9597.w		; ED 97 95 ; Subtract $9597.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	asl $9A.b		; 06 9A ; Arithmetic shift left $9A.b [Reads: Direct Page] [Flags: ZNC]
	ror $9A.b		; 66 9A ; Rotate right $9A.b [Reads: Direct Page] [Flags: ZNC]
	tsb $E69A.w		; 0C 9A E6 ; Test and set bits $E69A.w [Reads: Accumulator] [Flags: Z]
	sta $9895.w,Y		; 99 95 98 ; Store accumulator to $9895.w,Y [Reads: Accumulator, Y Index]
	sta $959A.w		; 8D 9A 95 ; Store accumulator to $959A.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $A0.b,X		; 95 A0 ; Store accumulator to $A0.b,X [Reads: Accumulator, X Index]
	sty $A1.b,X		; 94 A1 ; Store Y register $A1.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	jmp ($949D.w)		; 6C 9D 94 ; Jump indirect to ($949D.w) [Flow: jump]
	lda ($A3.b,X)		; A1 A3 ; Load accumulator ($A3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $959A.w		; 0C 9A 95 ; Test and set bits $959A.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	lda $A7.b,S		; A3 A7 ; Load accumulator (stack relative) $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A7.b,S		; A3 A7 ; Load accumulator (stack relative) $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($A1.b),Y		; D1 A1 ; Compare accumulator ($A1.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sbc $E697.w		; ED 97 E6 ; Subtract $E697.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $99E6.w,Y		; 99 E6 99 ; Store accumulator to $99E6.w,Y [Reads: Accumulator, Y Index]
	cpx $EC99.w		; EC 99 EC ; Compare $EC99.w with X register [Reads: X Index] [Flags: ZNC]
	sta $97ED.w,Y		; 99 ED 97 ; Store accumulator to $97ED.w,Y [Reads: Accumulator, Y Index]
	inc $99.b		; E6 99 ; Increment $99.b [Reads: Direct Page] [Flags: ZN]
	inc $99.b		; E6 99 ; Increment $99.b [Reads: Direct Page] [Flags: ZN]
	cpx $EC99.w		; EC 99 EC ; Compare $EC99.w with X register [Reads: X Index] [Flags: ZNC]
	sta $A7B6.w,Y		; 99 B6 A7 ; Store accumulator to $A7B6.w,Y [Reads: Accumulator, Y Index]
	cmp ($A7.b,S),Y		; D3 A7 ; Compare accumulator (stack relative indirect indexed) ($A7.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp $559D.w,Y		; D9 9D 55 ; Compare accumulator $559D.w,Y [Reads: Y Index] [Flags: ZNC]
	ldx #$DC.b		; A2 DC ; Load #$DC.b into X register [Writes: X Index] [Flags: ZN]
	lda [$95.b]		; A7 95 ; Load accumulator (long) [$95.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $9A.b		; 06 9A ; Arithmetic shift left $9A.b [Reads: Direct Page] [Flags: ZNC]
	asl $9A.b		; 06 9A ; Arithmetic shift left $9A.b [Reads: Direct Page] [Flags: ZNC]
	.db $F0, $A7		; F0 A7 ; Branch if equal to $F0, $A7 [Flow: branch]
	inc $99.b		; E6 99 ; Increment $99.b [Reads: Direct Page] [Flags: ZN]
	sbc $0997.w		; ED 97 09 ; Subtract $0997.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	lda $8A.b,S		; A3 8A ; Load accumulator (stack relative) $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $84A8.w		; 1C A8 84 ; Test and reset bits $84A8.w [Reads: Accumulator] [Flags: Z]
	lda #$AAD7.w		; A9 D7 AA ; Load #$AAD7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00AB.w,Y		; 99 AB 00 ; Store accumulator to $00AB.w,Y [Reads: Accumulator, Y Index]
	jsr $027E.w		; 20 7E 02 ; Jump to subroutine at $027E.w [Writes: Stack Pointer] [Flow: call]
	jsr $047E.w		; 20 7E 04 ; Jump to subroutine at $047E.w [Writes: Stack Pointer] [Flow: call]
	jsr $067E.w		; 20 7E 06 ; Jump to subroutine at $067E.w [Writes: Stack Pointer] [Flow: call]
	jsr $807E.w		; 20 7E 80 ; Jump to subroutine at $807E.w [Writes: Stack Pointer] [Flow: call]
	jsr $827E.w		; 20 7E 82 ; Jump to subroutine at $827E.w [Writes: Stack Pointer] [Flow: call]
	jsr $847E.w		; 20 7E 84 ; Jump to subroutine at $847E.w [Writes: Stack Pointer] [Flow: call]
	jsr $867E.w		; 20 7E 86 ; Jump to subroutine at $867E.w [Writes: Stack Pointer] [Flow: call]
	jsr $007E.w		; 20 7E 00 ; Jump to subroutine at $007E.w [Writes: Stack Pointer] [Flow: call]
	and ($7E.b,X)		; 21 7E ; Logical AND ($7E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $21		; 80 21 ; Branch always to $80, $21 [Flow: branch]
	ror $2200.w,X		; 7E 00 22 ; Rotate right $2200.w,X [Reads: X Index] [Flags: ZNC]
	ror $4000.w,X		; 7E 00 40 ; Rotate right $4000.w,X [Reads: X Index] [Flags: ZNC]
	ror $4002.w,X		; 7E 02 40 ; Rotate right $4002.w,X [Reads: X Index] [Flags: ZNC]
	ror $4004.w,X		; 7E 04 40 ; Rotate right $4004.w,X [Reads: X Index] [Flags: ZNC]
	ror $4006.w,X		; 7E 06 40 ; Rotate right $4006.w,X [Reads: X Index] [Flags: ZNC]
	ror $4080.w,X		; 7E 80 40 ; Rotate right $4080.w,X [Reads: X Index] [Flags: ZNC]
	ror $4082.w,X		; 7E 82 40 ; Rotate right $4082.w,X [Reads: X Index] [Flags: ZNC]
	ror $4084.w,X		; 7E 84 40 ; Rotate right $4084.w,X [Reads: X Index] [Flags: ZNC]
	ror $4086.w,X		; 7E 86 40 ; Rotate right $4086.w,X [Reads: X Index] [Flags: ZNC]
	ror $4100.w,X		; 7E 00 41 ; Rotate right $4100.w,X [Reads: X Index] [Flags: ZNC]
	ror $4180.w,X		; 7E 80 41 ; Rotate right $4180.w,X [Reads: X Index] [Flags: ZNC]
	ror $4200.w,X		; 7E 00 42 ; Rotate right $4200.w,X [Reads: X Index] [Flags: ZNC]
	ror $6420.w,X		; 7E 20 64 ; Rotate right $6420.w,X [Reads: X Index] [Flags: ZNC]
	lda $9C.b,X		; B5 9C ; Load $9C.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pea $C203.w		; F4 03 C2 ; Push absolute address $C203.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $30, $AE		; 30 AE ; Branch if minus to $30, $AE [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	lda $1F8001.l,X		; BF 01 80 1F ; Load long $1F8001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B8.b		; 85 B8 ; Store accumulator to $B8.b [Reads: Accumulator]
	lda $1F8000.l,X		; BF 00 80 1F ; Load long $1F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	lda $AD.b		; A5 AD ; Load $AD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0428.w		; [PATTERN: Memory clearing operation] 8D 28 04 ; Store accumulator to $0428.w [Reads: Accumulator]
	lda #$FF30.w		; A9 30 FF ; Load #$FF30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $041C.w		; 8D 1C 04 ; Store accumulator to $041C.w [Reads: Accumulator]
	stz $041A.w		; 9C 1A 04 ; Store zero to $041A.w
	stz $0420.w		; 9C 20 04 ; Store zero to $0420.w
	stz $0312.w		; [PATTERN: Memory clearing operation] 9C 12 03 ; Store zero to $0312.w
	stz $0310.w		; 9C 10 03 ; Store zero to $0310.w
	stz $0422.w		; 9C 22 04 ; Store zero to $0422.w
	stz $0424.w		; 9C 24 04 ; Store zero to $0424.w
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0436.w		; [PATTERN: Memory clearing operation] 8D 36 04 ; Store accumulator to $0436.w [Reads: Accumulator]
	stz $0452.w		; 9C 52 04 ; Store zero to $0452.w
	stz $0454.w		; 9C 54 04 ; Store zero to $0454.w
	stz $0456.w		; 9C 56 04 ; Store zero to $0456.w
	stz $068A.w		; 9C 8A 06 ; Store zero to $068A.w
	stz $044E.w		; [PATTERN: Memory clearing operation] 9C 4E 04 ; Store zero to $044E.w
	stz $0450.w		; 9C 50 04 ; Store zero to $0450.w
	stz $FC.b		; 64 FC ; Store zero to $FC.b
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	stz $0438.w		; 9C 38 04 ; Store zero to $0438.w
	stz $043A.w		; [PATTERN: Memory clearing operation] 9C 3A 04 ; Store zero to $043A.w
	stz $043C.w		; 9C 3C 04 ; Store zero to $043C.w
	stz $043E.w		; 9C 3E 04 ; Store zero to $043E.w
	stz $0440.w		; 9C 40 04 ; Store zero to $0440.w
	stz $0442.w		; 9C 42 04 ; Store zero to $0442.w
	stz $0444.w		; [PATTERN: Memory clearing operation] 9C 44 04 ; Store zero to $0444.w
	stz $0446.w		; 9C 46 04 ; Store zero to $0446.w
	stz $0448.w		; 9C 48 04 ; Store zero to $0448.w
	stz $049A.w		; 9C 9A 04 ; Store zero to $049A.w
	stz $049C.w		; 9C 9C 04 ; Store zero to $049C.w
	stz $049E.w		; [PATTERN: Memory clearing operation] 9C 9E 04 ; Store zero to $049E.w
	stz $04AE.w		; 9C AE 04 ; Store zero to $04AE.w
	stz $047E.w		; 9C 7E 04 ; Store zero to $047E.w
	stz $0480.w		; 9C 80 04 ; Store zero to $0480.w
	stz $0482.w		; 9C 82 04 ; Store zero to $0482.w
	stz $0484.w		; [PATTERN: Memory clearing operation] 9C 84 04 ; Store zero to $0484.w
	stz $04A2.w		; 9C A2 04 ; Store zero to $04A2.w
	stz $04A4.w		; 9C A4 04 ; Store zero to $04A4.w
	stz $04A6.w		; 9C A6 04 ; Store zero to $04A6.w
	stz $04A8.w		; 9C A8 04 ; Store zero to $04A8.w
	stz $19E2.w		; [PATTERN: Memory clearing operation] 9C E2 19 ; Store zero to $19E2.w
	stz $19E4.w		; 9C E4 19 ; Store zero to $19E4.w
	stz $19E6.w		; 9C E6 19 ; Store zero to $19E6.w
	stz $19E8.w		; 9C E8 19 ; Store zero to $19E8.w
	stz $19E0.w		; 9C E0 19 ; Store zero to $19E0.w
	stz $0430.w		; [PATTERN: Memory clearing operation] 9C 30 04 ; Store zero to $0430.w
	stz $0432.w		; 9C 32 04 ; Store zero to $0432.w
	stz $042C.w		; 9C 2C 04 ; Store zero to $042C.w
	stz $042E.w		; 9C 2E 04 ; Store zero to $042E.w
	stz $0496.w		; 9C 96 04 ; Store zero to $0496.w
	stz $0498.w		; [PATTERN: Memory clearing operation] 9C 98 04 ; Store zero to $0498.w
	stz $04B0.w		; 9C B0 04 ; Store zero to $04B0.w
	ldx #$1E.b		; A2 1E ; Load #$1E.b into X register [Writes: X Index] [Flags: ZN]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $9E.b		; [PATTERN: Memory clearing operation] 04 9E ; Test and set bits $9E.b [Reads: Accumulator] [Flags: Z]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: ZN]
	stz $1980.w,X		; 9E 80 19 ; Store zero to $1980.w,X [Reads: X Index]
	stz $19C0.w,X		; 9E C0 19 ; Store zero to $19C0.w,X [Reads: X Index]
	stz $04F0.w,X		; 9E F0 04 ; Store zero to $04F0.w,X [Reads: X Index]
	stz $0500.w,X		; [PATTERN: Memory clearing operation] 9E 00 05 ; Store zero to $0500.w,X [Reads: X Index]
	stz $0520.w,X		; 9E 20 05 ; Store zero to $0520.w,X [Reads: X Index]
	stz $0540.w,X		; 9E 40 05 ; Store zero to $0540.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $E7		; 10 E7 ; Branch if plus to $10, $E7 [Flow: branch]
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	jsr $89DC.w		; 20 DC 89 ; Jump to subroutine at $89DC.w [Writes: Stack Pointer] [Flow: call]
	ldy $BA.b		; A4 BA ; Load $BA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $040E.w		; 8D 0E 04 ; Store accumulator to $040E.w [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04EF30.l,X		; BF 30 EF 04 ; Load long $04EF30.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B8.b		; 85 B8 ; Store accumulator to $B8.b [Reads: Accumulator]
	lda $04EF2F.l,X		; BF 2F EF 04 ; Load long $04EF2F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	jsr $88E4.w		; 20 E4 88 ; Jump to subroutine at $88E4.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $BA.b		; 84 BA ; Store Y register to $BA.b [Reads: Y Index]
	ldx $0110.w		; AE 10 01 ; Load $0110.w into X register [Writes: X Index] [Flags: ZN]
	lda $1F8001.l,X		; BF 01 80 1F ; Load long $1F8001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B8.b		; 85 B8 ; Store accumulator to $B8.b [Reads: Accumulator]
	lda $1F8000.l,X		; BF 00 80 1F ; Load long $1F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	jsr $88E4.w		; 20 E4 88 ; Jump to subroutine at $88E4.w [Writes: Stack Pointer] [Flow: call]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	ldx #$1E.b		; A2 1E ; Load #$1E.b into X register [Writes: X Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Accumulator, Direct Page]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	jsr $88E4.w		; 20 E4 88 ; Jump to subroutine at $88E4.w [Writes: Stack Pointer] [Flow: call]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	ldx #$1E.b		; A2 1E ; Load #$1E.b into X register [Writes: X Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0186.w,Y		; F9 86 01 ; Subtract with carry $0186.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	jsr $88E4.w		; 20 E4 88 ; Jump to subroutine at $88E4.w [Writes: Stack Pointer] [Flow: call]
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	ldx $BA.b		; A6 BA ; Load $BA.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF940.l,X		; BF 40 F9 7E ; Load long $7EF940.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A0.b		; C5 A0 ; Compare $A0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $7EF942.l,X		; BF 42 F9 7E ; Load long $7EF942.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $B4D6.w		; 20 D6 B4 ; Jump to subroutine at $B4D6.w [Writes: Stack Pointer] [Flow: call]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $BA.b		; 85 BA ; Store accumulator to $BA.b [Reads: Accumulator]
	cmp #$018C.w		; C9 8C 01 ; Compare #$018C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $042C.w		; AD 2C 04 ; Load $042C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $042E.w		; 8D 2E 04 ; Store accumulator to $042E.w [Reads: Accumulator]
	sta $0478.w		; 8D 78 04 ; Store accumulator to $0478.w [Reads: Accumulator]
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	ldx $BA.b		; A6 BA ; Load $BA.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EFB40.l,X		; BF 40 FB 7E ; Load long $7EFB40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A0.b		; C5 A0 ; Compare $A0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7EFB40.l,X		; BF 40 FB 7E ; Load long $7EFB40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $BA.b		; 86 BA ; Store X register to $BA.b [Reads: X Index]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sep #$80		; E2 80 ; Set processor status bits #$80 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7EFB40.l,X		; BF 40 FB 7E ; Load long $7EFB40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $BA.b		; 86 BA ; Store X register to $BA.b [Reads: X Index]
	jsr $B509.w		; 20 09 B5 ; Jump to subroutine at $B509.w [Writes: Stack Pointer] [Flow: call]
	ldx $BA.b		; A6 BA ; Load $BA.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EFB40.l,X		; BF 40 FB 7E ; Load long $7EFB40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; [PATTERN: Memory clearing operation] C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	ldy $BA.b		; A4 BA ; Load $BA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $850CF0.l,X		; FF F0 0C 85 ; Subtract with carry (long,X) $850CF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsr $893C.w		; 20 3C 89 ; Jump to subroutine at $893C.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $E7		; 80 E7 ; Branch always to $80, $E7 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	ldy $BA.b		; A4 BA ; Load $BA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $85F2F0.l,X		; FF F0 F2 85 ; Subtract with carry (long,X) $85F2F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $89.b,X		; 16 89 ; Arithmetic shift left $89.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $EC		; 80 EC ; Branch always to $80, $EC [Flow: branch]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0186F0.l,X		; BF F0 86 01 ; Load long $0186F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($000E.w)		; 6C 0E 00 ; Jump indirect to ($000E.w) [Flow: jump]
.ACCU 8
	sep #$20		; E2 20
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FC.b		; C9 FC ; Compare #$FC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B4.b		; 85 B4 ; Store accumulator to $B4.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $BA.b		; 84 BA ; Store Y register to $BA.b [Reads: Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; [PATTERN: Memory clearing operation] 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: ZNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	stz $05.b		; 64 05 ; Store zero to $05.b
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$01F0.w		; C9 F0 01 ; Compare #$01F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $46		; B0 46 ; Branch if carry set to $B0, $46 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $018200.l,X		; BF 00 82 01 ; Load long $018200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $018000.l,X		; BF 00 80 01 ; Load long $018000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jmp ($000E.w)		; 6C 0E 00 ; Jump indirect to ($000E.w) [Flow: jump]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$03F0.w		; 29 F0 03 ; Logical AND #$03F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$0FC0.w		; 29 C0 0F ; Logical AND #$0FC0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $BA.b		; 84 BA ; Store Y register to $BA.b [Reads: Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $018470.l,X		; BF 70 84 01 ; Load long $018470.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0183F0.l,X		; BF F0 83 01 ; Load long $0183F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jmp ($000E.w)		; 6C 0E 00 ; Jump indirect to ($000E.w) [Flow: jump]
	and #$000E.w		; 29 0E 00 ; Logical AND #$000E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B2.b		; 05 B2 ; Logical OR $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0185F0.l,X		; BF F0 85 01 ; Load long $0185F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0184F0.l,X		; BF F0 84 01 ; Load long $0184F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jmp ($000E.w)		; 6C 0E 00 ; Jump indirect to ($000E.w) [Flow: jump]
	ldx #$1E.b		; A2 1E ; Load #$1E.b into X register [Writes: X Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0187.w,Y		; 19 87 01 ; OR accumulator with memory $0187.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $BF.b,X		; 95 BF ; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
	lda $01871A.l,X		; BF 1A 87 01 ; Load long $01871A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	ldy $BA.b		; A4 BA ; Load $BA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0490.w		; 8D 90 04 ; Store accumulator to $0490.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $8A1F.w		; 20 1F 8A ; Jump to subroutine at $8A1F.w [Writes: Stack Pointer] [Flow: call]
	ldx #$1E.b		; A2 1E ; Load #$1E.b into X register [Writes: X Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0186.w,Y		; F9 86 01 ; Subtract with carry $0186.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $046A.w		; 8D 6A 04 ; Store accumulator to $046A.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9B02.w,Y		; B9 02 9B ; Load $9B02.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8A44.w		; 20 44 8A ; Jump to subroutine at $8A44.w [Writes: Stack Pointer] [Flow: call]
	adc #$01C0.w		; 69 C0 01 ; Add #$01C0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: ZN]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5A.w,X		; BD 5A 9B ; Load $9B5A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5C.w,X		; BD 5C 9B ; Load $9B5C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5E.w,X		; BD 5E 9B ; Load $9B5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B60.w,X		; BD 60 9B ; Load $9B60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D4.b],Y		; 97 D4 ; Store accumulator (long indexed) [$D4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CE		; D0 CE ; Branch if not equal to $D0, $CE [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01F8.w		; E9 F8 01 ; Subtract #$01F8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $BF		; D0 BF ; Branch if not equal to $D0, $BF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0BE.w		; 20 BE B0 ; Jump to subroutine at $B0BE.w [Writes: Stack Pointer] [Flow: call]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $B220.w		; 4C 20 B2 ; Jump to $B220.w [Flow: jump]
	jsr $B0BE.w		; 20 BE B0 ; Jump to subroutine at $B0BE.w [Writes: Stack Pointer] [Flow: call]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4002.l,X		; 9F 02 40 7E ; Store accumulator (long,X) $7E4002.l,X [Reads: Accumulator, X Index]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4004.l,X		; 9F 04 40 7E ; Store accumulator (long,X) $7E4004.l,X [Reads: Accumulator, X Index]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4006.l,X		; 9F 06 40 7E ; Store accumulator (long,X) $7E4006.l,X [Reads: Accumulator, X Index]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4082.l,X		; 9F 82 40 7E ; Store accumulator (long,X) $7E4082.l,X [Reads: Accumulator, X Index]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4084.l,X		; 9F 84 40 7E ; Store accumulator (long,X) $7E4084.l,X [Reads: Accumulator, X Index]
	sta $7E2084.l,X		; 9F 84 20 7E ; Store accumulator (long,X) $7E2084.l,X [Reads: Accumulator, X Index]
	lda $9B60.w,Y		; B9 60 9B ; Load $9B60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4086.l,X		; 9F 86 40 7E ; Store accumulator (long,X) $7E4086.l,X [Reads: Accumulator, X Index]
	sta $7E2086.l,X		; 9F 86 20 7E ; Store accumulator (long,X) $7E2086.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $9E		; D0 9E ; Branch if not equal to $D0, $9E [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4002.l,X		; 9F 02 40 7E ; Store accumulator (long,X) $7E4002.l,X [Reads: Accumulator, X Index]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4082.l,X		; 9F 82 40 7E ; Store accumulator (long,X) $7E4082.l,X [Reads: Accumulator, X Index]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4102.l,X		; 9F 02 41 7E ; Store accumulator (long,X) $7E4102.l,X [Reads: Accumulator, X Index]
	sta $7E2102.l,X		; 9F 02 21 7E ; Store accumulator (long,X) $7E2102.l,X [Reads: Accumulator, X Index]
	lda $9B60.w,Y		; B9 60 9B ; Load $9B60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4182.l,X		; 9F 82 41 7E ; Store accumulator (long,X) $7E4182.l,X [Reads: Accumulator, X Index]
	sta $7E2182.l,X		; 9F 82 21 7E ; Store accumulator (long,X) $7E2182.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $A0		; D0 A0 ; Branch if not equal to $D0, $A0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	jsr $B0CC.w		; 20 CC B0 ; Jump to subroutine at $B0CC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0CC.w		; 20 CC B0 ; Jump to subroutine at $B0CC.w [Writes: Stack Pointer] [Flow: call]
	jsr $9895.w		; 20 95 98 ; Jump to subroutine at $9895.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$D4.b],Y		; 97 D4 ; Store accumulator (long indexed) [$D4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$D4.b],Y		; 97 D4 ; Store accumulator (long indexed) [$D4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00F8.w		; E9 F8 00 ; Subtract #$00F8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CA		; D0 CA ; Branch if not equal to $D0, $CA [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $B9		; D0 B9 ; Branch if not equal to $D0, $B9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2CE.w		; 20 CE B2 ; Jump to subroutine at $B2CE.w [Writes: Stack Pointer] [Flow: call]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $B2D0.w		; 20 D0 B2 ; Jump to subroutine at $B2D0.w [Writes: Stack Pointer] [Flow: call]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2CE.w		; 20 CE B2 ; Jump to subroutine at $B2CE.w [Writes: Stack Pointer] [Flow: call]
	adc #$0082.w		; 69 82 00 ; Add #$0082.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2CE.w		; 20 CE B2 ; Jump to subroutine at $B2CE.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$007E.w		; E9 7E 00 ; Subtract #$007E.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda #$0300.w		; A9 00 03 ; Load #$0300.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $B220.w		; 4C 20 B2 ; Jump to $B220.w [Flow: jump]
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jmp $B2AA.w		; 4C AA B2 ; Jump to $B2AA.w [Flow: jump]
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jmp $B29C.w		; 4C 9C B2 ; Jump to $B29C.w [Flow: jump]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda #$FF82.w		; A9 82 FF ; Load #$FF82.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4200.l,X		; 9F 00 42 7E ; Store accumulator (long,X) $7E4200.l,X [Reads: Accumulator, X Index]
	sta $7E2200.l,X		; 9F 00 22 7E ; Store accumulator (long,X) $7E2200.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C0		; D0 C0 ; Branch if not equal to $D0, $C0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda #$0082.w		; A9 82 00 ; Load #$0082.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $AF		; 80 AF ; Branch always to $80, $AF [Flow: branch]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	jsr $8D47.w		; 20 47 8D ; Jump to subroutine at $8D47.w [Writes: Stack Pointer] [Flow: call]
	stx $0006.w		; 8E 06 00 ; Store X register to $0006.w [Reads: X Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $9BD9.w		; 20 D9 9B ; Jump to subroutine at $9BD9.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $9895.w		; 20 95 98 ; Jump to subroutine at $9895.w [Writes: Stack Pointer] [Flow: call]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $9BD9.w		; 20 D9 9B ; Jump to subroutine at $9BD9.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CD		; D0 CD ; Branch if not equal to $D0, $CD [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $8D47.w		; 20 47 8D ; Jump to subroutine at $8D47.w [Writes: Stack Pointer] [Flow: call]
	lda #$FF80.w		; A9 80 FF ; Load #$FF80.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B2.b		; 65 B2 ; Add $B2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$90.b		; A2 90 ; Load #$90.b into X register [Writes: X Index] [Flags: ZN]
	ora $4C.b		; 05 4C ; Logical OR $4C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	jsr $9216.w		; 20 16 92 ; Jump to subroutine at $9216.w [Writes: Stack Pointer] [Flow: call]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$000C.w		; E9 0C 00 ; Subtract #$000C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	jmp $9211.w		; 4C 11 92 ; Jump to $9211.w [Flow: jump]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B4.b		; 05 B4 ; Logical OR $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0006.w		; E9 06 00 ; Subtract #$0006.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00FA.w		; E9 FA 00 ; Subtract #$00FA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C7		; D0 C7 ; Branch if not equal to $D0, $C7 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	sta $B4.b		; 85 B4 ; Store accumulator to $B4.b [Reads: Accumulator]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $B2CE.w		; 20 CE B2 ; Jump to subroutine at $B2CE.w [Writes: Stack Pointer] [Flow: call]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx #$3C.b		; A2 3C ; Load #$3C.b into X register [Writes: X Index] [Flags: ZN]
	asl $A5.b		; 06 A5 ; Arithmetic shift left $A5.b [Reads: Direct Page] [Flags: ZNC]
	lda ($3A.b)		; B2 3A ; Load accumulator (indirect) ($3A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $B2.b		; A4 B2 ; Load $B2.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $B4.b		; 84 B4 ; Store Y register to $B4.b [Reads: Y Index]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$48.b		; A2 48 ; Load #$48.b into X register [Writes: X Index] [Flags: ZN]
	asl $A5.b		; 06 A5 ; Arithmetic shift left $A5.b [Reads: Direct Page] [Flags: ZNC]
	ldy $85.b,X		; B4 85 ; Load Y register $85.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2CE.w		; 20 CE B2 ; Jump to subroutine at $B2CE.w [Writes: Stack Pointer] [Flow: call]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $B2D0.w		; 20 D0 B2 ; Jump to subroutine at $B2D0.w [Writes: Stack Pointer] [Flow: call]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2CE.w		; 20 CE B2 ; Jump to subroutine at $B2CE.w [Writes: Stack Pointer] [Flow: call]
	adc #$0082.w		; 69 82 00 ; Add #$0082.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2CE.w		; 20 CE B2 ; Jump to subroutine at $B2CE.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$007E.w		; E9 7E 00 ; Subtract #$007E.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0015.w		; A9 15 00 ; Load #$0015.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda #$00E3.w		; A9 E3 00 ; Load #$00E3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B191.w		; 20 91 B1 ; Jump to subroutine at $B191.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0015.w		; A9 15 00 ; Load #$0015.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda #$00E2.w		; A9 E2 00 ; Load #$00E2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B191.w		; 20 91 B1 ; Jump to subroutine at $B191.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	jsr $B2CA.w		; 20 CA B2 ; Jump to subroutine at $B2CA.w [Writes: Stack Pointer] [Flow: call]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda #$01DB.w		; A9 DB 01 ; Load #$01DB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B191.w		; 20 91 B1 ; Jump to subroutine at $B191.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	cmp #$01A6.w		; C9 A6 01 ; Compare #$01A6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$01DD.w		; C9 DD 01 ; Compare #$01DD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$01FC.w		; C9 FC 01 ; Compare #$01FC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	jsr $B2CA.w		; 20 CA B2 ; Jump to subroutine at $B2CA.w [Writes: Stack Pointer] [Flow: call]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0490.w		; AE 90 04 ; Load $0490.w into X register [Writes: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	ldx $046A.w		; AE 6A 04 ; Load $046A.w into X register [Writes: X Index] [Flags: ZN]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $8A44.w		; 20 44 8A ; Jump to subroutine at $8A44.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda [$BF.b],Y		; B7 BF ; Load accumulator (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00E2.w		; C9 E2 00 ; Compare #$00E2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $8FEC.w		; 20 EC 8F ; Jump to subroutine at $8FEC.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda [$CB.b],Y		; B7 CB ; Load accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00E2.w		; C9 E2 00 ; Compare #$00E2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $9030.w		; 20 30 90 ; Jump to subroutine at $9030.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda [$BF.b],Y		; B7 BF ; Load accumulator (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00E3.w		; C9 E3 00 ; Compare #$00E3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $9078.w		; 20 78 90 ; Jump to subroutine at $9078.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda [$C2.b],Y		; B7 C2 ; Load accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00E3.w		; C9 E3 00 ; Compare #$00E3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $90C2.w		; 20 C2 90 ; Jump to subroutine at $90C2.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jmp $B2CE.w		; 4C CE B2 ; Jump to $B2CE.w [Flow: jump]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	jmp $B2CE.w		; 4C CE B2 ; Jump to $B2CE.w [Flow: jump]
	sty $04B0.w		; 8C B0 04 ; Store Y register to $04B0.w [Reads: Y Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B0.w		; 8D B0 04 ; Store accumulator to $04B0.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldy #$52.b		; A0 52 ; Load #$52.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $AC1A.w		; 20 1A AC ; Jump to subroutine at $AC1A.w [Writes: Stack Pointer] [Flow: call]
	ldy #$52.b		; A0 52 ; Load #$52.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $BF.b		; A4 BF ; Load $BF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $AB78.w		; 20 78 AB ; Jump to subroutine at $AB78.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04B0.w		; AD B0 04 ; Load $04B0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B0.w		; 8D B0 04 ; Store accumulator to $04B0.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $9298.w		; 20 98 92 ; Jump to subroutine at $9298.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0428.w		; EE 28 04 ; Increment $0428.w [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9B0A.w,Y		; B9 0A 9B ; Load $9B0A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $041E.w		; 8D 1E 04 ; Store accumulator to $041E.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9B12.w,Y		; B9 12 9B ; Load $9B12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx #$D8.b		; A2 D8 ; Load #$D8.b into X register [Writes: X Index] [Flags: ZN]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0A85.w		; 0E 85 0A ; Arithmetic shift left $0A85.w [Flags: ZNC]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: ZN]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: ZN]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $92D1.w		; 20 D1 92 ; Jump to subroutine at $92D1.w [Writes: Stack Pointer] [Flow: call]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$2A.b		; A2 2A ; Load #$2A.b into X register [Writes: X Index] [Flags: ZN]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $92.b,X		; 16 92 ; Arithmetic shift left $92.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $9BD9.w		; 20 D9 9B ; Jump to subroutine at $9BD9.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	jsr $9298.w		; 20 98 92 ; Jump to subroutine at $9298.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0428.w		; EE 28 04 ; Increment $0428.w [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$5A.b		; A2 5A ; Load #$5A.b into X register [Writes: X Index] [Flags: ZN]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $92.b,X		; 16 92 ; Arithmetic shift left $92.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9B0A.w,Y		; B9 0A 9B ; Load $9B0A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $9BD9.w		; 20 D9 9B ; Jump to subroutine at $9BD9.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	jsr $9210.w		; 20 10 92 ; Jump to subroutine at $9210.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $041E.w		; 8D 1E 04 ; Store accumulator to $041E.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9B12.w,Y		; B9 12 9B ; Load $9B12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx #$D8.b		; A2 D8 ; Load #$D8.b into X register [Writes: X Index] [Flags: ZN]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0A85.w		; 0E 85 0A ; Arithmetic shift left $0A85.w [Flags: ZNC]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: ZN]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: ZN]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D9		; [PATTERN: Memory clearing operation] D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jmp $92D1.w		; 4C D1 92 ; Jump to $92D1.w [Flow: jump]
	stz $041C.w		; 9C 1C 04 ; Store zero to $041C.w
	stz $041A.w		; 9C 1A 04 ; Store zero to $041A.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $17		; 90 17 ; Branch if carry clear to $90, $17 [Flow: branch]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	lda $0403.w		; [PATTERN: Memory clearing operation] AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C7.w,Y		; 39 C7 98 ; AND accumulator with memory $98C7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	stz $046C.w		; 9C 6C 04 ; Store zero to $046C.w
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
	stz $0414.w		; 9C 14 04 ; Store zero to $0414.w
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$007E.w		; A2 7E 00 ; Load #$007E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$01EC.w		; A9 EC 01 ; Load #$01EC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC880.l,X		; 9F 80 C8 7E ; Store accumulator (long,X) $7EC880.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$0400.w		; A9 00 04 ; Load #$0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1000.w		; 09 00 10 ; Logical OR #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $042A.w		; 8D 2A 04 ; Store accumulator to $042A.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02F8.w		; 69 F8 02 ; Add #$02F8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0E26.w		; A2 26 0E ; Load #$0E26.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $9895.w		; 20 95 98 ; Jump to subroutine at $9895.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02FC.w		; 69 FC 02 ; Add #$02FC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03FA.w		; 69 FA 03 ; Add #$03FA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx #$08CA.w		; A2 CA 08 ; Load #$08CA.w into X register [Writes: X Index] [Flags: ZN]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	asl $B4.b		; 06 B4 ; Arithmetic shift left $B4.b [Reads: Direct Page] [Flags: ZNC]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	jsr $93FF.w		; 20 FF 93 ; Jump to subroutine at $93FF.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $93FF.w		; 20 FF 93 ; Jump to subroutine at $93FF.w [Writes: Stack Pointer] [Flow: call]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	jsr $93F7.w		; 20 F7 93 ; Jump to subroutine at $93F7.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $9895.w		; 20 95 98 ; Jump to subroutine at $9895.w [Writes: Stack Pointer] [Flow: call]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0600.w		; 69 00 06 ; Add #$0600.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FF1C.w		; 69 1C FF ; Add #$FF1C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	jsr $B279.w		; 20 79 B2 ; Jump to subroutine at $B279.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $B279.w		; 20 79 B2 ; Jump to subroutine at $B279.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp $B279.w		; 4C 79 B2 ; Jump to $B279.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $B220.w		; 4C 20 B2 ; Jump to $B220.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	jsr $B2F6.w		; 20 F6 B2 ; Jump to subroutine at $B2F6.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $B2F6.w		; 20 F6 B2 ; Jump to subroutine at $B2F6.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp $B2F6.w		; 4C F6 B2 ; Jump to $B2F6.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp $B2E1.w		; 4C E1 B2 ; Jump to $B2E1.w [Flow: jump]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B3A.w,X		; BD 3A 9B ; Load $9B3A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda $9B42.w,X		; BD 42 9B ; Load $9B42.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0686.w		; 8D 86 06 ; Store accumulator to $0686.w [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B3A.w,X		; BD 3A 9B ; Load $9B3A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B4.b		; 85 B4 ; Store accumulator to $B4.b [Reads: Accumulator]
	lda $9B42.w,X		; BD 42 9B ; Load $9B42.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0684.w		; 8D 84 06 ; Store accumulator to $0684.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0018.w		; E9 18 00 ; Subtract #$0018.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0688.w		; 8D 88 06 ; Store accumulator to $0688.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0680.w		; 8D 80 06 ; Store accumulator to $0680.w [Reads: Accumulator]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062C.w		; 6D 2C 06 ; Add $062C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0680.w		; 6D 80 06 ; Add $0680.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0680.w		; 8D 80 06 ; Store accumulator to $0680.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0682.w		; 8D 82 06 ; Store accumulator to $0682.w [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062E.w		; 6D 2E 06 ; Add $062E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0682.w		; 6D 82 06 ; Add $0682.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0682.w		; 8D 82 06 ; Store accumulator to $0682.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0403.w		; [PATTERN: Memory clearing operation] AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C9.w		; 2D C9 98 ; Logical AND $98C9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $6F		; F0 6F ; Branch if equal to $F0, $6F [Flow: branch]
	stz $AF.b		; 64 AF ; Store zero to $AF.b
	stz $0414.w		; 9C 14 04 ; Store zero to $0414.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0442.w		; AD 42 04 ; Load $0442.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0440.w		; [PATTERN: Memory clearing operation] 8D 40 04 ; Store accumulator to $0440.w [Reads: Accumulator]
	lda $0444.w		; AD 44 04 ; Load $0444.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0448.w		; 8D 48 04 ; Store accumulator to $0448.w [Reads: Accumulator]
	stz $0444.w		; 9C 44 04 ; Store zero to $0444.w
	stz $0442.w		; 9C 42 04 ; Store zero to $0442.w
	lda $04AE.w		; AD AE 04 ; Load $04AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $049E.w		; 8D 9E 04 ; Store accumulator to $049E.w [Reads: Accumulator]
	stz $04AE.w		; 9C AE 04 ; Store zero to $04AE.w
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$1438.w		; A0 38 14 ; Load #$1438.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0110.w		; A2 10 01 ; Load #$0110.w into X register [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $8A44.w		; 20 44 8A ; Jump to subroutine at $8A44.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B3A.w,X		; BD 3A 9B ; Load $9B3A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda $9B42.w,X		; BD 42 9B ; Load $9B42.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0018.w		; E9 18 00 ; Subtract #$0018.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0686.w		; 8D 86 06 ; Store accumulator to $0686.w [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B3A.w,X		; BD 3A 9B ; Load $9B3A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B4.b		; 85 B4 ; Store accumulator to $B4.b [Reads: Accumulator]
	lda $9B42.w,X		; BD 42 9B ; Load $9B42.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0688.w		; 8D 88 06 ; Store accumulator to $0688.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0018.w		; E9 18 00 ; Subtract #$0018.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0684.w		; 8D 84 06 ; Store accumulator to $0684.w [Reads: Accumulator]
	stz $068A.w		; 9C 8A 06 ; Store zero to $068A.w
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0680.w		; 8D 80 06 ; Store accumulator to $0680.w [Reads: Accumulator]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062C.w		; 6D 2C 06 ; Add $062C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0680.w		; 6D 80 06 ; Add $0680.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0680.w		; 8D 80 06 ; Store accumulator to $0680.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0682.w		; 8D 82 06 ; Store accumulator to $0682.w [Reads: Accumulator]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062E.w		; 6D 2E 06 ; Add $062E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0682.w		; 6D 82 06 ; Add $0682.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0682.w		; 8D 82 06 ; Store accumulator to $0682.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C9.w		; 2D C9 98 ; Logical AND $98C9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $AF.b		; 64 AF ; Store zero to $AF.b
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0442.w		; AD 42 04 ; Load $0442.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0440.w		; [PATTERN: Memory clearing operation] 8D 40 04 ; Store accumulator to $0440.w [Reads: Accumulator]
	lda $0444.w		; AD 44 04 ; Load $0444.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0448.w		; 8D 48 04 ; Store accumulator to $0448.w [Reads: Accumulator]
	stz $0444.w		; 9C 44 04 ; Store zero to $0444.w
	stz $0442.w		; 9C 42 04 ; Store zero to $0442.w
	lda $04AE.w		; [PATTERN: Memory clearing operation] AD AE 04 ; Load $04AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $049E.w		; 8D 9E 04 ; Store accumulator to $049E.w [Reads: Accumulator]
	stz $04AE.w		; 9C AE 04 ; Store zero to $04AE.w
	stz $0414.w		; 9C 14 04 ; Store zero to $0414.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B46.w,X		; BD 46 9B ; Load $9B46.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldx #$0110.w		; A2 10 01 ; Load #$0110.w into X register [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5A.w,X		; BD 5A 9B ; Load $9B5A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5C.w,X		; BD 5C 9B ; Load $9B5C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5E.w,X		; BD 5E 9B ; Load $9B5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B60.w,X		; BD 60 9B ; Load $9B60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D4.b],Y		; 97 D4 ; Store accumulator (long indexed) [$D4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CC		; D0 CC ; Branch if not equal to $D0, $CC [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	jmp $B2CE.w		; 4C CE B2 ; Jump to $B2CE.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $B220.w		; 4C 20 B2 ; Jump to $B220.w [Flow: jump]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$05FC.w		; 69 FC 05 ; Add #$05FC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02FA.w		; 69 FA 02 ; Add #$02FA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy #$0AB4.w		; A0 B4 0A ; Load #$0AB4.w into Y register [Writes: Y Index] [Flags: ZN]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0005.w		; 69 05 00 ; Add #$0005.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $B4.b		; 85 B4 ; Store accumulator to $B4.b [Reads: Accumulator]
	jsr $975C.w		; 20 5C 97 ; Jump to subroutine at $975C.w [Writes: Stack Pointer] [Flow: call]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $975C.w		; 20 5C 97 ; Jump to subroutine at $975C.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B64.w,Y		; B9 64 9B ; Load $9B64.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	sta $7E2008.l,X		; 9F 08 20 7E ; Store accumulator (long,X) $7E2008.l,X [Reads: Accumulator, X Index]
	sta $7E200A.l,X		; 9F 0A 20 7E ; Store accumulator (long,X) $7E200A.l,X [Reads: Accumulator, X Index]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B6A.w,Y		; B9 6A 9B ; Load $9B6A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E200C.l,X		; 9F 0C 20 7E ; Store accumulator (long,X) $7E200C.l,X [Reads: Accumulator, X Index]
	lda $9B70.w,Y		; B9 70 9B ; Load $9B70.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E200E.l,X		; 9F 0E 20 7E ; Store accumulator (long,X) $7E200E.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	lda $9B76.w,Y		; B9 76 9B ; Load $9B76.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E200E.l,X		; 9F 0E 20 7E ; Store accumulator (long,X) $7E200E.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0AF.w		; 20 AF B0 ; Jump to subroutine at $B0AF.w [Writes: Stack Pointer] [Flow: call]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0B16.w		; A2 16 0B ; Load #$0B16.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$DA.b],Y		; 97 DA ; Store accumulator (long indexed) [$DA.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $045A.w		; EE 5A 04 ; Increment $045A.w [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0498.w		; AE 98 04 ; Load $0498.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06E0.w,X		; 9D E0 06 ; Store accumulator to $06E0.w,X [Reads: Accumulator, X Index]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $9900.w,X		; 3D 00 99 ; AND accumulator with memory $9900.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0498.w		; 8E 98 04 ; Store X register to $0498.w [Reads: X Index]
	ldx #$1494.w		; A2 94 14 ; Load #$1494.w into X register [Writes: X Index] [Flags: ZN]
	.db $80, $CE		; 80 CE ; Branch always to $80, $CE [Flow: branch]
	stz $06E0.w,X		; 9E E0 06 ; Store zero to $06E0.w,X [Reads: X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0498.w		; 8E 98 04 ; Store X register to $0498.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$001A.w		; C9 1A 00 ; Compare #$001A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $F5		; F0 F5 ; Branch if equal to $F0, $F5 [Flow: branch]
	ldx $0496.w		; AE 96 04 ; Load $0496.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06E0.w,X		; 9D E0 06 ; Store accumulator to $06E0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06E0.w,X		; 9D E0 06 ; Store accumulator to $06E0.w,X [Reads: Accumulator, X Index]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $9900.w,X		; 3D 00 99 ; AND accumulator with memory $9900.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $65		; D0 65 ; Branch if not equal to $D0, $65 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0496.w		; 8E 96 04 ; Store X register to $0496.w [Reads: X Index]
	stx $0498.w		; 8E 98 04 ; Store X register to $0498.w [Reads: X Index]
	ldy #$FF00.w		; A0 00 FF ; Load #$FF00.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0027.w		; C9 27 00 ; Compare #$0027.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	cmp #$003C.w		; C9 3C 00 ; Compare #$003C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	cmp #$003E.w		; C9 3E 00 ; Compare #$003E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	cmp #$0029.w		; C9 29 00 ; Compare #$0029.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	cmp #$0033.w		; C9 33 00 ; Compare #$0033.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $23		; 90 23 ; Branch if carry clear to $90, $23 [Flow: branch]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0027.w		; C9 27 00 ; Compare #$0027.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$003C.w		; C9 3C 00 ; Compare #$003C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$003E.w		; C9 3E 00 ; Compare #$003E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0029.w		; C9 29 00 ; Compare #$0029.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	cmp #$0033.w		; C9 33 00 ; Compare #$0033.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	ldy #$00FF.w		; A0 FF 00 ; Load #$00FF.w into Y register [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $009900.l,X		; 3F 00 99 00 ; AND accumulator with memory (long,X) $009900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $80		; F0 80 ; Branch if equal to $F0, $80 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $AE.b		; 25 AE ; Logical AND $AE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $AE.b		; 85 AE ; Store accumulator to $AE.b [Reads: Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$149C.w		; A2 9C 14 ; Load #$149C.w into X register [Writes: X Index] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	stz $06E0.w,X		; 9E E0 06 ; Store zero to $06E0.w,X [Reads: X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0496.w		; 8E 96 04 ; Store X register to $0496.w [Reads: X Index]
	stx $0498.w		; 8E 98 04 ; Store X register to $0498.w [Reads: X Index]
	ldy #$FF00.w		; A0 00 FF ; Load #$FF00.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0027.w		; C9 27 00 ; Compare #$0027.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	cmp #$003C.w		; C9 3C 00 ; Compare #$003C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	cmp #$003E.w		; C9 3E 00 ; Compare #$003E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	cmp #$0029.w		; C9 29 00 ; Compare #$0029.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	cmp #$0033.w		; C9 33 00 ; Compare #$0033.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $23		; 90 23 ; Branch if carry clear to $90, $23 [Flow: branch]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0027.w		; C9 27 00 ; Compare #$0027.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$003C.w		; C9 3C 00 ; Compare #$003C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$003E.w		; C9 3E 00 ; Compare #$003E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0029.w		; C9 29 00 ; Compare #$0029.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	cmp #$0033.w		; C9 33 00 ; Compare #$0033.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	ldy #$00FF.w		; A0 FF 00 ; Load #$00FF.w into Y register [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $AE.b		; 25 AE ; Logical AND $AE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $AE.b		; 85 AE ; Store accumulator to $AE.b [Reads: Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$14A4.w		; A2 A4 14 ; Load #$14A4.w into X register [Writes: X Index] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	ldx $0496.w		; AE 96 04 ; Load $0496.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06E0.w,X		; 9D E0 06 ; Store accumulator to $06E0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$A000.w		; 09 00 A0 ; Logical OR #$A000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06E0.w,X		; 9D E0 06 ; Store accumulator to $06E0.w,X [Reads: Accumulator, X Index]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $9900.w,X		; 3D 00 99 ; AND accumulator with memory $9900.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0496.w		; 8E 96 04 ; Store X register to $0496.w [Reads: X Index]
	stx $0498.w		; 8E 98 04 ; Store X register to $0498.w [Reads: X Index]
	ldx #$14AC.w		; A2 AC 14 ; Load #$14AC.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $97F0.w		; 4C F0 97 ; Jump to $97F0.w [Flow: jump]
	stz $06E0.w,X		; 9E E0 06 ; Store zero to $06E0.w,X [Reads: X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0496.w		; 8E 96 04 ; Store X register to $0496.w [Reads: X Index]
	stx $0498.w		; 8E 98 04 ; Store X register to $0498.w [Reads: X Index]
	ldx #$14C4.w		; A2 C4 14 ; Load #$14C4.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2200.l,X		; 9F 00 22 7E ; Store accumulator (long,X) $7E2200.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2280.l,X		; 9F 80 22 7E ; Store accumulator (long,X) $7E2280.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2300.l,X		; 9F 00 23 7E ; Store accumulator (long,X) $7E2300.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000E.w		; 69 0E 00 ; Add #$000E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C3		; D0 C3 ; Branch if not equal to $D0, $C3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$1F92.w		; A0 92 1F ; Load #$1F92.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $9DA2.w		; 4C A2 9D ; Jump to $9DA2.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0432.w		; AE 32 04 ; Load $0432.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06A0.w,X		; 9D A0 06 ; Store accumulator to $06A0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06A0.w,X		; 9D A0 06 ; Store accumulator to $06A0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0432.w		; 8E 32 04 ; Store X register to $0432.w [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $B2AF.w		; 4C AF B2 ; Jump to $B2AF.w [Flow: jump]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $97F0.w		; 4C F0 97 ; Jump to $97F0.w [Flow: jump]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1DD6.w		; A0 D6 1D ; Load #$1DD6.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E2300.l,X		; 9F 00 23 7E ; Store accumulator (long,X) $7E2300.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E2200.l,X		; 9F 00 22 7E ; Store accumulator (long,X) $7E2200.l,X [Reads: Accumulator, X Index]
	sta $7E2380.l,X		; 9F 80 23 7E ; Store accumulator (long,X) $7E2380.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $97F0.w		; 4C F0 97 ; Jump to $97F0.w [Flow: jump]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$001B.w		; C9 1B 00 ; Compare #$001B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $A3AE.w		; 4C AE A3 ; Jump to $A3AE.w [Flow: jump]
	ldx $0444.w		; AE 44 04 ; Load $0444.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B8.w,X		; 9D B8 06 ; Store accumulator to $06B8.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0444.w		; 8E 44 04 ; Store X register to $0444.w [Reads: X Index]
	ldx #$1108.w		; A2 08 11 ; Load #$1108.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	jmp $B220.w		; 4C 20 B2 ; Jump to $B220.w [Flow: jump]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2008.l,X		; 9F 08 20 7E ; Store accumulator (long,X) $7E2008.l,X [Reads: Accumulator, X Index]
	sta $7E2010.l,X		; 9F 10 20 7E ; Store accumulator (long,X) $7E2010.l,X [Reads: Accumulator, X Index]
	sta $7E201C.l,X		; 9F 1C 20 7E ; Store accumulator (long,X) $7E201C.l,X [Reads: Accumulator, X Index]
	sta $7E2024.l,X		; 9F 24 20 7E ; Store accumulator (long,X) $7E2024.l,X [Reads: Accumulator, X Index]
	sta $7E202C.l,X		; 9F 2C 20 7E ; Store accumulator (long,X) $7E202C.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $7E200A.l,X		; 9F 0A 20 7E ; Store accumulator (long,X) $7E200A.l,X [Reads: Accumulator, X Index]
	sta $7E2012.l,X		; 9F 12 20 7E ; Store accumulator (long,X) $7E2012.l,X [Reads: Accumulator, X Index]
	sta $7E201E.l,X		; 9F 1E 20 7E ; Store accumulator (long,X) $7E201E.l,X [Reads: Accumulator, X Index]
	sta $7E2026.l,X		; 9F 26 20 7E ; Store accumulator (long,X) $7E2026.l,X [Reads: Accumulator, X Index]
	sta $7E202E.l,X		; 9F 2E 20 7E ; Store accumulator (long,X) $7E202E.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	sta $7E200C.l,X		; 9F 0C 20 7E ; Store accumulator (long,X) $7E200C.l,X [Reads: Accumulator, X Index]
	sta $7E2020.l,X		; 9F 20 20 7E ; Store accumulator (long,X) $7E2020.l,X [Reads: Accumulator, X Index]
	sta $7E2028.l,X		; 9F 28 20 7E ; Store accumulator (long,X) $7E2028.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	sta $7E200E.l,X		; 9F 0E 20 7E ; Store accumulator (long,X) $7E200E.l,X [Reads: Accumulator, X Index]
	sta $7E2022.l,X		; 9F 22 20 7E ; Store accumulator (long,X) $7E2022.l,X [Reads: Accumulator, X Index]
	sta $7E202A.l,X		; 9F 2A 20 7E ; Store accumulator (long,X) $7E202A.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $98		; D0 98 ; Branch if not equal to $D0, $98 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0014.w		; 69 14 00 ; Add #$0014.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5A.w,X		; BD 5A 9B ; Load $9B5A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5C.w,X		; BD 5C 9B ; Load $9B5C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0800.w		; 29 00 08 ; Logical AND #$0800.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	lda #$000F.w		; A9 0F 00 ; Load #$000F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0470.w		; 8D 70 04 ; Store accumulator to $0470.w [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0472.w		; 8D 72 04 ; Store accumulator to $0472.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$13E8.w		; A2 E8 13 ; Load #$13E8.w into X register [Writes: X Index] [Flags: ZN]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	lda $B7.b		; A5 B7 ; Load $B7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $B8.b		; A5 B8 ; Load $B8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B9.b		; 85 B9 ; Store accumulator to $B9.b [Reads: Accumulator]
	lda #$F1CD.w		; A9 CD F1 ; Load #$F1CD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $CC95.w		; 20 95 CC ; Jump to subroutine at $CC95.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $BA.b		; 85 BA ; Store accumulator to $BA.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $B8.b		; 85 B8 ; Store accumulator to $B8.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $03F4.w		; EE F4 03 ; Increment $03F4.w [Flags: ZN]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$1488.w		; A0 88 14 ; Load #$1488.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	sta $7E2012.l,X		; 9F 12 20 7E ; Store accumulator (long,X) $7E2012.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2084.l,X		; 9F 84 20 7E ; Store accumulator (long,X) $7E2084.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2092.l,X		; 9F 92 20 7E ; Store accumulator (long,X) $7E2092.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2104.l,X		; 9F 04 21 7E ; Store accumulator (long,X) $7E2104.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2112.l,X		; 9F 12 21 7E ; Store accumulator (long,X) $7E2112.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2184.l,X		; 9F 84 21 7E ; Store accumulator (long,X) $7E2184.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2192.l,X		; 9F 92 21 7E ; Store accumulator (long,X) $7E2192.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E201E.l,X		; 9F 1E 20 7E ; Store accumulator (long,X) $7E201E.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $7E200E.l,X		; 9F 0E 20 7E ; Store accumulator (long,X) $7E200E.l,X [Reads: Accumulator, X Index]
	sta $7E2010.l,X		; 9F 10 20 7E ; Store accumulator (long,X) $7E2010.l,X [Reads: Accumulator, X Index]
	sta $7E201C.l,X		; 9F 1C 20 7E ; Store accumulator (long,X) $7E201C.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2102.l,X		; 9F 02 21 7E ; Store accumulator (long,X) $7E2102.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E211C.l,X		; 9F 1C 21 7E ; Store accumulator (long,X) $7E211C.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D04.w		; 20 04 9D ; Jump to subroutine at $9D04.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $9D04.w		; 20 04 9D ; Jump to subroutine at $9D04.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E1		; D0 E1 ; Branch if not equal to $D0, $E1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$001B.w		; C9 1B 00 ; Compare #$001B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	ldx #$1614.w		; A2 14 16 ; Load #$1614.w into X register [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $AF.b		; C5 AF ; Compare $AF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C9.w		; 2D C9 98 ; Logical AND $98C9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	sty $047C.w		; 8C 7C 04 ; Store Y register to $047C.w [Reads: Y Index]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$162C.w		; A2 2C 16 ; Load #$162C.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $3C		; B0 3C ; Branch if carry set to $B0, $3C [Flow: branch]
	ldy #$1DFA.w		; A0 FA 1D ; Load #$1DFA.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $F9		; B0 F9 ; Branch if carry set to $B0, $F9 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	ldy #$16DC.w		; A0 DC 16 ; Load #$16DC.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0514.w		; A9 14 05 ; Load #$0514.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9E06.w		; 20 06 9E ; Jump to subroutine at $9E06.w [Writes: Stack Pointer] [Flow: call]
	ldy #$17F6.w		; A0 F6 17 ; Load #$17F6.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0554.w		; A9 54 05 ; Load #$0554.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9E06.w		; 20 06 9E ; Jump to subroutine at $9E06.w [Writes: Stack Pointer] [Flow: call]
	ldy #$1914.w		; A0 14 19 ; Load #$1914.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$1514.w		; A9 14 15 ; Load #$1514.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9E06.w		; 20 06 9E ; Jump to subroutine at $9E06.w [Writes: Stack Pointer] [Flow: call]
	ldy #$1A2A.w		; A0 2A 1A ; Load #$1A2A.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$1554.w		; A9 54 15 ; Load #$1554.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$000C.w		; A9 0C 00 ; Load #$000C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$000C.w		; A9 0C 00 ; Load #$000C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DE		; D0 DE ; Branch if not equal to $D0, $DE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$000E.w		; A9 0E 00 ; Load #$000E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1B4A.w		; A0 4A 1B ; Load #$1B4A.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E201A.l,X		; 9F 1A 20 7E ; Store accumulator (long,X) $7E201A.l,X [Reads: Accumulator, X Index]
	lda $9B6E.w,Y		; B9 6E 9B ; Load $9B6E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2016.l,X		; 9F 16 20 7E ; Store accumulator (long,X) $7E2016.l,X [Reads: Accumulator, X Index]
	sta $7E2018.l,X		; 9F 18 20 7E ; Store accumulator (long,X) $7E2018.l,X [Reads: Accumulator, X Index]
	lda $9B8A.w,Y		; B9 8A 9B ; Load $9B8A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2014.l,X		; 9F 14 20 7E ; Store accumulator (long,X) $7E2014.l,X [Reads: Accumulator, X Index]
	lda $9BA6.w,Y		; B9 A6 9B ; Load $9BA6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2008.l,X		; 9F 08 20 7E ; Store accumulator (long,X) $7E2008.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2012.l,X		; 9F 12 20 7E ; Store accumulator (long,X) $7E2012.l,X [Reads: Accumulator, X Index]
	lda $9BC2.w,Y		; B9 C2 9B ; Load $9BC2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E200A.l,X		; 9F 0A 20 7E ; Store accumulator (long,X) $7E200A.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2010.l,X		; 9F 10 20 7E ; Store accumulator (long,X) $7E2010.l,X [Reads: Accumulator, X Index]
	lda $9BDE.w,Y		; B9 DE 9B ; Load $9BDE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E200C.l,X		; 9F 0C 20 7E ; Store accumulator (long,X) $7E200C.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E200E.l,X		; 9F 0E 20 7E ; Store accumulator (long,X) $7E200E.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $98		; D0 98 ; Branch if not equal to $D0, $98 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1BF2.w		; A0 F2 1B ; Load #$1BF2.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E220E.l,X		; 9F 0E 22 7E ; Store accumulator (long,X) $7E220E.l,X [Reads: Accumulator, X Index]
	sta $7E221A.l,X		; 9F 1A 22 7E ; Store accumulator (long,X) $7E221A.l,X [Reads: Accumulator, X Index]
	sta $7E2226.l,X		; 9F 26 22 7E ; Store accumulator (long,X) $7E2226.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E228E.l,X		; 9F 8E 22 7E ; Store accumulator (long,X) $7E228E.l,X [Reads: Accumulator, X Index]
	sta $7E229A.l,X		; 9F 9A 22 7E ; Store accumulator (long,X) $7E229A.l,X [Reads: Accumulator, X Index]
	sta $7E22A6.l,X		; 9F A6 22 7E ; Store accumulator (long,X) $7E22A6.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E230E.l,X		; 9F 0E 23 7E ; Store accumulator (long,X) $7E230E.l,X [Reads: Accumulator, X Index]
	sta $7E231A.l,X		; 9F 1A 23 7E ; Store accumulator (long,X) $7E231A.l,X [Reads: Accumulator, X Index]
	sta $7E2326.l,X		; 9F 26 23 7E ; Store accumulator (long,X) $7E2326.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E238E.l,X		; 9F 8E 23 7E ; Store accumulator (long,X) $7E238E.l,X [Reads: Accumulator, X Index]
	sta $7E239A.l,X		; 9F 9A 23 7E ; Store accumulator (long,X) $7E239A.l,X [Reads: Accumulator, X Index]
	sta $7E23A6.l,X		; 9F A6 23 7E ; Store accumulator (long,X) $7E23A6.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $B6		; D0 B6 ; Branch if not equal to $D0, $B6 [Flow: branch]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1C22.w		; A0 22 1C ; Load #$1C22.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2504.l,X		; 9F 04 25 7E ; Store accumulator (long,X) $7E2504.l,X [Reads: Accumulator, X Index]
	sta $7E2486.l,X		; 9F 86 24 7E ; Store accumulator (long,X) $7E2486.l,X [Reads: Accumulator, X Index]
	sta $7E2408.l,X		; 9F 08 24 7E ; Store accumulator (long,X) $7E2408.l,X [Reads: Accumulator, X Index]
	sta $7E238A.l,X		; 9F 8A 23 7E ; Store accumulator (long,X) $7E238A.l,X [Reads: Accumulator, X Index]
	sta $7E230C.l,X		; 9F 0C 23 7E ; Store accumulator (long,X) $7E230C.l,X [Reads: Accumulator, X Index]
	sta $7E228E.l,X		; 9F 8E 22 7E ; Store accumulator (long,X) $7E228E.l,X [Reads: Accumulator, X Index]
	sta $7E2210.l,X		; 9F 10 22 7E ; Store accumulator (long,X) $7E2210.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E222E.l,X		; 9F 2E 22 7E ; Store accumulator (long,X) $7E222E.l,X [Reads: Accumulator, X Index]
	sta $7E22B0.l,X		; 9F B0 22 7E ; Store accumulator (long,X) $7E22B0.l,X [Reads: Accumulator, X Index]
	sta $7E2332.l,X		; 9F 32 23 7E ; Store accumulator (long,X) $7E2332.l,X [Reads: Accumulator, X Index]
	sta $7E23B4.l,X		; 9F B4 23 7E ; Store accumulator (long,X) $7E23B4.l,X [Reads: Accumulator, X Index]
	sta $7E2436.l,X		; 9F 36 24 7E ; Store accumulator (long,X) $7E2436.l,X [Reads: Accumulator, X Index]
	sta $7E24B8.l,X		; 9F B8 24 7E ; Store accumulator (long,X) $7E24B8.l,X [Reads: Accumulator, X Index]
	sta $7E253A.l,X		; 9F 3A 25 7E ; Store accumulator (long,X) $7E253A.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $B6		; D0 B6 ; Branch if not equal to $D0, $B6 [Flow: branch]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1C2C.w		; A0 2C 1C ; Load #$1C2C.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2584.l,X		; 9F 84 25 7E ; Store accumulator (long,X) $7E2584.l,X [Reads: Accumulator, X Index]
	sta $7E2884.l,X		; 9F 84 28 7E ; Store accumulator (long,X) $7E2884.l,X [Reads: Accumulator, X Index]
	sta $7E2B84.l,X		; 9F 84 2B 7E ; Store accumulator (long,X) $7E2B84.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E25BA.l,X		; 9F BA 25 7E ; Store accumulator (long,X) $7E25BA.l,X [Reads: Accumulator, X Index]
	sta $7E28BA.l,X		; 9F BA 28 7E ; Store accumulator (long,X) $7E28BA.l,X [Reads: Accumulator, X Index]
	sta $7E2BBA.l,X		; 9F BA 2B 7E ; Store accumulator (long,X) $7E2BBA.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2586.l,X		; 9F 86 25 7E ; Store accumulator (long,X) $7E2586.l,X [Reads: Accumulator, X Index]
	sta $7E2886.l,X		; 9F 86 28 7E ; Store accumulator (long,X) $7E2886.l,X [Reads: Accumulator, X Index]
	sta $7E2B86.l,X		; 9F 86 2B 7E ; Store accumulator (long,X) $7E2B86.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E25B8.l,X		; 9F B8 25 7E ; Store accumulator (long,X) $7E25B8.l,X [Reads: Accumulator, X Index]
	sta $7E28B8.l,X		; 9F B8 28 7E ; Store accumulator (long,X) $7E28B8.l,X [Reads: Accumulator, X Index]
	sta $7E2BB8.l,X		; 9F B8 2B 7E ; Store accumulator (long,X) $7E2BB8.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2588.l,X		; 9F 88 25 7E ; Store accumulator (long,X) $7E2588.l,X [Reads: Accumulator, X Index]
	sta $7E2888.l,X		; 9F 88 28 7E ; Store accumulator (long,X) $7E2888.l,X [Reads: Accumulator, X Index]
	sta $7E2B88.l,X		; 9F 88 2B 7E ; Store accumulator (long,X) $7E2B88.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E25B6.l,X		; 9F B6 25 7E ; Store accumulator (long,X) $7E25B6.l,X [Reads: Accumulator, X Index]
	sta $7E28B6.l,X		; 9F B6 28 7E ; Store accumulator (long,X) $7E28B6.l,X [Reads: Accumulator, X Index]
	sta $7E2BB6.l,X		; 9F B6 2B 7E ; Store accumulator (long,X) $7E2BB6.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E258A.l,X		; 9F 8A 25 7E ; Store accumulator (long,X) $7E258A.l,X [Reads: Accumulator, X Index]
	sta $7E288A.l,X		; 9F 8A 28 7E ; Store accumulator (long,X) $7E288A.l,X [Reads: Accumulator, X Index]
	sta $7E2B8A.l,X		; 9F 8A 2B 7E ; Store accumulator (long,X) $7E2B8A.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E25B4.l,X		; 9F B4 25 7E ; Store accumulator (long,X) $7E25B4.l,X [Reads: Accumulator, X Index]
	sta $7E28B4.l,X		; 9F B4 28 7E ; Store accumulator (long,X) $7E28B4.l,X [Reads: Accumulator, X Index]
	sta $7E2BB4.l,X		; 9F B4 2B 7E ; Store accumulator (long,X) $7E2BB4.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $9F55.w		; 4C 55 9F ; Jump to $9F55.w [Flow: jump]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1C5C.w		; A0 5C 1C ; Load #$1C5C.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2498.l,X		; 9F 98 24 7E ; Store accumulator (long,X) $7E2498.l,X [Reads: Accumulator, X Index]
	sta $7E24A4.l,X		; 9F A4 24 7E ; Store accumulator (long,X) $7E24A4.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2518.l,X		; 9F 18 25 7E ; Store accumulator (long,X) $7E2518.l,X [Reads: Accumulator, X Index]
	sta $7E2524.l,X		; 9F 24 25 7E ; Store accumulator (long,X) $7E2524.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E2		; D0 E2 ; Branch if not equal to $D0, $E2 [Flow: branch]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1C74.w		; A0 74 1C ; Load #$1C74.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E270E.l,X		; 9F 0E 27 7E ; Store accumulator (long,X) $7E270E.l,X [Reads: Accumulator, X Index]
	sta $7E2A0E.l,X		; 9F 0E 2A 7E ; Store accumulator (long,X) $7E2A0E.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2710.l,X		; 9F 10 27 7E ; Store accumulator (long,X) $7E2710.l,X [Reads: Accumulator, X Index]
	sta $7E2A10.l,X		; 9F 10 2A 7E ; Store accumulator (long,X) $7E2A10.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$1C8C.w		; A0 8C 1C ; Load #$1C8C.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E248E.l,X		; 9F 8E 24 7E ; Store accumulator (long,X) $7E248E.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E250E.l,X		; 9F 0E 25 7E ; Store accumulator (long,X) $7E250E.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E258E.l,X		; 9F 8E 25 7E ; Store accumulator (long,X) $7E258E.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E260E.l,X		; 9F 0E 26 7E ; Store accumulator (long,X) $7E260E.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E268E.l,X		; 9F 8E 26 7E ; Store accumulator (long,X) $7E268E.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D1		; D0 D1 ; Branch if not equal to $D0, $D1 [Flow: branch]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7E2E1C.l,X		; BF 1C 2E 7E ; Load long $7E2E1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2E1C.l,X		; 9F 1C 2E 7E ; Store accumulator (long,X) $7E2E1C.l,X [Reads: Accumulator, X Index]
	lda $7E2E9C.l,X		; BF 9C 2E 7E ; Load long $7E2E9C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2E9C.l,X		; 9F 9C 2E 7E ; Store accumulator (long,X) $7E2E9C.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E4		; D0 E4 ; Branch if not equal to $D0, $E4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$202E.w		; A0 2E 20 ; Load #$202E.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	sta $7E2084.l,X		; 9F 84 20 7E ; Store accumulator (long,X) $7E2084.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2102.l,X		; 9F 02 21 7E ; Store accumulator (long,X) $7E2102.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2104.l,X		; 9F 04 21 7E ; Store accumulator (long,X) $7E2104.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D7		; D0 D7 ; Branch if not equal to $D0, $D7 [Flow: branch]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E2184.l,X		; 9F 84 21 7E ; Store accumulator (long,X) $7E2184.l,X [Reads: Accumulator, X Index]
	sta $7E2194.l,X		; 9F 94 21 7E ; Store accumulator (long,X) $7E2194.l,X [Reads: Accumulator, X Index]
	sta $7E2198.l,X		; 9F 98 21 7E ; Store accumulator (long,X) $7E2198.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2182.l,X		; 9F 82 21 7E ; Store accumulator (long,X) $7E2182.l,X [Reads: Accumulator, X Index]
	sta $7E2186.l,X		; 9F 86 21 7E ; Store accumulator (long,X) $7E2186.l,X [Reads: Accumulator, X Index]
	sta $7E2196.l,X		; 9F 96 21 7E ; Store accumulator (long,X) $7E2196.l,X [Reads: Accumulator, X Index]
	sta $7E219A.l,X		; 9F 9A 21 7E ; Store accumulator (long,X) $7E219A.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2188.l,X		; 9F 88 21 7E ; Store accumulator (long,X) $7E2188.l,X [Reads: Accumulator, X Index]
	sta $7E218C.l,X		; 9F 8C 21 7E ; Store accumulator (long,X) $7E218C.l,X [Reads: Accumulator, X Index]
	sta $7E2190.l,X		; 9F 90 21 7E ; Store accumulator (long,X) $7E2190.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E218A.l,X		; 9F 8A 21 7E ; Store accumulator (long,X) $7E218A.l,X [Reads: Accumulator, X Index]
	sta $7E218E.l,X		; 9F 8E 21 7E ; Store accumulator (long,X) $7E218E.l,X [Reads: Accumulator, X Index]
	sta $7E2192.l,X		; 9F 92 21 7E ; Store accumulator (long,X) $7E2192.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $B0		; D0 B0 ; Branch if not equal to $D0, $B0 [Flow: branch]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E201A.l,X		; 9F 1A 20 7E ; Store accumulator (long,X) $7E201A.l,X [Reads: Accumulator, X Index]
	sta $7E209A.l,X		; 9F 9A 20 7E ; Store accumulator (long,X) $7E209A.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E211A.l,X		; 9F 1A 21 7E ; Store accumulator (long,X) $7E211A.l,X [Reads: Accumulator, X Index]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$202E.w		; A0 2E 20 ; Load #$202E.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B66.w,Y		; B9 66 9B ; Load $9B66.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2506.l,X		; 9F 06 25 7E ; Store accumulator (long,X) $7E2506.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2514.l,X		; 9F 14 25 7E ; Store accumulator (long,X) $7E2514.l,X [Reads: Accumulator, X Index]
	lda $9B6E.w,Y		; B9 6E 9B ; Load $9B6E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2508.l,X		; 9F 08 25 7E ; Store accumulator (long,X) $7E2508.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2512.l,X		; 9F 12 25 7E ; Store accumulator (long,X) $7E2512.l,X [Reads: Accumulator, X Index]
	lda $9B76.w,Y		; B9 76 9B ; Load $9B76.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E250A.l,X		; 9F 0A 25 7E ; Store accumulator (long,X) $7E250A.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2510.l,X		; 9F 10 25 7E ; Store accumulator (long,X) $7E2510.l,X [Reads: Accumulator, X Index]
	lda $9B7E.w,Y		; B9 7E 9B ; Load $9B7E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E250C.l,X		; 9F 0C 25 7E ; Store accumulator (long,X) $7E250C.l,X [Reads: Accumulator, X Index]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E250E.l,X		; 9F 0E 25 7E ; Store accumulator (long,X) $7E250E.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $BC		; D0 BC ; Branch if not equal to $D0, $BC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5A.w,X		; BD 5A 9B ; Load $9B5A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5C.w,X		; BD 5C 9B ; Load $9B5C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E7		; D0 E7 ; Branch if not equal to $D0, $E7 [Flow: branch]
	lda $9B5E.w,X		; BD 5E 9B ; Load $9B5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B60.w,X		; BD 60 9B ; Load $9B60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B62.w,X		; BD 62 9B ; Load $9B62.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$20F6.w		; A0 F6 20 ; Load #$20F6.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0016.w		; A9 16 00 ; Load #$0016.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4200.l,X		; 9F 00 42 7E ; Store accumulator (long,X) $7E4200.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4280.l,X		; 9F 80 42 7E ; Store accumulator (long,X) $7E4280.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4300.l,X		; 9F 00 43 7E ; Store accumulator (long,X) $7E4300.l,X [Reads: Accumulator, X Index]
	lda $9B60.w,Y		; B9 60 9B ; Load $9B60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4380.l,X		; 9F 80 43 7E ; Store accumulator (long,X) $7E4380.l,X [Reads: Accumulator, X Index]
	lda $9B62.w,Y		; B9 62 9B ; Load $9B62.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4400.l,X		; 9F 00 44 7E ; Store accumulator (long,X) $7E4400.l,X [Reads: Accumulator, X Index]
	lda $9B64.w,Y		; B9 64 9B ; Load $9B64.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4480.l,X		; 9F 80 44 7E ; Store accumulator (long,X) $7E4480.l,X [Reads: Accumulator, X Index]
	lda $9B66.w,Y		; B9 66 9B ; Load $9B66.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4500.l,X		; 9F 00 45 7E ; Store accumulator (long,X) $7E4500.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0016.w		; 69 16 00 ; Add #$0016.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $A7		; D0 A7 ; Branch if not equal to $D0, $A7 [Flow: branch]
	ldy #$22DA.w		; A0 DA 22 ; Load #$22DA.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4592.l,X		; 9F 92 45 7E ; Store accumulator (long,X) $7E4592.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4612.l,X		; 9F 12 46 7E ; Store accumulator (long,X) $7E4612.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EA		; D0 EA ; Branch if not equal to $D0, $EA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ldx #$00E0.w		; A2 E0 00 ; Load #$00E0.w into X register [Writes: X Index] [Flags: ZN]
	jmp $8A1F.w		; 4C 1F 8A ; Jump to $8A1F.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $043C.w		; AE 3C 04 ; Load $043C.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B8.w,X		; 9D B8 06 ; Store accumulator to $06B8.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $043C.w		; 8E 3C 04 ; Store X register to $043C.w [Reads: X Index]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $043E.w		; AE 3E 04 ; Load $043E.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B8.w,X		; 9D B8 06 ; Store accumulator to $06B8.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $043E.w		; 8E 3E 04 ; Store X register to $043E.w [Reads: X Index]
	stx $0446.w		; 8E 46 04 ; Store X register to $0446.w [Reads: X Index]
	stx $0448.w		; 8E 48 04 ; Store X register to $0448.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0414.w		; 9C 14 04 ; Store zero to $0414.w
	ldx #$10C8.w		; A2 C8 10 ; Load #$10C8.w into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0440.w		; AE 40 04 ; Load $0440.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B8.w,X		; 9D B8 06 ; Store accumulator to $06B8.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0440.w		; 8E 40 04 ; Store X register to $0440.w [Reads: X Index]
	stx $0446.w		; 8E 46 04 ; Store X register to $0446.w [Reads: X Index]
	stx $0448.w		; 8E 48 04 ; Store X register to $0448.w [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$001B.w		; C9 1B 00 ; Compare #$001B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $CB		; F0 CB ; Branch if equal to $F0, $CB [Flow: branch]
	ldx $0442.w		; AE 42 04 ; Load $0442.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B8.w,X		; 9D B8 06 ; Store accumulator to $06B8.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0442.w		; 8E 42 04 ; Store X register to $0442.w [Reads: X Index]
	stx $0444.w		; 8E 44 04 ; Store X register to $0444.w [Reads: X Index]
	ldx #$10C8.w		; A2 C8 10 ; Load #$10C8.w into X register [Writes: X Index] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $049A.w		; AE 9A 04 ; Load $049A.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B8.w,X		; 9D B8 06 ; Store accumulator to $06B8.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $049A.w		; 8E 9A 04 ; Store X register to $049A.w [Reads: X Index]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $049C.w		; AE 9C 04 ; Load $049C.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06EC.w,X		; 9D EC 06 ; Store accumulator to $06EC.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $049C.w		; 8E 9C 04 ; Store X register to $049C.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0414.w		; 9C 14 04 ; Store zero to $0414.w
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $049E.w		; AE 9E 04 ; Load $049E.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06EC.w,X		; 9D EC 06 ; Store accumulator to $06EC.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $049E.w		; 8E 9E 04 ; Store X register to $049E.w [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$001B.w		; C9 1B 00 ; Compare #$001B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $D2		; F0 D2 ; Branch if equal to $F0, $D2 [Flow: branch]
	lda #$6202.w		; A9 02 62 ; Load #$6202.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	ldx $04AE.w		; AE AE 04 ; Load $04AE.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06EC.w,X		; 9D EC 06 ; Store accumulator to $06EC.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04AE.w		; 8E AE 04 ; Store X register to $04AE.w [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	ldx $0446.w		; AE 46 04 ; Load $0446.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B8.w,X		; 9D B8 06 ; Store accumulator to $06B8.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0446.w		; 8E 46 04 ; Store X register to $0446.w [Reads: X Index]
	stx $0448.w		; 8E 48 04 ; Store X register to $0448.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy #$1108.w		; A0 08 11 ; Load #$1108.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $7E4002.l,X		; 9F 02 40 7E ; Store accumulator (long,X) $7E4002.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	sta $7E4004.l,X		; 9F 04 40 7E ; Store accumulator (long,X) $7E4004.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	sta $7E4006.l,X		; 9F 06 40 7E ; Store accumulator (long,X) $7E4006.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	sta $7E4082.l,X		; 9F 82 40 7E ; Store accumulator (long,X) $7E4082.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2084.l,X		; 9F 84 20 7E ; Store accumulator (long,X) $7E2084.l,X [Reads: Accumulator, X Index]
	sta $7E4084.l,X		; 9F 84 40 7E ; Store accumulator (long,X) $7E4084.l,X [Reads: Accumulator, X Index]
	lda $9B60.w,Y		; B9 60 9B ; Load $9B60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2086.l,X		; 9F 86 20 7E ; Store accumulator (long,X) $7E2086.l,X [Reads: Accumulator, X Index]
	sta $7E4086.l,X		; 9F 86 40 7E ; Store accumulator (long,X) $7E4086.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0438.w		; AE 38 04 ; Load $0438.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0438.w		; 8E 38 04 ; Store X register to $0438.w [Reads: X Index]
	stx $047E.w		; 8E 7E 04 ; Store X register to $047E.w [Reads: X Index]
	stx $0482.w		; 8E 82 04 ; Store X register to $0482.w [Reads: X Index]
	stx $04A2.w		; 8E A2 04 ; Store X register to $04A2.w [Reads: X Index]
	stx $04A4.w		; 8E A4 04 ; Store X register to $04A4.w [Reads: X Index]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	ldx #$1088.w		; A2 88 10 ; Load #$1088.w into X register [Writes: X Index] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	ldx $043A.w		; AE 3A 04 ; Load $043A.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	ldx #$10A8.w		; A2 A8 10 ; Load #$10A8.w into X register [Writes: X Index] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	ldx $043A.w		; AE 3A 04 ; Load $043A.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	ldx #$10A8.w		; A2 A8 10 ; Load #$10A8.w into X register [Writes: X Index] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	ldx $047E.w		; AE 7E 04 ; Load $047E.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $047E.w		; 8E 7E 04 ; Store X register to $047E.w [Reads: X Index]
	stx $0482.w		; 8E 82 04 ; Store X register to $0482.w [Reads: X Index]
	stx $04A2.w		; 8E A2 04 ; Store X register to $04A2.w [Reads: X Index]
	stx $04A4.w		; 8E A4 04 ; Store X register to $04A4.w [Reads: X Index]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	ldx #$1148.w		; A2 48 11 ; Load #$1148.w into X register [Writes: X Index] [Flags: ZN]
	.db $80, $6E		; 80 6E ; Branch always to $80, $6E [Flow: branch]
	ldx $0482.w		; AE 82 04 ; Load $0482.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0482.w		; 8E 82 04 ; Store X register to $0482.w [Reads: X Index]
	stx $04A2.w		; 8E A2 04 ; Store X register to $04A2.w [Reads: X Index]
	stx $04A4.w		; 8E A4 04 ; Store X register to $04A4.w [Reads: X Index]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	ldx #$1178.w		; A2 78 11 ; Load #$1178.w into X register [Writes: X Index] [Flags: ZN]
	.db $80, $7E		; 80 7E ; Branch always to $80, $7E [Flow: branch]
	ldx $0480.w		; AE 80 04 ; Load $0480.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	ldx #$1160.w		; A2 60 11 ; Load #$1160.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E200A.l,X		; BF 0A 20 7E ; Load long $7E200A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E200A.l,X		; 9F 0A 20 7E ; Store accumulator (long,X) $7E200A.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0484.w		; AE 84 04 ; Load $0484.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	ldx #$1190.w		; A2 90 11 ; Load #$1190.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7E4000.l,X		; BF 00 40 7E ; Load long $7E4000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $7E400A.l,X		; BF 0A 40 7E ; Load long $7E400A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E400A.l,X		; 9F 0A 40 7E ; Store accumulator (long,X) $7E400A.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A2.w		; AE A2 04 ; Load $04A2.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A2.w		; 8E A2 04 ; Store X register to $04A2.w [Reads: X Index]
	stx $04A4.w		; 8E A4 04 ; Store X register to $04A4.w [Reads: X Index]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A6.w		; AE A6 04 ; Load $04A6.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A4.w		; AE A4 04 ; Load $04A4.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A4.w		; 8E A4 04 ; Store X register to $04A4.w [Reads: X Index]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A8.w		; AE A8 04 ; Load $04A8.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A2.w		; AE A2 04 ; Load $04A2.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A2.w		; 8E A2 04 ; Store X register to $04A2.w [Reads: X Index]
	stx $04A4.w		; 8E A4 04 ; Store X register to $04A4.w [Reads: X Index]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A6.w		; AE A6 04 ; Load $04A6.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0200.w		; E9 00 02 ; Subtract #$0200.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A4.w		; AE A4 04 ; Load $04A4.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A4.w		; 8E A4 04 ; Store X register to $04A4.w [Reads: X Index]
	stx $043A.w		; 8E 3A 04 ; Store X register to $043A.w [Reads: X Index]
	stx $0480.w		; 8E 80 04 ; Store X register to $0480.w [Reads: X Index]
	stx $0484.w		; 8E 84 04 ; Store X register to $0484.w [Reads: X Index]
	stx $04A6.w		; 8E A6 04 ; Store X register to $04A6.w [Reads: X Index]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04A8.w		; AE A8 04 ; Load $04A8.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06B0.w,X		; 9D B0 06 ; Store accumulator to $06B0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04A8.w		; 8E A8 04 ; Store X register to $04A8.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $A6EE.w		; 4C EE A6 ; Jump to $A6EE.w [Flow: jump]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8D80.w		; 20 80 8D ; Jump to subroutine at $8D80.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8D80.w		; 4C 80 8D ; Jump to $8D80.w [Flow: jump]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$2376.w		; A2 76 23 ; Load #$2376.w into X register [Writes: X Index] [Flags: ZN]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0300.w		; 69 00 03 ; Add #$0300.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$2396.w		; A2 96 23 ; Load #$2396.w into X register [Writes: X Index] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	lda $7EF0CA.l		; AF CA F0 7E ; Load long $7EF0CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01FC.w		; 69 FC 01 ; Add #$01FC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0204.w		; 69 04 02 ; Add #$0204.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8A44.w		; 20 44 8A ; Jump to subroutine at $8A44.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8A44.w		; 4C 44 8A ; Jump to $8A44.w [Flow: jump]
	ldy $997E.w,X		; BC 7E 99 ; Load Y register $997E.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $AC70.w		; 4C 70 AC ; Jump to $AC70.w [Flow: jump]
	cmp #$0016.w		; C9 16 00 ; Compare #$0016.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00FE.w		; E9 FE 00 ; Subtract #$00FE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jmp $B09F.w		; 4C 9F B0 ; Jump to $B09F.w [Flow: jump]
	cmp #$0032.w		; C9 32 00 ; Compare #$0032.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $AC3B.w		; 4C 3B AC ; Jump to $AC3B.w [Flow: jump]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $AF7F.w		; 4C 7F AF ; Jump to $AF7F.w [Flow: jump]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00FE.w		; E9 FE 00 ; Subtract #$00FE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jmp $B092.w		; 4C 92 B0 ; Jump to $B092.w [Flow: jump]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F07F.w		; 29 7F F0 ; Logical AND #$F07F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B1A4.w		; 20 A4 B1 ; Jump to subroutine at $B1A4.w [Writes: Stack Pointer] [Flow: call]
	jmp $A90F.w		; 4C 0F A9 ; Jump to $A90F.w [Flow: jump]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	ldx $19E0.w		; AE E0 19 ; Load $19E0.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $19E2.w,X		; 9D E2 19 ; Store accumulator to $19E2.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $19E0.w		; 8E E0 19 ; Store X register to $19E0.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $A90F.w		; 20 0F A9 ; Jump to subroutine at $A90F.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $7C		; 80 7C ; Branch always to $80, $7C [Flow: branch]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$0022.w		; C9 22 00 ; Compare #$0022.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0024.w		; C9 24 00 ; Compare #$0024.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0026.w		; C9 26 00 ; Compare #$0026.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $75		; D0 75 ; Branch if not equal to $D0, $75 [Flow: branch]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $19C0.w,X		; 9D C0 19 ; Store accumulator to $19C0.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $19A0.w,X		; 9D A0 19 ; Store accumulator to $19A0.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1980.w,X		; 9D 80 19 ; Store accumulator to $1980.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $98C0.w,Y		; B9 C0 98 ; Load $98C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	and $068C.w		; 2D 8C 06 ; Logical AND $068C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0460.w		; 8E 60 04 ; Store X register to $0460.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0024.w		; C9 24 00 ; Compare #$0024.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $6F		; 90 6F ; Branch if carry clear to $90, $6F [Flow: branch]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda $CD9E.w,Y		; B9 9E CD ; Load $CD9E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $199E.w,X		; BD 9E 19 ; Load $199E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $199E.w,X		; 9D 9E 19 ; Store accumulator to $199E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $AD41.w		; 4C 41 AD ; Jump to $AD41.w [Flow: jump]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$000C.w		; E0 0C 00 ; Compare #$000C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $1C		; 90 1C ; Branch if carry clear to $90, $1C [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$0010.w		; 09 10 00 ; Logical OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldy $998A.w,X		; BC 8A 99 ; Load Y register $998A.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $AA66.w		; 20 66 AA ; Jump to subroutine at $AA66.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $44		; 90 44 ; Branch if carry clear to $90, $44 [Flow: branch]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0036.w		; C0 36 00 ; Compare #$0036.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0038.w		; C0 38 00 ; Compare #$0038.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $CD9E.w,Y		; BE 9E CD ; Load X register $CD9E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $9996.w,X		; BC 96 99 ; Load Y register $9996.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp #$0016.w		; C9 16 00 ; Compare #$0016.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0202.w		; 69 02 02 ; Add #$0202.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $B09F.w		; 4C 9F B0 ; Jump to $B09F.w [Flow: jump]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $AFC8.w		; 4C C8 AF ; Jump to $AFC8.w [Flow: jump]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0202.w		; 69 02 02 ; Add #$0202.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $B092.w		; 4C 92 B0 ; Jump to $B092.w [Flow: jump]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	ldx $19E0.w		; AE E0 19 ; Load $19E0.w into X register [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $19E2.w,X		; 9D E2 19 ; Store accumulator to $19E2.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $19E0.w		; 8E E0 19 ; Store X register to $19E0.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $ADD4.w		; 4C D4 AD ; Jump to $ADD4.w [Flow: jump]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0206.w		; E9 06 02 ; Subtract #$0206.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy #$2656.w		; A0 56 26 ; Load #$2656.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $9DA2.w		; 4C A2 9D ; Jump to $9DA2.w [Flow: jump]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0206.w		; E9 06 02 ; Subtract #$0206.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy #$2656.w		; A0 56 26 ; Load #$2656.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9DA2.w		; 20 A2 9D ; Jump to subroutine at $9DA2.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$2080.w		; E9 80 20 ; Subtract #$2080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$000A.w		; A0 0A 00 ; Load #$000A.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $7E4000.l,X		; BF 00 40 7E ; Load long $7E4000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$000E.w		; C9 0E 00 ; Compare #$000E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $B1A4.w		; 20 A4 B1 ; Jump to subroutine at $B1A4.w [Writes: Stack Pointer] [Flow: call]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$26F6.w		; A2 F6 26 ; Load #$26F6.w into X register [Writes: X Index] [Flags: ZN]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $AA2F.w		; 20 2F AA ; Jump to subroutine at $AA2F.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $AE		; 80 AE ; Branch always to $80, $AE [Flow: branch]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $B1A4.w		; 20 A4 B1 ; Jump to subroutine at $B1A4.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $AA80.w		; 20 80 AA ; Jump to subroutine at $AA80.w [Writes: Stack Pointer] [Flow: call]
	jmp $A8FA.w		; 4C FA A8 ; Jump to $A8FA.w [Flow: jump]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$001E.w		; C0 1E 00 ; Compare #$001E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cpy #$0036.w		; C0 36 00 ; Compare #$0036.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0038.w		; C0 38 00 ; Compare #$0038.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $CE06.w,Y		; BE 06 CE ; Load X register $CE06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$DA.b],Y		; 97 DA ; Store accumulator (long indexed) [$DA.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $99AE.w,X		; BC AE 99 ; Load Y register $99AE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp #$0016.w		; C9 16 00 ; Compare #$0016.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$007C.w		; 69 7C 00 ; Add #$007C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $B09F.w		; 4C 9F B0 ; Jump to $B09F.w [Flow: jump]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $B00D.w		; 4C 0D B0 ; Jump to $B00D.w [Flow: jump]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$007C.w		; 69 7C 00 ; Add #$007C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $B092.w		; 4C 92 B0 ; Jump to $B092.w [Flow: jump]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FFC0.w		; 29 C0 FF ; Logical AND #$FFC0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B1E7.w		; 20 E7 B1 ; Jump to subroutine at $B1E7.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $AB1F.w		; 20 1F AB ; Jump to subroutine at $AB1F.w [Writes: Stack Pointer] [Flow: call]
	jmp $A8FA.w		; 4C FA A8 ; Jump to $A8FA.w [Flow: jump]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $AE40.w		; 4C 40 AE ; Jump to $AE40.w [Flow: jump]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$000C.w		; E0 0C 00 ; Compare #$000C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $1C		; 90 1C ; Branch if carry clear to $90, $1C [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$0010.w		; 09 10 00 ; Logical OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldy $99BA.w,X		; BC BA 99 ; Load Y register $99BA.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $ABC8.w		; 20 C8 AB ; Jump to subroutine at $ABC8.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0036.w		; C0 36 00 ; Compare #$0036.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0038.w		; C0 38 00 ; Compare #$0038.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $CE66.w,Y		; BE 66 CE ; Load X register $CE66.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$DA.b],Y		; 97 DA ; Store accumulator (long indexed) [$DA.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $99C6.w,X		; BC C6 99 ; Load Y register $99C6.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp #$0016.w		; C9 16 00 ; Compare #$0016.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0088.w		; 69 88 00 ; Add #$0088.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $B09F.w		; 4C 9F B0 ; Jump to $B09F.w [Flow: jump]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $B050.w		; 4C 50 B0 ; Jump to $B050.w [Flow: jump]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0088.w		; 69 88 00 ; Add #$0088.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $B092.w		; 4C 92 B0 ; Jump to $B092.w [Flow: jump]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $AEF0.w		; 4C F0 AE ; Jump to $AEF0.w [Flow: jump]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $B1E7.w		; 20 E7 B1 ; Jump to subroutine at $B1E7.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $ABE2.w		; 20 E2 AB ; Jump to subroutine at $ABE2.w [Writes: Stack Pointer] [Flow: call]
	jmp $A8FA.w		; 4C FA A8 ; Jump to $A8FA.w [Flow: jump]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $4B		; 90 4B ; Branch if carry clear to $90, $4B [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0036.w		; C0 36 00 ; Compare #$0036.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0038.w		; C0 38 00 ; Compare #$0038.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $CEC6.w,Y		; BE C6 CE ; Load X register $CEC6.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$DA.b],Y		; 97 DA ; Store accumulator (long indexed) [$DA.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	ldx $CD9E.w,Y		; BE 9E CD ; Load X register $CD9E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$078A.w		; A2 8A 07 ; Load #$078A.w into X register [Writes: X Index] [Flags: ZN]
	jmp $97ED.w		; 4C ED 97 ; Jump to $97ED.w [Flow: jump]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr $97ED.w		; 20 ED 97 ; Jump to subroutine at $97ED.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	stz $19C0.w,X		; 9E C0 19 ; Store zero to $19C0.w,X [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora #$0030.w		; 09 30 00 ; Logical OR #$0030.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1980.w,X		; 9D 80 19 ; Store accumulator to $1980.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0460.w		; 8E 60 04 ; Store X register to $0460.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $99DE.w,X		; BC DE 99 ; Load Y register $99DE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0014.w		; 69 14 00 ; Add #$0014.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $19A0.w,X		; 9D A0 19 ; Store accumulator to $19A0.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora #$0030.w		; 09 30 00 ; Logical OR #$0030.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1980.w,X		; 9D 80 19 ; Store accumulator to $1980.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,Y		; 39 C0 98 ; AND accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $C4		; F0 C4 ; Branch if equal to $F0, $C4 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	cmp #$25.b		; C9 25 ; Compare #$25.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $A7.b		; A5 A7 ; Load $A7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0002.w		; 09 02 00 ; Logical OR #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	lda $0452.w		; AD 52 04 ; Load $0452.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0100.w		; 09 00 01 ; Logical OR #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0452.w		; 8D 52 04 ; Store accumulator to $0452.w [Reads: Accumulator]
	ldy #$0054.w		; A0 54 00 ; Load #$0054.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $CE06.w,Y		; BE 06 CE ; Load X register $CE06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $ACE4.w		; 20 E4 AC ; Jump to subroutine at $ACE4.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0300.w		; 69 00 03 ; Add #$0300.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	inc $0460.w		; EE 60 04 ; Increment $0460.w [Flags: ZN]
	inc $0460.w		; EE 60 04 ; Increment $0460.w [Flags: ZN]
	lda $FC.b		; A5 FC ; Load $FC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0200.w		; 09 00 02 ; Logical OR #$0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $FC.b		; 85 FC ; Store accumulator to $FC.b [Reads: Accumulator]
	ldy #$0054.w		; A0 54 00 ; Load #$0054.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $CD9E.w,Y		; BE 9E CD ; Load X register $CD9E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0012.w		; A9 12 00 ; Load #$0012.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr $AD25.w		; 20 25 AD ; Jump to subroutine at $AD25.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E2200.l,X		; 9F 00 22 7E ; Store accumulator (long,X) $7E2200.l,X [Reads: Accumulator, X Index]
	sta $7E2280.l,X		; 9F 80 22 7E ; Store accumulator (long,X) $7E2280.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E2		; D0 E2 ; Branch if not equal to $D0, $E2 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5E.w,X		; BD 5E 9B ; Load $9B5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EA		; D0 EA ; Branch if not equal to $D0, $EA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$000C.w		; E0 0C 00 ; Compare #$000C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0046.w		; C9 46 00 ; Compare #$0046.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$0010.w		; 09 10 00 ; Logical OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldy $998A.w,X		; BC 8A 99 ; Load Y register $998A.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jsr $ADD4.w		; 20 D4 AD ; Jump to subroutine at $ADD4.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda #$0044.w		; A9 44 00 ; Load #$0044.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0048.w		; C0 48 00 ; Compare #$0048.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$004A.w		; C0 4A 00 ; Compare #$004A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $CD9E.w,Y		; B9 9E CD ; Load $CD9E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0046.w		; C9 46 00 ; Compare #$0046.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $AF8B.w		; 20 8B AF ; Jump to subroutine at $AF8B.w [Writes: Stack Pointer] [Flow: call]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $199E.w,X		; BD 9E 19 ; Load $199E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $199E.w,X		; 9D 9E 19 ; Store accumulator to $199E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0048.w		; C0 48 00 ; Compare #$0048.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0044.w		; A9 44 00 ; Load #$0044.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$004A.w		; C0 4A 00 ; Compare #$004A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $CE06.w,Y		; B9 06 CE ; Load $CE06.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $AFD4.w		; 20 D4 AF ; Jump to subroutine at $AFD4.w [Writes: Stack Pointer] [Flow: call]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $199E.w,X		; BD 9E 19 ; Load $199E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $199E.w,X		; 9D 9E 19 ; Store accumulator to $199E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$000C.w		; E0 0C 00 ; Compare #$000C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $16		; 90 16 ; Branch if carry clear to $90, $16 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$0010.w		; 09 10 00 ; Logical OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldy $99BA.w,X		; BC BA 99 ; Load Y register $99BA.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jsr $AEF0.w		; 20 F0 AE ; Jump to subroutine at $AEF0.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda #$0044.w		; A9 44 00 ; Load #$0044.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0048.w		; C0 48 00 ; Compare #$0048.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$004A.w		; C0 4A 00 ; Compare #$004A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $CE66.w,Y		; B9 66 CE ; Load $CE66.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4100.l,X		; 9F 00 41 7E ; Store accumulator (long,X) $7E4100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4180.l,X		; 9F 80 41 7E ; Store accumulator (long,X) $7E4180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $B017.w		; 20 17 B0 ; Jump to subroutine at $B017.w [Writes: Stack Pointer] [Flow: call]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $199E.w,X		; BD 9E 19 ; Load $199E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $199E.w,X		; 9D 9E 19 ; Store accumulator to $199E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0048.w		; C0 48 00 ; Compare #$0048.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$0044.w		; A9 44 00 ; Load #$0044.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$004A.w		; C0 4A 00 ; Compare #$004A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $197E.w,X		; BD 7E 19 ; Load $197E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $197E.w,X		; 9D 7E 19 ; Store accumulator to $197E.w,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $CEC6.w,Y		; B9 C6 CE ; Load $CEC6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4002.l,X		; 9F 02 40 7E ; Store accumulator (long,X) $7E4002.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4082.l,X		; 9F 82 40 7E ; Store accumulator (long,X) $7E4082.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4102.l,X		; 9F 02 41 7E ; Store accumulator (long,X) $7E4102.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4182.l,X		; 9F 82 41 7E ; Store accumulator (long,X) $7E4182.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2102.l,X		; 9F 02 21 7E ; Store accumulator (long,X) $7E2102.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2182.l,X		; 9F 82 21 7E ; Store accumulator (long,X) $7E2182.l,X [Reads: Accumulator, X Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $B05C.w		; 20 5C B0 ; Jump to subroutine at $B05C.w [Writes: Stack Pointer] [Flow: call]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $199E.w,X		; BD 9E 19 ; Load $199E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $199E.w,X		; 9D 9E 19 ; Store accumulator to $199E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	and #$F07F.w		; 29 7F F0 ; Logical AND #$F07F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2002.l,X		; BF 02 20 7E ; Load long $7E2002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $7E2004.l,X		; BF 04 20 7E ; Load long $7E2004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	lda $7E2006.l,X		; BF 06 20 7E ; Load long $7E2006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx $02.b		; E4 02 ; Compare $02.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $CA		; D0 CA ; Branch if not equal to $D0, $CA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2002.l,X		; BF 02 20 7E ; Load long $7E2002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $7E2004.l,X		; BF 04 20 7E ; Load long $7E2004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	lda $7E2006.l,X		; BF 06 20 7E ; Load long $7E2006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $C9		; D0 C9 ; Branch if not equal to $D0, $C9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	and #$FFC0.w		; 29 C0 FF ; Logical AND #$FFC0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $02.b		; E4 02 ; Compare $02.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $CE		; D0 CE ; Branch if not equal to $D0, $CE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B0DA.w		; 20 DA B0 ; Jump to subroutine at $B0DA.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $CC		; D0 CC ; Branch if not equal to $D0, $CC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0450.w		; AE 50 04 ; Load $0450.w into X register [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06D0.w,X		; 9D D0 06 ; Store accumulator to $06D0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0450.w		; 8E 50 04 ; Store X register to $0450.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $044E.w		; AE 4E 04 ; Load $044E.w into X register [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06C0.w,X		; 9D C0 06 ; Store accumulator to $06C0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $044E.w		; 8E 4E 04 ; Store X register to $044E.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B4.b		; 05 B4 ; Logical OR $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B4.b		; 05 B4 ; Logical OR $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$001A.w		; A9 1A 00 ; Load #$001A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B4.b		; 05 B4 ; Logical OR $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $19C0.w,X		; 9D C0 19 ; Store accumulator to $19C0.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $19A0.w,X		; 9D A0 19 ; Store accumulator to $19A0.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1980.w,X		; 9D 80 19 ; Store accumulator to $1980.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpy #$0008.w		; C0 08 00 ; Compare #$0008.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $4E		; B0 4E ; Branch if carry set to $B0, $4E [Flow: branch]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,Y		; 39 C0 98 ; AND accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0468.w		; AD 68 04 ; Load $0468.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9A02.w,X		; BD 02 9A ; Load $9A02.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$001A.w		; C9 1A 00 ; Compare #$001A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$0046.w		; C9 46 00 ; Compare #$0046.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $0400.w		; AD 00 04 ; Load $0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0400.w		; 8D 00 04 ; Store accumulator to $0400.w [Reads: Accumulator]
	ldy $0A.b		; A4 0A ; Load $0A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0460.w		; 8E 60 04 ; Store X register to $0460.w [Reads: X Index]
	cpy #$0032.w		; C0 32 00 ; Compare #$0032.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	cpy #$0008.w		; C0 08 00 ; Compare #$0008.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$001A.w		; C9 1A 00 ; Compare #$001A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0436.w		; 8D 36 04 ; Store accumulator to $0436.w [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0436.w		; 0D 36 04 ; Logical OR $0436.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0436.w		; 8D 36 04 ; Store accumulator to $0436.w [Reads: Accumulator]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0A.b		; C5 0A ; Compare $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	eor #$0002.w		; 49 02 00 ; Exclusive OR #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0A.b		; C5 0A ; Compare $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda [$BF.b],Y		; B7 BF ; Load accumulator (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $F3		; F0 F3 ; Branch if equal to $F0, $F3 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2002.l,X		; BF 02 20 7E ; Load long $7E2002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $7E2004.l,X		; BF 04 20 7E ; Load long $7E2004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	lda $7E2006.l,X		; BF 06 20 7E ; Load long $7E2006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CA		; D0 CA ; Branch if not equal to $D0, $CA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CE		; D0 CE ; Branch if not equal to $D0, $CE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5A.w,X		; BD 5A 9B ; Load $9B5A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5C.w,X		; BD 5C 9B ; Load $9B5C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5E.w,X		; BD 5E 9B ; Load $9B5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D1.b],Y		; 97 D1 ; Store accumulator (long indexed) [$D1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B60.w,X		; BD 60 9B ; Load $9B60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D4.b],Y		; 97 D4 ; Store accumulator (long indexed) [$D4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CF		; D0 CF ; Branch if not equal to $D0, $CF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $97F0.w		; 20 F0 97 ; Jump to subroutine at $97F0.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$DA.b],Y		; 97 DA ; Store accumulator (long indexed) [$DA.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B5A.w,X		; BD 5A 9B ; Load $9B5A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$DD.b],Y		; 97 DD ; Store accumulator (long indexed) [$DD.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B279.w		; 20 79 B2 ; Jump to subroutine at $B279.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0082.w		; 69 82 00 ; Add #$0082.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B279.w		; 20 79 B2 ; Jump to subroutine at $B279.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$007E.w		; E9 7E 00 ; Subtract #$007E.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$C2.b],Y		; 97 C2 ; Store accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CE.b],Y		; 97 CE ; Store accumulator (long indexed) [$CE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B58.w,X		; BD 58 9B ; Load $9B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$DA.b],Y		; 97 DA ; Store accumulator (long indexed) [$DA.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B54.w,X		; BD 54 9B ; Load $9B54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9B56.w,X		; BD 56 9B ; Load $9B56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D7.b],Y		; 97 D7 ; Store accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$1010.w		; A9 10 10 ; Load #$1010.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $2F		; 80 2F ; Branch always to $80, $2F [Flow: branch]
	lda #$1212.w		; A9 12 12 ; Load #$1212.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ldx #$0E62.w		; A2 62 0E ; Load #$0E62.w into X register [Writes: X Index] [Flags: ZN]
	lda #$2020.w		; A9 20 20 ; Load #$2020.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B33A.w		; 20 3A B3 ; Jump to subroutine at $B33A.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0E6A.w		; A2 6A 0E ; Load #$0E6A.w into X register [Writes: X Index] [Flags: ZN]
	lda #$2121.w		; A9 21 21 ; Load #$2121.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B33A.w		; 20 3A B3 ; Jump to subroutine at $B33A.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$0E72.w		; A2 72 0E ; Load #$0E72.w into X register [Writes: X Index] [Flags: ZN]
	lda #$2222.w		; A9 22 22 ; Load #$2222.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B33A.w		; 20 3A B3 ; Jump to subroutine at $B33A.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0E7A.w		; A2 7A 0E ; Load #$0E7A.w into X register [Writes: X Index] [Flags: ZN]
	lda #$2323.w		; A9 23 23 ; Load #$2323.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $042C.w		; AE 2C 04 ; Load $042C.w into X register [Writes: X Index] [Flags: ZN]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0520.w,X		; 9D 20 05 ; Store accumulator to $0520.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	lda [$BF.b],Y		; B7 BF ; Load accumulator (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0560.w,X		; 9D 60 05 ; Store accumulator to $0560.w,X [Reads: Accumulator, X Index]
	lda [$CB.b],Y		; B7 CB ; Load accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0580.w,X		; 9D 80 05 ; Store accumulator to $0580.w,X [Reads: Accumulator, X Index]
	lda [$C2.b],Y		; B7 C2 ; Load accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05A0.w,X		; 9D A0 05 ; Store accumulator to $05A0.w,X [Reads: Accumulator, X Index]
	lda [$CE.b],Y		; B7 CE ; Load accumulator (long indexed) [$CE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05C0.w,X		; 9D C0 05 ; Store accumulator to $05C0.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B395.w		; 20 95 B3 ; Jump to subroutine at $B395.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B395.w		; 20 95 B3 ; Jump to subroutine at $B395.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $042C.w		; AE 2C 04 ; Load $042C.w into X register [Writes: X Index] [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	lda #$1111.w		; A9 11 11 ; Load #$1111.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0520.w,X		; 9D 20 05 ; Store accumulator to $0520.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	lda #$0D0E.w		; A9 0E 0D ; Load #$0D0E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0560.w,X		; 9D 60 05 ; Store accumulator to $0560.w,X [Reads: Accumulator, X Index]
	lda #$0D1E.w		; A9 1E 0D ; Load #$0D1E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0580.w,X		; 9D 80 05 ; Store accumulator to $0580.w,X [Reads: Accumulator, X Index]
	lda #$4D0E.w		; A9 0E 4D ; Load #$4D0E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05A0.w,X		; 9D A0 05 ; Store accumulator to $05A0.w,X [Reads: Accumulator, X Index]
	lda #$4D1E.w		; A9 1E 4D ; Load #$4D1E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05C0.w,X		; 9D C0 05 ; Store accumulator to $05C0.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldx #$0E92.w		; A2 92 0E ; Load #$0E92.w into X register [Writes: X Index] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0065.w		; C9 65 00 ; Compare #$0065.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0402.w		; [PATTERN: Memory clearing operation] AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	ldx #$05AA.w		; A2 AA 05 ; Load #$05AA.w into X register [Writes: X Index] [Flags: ZN]
	jmp $8DDC.w		; 4C DC 8D ; Jump to $8DDC.w [Flow: jump]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	lda #$05BA.w		; A9 BA 05 ; Load #$05BA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx #$0220.w		; A2 20 02 ; Load #$0220.w into X register [Writes: X Index] [Flags: ZN]
	lda #$3030.w		; A9 30 30 ; Load #$3030.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B429.w		; 20 29 B4 ; Jump to subroutine at $B429.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0228.w		; A2 28 02 ; Load #$0228.w into X register [Writes: X Index] [Flags: ZN]
	lda #$3131.w		; A9 31 31 ; Load #$3131.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B429.w		; 20 29 B4 ; Jump to subroutine at $B429.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$0230.w		; A2 30 02 ; Load #$0230.w into X register [Writes: X Index] [Flags: ZN]
	lda #$3232.w		; A9 32 32 ; Load #$3232.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B429.w		; 20 29 B4 ; Jump to subroutine at $B429.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0238.w		; A2 38 02 ; Load #$0238.w into X register [Writes: X Index] [Flags: ZN]
	lda #$3333.w		; A9 33 33 ; Load #$3333.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $042C.w		; AE 2C 04 ; Load $042C.w into X register [Writes: X Index] [Flags: ZN]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0520.w,X		; 9D 20 05 ; Store accumulator to $0520.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0560.w,X		; 9D 60 05 ; Store accumulator to $0560.w,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0580.w,X		; 9D 80 05 ; Store accumulator to $0580.w,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05A0.w,X		; 9D A0 05 ; Store accumulator to $05A0.w,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05C0.w,X		; 9D C0 05 ; Store accumulator to $05C0.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B493.w		; 20 93 B4 ; Jump to subroutine at $B493.w [Writes: Stack Pointer] [Flow: call]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B0AC.w		; 20 AC B0 ; Jump to subroutine at $B0AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $B493.w		; 20 93 B4 ; Jump to subroutine at $B493.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $042C.w		; AE 2C 04 ; Load $042C.w into X register [Writes: X Index] [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	lda #$4040.w		; A9 40 40 ; Load #$4040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0520.w,X		; 9D 20 05 ; Store accumulator to $0520.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	lda $BF.b		; A5 BF ; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$4000.w		; C9 00 40 ; Compare #$4000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	lda #$19D8.w		; A9 D8 19 ; Load #$19D8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0560.w,X		; 9D 60 05 ; Store accumulator to $0560.w,X [Reads: Accumulator, X Index]
	lda #$19D9.w		; A9 D9 19 ; Load #$19D9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0580.w,X		; 9D 80 05 ; Store accumulator to $0580.w,X [Reads: Accumulator, X Index]
	lda #$59D8.w		; A9 D8 59 ; Load #$59D8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05A0.w,X		; 9D A0 05 ; Store accumulator to $05A0.w,X [Reads: Accumulator, X Index]
	lda #$59D9.w		; A9 D9 59 ; Load #$59D9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05C0.w,X		; 9D C0 05 ; Store accumulator to $05C0.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	ldx $042C.w		; AE 2C 04 ; Load $042C.w into X register [Writes: X Index] [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	stz $0500.w,X		; 9E 00 05 ; Store zero to $0500.w,X [Reads: X Index]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0520.w,X		; 9D 20 05 ; Store accumulator to $0520.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,X		; 9D 40 05 ; Store accumulator to $0540.w,X [Reads: Accumulator, X Index]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda [$BF.b],Y		; B7 BF ; Load accumulator (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0560.w,X		; 9D 60 05 ; Store accumulator to $0560.w,X [Reads: Accumulator, X Index]
	lda [$CB.b],Y		; B7 CB ; Load accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0580.w,X		; 9D 80 05 ; Store accumulator to $0580.w,X [Reads: Accumulator, X Index]
	lda [$C2.b],Y		; B7 C2 ; Load accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05A0.w,X		; 9D A0 05 ; Store accumulator to $05A0.w,X [Reads: Accumulator, X Index]
	lda [$CE.b],Y		; B7 CE ; Load accumulator (long indexed) [$CE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05C0.w,X		; 9D C0 05 ; Store accumulator to $05C0.w,X [Reads: Accumulator, X Index]
	ldx #$0E52.w		; A2 52 0E ; Load #$0E52.w into X register [Writes: X Index] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	ldy $042E.w		; AC 2E 04 ; Load $042E.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $0540.w,Y		; 99 40 05 ; Store accumulator to $0540.w,Y [Reads: Accumulator, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0520.w,Y		; 99 20 05 ; Store accumulator to $0520.w,Y [Reads: Accumulator, Y Index]
	inc $042E.w		; EE 2E 04 ; Increment $042E.w [Flags: ZN]
	inc $042E.w		; EE 2E 04 ; Increment $042E.w [Flags: ZN]
	ldx #$0EC2.w		; A2 C2 0E ; Load #$0EC2.w into X register [Writes: X Index] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	ldx #$0ECA.w		; A2 CA 0E ; Load #$0ECA.w into X register [Writes: X Index] [Flags: ZN]
	lda $045A.w		; AD 5A 04 ; Load $045A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	inc $045A.w		; EE 5A 04 ; Increment $045A.w [Flags: ZN]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jmp $9895.w		; 4C 95 98 ; Jump to $9895.w [Flow: jump]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; [PATTERN: Memory clearing operation] FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
	stz $0646.w		; 9C 46 06 ; Store zero to $0646.w
	stz $0641.w		; 9C 41 06 ; Store zero to $0641.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE00.w		; 29 00 FE ; Logical AND #$FE00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $062C.w		; 8D 2C 06 ; Store accumulator to $062C.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $50		; 80 50 ; Branch always to $80, $50 [Flow: branch]
	cmp #$0015.w		; C9 15 00 ; Compare #$0015.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $17		; B0 17 ; Branch if carry set to $B0, $17 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01B560.l,X		; 7F 60 B5 01 ; Add long $01B560.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FE00.w		; 29 00 FE ; Logical AND #$FE00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $062C.w		; 8D 2C 06 ; Store accumulator to $062C.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$FE00.w		; 29 00 FE ; Logical AND #$FE00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $062C.w		; 8D 2C 06 ; Store accumulator to $062C.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01B560.l,X		; 7F 60 B5 01 ; Add long $01B560.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FE00.w		; 29 00 FE ; Logical AND #$FE00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $062E.w		; 8D 2E 06 ; Store accumulator to $062E.w [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04F502.l,X		; BF 02 F5 04 ; Load long $04F502.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
.INDEX 16
	rep #$10		; C2 10
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $0414.w		; AD 14 04 ; Load $0414.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC208.l		; 8F 08 C2 7E ; Store accumulator (long) $7EC208.l [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0414.w		; 8D 14 04 ; Store accumulator to $0414.w [Reads: Accumulator]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1C.b		; 29 1C ; Logical AND #$1C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $046C.w		; 8D 6C 04 ; Store accumulator to $046C.w [Reads: Accumulator]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC006.l		; 8F 06 C0 7E ; Store accumulator (long) $7EC006.l [Reads: Accumulator]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC005.l		; 8F 05 C0 7E ; Store accumulator (long) $7EC005.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $0ED460.l,X		; BF 60 D4 0E ; Load long $0ED460.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AB6.w		; 8D B6 0A ; Store accumulator to $0AB6.w [Reads: Accumulator]
	lda $0ED461.l,X		; BF 61 D4 0E ; Load long $0ED461.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AAC.w		; 8D AC 0A ; Store accumulator to $0AAC.w [Reads: Accumulator]
	lda $0ED462.l,X		; BF 62 D4 0E ; Load long $0ED462.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AAD.w		; 8D AD 0A ; Store accumulator to $0AAD.w [Reads: Accumulator]
	lda $0ED463.l,X		; BF 63 D4 0E ; Load long $0ED463.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AAE.w		; 8D AE 0A ; Store accumulator to $0AAE.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $AD.b		; 85 AD ; Store accumulator to $AD.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $AE.b		; 85 AE ; Store accumulator to $AE.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $AF.b		; 85 AF ; Store accumulator to $AF.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $063C.w		; 8D 3C 06 ; Store accumulator to $063C.w [Reads: Accumulator]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $063D.w		; 8D 3D 06 ; Store accumulator to $063D.w [Reads: Accumulator]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $063E.w		; 8D 3E 06 ; Store accumulator to $063E.w [Reads: Accumulator]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $063F.w		; 8D 3F 06 ; Store accumulator to $063F.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0640.w		; 8D 40 06 ; Store accumulator to $0640.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC000.l		; 8F 00 C0 7E ; Store accumulator (long) $7EC000.l [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC001.l		; 8F 01 C0 7E ; Store accumulator (long) $7EC001.l [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC002.l		; 8F 02 C0 7E ; Store accumulator (long) $7EC002.l [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC003.l		; 8F 03 C0 7E ; Store accumulator (long) $7EC003.l [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC004.l		; 8F 04 C0 7E ; Store accumulator (long) $7EC004.l [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0468.w		; 8D 68 04 ; Store accumulator to $0468.w [Reads: Accumulator]
	stz $04BA.w		; 9C BA 04 ; Store zero to $04BA.w
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A0.b		; 65 A0 ; Add $A0.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0110.w		; 8D 10 01 ; Store accumulator to $0110.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1F83C1.l,X		; BF C1 83 1F ; Load long $1F83C1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B8.b		; 85 B8 ; Store accumulator to $B8.b [Reads: Accumulator]
	lda $1F83C0.l,X		; BF C0 83 1F ; Load long $1F83C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F000.w		; 29 00 F0 ; Logical AND #$F000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0400.w		; 8D 00 04 ; Store accumulator to $0400.w [Reads: Accumulator]
	ora #$0F00.w		; 09 00 0F ; Logical OR #$0F00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0FF0.w		; 29 F0 0F ; Logical AND #$0FF0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0402.w		; 8D 02 04 ; Store accumulator to $0402.w [Reads: Accumulator]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0408.w		; 8D 08 04 ; Store accumulator to $0408.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stz $19A0.w,X		; 9E A0 19 ; Store zero to $19A0.w,X [Reads: X Index]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	sta $19A0.w,X		; 9D A0 19 ; Store accumulator to $19A0.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $80, $ED		; 80 ED ; Branch always to $80, $ED [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$000F.w		; C9 0F 00 ; Compare #$000F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$0024.w		; A9 24 00 ; Load #$0024.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B759.w		; 20 59 B7 ; Jump to subroutine at $B759.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B759.w		; 20 59 B7 ; Jump to subroutine at $B759.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	lda #$000C.w		; A9 0C 00 ; Load #$000C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B759.w		; 20 59 B7 ; Jump to subroutine at $B759.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cmp #$0140.w		; C9 40 01 ; Compare #$0140.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $B759.w		; 20 59 B7 ; Jump to subroutine at $B759.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $B7EF.w		; 20 EF B7 ; Jump to subroutine at $B7EF.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $85EFF0.l,X		; FF F0 EF 85 ; Subtract with carry (long,X) $85EFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $A6.b		; 02 A6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $29.b		; 04 29 ; Test and set bits $29.b [Reads: Accumulator] [Flags: Z]
	sbc $A2DD00.l,X		; FF 00 DD A2 ; Subtract with carry (long,X) $A2DD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $9AA2.w,X		; DD A2 9A ; Compare accumulator $9AA2.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $9AA2.w,X		; DD A2 9A ; Compare accumulator $9AA2.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $9AA2.w,X		; DD A2 9A ; Compare accumulator $9AA2.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $9AA2.w,X		; DD A2 9A ; Compare accumulator $9AA2.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $9AA2.w,X		; DD A2 9A ; Compare accumulator $9AA2.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $4C		; D0 4C ; Branch if not equal to $D0, $4C [Flow: branch]
	lda $9AD2.w,X		; BD D2 9A ; Load $9AD2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$E8.b		; 09 E8 ; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BD3180.l		; EF 80 31 BD ; Subtract with carry (long) $BD3180.l [Writes: Accumulator] [Flags: ZVNC]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $3000C9.l,X		; FF C9 00 30 ; Subtract with carry (long,X) $3000C9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	mvp $05,$F0		; 44 F0 05 ; Move block positive $05,$F0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $A2.b		; C5 A2 ; Compare $A2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	stz $0468.w		; 9C 68 04 ; Store zero to $0468.w
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $1100.w		; AD 00 11 ; Load $1100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,Y		; 39 C0 98 ; AND accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$10.b		; C0 10 ; Compare #$10.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($B7.b,X)		; 61 B7 ; Add with carry ($B7.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0E.b		; 86 0E ; Store X register to $0E.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1F83C1.l,X		; BF C1 83 1F ; Load long $1F83C1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B8.b		; 85 B8 ; Store accumulator to $B8.b [Reads: Accumulator]
	lda $1F83C0.l,X		; BF C0 83 1F ; Load long $1F83C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $1100.w		; 8D 00 11 ; Store accumulator to $1100.w [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1110.w,X		; 9D 10 11 ; Store accumulator to $1110.w,X [Reads: Accumulator, X Index]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $29CCF0.l,X		; FF F0 CC 29 ; Subtract with carry (long,X) $29CCF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$AD.b		; 09 AD ; Logical OR #$AD.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1100.w		; 8D 00 11 ; Store accumulator to $1100.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $80, $DA		; 80 DA ; Branch always to $80, $DA [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	stz $045E.w		; 9C 5E 04 ; Store zero to $045E.w
	lda $04BA.w		; AD BA 04 ; Load $04BA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04BA.w		; 6D BA 04 ; Add $04BA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04ECC1.l,X		; BF C1 EC 04 ; Load long $04ECC1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B8.b		; 85 B8 ; Store accumulator to $B8.b [Reads: Accumulator]
	lda $04ECC0.l,X		; [PATTERN: Memory clearing operation] BF C0 EC 04 ; Load long $04ECC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	jsr $F967.w		; 20 67 F9 ; Jump to subroutine at $F967.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	stz $045E.w		; 9C 5E 04 ; Store zero to $045E.w
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ldy $BA.b		; A4 BA ; Load $BA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: ZNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $BA.b		; 84 BA ; Store Y register to $BA.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsr $FE41.w		; 20 41 FE ; Jump to subroutine at $FE41.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $D1		; 80 D1 ; Branch always to $80, $D1 [Flow: branch]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $B8.b,S		; E3 B8 ; Subtract stack-relative $B8.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpx $67B8.w		; EC B8 67 ; Compare $67B8.w with X register [Reads: X Index] [Flags: ZNC]
	lda $BE17.w,Y		; B9 17 BE ; Load $BE17.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $66C2.w		; 1C C2 66 ; Test and reset bits $66C2.w [Reads: Accumulator] [Flags: Z]
	lda $00AD.w,Y		; B9 AD 00 ; Load $00AD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; [PATTERN: Memory clearing operation] AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr ($B8A8.w,X)		; FC A8 B8 ; Jump to subroutine indirect indexed ($B8A8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $B8F3.w		; 20 F3 B8 ; Jump to subroutine at $B8F3.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $B967.w		; 20 67 B9 ; Jump to subroutine at $B967.w [Writes: Stack Pointer] [Flow: call]
	jsr $BE17.w		; 20 17 BE ; Jump to subroutine at $BE17.w [Writes: Stack Pointer] [Flow: call]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $01C22A.l		; [PATTERN: Memory clearing operation] 22 2A C2 01 ; Jump to subroutine long $01C22A.l [Writes: Stack Pointer] [Flow: call]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
.ACCU 16
	rep #$20		; C2 20
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ldx #$7E.b		; A2 7E ; Load #$7E.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	ldx $B2.b		; A6 B2 ; Load $B2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7E2002.l,X		; BF 02 20 7E ; Load long $7E2002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $FE00.w,Y		; B9 00 FE ; Load $FE00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $FE00.w,Y		; B9 00 FE ; Load $FE00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda $7E2001.l,X		; BF 01 20 7E ; Load long $7E2001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $FE00.w,Y		; 19 00 FE ; OR accumulator with memory $FE00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	lda $7E2003.l,X		; BF 03 20 7E ; Load long $7E2003.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$21		; C2 21
	ldx $B4.b		; A6 B4 ; Load $B4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $B4.b		; 86 B4 ; Store X register to $B4.b [Reads: X Index]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $9F		; D0 9F ; Branch if not equal to $D0, $9F [Flow: branch]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$2000.w		; C9 00 20 ; Compare #$2000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $0432.w		; AE 32 04 ; Load $0432.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$3B3B.w		; A9 3B 3B ; Load #$3B3B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $06A0.w,Y		; BE A0 06 ; Load X register $06A0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0432.w		; CC 32 04 ; Compare $0432.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	lda #$3030.w		; A9 30 30 ; Load #$3030.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $0438.w		; AE 38 04 ; Load $0438.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	lda #$2626.w		; A9 26 26 ; Load #$2626.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0438.w		; CC 38 04 ; Compare $0438.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	cpy $047E.w		; CC 7E 04 ; Compare $047E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5E5E.w		; A9 5E 5E ; Load #$5E5E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $047E.w		; CC 7E 04 ; Compare $047E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	cpy $0482.w		; CC 82 04 ; Compare $0482.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5F5F.w		; A9 5F 5F ; Load #$5F5F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0482.w		; CC 82 04 ; Compare $0482.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	cpy $04A2.w		; CC A2 04 ; Compare $04A2.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda #$3838.w		; A9 38 38 ; Load #$3838.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04A2.w		; CC A2 04 ; Compare $04A2.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	cpy $04A4.w		; CC A4 04 ; Compare $04A4.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	lda #$3939.w		; A9 39 39 ; Load #$3939.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04A4.w		; CC A4 04 ; Compare $04A4.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0707.w		; 29 07 07 ; Logical AND #$0707.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$3434.w		; 09 34 34 ; Logical OR #$3434.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cpy $043A.w		; CC 3A 04 ; Compare $043A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$2626.w		; A9 26 26 ; Load #$2626.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $043A.w		; CC 3A 04 ; Compare $043A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $E3		; D0 E3 ; Branch if not equal to $D0, $E3 [Flow: branch]
	cpy $0480.w		; CC 80 04 ; Compare $0480.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5E5E.w		; A9 5E 5E ; Load #$5E5E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0480.w		; CC 80 04 ; Compare $0480.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	cpy $0484.w		; CC 84 04 ; Compare $0484.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5F5F.w		; A9 5F 5F ; Load #$5F5F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0484.w		; CC 84 04 ; Compare $0484.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	cpy $04A6.w		; CC A6 04 ; Compare $04A6.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda #$3838.w		; A9 38 38 ; Load #$3838.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04A6.w		; CC A6 04 ; Compare $04A6.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	cpy $04A8.w		; CC A8 04 ; Compare $04A8.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	lda #$3939.w		; A9 39 39 ; Load #$3939.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04A8.w		; CC A8 04 ; Compare $04A8.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	lda #$1F1F.w		; A9 1F 1F ; Load #$1F1F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $043C.w		; AE 3C 04 ; Load $043C.w into X register [Writes: X Index] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda #$1E1E.w		; A9 1E 1E ; Load #$1E1E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $043E.w		; AE 3E 04 ; Load $043E.w into X register [Writes: X Index] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldx $0440.w		; AE 40 04 ; Load $0440.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda #$1D1D.w		; A9 1D 1D ; Load #$1D1D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $044A.w		; 8D 4A 04 ; Store accumulator to $044A.w [Reads: Accumulator]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	ldx $06B8.w,Y		; BE B8 06 ; Load X register $06B8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F30C0.l,X		; 9F C0 30 7F ; Store accumulator (long,X) $7F30C0.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F2002.l,X		; 9F 02 20 7F ; Store accumulator (long,X) $7F2002.l,X [Reads: Accumulator, X Index]
	sta $7F30C2.l,X		; 9F C2 30 7F ; Store accumulator (long,X) $7F30C2.l,X [Reads: Accumulator, X Index]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F3080.l,X		; 9F 80 30 7F ; Store accumulator (long,X) $7F3080.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	sta $7F3082.l,X		; 9F 82 30 7F ; Store accumulator (long,X) $7F3082.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F3041.l,X		; 9F 41 30 7F ; Store accumulator (long,X) $7F3041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F3081.l,X		; 9F 81 30 7F ; Store accumulator (long,X) $7F3081.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $02.b		; C4 02 ; Compare $02.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $D0, $BD		; D0 BD ; Branch if not equal to $D0, $BD [Flow: branch]
	cpy $0448.w		; CC 48 04 ; Compare $0448.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $044A.w		; 8D 4A 04 ; Store accumulator to $044A.w [Reads: Accumulator]
	ldx $06B8.w,Y		; BE B8 06 ; Load X register $06B8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0A03.w		; A9 03 0A ; Load #$0A03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F3000.l,X		; 9F 00 30 7F ; Store accumulator (long,X) $7F3000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F2002.l,X		; 9F 02 20 7F ; Store accumulator (long,X) $7F2002.l,X [Reads: Accumulator, X Index]
	sta $7F3002.l,X		; 9F 02 30 7F ; Store accumulator (long,X) $7F3002.l,X [Reads: Accumulator, X Index]
	lda #$0803.w		; A9 03 08 ; Load #$0803.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0448.w		; CC 48 04 ; Compare $0448.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D6		; D0 D6 ; Branch if not equal to $D0, $D6 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $0442.w		; AE 42 04 ; Load $0442.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $044A.w		; 8D 4A 04 ; Store accumulator to $044A.w [Reads: Accumulator]
	ldx $06B8.w,Y		; BE B8 06 ; Load X register $06B8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F2002.l,X		; 9F 02 20 7F ; Store accumulator (long,X) $7F2002.l,X [Reads: Accumulator, X Index]
	lda #$0A03.w		; A9 03 0A ; Load #$0A03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3000.l,X		; 9F 00 30 7F ; Store accumulator (long,X) $7F3000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F3002.l,X		; 9F 02 30 7F ; Store accumulator (long,X) $7F3002.l,X [Reads: Accumulator, X Index]
	lda #$0808.w		; A9 08 08 ; Load #$0808.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0442.w		; CC 42 04 ; Compare $0442.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	cpy $0444.w		; CC 44 04 ; Compare $0444.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $044A.w		; 8D 4A 04 ; Store accumulator to $044A.w [Reads: Accumulator]
	ldx $06B8.w,Y		; BE B8 06 ; Load X register $06B8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F2002.l,X		; 9F 02 20 7F ; Store accumulator (long,X) $7F2002.l,X [Reads: Accumulator, X Index]
	lda #$0A03.w		; A9 03 0A ; Load #$0A03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3000.l,X		; 9F 00 30 7F ; Store accumulator (long,X) $7F3000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F3002.l,X		; 9F 02 30 7F ; Store accumulator (long,X) $7F3002.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0444.w		; CC 44 04 ; Compare $0444.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DE		; D0 DE ; Branch if not equal to $D0, $DE [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $042C.w		; AE 2C 04 ; Load $042C.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	lda #$7070.w		; A9 70 70 ; Load #$7070.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $042C.w		; CC 2C 04 ; Compare $042C.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	cpy $042E.w		; CC 2E 04 ; Compare $042E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	stz $04.b		; 64 04 ; Store zero to $04.b
	lda #$C0C0.w		; A9 C0 C0 ; Load #$C0C0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	and #$EFEF.w		; 29 EF EF ; Logical AND #$EFEF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $042E.w		; CC 2E 04 ; Compare $042E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DE		; D0 DE ; Branch if not equal to $D0, $DE [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $042E.w		; 8D 2E 04 ; Store accumulator to $042E.w [Reads: Accumulator]
	lda #$5858.w		; A9 58 58 ; Load #$5858.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $0496.w		; AE 96 04 ; Load $0496.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0027.w		; C9 27 00 ; Compare #$0027.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5F		; F0 5F ; Branch if equal to $F0, $5F [Flow: branch]
	cmp #$003C.w		; C9 3C 00 ; Compare #$003C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5A		; F0 5A ; Branch if equal to $F0, $5A [Flow: branch]
	cmp #$003E.w		; C9 3E 00 ; Compare #$003E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	cmp #$0029.w		; C9 29 00 ; Compare #$0029.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	cmp #$0033.w		; C9 33 00 ; Compare #$0033.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $4B		; 90 4B ; Branch if carry clear to $90, $4B [Flow: branch]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0027.w		; C9 27 00 ; Compare #$0027.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $41		; F0 41 ; Branch if equal to $F0, $41 [Flow: branch]
	cmp #$003C.w		; C9 3C 00 ; Compare #$003C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	cmp #$003E.w		; C9 3E 00 ; Compare #$003E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	cmp #$0029.w		; C9 29 00 ; Compare #$0029.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	cmp #$0033.w		; C9 33 00 ; Compare #$0033.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $2D		; 90 2D ; Branch if carry clear to $90, $2D [Flow: branch]
	jsr $BDDB.w		; 20 DB BD ; Jump to subroutine at $BDDB.w [Writes: Stack Pointer] [Flow: call]
	cpy $0498.w		; CC 98 04 ; Compare $0498.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06E0.w,Y		; 99 E0 06 ; Store accumulator to $06E0.w,Y [Reads: Accumulator, Y Index]
	and #$7FFF.w		; 29 FF 7F ; Logical AND #$7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0498.w		; CC 98 04 ; Compare $0498.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	lda #$3F3F.w		; A9 3F 3F ; Load #$3F3F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $049A.w		; AE 9A 04 ; Load $049A.w into X register [Writes: X Index] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda #$3E3E.w		; A9 3E 3E ; Load #$3E3E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $049C.w		; AE 9C 04 ; Load $049C.w into X register [Writes: X Index] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldx $049E.w		; AE 9E 04 ; Load $049E.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda #$3D3D.w		; A9 3D 3D ; Load #$3D3D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $044A.w		; 8D 4A 04 ; Store accumulator to $044A.w [Reads: Accumulator]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	ldx $06EC.w,Y		; BE EC 06 ; Load X register $06EC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3000.l,X		; 9F 00 30 7F ; Store accumulator (long,X) $7F3000.l,X [Reads: Accumulator, X Index]
	sta $7F20C0.l,X		; 9F C0 20 7F ; Store accumulator (long,X) $7F20C0.l,X [Reads: Accumulator, X Index]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3040.l,X		; 9F 40 30 7F ; Store accumulator (long,X) $7F3040.l,X [Reads: Accumulator, X Index]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	lda #$0200.w		; A9 00 02 ; Load #$0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3002.l,X		; 9F 02 30 7F ; Store accumulator (long,X) $7F3002.l,X [Reads: Accumulator, X Index]
	sta $7F20C2.l,X		; 9F C2 20 7F ; Store accumulator (long,X) $7F20C2.l,X [Reads: Accumulator, X Index]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3042.l,X		; 9F 42 30 7F ; Store accumulator (long,X) $7F3042.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F3041.l,X		; 9F 41 30 7F ; Store accumulator (long,X) $7F3041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F3081.l,X		; 9F 81 30 7F ; Store accumulator (long,X) $7F3081.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $02.b		; C4 02 ; Compare $02.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $D0, $B9		; D0 B9 ; Branch if not equal to $D0, $B9 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $04AE.w		; AE AE 04 ; Load $04AE.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $044A.w		; 8D 4A 04 ; Store accumulator to $044A.w [Reads: Accumulator]
	ldx $06EC.w,Y		; BE EC 06 ; Load X register $06EC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0A03.w		; A9 03 0A ; Load #$0A03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F30C0.l,X		; 9F C0 30 7F ; Store accumulator (long,X) $7F30C0.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F30C2.l,X		; 9F C2 30 7F ; Store accumulator (long,X) $7F30C2.l,X [Reads: Accumulator, X Index]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F20C0.l,X		; 9F C0 20 7F ; Store accumulator (long,X) $7F20C0.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F20C2.l,X		; 9F C2 20 7F ; Store accumulator (long,X) $7F20C2.l,X [Reads: Accumulator, X Index]
	lda #$0808.w		; A9 08 08 ; Load #$0808.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04AE.w		; CC AE 04 ; Compare $04AE.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	and #$7FFF.w		; 29 FF 7F ; Logical AND #$7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06E0.w,Y		; 99 E0 06 ; Store accumulator to $06E0.w,Y [Reads: Accumulator, Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0496.w		; CC 96 04 ; Compare $0496.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $BE35.w		; 20 35 BE ; Jump to subroutine at $BE35.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0020.w		; C0 20 00 ; Compare #$0020.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	jsr $D51F.w		; 20 1F D5 ; Jump to subroutine at $D51F.w [Writes: Stack Pointer] [Flow: call]
	jsr $C1BA.w		; 20 BA C1 ; Jump to subroutine at $C1BA.w [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $F0, $79		; F0 79 ; Branch if equal to $F0, $79 [Flow: branch]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $74		; F0 74 ; Branch if equal to $F0, $74 [Flow: branch]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $6F		; F0 6F ; Branch if equal to $F0, $6F [Flow: branch]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $6A		; F0 6A ; Branch if equal to $F0, $6A [Flow: branch]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	cmp #$000E.w		; C9 0E 00 ; Compare #$000E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $C0B8.w		; 4C B8 C0 ; Jump to $C0B8.w [Flow: jump]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $BFB2.w		; 4C B2 BF ; Jump to $BFB2.w [Flow: jump]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $C085.w		; 4C 85 C0 ; Jump to $C085.w [Flow: jump]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,X		; 3D C0 98 ; AND accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$0020.w		; E0 20 00 ; Compare #$0020.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	cpx #$0028.w		; E0 28 00 ; Compare #$0028.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $F3		; 90 F3 ; Branch if carry clear to $90, $F3 [Flow: branch]
	lda $9A52.w,X		; BD 52 9A ; Load $9A52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $47		; D0 47 ; Branch if not equal to $D0, $47 [Flow: branch]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $19E2.w		; CD E2 19 ; Compare $19E2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp $19E4.w		; CD E4 19 ; Compare $19E4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp $19E6.w		; CD E6 19 ; Compare $19E6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp $19E8.w		; CD E8 19 ; Compare $19E8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$8E8E.w		; A2 8E 8E ; Load #$8E8E.w into X register [Writes: X Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$783F.w		; 29 3F 78 ; Logical AND #$783F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	sta $7F2101.l,X		; 9F 01 21 7F ; Store accumulator (long,X) $7F2101.l,X [Reads: Accumulator, X Index]
	sta $7F2141.l,X		; 9F 41 21 7F ; Store accumulator (long,X) $7F2141.l,X [Reads: Accumulator, X Index]
	sta $7F2181.l,X		; 9F 81 21 7F ; Store accumulator (long,X) $7F2181.l,X [Reads: Accumulator, X Index]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F21C1.l,X		; 9F C1 21 7F ; Store accumulator (long,X) $7F21C1.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$000A.w		; E0 0A 00 ; Compare #$000A.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	cpx #$000E.w		; E0 0E 00 ; Compare #$000E.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp $19E2.w		; CD E2 19 ; Compare $19E2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp $19E4.w		; CD E4 19 ; Compare $19E4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp $19E6.w		; CD E6 19 ; Compare $19E6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp $19E8.w		; CD E8 19 ; Compare $19E8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$8E8E.w		; A2 8E 8E ; Load #$8E8E.w into X register [Writes: X Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	sta $7F2101.l,X		; 9F 01 21 7F ; Store accumulator (long,X) $7F2101.l,X [Reads: Accumulator, X Index]
	sta $7F2141.l,X		; 9F 41 21 7F ; Store accumulator (long,X) $7F2141.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$FFE0.w		; 29 E0 FF ; Logical AND #$FFE0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2044.l,X		; 9F 44 20 7F ; Store accumulator (long,X) $7F2044.l,X [Reads: Accumulator, X Index]
	sta $7F2084.l,X		; 9F 84 20 7F ; Store accumulator (long,X) $7F2084.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	sta $7F2044.l,X		; 9F 44 20 7F ; Store accumulator (long,X) $7F2044.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	sta $7F2084.l,X		; 9F 84 20 7F ; Store accumulator (long,X) $7F2084.l,X [Reads: Accumulator, X Index]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,X		; 3D C0 98 ; AND accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$000C.w		; A9 0C 00 ; Load #$000C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0102.w		; A9 02 01 ; Load #$0102.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2002.l,X		; 9F 02 20 7F ; Store accumulator (long,X) $7F2002.l,X [Reads: Accumulator, X Index]
	sta $7F2004.l,X		; 9F 04 20 7F ; Store accumulator (long,X) $7F2004.l,X [Reads: Accumulator, X Index]
	sta $7F2006.l,X		; 9F 06 20 7F ; Store accumulator (long,X) $7F2006.l,X [Reads: Accumulator, X Index]
	sta $7F2008.l,X		; 9F 08 20 7F ; Store accumulator (long,X) $7F2008.l,X [Reads: Accumulator, X Index]
	sta $7F200A.l,X		; 9F 0A 20 7F ; Store accumulator (long,X) $7F200A.l,X [Reads: Accumulator, X Index]
	sta $7F200C.l,X		; 9F 0C 20 7F ; Store accumulator (long,X) $7F200C.l,X [Reads: Accumulator, X Index]
	sta $7F200E.l,X		; 9F 0E 20 7F ; Store accumulator (long,X) $7F200E.l,X [Reads: Accumulator, X Index]
	sta $7F2010.l,X		; 9F 10 20 7F ; Store accumulator (long,X) $7F2010.l,X [Reads: Accumulator, X Index]
	sta $7F2012.l,X		; 9F 12 20 7F ; Store accumulator (long,X) $7F2012.l,X [Reads: Accumulator, X Index]
	lda #$0201.w		; A9 01 02 ; Load #$0201.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2014.l,X		; 9F 14 20 7F ; Store accumulator (long,X) $7F2014.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C1		; D0 C1 ; Branch if not equal to $D0, $C1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0101.w		; A9 01 01 ; Load #$0101.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2540.l,X		; 9F 40 25 7F ; Store accumulator (long,X) $7F2540.l,X [Reads: Accumulator, X Index]
	lda #$0202.w		; A9 02 02 ; Load #$0202.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F2500.l,X		; 9F 00 25 7F ; Store accumulator (long,X) $7F2500.l,X [Reads: Accumulator, X Index]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F20C0.l,X		; 9F C0 20 7F ; Store accumulator (long,X) $7F20C0.l,X [Reads: Accumulator, X Index]
	sta $7F2100.l,X		; 9F 00 21 7F ; Store accumulator (long,X) $7F2100.l,X [Reads: Accumulator, X Index]
	sta $7F2140.l,X		; 9F 40 21 7F ; Store accumulator (long,X) $7F2140.l,X [Reads: Accumulator, X Index]
	sta $7F2180.l,X		; 9F 80 21 7F ; Store accumulator (long,X) $7F2180.l,X [Reads: Accumulator, X Index]
	sta $7F21C0.l,X		; 9F C0 21 7F ; Store accumulator (long,X) $7F21C0.l,X [Reads: Accumulator, X Index]
	sta $7F2200.l,X		; 9F 00 22 7F ; Store accumulator (long,X) $7F2200.l,X [Reads: Accumulator, X Index]
	sta $7F2240.l,X		; 9F 40 22 7F ; Store accumulator (long,X) $7F2240.l,X [Reads: Accumulator, X Index]
	sta $7F2280.l,X		; 9F 80 22 7F ; Store accumulator (long,X) $7F2280.l,X [Reads: Accumulator, X Index]
	sta $7F22C0.l,X		; 9F C0 22 7F ; Store accumulator (long,X) $7F22C0.l,X [Reads: Accumulator, X Index]
	sta $7F2300.l,X		; 9F 00 23 7F ; Store accumulator (long,X) $7F2300.l,X [Reads: Accumulator, X Index]
	sta $7F2340.l,X		; 9F 40 23 7F ; Store accumulator (long,X) $7F2340.l,X [Reads: Accumulator, X Index]
	sta $7F2380.l,X		; 9F 80 23 7F ; Store accumulator (long,X) $7F2380.l,X [Reads: Accumulator, X Index]
	sta $7F23C0.l,X		; 9F C0 23 7F ; Store accumulator (long,X) $7F23C0.l,X [Reads: Accumulator, X Index]
	sta $7F2400.l,X		; 9F 00 24 7F ; Store accumulator (long,X) $7F2400.l,X [Reads: Accumulator, X Index]
	sta $7F2440.l,X		; 9F 40 24 7F ; Store accumulator (long,X) $7F2440.l,X [Reads: Accumulator, X Index]
	sta $7F2480.l,X		; 9F 80 24 7F ; Store accumulator (long,X) $7F2480.l,X [Reads: Accumulator, X Index]
	sta $7F24C0.l,X		; 9F C0 24 7F ; Store accumulator (long,X) $7F24C0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $99		; D0 99 ; Branch if not equal to $D0, $99 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	cmp #$0046.w		; C9 46 00 ; Compare #$0046.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,X		; 3D C0 98 ; AND accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9A52.w,X		; BD 52 9A ; Load $9A52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$783F.w		; 29 3F 78 ; Logical AND #$783F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	sta $7F2101.l,X		; 9F 01 21 7F ; Store accumulator (long,X) $7F2101.l,X [Reads: Accumulator, X Index]
	sta $7F2141.l,X		; 9F 41 21 7F ; Store accumulator (long,X) $7F2141.l,X [Reads: Accumulator, X Index]
	sta $7F2181.l,X		; 9F 81 21 7F ; Store accumulator (long,X) $7F2181.l,X [Reads: Accumulator, X Index]
	sta $7F21C1.l,X		; 9F C1 21 7F ; Store accumulator (long,X) $7F21C1.l,X [Reads: Accumulator, X Index]
	sta $7F2201.l,X		; 9F 01 22 7F ; Store accumulator (long,X) $7F2201.l,X [Reads: Accumulator, X Index]
	sta $7F2241.l,X		; 9F 41 22 7F ; Store accumulator (long,X) $7F2241.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $5A		; D0 5A ; Branch if not equal to $D0, $5A [Flow: branch]
	cpx #$000C.w		; E0 0C 00 ; Compare #$000C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	cpx #$0010.w		; E0 10 00 ; Compare #$0010.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	cpx #$0004.w		; E0 04 00 ; Compare #$0004.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1FFF.w		; 29 FF 1F ; Logical AND #$1FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $19E2.w		; CD E2 19 ; Compare $19E2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp $19E4.w		; CD E4 19 ; Compare $19E4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp $19E6.w		; CD E6 19 ; Compare $19E6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp $19E8.w		; CD E8 19 ; Compare $19E8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$8E8E.w		; A2 8E 8E ; Load #$8E8E.w into X register [Writes: X Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	sta $7F2101.l,X		; 9F 01 21 7F ; Store accumulator (long,X) $7F2101.l,X [Reads: Accumulator, X Index]
	sta $7F2141.l,X		; 9F 41 21 7F ; Store accumulator (long,X) $7F2141.l,X [Reads: Accumulator, X Index]
	sta $7F2181.l,X		; 9F 81 21 7F ; Store accumulator (long,X) $7F2181.l,X [Reads: Accumulator, X Index]
	sta $7F21C1.l,X		; 9F C1 21 7F ; Store accumulator (long,X) $7F21C1.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$FFE0.w		; 29 E0 FF ; Logical AND #$FFE0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	sta $7F2044.l,X		; 9F 44 20 7F ; Store accumulator (long,X) $7F2044.l,X [Reads: Accumulator, X Index]
	sta $7F2046.l,X		; 9F 46 20 7F ; Store accumulator (long,X) $7F2046.l,X [Reads: Accumulator, X Index]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	sta $7F2084.l,X		; 9F 84 20 7F ; Store accumulator (long,X) $7F2084.l,X [Reads: Accumulator, X Index]
	sta $7F2086.l,X		; 9F 86 20 7F ; Store accumulator (long,X) $7F2086.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	sta $7F2044.l,X		; 9F 44 20 7F ; Store accumulator (long,X) $7F2044.l,X [Reads: Accumulator, X Index]
	sta $7F2046.l,X		; 9F 46 20 7F ; Store accumulator (long,X) $7F2046.l,X [Reads: Accumulator, X Index]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	sta $7F2084.l,X		; 9F 84 20 7F ; Store accumulator (long,X) $7F2084.l,X [Reads: Accumulator, X Index]
	sta $7F2086.l,X		; 9F 86 20 7F ; Store accumulator (long,X) $7F2086.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $04B0.w		; AD B0 04 ; Load $04B0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $58		; F0 58 ; Branch if equal to $F0, $58 [Flow: branch]
	lda $04B0.w		; AD B0 04 ; Load $04B0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $04B0.w		; AD B0 04 ; Load $04B0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	lda #$0101.w		; A9 01 01 ; Load #$0101.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2280.l,X		; 9F 80 22 7F ; Store accumulator (long,X) $7F2280.l,X [Reads: Accumulator, X Index]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F2100.l,X		; 9F 00 21 7F ; Store accumulator (long,X) $7F2100.l,X [Reads: Accumulator, X Index]
	sta $7F2180.l,X		; 9F 80 21 7F ; Store accumulator (long,X) $7F2180.l,X [Reads: Accumulator, X Index]
	sta $7F2200.l,X		; 9F 00 22 7F ; Store accumulator (long,X) $7F2200.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $DD		; 10 DD ; Branch if plus to $10, $DD [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $9F.b,S		; 23 9F ; AND accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	adc $21009F.l,X		; 7F 9F 00 21 ; Add long $21009F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $21809F.l,X		; 7F 9F 80 21 ; Add long $21809F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $22009F.l,X		; 7F 9F 00 22 ; Add long $22009F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $88E8E8.l,X		; 7F E8 E8 88 ; Add long $88E8E8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $01C22A.l		; 22 2A C2 01 ; Jump to subroutine long $01C22A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx #$07FF.w		; A2 FF 07 ; Load #$07FF.w into X register [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$66.b		; C9 66 ; Compare #$66.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$67.b		; C9 67 ; Compare #$67.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	lda $7F2800.l,X		; BF 00 28 7F ; Load long $7F2800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$66.b		; C9 66 ; Compare #$66.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$67.b		; C9 67 ; Compare #$67.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2800.l,X		; 9F 00 28 7F ; Store accumulator (long,X) $7F2800.l,X [Reads: Accumulator, X Index]
	lda $7F3000.l,X		; BF 00 30 7F ; Load long $7F3000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$66.b		; C9 66 ; Compare #$66.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$67.b		; C9 67 ; Compare #$67.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3000.l,X		; 9F 00 30 7F ; Store accumulator (long,X) $7F3000.l,X [Reads: Accumulator, X Index]
	lda $7F3800.l,X		; BF 00 38 7F ; Load long $7F3800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$66.b		; C9 66 ; Compare #$66.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$67.b		; C9 67 ; Compare #$67.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3800.l,X		; 9F 00 38 7F ; Store accumulator (long,X) $7F3800.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $B5		; 10 B5 ; Branch if plus to $10, $B5 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp $32.b,S		; C3 32 ; Compare accumulator (stack relative) $32.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $3E.b		; C4 3E ; Compare $3E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $44.b		; C4 44 ; Compare $44.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $4A.b		; C4 4A ; Compare $4A.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $50.b		; C4 50 ; Compare $50.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $56.b		; C4 56 ; Compare $56.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $5C.b		; C4 5C ; Compare $5C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $61.b		; C4 61 ; Compare $61.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $BF.b		; C4 BF ; Compare $BF.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $32.b		; C4 32 ; Compare $32.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $3E.b		; C4 3E ; Compare $3E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $44.b		; C4 44 ; Compare $44.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $4A.b		; C4 4A ; Compare $4A.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $50.b		; C4 50 ; Compare $50.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $56.b		; C4 56 ; Compare $56.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $5C.b		; C4 5C ; Compare $5C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $61.b		; C4 61 ; Compare $61.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $E7.b		; C4 E7 ; Compare $E7.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $08.b		; C4 08 ; Compare $08.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $41.b		; C5 41 ; Compare $41.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $99.b		; C5 99 ; Compare $99.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $94.b		; C5 94 ; Compare $94.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor #$CB.b		; 49 CB ; Exclusive OR #$CB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $C8D4CB.l,X		; FF CB D4 C8 ; Subtract with carry (long,X) $C8D4CB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora [$CA.b],Y		; 17 CA ; OR accumulator with memory (long indexed) [$CA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	cpy $CC5B.w		; CC 5B CC ; Compare $CC5B.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $CC.b		; 04 CC ; Test and set bits $CC.b [Reads: Accumulator] [Flags: Z]
	bit #$CC.b		; 89 CC ; Test bits #$CC.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$C7.b		; 09 C7 ; Logical OR #$C7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$C7.b		; A2 C7 ; Load #$C7.b into X register [Writes: X Index] [Flags: ZN]
	cpy $85C7.w		; CC C7 85 ; Compare $85C7.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec $32.b		; C6 32 ; Decrement $32.b [Reads: Direct Page] [Flags: ZN]
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $3E.b		; C4 3E ; Compare $3E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $44.b		; C4 44 ; Compare $44.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $4A.b		; C4 4A ; Compare $4A.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $50.b		; C4 50 ; Compare $50.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $56.b		; C4 56 ; Compare $56.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $5C.b		; C4 5C ; Compare $5C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $61.b		; C4 61 ; Compare $61.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $BF.b		; C4 BF ; Compare $BF.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $29.b		; C4 29 ; Compare $29.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: ZN]
	cpy $CC0C.w		; CC 0C CC ; Compare $CC0C.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $10, $CC		; 10 CC ; Branch if plus to $10, $CC [Flow: branch]
	trb $CC.b		; 14 CC ; Test and reset bits $CC.b [Reads: Accumulator] [Flags: Z]
	lsr $18C7.w		; 4E C7 18 ; Logical shift right $18C7.w [Flags: ZNC]
	cpy $CC1C.w		; CC 1C CC ; Compare $CC1C.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $62, $CC, $C2		; 62 CC C2 ; Push effective relative address $62, $CC, $C2 [Writes: Stack Pointer]
	cmp [$67.b]		; C7 67 ; Compare accumulator (long) [$67.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$AE.b]		; C7 AE ; Compare accumulator (long) [$AE.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cpy $AD.b		; C4 AD ; Compare $AD.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp [$04.b]		; C7 04 ; Compare accumulator (long) [$04.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $C329.w		; 20 29 C3 ; Jump to subroutine at $C329.w [Writes: Stack Pointer] [Flow: call]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr ($C27D.w,X)		; FC 7D C2 ; Jump to subroutine indirect indexed ($C27D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $AF.b		; A5 AF ; Load $AF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr ($C27D.w,X)		; FC 7D C2 ; Jump to subroutine indirect indexed ($C27D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $04C7.w		; 9C C7 04 ; Store zero to $04C7.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$000C.w		; 29 0C 00 ; Logical AND #$000C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $99EA.w,Y		; 79 EA 99 ; Add $99EA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $EE.b		; A6 EE ; Load $EE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ora #$1000.w		; 09 00 10 ; Logical OR #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$0004.w		; C0 04 00 ; Compare #$0004.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$5E.b		; C9 5E ; Compare #$5E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$5F.b		; C9 5F ; Compare #$5F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $A7		; D0 A7 ; Branch if not equal to $D0, $A7 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $7F2040.l,X		; BF 40 20 7F ; Load long $7F2040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $98		; D0 98 ; Branch if not equal to $D0, $98 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0FC4.w		; AD C4 0F ; Load $0FC4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	.db $80, $8A		; 80 8A ; Branch always to $80, $8A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	sty $0462.w		; 8C 62 04 ; Store Y register to $0462.w [Reads: Y Index]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: ZN]
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $02B81C.l		; 22 1C B8 02 ; Jump to subroutine long $02B81C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $02B77A.l		; 22 7A B7 02 ; Jump to subroutine long $02B77A.l [Writes: Stack Pointer] [Flow: call]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EC001.l,X		; BF 01 C0 7E ; Load long $7EC001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	lda $063D.w,X		; BD 3D 06 ; Load $063D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $048A.w		; 8D 8A 04 ; Store accumulator to $048A.w [Reads: Accumulator]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; [PATTERN: Memory clearing operation] F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	stx $0492.w		; 8E 92 04 ; Store X register to $0492.w [Reads: X Index]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $3D.b		; [PATTERN: Memory clearing operation] 64 3D ; Store zero to $3D.b
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	ldx #$12.b		; A2 12 ; Load #$12.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	ldx #$13.b		; A2 13 ; Load #$13.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	jsl $07F25A.l		; 22 5A F2 07 ; Jump to subroutine long $07F25A.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
	stx $11.b		; 86 11 ; Store X register to $11.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $11.b		; 86 11 ; Store X register to $11.b [Reads: X Index]
	jsl $07F3F3.l		; 22 F3 F3 07 ; Jump to subroutine long $07F3F3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $11.b		; 86 11 ; Store X register to $11.b [Reads: X Index]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $048A.w		; AD 8A 04 ; Load $048A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$34.b		; C9 34 ; Compare #$34.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $012E.w		; 8C 2E 01 ; Store Y register to $012E.w [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $1F		; 90 1F ; Branch if carry clear to $90, $1F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $19		; 90 19 ; Branch if carry clear to $90, $19 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $FA		; 90 FA ; Branch if carry clear to $90, $FA [Flow: branch]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $AE.b,X		; B5 AE ; Load $AE.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $2F		; 90 2F ; Branch if carry clear to $90, $2F [Flow: branch]
	cmp #$29.b		; C9 29 ; Compare #$29.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	jsl $09AF32.l		; 22 32 AF 09 ; Jump to subroutine long $09AF32.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jsr $C7D8.w		; 20 D8 C7 ; Jump to subroutine at $C7D8.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0641.w		; AD 41 06 ; Load $0641.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0468.w		; CD 68 04 ; Compare $0468.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	sta $0468.w		; 8D 68 04 ; Store accumulator to $0468.w [Reads: Accumulator]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; [PATTERN: Memory clearing operation] 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $09AF32.l		; 22 32 AF 09 ; Jump to subroutine long $09AF32.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $1E		; 90 1E ; Branch if carry clear to $90, $1E [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; [PATTERN: Memory clearing operation] A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	cpx $0468.w		; EC 68 04 ; Compare $0468.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	stz $0468.w		; 9C 68 04 ; Store zero to $0468.w
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $AE.b,X		; B5 AE ; Load $AE.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	jsl $09AF61.l		; 22 61 AF 09 ; Jump to subroutine long $09AF61.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jsr $C7D8.w		; 20 D8 C7 ; Jump to subroutine at $C7D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $09AF61.l		; 22 61 AF 09 ; Jump to subroutine long $09AF61.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $F7		; 90 F7 ; Branch if carry clear to $90, $F7 [Flow: branch]
	.db $B0, $C3		; [PATTERN: Memory clearing operation] B0 C3 ; Branch if carry set to $B0, $C3 [Flow: branch]
	jsl $09AF61.l		; 22 61 AF 09 ; Jump to subroutine long $09AF61.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $EF		; 90 EF ; Branch if carry clear to $90, $EF [Flow: branch]
	stz $0FFC.w		; 9C FC 0F ; Store zero to $0FFC.w
	stz $AF.b		; 64 AF ; Store zero to $AF.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0642.w		; AD 42 06 ; Load $0642.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	cpx $0468.w		; [PATTERN: Memory clearing operation] EC 68 04 ; Compare $0468.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	stx $0468.w		; 8E 68 04 ; Store X register to $0468.w [Reads: X Index]
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $02A1A4.l,X		; 3F A4 A1 02 ; AND accumulator with memory (long,X) $02A1A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $7EF37A.l		; [PATTERN: Memory clearing operation] AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $02A1A4.l,X		; 3F A4 A1 02 ; AND accumulator with memory (long,X) $02A1A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0468.w		; 9C 68 04 ; Store zero to $0468.w
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; [PATTERN: Memory clearing operation] 9C 90 06 ; Store zero to $0690.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$FFFE.w		; A2 FE FF ; Load #$FFFE.w into X register [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $0478.w		; EC 78 04 ; Compare $0478.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp $0500.w,X		; DD 00 05 ; Compare accumulator $0500.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	ldx $0466.w		; AE 66 04 ; Load $0466.w into X register [Writes: X Index] [Flags: ZN]
	cpx #$FFFF.w		; E0 FF FF ; Compare #$FFFF.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $0646.w		; AD 46 06 ; Load $0646.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0642.w		; AD 42 06 ; Load $0642.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jsr $CDCC.w		; 20 CC CD ; Jump to subroutine at $CDCC.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $0468.w		; [PATTERN: Memory clearing operation] EC 68 04 ; Compare $0468.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	stx $0468.w		; 8E 68 04 ; Store X register to $0468.w [Reads: X Index]
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0430.w		; AD 30 04 ; Load $0430.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; [PATTERN: Memory clearing operation] D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	jsr $CD39.w		; 20 39 CD ; Jump to subroutine at $CD39.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $27		; 90 27 ; Branch if carry clear to $90, $27 [Flow: branch]
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C5CF.w		; 20 CF C5 ; Jump to subroutine at $C5CF.w [Writes: Stack Pointer] [Flow: call]
	lda $0468.w		; AD 68 04 ; Load $0468.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0468.w		; 8D 68 04 ; Store accumulator to $0468.w [Reads: Accumulator]
	inc $0430.w		; EE 30 04 ; Increment $0430.w [Flags: ZN]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	jsr $CD39.w		; 20 39 CD ; Jump to subroutine at $CD39.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	stz $0430.w		; 9C 30 04 ; Store zero to $0430.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $4F		; F0 4F ; Branch if equal to $F0, $4F [Flow: branch]
	lda $04B6.w		; AD B6 04 ; Load $04B6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04B7.w		; 0D B7 04 ; Logical OR $04B7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $47		; F0 47 ; Branch if equal to $F0, $47 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	ldx $04B6.w		; AE B6 04 ; Load $04B6.w into X register [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE00.w		; 29 00 FE ; Logical AND #$FE00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$2400.w		; C9 00 24 ; Compare #$2400.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $04B6.w		; 8E B6 04 ; Store X register to $04B6.w [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy #$10.b		; A0 10 ; Load #$10.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $01E7A9.l		; 22 A9 E7 01 ; Jump to subroutine long $01E7A9.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $0540.w,X		; BD 40 05 ; Load $0540.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0020.w		; E0 20 00 ; Compare #$0020.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	ldx #$0001.w		; A2 01 00 ; Load #$0001.w into X register [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $0468.w		; [PATTERN: Memory clearing operation] EC 68 04 ; Compare $0468.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	stx $0468.w		; 8E 68 04 ; Store X register to $0468.w [Reads: X Index]
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	and $90CD.w,Y		; 39 CD 90 ; AND accumulator with memory $90CD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $0642.w		; AD 42 06 ; Load $0642.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $6F		; F0 6F ; Branch if equal to $F0, $6F [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy #$FFFE.w		; A0 FE FF ; Load #$FFFE.w into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	sty $0456.w		; 8C 56 04 ; Store Y register to $0456.w [Reads: Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01C666.l,X		; BF 66 C6 01 ; Load long $01C666.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F001C.l		; 8F 1C 00 7F ; Store accumulator (long) $7F001C.l [Reads: Accumulator]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01C670.l,X		; 7F 70 C6 01 ; Add long $01C670.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062C.w		; 6D 2C 06 ; Add $062C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F001A.l		; 8F 1A 00 7F ; Store accumulator (long) $7F001A.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062E.w		; 6D 2E 06 ; Add $062E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F0018.l		; 8F 18 00 7F ; Store accumulator (long) $7F0018.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0454.w		; 8D 54 04 ; Store accumulator to $0454.w [Reads: Accumulator]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
	jsl $099692.l		; 22 92 96 09 ; Jump to subroutine long $099692.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b		; 06 AD ; Arithmetic shift left $AD.b [Reads: Direct Page] [Flags: ZNC]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $02A1A4.l,X		; 3F A4 A1 02 ; AND accumulator with memory (long,X) $02A1A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $02A1A4.l,X		; 3F A4 A1 02 ; AND accumulator with memory (long,X) $02A1A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04C2.w		; 8D C2 04 ; Store accumulator to $04C2.w [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01C6FC.l,X		; BF FC C6 01 ; Load long $01C6FC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $05A51D.l		; 22 1D A5 05 ; Jump to subroutine long $05A51D.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF2DB.l		; AF DB F2 7E ; Load long $7EF2DB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	stz $AE.b		; 64 AE ; Store zero to $AE.b
	jsl $00F945.l		; 22 45 F9 00 ; Jump to subroutine long $00F945.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EA		; 10 EA ; Branch if plus to $10, $EA [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda #$1A.b		; [PATTERN: Memory clearing operation] A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $AE.b		; 64 AE ; Store zero to $AE.b
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03EF.w		; 8D EF 03 ; Store accumulator to $03EF.w [Reads: Accumulator]
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	lda #$64.b		; A9 64 ; Load #$64.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $1A		; 90 1A ; Branch if carry clear to $90, $1A [Flow: branch]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $15		; 90 15 ; Branch if carry clear to $90, $15 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $09AF32.l		; 22 32 AF 09 ; Jump to subroutine long $09AF32.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0641.w		; AD 41 06 ; Load $0641.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $CD39.w		; [PATTERN: Memory clearing operation] 20 39 CD ; Jump to subroutine at $CD39.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $E7		; 90 E7 ; Branch if carry clear to $90, $E7 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $1000.w		; 9C 00 10 ; Store zero to $1000.w
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$5858.w		; A9 58 58 ; Load #$5858.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $0200.w		; AE 00 02 ; Load $0200.w into X register [Writes: X Index] [Flags: ZN]
	lda $06E0.w,X		; BD E0 06 ; Load $06E0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$149C.w		; A0 9C 14 ; Load #$149C.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy $0200.w		; AC 00 02 ; Load $0200.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0101.w		; 69 01 01 ; Add #$0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $100E.w,X		; 9D 0E 10 ; Store accumulator to $100E.w,X [Reads: Accumulator, X Index]
	lda #$0082.w		; A9 82 00 ; Load #$0082.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $1014.w,X		; 9D 14 10 ; Store accumulator to $1014.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $100C.w,X		; 9D 0C 10 ; Store accumulator to $100C.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1018.w,X		; 9D 18 10 ; Store accumulator to $1018.w,X [Reads: Accumulator, X Index]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1004.w,X		; 9D 04 10 ; Store accumulator to $1004.w,X [Reads: Accumulator, X Index]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	sta $1010.w,X		; 9D 10 10 ; Store accumulator to $1010.w,X [Reads: Accumulator, X Index]
	sta $1016.w,X		; 9D 16 10 ; Store accumulator to $1016.w,X [Reads: Accumulator, X Index]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $101A.w,X		; 9D 1A 10 ; Store accumulator to $101A.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1000.w		; 8D 00 10 ; Store accumulator to $1000.w [Reads: Accumulator]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	cmp $0496.w		; CD 96 04 ; Compare $0496.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $C7EB.w		; 4C EB C7 ; Jump to $C7EB.w [Flow: jump]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $0540.w,X		; BD 40 05 ; Load $0540.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0020.w		; E0 20 00 ; Compare #$0020.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	ldx #$0001.w		; A2 01 00 ; Load #$0001.w into X register [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jsr $C7D8.w		; 20 D8 C7 ; Jump to subroutine at $C7D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $041A.w		; AD 1A 04 ; Load $041A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $CA17.w		; 20 17 CA ; Jump to subroutine at $CA17.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $0FC1.w		; 8C C1 0F ; Store Y register to $0FC1.w [Reads: Y Index]
	jsr $C969.w		; 20 69 C9 ; Jump to subroutine at $C969.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $CA66.w		; 20 66 CA ; Jump to subroutine at $CA66.w [Writes: Stack Pointer] [Flow: call]
	sta $0312.w		; 8D 12 03 ; Store accumulator to $0312.w [Reads: Accumulator]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0312.w		; ED 12 03 ; Subtract $0312.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0422.w		; 8D 22 04 ; Store accumulator to $0422.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $0312.w		; AD 12 03 ; Load $0312.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	ldx $041E.w		; AE 1E 04 ; Load $041E.w into X register [Writes: X Index] [Flags: ZN]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $9B1A.w,X		; DD 1A 9B ; Compare accumulator $9B1A.w,X [Reads: X Index] [Flags: ZNC]
	.db $B0, $2D		; B0 2D ; Branch if carry set to $B0, $2D [Flow: branch]
	jsr $CA75.w		; 20 75 CA ; Jump to subroutine at $CA75.w [Writes: Stack Pointer] [Flow: call]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $9B1A.w,X		; DD 1A 9B ; Compare accumulator $9B1A.w,X [Reads: X Index] [Flags: ZNC]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	ldx #$1B.b		; A2 1B ; Load #$1B.b into X register [Writes: X Index] [Flags: ZN]
	stx $012F.w		; 8E 2F 01 ; Store X register to $012F.w [Reads: X Index]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	stx $012D.w		; 8E 2D 01 ; Store X register to $012D.w [Reads: X Index]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $AE.b,X		; [PATTERN: Memory clearing operation] 94 AE ; Store Y register $AE.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $02E4.w		; 8C E4 02 ; Store Y register to $02E4.w [Reads: Y Index]
	sty $0FC1.w		; 8C C1 0F ; Store Y register to $0FC1.w [Reads: Y Index]
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011B.w		; 9C 1B 01 ; Store zero to $011B.w
	stz $011C.w		; [PATTERN: Memory clearing operation] 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	stx $17.b		; 86 17 ; Store X register to $17.b [Reads: X Index]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0422.w		; ED 22 04 ; Subtract $0422.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $042A.w		; AD 2A 04 ; Load $042A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$141F.w		; 29 1F 14 ; Logical AND #$141F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01C961.l,X		; BF 61 C9 01 ; Load long $01C961.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $011A.w		; 8D 1A 01 ; Store accumulator to $011A.w [Reads: Accumulator]
	lda $01C965.l,X		; BF 65 C9 01 ; Load long $01C965.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
	ldx $0E.b		; [PATTERN: Memory clearing operation] A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $AE.b,X		; B4 AE ; Load Y register $AE.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $041A.w		; AD 1A 04 ; Load $041A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $CA17.w		; 20 17 CA ; Jump to subroutine at $CA17.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $0FC1.w		; 8C C1 0F ; Store Y register to $0FC1.w [Reads: Y Index]
	jsr $C969.w		; 20 69 C9 ; Jump to subroutine at $C969.w [Writes: Stack Pointer] [Flow: call]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $CA66.w		; 20 66 CA ; Jump to subroutine at $CA66.w [Writes: Stack Pointer] [Flow: call]
	sta $0312.w		; 8D 12 03 ; Store accumulator to $0312.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0422.w		; 6D 22 04 ; Add $0422.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0422.w		; 8D 22 04 ; Store accumulator to $0422.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $0312.w		; AD 12 03 ; Load $0312.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $5B		; F0 5B ; Branch if equal to $F0, $5B [Flow: branch]
	ldx $041E.w		; AE 1E 04 ; Load $041E.w into X register [Writes: X Index] [Flags: ZN]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $9B2A.w,X		; DD 2A 9B ; Compare accumulator $9B2A.w,X [Reads: X Index] [Flags: ZNC]
	.db $90, $2D		; 90 2D ; Branch if carry clear to $90, $2D [Flow: branch]
	jsr $CA75.w		; 20 75 CA ; Jump to subroutine at $CA75.w [Writes: Stack Pointer] [Flow: call]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $9B2A.w,X		; DD 2A 9B ; Compare accumulator $9B2A.w,X [Reads: X Index] [Flags: ZNC]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	ldx #$1B.b		; A2 1B ; Load #$1B.b into X register [Writes: X Index] [Flags: ZN]
	stx $012F.w		; 8E 2F 01 ; Store X register to $012F.w [Reads: X Index]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	stx $012D.w		; 8E 2D 01 ; Store X register to $012D.w [Reads: X Index]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $AE.b,X		; [PATTERN: Memory clearing operation] 94 AE ; Store Y register $AE.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $02E4.w		; 8C E4 02 ; Store Y register to $02E4.w [Reads: Y Index]
	sty $0FC1.w		; 8C C1 0F ; Store Y register to $0FC1.w [Reads: Y Index]
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011B.w		; 9C 1B 01 ; Store zero to $011B.w
	stz $011C.w		; [PATTERN: Memory clearing operation] 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	stx $17.b		; 86 17 ; Store X register to $17.b [Reads: X Index]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $042A.w		; AD 2A 04 ; Load $042A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	and #$1020.w		; 29 20 10 ; Logical AND #$1020.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	eor #$0420.w		; 49 20 04 ; Exclusive OR #$0420.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	lda $0642.w		; AD 42 06 ; Load $0642.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $0540.w,X		; BD 40 05 ; Load $0540.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0020.w		; E0 20 00 ; Compare #$0020.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $EE.b		; 24 EE ; Test bits $EE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $9C.b		; 04 9C ; Test and set bits $9C.b [Reads: Accumulator] [Flags: Z]
	.db $42, $06		; 42 06 ; Reserved instruction
.ACCU 8
	sep #$20		; E2 20
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C7.w,X		; 1D C7 98 ; OR accumulator with memory $98C7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	sta $0FC1.w		; 8D C1 0F ; Store accumulator to $0FC1.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2200.w		; A9 00 22 ; Load #$2200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $041C.w		; 6D 1C 04 ; Add $041C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $041C.w		; 8D 1C 04 ; Store accumulator to $041C.w [Reads: Accumulator]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $AE.b,X		; B4 AE ; Load Y register $AE.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	stx $046C.w		; 8E 6C 04 ; Store X register to $046C.w [Reads: X Index]
	ldx #$16.b		; A2 16 ; Load #$16.b into X register [Writes: X Index] [Flags: ZN]
	stx $1C.b		; 86 1C ; Store X register to $1C.b [Reads: X Index]
	ldx $041E.w		; AE 1E 04 ; Load $041E.w into X register [Writes: X Index] [Flags: ZN]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0642.w		; AD 42 06 ; Load $0642.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FA		; F0 FA ; Branch if equal to $F0, $FA [Flow: branch]
	lda #$8503.w		; A9 03 85 ; Load #$8503.w into accumulator [Writes: Accumulator] [Flags: ZN]
	stx $64.b,Y		; 96 64 ; Store X register $64.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$64.b],Y		; 97 64 ; Store accumulator (long indexed) [$64.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$8516.w		; A9 16 85 ; Load #$8516.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $01A9.w,X		; 1E A9 01 ; Arithmetic shift left $01A9.w,X [Reads: X Index] [Flags: ZNC]
	sta $1F.b		; 85 1F ; Store accumulator to $1F.b [Reads: Accumulator]
	lda #$8D01.w		; A9 01 8D ; Load #$8D01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $04.b		; 24 04 ; Test bits $04.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $00F649.l		; 22 49 F6 00 ; Jump to subroutine long $00F649.l [Writes: Stack Pointer] [Flow: call]
	lda #$850B.w		; A9 0B 85 ; Load #$850B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($A9.b),Y		; 11 A9 ; OR accumulator with memory ($A9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $098F.w,X		; 7E 8F 09 ; Rotate right $098F.w,X [Reads: X Index] [Flags: ZNC]
	cpy #$7E.b		; C0 7E ; Compare #$7E.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda #$8F1F.w		; A9 1F 8F ; Load #$8F1F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpy #$7E.b		; C0 7E ; Compare #$7E.b with Y register [Reads: Y Index] [Flags: ZNC]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	lda #$8500.w		; A9 00 85 ; Load #$8500.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0403AD.l		; AF AD 03 04 ; Load long $0403AD.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0098C9.l		; 0F C9 98 00 ; OR accumulator with memory (long) $0098C9.l [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0682.w		; AD 82 06 ; Load $0682.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0680.w		; AD 80 06 ; Load $0680.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $95A0.w		; 20 A0 95 ; Jump to subroutine at $95A0.w [Writes: Stack Pointer] [Flow: call]
	jsr $F762.w		; 20 62 F7 ; Jump to subroutine at $F762.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$2E.b		; A9 2E ; Load #$2E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0642.w		; AD 42 06 ; Load $0642.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FA		; F0 FA ; Branch if equal to $F0, $FA [Flow: branch]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$2F.b		; A9 2F ; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0424.w		; 8D 24 04 ; Store accumulator to $0424.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $AF.b		; 85 AF ; Store accumulator to $AF.b [Reads: Accumulator]
	lda $0403.w		; [PATTERN: Memory clearing operation] AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0098C9.l		; 0F C9 98 00 ; OR accumulator with memory (long) $0098C9.l [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C9.l		; 2F C9 98 00 ; AND accumulator with memory (long) $0098C9.l [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	lda $0642.w		; AD 42 06 ; Load $0642.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F1		; F0 F1 ; Branch if equal to $F0, $F1 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $AF.b		; 85 AF ; Store accumulator to $AF.b [Reads: Accumulator]
	lda $0403.w		; [PATTERN: Memory clearing operation] AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0098C9.l		; 0F C9 98 00 ; OR accumulator with memory (long) $0098C9.l [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
	stz $0684.w		; 9C 84 06 ; Store zero to $0684.w
	stz $067A.w		; [PATTERN: Memory clearing operation] 9C 7A 06 ; Store zero to $067A.w
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $96.b		; 85 96 ; Store accumulator to $96.b [Reads: Accumulator]
	stz $97.b		; 64 97 ; Store zero to $97.b
	stz $98.b		; 64 98 ; Store zero to $98.b
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E.b		; 85 1E ; Store accumulator to $1E.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F.b		; 85 1F ; Store accumulator to $1F.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$62.b		; A9 62 ; Load #$62.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda $7EF2BB.l		; AF BB F2 7E ; Load long $7EF2BB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF2BB.l		; 8F BB F2 7E ; Store accumulator (long) $7EF2BB.l [Reads: Accumulator]
	lda $7EF2FB.l		; AF FB F2 7E ; Load long $7EF2FB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF2FB.l		; 8F FB F2 7E ; Store accumulator (long) $7EF2FB.l [Reads: Accumulator]
	lda $7EF051.l		; AF 51 F0 7E ; Load long $7EF051.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF051.l		; 8F 51 F0 7E ; Store accumulator (long) $7EF051.l [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B9.b		; 85 B9 ; Store accumulator to $B9.b [Reads: Accumulator]
	lda #$F1CD.w		; A9 CD F1 ; Load #$F1CD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $CC95.w		; 20 95 CC ; Jump to subroutine at $CC95.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0472.w		; AD 72 04 ; Load $0472.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0680.w		; 8D 80 06 ; Store accumulator to $0680.w [Reads: Accumulator]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062C.w		; 6D 2C 06 ; Add $062C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0680.w		; 6D 80 06 ; Add $0680.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0028.w		; 69 28 00 ; Add #$0028.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0680.w		; 8D 80 06 ; Store accumulator to $0680.w [Reads: Accumulator]
	lda $0472.w		; AD 72 04 ; Load $0472.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0676.w		; 8D 76 06 ; Store accumulator to $0676.w [Reads: Accumulator]
	sta $0678.w		; 8D 78 06 ; Store accumulator to $0678.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062E.w		; 6D 2E 06 ; Add $062E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0682.w		; 8D 82 06 ; Store accumulator to $0682.w [Reads: Accumulator]
	stz $0686.w		; 9C 86 06 ; Store zero to $0686.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$2F.b		; A9 2F ; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy $04BA.w		; AC BA 04 ; Load $04BA.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	sta $04BA.w		; 8D BA 04 ; Store accumulator to $04BA.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $CDCC.w		; 20 CC CD ; Jump to subroutine at $CDCC.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $04BA.w		; [PATTERN: Memory clearing operation] CD BA 04 ; Compare $04BA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	sta $04BA.w		; 8D BA 04 ; Store accumulator to $04BA.w [Reads: Accumulator]
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	stz $BB.b		; 64 BB ; Store zero to $BB.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $04BC.w		; AD BC 04 ; Load $04BC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04BC.w		; 8D BC 04 ; Store accumulator to $04BC.w [Reads: Accumulator]
	jsl $00FDA7.l		; 22 A7 FD 00 ; Jump to subroutine long $00FDA7.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
.INDEX 16
	rep #$10		; C2 10
	ldy #$0012.w		; A0 12 00 ; Load #$0012.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; [PATTERN: Memory clearing operation] 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	sty $04BA.w		; 8C BA 04 ; Store Y register to $04BA.w [Reads: Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	stz $BB.b		; 64 BB ; Store zero to $BB.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $CDCC.w		; 20 CC CD ; Jump to subroutine at $CDCC.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $F6		; 90 F6 ; Branch if carry clear to $90, $F6 [Flow: branch]
	ldy #$0005.w		; [PATTERN: Memory clearing operation] A0 05 00 ; Load #$0005.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $D9		; 80 D9 ; Branch always to $80, $D9 [Flow: branch]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	stz $BA.b		; 64 BA ; Store zero to $BA.b
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	ldy $BA.b		; A4 BA ; Load $BA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $B4.b		; 85 B4 ; Store accumulator to $B4.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $BA.b		; 84 BA ; Store Y register to $BA.b [Reads: Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: ZNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy #$10.b		; A0 10 ; Load #$10.b into Y register [Writes: Y Index] [Flags: ZN]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($85.b)		; B2 85 ; Load accumulator (indirect) ($85.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4002.l,X		; 9F 02 40 7E ; Store accumulator (long,X) $7E4002.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4004.l,X		; 9F 04 40 7E ; Store accumulator (long,X) $7E4004.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4006.l,X		; 9F 06 40 7E ; Store accumulator (long,X) $7E4006.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4080.l,X		; 9F 80 40 7E ; Store accumulator (long,X) $7E4080.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4082.l,X		; 9F 82 40 7E ; Store accumulator (long,X) $7E4082.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4084.l,X		; 9F 84 40 7E ; Store accumulator (long,X) $7E4084.l,X [Reads: Accumulator, X Index]
	lda $9B60.w,Y		; B9 60 9B ; Load $9B60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4086.l,X		; 9F 86 40 7E ; Store accumulator (long,X) $7E4086.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $BE		; D0 BE ; Branch if not equal to $D0, $BE [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01F8.w		; E9 F8 01 ; Subtract #$01F8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $AF		; D0 AF ; Branch if not equal to $D0, $AF [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $9E		; D0 9E ; Branch if not equal to $D0, $9E [Flow: branch]
	jmp $CC99.w		; 4C 99 CC ; Jump to $CC99.w [Flow: jump]
	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $5F		; D0 5F ; Branch if not equal to $D0, $5F [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $58		; D0 58 ; Branch if not equal to $D0, $58 [Flow: branch]
	jsr $CDA5.w		; 20 A5 CD ; Jump to subroutine at $CDA5.w [Writes: Stack Pointer] [Flow: call]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2323.w		; C9 23 23 ; Compare #$2323.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	cmp #$2424.w		; C9 24 24 ; Compare #$2424.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2323.w		; C9 23 23 ; Compare #$2323.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	cmp #$2424.w		; C9 24 24 ; Compare #$2424.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2323.w		; C9 23 23 ; Compare #$2323.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	cmp #$2424.w		; C9 24 24 ; Compare #$2424.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2323.w		; C9 23 23 ; Compare #$2323.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$2424.w		; C9 24 24 ; Compare #$2424.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	cmp $7F2040.l,X		; DF 40 20 7F ; Compare accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stx $04B6.w		; 8E B6 04 ; Store X register to $04B6.w [Reads: X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04B6.w		; 9C B6 04 ; Store zero to $04B6.w
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFF.w		; 69 FF FF ; Add #$FFFF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000E.w		; 69 0E 00 ; Add #$000E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $EE.b		; A6 EE ; Load $EE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ora #$1000.w		; 09 00 10 ; Logical OR #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $CC		; D0 CC ; Branch if not equal to $D0, $CC [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	jsr $CDA5.w		; 20 A5 CD ; Jump to subroutine at $CDA5.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2323C9.l,X		; 7F C9 23 23 ; Add long $2323C9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	cmp #$3A3A.w		; C9 3A 3A ; Compare #$3A3A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5B		; F0 5B ; Branch if equal to $F0, $5B [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$3B3B.w		; C9 3B 3B ; Compare #$3B3B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2323C9.l,X		; 7F C9 23 23 ; Add long $2323C9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $43		; F0 43 ; Branch if equal to $F0, $43 [Flow: branch]
	cmp #$3A3A.w		; C9 3A 3A ; Compare #$3A3A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3E		; F0 3E ; Branch if equal to $F0, $3E [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$3B3B.w		; C9 3B 3B ; Compare #$3B3B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2323C9.l,X		; 7F C9 23 23 ; Add long $2323C9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	cmp #$3A3A.w		; C9 3A 3A ; Compare #$3A3A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$3B3B.w		; C9 3B 3B ; Compare #$3B3B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2323C9.l,X		; 7F C9 23 23 ; Add long $2323C9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	cmp #$3A3A.w		; C9 3A 3A ; Compare #$3A3A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$3B3B.w		; C9 3B 3B ; Compare #$3B3B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $7F2040.l,X		; DF 40 20 7F ; Compare accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stx $04B6.w		; 8E B6 04 ; Store X register to $04B6.w [Reads: X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04B6.w		; 9C B6 04 ; Store zero to $04B6.w
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	nop		; EA ; No operation
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$D003.w		; 29 03 D0 ; Logical AND #$D003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0112AD.l		; 22 AD 12 01 ; Jump to subroutine long $0112AD.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $04F0.w,X		; BD F0 04 ; Load $04F0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	dec $04F0.w,X		; DE F0 04 ; Decrement memory $04F0.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$8DC0.w		; 09 C0 8D ; Logical OR #$8DC0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $01F4A6.l		; 22 A6 F4 01 ; Jump to subroutine long $01F4A6.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $CFEA.w		; 4C EA CF ; Jump to $CFEA.w [Flow: jump]
.ACCU 16
	rep #$21		; C2 21
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $99EA.w,Y		; 79 EA 99 ; Add $99EA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $99F2.w,Y		; 79 F2 99 ; Add $99F2.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $EE.b		; A6 EE ; Load $EE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ora #$1000.w		; 09 00 10 ; Logical OR #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $99FA.w,Y		; 79 FA 99 ; Add $99FA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $57		; D0 57 ; Branch if not equal to $D0, $57 [Flow: branch]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sty $0694.w		; 8C 94 06 ; Store Y register to $0694.w [Reads: Y Index]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $08.b		; C5 08 ; Compare $08.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0028.w		; C9 28 00 ; Compare #$0028.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $7F		; F0 7F ; Branch if equal to $F0, $7F [Flow: branch]
	cmp #$001C.w		; C9 1C 00 ; Compare #$001C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	cmp #$001E.w		; C9 1E 00 ; Compare #$001E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	stx $068E.w		; 8E 8E 06 ; Store X register to $068E.w [Reads: X Index]
	ldy $040C.w		; AC 0C 04 ; Load $040C.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $7EF366.l		; AF 66 F3 7E ; Load long $7EF366.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,Y		; 39 C0 98 ; AND accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	lda $04B8.w		; AD B8 04 ; Load $04B8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	inc $04B8.w		; EE B8 04 ; Increment $04B8.w [Flags: ZN]
	lda #$007A.w		; A9 7A 00 ; Load #$007A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jmp $CFEA.w		; 4C EA CF ; Jump to $CFEA.w [Flow: jump]
	stz $04B8.w		; 9C B8 04 ; Store zero to $04B8.w
	jmp $CFEA.w		; 4C EA CF ; Jump to $CFEA.w [Flow: jump]
	cmp #$001C.w		; C9 1C 00 ; Compare #$001C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $F2		; 90 F2 ; Branch if carry clear to $90, $F2 [Flow: branch]
	cmp #$002C.w		; C9 2C 00 ; Compare #$002C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $ED		; B0 ED ; Branch if carry set to $B0, $ED [Flow: branch]
	cmp #$002A.w		; C9 2A 00 ; Compare #$002A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	lda $7EF36F.l		; AF 6F F3 7E ; Load long $7EF36F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $DF		; F0 DF ; Branch if equal to $F0, $DF [Flow: branch]
	lda $7EF36F.l		; AF 6F F3 7E ; Load long $7EF36F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF36F.l		; 8F 6F F3 7E ; Store accumulator (long) $7EF36F.l [Reads: Accumulator]
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	stx $068E.w		; 8E 8E 06 ; Store X register to $068E.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $0694.w		; AE 94 06 ; Load $0694.w into X register [Writes: X Index] [Flags: ZN]
	lda $19C0.w,X		; BD C0 19 ; Load $19C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01CE6C.l,X		; BF 6C CE 01 ; Load long $01CE6C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $F1,$AD		; 54 AD F1 ; Move block negative $F1,$AD [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $4CB000.l,X		; 3F 00 B0 4C ; AND accumulator with memory (long,X) $4CB000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $068E.w		; 8E 8E 06 ; Store X register to $068E.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	jsl $099C38.l		; 22 38 9C 09 ; Jump to subroutine long $099C38.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $2F		; B0 2F ; Branch if carry set to $B0, $2F [Flow: branch]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03BE.w,X		; 9D BE 03 ; Store accumulator to $03BE.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062C.w		; 6D 2C 06 ; Add $062C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03B6.w,X		; 9D B6 03 ; Store accumulator to $03B6.w,X [Reads: Accumulator, X Index]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062E.w		; 6D 2E 06 ; Add $062E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03BA.w,X		; 9D BA 03 ; Store accumulator to $03BA.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	jsl $079291.l		; 22 91 92 07 ; Jump to subroutine long $079291.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0436.w		; AD 36 04 ; Load $0436.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $61		; 30 61 ; Branch if minus to $30, $61 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $5D		; D0 5D ; Branch if not equal to $D0, $5D [Flow: branch]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $57		; D0 57 ; Branch if not equal to $D0, $57 [Flow: branch]
	ldy $0437.w		; AC 37 04 ; Load $0437.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $0436.w		; AE 36 04 ; Load $0436.w into X register [Writes: X Index] [Flags: ZN]
	cpx $2F.b		; E4 2F ; Compare $2F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $01CE5C.l,X		; DF 5C CE 01 ; Compare accumulator (long,X) $01CE5C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,Y		; 19 C0 98 ; OR accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98E0.w,Y		; 39 E0 98 ; AND accumulator with memory $98E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $068C.w		; CD 8C 06 ; Compare $068C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
.INDEX 16
	rep #$10		; C2 10
	lda $0437.w		; AD 37 04 ; Load $0437.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $D33A.w		; 20 3A D3 ; Jump to subroutine at $D33A.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	ldy $0460.w		; AC 60 04 ; Load $0460.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D51C.w		; 20 1C D5 ; Jump to subroutine at $D51C.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $8A		; D0 8A ; Branch if not equal to $D0, $8A [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda $44.b		; A5 44 ; Load $44.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $45.b		; A5 45 ; Load $45.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$0041.w		; A0 41 00 ; Load #$0041.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$006C.w		; C9 6C 00 ; Compare #$006C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $54		; F0 54 ; Branch if equal to $F0, $54 [Flow: branch]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $4C		; F0 4C ; Branch if equal to $F0, $4C [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$006C.w		; C9 6C 00 ; Compare #$006C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3E		; F0 3E ; Branch if equal to $F0, $3E [Flow: branch]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $36		; F0 36 ; Branch if equal to $F0, $36 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$003F.w		; 69 3F 00 ; Add #$003F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$0001.w		; A0 01 00 ; Load #$0001.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$006C.w		; C9 6C 00 ; Compare #$006C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$006C.w		; C9 6C 00 ; Compare #$006C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0C.b		; 64 0C ; Store zero to $0C.b
	cmp #$6C.b		; C9 6C ; Compare #$6C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($84.b),Y		; D1 84 ; Compare accumulator ($84.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	asl $40C0.w		; 0E C0 40 ; Arithmetic shift left $40C0.w [Flags: ZNC]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2998.w,X		; 1E 98 29 ; Arithmetic shift left $2998.w,X [Reads: X Index] [Flags: ZNC]
	ora $0E8500.l		; 0F 00 85 0E ; OR accumulator with memory (long) $0E8500.l [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($F000.w)		; 6C 00 F0 ; Jump indirect to ($F000.w) [Flow: jump]
	asl $8A.b		; 06 8A ; Arithmetic shift left $8A.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($F000.w)		; 6C 00 F0 ; Jump indirect to ($F000.w) [Flow: jump]
	ora ($E8.b,X)		; 01 E8 ; Logical OR ($E8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$41.b		; E9 41 ; Subtract #$41.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $9F.b		; 02 9F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $20409F.l,X		; 7F 9F 40 20 ; Add long $20409F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $032968.l,X		; 7F 68 29 03 ; Add long $032968.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01CE64.l,X		; BF 64 CE 01 ; Load long $01CE64.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $52B9.w		; 0E B9 52 ; Arithmetic shift left $52B9.w [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stx $068E.w		; 8E 8E 06 ; Store X register to $068E.w [Reads: X Index]
	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	lda $0400.w		; AD 00 04 ; Load $0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0400.w		; 8D 00 04 ; Store accumulator to $0400.w [Reads: Accumulator]
	stz $0692.w		; 9C 92 06 ; Store zero to $0692.w
	jsr $D365.w		; 20 65 D3 ; Jump to subroutine at $D365.w [Writes: Stack Pointer] [Flow: call]
	ldy $0460.w		; AC 60 04 ; Load $0460.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D51C.w		; 20 1C D5 ; Jump to subroutine at $D51C.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $0DBBD0.l		; 22 D0 BB 0D ; Jump to subroutine long $0DBBD0.l [Writes: Stack Pointer] [Flow: call]
	ora #$1E.b		; 09 1E ; Logical OR #$1E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jmp $1BC0F8.l		; 5C F8 C0 1B ; Jump long to $1BC0F8.l [Flow: jump]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0082.w		; E9 82 00 ; Subtract #$0082.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0062.w		; C9 62 00 ; Compare #$0062.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0062.w		; C9 62 00 ; Compare #$0062.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0062.w		; C9 62 00 ; Compare #$0062.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$007C.w		; 69 7C 00 ; Add #$007C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $B7		; 10 B7 ; Branch if plus to $10, $B7 [Flow: branch]
	.db $30, $5D		; 30 5D ; Branch if minus to $30, $5D [Flow: branch]
	jmp $D2C9.w		; 4C C9 D2 ; Jump to $D2C9.w [Flow: jump]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0028.w		; C9 28 00 ; Compare #$0028.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$002A.w		; C9 2A 00 ; Compare #$002A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$002E.w		; C9 2E 00 ; Compare #$002E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	stx $068E.w		; 8E 8E 06 ; Store X register to $068E.w [Reads: X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062C.w		; 6D 2C 06 ; Add $062C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03B6.w,X		; 9D B6 03 ; Store accumulator to $03B6.w,X [Reads: Accumulator, X Index]
	lda $19A0.w,Y		; B9 A0 19 ; Load $19A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062E.w		; 6D 2E 06 ; Add $062E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03BA.w,X		; 9D BA 03 ; Store accumulator to $03BA.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03BE.w,X		; 9D BE 03 ; Store accumulator to $03BE.w,X [Reads: Accumulator, X Index]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$65.b		; C9 65 ; Compare #$65.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$AD.b		; 09 AD ; Logical OR #$AD.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $8D		; 10 8D ; Branch if plus to $10, $8D [Flow: branch]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($DA.b),Y		; 71 DA ; Add with carry ($DA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($E2.b,X)		; 01 E2 ; Logical OR ($E2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $19A0.w,Y		; BE A0 19 ; Load X register $19A0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	sty $0460.w		; 8C 60 04 ; Store Y register to $0460.w [Reads: Y Index]
	sty $0694.w		; 8C 94 06 ; Store Y register to $0694.w [Reads: Y Index]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvn $C9,$FA		; 54 FA C9 ; Move block negative $C9,$FA [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $FB15.w		; 4C 15 FB ; Jump to $FB15.w [Flow: jump]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $4CFB.w		; CC FB 4C ; Compare $4CFB.w with Y register [Reads: Y Index] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($A0BE.w,X)		; FC BE A0 ; Jump to subroutine indirect indexed ($A0BE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $0886.w,Y		; 19 86 08 ; OR accumulator with memory $0886.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $0460.w		; 8C 60 04 ; Store Y register to $0460.w [Reads: Y Index]
	sty $0694.w		; 8C 94 06 ; Store Y register to $0694.w [Reads: Y Index]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$FB		; C2 FB
	jmp $FC80.w		; 4C 80 FC ; Jump to $FC80.w [Flow: jump]
	ldx $19A0.w,Y		; BE A0 19 ; Load X register $19A0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	sty $0460.w		; 8C 60 04 ; Store Y register to $0460.w [Reads: Y Index]
	sty $04.b		; 84 04 ; Store Y register to $04.b [Reads: Y Index]
	sty $0694.w		; 8C 94 06 ; Store Y register to $0694.w [Reads: Y Index]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $FAD7.w		; 4C D7 FA ; Jump to $FAD7.w [Flow: jump]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $FB8E.w		; 4C 8E FB ; Jump to $FB8E.w [Flow: jump]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $FC45.w		; 4C 45 FC ; Jump to $FC45.w [Flow: jump]
	jmp $FD03.w		; 4C 03 FD ; Jump to $FD03.w [Flow: jump]
	ldx $19A0.w,Y		; BE A0 19 ; Load X register $19A0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	sty $0460.w		; [PATTERN: Memory clearing operation] 8C 60 04 ; Store Y register to $0460.w [Reads: Y Index]
	sty $0694.w		; 8C 94 06 ; Store Y register to $0694.w [Reads: Y Index]
	jmp $FD3E.w		; 4C 3E FD ; Jump to $FD3E.w [Flow: jump]
	stz $045E.w		; 9C 5E 04 ; Store zero to $045E.w
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	ldy $0456.w		; AC 56 04 ; Load $0456.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $0460.w		; 8C 60 04 ; Store Y register to $0460.w [Reads: Y Index]
	ldx $19A0.w,Y		; BE A0 19 ; Load X register $19A0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $19A0.w,Y		; 99 A0 19 ; Store accumulator to $19A0.w,Y [Reads: Accumulator, Y Index]
	jmp $FD92.w		; 4C 92 FD ; Jump to $FD92.w [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	inc $0690.w		; EE 90 06 ; Increment $0690.w [Flags: ZN]
	lda $0690.w		; AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0468.w		; AC 68 04 ; Load $0468.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	jmp $D457.w		; 4C 57 D4 ; Jump to $D457.w [Flow: jump]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	sty $0692.w		; 8C 92 06 ; Store Y register to $0692.w [Reads: Y Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $068E.w		; 8C 8E 06 ; Store Y register to $068E.w [Reads: Y Index]
	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $60		; D0 60 ; Branch if not equal to $D0, $60 [Flow: branch]
	lda $0468.w		; AD 68 04 ; Load $0468.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,Y		; 39 C0 98 ; AND accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $53		; D0 53 ; Branch if not equal to $D0, $53 [Flow: branch]
	lda $0690.w		; AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,Y		; 19 C0 98 ; OR accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $21		; 80 21 ; Branch always to $80, $21 [Flow: branch]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,Y		; 39 C0 98 ; AND accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0690.w		; AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98E0.w,Y		; 39 E0 98 ; AND accumulator with memory $98E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	jsr $D311.w		; 20 11 D3 ; Jump to subroutine at $D311.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	lda $0690.w		; AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	ldy $068E.w		; AC 8E 06 ; Load $068E.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D51C.w		; 20 1C D5 ; Jump to subroutine at $D51C.w [Writes: Stack Pointer] [Flow: call]
	ldy $068E.w		; AC 8E 06 ; Load $068E.w into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0018.w		; C0 18 00 ; Compare #$0018.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $D3C4.w		; 4C C4 D3 ; Jump to $D3C4.w [Flow: jump]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0690.w		; [PATTERN: Memory clearing operation] AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $18.b		; 64 18 ; Store zero to $18.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0690.w		; 8D 90 06 ; Store accumulator to $0690.w [Reads: Accumulator]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	inc $0690.w		; EE 90 06 ; Increment $0690.w [Flags: ZN]
	lda $0690.w		; AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	ldx $068E.w		; AE 8E 06 ; Load $068E.w into X register [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	lda $0400.w		; AD 00 04 ; Load $0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,X		; 1D C0 98 ; OR accumulator with memory $98C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0400.w		; 8D 00 04 ; Store accumulator to $0400.w [Reads: Accumulator]
	sty $0692.w		; 8C 92 06 ; Store Y register to $0692.w [Reads: Y Index]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ldx $068E.w		; AE 8E 06 ; Load $068E.w into X register [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $D2E8.w		; 20 E8 D2 ; Jump to subroutine at $D2E8.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0690.w		; AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	jsr $D510.w		; 20 10 D5 ; Jump to subroutine at $D510.w [Writes: Stack Pointer] [Flow: call]
	ldx $068E.w		; AE 8E 06 ; Load $068E.w into X register [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00F0.w		; C9 F0 00 ; Compare #$00F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	cmp #$0028.w		; C9 28 00 ; Compare #$0028.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jsr $D5AA.w		; 20 AA D5 ; Jump to subroutine at $D5AA.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	stz $11.b		; 64 11 ; Store zero to $11.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $068E.w		; AE 8E 06 ; Load $068E.w into X register [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $BE35.w		; 20 35 BE ; Jump to subroutine at $BE35.w [Writes: Stack Pointer] [Flow: call]
	ldx $044E.w		; AE 4E 04 ; Load $044E.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$06.b		; C0 06 ; Compare #$06.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $9F		; 10 9F ; Branch if plus to $10, $9F [Flow: branch]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $20409F.l,X		; 7F 9F 40 20 ; Add long $20409F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $CCC8C8.l,X		; 7F C8 C8 CC ; Add long $CCC8C8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $D004.w		; 4E 04 D0 ; Logical shift right $D004.w [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $7F3000.l,X		; BF 00 30 7F ; Load long $7F3000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $9F		; 10 9F ; Branch if plus to $10, $9F [Flow: branch]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $30409F.l,X		; 7F 9F 40 30 ; Add long $30409F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $CCC8C8.l,X		; 7F C8 C8 CC ; Add long $CCC8C8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $D004.w		; 4E 04 D0 ; Logical shift right $D004.w [Flags: ZNC]
	cmp $AE.b,S		; C3 AE ; Compare accumulator (stack relative) $AE.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $50, $04		; 50 04 ; Branch if overflow clear to $50, $04 [Flow: branch]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $009F.w		; 20 9F 00 ; Jump to subroutine at $009F.w [Writes: Stack Pointer] [Flow: call]
	jsr $9F7F.w		; 20 7F 9F ; Jump to subroutine at $9F7F.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $C87F.w		; 20 7F C8 ; Jump to subroutine at $C87F.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0450.w		; CC 50 04 ; Compare $0450.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $7F3000.l,X		; BF 00 30 7F ; Load long $7F3000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $009F.w		; 20 9F 00 ; Jump to subroutine at $009F.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $7F		; 30 7F ; Branch if minus to $30, $7F [Flow: branch]
	sta $7F3040.l,X		; 9F 40 30 7F ; Store accumulator (long,X) $7F3040.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0450.w		; CC 50 04 ; Compare $0450.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $C3		; D0 C3 ; Branch if not equal to $D0, $C3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $85		; 30 85 ; Branch if minus to $30, $85 [Flow: branch]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0438.w		; AE 38 04 ; Load $0438.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0438.w		; CC 38 04 ; Compare $0438.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	cpy $047E.w		; CC 7E 04 ; Compare $047E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5E.b		; A9 5E ; Load #$5E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $019F.w,X		; 5E 9F 01 ; Logical shift right $019F.w,X [Reads: X Index] [Flags: ZNC]
	jsr $A57F.w		; 20 7F A5 ; Jump to subroutine at $A57F.w [Writes: Stack Pointer] [Flow: call]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($20.b,X)		; 41 20 ; Exclusive OR accumulator with memory ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $016918.l,X		; 7F 18 69 01 ; Add long $016918.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $047E.w		; CC 7E 04 ; Compare $047E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	cpy $0482.w		; CC 82 04 ; Compare $0482.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5F.b		; A9 5F ; Load #$5F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $20019F.l,X		; 5F 9F 01 20 ; Exclusive OR accumulator with memory (long,X) $20019F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9F00A5.l,X		; 7F A5 00 9F ; Add long $9F00A5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($20.b,X)		; 41 20 ; Exclusive OR accumulator with memory ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $016918.l,X		; 7F 18 69 01 ; Add long $016918.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0482.w		; CC 82 04 ; Compare $0482.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	cpy $04A2.w		; CC A2 04 ; Compare $04A2.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04A2.w		; CC A2 04 ; Compare $04A2.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	cpy $04A4.w		; CC A4 04 ; Compare $04A4.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04A4.w		; CC A4 04 ; Compare $04A4.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$09.b]		; 07 09 ; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cpy $043A.w		; CC 3A 04 ; Compare $043A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $043A.w		; CC 3A 04 ; Compare $043A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	cpy $0480.w		; CC 80 04 ; Compare $0480.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5E.b		; A9 5E ; Load #$5E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $019F.w,X		; 5E 9F 01 ; Logical shift right $019F.w,X [Reads: X Index] [Flags: ZNC]
	jsr $A57F.w		; 20 7F A5 ; Jump to subroutine at $A57F.w [Writes: Stack Pointer] [Flow: call]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($20.b,X)		; 41 20 ; Exclusive OR accumulator with memory ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $016918.l,X		; 7F 18 69 01 ; Add long $016918.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0480.w		; CC 80 04 ; Compare $0480.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	cpy $0484.w		; CC 84 04 ; Compare $0484.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldx $06B0.w,Y		; BE B0 06 ; Load X register $06B0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$5F.b		; A9 5F ; Load #$5F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $20019F.l,X		; 5F 9F 01 20 ; Exclusive OR accumulator with memory (long,X) $20019F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9F00A5.l,X		; 7F A5 00 9F ; Add long $9F00A5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($20.b,X)		; 41 20 ; Exclusive OR accumulator with memory ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $016918.l,X		; 7F 18 69 01 ; Add long $016918.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	sta $7F20C1.l,X		; 9F C1 20 7F ; Store accumulator (long,X) $7F20C1.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0484.w		; CC 84 04 ; Compare $0484.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	sta $0FC1.w		; 8D C1 0F ; Store accumulator to $0FC1.w [Reads: Accumulator]
	cmp $7F0000.l		; CF 00 00 7F ; Compare accumulator (long) $7F0000.l [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $78		; D0 78 ; Branch if not equal to $D0, $78 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $D373.w		; 20 73 D3 ; Jump to subroutine at $D373.w [Writes: Stack Pointer] [Flow: call]
	jsr $F811.w		; 20 11 F8 ; Jump to subroutine at $F811.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	inc $0454.w		; EE 54 04 ; Increment $0454.w [Flags: ZN]
	inc $0454.w		; EE 54 04 ; Increment $0454.w [Flags: ZN]
	lda $0454.w		; AD 54 04 ; Load $0454.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0015.w		; C9 15 00 ; Compare #$0015.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $53		; D0 53 ; Branch if not equal to $D0, $53 [Flow: branch]
	ldy $0456.w		; AC 56 04 ; Load $0456.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,Y		; 19 C0 98 ; OR accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $068C.w		; 8D 8C 06 ; Store accumulator to $068C.w [Reads: Accumulator]
	lda $0400.w		; AD 00 04 ; Load $0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $98C0.w,Y		; 19 C0 98 ; OR accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0400.w		; 8D 00 04 ; Store accumulator to $0400.w [Reads: Accumulator]
	ldx #$0001.w		; A2 01 00 ; Load #$0001.w into X register [Writes: X Index] [Flags: ZN]
	lda $19C0.w,Y		; B9 C0 19 ; Load $19C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$0100.w		; A0 00 01 ; Load #$0100.w into Y register [Writes: Y Index] [Flags: ZN]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	ldy #$0001.w		; A0 01 00 ; Load #$0001.w into Y register [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0452.w		; 0D 52 04 ; Logical OR $0452.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0452.w		; 8D 52 04 ; Store accumulator to $0452.w [Reads: Accumulator]
	lda $A6.b,X		; B5 A6 ; Load $A6.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0002.w		; 09 02 00 ; Logical OR #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $A6.b,X		; 95 A6 ; Store accumulator to $A6.b,X [Reads: Accumulator, X Index]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC19C.l		; [PATTERN: Memory clearing operation] 8F 9C C1 7E ; Store accumulator (long) $7EC19C.l [Reads: Accumulator]
	ldy $0456.w		; AC 56 04 ; Load $0456.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $BFC1.w		; 20 C1 BF ; Jump to subroutine at $BFC1.w [Writes: Stack Pointer] [Flow: call]
	stz $0454.w		; 9C 54 04 ; Store zero to $0454.w
	stz $0456.w		; 9C 56 04 ; Store zero to $0456.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $02B929.l		; [PATTERN: Memory clearing operation] 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01D9BA.l,X		; 7F BA D9 01 ; Add long $01D9BA.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01D9C2.l,X		; 7F C2 D9 01 ; Add long $01D9C2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1000.w		; 09 00 10 ; Logical OR #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0070.w		; C9 70 00 ; Compare #$0070.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0500.w,X		; BD 00 05 ; Load $0500.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	ldy #$0055.w		; A0 55 00 ; Load #$0055.w into Y register [Writes: Y Index] [Flags: ZN]
	and #$F0F0.w		; 29 F0 F0 ; Logical AND #$F0F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$2020.w		; C9 20 20 ; Compare #$2020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda $0500.w,X		; BD 00 05 ; Load $0500.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01D9E2.l,X		; BF E2 D9 01 ; Load long $01D9E2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$31		; E2 31
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $48		; F0 48 ; Branch if equal to $F0, $48 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($20.b,S),Y		; 13 20 ; OR accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ldx $0474.w		; AE 74 04 ; Load $0474.w into X register [Writes: X Index] [Flags: ZN]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01D7C0.l,X		; 7F C0 D7 01 ; Add long $01D7C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0540.w,Y		; 99 40 05 ; Store accumulator to $0540.w,Y [Reads: Accumulator, Y Index]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $07EDB5.l		; 22 B5 ED 07 ; Jump to subroutine long $07EDB5.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	jsr $D8D4.w		; 20 D4 D8 ; Jump to subroutine at $D8D4.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $07EDF9.l		; 22 F9 ED 07 ; Jump to subroutine long $07EDF9.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	ldx $042C.w		; AE 2C 04 ; Load $042C.w into X register [Writes: X Index] [Flags: ZN]
	inc $0500.w,X		; FE 00 05 ; Increment memory $0500.w,X [Reads: X Index] [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $0478.w		; CC 78 04 ; Compare $0478.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $A3		; D0 A3 ; Branch if not equal to $D0, $A3 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda $0560.w,Y		; B9 60 05 ; Load $0560.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	lda $0580.w,Y		; B9 80 05 ; Load $0580.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $100C.w,X		; 9D 0C 10 ; Store accumulator to $100C.w,X [Reads: Accumulator, X Index]
	lda $05A0.w,Y		; B9 A0 05 ; Load $05A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
	lda $05C0.w,Y		; B9 C0 05 ; Load $05C0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1018.w,X		; 9D 18 10 ; Store accumulator to $1018.w,X [Reads: Accumulator, X Index]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $60B9AA.l,X		; 3F AA B9 60 ; AND accumulator with memory (long,X) $60B9AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9F.b		; 05 9F ; Logical OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $80B9.w,X		; 7E B9 80 ; Rotate right $80B9.w,X [Reads: X Index] [Flags: ZNC]
	ora $9F.b		; 05 9F ; Logical OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	ror $A0B9.w,X		; 7E B9 A0 ; Rotate right $A0B9.w,X [Reads: X Index] [Flags: ZNC]
	ora $9F.b		; 05 9F ; Logical OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $C0B9.w,X		; 7E B9 C0 ; Rotate right $C0B9.w,X [Reads: X Index] [Flags: ZNC]
	ora $9F.b		; 05 9F ; Logical OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $82, $20, $7E		; 82 20 7E ; Branch always long to $82, $20, $7E [Flow: branch]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $7EFE00.l,X		; BF 00 FE 7E ; Load long $7EFE00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($B9.b,X)		; 01 B9 ; Logical OR ($B9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $29.b		; 05 29 ; Logical OR $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $AA4A3F.l,X		; FF 3F 4A AA ; Subtract with carry (long,X) $AA4A3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $9DD9.w		; 8E D9 9D ; Store X register to $9DD9.w [Reads: X Index]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $9DD9.w		; 8E D9 9D ; Store X register to $9DD9.w [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $D98E.w		; 20 8E D9 ; Jump to subroutine at $D98E.w [Writes: Stack Pointer] [Flow: call]
	sta $100E.w,X		; 9D 0E 10 ; Store accumulator to $100E.w,X [Reads: Accumulator, X Index]
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $9DD9.w		; 8E D9 9D ; Store X register to $9DD9.w [Reads: X Index]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($9D.b,X)		; 01 9D ; Logical OR ($9D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	sta $1010.w,X		; 9D 10 10 ; Store accumulator to $1010.w,X [Reads: Accumulator, X Index]
	sta $1016.w,X		; 9D 16 10 ; Store accumulator to $1016.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $101A9D.l,X		; FF 9D 1A 10 ; Subtract with carry (long,X) $101A9D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$18.b		; 69 18 ; Add #$18.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$4000.w		; 29 00 40 ; Logical AND #$4000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $0641.w		; AD 41 06 ; Load $0641.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0001.w		; 49 01 00 ; Exclusive OR #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0641.w		; 8D 41 06 ; Store accumulator to $0641.w [Reads: Accumulator]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $73		; F0 73 ; Branch if equal to $F0, $73 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0922.w		; A9 22 09 ; Load #$0922.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
	lda #$0932.w		; A9 32 09 ; Load #$0932.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $100C.w,X		; 9D 0C 10 ; Store accumulator to $100C.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1018.w,X		; 9D 18 10 ; Store accumulator to $1018.w,X [Reads: Accumulator, X Index]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0922.w		; A9 22 09 ; Load #$0922.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda #$0932.w		; A9 32 09 ; Load #$0932.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	sty $72.b		; 84 72 ; Store Y register to $72.b [Reads: Y Index]
	ldx #$0001.w		; A2 01 00 ; Load #$0001.w into X register [Writes: X Index] [Flags: ZN]
	lda $05FC.w,X		; BD FC 05 ; Load $05FC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $72.b		; C5 72 ; Compare $72.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	stz $05FC.w,X		; 9E FC 05 ; Store zero to $05FC.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$0023.w		; C9 23 00 ; Compare #$0023.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $0468.w		; AD 68 04 ; Load $0468.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0001.w		; 49 01 00 ; Exclusive OR #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0466.w		; 8D 66 04 ; Store accumulator to $0466.w [Reads: Accumulator]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0500.w,Y		; 99 00 05 ; Store accumulator to $0500.w,Y [Reads: Accumulator, Y Index]
	lda #$2727.w		; A9 27 27 ; Load #$2727.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $D87F.w		; 4C 7F D8 ; Jump to $D87F.w [Flow: jump]
.ACCU 8
	sep #$20		; E2 20
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $0520.w,Y		; BE 20 05 ; Load X register $0520.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $7EC000.l		; AF 00 C0 7E ; Load long $7EC000.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF940.l,X		; 9F 40 F9 7E ; Store accumulator (long,X) $7EF940.l,X [Reads: Accumulator, X Index]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF942.l,X		; 9F 42 F9 7E ; Store accumulator (long,X) $7EF942.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$303F.w		; 29 3F 30 ; Logical AND #$303F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000010.l,X		; FF 10 00 00 ; Subtract with carry (long,X) $000010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7EFF80.l,X		; FF 80 FF 7E ; Subtract with carry (long,X) $7EFF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF80.l,X		; FF 80 FF 00 ; Subtract with carry (long,X) $00FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0000.l,X		; FF 00 00 FE ; Subtract with carry (long,X) $FE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $505252.l,X		; FF 52 52 50 ; Subtract with carry (long,X) $505252.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $54		; 50 54 ; Branch if overflow clear to $50, $54 [Flow: branch]
	mvn $00,$00		; 54 00 00 ; Move block negative $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01D9BA.l,X		; 7F BA D9 01 ; Add long $01D9BA.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01D9C2.l,X		; 7F C2 D9 01 ; Add long $01D9C2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1000.w		; 09 00 10 ; Logical OR #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0F0.w		; 29 F0 F0 ; Logical AND #$F0F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$1010.w		; C9 10 10 ; Compare #$1010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sty $042C.w		; 8C 2C 04 ; Store Y register to $042C.w [Reads: Y Index]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $E6B2.w		; 20 B2 E6 ; Jump to subroutine at $E6B2.w [Writes: Stack Pointer] [Flow: call]
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D828.w		; 20 28 D8 ; Jump to subroutine at $D828.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01D9E2.l,X		; BF E2 D9 01 ; Load long $01D9E2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	.db $80, $4F		; 80 4F ; Branch always to $80, $4F [Flow: branch]
	cmp #$2020.w		; C9 20 20 ; Compare #$2020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $52		; D0 52 ; Branch if not equal to $D0, $52 [Flow: branch]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $042C.w		; 8D 2C 04 ; Store accumulator to $042C.w [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $E6B2.w		; 20 B2 E6 ; Jump to subroutine at $E6B2.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsr $D828.w		; 20 28 D8 ; Jump to subroutine at $D828.w [Writes: Stack Pointer] [Flow: call]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D828.w		; 20 28 D8 ; Jump to subroutine at $D828.w [Writes: Stack Pointer] [Flow: call]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D828.w		; 20 28 D8 ; Jump to subroutine at $D828.w [Writes: Stack Pointer] [Flow: call]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	inc $042C.w		; EE 2C 04 ; Increment $042C.w [Flags: ZN]
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D828.w		; 20 28 D8 ; Jump to subroutine at $D828.w [Writes: Stack Pointer] [Flow: call]
	lda #$5555.w		; A9 55 55 ; Load #$5555.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $042C.w		; 8D 2C 04 ; Store accumulator to $042C.w [Reads: Accumulator]
	jsr $DB41.w		; 20 41 DB ; Jump to subroutine at $DB41.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F1		; F0 F1 ; Branch if equal to $F0, $F1 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1000.w		; 09 00 10 ; Logical OR #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0070.w		; C9 70 00 ; Compare #$0070.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $C9		; D0 C9 ; Branch if not equal to $D0, $C9 [Flow: branch]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0F0.w		; 29 F0 F0 ; Logical AND #$F0F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$4040.w		; C9 40 40 ; Compare #$4040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sty $042C.w		; 8C 2C 04 ; Store Y register to $042C.w [Reads: Y Index]
	jsr $D828.w		; 20 28 D8 ; Jump to subroutine at $D828.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $D0		; 10 D0 ; Branch if plus to $10, $D0 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $042C.w		; 8C 2C 04 ; Store Y register to $042C.w [Reads: Y Index]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $E6B2.w		; 20 B2 E6 ; Jump to subroutine at $E6B2.w [Writes: Stack Pointer] [Flow: call]
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $D828.w		; 20 28 D8 ; Jump to subroutine at $D828.w [Writes: Stack Pointer] [Flow: call]
	jsr $DB41.w		; 20 41 DB ; Jump to subroutine at $DB41.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0B9C.w		; AD 9C 0B ; Load $0B9C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B9C.w		; 8D 9C 0B ; Store accumulator to $0B9C.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06812D.l		; 22 2D 81 06 ; Jump to subroutine long $06812D.l [Writes: Stack Pointer] [Flow: call]
	jmp $0991C3.l		; 5C C3 91 09 ; Jump long to $0991C3.l [Flow: jump]
	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$7E.b		; 29 7E ; Logical AND #$7E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0004.w,X		; FE 04 00 ; Increment memory $0004.w,X [Reads: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0AEB0A.l,X		; 1F 0A EB 0A ; Logical OR long $0AEB0A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0204.w,X		; FE 04 02 ; Increment memory $0204.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc #$DD.b		; E9 DD ; Subtract #$DD.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$DD.b		; E9 DD ; Subtract #$DD.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$DD.b		; E9 DD ; Subtract #$DD.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$DD.b		; E9 DD ; Subtract #$DD.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $DDF1.w,X		; DD F1 DD ; Compare accumulator $DDF1.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($DD.b),Y		; F1 DD ; Subtract with carry ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DD.b),Y		; F1 DD ; Subtract with carry ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DD.b),Y		; F1 DD ; Subtract with carry ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DD.b,S),Y		; F3 DD ; Subtract with carry (stack relative indirect indexed) ($DD.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0FDD.w,X		; FE DD 0F ; Increment memory $0FDD.w,X [Reads: X Index] [Flags: ZN]
	dec $DE15.w,X		; DE 15 DE ; Decrement memory $DE15.w,X [Reads: X Index] [Flags: ZN]
	ora $DE.b,X		; 15 DE ; OR accumulator with memory $DE.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; 15 DE ; OR accumulator with memory $DE.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; 15 DE ; OR accumulator with memory $DE.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; 15 DE ; OR accumulator with memory $DE.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$DE.b],Y		; 17 DE ; OR accumulator with memory (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $DE.b,S		; 23 DE ; AND accumulator with stack relative $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $DE.b,S		; 23 DE ; AND accumulator with stack relative $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $DE.b,S		; 23 DE ; AND accumulator with stack relative $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $DE.b		; 25 DE ; Logical AND $DE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $DE		; 42 DE ; Reserved instruction
	eor $DE83DE.l,X		; 5F DE 83 DE ; Exclusive OR accumulator with memory (long,X) $DE83DE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $DE.b,S		; 83 DE ; Store accumulator (stack relative) $DE.b,S [Reads: Accumulator, Stack Pointer]
	sta $DE.b		; 85 DE ; Store accumulator to $DE.b [Reads: Accumulator]
	sta ($DE.b,S),Y		; 93 DE ; Store accumulator (stack relative indirect indexed) ($DE.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $99DE.w,Y		; 99 DE 99 ; Store accumulator to $99DE.w,Y [Reads: Accumulator, Y Index]
	dec $DE9B.w,X		; DE 9B DE ; Decrement memory $DE9B.w,X [Reads: X Index] [Flags: ZN]
	ldy #$DE.b		; A0 DE ; Load #$DE.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $DE.b,S		; A3 DE ; Load accumulator (stack relative) $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $DE.b		; A5 DE ; Load $DE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $B0DE.w		; AE DE B0 ; Load $B0DE.w into X register [Writes: X Index] [Flags: ZN]
	dec $DEC1.w,X		; DE C1 DE ; Decrement memory $DEC1.w,X [Reads: X Index] [Flags: ZN]
	cmp $CFDE.w		; CD DE CF ; Compare $CFDE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $DEE0.w,X		; DE E0 DE ; Decrement memory $DEE0.w,X [Reads: X Index] [Flags: ZN]
	sbc ($DE.b)		; F2 DE ; Subtract with carry (indirect) ($DE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DE.b)		; F2 DE ; Subtract with carry (indirect) ($DE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pea $FCDE.w		; F4 DE FC ; Push absolute address $FCDE.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	dec $DF1C.w,X		; DE 1C DF ; Decrement memory $DF1C.w,X [Reads: X Index] [Flags: ZN]
	jsl $DF22DF.l		; 22 DF 22 DF ; Jump to subroutine long $DF22DF.l [Writes: Stack Pointer] [Flow: call]
	bit $DF.b		; 24 DF ; Test bits $DF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $3EDF.w,X		; 3C DF 3E ; Test bits $3EDF.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $46DF43.l,X		; DF 43 DF 46 ; Compare accumulator (long,X) $46DF43.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $50DF48.l,X		; DF 48 DF 50 ; Compare accumulator (long,X) $50DF48.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $7BDF6D.l,X		; DF 6D DF 7B ; Compare accumulator (long,X) $7BDF6D.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $8EDF80.l,X		; DF 80 DF 8E ; Compare accumulator (long,X) $8EDF80.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $9ADF9A.l,X		; DF 9A DF 9A ; Compare accumulator (long,X) $9ADF9A.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $B3DF9C.l,X		; DF 9C DF B3 ; Compare accumulator (long,X) $B3DF9C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $D8DFCA.l,X		; DF CA DF D8 ; Compare accumulator (long,X) $D8DFCA.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $EFDFED.l,X		; DF ED DF EF ; Compare accumulator (long,X) $EFDFED.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $FDDFFB.l,X		; DF FB DF FD ; Compare accumulator (long,X) $FDDFFB.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $0EE00C.l,X		; DF 0C E0 0E ; Compare accumulator (long,X) $0EE00C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$25.b		; E0 25 ; Compare #$25.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$25.b		; E0 25 ; Compare #$25.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$27.b		; E0 27 ; Compare #$27.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$3B.b		; E0 3B ; Compare #$3B.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$5B.b		; E0 5B ; Compare #$5B.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$61.b		; E0 61 ; Compare #$61.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$61.b		; E0 61 ; Compare #$61.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$63.b		; E0 63 ; Compare #$63.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$6C.b		; E0 6C ; Compare #$6C.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$6E.b		; E0 6E ; Compare #$6E.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$74.b		; E0 74 ; Compare #$74.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$76.b		; E0 76 ; Compare #$76.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$7E.b		; E0 7E ; Compare #$7E.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$8C.b		; E0 8C ; Compare #$8C.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$9A.b		; E0 9A ; Compare #$9A.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$A2.b		; E0 A2 ; Compare #$A2.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$C5.b		; E0 C5 ; Compare #$C5.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$F9.b		; E0 F9 ; Compare #$F9.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$FC.b		; E0 FC ; Compare #$FC.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$FE.b		; E0 FE ; Compare #$FE.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($0B.b,X)		; E1 0B ; Subtract with carry ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($25.b,X)		; E1 25 ; Subtract with carry ($25.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($33.b,X)		; E1 33 ; Subtract with carry ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($3E.b,X)		; E1 3E ; Subtract with carry ($3E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($40.b,X)		; E1 40 ; Subtract with carry ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($45.b,X)		; E1 45 ; Subtract with carry ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4D.b,X)		; E1 4D ; Subtract with carry ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($64.b,X)		; E1 64 ; Subtract with carry ($64.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6C.b,X)		; E1 6C ; Subtract with carry ($6C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($8C.b,X)		; E1 8C ; Subtract with carry ($8C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($A3.b,X)		; E1 A3 ; Subtract with carry ($A3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($B2.b,X)		; E1 B2 ; Subtract with carry ($B2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($B2.b,X)		; E1 B2 ; Subtract with carry ($B2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($B4.b,X)		; E1 B4 ; Subtract with carry ($B4.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($C2.b,X)		; E1 C2 ; Subtract with carry ($C2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($D0.b,X)		; E1 D0 ; Subtract with carry ($D0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DC.b,X)		; E1 DC ; Subtract with carry ($DC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DC.b,X)		; E1 DC ; Subtract with carry ($DC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DC.b,X)		; E1 DC ; Subtract with carry ($DC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DC.b,X)		; E1 DC ; Subtract with carry ($DC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DC.b,X)		; E1 DC ; Subtract with carry ($DC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DE.b,X)		; E1 DE ; Subtract with carry ($DE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($15.b,X)		; E1 15 ; Subtract with carry ($15.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
	sep #$20		; E2 20
.ACCU 8
	sep #$29		; E2 29
.ACCU 8
	sep #$29		; E2 29
.ACCU 8
	sep #$29		; E2 29
.ACCU 8
	sep #$29		; E2 29
.ACCU 8
	sep #$2B		; E2 2B
.ACCU 8
.INDEX 8
	sep #$33		; E2 33
.ACCU 8
.INDEX 8
	sep #$3B		; E2 3B
	sep #$49		; E2 49 ; Set processor status bits #$49 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.INDEX 8
	sep #$52		; E2 52
.INDEX 8
	sep #$54		; E2 54
.INDEX 8
	sep #$5D		; E2 5D
.INDEX 8
	sep #$5F		; E2 5F
.ACCU 8
	sep #$64		; E2 64
.ACCU 8
.INDEX 8
	sep #$72		; E2 72
.ACCU 8
.INDEX 8
	sep #$7A		; E2 7A
	sep #$80		; E2 80 ; Set processor status bits #$80 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$82		; E2 82 ; Set processor status bits #$82 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$88		; E2 88 ; Set processor status bits #$88 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$88		; E2 88 ; Set processor status bits #$88 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$88		; E2 88 ; Set processor status bits #$88 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$8A		; E2 8A ; Set processor status bits #$8A [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.INDEX 8
	sep #$95		; E2 95
.ACCU 8
	sep #$AC		; E2 AC
.ACCU 8
.INDEX 8
	sep #$BA		; E2 BA
.ACCU 8
.INDEX 8
	sep #$BD		; E2 BD
.ACCU 8
.INDEX 8
	sep #$BD		; E2 BD
.ACCU 8
.INDEX 8
	sep #$BF		; E2 BF
	sep #$C5		; E2 C5 ; Set processor status bits #$C5 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$C7		; E2 C7 ; Set processor status bits #$C7 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$CD		; E2 CD ; Set processor status bits #$CD [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$CD		; E2 CD ; Set processor status bits #$CD [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$CF		; E2 CF ; Set processor status bits #$CF [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.INDEX 8
	sep #$DB		; E2 DB
.INDEX 8
	sep #$DB		; E2 DB
.INDEX 8
	sep #$DD		; E2 DD
.ACCU 8
	sep #$E3		; E2 E3
.ACCU 8
	sep #$E5		; E2 E5
.ACCU 8
	sep #$ED		; E2 ED
.ACCU 8
.INDEX 8
	sep #$F5		; E2 F5
.ACCU 8
.INDEX 8
	sep #$FB		; E2 FB
.ACCU 8
.INDEX 8
	sep #$FD		; E2 FD
.INDEX 8
	sep #$12		; E2 12
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $28.b,S		; E3 28 ; Subtract stack-relative $28.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $2D.b,S		; E3 2D ; Subtract stack-relative $2D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $35.b,S		; E3 35 ; Subtract stack-relative $35.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $49.b,S		; E3 49 ; Subtract stack-relative $49.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $5A.b,S		; E3 5A ; Subtract stack-relative $5A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $5D.b,S		; E3 5D ; Subtract stack-relative $5D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $5D.b,S		; E3 5D ; Subtract stack-relative $5D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $5F.b,S		; E3 5F ; Subtract stack-relative $5F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $62.b,S		; E3 62 ; Subtract stack-relative $62.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $64.b,S		; E3 64 ; Subtract stack-relative $64.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $84.b,S		; E3 84 ; Subtract stack-relative $84.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $8C.b,S		; E3 8C ; Subtract stack-relative $8C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $97.b,S		; E3 97 ; Subtract stack-relative $97.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $A2.b,S		; E3 A2 ; Subtract stack-relative $A2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $AA.b,S		; E3 AA ; Subtract stack-relative $AA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $BE.b,S		; E3 BE ; Subtract stack-relative $BE.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $C3.b,S		; E3 C3 ; Subtract stack-relative $C3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $C8.b,S		; E3 C8 ; Subtract stack-relative $C8.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $D3.b,S		; E3 D3 ; Subtract stack-relative $D3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $E1.b,S		; E3 E1 ; Subtract stack-relative $E1.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $F3.b,S		; E3 F3 ; Subtract stack-relative $F3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $F5.b,S		; E3 F5 ; Subtract stack-relative $F5.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpx $1E.b		; E4 1E ; Compare $1E.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $23.b		; E4 23 ; Compare $23.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $37.b		; E4 37 ; Compare $37.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $43.b		; E4 43 ; Compare $43.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $45.b		; E4 45 ; Compare $45.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $51.b		; E4 51 ; Compare $51.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $53.b		; E4 53 ; Compare $53.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $6B.b		; E4 6B ; Compare $6B.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $6D.b		; E4 6D ; Compare $6D.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $75.b		; E4 75 ; Compare $75.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $81.b		; E4 81 ; Compare $81.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $83.b		; E4 83 ; Compare $83.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $8C.b		; E4 8C ; Compare $8C.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $8E.b		; E4 8E ; Compare $8E.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $96.b		; E4 96 ; Compare $96.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $A2.b		; E4 A2 ; Compare $A2.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $A4.b		; E4 A4 ; Compare $A4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $B3.b		; E4 B3 ; Compare $B3.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $B5.b		; E4 B5 ; Compare $B5.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $CC.b		; E4 CC ; Compare $CC.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $DB.b		; E4 DB ; Compare $DB.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $DB.b		; E4 DB ; Compare $DB.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $DB.b		; E4 DB ; Compare $DB.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $DB.b		; E4 DB ; Compare $DB.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $DD.b		; E4 DD ; Compare $DD.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E3.b		; E4 E3 ; Compare $E3.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E5.b		; E4 E5 ; Compare $E5.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $07.b		; E4 07 ; Compare $07.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $15.b		; E5 15 ; Subtract $15.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1D.b		; E5 1D ; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $29.b		; E5 29 ; Subtract $29.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $29.b		; E5 29 ; Subtract $29.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $29.b		; E5 29 ; Subtract $29.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2B.b		; E5 2B ; Subtract $2B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2E.b		; E5 2E ; Subtract $2E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2E.b		; E5 2E ; Subtract $2E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $30.b		; E5 30 ; Subtract $30.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $35.b		; E5 35 ; Subtract $35.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3D.b		; E5 3D ; Subtract $3D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4B.b		; E5 4B ; Subtract $4B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $56.b		; E5 56 ; Subtract $56.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $5E.b		; E5 5E ; Subtract $5E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $61.b		; E5 61 ; Subtract $61.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $61.b		; E5 61 ; Subtract $61.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $63.b		; E5 63 ; Subtract $63.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $74.b		; E5 74 ; Subtract $74.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $77.b		; E5 77 ; Subtract $77.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $77.b		; E5 77 ; Subtract $77.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $77.b		; E5 77 ; Subtract $77.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $77.b		; E5 77 ; Subtract $77.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $77.b		; E5 77 ; Subtract $77.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $77.b		; E5 77 ; Subtract $77.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $79.b		; E5 79 ; Subtract $79.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7C.b		; E5 7C ; Subtract $7C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7C.b		; E5 7C ; Subtract $7C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7C.b		; E5 7C ; Subtract $7C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7C.b		; E5 7C ; Subtract $7C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7E.b		; E5 7E ; Subtract $7E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8A.b		; E5 8A ; Subtract $8A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8C.b		; E5 8C ; Subtract $8C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $95.b		; E5 95 ; Subtract $95.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $97.b		; E5 97 ; Subtract $97.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A2.b		; E5 A2 ; Subtract $A2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AA.b		; E5 AA ; Subtract $AA.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $B2.b		; E5 B2 ; Subtract $B2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $BD.b		; E5 BD ; Subtract $BD.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C6.b		; E5 C6 ; Subtract $C6.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C8.b		; E5 C8 ; Subtract $C8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DF.b		; E5 DF ; Subtract $DF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E4.b		; E5 E4 ; Subtract $E4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7.b		; E5 E7 ; Subtract $E7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7.b		; E5 E7 ; Subtract $E7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7.b		; E5 E7 ; Subtract $E7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7.b		; E5 E7 ; Subtract $E7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7.b		; E5 E7 ; Subtract $E7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7.b		; E5 E7 ; Subtract $E7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7.b		; E5 E7 ; Subtract $E7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB.b		; E5 FB ; Subtract $FB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB.b		; E5 FB ; Subtract $FB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FD.b		; E5 FD ; Subtract $FD.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $15.b		; E5 15 ; Subtract $15.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $17.b		; E6 17 ; Increment $17.b [Reads: Direct Page] [Flags: ZN]
	inc $25.b		; E6 25 ; Increment $25.b [Reads: Direct Page] [Flags: ZN]
	inc $33.b		; E6 33 ; Increment $33.b [Reads: Direct Page] [Flags: ZN]
	inc $5A.b		; E6 5A ; Increment $5A.b [Reads: Direct Page] [Flags: ZN]
	inc $5C.b		; E6 5C ; Increment $5C.b [Reads: Direct Page] [Flags: ZN]
	inc $6E.b		; E6 6E ; Increment $6E.b [Reads: Direct Page] [Flags: ZN]
	inc $70.b		; E6 70 ; Increment $70.b [Reads: Direct Page] [Flags: ZN]
	inc $76.b		; E6 76 ; Increment $76.b [Reads: Direct Page] [Flags: ZN]
	inc $76.b		; E6 76 ; Increment $76.b [Reads: Direct Page] [Flags: ZN]
	inc $76.b		; E6 76 ; Increment $76.b [Reads: Direct Page] [Flags: ZN]
	inc $76.b		; E6 76 ; Increment $76.b [Reads: Direct Page] [Flags: ZN]
	inc $78.b		; E6 78 ; Increment $78.b [Reads: Direct Page] [Flags: ZN]
	inc $98.b		; E6 98 ; Increment $98.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $FF.b		; E6 FF ; Increment $FF.b [Reads: Direct Page] [Flags: ZN]
	sbc $0A13CC.l,X		; FF CC 13 0A ; Subtract with carry (long,X) $0A13CC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $040CFF.l,X		; FF FF 0C 04 ; Subtract with carry (long,X) $040CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	tsb $880C.w		; 0C 0C 88 ; Test and set bits $880C.w [Reads: Accumulator] [Flags: Z]
	sbc $0860FF.l,X		; FF FF 60 08 ; Subtract with carry (long,X) $0860FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpy $880B.w		; CC 0B 88 ; Compare $880B.w with Y register [Reads: Y Index] [Flags: ZNC]
	stz $0A11.w		; 9C 11 0A ; Store zero to $0A11.w
	ldy #$11.b		; A0 11 ; Load #$11.b into Y register [Writes: Y Index] [Flags: ZN]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0A03CA.l,X		; FF CA 03 0A ; Subtract with carry (long,X) $0A03CA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tsb $FF0A.w		; 0C 0A FF ; Test and set bits $FF0A.w [Reads: Accumulator] [Flags: Z]
	sbc $0B0F90.l,X		; FF 90 0F 0B ; Subtract with carry (long,X) $0B0F90.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy #$13.b		; A0 13 ; Load #$13.b into Y register [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0460FF.l,X		; FF FF 60 04 ; Subtract with carry (long,X) $0460FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $04.b		; 64 04 ; Store zero to $04.b
	tsb $0468.w		; 0C 68 04 ; Test and set bits $0468.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($0C04.w)		; 6C 04 0C ; Jump indirect to ($0C04.w) [Flow: jump]
	.db $70, $04		; 70 04 ; Branch if overflow set to $70, $04 [Flow: branch]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	ora #$14.b		; 09 14 ; Logical OR #$14.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	lsr $0B.b		; 46 0B ; Logical shift right $0B.b [Reads: Direct Page] [Flags: ZNC]
	ora $FFFF.w		; 0D FF FF ; Logical OR $FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0B03.w,X		; BC 03 0B ; Load Y register $0B03.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $0C04.w,X		; BC 04 0C ; Load Y register $0C04.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $05BC.w		; 0C BC 05 ; Test and set bits $05BC.w [Reads: Accumulator] [Flags: Z]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $0A06.w,X		; BC 06 0A ; Load Y register $0A06.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$06.b		; C0 06 ; Compare #$06.b with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0D64FF.l,X		; [PATTERN: Memory clearing operation] FF FF 64 0D ; Subtract with carry (long,X) $0D64FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	phd		; [PATTERN: Memory clearing operation] 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $10.b		; 64 10 ; Store zero to $10.b
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $11.b		; 64 11 ; Store zero to $11.b
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $12.b		; 64 12 ; Store zero to $12.b
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $680B.w		; 0D 0B 68 ; Logical OR $680B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $680B.w		; 0E 0B 68 ; Arithmetic shift left $680B.w [Flags: ZNC]
	ora $10680B.l		; 0F 0B 68 10 ; OR accumulator with memory (long) $10680B.l [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($0B.b),Y		; 11 0B ; OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $051CFF.l,X		; FF FF 1C 05 ; Subtract with carry (long,X) $051CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr $0A05.w		; 20 05 0A ; Jump to subroutine at $0A05.w [Writes: Stack Pointer] [Flow: call]
	trb $0A1B.w		; 1C 1B 0A ; Test and reset bits $0A1B.w [Reads: Accumulator] [Flags: Z]
	jsr $0A1B.w		; 20 1B 0A ; Jump to subroutine at $0A1B.w [Writes: Stack Pointer] [Flow: call]
	sbc $1714FF.l,X		; FF FF 14 17 ; Subtract with carry (long,X) $1714FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$09.b],Y		; 17 09 ; OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0954FF.l,X		; FF FF 54 09 ; Subtract with carry (long,X) $0954FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $191CFF.l,X		; FF FF 1C 19 ; Subtract with carry (long,X) $191CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $18A8FF.l,X		; FF FF A8 18 ; Subtract with carry (long,X) $18A8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1C30.w		; 0C 30 1C ; Test and set bits $1C30.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($1C.b)		; 52 1C ; Exclusive OR accumulator with memory (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	lsr $1A.b,X		; 56 1A ; Logical shift right $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($5A.b,X)		; 01 5A ; Logical OR ($5A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $011A.w,X		; 5E 1A 01 ; Logical shift right $011A.w,X [Reads: X Index] [Flags: ZNC]
	.db $62, $1A, $0A		; 62 1A 0A ; Push effective relative address $62, $1A, $0A [Writes: Stack Pointer]
	ror $1A.b		; 66 1A ; Rotate right $1A.b [Reads: Direct Page] [Flags: ZNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $07040C.l,X		; FF 0C 04 07 ; Subtract with carry (long,X) $07040C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0A041C.l,X		; FF 1C 04 0A ; Subtract with carry (long,X) $0A041C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0C08.w		; 0C 08 0C ; Test and set bits $0C08.w [Reads: Accumulator] [Flags: Z]
	stx $13.b,Y		; 96 13 ; Store X register $13.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $1A.b,X		; 16 1A ; Arithmetic shift left $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$DC.b]		; 07 DC ; OR accumulator with memory (long) [$DC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0A14A6.l,X		; FF A6 14 0A ; Subtract with carry (long,X) $0A14A6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $15.b,X		; D6 15 ; Decrement memory $15.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	trb $2C01.w		; 1C 01 2C ; Test and reset bits $2C01.w [Reads: Accumulator] [Flags: Z]
	trb $5001.w		; 1C 01 50 ; Test and reset bits $5001.w [Reads: Accumulator] [Flags: Z]
	trb $5407.w		; 1C 07 54 ; Test and reset bits $5407.w [Reads: Accumulator] [Flags: Z]
	trb $FF07.w		; 1C 07 FF ; Test and reset bits $FF07.w [Reads: Accumulator] [Flags: Z]
	sbc $010C50.l,X		; FF 50 0C 01 ; Subtract with carry (long,X) $010C50.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $13		; 50 13 ; Branch if overflow clear to $50, $13 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0510FF.l,X		; FF FF 10 05 ; Subtract with carry (long,X) $0510FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $8805.w		; 2C 05 88 ; Test bits $8805.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $0A06.w		; 2C 06 0A ; Test bits $0A06.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $0A07.w		; 2C 07 0A ; Test bits $0A07.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sta ($15.b)		; 92 15 ; Store accumulator (indirect) ($15.b) [Reads: Accumulator, Direct Page]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $09.b,X		; 15 09 ; OR accumulator with memory $09.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($16.b)		; 92 16 ; Store accumulator (indirect) ($16.b) [Reads: Accumulator, Direct Page]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $09.b,X		; 16 09 ; Arithmetic shift left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $186CFF.l,X		; FF FF 6C 18 ; Subtract with carry (long,X) $186CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $18		; 70 18 ; Branch if overflow set to $70, $18 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $071CFF.l,X		; FF FF 1C 07 ; Subtract with carry (long,X) $071CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $0B07.w		; 20 07 0B ; Jump to subroutine at $0B07.w [Writes: Stack Pointer] [Flow: call]
	trb $0709.w		; 1C 09 07 ; Test and reset bits $0709.w [Reads: Accumulator] [Flags: Z]
	jsr $0709.w		; 20 09 07 ; Jump to subroutine at $0709.w [Writes: Stack Pointer] [Flow: call]
	ldy $0713.w		; AC 13 07 ; Load $0713.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $13.b,X		; B4 13 ; Load Y register $13.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora [$68.b]		; 07 68 ; OR accumulator with memory (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	trb $FF0B.w		; 1C 0B FF ; Test and reset bits $FF0B.w [Reads: Accumulator] [Flags: Z]
	sbc $0A1C5C.l,X		; FF 5C 1C 0A ; Subtract with carry (long,X) $0A1C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0D1CFF.l,X		; FF FF 1C 0D ; Subtract with carry (long,X) $0D1CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	lsr $0708.w		; 4E 08 07 ; Logical shift right $0708.w [Flags: ZNC]
	jmp $FF0708.l		; 5C 08 07 FF ; Jump long to $FF0708.l [Flow: jump]
	sbc $08063C.l,X		; FF 3C 06 08 ; Subtract with carry (long,X) $08063C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$30.b]		; 07 30 ; OR accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	.db $70, $17		; 70 17 ; Branch if overflow set to $70, $17 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp $0B1C.w		; 4C 1C 0B ; Jump to $0B1C.w [Flow: jump]
	sbc $046CFF.l,X		; FF FF 6C 04 ; Subtract with carry (long,X) $046CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $70, $04		; 70 04 ; Branch if overflow set to $70, $04 [Flow: branch]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	adc ($10.b)		; 72 10 ; Add with carry (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $063CFF.l,X		; FF FF 3C 06 ; Subtract with carry (long,X) $063CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0CA4FF.l,X		; FF FF A4 0C ; Subtract with carry (long,X) $0CA4FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora [$A4.b]		; 07 A4 ; OR accumulator with memory (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0A.b)		; 12 0A ; OR accumulator with memory (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $13.b		; A4 13 ; Load $13.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $140CFF.l,X		; FF FF 0C 14 ; Subtract with carry (long,X) $140CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $16.b		; 64 16 ; Store zero to $16.b
	tsb $1A64.w		; 0C 64 1A ; Test and set bits $1A64.w [Reads: Accumulator] [Flags: Z]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $FF09.w		; 1C 09 FF ; Test and reset bits $FF09.w [Reads: Accumulator] [Flags: Z]
	sbc $0C0818.l,X		; FF 18 08 0C ; Subtract with carry (long,X) $0C0818.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tsb $1407.w		; 0C 07 14 ; Test and set bits $1407.w [Reads: Accumulator] [Flags: Z]
	asl $4401.w		; 0E 01 44 ; Arithmetic shift left $4401.w [Flags: ZNC]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($0B.b,S),Y		; 13 0B ; OR accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0A0C4C.l,X		; FF 4C 0C 0A ; Subtract with carry (long,X) $0A0C4C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $0C		; 70 0C ; Branch if overflow set to $70, $0C [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $0B.b,X		; 16 0B ; Arithmetic shift left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl $09.b,X		; 16 09 ; Arithmetic shift left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr $0B18.w		; 20 18 0B ; Jump to subroutine at $0B18.w [Writes: Stack Pointer] [Flow: call]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $FFFF.w		; 0D FF FF ; Logical OR $FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZNC]
	stz $06.b		; 64 06 ; Store zero to $06.b
	tsb $0A58.w		; 0C 58 0A ; Test and set bits $0A58.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp $FF0C0A.l		; 5C 0A 0C FF ; Jump long to $FF0C0A.l [Flow: jump]
	sbc $01190C.l,X		; FF 0C 19 01 ; Subtract with carry (long,X) $01190C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $881B.w		; 0C 1B 88 ; Test and set bits $881B.w [Reads: Accumulator] [Flags: Z]
	trb $1B.b		; 14 1B ; Test and reset bits $1B.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $0817.w		; 1C 17 08 ; Test and reset bits $0817.w [Reads: Accumulator] [Flags: Z]
	sbc $0A64FF.l,X		; FF FF 64 0A ; Subtract with carry (long,X) $0A64FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	sty $16.b,X		; 94 16 ; Store Y register $16.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	.db $42, $04		; 42 04 ; Reserved instruction
	ora #$4E.b		; 09 4E ; Logical OR #$4E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	.db $42, $09		; 42 09 ; Reserved instruction
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $0B09.w		; 4E 09 0B ; Logical shift right $0B09.w [Flags: ZNC]
	.db $70, $14		; 70 14 ; Branch if overflow set to $70, $14 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $040CFF.l,X		; FF FF 0C 04 ; Subtract with carry (long,X) $040CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$6C.b		; 09 6C ; Logical OR #$6C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	ora #$DC.b		; 09 DC ; Logical OR #$DC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	cpx $0B10.w		; EC 10 0B ; Compare $0B10.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $0560FF.l,X		; FF FF 60 05 ; Subtract with carry (long,X) $0560FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $0B1B.w		; 1C 1B 0B ; Test and reset bits $0B1B.w [Reads: Accumulator] [Flags: Z]
	sbc $0F68FF.l,X		; FF FF 68 0F ; Subtract with carry (long,X) $0F68FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1068.w		; 0C 68 10 ; Test and set bits $1068.w [Reads: Accumulator] [Flags: Z]
	tsb $1390.w		; 0C 90 13 ; Test and set bits $1390.w [Reads: Accumulator] [Flags: Z]
	tsb $14AC.w		; 0C AC 14 ; Test and set bits $14AC.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $90, $1B		; 90 1B ; Branch if carry clear to $90, $1B [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $0C1C.w		; AC 1C 0C ; Load $0C1C.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $050EFF.l,X		; FF FF 0E 05 ; Subtract with carry (long,X) $050EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $0A05.w		; 20 05 0A ; Jump to subroutine at $0A05.w [Writes: Stack Pointer] [Flow: call]
	jmp $6E0A05.l		; 5C 05 0A 6E ; Jump long to $6E0A05.l [Flow: jump]
	ora $88.b		; 05 88 ; Logical OR $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	mvp $0A,$08		; 44 08 0A ; Move block positive $0A,$08 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $0B0B.w		; 0E 0B 0B ; Arithmetic shift left $0B0B.w [Flags: ZNC]
	jsr $010B.w		; 20 0B 01 ; Jump to subroutine at $010B.w [Writes: Stack Pointer] [Flow: call]
	jmp $6E010B.l		; 5C 0B 01 6E ; Jump long to $6E010B.l [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0614FF.l,X		; FF FF 14 06 ; Subtract with carry (long,X) $0614FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0B8CFF.l,X		; FF FF 8C 0B ; Subtract with carry (long,X) $0B8CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	trb $0B0C.w		; 1C 0C 0B ; Test and reset bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	.db $70, $0C		; 70 0C ; Branch if overflow set to $70, $0C [Flow: branch]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $0B.b		; 26 0B ; Rotate left $0B.b [Reads: Direct Page] [Flags: ZNC]
	stz $26.b		; 64 26 ; Store zero to $26.b
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $038AFF.l,X		; FF FF 8A 03 ; Subtract with carry (long,X) $038AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
.INDEX 16
	rep #$1A		; C2 1A
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0B5CFF.l,X		; FF FF 5C 0B ; Subtract with carry (long,X) $0B5CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B64.w		; 0C 64 0B ; Test and set bits $0B64.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $19BAFF.l,X		; FF FF BA 19 ; Subtract with carry (long,X) $19BAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$BA.b]		; 07 BA ; OR accumulator with memory (long) [$BA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	trb $FF0B.w		; 1C 0B FF ; Test and reset bits $FF0B.w [Reads: Accumulator] [Flags: Z]
	sbc $0C18E6.l,X		; FF E6 18 0C ; Subtract with carry (long,X) $0C18E6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $19.b		; E6 19 ; Increment $19.b [Reads: Direct Page] [Flags: ZN]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	tsb $0628.w		; 0C 28 06 ; Test and set bits $0628.w [Reads: Accumulator] [Flags: Z]
	tsb $0718.w		; 0C 18 07 ; Test and set bits $0718.w [Reads: Accumulator] [Flags: Z]
	tsb $0724.w		; 0C 24 07 ; Test and set bits $0724.w [Reads: Accumulator] [Flags: Z]
	tsb $080C.w		; 0C 0C 08 ; Test and set bits $080C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $0A14.w		; 0C 14 0A ; Test and set bits $0A14.w [Reads: Accumulator] [Flags: Z]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	sbc $075CFF.l,X		; FF FF 5C 07 ; Subtract with carry (long,X) $075CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $140C.w		; 0D 0C 14 ; Logical OR $140C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $175C.w		; 0C 5C 17 ; Test and set bits $175C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $17.b		; 64 17 ; Store zero to $17.b
	tsb $1954.w		; 0C 54 19 ; Test and set bits $1954.w [Reads: Accumulator] [Flags: Z]
	ora [$4C.b]		; 07 4C ; OR accumulator with memory (long) [$4C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	tsb $161E.w		; 0C 1E 16 ; Test and set bits $161E.w [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $0560FF.l,X		; FF FF 60 05 ; Subtract with carry (long,X) $0560FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $05.b		; 64 05 ; Store zero to $05.b
	tsb $070C.w		; 0C 0C 07 ; Test and set bits $070C.w [Reads: Accumulator] [Flags: Z]
	tsb $075C.w		; 0C 5C 07 ; Test and set bits $075C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($0B07.w)		; 6C 07 0B ; Jump indirect to ($0B07.w) [Flow: jump]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $0964.w		; 0C 64 09 ; Test and set bits $0964.w [Reads: Accumulator] [Flags: Z]
	tsb $0968.w		; 0C 68 09 ; Test and set bits $0968.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $2B1AFF.l,X		; FF FF 1A 2B ; Subtract with carry (long,X) $2B1AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $25DEFF.l,X		; FF FF DE 25 ; Subtract with carry (long,X) $25DEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $165EFF.l,X		; FF FF 5E 16 ; Subtract with carry (long,X) $165EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $0D1A.w,X		; 5E 1A 0D ; Logical shift right $0D1A.w,X [Reads: X Index] [Flags: ZNC]
	sbc $0510FF.l,X		; FF FF 10 05 ; Subtract with carry (long,X) $0510FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $0705.w		; 2C 05 07 ; Test bits $0705.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $09.b		; 14 09 ; Test and reset bits $09.b [Reads: Accumulator] [Flags: Z]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C1C.w		; 0C 1C 0C ; Test and set bits $0C1C.w [Reads: Accumulator] [Flags: Z]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $045CFF.l,X		; FF FF 5C 04 ; Subtract with carry (long,X) $045CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0460.w		; 0C 60 04 ; Test and set bits $0460.w [Reads: Accumulator] [Flags: Z]
	tsb $084C.w		; 0C 4C 08 ; Test and set bits $084C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $1B2CFF.l,X		; FF FF 2C 1B ; Subtract with carry (long,X) $1B2CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $044CFF.l,X		; FF FF 4C 04 ; Subtract with carry (long,X) $044CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $04		; 70 04 ; Branch if overflow set to $70, $04 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $15D0FF.l,X		; FF FF D0 15 ; Subtract with carry (long,X) $15D0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0830FF.l,X		; FF FF 30 08 ; Subtract with carry (long,X) $0830FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $080C.w		; 0C 0C 08 ; Test and set bits $080C.w [Reads: Accumulator] [Flags: Z]
	sbc $160CFF.l,X		; FF FF 0C 16 ; Subtract with carry (long,X) $160CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $1C.b		; 24 1C ; Test bits $1C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	trb $2C0C.w		; 1C 0C 2C ; Test and reset bits $2C0C.w [Reads: Accumulator] [Flags: Z]
	trb $300C.w		; 1C 0C 30 ; Test and reset bits $300C.w [Reads: Accumulator] [Flags: Z]
	trb $FF88.w		; 1C 88 FF ; Test and reset bits $FF88.w [Reads: Accumulator] [Flags: Z]
	sbc $0A1C64.l,X		; FF 64 1C 0A ; Subtract with carry (long,X) $0A1C64.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	trb $FF0A.w		; 1C 0A FF ; Test and reset bits $FF0A.w [Reads: Accumulator] [Flags: Z]
	sbc $092530.l,X		; FF 30 25 09 ; Subtract with carry (long,X) $092530.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $25.b,X		; 34 25 ; Test bits $25.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	and $07.b		; 25 07 ; Logical AND $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $0B,$05		; 54 05 0B ; Move block negative $0B,$05 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	ora #$34.b		; 09 34 ; Logical OR #$34.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $0A.b		; 26 0A ; Rotate left $0A.b [Reads: Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	rol $07.b		; 26 07 ; Rotate left $07.b [Reads: Direct Page] [Flags: ZNC]
	mvn $0B,$06		; 54 06 0B ; Move block negative $0B,$06 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZNC]
	sbc $070CFF.l,X		; FF FF 0C 07 ; Subtract with carry (long,X) $070CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($0B.b,S),Y		; 13 0B ; OR accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $1A12.w		; 0C 12 1A ; Test and set bits $1A12.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	trb $FF0B.w		; 1C 0B FF ; Test and reset bits $FF0B.w [Reads: Accumulator] [Flags: Z]
	sbc $0B0740.l,X		; FF 40 07 0B ; Subtract with carry (long,X) $0B0740.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $1940.w		; 0C 40 19 ; Test and set bits $1940.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $051CFF.l,X		; FF FF 1C 05 ; Subtract with carry (long,X) $051CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $0C08.w		; 2C 08 0C ; Test bits $0C08.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $0C0B.w		; 1C 0B 0C ; Test and reset bits $0C0B.w [Reads: Accumulator] [Flags: Z]
	.db $62, $19, $09		; 62 19 09 ; Push effective relative address $62, $19, $09 [Writes: Stack Pointer]
	sbc $0614FF.l,X		; FF FF 14 06 ; Subtract with carry (long,X) $0614FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	trb $0B1A.w		; 1C 1A 0B ; Test and reset bits $0B1A.w [Reads: Accumulator] [Flags: Z]
	jsr $0B1A.w		; 20 1A 0B ; Jump to subroutine at $0B1A.w [Writes: Stack Pointer] [Flow: call]
	trb $0C1B.w		; 1C 1B 0C ; Test and reset bits $0C1B.w [Reads: Accumulator] [Flags: Z]
	jsr $0C1B.w		; 20 1B 0C ; Jump to subroutine at $0C1B.w [Writes: Stack Pointer] [Flow: call]
	sbc $159AFF.l,X		; FF FF 9A 15 ; Subtract with carry (long,X) $159AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$9E.b		; 09 9E ; Logical OR #$9E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $01.b,X		; 15 01 ; OR accumulator with memory $01.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $17.b		; 14 17 ; Test and reset bits $17.b [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $17.b		; 24 17 ; Test bits $17.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$90.b]		; 07 90 ; OR accumulator with memory (long) [$90.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora #$14.b		; 09 14 ; Logical OR #$14.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $1A24.w		; 0C 24 1A ; Test and set bits $1A24.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($9E.b,X)		; 01 9E ; Logical OR ($9E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0C051E.l,X		; FF 1E 05 0C ; Subtract with carry (long,X) $0C051E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $8805.w,X		; 3E 05 88 ; Rotate left $8805.w,X [Reads: X Index] [Flags: ZNC]
	lsr $0C05.w,X		; 5E 05 0C ; Logical shift right $0C05.w,X [Reads: X Index] [Flags: ZNC]
	asl $0B0B.w		; 0E 0B 0B ; Arithmetic shift left $0B0B.w [Flags: ZNC]
	rol $090B.w		; 2E 0B 09 ; Rotate left $090B.w [Flags: ZNC]
	lsr $090B.w		; 4E 0B 09 ; Logical shift right $090B.w [Flags: ZNC]
	ror $0B0B.w		; 6E 0B 0B ; Rotate right $0B0B.w [Flags: ZNC]
	sbc $1694FF.l,X		; FF FF 94 16 ; Subtract with carry (long,X) $1694FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $16A0.w		; 0C A0 16 ; Test and set bits $16A0.w [Reads: Accumulator] [Flags: Z]
	ora #$AC.b		; 09 AC ; Logical OR #$AC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $0B.b,X		; 16 0B ; Arithmetic shift left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $0C70FF.l,X		; FF FF 70 0C ; Subtract with carry (long,X) $0C70FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvn $0B,$17		; 54 17 0B ; Move block negative $0B,$17 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $043CFF.l,X		; FF FF 3C 04 ; Subtract with carry (long,X) $043CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	sbc $041CFF.l,X		; FF FF 1C 04 ; Subtract with carry (long,X) $041CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $0B04.w		; 20 04 0B ; Jump to subroutine at $0B04.w [Writes: Stack Pointer] [Flow: call]
	sbc $0670FF.l,X		; FF FF 70 06 ; Subtract with carry (long,X) $0670FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($0914.w)		; 6C 14 09 ; Jump indirect to ($0914.w) [Flow: jump]
	adc ($14.b)		; 72 14 ; Add with carry (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp $0A1C.w		; 4C 1C 0A ; Jump to $0A1C.w [Flow: jump]
	sbc $0F56FF.l,X		; FF FF 56 0F ; Subtract with carry (long,X) $0F56FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($1A.b)		; 52 1A ; Exclusive OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $1A64.w		; 0C 64 1A ; Test and set bits $1A64.w [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $0430FF.l,X		; FF FF 30 04 ; Subtract with carry (long,X) $0430FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $04.b,X		; 34 04 ; Test bits $04.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	sbc $324CFF.l,X		; FF FF 4C 32 ; Subtract with carry (long,X) $324CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $044CFF.l,X		; FF FF 4C 04 ; Subtract with carry (long,X) $044CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$50.b		; 09 50 ; Logical OR #$50.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	jmp $071C.w		; 4C 1C 07 ; Jump to $071C.w [Flow: jump]
	.db $50, $1C		; 50 1C ; Branch if overflow clear to $50, $1C [Flow: branch]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $090718.l,X		; FF 18 07 09 ; Subtract with carry (long,X) $090718.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $07.b		; 64 07 ; Store zero to $07.b
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0B1C2C.l,X		; FF 2C 1C 0B ; Subtract with carry (long,X) $0B1C2C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0C144C.l,X		; FF 4C 14 0C ; Subtract with carry (long,X) $0C144C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $14		; 70 14 ; Branch if overflow set to $70, $14 [Flow: branch]
	ora $FFFF.w		; 0D FF FF ; Logical OR $FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $70, $0C		; 70 0C ; Branch if overflow set to $70, $0C [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $0C09.w		; 20 09 0C ; Jump to subroutine at $0C09.w [Writes: Stack Pointer] [Flow: call]
	jmp $0B1C.w		; 4C 1C 0B ; Jump to $0B1C.w [Flow: jump]
	sbc $0C4CFF.l,X		; FF FF 4C 0C ; Subtract with carry (long,X) $0C4CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $70, $0C		; 70 0C ; Branch if overflow set to $70, $0C [Flow: branch]
	tsb $144C.w		; 0C 4C 14 ; Test and set bits $144C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp $640A14.l		; 5C 14 0A 64 ; Jump long to $640A14.l [Flow: jump]
	ora $09.b,X		; 15 09 ; OR accumulator with memory $09.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $0ECCFF.l,X		; FF FF CC 0E ; Subtract with carry (long,X) $0ECCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $171C.w		; 0D 1C 17 ; Logical OR $171C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $17.b		; 24 17 ; Test bits $17.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $0D18.w		; 20 18 0D ; Jump to subroutine at $0D18.w [Writes: Stack Pointer] [Flow: call]
	sbc $0550FF.l,X		; FF FF 50 05 ; Subtract with carry (long,X) $0550FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0B0454.l,X		; FF 54 04 0B ; Subtract with carry (long,X) $0B0454.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	sbc $071CFF.l,X		; FF FF 1C 07 ; Subtract with carry (long,X) $071CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $1120FF.l,X		; FF FF 20 11 ; Subtract with carry (long,X) $1120FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1820.w		; 0C 20 18 ; Test and set bits $1820.w [Reads: Accumulator] [Flags: Z]
	tsb $154C.w		; 0C 4C 15 ; Test and set bits $154C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $15		; 70 15 ; Branch if overflow set to $70, $15 [Flow: branch]
	ora $FFFF.w		; 0D FF FF ; Logical OR $FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	mvn $0B,$14		; 54 14 0B ; Move block negative $0B,$14 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $0430FF.l,X		; FF FF 30 04 ; Subtract with carry (long,X) $0430FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0C30.w		; 0C 30 0C ; Test and set bits $0C30.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0838FF.l,X		; FF FF 38 08 ; Subtract with carry (long,X) $0838FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0938.w		; 0C 38 09 ; Test and set bits $0938.w [Reads: Accumulator] [Flags: Z]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0A044C.l,X		; FF 4C 04 0A ; Subtract with carry (long,X) $0A044C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvn $0C,$04		; 54 04 0C ; Move block negative $0C,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $138AFF.l,X		; FF FF 8A 13 ; Subtract with carry (long,X) $138AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($13.b)		; B2 13 ; Load accumulator (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora $88.b,X		; 15 88 ; OR accumulator with memory $88.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $08.b,X		; 15 08 ; OR accumulator with memory $08.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1B.b		; 14 1B ; Test and reset bits $1B.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($1C.b)		; B2 1C ; Load accumulator (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0696FF.l,X		; FF FF 96 06 ; Subtract with carry (long,X) $0696FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	tsb $0C68.w		; 0C 68 0C ; Test and set bits $0C68.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($0C0D.w)		; 6C 0D 0C ; Jump indirect to ($0C0D.w) [Flow: jump]
	.db $70, $0E		; 70 0E ; Branch if overflow set to $70, $0E [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1C0CFF.l,X		; FF FF 0C 1C ; Subtract with carry (long,X) $1C0CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FFFF.w		; 0D FF FF ; Logical OR $FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0B.b,S),Y		; 13 0B ; OR accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0118.w,X		; 1E 18 01 ; Arithmetic shift left $0118.w,X [Reads: X Index] [Flags: ZNC]
	sbc $2B90FF.l,X		; FF FF 90 2B ; Subtract with carry (long,X) $2B90FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$EC.b		; 09 EC ; Logical OR #$EC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$90.b		; 09 90 ; Logical OR #$90.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $EC09.w		; 2C 09 EC ; Test bits $EC09.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $100B.w		; 2C 0B 10 ; Test bits $100B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	jmp ($0B14.w)		; 6C 14 0B ; Jump indirect to ($0B14.w) [Flow: jump]
	sbc $05D4FF.l,X		; FF FF D4 05 ; Subtract with carry (long,X) $05D4FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $8808.w,X		; 5E 08 88 ; Logical shift right $8808.w,X [Reads: X Index] [Flags: ZNC]
	jmp ($0B37.w)		; 6C 37 0B ; Jump indirect to ($0B37.w) [Flow: jump]
	jmp ($0B38.w)		; 6C 38 0B ; Jump indirect to ($0B38.w) [Flow: jump]
	jmp ($0B39.w)		; 6C 39 0B ; Jump indirect to ($0B39.w) [Flow: jump]
	sbc $1814FF.l,X		; FF FF 14 18 ; Subtract with carry (long,X) $1814FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0C4CFF.l,X		; FF FF 4C 0C ; Subtract with carry (long,X) $0C4CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1514FF.l,X		; FF FF 14 15 ; Subtract with carry (long,X) $1514FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $0115.w		; 1C 15 01 ; Test and reset bits $0115.w [Reads: Accumulator] [Flags: Z]
	jsr $0715.w		; 20 15 07 ; Jump to subroutine at $0715.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora $09.b,X		; 15 09 ; OR accumulator with memory $09.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	ora [$2C.b]		; 07 2C ; OR accumulator with memory (long) [$2C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b],Y		; 17 01 ; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $091B.w		; 1C 1B 09 ; Test and reset bits $091B.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $044CFF.l,X		; FF FF 4C 04 ; Subtract with carry (long,X) $044CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $04		; 70 04 ; Branch if overflow set to $70, $04 [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $012830.l,X		; FF 30 28 01 ; Subtract with carry (long,X) $012830.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $0128.w		; 4C 28 01 ; Jump to $0128.w [Flow: jump]
	jmp $0B29.w		; 4C 29 0B ; Jump to $0B29.w [Flow: jump]
	sbc $140CFF.l,X		; FF FF 0C 14 ; Subtract with carry (long,X) $140CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	tsb $1C30.w		; 0C 30 1C ; Test and set bits $1C30.w [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1C2CFF.l,X		; FF FF 2C 1C ; Subtract with carry (long,X) $1C2CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1C30.w		; 0D 30 1C ; Logical OR $1C30.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0470FF.l,X		; FF FF 70 04 ; Subtract with carry (long,X) $0470FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$70.b]		; 07 70 ; OR accumulator with memory (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $104C0B.l		; 0F 0B 4C 10 ; OR accumulator with memory (long) $104C0B.l [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $70, $10		; 70 10 ; Branch if overflow set to $70, $10 [Flow: branch]
	ora $1170.w		; 0D 70 11 ; Logical OR $1170.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $1C		; 70 1C ; Branch if overflow set to $70, $1C [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $095EFF.l,X		; FF FF 5E 09 ; Subtract with carry (long,X) $095EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FFFF.w		; 0D FF FF ; Logical OR $FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $0C05.w,X		; 1E 05 0C ; Arithmetic shift left $0C05.w,X [Reads: X Index] [Flags: ZNC]
	sbc $0D60FF.l,X		; FF FF 60 0D ; Subtract with carry (long,X) $0D60FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	sbc $125CFF.l,X		; FF FF 5C 12 ; Subtract with carry (long,X) $125CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($0112.w)		; 6C 12 01 ; Jump indirect to ($0112.w) [Flow: jump]
	sbc $045EFF.l,X		; FF FF 5E 04 ; Subtract with carry (long,X) $045EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	.db $70, $06		; 70 06 ; Branch if overflow set to $70, $06 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $0B0A.w		; 4C 0A 0B ; Jump to $0B0A.w [Flow: jump]
	.db $70, $0A		; 70 0A ; Branch if overflow set to $70, $0A [Flow: branch]
	tsb $0C5E.w		; 0C 5E 0C ; Test and set bits $0C5E.w [Reads: Accumulator] [Flags: Z]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0A038A.l,X		; FF 8A 03 0A ; Subtract with carry (long,X) $0A038A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($03.b)		; B2 03 ; Load accumulator (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lsr $04.b,X		; 56 04 ; Logical shift right $04.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $04.b		; 66 04 ; Rotate right $04.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B20B.w		; 0C 0B B2 ; Test and set bits $B20B.w [Reads: Accumulator] [Flags: Z]
	tsb $300A.w		; 0C 0A 30 ; Test and set bits $300A.w [Reads: Accumulator] [Flags: Z]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	trb $0715.w		; 1C 15 07 ; Test and reset bits $0715.w [Reads: Accumulator] [Flags: Z]
	jsr $0715.w		; 20 15 07 ; Jump to subroutine at $0715.w [Writes: Stack Pointer] [Flow: call]
	trb $071B.w		; 1C 1B 07 ; Test and reset bits $071B.w [Reads: Accumulator] [Flags: Z]
	jsr $071B.w		; 20 1B 07 ; Jump to subroutine at $071B.w [Writes: Stack Pointer] [Flow: call]
	tsb $0A1C.w		; 0C 1C 0A ; Test and set bits $0A1C.w [Reads: Accumulator] [Flags: Z]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $195CFF.l,X		; FF FF 5C 19 ; Subtract with carry (long,X) $195CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1428FF.l,X		; FF FF 28 14 ; Subtract with carry (long,X) $1428FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$2C.b		; 09 2C ; Logical OR #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	trb $2C0C.w		; 1C 0C 2C ; Test and reset bits $2C0C.w [Reads: Accumulator] [Flags: Z]
	trb $300C.w		; 1C 0C 30 ; Test and reset bits $300C.w [Reads: Accumulator] [Flags: Z]
	trb $FF0C.w		; 1C 0C FF ; Test and reset bits $FF0C.w [Reads: Accumulator] [Flags: Z]
	sbc $0A0A30.l,X		; FF 30 0A 0A ; Subtract with carry (long,X) $0A0A30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $070E.w		; 0C 0E 07 ; Test and set bits $070E.w [Reads: Accumulator] [Flags: Z]
	tsb $0B1A.w		; 0C 1A 0B ; Test and set bits $0B1A.w [Reads: Accumulator] [Flags: Z]
	trb $011B.w		; 1C 1B 01 ; Test and reset bits $011B.w [Reads: Accumulator] [Flags: Z]
	sbc $07B4FF.l,X		; FF FF B4 07 ; Subtract with carry (long,X) $07B4FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	tsb $3044.w		; 0C 44 30 ; Test and set bits $3044.w [Reads: Accumulator] [Flags: Z]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $09.b,X		; 34 09 ; Test bits $09.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $0954FF.l,X		; FF FF 54 09 ; Subtract with carry (long,X) $0954FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $380B.w		; 0E 0B 38 ; Arithmetic shift left $380B.w [Flags: ZNC]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $0A,$11		; 54 11 0A ; Move block negative $0A,$11 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $0915.w		; 0C 15 09 ; Test and set bits $0915.w [Reads: Accumulator] [Flags: Z]
	jmp $0117.w		; 4C 17 01 ; Jump to $0117.w [Flow: jump]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	tsb $1A0C.w		; 0C 0C 1A ; Test and set bits $1A0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $070CFF.l,X		; FF FF 0C 07 ; Subtract with carry (long,X) $070CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $190C.w		; 0D 0C 19 ; Logical OR $190C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0A0CFF.l,X		; FF FF 0C 0A ; Subtract with carry (long,X) $0A0CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0D0B.w		; 0C 0B 0D ; Test and set bits $0D0B.w [Reads: Accumulator] [Flags: Z]
	tsb $0C16.w		; 0C 16 0C ; Test and set bits $0C16.w [Reads: Accumulator] [Flags: Z]
	tsb $091C.w		; 0C 1C 09 ; Test and set bits $091C.w [Reads: Accumulator] [Flags: Z]
	sbc $161EFF.l,X		; FF FF 1E 16 ; Subtract with carry (long,X) $161EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($5E.b,X)		; 01 5E ; Logical OR ($5E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b,X		; 16 01 ; Arithmetic shift left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $8816.w,X		; 3C 16 88 ; Test bits $8816.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $1058FF.l,X		; FF FF 58 10 ; Subtract with carry (long,X) $1058FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	trb $FF07.w		; 1C 07 FF ; Test and reset bits $FF07.w [Reads: Accumulator] [Flags: Z]
	sbc $070424.l,X		; FF 24 04 07 ; Subtract with carry (long,X) $070424.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $04		; 70 04 ; Branch if overflow set to $70, $04 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $1C.b		; 24 1C ; Test bits $1C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$70.b]		; 07 70 ; OR accumulator with memory (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $FF0A.w		; 1C 0A FF ; Test and reset bits $FF0A.w [Reads: Accumulator] [Flags: Z]
	sbc $0C084C.l,X		; FF 4C 08 0C ; Subtract with carry (long,X) $0C084C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	tsb $0C6C.w		; 0C 6C 0C ; Test and set bits $0C6C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $70, $0C		; 70 0C ; Branch if overflow set to $70, $0C [Flow: branch]
	ora #$CC.b		; 09 CC ; Logical OR #$CC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sbc $0C059E.l,X		; FF 9E 05 0C ; Subtract with carry (long,X) $0C059E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $010B.w		; 8C 0B 01 ; Store Y register to $010B.w [Reads: Y Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $300C.w		; 0D 0C 30 ; Logical OR $300C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	ora ($92.b,X)		; 01 92 ; Logical OR ($92.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$07.b],Y		; 17 07 ; OR accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0B1C.w		; 0C 1C 0B ; Test and set bits $0B1C.w [Reads: Accumulator] [Flags: Z]
	sbc $0430FF.l,X		; FF FF 30 04 ; Subtract with carry (long,X) $0430FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $044C.w		; 0D 4C 04 ; Logical OR $044C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $0C		; 70 0C ; Branch if overflow set to $70, $0C [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0D165C.l,X		; FF 5C 16 0D ; Subtract with carry (long,X) $0D165C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $0A.b,X		; 16 0A ; Arithmetic shift left $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $08CAFF.l,X		; FF FF CA 08 ; Subtract with carry (long,X) $08CAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc ($08.b)		; F2 08 ; Subtract with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora #$CA.b		; 09 CA ; Logical OR #$CA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$F2.b		; 09 F2 ; Logical OR #$F2.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$CA.b		; 09 CA ; Logical OR #$CA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $F209.w		; 0C 09 F2 ; Test and set bits $F209.w [Reads: Accumulator] [Flags: Z]
	tsb $5C0B.w		; 0C 0B 5C ; Test and set bits $5C0B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $09145C.l,X		; FF 5C 14 09 ; Subtract with carry (long,X) $09145C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $FF0B1C.l		; 5C 1C 0B FF ; Jump long to $FF0B1C.l [Flow: jump]
	sbc $091718.l,X		; FF 18 17 09 ; Subtract with carry (long,X) $091718.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $17.b		; 24 17 ; Test bits $17.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora #$18.b		; 09 18 ; Logical OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $2488.w,Y		; 19 88 24 ; OR accumulator with memory $2488.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $FF0B.w,Y		; 19 0B FF ; OR accumulator with memory $FF0B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $070470.l,X		; FF 70 04 07 ; Subtract with carry (long,X) $070470.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	sbc $0438FF.l,X		; FF FF 38 04 ; Subtract with carry (long,X) $0438FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$70.b]		; 07 70 ; OR accumulator with memory (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	mvp $0B,$10		; 44 10 0B ; Move block positive $0B,$10 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $091C.w		; 0C 1C 09 ; Test and set bits $091C.w [Reads: Accumulator] [Flags: Z]
	sbc $0818FF.l,X		; FF FF 18 08 ; Subtract with carry (long,X) $0818FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $3964FF.l,X		; FF FF 64 39 ; Subtract with carry (long,X) $3964FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $070920.l,X		; FF 20 09 07 ; Subtract with carry (long,X) $070920.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $0A		; 70 0A ; Branch if overflow set to $70, $0A [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $010430.l,X		; FF 30 04 01 ; Subtract with carry (long,X) $010430.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $0104.w		; 4C 04 01 ; Jump to $0104.w [Flow: jump]
	.db $70, $10		; 70 10 ; Branch if overflow set to $70, $10 [Flow: branch]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0C6CFF.l,X		; FF FF 6C 0C ; Subtract with carry (long,X) $0C6CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$58.b		; 09 58 ; Logical OR #$58.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $010544.l,X		; FF 44 05 01 ; Subtract with carry (long,X) $010544.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0460FF.l,X		; FF FF 60 04 ; Subtract with carry (long,X) $0460FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $08CEFF.l,X		; FF FF CE 08 ; Subtract with carry (long,X) $08CEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$D2.b]		; 07 D2 ; OR accumulator with memory (long) [$D2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$58.b]		; 07 58 ; OR accumulator with memory (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $5C0C.w		; 0E 0C 5C ; Arithmetic shift left $5C0C.w [Flags: ZNC]
	asl $600B.w		; 0E 0B 60 ; Arithmetic shift left $600B.w [Flags: ZNC]
	asl $FF0C.w		; 0E 0C FF ; Arithmetic shift left $FF0C.w [Flags: ZNC]
	sbc $0B0540.l,X		; FF 40 05 0B ; Subtract with carry (long,X) $0B0540.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0DF2FF.l,X		; FF FF F2 0D ; Subtract with carry (long,X) $0DF2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FFFF.w		; 0D FF FF ; Logical OR $FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	stz $06.b		; 64 06 ; Store zero to $06.b
	ora [$54.b]		; 07 54 ; OR accumulator with memory (long) [$54.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b],Y		; 17 07 ; OR accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $07,$18		; 54 18 07 ; Move block negative $07,$18 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $085CFF.l,X		; FF FF 5C 08 ; Subtract with carry (long,X) $085CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $1C		; 70 1C ; Branch if overflow set to $70, $1C [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0B140C.l,X		; FF 0C 14 0B ; Subtract with carry (long,X) $0B140C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0E13.w		; E0 13 0E ; Compare #$0E13.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $13.b		; E4 13 ; Compare $13.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $1392FF.l,X		; FF FF 92 13 ; Subtract with carry (long,X) $1392FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stx $13.b,Y		; 96 13 ; Store X register $13.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $078CFF.l,X		; FF FF 8C 07 ; Subtract with carry (long,X) $078CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0C0C.w		; 0E 0C 0C ; Arithmetic shift left $0C0C.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $15CAFF.l,X		; FF FF CA 15 ; Subtract with carry (long,X) $15CAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl $0B.b,X		; 16 0B ; Arithmetic shift left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $141EFF.l,X		; FF FF 1E 14 ; Subtract with carry (long,X) $141EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $0B15.w		; 1C 15 0B ; Test and reset bits $0B15.w [Reads: Accumulator] [Flags: Z]
	jsr $0B15.w		; 20 15 0B ; Jump to subroutine at $0B15.w [Writes: Stack Pointer] [Flow: call]
	sbc $17D6FF.l,X		; FF FF D6 17 ; Subtract with carry (long,X) $17D6FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $0917.w,X		; DE 17 09 ; Decrement memory $0917.w,X [Reads: X Index] [Flags: ZN]
	inc $17.b		; E6 17 ; Increment $17.b [Reads: Direct Page] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $19.b,X		; D6 19 ; Decrement memory $19.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora ($E6.b,X)		; 01 E6 ; Logical OR ($E6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $D601.w,Y		; 19 01 D6 ; OR accumulator with memory $D601.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $1B.b		; E6 1B ; Increment $1B.b [Reads: Direct Page] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $13A6FF.l,X		; FF FF A6 13 ; Subtract with carry (long,X) $13A6FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FFFF.w		; 0E FF FF ; Arithmetic shift left $FFFF.w [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	asl $FF0B.w		; 0E 0B FF ; Arithmetic shift left $FF0B.w [Flags: ZNC]
	sbc $0B045C.l,X		; FF 5C 04 0B ; Subtract with carry (long,X) $0B045C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	jmp $600A05.l		; 5C 05 0A 60 ; Jump long to $600A05.l [Flow: jump]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $60090A.l		; 5C 0A 09 60 ; Jump long to $60090A.l [Flow: jump]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $038AFF.l,X		; FF FF 8A 03 ; Subtract with carry (long,X) $038AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stx $0B03.w		; 8E 03 0B ; Store X register to $0B03.w [Reads: X Index]
	ldx $03.b		; A6 03 ; Load $03.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	stx $0B04.w		; 8E 04 0B ; Store X register to $0B04.w [Reads: X Index]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	sbc $1C2CFF.l,X		; FF FF 2C 1C ; Subtract with carry (long,X) $1C2CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $500B.w		; 1C 0B 50 ; Test and reset bits $500B.w [Reads: Accumulator] [Flags: Z]
	trb $FF0B.w		; 1C 0B FF ; Test and reset bits $FF0B.w [Reads: Accumulator] [Flags: Z]
	sbc $0B0AD6.l,X		; FF D6 0A 0B ; Subtract with carry (long,X) $0B0AD6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sep #$0A		; E2 0A ; Set processor status bits #$0A [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $0A.b		; E6 0A ; Increment $0A.b [Reads: Direct Page] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $3618FF.l,X		; FF FF 18 36 ; Subtract with carry (long,X) $3618FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $0B36.w		; 20 36 0B ; Jump to subroutine at $0B36.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol $0B.b,X		; 36 0B ; Rotate left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp $600A16.l		; 5C 16 0A 60 ; Jump long to $600A16.l [Flow: jump]
	asl $0B.b,X		; 16 0B ; Arithmetic shift left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$0B.b],Y		; 37 0B ; AND accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $600A17.l		; 5C 17 0A 60 ; Jump long to $600A17.l [Flow: jump]
	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0B38.w		; 1C 38 0B ; Test and reset bits $0B38.w [Reads: Accumulator] [Flags: Z]
	jmp $600A18.l		; 5C 18 0A 60 ; Jump long to $600A18.l [Flow: jump]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp $600A19.l		; 5C 19 0A 60 ; Jump long to $600A19.l [Flow: jump]
	ora $FF0B.w,Y		; 19 0B FF ; OR accumulator with memory $FF0B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $07063C.l,X		; FF 3C 06 07 ; Subtract with carry (long,X) $07063C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	bit $0707.w,X		; 3C 07 07 ; Test bits $0707.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $0708.w,X		; 3C 08 07 ; Test bits $0708.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0B1CAE.l,X		; FF AE 1C 0B ; Subtract with carry (long,X) $0B1CAE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($1C.b)		; B2 1C ; Load accumulator (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $1414FF.l,X		; FF FF 14 14 ; Subtract with carry (long,X) $1414FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $07.b,X		; 16 07 ; Arithmetic shift left $07.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $071918.l,X		; FF 18 19 07 ; Subtract with carry (long,X) $071918.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $0719.w		; 1C 19 07 ; Test and reset bits $0719.w [Reads: Accumulator] [Flags: Z]
	jsr $0719.w		; 20 19 07 ; Jump to subroutine at $0719.w [Writes: Stack Pointer] [Flow: call]
	bit $19.b		; 24 19 ; Test bits $19.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$58.b]		; 07 58 ; OR accumulator with memory (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0B.b,X		; 16 0B ; Arithmetic shift left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $16.b		; 64 16 ; Store zero to $16.b
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	trb $640B.w		; 1C 0B 64 ; Test and reset bits $640B.w [Reads: Accumulator] [Flags: Z]
	trb $FF0B.w		; 1C 0B FF ; Test and reset bits $FF0B.w [Reads: Accumulator] [Flags: Z]
	sbc $AD0485.l,X		; FF 85 04 AD ; Subtract with carry (long,X) $AD0485.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $290B.w		; 9C 0B 29 ; Store zero to $290B.w
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0B9C.w		; 8D 9C 0B ; Store accumulator to $0B9C.w [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01DB69.l,X		; BF 69 DB 01 ; Load long $01DB69.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A2FF.w,X		; FD FF A2 ; Subtract with carry $A2FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C8C8FF.l,X		; FF FF C8 C8 ; Subtract with carry (long,X) $C8C8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $E841F0.l,X		; FF F0 41 E8 ; Subtract with carry (long,X) $E841F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $D004C5.l,X		; 7F C5 04 D0 ; Add long $D004C5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $C8C8.w		; EE C8 C8 ; Increment $C8C8.w [Flags: ZN]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($9B.b,X)		; 21 9B ; Logical AND ($9B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stz $00.b		; 64 00 ; Store zero to $00.b
	sec		; 38 ; Set carry flag [Flags: C]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $FB		; 10 FB ; Branch if plus to $10, $FB [Flow: branch]
	lda $7EF580.l,X		; BF 80 F5 7E ; Load long $7EF580.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $7EF580.l,X		; BF 80 F5 7E ; Load long $7EF580.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EF580.l,X		; 9F 80 F5 7E ; Store accumulator (long,X) $7EF580.l,X [Reads: Accumulator, X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0B9C.w		; 0C 9C 0B ; Test and set bits $0B9C.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$88.b		; C9 88 ; Compare #$88.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $A6.b,X		; 56 A6 ; Logical shift right $A6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $BF.b		; 06 BF ; Arithmetic shift left $BF.b [Reads: Direct Page] [Flags: ZNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000F29.l,X		; 7F 29 0F 00 ; Add long $000F29.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $042C.w		; 8D 2C 04 ; Store accumulator to $042C.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1BA9.w		; 20 A9 1B ; Jump to subroutine at $1BA9.w [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx #$05BA.w		; A2 BA 05 ; Load #$05BA.w into X register [Writes: X Index] [Flags: ZN]
	lda $009B52.l,X		; BF 52 9B 00 ; Load long $009B52.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0560.w,Y		; 99 60 05 ; Store accumulator to $0560.w,Y [Reads: Accumulator, Y Index]
	lda $009B54.l,X		; BF 54 9B 00 ; Load long $009B54.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0580.w,Y		; 99 80 05 ; Store accumulator to $0580.w,Y [Reads: Accumulator, Y Index]
	lda $009B56.l,X		; BF 56 9B 00 ; Load long $009B56.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05A0.w,Y		; 99 A0 05 ; Store accumulator to $05A0.w,Y [Reads: Accumulator, Y Index]
	lda $009B58.l,X		; BF 58 9B 00 ; Load long $009B58.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05C0.w,Y		; 99 C0 05 ; Store accumulator to $05C0.w,Y [Reads: Accumulator, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $042C.w		; AC 2C 04 ; Load $042C.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0D0B.w		; A9 0B 0D ; Load #$0D0B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0560.w,Y		; 99 60 05 ; Store accumulator to $0560.w,Y [Reads: Accumulator, Y Index]
	lda #$0D1B.w		; A9 1B 0D ; Load #$0D1B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0580.w,Y		; 99 80 05 ; Store accumulator to $0580.w,Y [Reads: Accumulator, Y Index]
	lda #$4D0B.w		; A9 0B 4D ; Load #$4D0B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05A0.w,Y		; 99 A0 05 ; Store accumulator to $05A0.w,Y [Reads: Accumulator, Y Index]
	lda #$4D1B.w		; A9 1B 4D ; Load #$4D1B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05C0.w,Y		; 99 C0 05 ; Store accumulator to $05C0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$DE00.w		; E0 00 DE ; Compare #$DE00.w with X register [Reads: X Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $98.b		; 05 98 ; Logical OR $98.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $3A.b		; 02 3A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $B20EAA.l,X		; 1F AA 0E B2 ; Logical OR long $B20EAA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0140.w		; 0E 40 01 ; Arithmetic shift left $0140.w [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$4800.w		; A9 00 48 ; Load #$4800.w into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $E7DF.w		; 20 DF E7 ; Jump to subroutine at $E7DF.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $E7DF.w		; 20 DF E7 ; Jump to subroutine at $E7DF.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($4A.b,X)		; 01 4A ; Logical OR ($4A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $01E795.l,X		; BF 95 E7 01 ; Load long $01E795.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $100C.w,X		; 9D 0C 10 ; Store accumulator to $100C.w,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1018.w,X		; 9D 18 10 ; Store accumulator to $1018.w,X [Reads: Accumulator, X Index]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $7EFE00.l,X		; BF 00 FE 7E ; Load long $7EFE00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9DE8.w,Y		; 99 E8 9D ; Store accumulator to $9DE8.w,Y [Reads: Accumulator, Y Index]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9DE8.w,Y		; 99 E8 9D ; Store accumulator to $9DE8.w,Y [Reads: Accumulator, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $E899.w		; 20 99 E8 ; Jump to subroutine at $E899.w [Writes: Stack Pointer] [Flow: call]
	sta $100E.w,X		; 9D 0E 10 ; Store accumulator to $100E.w,X [Reads: Accumulator, X Index]
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9DE8.w,Y		; 99 E8 9D ; Store accumulator to $9DE8.w,Y [Reads: Accumulator, Y Index]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($9D.b,X)		; 01 9D ; Logical OR ($9D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	sta $1010.w,X		; 9D 10 10 ; Store accumulator to $1010.w,X [Reads: Accumulator, X Index]
	sta $1016.w,X		; 9D 16 10 ; Store accumulator to $1016.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $101A9D.l,X		; FF 9D 1A 10 ; Subtract with carry (long,X) $101A9D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$18.b		; 69 18 ; Add #$18.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $054A4A.l		; 0F 4A 4A 05 ; OR accumulator with memory (long) $054A4A.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$190F.w		; A9 0F 19 ; Load #$190F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	sta $100C.w,X		; 9D 0C 10 ; Store accumulator to $100C.w,X [Reads: Accumulator, X Index]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EFE00.l,X		; BF 00 FE 7E ; Load long $7EFE00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E94A.w		; 20 4A E9 ; Jump to subroutine at $E94A.w [Writes: Stack Pointer] [Flow: call]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E94A.w		; 20 4A E9 ; Jump to subroutine at $E94A.w [Writes: Stack Pointer] [Flow: call]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1004.w,X		; 9D 04 10 ; Store accumulator to $1004.w,X [Reads: Accumulator, X Index]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $100E.w,X		; 9D 0E 10 ; Store accumulator to $100E.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1000.w		; 8D 00 10 ; Store accumulator to $1000.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $054A4A.l		; 0F 4A 4A 05 ; OR accumulator with memory (long) $054A4A.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $55.b		; 24 55 ; Test bits $55.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00A8.w		; 0C A8 00 ; Test and set bits $00A8.w [Reads: Accumulator] [Flags: Z]
	and $13.b		; 25 13 ; Logical AND $13.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $37.b		; 25 37 ; Logical AND $37.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $80.b,X		; 36 80 ; Rotate left $80.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($80.b,S),Y		; 73 80 ; Add with carry (stack relative indirect indexed) ($80.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc [$00.b]		; 67 00 ; Add with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $7E.b		; 25 7E ; Logical AND $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$00.b],Y		; 57 00 ; Exclusive OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($57.b)		; 32 57 ; AND accumulator with memory (indirect) ($57.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7E3200.l,X		; 1F 00 32 7E ; Logical OR long $7E3200.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $2280.w,X		; 9E 80 22 ; Store zero to $2280.w,X [Reads: X Index]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($05.b,S),Y		; 33 05 ; AND accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $4000.w,Y		; B9 00 40 ; Load $4000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	and ($B8.b,S),Y		; 33 B8 ; AND accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($FE.b)		; 12 FE ; OR accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $41.b		; 00 41 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $00.b,X		; 75 00 ; Add $00.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($0C.b)		; 32 0C ; AND accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and $03.b		; 25 03 ; Logical AND $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $3601.w,X		; 3D 01 36 ; AND accumulator with memory $3601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $2500.w		; 2E 00 25 ; Rotate left $2500.w [Flags: ZNC]
	and $3601.w		; 2D 01 36 ; Logical AND $3601.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3F.b		; 24 3F ; Test bits $3F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $AE2400.l,X		; 5F 00 24 AE ; Exclusive OR accumulator with memory (long,X) $AE2400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	and ($08.b)		; 32 08 ; AND accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $4601.w		; 1C 01 46 ; Test and reset bits $4601.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$80.b]		; 27 80 ; AND accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $250027.l,X		; 1F 27 00 25 ; Logical OR long $250027.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $2400.w,Y		; 59 00 24 ; Exclusive OR accumulator with memory $2400.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$2500]		; DC 00 25 ; Jump long indirect [$2500] [Flow: jump]
	wai		; CB ; Wait for interrupt
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	mvp $1C,$80		; 44 80 1C ; Move block positive $1C,$80 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $B6.b		; 24 B6 ; Test bits $B6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $80.b		; 24 80 ; Test bits $80.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: ZNC]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $D6.b		; 24 D6 ; Test bits $D6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	and ($D5.b)		; 32 D5 ; AND accumulator with memory (indirect) ($D5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $00.b,X		; D5 00 ; Compare accumulator $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $D5.b,X		; 35 D5 ; Logical AND $D5.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $00.b,X		; D5 00 ; Compare accumulator $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $04.b		; 24 04 ; Test bits $04.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $2800.w,Y		; 19 00 28 ; OR accumulator with memory $2800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2400.w,Y		; 19 00 24 ; OR accumulator with memory $2400.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $C2.b		; 24 C2 ; Test bits $C2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	bit $C1.b		; 24 C1 ; Test bits $C1.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $80.b,S		; C3 80 ; Compare accumulator (stack relative) $80.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $C3.b,X		; 15 C3 ; OR accumulator with memory $C3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	and ($B3.b)		; 32 B3 ; AND accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1701.w		; 0D 01 17 ; Logical OR $1701.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $3601.w		; 0D 01 36 ; Logical OR $3601.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2800F8.l,X		; 3F F8 00 28 ; AND accumulator with memory (long,X) $2800F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($05.b,X)		; 41 05 ; Exclusive OR accumulator with memory ($05.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($17.b,X)		; 41 17 ; Exclusive OR accumulator with memory ($17.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2F1700.l		; 2F 00 17 2F ; AND accumulator with memory (long) $2F1700.l [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2F3600.l		; 2F 00 36 2F ; AND accumulator with memory (long) $2F3600.l [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $282800.l		; 2F 00 28 28 ; AND accumulator with memory (long) $282800.l [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	and $34.b		; 25 34 ; Logical AND $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,X		; 35 00 ; Logical AND $00.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($76.b)		; 32 76 ; AND accumulator with memory (indirect) ($76.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $00.b,X		; 76 00 ; Rotate right $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $66.b,X		; 36 66 ; Rotate left $66.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	bit $E0.b		; 24 E0 ; Test bits $E0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($4400.w,X)		; 7C 00 44 ; Jump indirect indexed to ($4400.w,X) [Reads: X Index] [Flow: jump]
	jmp ($4400.w,X)		; 7C 00 44 ; Jump indirect indexed to ($4400.w,X) [Reads: X Index] [Flow: jump]
	jmp ($2800.w,X)		; 7C 00 28 ; Jump indirect indexed to ($2800.w,X) [Reads: X Index] [Flow: jump]
	jmp ($2800.w,X)		; 7C 00 28 ; Jump indirect indexed to ($2800.w,X) [Reads: X Index] [Flow: jump]
	adc $2400.w,X		; 7D 00 24 ; Add $2400.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $2380.w		; 8C 80 23 ; Store Y register to $2380.w [Reads: Y Index]
	sty $4400.w		; 8C 00 44 ; Store Y register to $4400.w [Reads: Y Index]
	sty $2800.w		; 8C 00 28 ; Store Y register to $2800.w [Reads: Y Index]
	sty $4400.w		; 8C 00 44 ; Store Y register to $4400.w [Reads: Y Index]
	sta $2400.w		; 8D 00 24 ; Store accumulator to $2400.w [Reads: Accumulator]
	sta $2500.w,X		; 9D 00 25 ; Store accumulator to $2500.w,X [Reads: Accumulator, X Index]
	sta $3400.w,X		; 9D 00 34 ; Store accumulator to $3400.w,X [Reads: Accumulator, X Index]
	sta $3600.w,X		; 9D 00 36 ; Store accumulator to $3600.w,X [Reads: Accumulator, X Index]
	sta $4400.w,X		; 9D 00 44 ; Store accumulator to $4400.w,X [Reads: Accumulator, X Index]
	trb $3200.w		; 1C 00 32 ; Test and reset bits $3200.w [Reads: Accumulator] [Flags: Z]
	trb $4400.w		; 1C 00 44 ; Test and reset bits $4400.w [Reads: Accumulator] [Flags: Z]
	trb $2800.w		; 1C 00 28 ; Test and reset bits $2800.w [Reads: Accumulator] [Flags: Z]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2800.w,X		; 3D 00 28 ; AND accumulator with memory $2800.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $2800.w,X		; 3D 00 28 ; AND accumulator with memory $2800.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $2400.w,X		; 3D 00 24 ; AND accumulator with memory $2400.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $3600.w		; 4D 00 36 ; Exclusive OR $3600.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ora ($72.b)		; 12 72 ; OR accumulator with memory (indirect) ($72.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1701.w,X		; 1D 01 17 ; OR accumulator with memory $1701.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3601.w,X		; 1D 01 36 ; OR accumulator with memory $3601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3601.w,X		; 1D 01 36 ; OR accumulator with memory $3601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3601.w,X		; 1D 01 36 ; OR accumulator with memory $3601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3601.w,X		; 1D 01 36 ; OR accumulator with memory $3601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $3601.w,X		; 1E 01 36 ; Arithmetic shift left $3601.w,X [Reads: X Index] [Flags: ZNC]
	asl $3601.w,X		; 1E 01 36 ; Arithmetic shift left $3601.w,X [Reads: X Index] [Flags: ZNC]
	asl $3601.w,X		; 1E 01 36 ; Arithmetic shift left $3601.w,X [Reads: X Index] [Flags: ZNC]
	asl $3601.w,X		; 1E 01 36 ; Arithmetic shift left $3601.w,X [Reads: X Index] [Flags: ZNC]
	sbc $EF3600.l		; EF 00 36 EF ; Subtract with carry (long) $EF3600.l [Writes: Accumulator] [Flags: ZVNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EF3600.l		; EF 00 36 EF ; Subtract with carry (long) $EF3600.l [Writes: Accumulator] [Flags: ZVNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF3600.l		; EF 00 36 FF ; Subtract with carry (long) $FF3600.l [Writes: Accumulator] [Flags: ZVNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $244400.l,X		; FF 00 44 24 ; Subtract with carry (long,X) $244400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $23.b,X		; 36 23 ; Rotate left $23.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($36.b,X)		; 01 36 ; Logical OR ($36.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $01,$20		; 44 20 01 ; Move block positive $01,$20 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $4100.w,X		; 3C 00 41 ; Test bits $4100.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $4100.w,X		; 3C 00 41 ; Test bits $4100.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $4100.w,X		; 3C 00 41 ; Test bits $4100.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $4100.w,X		; 3C 00 41 ; Test bits $4100.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $11.b		; 46 11 ; Logical shift right $11.b [Reads: Direct Page] [Flags: ZNC]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cmp #$63.b		; C9 63 ; Compare #$63.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $EDAB.w		; 4C AB ED ; Jump to $EDAB.w [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0058.w		; E9 58 00 ; Subtract #$0058.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$8000.w		; C9 00 80 ; Compare #$8000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $5F		; 90 5F ; Branch if carry clear to $90, $5F [Flow: branch]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF366.l		; AF 66 F3 7E ; Load long $7EF366.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda #$007A.w		; A9 7A 00 ; Load #$007A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	.db $80, $3B		; 80 3B ; Branch always to $80, $3B [Flow: branch]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9900.w,Y		; 19 00 99 ; OR accumulator with memory $9900.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0402.w		; 8D 02 04 ; Store accumulator to $0402.w [Reads: Accumulator]
	lda #$1529.w		; A9 29 15 ; Load #$1529.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$7FFF.w		; 29 FF 7F ; Logical AND #$7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $046A.w		; AC 6A 04 ; Load $046A.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $EC65.w		; 4C 65 EC ; Jump to $EC65.w [Flow: jump]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $E6DAAA.l,X		; 7F AA DA E6 ; Add long $E6DAAA.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FDA2.w		; 0E A2 FD ; Arithmetic shift left $FDA2.w [Flags: ZNC]
	sbc $E8E8E8.l,X		; FF E8 E8 E8 ; Subtract with carry (long,X) $E8E8E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $BF.b		; E6 BF ; Increment $BF.b [Reads: Direct Page] [Flags: ZN]
	ror $01E9.w		; 6E E9 01 ; Rotate right $01E9.w [Flags: ZNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $D0A0C5.l,X		; 7F C5 A0 D0 ; Add long $D0A0C5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0EC6.w		; ED C6 0E ; Subtract $0EC6.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	lda $01E970.l,X		; BF 70 E9 01 ; Load long $01E970.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $01E96E.l,X		; BF 6E E9 01 ; Load long $01E96E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $24		; 90 24 ; Branch if carry clear to $90, $24 [Flow: branch]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF366.l		; AF 66 F3 7E ; Load long $7EF366.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jmp $ED05.w		; 4C 05 ED ; Jump to $ED05.w [Flow: jump]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda #$7A.b		; A9 7A ; Load #$7A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9900.w,Y		; 19 00 99 ; OR accumulator with memory $9900.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0402.w		; 8D 02 04 ; Store accumulator to $0402.w [Reads: Accumulator]
	ldy #$A4.b		; A0 A4 ; Load #$A4.b into Y register [Writes: Y Index] [Flags: ZN]
	trb $B9.b		; 14 B9 ; Test and reset bits $B9.b [Reads: Accumulator] [Flags: Z]
	eor ($9B.b)		; 52 9B ; Exclusive OR accumulator with memory (indirect) ($9B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$27.b		; A9 27 ; Load #$27.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and [$85.b]		; 27 85 ; AND accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: ZNC]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $80, $90		; 80 90 ; Branch always to $80, $90 [Flow: branch]
	ora $29.b		; 05 29 ; Logical OR $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00647F.l,X		; FF 7F 64 00 ; Subtract with carry (long,X) $00647F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $029DEF.l		; 0F EF 9D 02 ; OR accumulator with memory (long) $029DEF.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0E9DEF.l		; 0F EF 9D 0E ; OR accumulator with memory (long) $0E9DEF.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	.db $82, $00, $20		; 82 00 20 ; Branch always long to $82, $00, $20 [Flow: branch]
	ora $149DEF.l		; 0F EF 9D 14 ; OR accumulator with memory (long) $149DEF.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	cop $9D.b		; 02 9D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZNC]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $100C.w,X		; 9D 0C 10 ; Store accumulator to $100C.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1018.w,X		; 9D 18 10 ; Store accumulator to $1018.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($9D.b,X)		; 01 9D ; Logical OR ($9D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	sta $1010.w,X		; 9D 10 10 ; Store accumulator to $1010.w,X [Reads: Accumulator, X Index]
	sta $1016.w,X		; 9D 16 10 ; Store accumulator to $1016.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $101A9D.l,X		; FF 9D 1A 10 ; Subtract with carry (long,X) $101A9D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$18.b		; 69 18 ; Add #$18.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	lda $012F.w		; AD 2F 01 ; Load $012F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$7FFF.w		; 29 FF 7F ; Logical AND #$7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$31		; E2 31
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9900.w,Y		; 19 00 99 ; OR accumulator with memory $9900.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0402.w		; 8D 02 04 ; Store accumulator to $0402.w [Reads: Accumulator]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $C4A0.w		; 0E A0 C4 ; Arithmetic shift left $C4A0.w [Flags: ZNC]
	trb $B9.b		; 14 B9 ; Test and reset bits $B9.b [Reads: Accumulator] [Flags: Z]
	eor ($9B.b)		; 52 9B ; Exclusive OR accumulator with memory (indirect) ($9B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $F762.w		; 20 62 F7 ; Jump to subroutine at $F762.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $110099.l,X		; FF 99 00 11 ; Subtract with carry (long,X) $110099.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $06E0.w,Y		; B9 E0 06 ; Load $06E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $1A1A48.l,X		; 7F 48 1A 1A ; Add long $1A1A48.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$27.b		; A9 27 ; Load #$27.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and [$9F.b]		; 27 9F ; AND accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $20029F.l,X		; 7F 9F 02 20 ; Add long $20029F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $20409F.l,X		; 7F 9F 40 20 ; Add long $20409F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $20429F.l,X		; 7F 9F 42 20 ; Add long $20429F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $20809F.l,X		; 7F 9F 80 20 ; Add long $20809F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $20829F.l,X		; 7F 9F 82 20 ; Add long $20829F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $AB31E2.l,X		; 7F E2 31 AB ; Add long $AB31E2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	sta $0B9E.w		; 8D 9E 0B ; Store accumulator to $0B9E.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0162.w		; A9 62 01 ; Load #$0162.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0163.w		; A9 63 01 ; Load #$0163.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($34.b,X)		; 41 34 ; Exclusive OR accumulator with memory ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $43		; 42 43 ; Reserved instruction
	mvp $17,$27		; 44 27 17 ; Move block positive $17,$27 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $04C4.w		; AD C4 04 ; Load $04C4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E2		; F0 E2 ; Branch if equal to $F0, $E2 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $D5		; F0 D5 ; Branch if equal to $F0, $D5 [Flow: branch]
	dec $04C4.w		; CE C4 04 ; Decrement $04C4.w [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0004.w		; E9 04 00 ; Subtract #$0004.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0007.w		; 69 07 00 ; Add #$0007.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$6363.w		; C9 63 63 ; Compare #$6363.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$6363.w		; C9 63 63 ; Compare #$6363.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$0202.w		; A9 02 02 ; Load #$0202.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldy #$14A4.w		; A0 A4 14 ; Load #$14A4.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $100E.w,X		; 9D 0E 10 ; Store accumulator to $100E.w,X [Reads: Accumulator, X Index]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0082.w		; 69 82 00 ; Add #$0082.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $EF0F.w		; 20 0F EF ; Jump to subroutine at $EF0F.w [Writes: Stack Pointer] [Flow: call]
	sta $1014.w,X		; 9D 14 10 ; Store accumulator to $1014.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $100C.w,X		; 9D 0C 10 ; Store accumulator to $100C.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1018.w,X		; 9D 18 10 ; Store accumulator to $1018.w,X [Reads: Accumulator, X Index]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1004.w,X		; 9D 04 10 ; Store accumulator to $1004.w,X [Reads: Accumulator, X Index]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	sta $1010.w,X		; 9D 10 10 ; Store accumulator to $1010.w,X [Reads: Accumulator, X Index]
	sta $1016.w,X		; 9D 16 10 ; Store accumulator to $1016.w,X [Reads: Accumulator, X Index]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $101A.w,X		; 9D 1A 10 ; Store accumulator to $101A.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1000.w		; 8D 00 10 ; Store accumulator to $1000.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$31		; E2 31
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $65		; F0 65 ; Branch if equal to $F0, $65 [Flow: branch]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $69		; F0 69 ; Branch if equal to $F0, $69 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	cpx $C8.b		; E4 C8 ; Compare $C8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $01EDA3.l,X		; BF A3 ED 01 ; Load long $01EDA3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $C8.b		; 86 C8 ; Store X register to $C8.b [Reads: X Index]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0D.b		; 64 0D ; Store zero to $0D.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor [$34.b]		; 47 34 ; Exclusive OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $34.b		; 46 34 ; Logical shift right $34.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	bit $47.b,X		; 34 47 ; Test bits $47.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	bit $46.b,X		; 34 46 ; Test bits $46.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor [$34.b]		; 47 34 ; Exclusive OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	bit $47.b,X		; 34 47 ; Test bits $47.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$34.b]		; 47 34 ; Exclusive OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($34.b,X)		; 41 34 ; Exclusive OR accumulator with memory ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $47.b,X		; 34 47 ; Test bits $47.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor ($34.b,X)		; 41 34 ; Exclusive OR accumulator with memory ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01EED7.l,X		; BF D7 EE 01 ; Load long $01EED7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $B6		; 80 B6 ; Branch always to $80, $B6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06E0.w,Y		; 79 E0 06 ; Add $06E0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $054A4A.l		; 0F 4A 4A 05 ; OR accumulator with memory (long) $054A4A.l [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $0424.w		; AD 24 04 ; Load $0424.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda $0424.w		; AD 24 04 ; Load $0424.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0684.w		; AD 84 06 ; Load $0684.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0688.w		; CD 88 06 ; Compare $0688.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01EF34.l,X		; 7F 34 EF 01 ; Add long $01EF34.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0684.w		; 8D 84 06 ; Store accumulator to $0684.w [Reads: Accumulator]
	lda $0686.w		; AD 86 06 ; Load $0686.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01EF34.l,X		; 7F 34 EF 01 ; Add long $01EF34.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0686.w		; 8D 86 06 ; Store accumulator to $0686.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $0424.w		; EE 24 04 ; Increment $0424.w [Flags: ZN]
	jsl $00F649.l		; 22 49 F6 00 ; Jump to subroutine long $00F649.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $0424.w		; EE 24 04 ; Increment $0424.w [Flags: ZN]
	jsl $00F649.l		; 22 49 F6 00 ; Jump to subroutine long $00F649.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; [PATTERN: Memory clearing operation] 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	stz TSUB.w		; 9C 2D 21 ; Store zero to TSUB.w
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	stz $96.b		; [PATTERN: Memory clearing operation] 64 96 ; Store zero to $96.b
	stz $046C.w		; 9C 6C 04 ; Store zero to $046C.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $1E.b		; 64 1E ; Store zero to $1E.b
	ldx $0442.w		; AE 42 04 ; Load $0442.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $06B8.w,Y		; BE B8 06 ; Load X register $06B8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$1D1D.w		; A9 1D 1D ; Load #$1D1D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0442.w		; CC 42 04 ; Compare $0442.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
	ldx $04AE.w		; AE AE 04 ; Load $04AE.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $06EC.w,Y		; BE EC 06 ; Load X register $06EC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$1D1D.w		; A9 1D 1D ; Load #$1D1D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2041.l,X		; 9F 41 20 7F ; Store accumulator (long,X) $7F2041.l,X [Reads: Accumulator, X Index]
	sta $7F2081.l,X		; 9F 81 20 7F ; Store accumulator (long,X) $7F2081.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $04AE.w		; CC AE 04 ; Compare $04AE.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$01E0.w		; A0 E0 01 ; Load #$01E0.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E4200.l,X		; 9F 00 42 7E ; Store accumulator (long,X) $7E4200.l,X [Reads: Accumulator, X Index]
	sta $7E4400.l,X		; 9F 00 44 7E ; Store accumulator (long,X) $7E4400.l,X [Reads: Accumulator, X Index]
	sta $7E4600.l,X		; 9F 00 46 7E ; Store accumulator (long,X) $7E4600.l,X [Reads: Accumulator, X Index]
	sta $7E4800.l,X		; 9F 00 48 7E ; Store accumulator (long,X) $7E4800.l,X [Reads: Accumulator, X Index]
	sta $7E4A00.l,X		; 9F 00 4A 7E ; Store accumulator (long,X) $7E4A00.l,X [Reads: Accumulator, X Index]
	sta $7E4C00.l,X		; 9F 00 4C 7E ; Store accumulator (long,X) $7E4C00.l,X [Reads: Accumulator, X Index]
	sta $7E4E00.l,X		; 9F 00 4E 7E ; Store accumulator (long,X) $7E4E00.l,X [Reads: Accumulator, X Index]
	sta $7E5000.l,X		; 9F 00 50 7E ; Store accumulator (long,X) $7E5000.l,X [Reads: Accumulator, X Index]
	sta $7E5200.l,X		; 9F 00 52 7E ; Store accumulator (long,X) $7E5200.l,X [Reads: Accumulator, X Index]
	sta $7E5400.l,X		; 9F 00 54 7E ; Store accumulator (long,X) $7E5400.l,X [Reads: Accumulator, X Index]
	sta $7E5600.l,X		; 9F 00 56 7E ; Store accumulator (long,X) $7E5600.l,X [Reads: Accumulator, X Index]
	sta $7E5800.l,X		; 9F 00 58 7E ; Store accumulator (long,X) $7E5800.l,X [Reads: Accumulator, X Index]
	sta $7E5A00.l,X		; 9F 00 5A 7E ; Store accumulator (long,X) $7E5A00.l,X [Reads: Accumulator, X Index]
	sta $7E5C00.l,X		; 9F 00 5C 7E ; Store accumulator (long,X) $7E5C00.l,X [Reads: Accumulator, X Index]
	sta $7E5E00.l,X		; 9F 00 5E 7E ; Store accumulator (long,X) $7E5E00.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $B9		; D0 B9 ; Branch if not equal to $D0, $B9 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	lda $045C.w		; AD 5C 04 ; Load $045C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $045C.w		; 8D 5C 04 ; Store accumulator to $045C.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	lda $B0.b		; [PATTERN: Memory clearing operation] A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F046FF.l,X		; FF FF 46 F0 ; Subtract with carry (long,X) $F046FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $F0.b		; 46 F0 ; Logical shift right $F0.b [Reads: Direct Page] [Flags: ZNC]
	lsr $F0.b		; 46 F0 ; Logical shift right $F0.b [Reads: Direct Page] [Flags: ZNC]
	lsr $F0.b		; 46 F0 ; Logical shift right $F0.b [Reads: Direct Page] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $9B		; F0 9B ; Branch if equal to $F0, $9B [Flow: branch]
	.db $F0, $9B		; F0 9B ; Branch if equal to $F0, $9B [Flow: branch]
	.db $F0, $9B		; F0 9B ; Branch if equal to $F0, $9B [Flow: branch]
	.db $F0, $9B		; F0 9B ; Branch if equal to $F0, $9B [Flow: branch]
	.db $F0, $6D		; F0 6D ; Branch if equal to $F0, $6D [Flow: branch]
	sbc ($8C.b),Y		; F1 8C ; Subtract with carry ($8C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E1.b),Y		; F1 E1 ; Subtract with carry ($E1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($A5.b),Y		; F1 A5 ; Subtract with carry ($A5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($F07B.w,X)		; 7C 7B F0 ; Jump indirect indexed to ($F07B.w,X) [Reads: X Index] [Flow: jump]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0424.w		; CE 24 04 ; Decrement $0424.w [Flags: ZN]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0424.w		; 8D 24 04 ; Store accumulator to $0424.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; [PATTERN: Memory clearing operation] 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0686.w		; 8D 86 06 ; Store accumulator to $0686.w [Reads: Accumulator]
	stz $068A.w		; 9C 8A 06 ; Store zero to $068A.w
	lda #$0030.w		; A9 30 00 ; Load #$0030.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0684.w		; 8D 84 06 ; Store accumulator to $0684.w [Reads: Accumulator]
	lda #$1654.w		; A9 54 16 ; Load #$1654.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $047C.w		; AD 7C 04 ; Load $047C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$303F.w		; 29 3F 30 ; Logical AND #$303F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	lda #$0980.w		; A9 80 09 ; Load #$0980.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1004.w,Y		; 99 04 10 ; Store accumulator to $1004.w,Y [Reads: Accumulator, Y Index]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,Y		; 99 06 10 ; Store accumulator to $1006.w,Y [Reads: Accumulator, Y Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1008.w,Y		; 99 08 10 ; Store accumulator to $1008.w,Y [Reads: Accumulator, Y Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $100A.w,Y		; 99 0A 10 ; Store accumulator to $100A.w,Y [Reads: Accumulator, Y Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $100C.w,Y		; 99 0C 10 ; Store accumulator to $100C.w,Y [Reads: Accumulator, Y Index]
	lda $7E2200.l,X		; BF 00 22 7E ; Load long $7E2200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $100E.w,Y		; 99 0E 10 ; Store accumulator to $100E.w,Y [Reads: Accumulator, Y Index]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000E.w		; 69 0E 00 ; Add #$000E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $A7		; D0 A7 ; Branch if not equal to $D0, $A7 [Flow: branch]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; [PATTERN: Memory clearing operation] 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $96.b		; 85 96 ; Store accumulator to $96.b [Reads: Accumulator]
	stz $97.b		; 64 97 ; Store zero to $97.b
	stz $98.b		; 64 98 ; Store zero to $98.b
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E.b		; 85 1E ; Store accumulator to $1E.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F.b		; 85 1F ; Store accumulator to $1F.b [Reads: Accumulator]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$62.b		; A9 62 ; Load #$62.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	stz $0424.w		; 9C 24 04 ; Store zero to $0424.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	lda $0424.w		; AD 24 04 ; Load $0424.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda #$0688.w		; A9 88 06 ; Load #$0688.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0024.w		; E9 24 00 ; Subtract #$0024.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0686.w		; AD 86 06 ; Load $0686.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01F073.l,X		; 7F 73 F0 01 ; Add long $01F073.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0686.w		; 8D 86 06 ; Store accumulator to $0686.w [Reads: Accumulator]
	lda $068A.w		; AD 8A 06 ; Load $068A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01F06B.l,X		; 7F 6B F0 01 ; Add long $01F06B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $068A.w		; 8D 8A 06 ; Store accumulator to $068A.w [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0414.w		; 8D 14 04 ; Store accumulator to $0414.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $0424.w		; EE 24 04 ; Increment $0424.w [Flags: ZN]
	lda #$0688.w		; A9 88 06 ; Load #$0688.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0684.w		; ED 84 06 ; Subtract $0684.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0674.w		; 8D 74 06 ; Store accumulator to $0674.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $068A.w		; 6D 8A 06 ; Add $068A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsl $00F660.l		; 22 60 F6 00 ; Jump to subroutine long $00F660.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0424.w		; AD 24 04 ; Load $0424.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$D007.w		; 29 07 D0 ; Logical AND #$D007.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $AD.b		; 45 AD ; Exclusive OR $AD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $04.b		; 24 04 ; Test bits $04.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and #$4A0C.w		; 29 0C 4A ; Logical AND #$4A0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0684.w		; AD 84 06 ; Load $0684.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0688.w		; CD 88 06 ; Compare $0688.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3E		; F0 3E ; Branch if equal to $F0, $3E [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01F063.l,X		; 7F 63 F0 01 ; Add long $01F063.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0684.w		; 8D 84 06 ; Store accumulator to $0684.w [Reads: Accumulator]
	lda $0686.w		; AD 86 06 ; Load $0686.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01F063.l,X		; 7F 63 F0 01 ; Add long $01F063.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0686.w		; 8D 86 06 ; Store accumulator to $0686.w [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldy #$16B4.w		; A0 B4 16 ; Load #$16B4.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0688.w		; AD 88 06 ; Load $0688.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0684.w		; ED 84 06 ; Subtract $0684.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	ldy #$168C.w		; A0 8C 16 ; Load #$168C.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsl $01F0C9.l		; 22 C9 F0 01 ; Jump to subroutine long $01F0C9.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $0424.w		; EE 24 04 ; Increment $0424.w [Flags: ZN]
	jsl $00F649.l		; 22 49 F6 00 ; Jump to subroutine long $00F649.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $1E.b		; 64 1E ; Store zero to $1E.b
	ldx $0440.w		; AE 40 04 ; Load $0440.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $48		; F0 48 ; Branch if equal to $F0, $48 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $06B8.w,Y		; BE B8 06 ; Load X register $06B8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F2002.l,X		; 9F 02 20 7F ; Store accumulator (long,X) $7F2002.l,X [Reads: Accumulator, X Index]
	lda #$0A03.w		; A9 03 0A ; Load #$0A03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F3000.l,X		; 9F 00 30 7F ; Store accumulator (long,X) $7F3000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F3002.l,X		; 9F 02 30 7F ; Store accumulator (long,X) $7F3002.l,X [Reads: Accumulator, X Index]
	lda #$0808.w		; A9 08 08 ; Load #$0808.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	sta $7F2042.l,X		; 9F 42 20 7F ; Store accumulator (long,X) $7F2042.l,X [Reads: Accumulator, X Index]
	sta $7F3040.l,X		; 9F 40 30 7F ; Store accumulator (long,X) $7F3040.l,X [Reads: Accumulator, X Index]
	sta $7F3042.l,X		; 9F 42 30 7F ; Store accumulator (long,X) $7F3042.l,X [Reads: Accumulator, X Index]
	sta $7F3080.l,X		; 9F 80 30 7F ; Store accumulator (long,X) $7F3080.l,X [Reads: Accumulator, X Index]
	sta $7F3082.l,X		; 9F 82 30 7F ; Store accumulator (long,X) $7F3082.l,X [Reads: Accumulator, X Index]
	sta $7F30C0.l,X		; 9F C0 30 7F ; Store accumulator (long,X) $7F30C0.l,X [Reads: Accumulator, X Index]
	sta $7F30C2.l,X		; 9F C2 30 7F ; Store accumulator (long,X) $7F30C2.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0440.w		; CC 40 04 ; Compare $0440.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $BB		; D0 BB ; Branch if not equal to $D0, $BB [Flow: branch]
	ldx $049E.w		; AE 9E 04 ; Load $049E.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $48		; F0 48 ; Branch if equal to $F0, $48 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $06EC.w,Y		; BE EC 06 ; Load X register $06EC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F20C0.l,X		; 9F C0 20 7F ; Store accumulator (long,X) $7F20C0.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F20C2.l,X		; 9F C2 20 7F ; Store accumulator (long,X) $7F20C2.l,X [Reads: Accumulator, X Index]
	lda #$0A03.w		; A9 03 0A ; Load #$0A03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F30C0.l,X		; 9F C0 30 7F ; Store accumulator (long,X) $7F30C0.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F30C2.l,X		; 9F C2 30 7F ; Store accumulator (long,X) $7F30C2.l,X [Reads: Accumulator, X Index]
	lda #$0808.w		; A9 08 08 ; Load #$0808.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2080.l,X		; 9F 80 20 7F ; Store accumulator (long,X) $7F2080.l,X [Reads: Accumulator, X Index]
	sta $7F2082.l,X		; 9F 82 20 7F ; Store accumulator (long,X) $7F2082.l,X [Reads: Accumulator, X Index]
	sta $7F3000.l,X		; 9F 00 30 7F ; Store accumulator (long,X) $7F3000.l,X [Reads: Accumulator, X Index]
	sta $7F3002.l,X		; 9F 02 30 7F ; Store accumulator (long,X) $7F3002.l,X [Reads: Accumulator, X Index]
	sta $7F3040.l,X		; 9F 40 30 7F ; Store accumulator (long,X) $7F3040.l,X [Reads: Accumulator, X Index]
	sta $7F3042.l,X		; 9F 42 30 7F ; Store accumulator (long,X) $7F3042.l,X [Reads: Accumulator, X Index]
	sta $7F3080.l,X		; 9F 80 30 7F ; Store accumulator (long,X) $7F3080.l,X [Reads: Accumulator, X Index]
	sta $7F3082.l,X		; 9F 82 30 7F ; Store accumulator (long,X) $7F3082.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; [PATTERN: Memory clearing operation] C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $049E.w		; CC 9E 04 ; Compare $049E.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $BB		; D0 BB ; Branch if not equal to $D0, $BB [Flow: branch]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8FFF8.l,X		; FF F8 FF F8 ; Subtract with carry (long,X) $F8FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4812F8.l,X		; FF F8 12 48 ; Subtract with carry (long,X) $4812F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($E8.b,S),Y		; 13 E8 ; OR accumulator (stack relative indirect indexed) ($E8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A7.b,S),Y		; 13 A7 ; OR accumulator (stack relative indirect indexed) ($A7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($AA.b,S),Y		; F3 AA ; Subtract with carry (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($AA.b,S),Y		; F3 AA ; Subtract with carry (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($AA.b,S),Y		; F3 AA ; Subtract with carry (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($BD.b,S),Y		; F3 BD ; Subtract with carry (stack relative indirect indexed) ($BD.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($22.b,S),Y		; F3 22 ; Subtract with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $F7.b,X		; 34 F7 ; Test bits $F7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($F2F2.w,X)		; 7C F2 F2 ; Jump indirect indexed to ($F2F2.w,X) [Reads: X Index] [Flow: jump]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0470.w		; EE 70 04 ; Increment $0470.w [Flags: ZN]
	lda $0470.w		; AD 70 04 ; Load $0470.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0686.w		; 8D 86 06 ; Store accumulator to $0686.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0678.w		; AD 78 06 ; Load $0678.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0676.w		; 8D 76 06 ; Store accumulator to $0676.w [Reads: Accumulator]
	lda $067A.w		; AD 7A 06 ; Load $067A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $067A.w		; 8D 7A 06 ; Store accumulator to $067A.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0684.w		; 8D 84 06 ; Store accumulator to $0684.w [Reads: Accumulator]
	lda $0470.w		; AD 70 04 ; Load $0470.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $D2		; D0 D2 ; Branch if not equal to $D0, $D2 [Flow: branch]
	lda $0470.w		; AD 70 04 ; Load $0470.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0470.w		; AD 70 04 ; Load $0470.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01F2E8.l,X		; BF E8 F2 01 ; Load long $01F2E8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $0472.w		; AE 72 04 ; Load $0472.w into X register [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$0881.w		; A9 81 08 ; Load #$0881.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	jsr $F77C.w		; 20 7C F7 ; Jump to subroutine at $F77C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dec $0E.b		; [PATTERN: Memory clearing operation] C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E3		; D0 E3 ; Branch if not equal to $D0, $E3 [Flow: branch]
	jmp $D1E3.w		; 4C E3 D1 ; Jump to $D1E3.w [Flow: jump]
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	lda $045C.w		; AD 5C 04 ; Load $045C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$8D04.w		; 69 04 8D ; Add #$8D04.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $B0E604.l		; 5C 04 E6 B0 ; Jump long to $B0E604.l [Flow: jump]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0684.w		; EE 84 06 ; Increment $0684.w [Flags: ZN]
	lda $0684.w		; AD 84 06 ; Load $0684.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0676.w		; [PATTERN: Memory clearing operation] 6D 76 06 ; Add $0676.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$90E1.w		; C9 E1 90 ; Compare #$90E1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $045C9C.l		; 0F 9C 5C 04 ; OR accumulator with memory (long) $045C9C.l [Writes: Accumulator] [Flags: ZN]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $1E.b		; [PATTERN: Memory clearing operation] 64 1E ; Store zero to $1E.b
	stz $1F.b		; 64 1F ; Store zero to $1F.b
	jsl $00F427.l		; 22 27 F4 00 ; Jump to subroutine long $00F427.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0333.w		; 9C 33 03 ; Store zero to $0333.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0333.w		; AD 33 03 ; Load $0333.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$C9F0.w		; 29 F0 C9 ; Logical AND #$C9F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$F3D0.w		; C0 D0 F3 ; Compare #$F3D0.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($AD.b),Y		; 11 AD ; OR accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$C9F0.w		; 29 F0 C9 ; Logical AND #$C9F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$E6D0.w		; C0 D0 E6 ; Compare #$E6D0.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda #$A4C0.w		; A9 C0 A4 ; Load #$A4C0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$02D0.w		; A0 D0 02 ; Load #$02D0.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$8580.w		; A9 80 85 ; Load #$8580.w into accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $09.b		; 64 09 ; Store zero to $09.b
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$4800.w		; A9 00 48 ; Load #$4800.w into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0333.w		; AD 33 03 ; Load $0333.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0478.w		; 6D 78 04 ; Add $0478.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0520.w,Y		; B9 20 05 ; Load $0520.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $6F		; B0 6F ; Branch if carry set to $B0, $6F [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0540.w,Y		; 99 40 05 ; Store accumulator to $0540.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EFB40.l,X		; 9F 40 FB 7E ; Store accumulator (long,X) $7EFB40.l,X [Reads: Accumulator, X Index]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$0ECA.w		; A0 CA 0E ; Load #$0ECA.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $F746.w		; 20 46 F7 ; Jump to subroutine at $F746.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $0DBBD0.l		; 22 D0 BB 0D ; Jump to subroutine long $0DBBD0.l [Writes: Stack Pointer] [Flow: call]
	ora #$2A.b		; 09 2A ; Logical OR #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda $045A.w		; AD 5A 04 ; Load $045A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $045A.w		; EE 5A 04 ; Increment $045A.w [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	ldx $045A.w		; AE 5A 04 ; Load $045A.w into X register [Writes: X Index] [Flags: ZN]
	lda $02A1E5.l,X		; BF E5 A1 02 ; Load long $02A1E5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $0333.w		; AD 33 03 ; Load $0333.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $04F0.w,X		; 9D F0 04 ; Store accumulator to $04F0.w,X [Reads: Accumulator, X Index]
	stz $0333.w		; 9C 33 03 ; Store zero to $0333.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0ED657.l		; 22 57 D6 0E ; Jump to subroutine long $0ED657.l [Writes: Stack Pointer] [Flow: call]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0333.w		; 8D 33 03 ; Store accumulator to $0333.w [Reads: Accumulator]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$C1.b		; A9 C1 ; Load #$C1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0333.w		; 8D 33 03 ; Store accumulator to $0333.w [Reads: Accumulator]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	stz $09.b		; 64 09 ; Store zero to $09.b
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0333.w		; AD 33 03 ; Load $0333.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0478.w		; 6D 78 04 ; Add $0478.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0520.w,Y		; B9 20 05 ; Load $0520.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0540.w,Y		; B9 40 05 ; Load $0540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0540.w,Y		; 99 40 05 ; Store accumulator to $0540.w,Y [Reads: Accumulator, Y Index]
	sta $7EFB40.l,X		; 9F 40 FB 7E ; Store accumulator (long,X) $7EFB40.l,X [Reads: Accumulator, X Index]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	ldy #$0EC2.w		; A0 C2 0E ; Load #$0EC2.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $F746.w		; 20 46 F7 ; Jump to subroutine at $F746.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	lda $045A.w		; AD 5A 04 ; Load $045A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $045A.w		; 8D 5A 04 ; Store accumulator to $045A.w [Reads: Accumulator]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	ldx $045A.w		; AE 5A 04 ; Load $045A.w into X register [Writes: X Index] [Flags: ZN]
	lda $02A1E5.l,X		; BF E5 A1 02 ; Load long $02A1E5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $0333.w		; AD 33 03 ; Load $0333.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; [PATTERN: Memory clearing operation] 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	stz $04F0.w,X		; 9E F0 04 ; Store zero to $04F0.w,X [Reads: X Index]
	stz $0333.w		; 9C 33 03 ; Store zero to $0333.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $06B0.w,Y		; B9 B0 06 ; Load $06B0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $048C.w		; 8E 8C 04 ; Store X register to $048C.w [Reads: X Index]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $CF		; 10 CF ; Branch if plus to $10, $CF [Flow: branch]
	jsr $F762.w		; 20 62 F7 ; Jump to subroutine at $F762.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	jmp $D1E3.w		; 4C E3 D1 ; Jump to $D1E3.w [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $048C.w		; AE 8C 04 ; Load $048C.w into X register [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$DFFF.w		; 29 FF DF ; Logical AND #$DFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$DFFF.w		; 29 FF DF ; Logical AND #$DFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$DFFF.w		; 29 FF DF ; Logical AND #$DFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$DFFF.w		; 29 FF DF ; Logical AND #$DFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $CF		; 10 CF ; Branch if plus to $10, $CF [Flow: branch]
	jsr $F762.w		; 20 62 F7 ; Jump to subroutine at $F762.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	jmp $D1E3.w		; 4C E3 D1 ; Jump to $D1E3.w [Flow: jump]
	lsr $25.b,X		; 56 25 ; Logical shift right $25.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $25.b,Y		; 96 25 ; Store X register $25.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	dec $25.b,X		; D6 25 ; Decrement memory $25.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	asl $26.b,X		; 16 26 ; Arithmetic shift left $26.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$8D01.w		; A9 01 8D ; Load #$8D01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $02.b		; E4 02 ; Compare $02.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C9.b		; 05 C9 ; Logical OR $C9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	dec $C9.b		; C6 C9 ; Decrement $C9.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	lda #$8D15.w		; A9 15 8D ; Load #$8D15.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $9C01.w		; 2D 01 9C ; Logical AND $9C01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $506403.l		; EF 03 64 50 ; Subtract with carry (long) $506403.l [Writes: Accumulator] [Flags: ZVNC]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$D003.w		; 29 03 D0 ; Logical AND #$D003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$C2.b],Y		; D7 C2 ; Compare accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	sbc #$0004.w		; E9 04 00 ; Subtract #$0004.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01F5D1.l,X		; BF D1 F5 01 ; Load long $01F5D1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E21D8.l,X		; 9F D8 21 7E ; Store accumulator (long,X) $7E21D8.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2258.l,X		; 9F 58 22 7E ; Store accumulator (long,X) $7E2258.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E22D8.l,X		; 9F D8 22 7E ; Store accumulator (long,X) $7E22D8.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2358.l,X		; 9F 58 23 7E ; Store accumulator (long,X) $7E2358.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0010.w		; E0 10 00 ; Compare #$0010.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $D7		; D0 D7 ; Branch if not equal to $D0, $D7 [Flow: branch]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda #$0881.w		; A9 81 08 ; Load #$0881.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx #$01D8.w		; A2 D8 01 ; Load #$01D8.w into X register [Writes: X Index] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr $F77C.w		; 20 7C F7 ; Jump to subroutine at $F77C.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Accumulator, Y Index]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	lda #$0202.w		; A9 02 02 ; Load #$0202.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F216C.l		; 8F 6C 21 7F ; Store accumulator (long) $7F216C.l [Reads: Accumulator]
	sta $7F21AC.l		; 8F AC 21 7F ; Store accumulator (long) $7F21AC.l [Reads: Accumulator]
	lda #$0200.w		; A9 00 02 ; Load #$0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F2172.l		; 8F 72 21 7F ; Store accumulator (long) $7F2172.l [Reads: Accumulator]
	sta $7F21B2.l		; 8F B2 21 7F ; Store accumulator (long) $7F21B2.l [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F202D.l,X		; 9F 2D 20 7F ; Store accumulator (long,X) $7F202D.l,X [Reads: Accumulator, X Index]
	sta $7F206D.l,X		; 9F 6D 20 7F ; Store accumulator (long,X) $7F206D.l,X [Reads: Accumulator, X Index]
	sta $7F20AD.l,X		; 9F AD 20 7F ; Store accumulator (long,X) $7F20AD.l,X [Reads: Accumulator, X Index]
	sta $7F20ED.l,X		; 9F ED 20 7F ; Store accumulator (long,X) $7F20ED.l,X [Reads: Accumulator, X Index]
	sta $7F212D.l,X		; 9F 2D 21 7F ; Store accumulator (long,X) $7F212D.l,X [Reads: Accumulator, X Index]
	sta $7F216D.l,X		; 9F 6D 21 7F ; Store accumulator (long,X) $7F216D.l,X [Reads: Accumulator, X Index]
	sta $7F21AD.l,X		; 9F AD 21 7F ; Store accumulator (long,X) $7F21AD.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0006.w		; E0 06 00 ; Compare #$0006.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $DD		; [PATTERN: Memory clearing operation] D0 DD ; Branch if not equal to $D0, $DD [Flow: branch]
	lda #$FFC0.w		; A9 C0 FF ; Load #$FFC0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0600.w		; 8D 00 06 ; Store accumulator to $0600.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A5.b		; 06 A5 ; Arithmetic shift left $A5.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $054A4A.l		; 0F 4A 4A 05 ; OR accumulator with memory (long) $054A4A.l [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $99.b		; 02 99 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $045E.w		; AE 5E 04 ; Load $045E.w into X register [Writes: X Index] [Flags: ZN]
	lda $1600.w,X		; BD 00 16 ; Load $1600.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1104.w,Y		; 99 04 11 ; Store accumulator to $1104.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1102.w,Y		; 99 02 11 ; Store accumulator to $1102.w,Y [Reads: Accumulator, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	lda $1602.w,X		; BD 02 16 ; Load $1602.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1106.w,Y		; 99 06 11 ; Store accumulator to $1106.w,Y [Reads: Accumulator, Y Index]
	lda $1604.w,X		; BD 04 16 ; Load $1604.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1108.w,Y		; 99 08 11 ; Store accumulator to $1108.w,Y [Reads: Accumulator, Y Index]
	lda $1606.w,X		; BD 06 16 ; Load $1606.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $110A.w,Y		; 99 0A 11 ; Store accumulator to $110A.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	lda $1608.w,X		; BD 08 16 ; Load $1608.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1106.w,Y		; 99 06 11 ; Store accumulator to $1106.w,Y [Reads: Accumulator, Y Index]
	lda $1610.w,X		; BD 10 16 ; Load $1610.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1108.w,Y		; 99 08 11 ; Store accumulator to $1108.w,Y [Reads: Accumulator, Y Index]
	lda $1618.w,X		; BD 18 16 ; Load $1618.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $110A.w,Y		; 99 0A 11 ; Store accumulator to $110A.w,Y [Reads: Accumulator, Y Index]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $045E.w		; 8E 5E 04 ; Store X register to $045E.w [Reads: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $87		; D0 87 ; Branch if not equal to $D0, $87 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $054A4A.l		; 0F 4A 4A 05 ; OR accumulator with memory (long) $054A4A.l [Writes: Accumulator] [Flags: ZN]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1104.w,Y		; 99 04 11 ; Store accumulator to $1104.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1102.w,Y		; 99 02 11 ; Store accumulator to $1102.w,Y [Reads: Accumulator, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	lda $7E2002.l,X		; BF 02 20 7E ; Load long $7E2002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1106.w,Y		; 99 06 11 ; Store accumulator to $1106.w,Y [Reads: Accumulator, Y Index]
	lda $7E2004.l,X		; BF 04 20 7E ; Load long $7E2004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1108.w,Y		; 99 08 11 ; Store accumulator to $1108.w,Y [Reads: Accumulator, Y Index]
	lda $7E2006.l,X		; BF 06 20 7E ; Load long $7E2006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $110A.w,Y		; 99 0A 11 ; Store accumulator to $110A.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1106.w,Y		; 99 06 11 ; Store accumulator to $1106.w,Y [Reads: Accumulator, Y Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1108.w,Y		; 99 08 11 ; Store accumulator to $1108.w,Y [Reads: Accumulator, Y Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $110A.w,Y		; 99 0A 11 ; Store accumulator to $110A.w,Y [Reads: Accumulator, Y Index]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $8E		; D0 8E ; Branch if not equal to $D0, $8E [Flow: branch]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: ZNC]
	asl $54AD.w		; 0E AD 54 ; Arithmetic shift left $54AD.w [Flags: ZNC]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$06.b		; E9 06 ; Subtract #$06.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $09		; 30 09 ; Branch if minus to $30, $09 [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	inc $0E.b		; E6 0E ; Increment $0E.b [Reads: Direct Page] [Flags: ZN]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $19C0.w,X		; BD C0 19 ; Load $19C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $054A4A.l		; 0F 4A 4A 05 ; OR accumulator with memory (long) $054A4A.l [Writes: Accumulator] [Flags: ZN]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1104.w,Y		; 99 04 11 ; Store accumulator to $1104.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $1102.w,Y		; 99 02 11 ; Store accumulator to $1102.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $1099.w		; 0E 99 10 ; Arithmetic shift left $1099.w [Flags: ZNC]
	ora ($68.b),Y		; 11 68 ; OR accumulator with memory ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$A0.b		; 69 A0 ; Add #$A0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $99.b		; 04 99 ; Test and set bits $99.b [Reads: Accumulator] [Flags: Z]
	asl $BF11.w		; 0E 11 BF ; Arithmetic shift left $BF11.w [Flags: ZNC]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	ror $0699.w,X		; 7E 99 06 ; Rotate right $0699.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0899.w,X		; 7E 99 08 ; Rotate right $0899.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $21		; 80 21 ; Branch always to $80, $21 [Flow: branch]
	ror $0A99.w,X		; 7E 99 0A ; Rotate right $0A99.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0C99.w,X		; 7E 99 0C ; Rotate right $0C99.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	ror $1299.w,X		; 7E 99 12 ; Rotate right $1299.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $1499.w,X		; 7E 99 14 ; Rotate right $1499.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	ror $1699.w,X		; 7E 99 16 ; Rotate right $1699.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $1899.w,X		; 7E 99 18 ; Rotate right $1899.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	ror $1A99.w,X		; 7E 99 1A ; Rotate right $1A99.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $1C99.w,X		; 7E 99 1C ; Rotate right $1C99.w,X [Reads: X Index] [Flags: ZNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	ror $1E99.w,X		; 7E 99 1E ; Rotate right $1E99.w,X [Reads: X Index] [Flags: ZNC]
	ora ($E6.b),Y		; 11 E6 ; OR accumulator with memory ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $F842.w		; 4C 42 F8 ; Jump to $F842.w [Flow: jump]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $01F7EF.l,X		; BF EF F7 01 ; Load long $01F7EF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp $F842.w		; 4C 42 F8 ; Jump to $F842.w [Flow: jump]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $054A4A.l		; 0F 4A 4A 05 ; OR accumulator with memory (long) $054A4A.l [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $EB.b		; 02 EB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($99.b,X)		; 01 99 ; Logical OR ($99.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	lda $7E4000.l,X		; BF 00 40 7E ; Load long $7E4000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,Y		; 99 06 10 ; Store accumulator to $1006.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C7		; D0 C7 ; Branch if not equal to $D0, $C7 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$70.b		; 69 70 ; Add #$70.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $B9		; D0 B9 ; Branch if not equal to $D0, $B9 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $100299.l,X		; FF 99 02 10 ; Subtract with carry (long,X) $100299.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	ldy $BA.b		; A4 BA ; Load $BA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $F980.w		; 20 80 F9 ; Jump to subroutine at $F980.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $EA		; 80 EA ; Branch always to $80, $EA [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: ZNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $BA.b		; 84 BA ; Store Y register to $BA.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cmp #$00A4.w		; C9 A4 00 ; Compare #$00A4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $53		; D0 53 ; Branch if not equal to $D0, $53 [Flow: branch]
	ldy #$AA.b		; A0 AA ; Load #$AA.b into Y register [Writes: Y Index] [Flags: ZN]
	ora $B9.b		; 05 B9 ; Logical OR $B9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($9B.b)		; 52 9B ; Exclusive OR accumulator with memory (indirect) ($9B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	sta $7E2084.l,X		; 9F 84 20 7E ; Store accumulator (long,X) $7E2084.l,X [Reads: Accumulator, X Index]
	sta $7E2086.l,X		; 9F 86 20 7E ; Store accumulator (long,X) $7E2086.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	sta $7E2102.l,X		; 9F 02 21 7E ; Store accumulator (long,X) $7E2102.l,X [Reads: Accumulator, X Index]
	sta $7E2104.l,X		; 9F 04 21 7E ; Store accumulator (long,X) $7E2104.l,X [Reads: Accumulator, X Index]
	sta $7E2106.l,X		; 9F 06 21 7E ; Store accumulator (long,X) $7E2106.l,X [Reads: Accumulator, X Index]
	ldy #$3C.b		; A0 3C ; Load #$3C.b into Y register [Writes: Y Index] [Flags: ZN]
	asl $B9.b		; 06 B9 ; Arithmetic shift left $B9.b [Reads: Direct Page] [Flags: ZNC]
	mvn $9F,$9B		; 54 9B 9F ; Move block negative $9F,$9B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $029F.w,X		; 7E 9F 02 ; Rotate right $029F.w,X [Reads: X Index] [Flags: ZNC]
	jsr $9F7E.w		; 20 7E 9F ; Jump to subroutine at $9F7E.w [Writes: Stack Pointer] [Flow: call]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	ror $069F.w,X		; 7E 9F 06 ; Rotate right $069F.w,X [Reads: X Index] [Flags: ZNC]
	jsr $A07E.w		; 20 7E A0 ; Jump to subroutine at $A07E.w [Writes: Stack Pointer] [Flow: call]
	.db $42, $06		; 42 06 ; Reserved instruction
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E2182.l,X		; 9F 82 21 7E ; Store accumulator (long,X) $7E2182.l,X [Reads: Accumulator, X Index]
	sta $7E2184.l,X		; 9F 84 21 7E ; Store accumulator (long,X) $7E2184.l,X [Reads: Accumulator, X Index]
	sta $7E2186.l,X		; 9F 86 21 7E ; Store accumulator (long,X) $7E2186.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $046A.w		; AC 6A 04 ; Load $046A.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2004.l,X		; 9F 04 20 7E ; Store accumulator (long,X) $7E2004.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	sta $7E2104.l,X		; 9F 04 21 7E ; Store accumulator (long,X) $7E2104.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	sta $7E2006.l,X		; 9F 06 20 7E ; Store accumulator (long,X) $7E2006.l,X [Reads: Accumulator, X Index]
	sta $7E2102.l,X		; 9F 02 21 7E ; Store accumulator (long,X) $7E2102.l,X [Reads: Accumulator, X Index]
	sta $7E2106.l,X		; 9F 06 21 7E ; Store accumulator (long,X) $7E2106.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E2084.l,X		; 9F 84 20 7E ; Store accumulator (long,X) $7E2084.l,X [Reads: Accumulator, X Index]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E2184.l,X		; 9F 84 21 7E ; Store accumulator (long,X) $7E2184.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	sta $7E2086.l,X		; 9F 86 20 7E ; Store accumulator (long,X) $7E2086.l,X [Reads: Accumulator, X Index]
	sta $7E2182.l,X		; 9F 82 21 7E ; Store accumulator (long,X) $7E2182.l,X [Reads: Accumulator, X Index]
	sta $7E2186.l,X		; 9F 86 21 7E ; Store accumulator (long,X) $7E2186.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $80, $4C		; 80 4C ; Branch always to $80, $4C [Flow: branch]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1FFF.w		; 29 FF 1F ; Logical AND #$1FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $998A.w		; CD 8A 99 ; Compare $998A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $36		; 90 36 ; Branch if carry clear to $90, $36 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0500.w		; E9 00 05 ; Subtract #$0500.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0300.w		; E9 00 03 ; Subtract #$0300.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0010.w		; 49 10 00 ; Exclusive OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	jsr $FB61.w		; 20 61 FB ; Jump to subroutine at $FB61.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	ldy $0460.w		; AC 60 04 ; Load $0460.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $BE35.w		; 20 35 BE ; Jump to subroutine at $BE35.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0692.w		; AE 92 06 ; Load $0692.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0026.w		; C9 26 00 ; Compare #$0026.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $CF24.w,X		; BC 24 CF ; Load Y register $CF24.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsr $FD79.w		; 20 79 FD ; Jump to subroutine at $FD79.w [Writes: Stack Pointer] [Flow: call]
	ldy $CD9E.w,X		; BC 9E CD ; Load Y register $CD9E.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $19A0.w,X		; BD A0 19 ; Load $19A0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $80, $4C		; 80 4C ; Branch always to $80, $4C [Flow: branch]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1FFF.w		; 29 FF 1F ; Logical AND #$1FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $99A8.w		; CD A8 99 ; Compare $99A8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $36		; B0 36 ; Branch if carry set to $B0, $36 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0500.w		; 69 00 05 ; Add #$0500.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0300.w		; 69 00 03 ; Add #$0300.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0010.w		; 49 10 00 ; Exclusive OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	jsr $FAA0.w		; 20 A0 FA ; Jump to subroutine at $FAA0.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	ldy $0460.w		; AC 60 04 ; Load $0460.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $BE35.w		; 20 35 BE ; Jump to subroutine at $BE35.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0692.w		; AE 92 06 ; Load $0692.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $CF2C.w,X		; BC 2C CF ; Load Y register $CF2C.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsr $FD79.w		; 20 79 FD ; Jump to subroutine at $FD79.w [Writes: Stack Pointer] [Flow: call]
	ldy $CE06.w,X		; BC 06 CE ; Load Y register $CE06.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $19A0.w,X		; BD A0 19 ; Load $19A0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $80, $4C		; 80 4C ; Branch always to $80, $4C [Flow: branch]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07FF.w		; 29 FF 07 ; Logical AND #$07FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $99BA.w		; CD BA 99 ; Compare $99BA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $36		; 90 36 ; Branch if carry clear to $90, $36 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$000C.w		; E9 0C 00 ; Subtract #$000C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0010.w		; 49 10 00 ; Exclusive OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	jsr $FCD6.w		; 20 D6 FC ; Jump to subroutine at $FCD6.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	ldy $0460.w		; AC 60 04 ; Load $0460.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $BE35.w		; 20 35 BE ; Jump to subroutine at $BE35.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0692.w		; AE 92 06 ; Load $0692.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $CF34.w,X		; BC 34 CF ; Load Y register $CF34.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsr $FD79.w		; 20 79 FD ; Jump to subroutine at $FD79.w [Writes: Stack Pointer] [Flow: call]
	ldy $CE66.w,X		; BC 66 CE ; Load Y register $CE66.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $19A0.w,X		; BD A0 19 ; Load $19A0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $80, $4C		; 80 4C ; Branch always to $80, $4C [Flow: branch]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07FF.w		; 29 FF 07 ; Logical AND #$07FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $99D2.w		; CD D2 99 ; Compare $99D2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $36		; B0 36 ; Branch if carry set to $B0, $36 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0460.w		; AD 60 04 ; Load $0460.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0010.w		; 49 10 00 ; Exclusive OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	jsr $FC18.w		; 20 18 FC ; Jump to subroutine at $FC18.w [Writes: Stack Pointer] [Flow: call]
	jsr $F764.w		; 20 64 F7 ; Jump to subroutine at $F764.w [Writes: Stack Pointer] [Flow: call]
	ldy $0460.w		; AC 60 04 ; Load $0460.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $BE35.w		; 20 35 BE ; Jump to subroutine at $BE35.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0460.w		; 8D 60 04 ; Store accumulator to $0460.w [Reads: Accumulator]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $1980.w,X		; BD 80 19 ; Load $1980.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0692.w		; AE 92 06 ; Load $0692.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0044.w		; C9 44 00 ; Compare #$0044.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $CF3C.w,X		; BC 3C CF ; Load Y register $CF3C.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsr $FD79.w		; 20 79 FD ; Jump to subroutine at $FD79.w [Writes: Stack Pointer] [Flow: call]
	ldy $CEC6.w,X		; BC C6 CE ; Load Y register $CEC6.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $0460.w		; AE 60 04 ; Load $0460.w into X register [Writes: X Index] [Flags: ZN]
	lda $19A0.w,X		; BD A0 19 ; Load $19A0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2102.l,X		; 9F 02 21 7E ; Store accumulator (long,X) $7E2102.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2182.l,X		; 9F 82 21 7E ; Store accumulator (long,X) $7E2182.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$56.b		; A2 56 ; Load #$56.b into X register [Writes: X Index] [Flags: ZN]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $AECD.w,X		; 9E CD AE ; Store zero to $AECD.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $BD.b		; 04 BD ; Test and set bits $BD.b [Reads: Accumulator] [Flags: Z]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0460.w		; AC 60 04 ; Load $0460.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $1980.w,Y		; B9 80 19 ; Load $1980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $068C.w		; AD 8C 06 ; Load $068C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $98C0.w,Y		; 39 C0 98 ; AND accumulator with memory $98C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $9A02.w,X		; BD 02 9A ; Load $9A02.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$EA.b		; A0 EA ; Load #$EA.b into Y register [Writes: Y Index] [Flags: ZN]
	and ($20.b),Y		; 31 20 ; AND accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $54AD.w,X		; FD AD 54 ; Subtract with carry $54AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $3A.b		; 04 3A ; Test and set bits $3A.b [Reads: Accumulator] [Flags: Z]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	sta $7E2200.l,X		; 9F 00 22 7E ; Store accumulator (long,X) $7E2200.l,X [Reads: Accumulator, X Index]
	sta $7E2280.l,X		; 9F 80 22 7E ; Store accumulator (long,X) $7E2280.l,X [Reads: Accumulator, X Index]
	sta $7E2300.l,X		; 9F 00 23 7E ; Store accumulator (long,X) $7E2300.l,X [Reads: Accumulator, X Index]
	sta $7E2380.l,X		; 9F 80 23 7E ; Store accumulator (long,X) $7E2380.l,X [Reads: Accumulator, X Index]
	sta $7E2400.l,X		; 9F 00 24 7E ; Store accumulator (long,X) $7E2400.l,X [Reads: Accumulator, X Index]
	sta $7E2480.l,X		; 9F 80 24 7E ; Store accumulator (long,X) $7E2480.l,X [Reads: Accumulator, X Index]
	sta $7E2500.l,X		; 9F 00 25 7E ; Store accumulator (long,X) $7E2500.l,X [Reads: Accumulator, X Index]
	sta $7E2580.l,X		; 9F 80 25 7E ; Store accumulator (long,X) $7E2580.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $CA		; D0 CA ; Branch if not equal to $D0, $CA [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $9B52.w,Y		; B9 52 9B ; Load $9B52.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $9B54.w,Y		; B9 54 9B ; Load $9B54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $9B56.w,Y		; B9 56 9B ; Load $9B56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $9B58.w,Y		; B9 58 9B ; Load $9B58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	lda $9B5A.w,Y		; B9 5A 9B ; Load $9B5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2200.l,X		; 9F 00 22 7E ; Store accumulator (long,X) $7E2200.l,X [Reads: Accumulator, X Index]
	lda $9B5C.w,Y		; B9 5C 9B ; Load $9B5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2280.l,X		; 9F 80 22 7E ; Store accumulator (long,X) $7E2280.l,X [Reads: Accumulator, X Index]
	lda $9B5E.w,Y		; B9 5E 9B ; Load $9B5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2300.l,X		; 9F 00 23 7E ; Store accumulator (long,X) $7E2300.l,X [Reads: Accumulator, X Index]
	lda $9B60.w,Y		; B9 60 9B ; Load $9B60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2380.l,X		; 9F 80 23 7E ; Store accumulator (long,X) $7E2380.l,X [Reads: Accumulator, X Index]
	lda $9B62.w,Y		; B9 62 9B ; Load $9B62.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2400.l,X		; 9F 00 24 7E ; Store accumulator (long,X) $7E2400.l,X [Reads: Accumulator, X Index]
	lda $9B64.w,Y		; B9 64 9B ; Load $9B64.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2480.l,X		; 9F 80 24 7E ; Store accumulator (long,X) $7E2480.l,X [Reads: Accumulator, X Index]
	lda $9B66.w,Y		; B9 66 9B ; Load $9B66.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2500.l,X		; 9F 00 25 7E ; Store accumulator (long,X) $7E2500.l,X [Reads: Accumulator, X Index]
	lda $9B68.w,Y		; B9 68 9B ; Load $9B68.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E2580.l,X		; 9F 80 25 7E ; Store accumulator (long,X) $7E2580.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $A0		; D0 A0 ; Branch if not equal to $D0, $A0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7E2002.l,X		; BF 02 20 7E ; Load long $7E2002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7E2004.l,X		; BF 04 20 7E ; Load long $7E2004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7E2006.l,X		; BF 06 20 7E ; Load long $7E2006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: ZN]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $C903.w,X		; FE 03 C9 ; Increment memory $C903.w,X [Reads: X Index] [Flags: ZN]
	inc $F000.w		; EE 00 F0 ; Increment $F000.w [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$00FE.w		; C9 FE 00 ; Compare #$00FE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2001.l,X		; 9F 01 20 7F ; Store accumulator (long,X) $7F2001.l,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2002.l,X		; 9F 02 20 7F ; Store accumulator (long,X) $7F2002.l,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F2003.l,X		; 9F 03 20 7F ; Store accumulator (long,X) $7F2003.l,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $9D		; D0 9D ; Branch if not equal to $D0, $9D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $9C.b		; A5 9C ; Load $9C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$CF1F.w		; 29 1F CF ; Logical AND #$CF1F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$C0.b],Y		; 17 C0 ; OR accumulator with memory (long indexed) [$C0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $17F0.w,X		; 7E F0 17 ; Rotate right $17F0.w,X [Reads: X Index] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ora #$8520.w		; 09 20 85 ; Logical OR #$8520.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $1F29.w		; [PATTERN: Memory clearing operation] 9C 29 1F ; Store zero to $1F29.w
	ora #$8540.w		; 09 40 85 ; Logical OR #$8540.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F29.w,X		; 9D 29 1F ; Store accumulator to $1F29.w,X [Reads: Accumulator, X Index]
	ora #$8580.w		; 09 80 85 ; Logical OR #$8580.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $AD6B.w,X		; 9E 6B AD ; Store zero to $AD6B.w,X [Reads: X Index]
	eor [$06.b]		; 47 06 ; Exclusive OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$C910.w		; 69 10 C9 ; Add #$C910.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy #$D0.b		; C0 D0 ; Compare #$D0.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($EE.b),Y		; 11 EE ; OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$06.b]		; 47 06 ; Exclusive OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$D010.w		; E9 10 D0 ; Subtract #$D010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $9C.b,S		; 03 9C ; OR accumulator with stack relative $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$06.b]		; 47 06 ; Exclusive OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	lda #$8509.w		; A9 09 85 ; Load #$8509.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $AF.b,X		; 94 AF ; Store Y register $AF.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $094A.w,X		; 7E 4A 09 ; Rotate right $094A.w,X [Reads: X Index] [Flags: ZNC]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $6B.b,X		; 95 6B ; Store accumulator to $6B.b,X [Reads: Accumulator, X Index]
	lda #$8D01.w		; A9 01 8D ; Load #$8D01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ror $04.b,X		; 76 04 ; Rotate right $04.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$8510.w		; 69 10 85 ; Add #$8510.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$AD.b		; A0 AD ; Load #$AD.b into Y register [Writes: Y Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A9.b		; 04 A9 ; Test and set bits $A9.b [Reads: Accumulator] [Flags: Z]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $7A9C.w		; EE 9C 7A ; Increment $7A9C.w [Flags: ZN]
	tsb $5C.b		; 04 5C ; Test and set bits $5C.b [Reads: Accumulator] [Flags: Z]
	wai		; CB ; Wait for interrupt
	clv		; B8 ; Clear overflow flag [Flags: V]
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $E2A5.w		; 20 A5 E2 ; Jump to subroutine at $E2A5.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC180.l		; 8F 80 C1 7E ; Store accumulator (long) $7EC180.l [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC182.l		; 8F 82 C1 7E ; Store accumulator (long) $7EC182.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC184.l		; 8F 84 C1 7E ; Store accumulator (long) $7EC184.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC186.l		; 8F 86 C1 7E ; Store accumulator (long) $7EC186.l [Reads: Accumulator]
	lda $0600.w		; AD 00 06 ; Load $0600.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC188.l		; 8F 88 C1 7E ; Store accumulator (long) $7EC188.l [Reads: Accumulator]
	lda $0604.w		; AD 04 06 ; Load $0604.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC18A.l		; 8F 8A C1 7E ; Store accumulator (long) $7EC18A.l [Reads: Accumulator]
	lda $0608.w		; AD 08 06 ; Load $0608.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC18C.l		; 8F 8C C1 7E ; Store accumulator (long) $7EC18C.l [Reads: Accumulator]
	lda $060C.w		; AD 0C 06 ; Load $060C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC18E.l		; 8F 8E C1 7E ; Store accumulator (long) $7EC18E.l [Reads: Accumulator]
	lda $0610.w		; AD 10 06 ; Load $0610.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC190.l		; 8F 90 C1 7E ; Store accumulator (long) $7EC190.l [Reads: Accumulator]
	lda $0612.w		; AD 12 06 ; Load $0612.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC192.l		; 8F 92 C1 7E ; Store accumulator (long) $7EC192.l [Reads: Accumulator]
	lda $0614.w		; AD 14 06 ; Load $0614.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC194.l		; 8F 94 C1 7E ; Store accumulator (long) $7EC194.l [Reads: Accumulator]
	lda $0616.w		; AD 16 06 ; Load $0616.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC196.l		; 8F 96 C1 7E ; Store accumulator (long) $7EC196.l [Reads: Accumulator]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC198.l		; 8F 98 C1 7E ; Store accumulator (long) $7EC198.l [Reads: Accumulator]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC19A.l		; 8F 9A C1 7E ; Store accumulator (long) $7EC19A.l [Reads: Accumulator]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC19C.l		; 8F 9C C1 7E ; Store accumulator (long) $7EC19C.l [Reads: Accumulator]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC19E.l		; 8F 9E C1 7E ; Store accumulator (long) $7EC19E.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC1A6.l		; 8F A6 C1 7E ; Store accumulator (long) $7EC1A6.l [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC1A7.l		; 8F A7 C1 7E ; Store accumulator (long) $7EC1A7.l [Reads: Accumulator]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC1A8.l		; 8F A8 C1 7E ; Store accumulator (long) $7EC1A8.l [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC1A9.l		; 8F A9 C1 7E ; Store accumulator (long) $7EC1A9.l [Reads: Accumulator]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC1AA.l		; 8F AA C1 7E ; Store accumulator (long) $7EC1AA.l [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $02E0.w		; 9C E0 02 ; Store zero to $02E0.w
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $1B.b		; A6 1B ; Load $1B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $1B.b		; A6 1B ; Load $1B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	cmp #$A8.b		; C9 A8 ; Compare #$A8.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $FF		; Opcode FF overrunning bank boundry at 00FFFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 00FFFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 00FFFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ENDS
