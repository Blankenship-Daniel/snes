.BANK 3 SLOT 0
.ORG $0000

.SECTION "Bank3" FORCE

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$09.b]		; 07 09 ; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0104.w,Y		; 19 04 01 ; OR accumulator with memory $0104.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $28.b		; 26 28 ; Rotate left $28.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$17.b		; 29 17 ; Logical AND #$17.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$19.b],Y		; 17 19 ; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0000.w,X		; 3C 00 00 ; Test bits $0000.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rol $3F34.w,X		; 3E 34 3F ; Rotate left $3F34.w,X [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($4E.b),Y		; 31 4E ; AND accumulator with memory ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($51.b)		; 32 51 ; AND accumulator with memory (indirect) ($51.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	mvn $57,$55		; 54 55 57 ; Move block negative $57,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $62		; 30 62 ; Branch if minus to $30, $62 [Flow: branch]
	stz $04.b		; 64 04 ; Store zero to $04.b
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($5F.b)		; 32 5F ; AND accumulator with memory (indirect) ($5F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $5E.b,S		; 03 5E ; OR accumulator with stack relative $5E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $34.b		; 04 34 ; Test and set bits $34.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $69.b,X		; 34 69 ; Test bits $69.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsb $30.b		; 04 30 ; Test and set bits $30.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $15531A.l,X		; 5F 1A 53 15 ; Exclusive OR accumulator with memory (long,X) $15531A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $34346F.l		; 2F 6F 34 34 ; AND accumulator with memory (long) $34346F.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $31.b		; 26 31 ; Rotate left $31.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $1A.b		; 64 1A ; Store zero to $1A.b
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $331565.l,X		; 3F 65 15 33 ; AND accumulator with memory (long,X) $331565.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1A69.w,X		; 3D 69 1A ; AND accumulator with memory $1A69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $0000.w,X		; 3E 00 00 ; Rotate left $0000.w,X [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $000004.l		; 2F 04 00 00 ; AND accumulator with memory (long) $000004.l [Writes: Accumulator] [Flags: ZN]
	lsr $22.b,X		; 56 22 ; Logical shift right $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $75.b		; 45 75 ; Exclusive OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($41.b)		; 32 41 ; AND accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $56.b		; 04 56 ; Test and set bits $56.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $5F1D.w		; 2D 1D 5F ; Logical AND $5F1D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	ora $5D0000.l		; 0F 00 00 5D ; OR accumulator with memory (long) $5D0000.l [Writes: Accumulator] [Flags: ZN]
	mvn $2F,$31		; 54 31 2F ; Move block negative $2F,$31 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $04.b,S		; 63 04 ; Add with carry (stack relative) $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $343B.w,Y		; 79 3B 34 ; Add $343B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($0000.w,X)		; 7C 00 00 ; Jump indirect indexed to ($0000.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $52		; 50 52 ; Branch if overflow clear to $50, $52 [Flow: branch]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $005F.w,X		; 5E 5F 00 ; Logical shift right $005F.w,X [Reads: X Index] [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2A.b		; 65 2A ; Add $2A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $53.b,X		; 34 53 ; Test bits $53.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($8C.b)		; 72 8C ; Add with carry (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $9290.w		; 8E 90 92 ; Store X register to $9290.w [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($93.b),Y		; 91 93 ; Store accumulator ($93.b),Y [Reads: Accumulator, Direct Page, Y Index]
	rol $0034.w,X		; 3E 34 00 ; Rotate left $0034.w,X [Reads: X Index] [Flags: ZNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $9E.b,X		; 34 9E ; Test bits $9E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $A10000.l,X		; 9F 00 00 A1 ; Store accumulator (long,X) $A10000.l,X [Reads: Accumulator, X Index]
	bit $6A.b,X		; 34 6A ; Test bits $6A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $41.b		; 00 41 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $34.b		; A4 34 ; Load $34.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($34.b),Y		; 71 34 ; Add with carry ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $1B0000.l,X		; 5F 00 00 1B ; Exclusive OR accumulator with memory (long,X) $1B0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($96.b),Y		; 71 96 ; Add with carry ($96.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $40.b,X		; 34 40 ; Test bits $40.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	mvn $00,$5F		; 54 5F 00 ; Move block negative $00,$5F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $B3.b		; 04 B3 ; Test and set bits $B3.b [Reads: Accumulator] [Flags: Z]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $75.b,X		; B5 75 ; Load $75.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $0000.w		; 4E 00 00 ; Logical shift right $0000.w [Flags: ZNC]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $30.b,S		; 63 30 ; Add with carry (stack relative) $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $3BBE.w,X		; BC BE 3B ; Load Y register $3BBE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	sta ($34.b,X)		; 81 34 ; Store accumulator ($34.b,X) [Reads: Accumulator, X Index, Direct Page]
	stx $34.b,Y		; 96 34 ; Store X register $34.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($3D.b,X)		; C1 3D ; Compare accumulator ($3D.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	and $00002F.l,X		; 3F 2F 00 00 ; AND accumulator with memory (long,X) $00002F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $71.b,X		; 34 71 ; Test bits $71.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta [$5F.b],Y		; 97 5F ; Store accumulator (long indexed) [$5F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($8140.w)		; 6C 40 81 ; Jump indirect to ($8140.w) [Flow: jump]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $3F34.w		; 20 34 3F ; Jump to subroutine at $3F34.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $34.b		; 04 34 ; Test and set bits $34.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lsr $00.b,X		; 56 00 ; Logical shift right $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	bit $54.b,X		; 34 54 ; Test bits $54.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $690456.l,X		; 5F 56 04 69 ; Exclusive OR accumulator with memory (long,X) $690456.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $8B34.w,Y		; 59 34 8B ; Exclusive OR accumulator with memory $8B34.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$6D.b]		; 67 6D ; Add with carry (long) [$6D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4B.b,X		; 34 4B ; Test bits $4B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $C3.b		; 26 C3 ; Rotate left $C3.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C7.b		; C5 C7 ; Compare $C7.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp #$CA.b		; C9 CA ; Compare #$CA.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $CD.b		; 02 CD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $D1D0.w		; CE D0 D1 ; Decrement $D1D0.w [Flags: ZN]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$4E.b]		; C7 4E ; Compare accumulator (long) [$4E.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $00.b,X		; D6 00 ; Decrement memory $00.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $CADB.w,Y		; D9 DB CA ; Compare accumulator $CADB.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $DCDC.w,X		; DD DC DC ; Compare accumulator $DCDC.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc ($DB.b,X)		; E1 DB ; Subtract with carry ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $E3.b		; E4 E3 ; Compare $E3.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $34.b		; C5 34 ; Compare $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $36.b		; 86 36 ; Store X register to $36.b [Reads: X Index]
	nop		; EA ; No operation
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $CE.b,X		; 34 CE ; Test bits $CE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $D7.b,X		; 34 D7 ; Test bits $D7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $EE.b,X		; 36 EE ; Rotate left $EE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $000036.l		; EF 36 00 00 ; Subtract with carry (long) $000036.l [Writes: Accumulator] [Flags: ZVNC]
	adc $02BE.w,Y		; 79 BE 02 ; Add $02BE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($0000.w,X)		; 7C 00 00 ; Jump indirect indexed to ($0000.w,X) [Reads: X Index] [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol $F4.b,X		; 36 F4 ; Rotate left $F4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $7F0000.l		; AF 00 00 7F ; Load long $7F0000.l into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$34.b]		; 07 34 ; OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $0076.w		; 1C 76 00 ; Test and reset bits $0076.w [Reads: Accumulator] [Flags: Z]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $05.b,X		; 34 05 ; Test bits $05.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $1134.w,Y		; 79 34 11 ; Add $1134.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $DA.b,X		; 95 DA ; Store accumulator to $DA.b,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $7C06.w		; 0C 06 7C ; Test and set bits $7C06.w [Reads: Accumulator] [Flags: Z]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $AE.b,X		; 34 AE ; Test bits $AE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $0007.w,X		; 7E 07 00 ; Rotate right $0007.w,X [Reads: X Index] [Flags: ZNC]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $DA.b,X		; 95 DA ; Store accumulator to $DA.b,X [Reads: Accumulator, X Index]
	bit #$00.b		; 89 00 ; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $1001.w,Y		; 79 01 10 ; Add $1001.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($34.b,X)		; E1 34 ; Subtract with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $0000.w		; 9C 00 00 ; Store zero to $0000.w
	bit $C4.b,X		; 34 C4 ; Test bits $C4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $00.b,X		; D5 00 ; Compare accumulator $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $171D.w		; 1C 1D 17 ; Test and reset bits $171D.w [Reads: Accumulator] [Flags: Z]
	ora $1111.w,X		; 1D 11 11 ; OR accumulator with memory $1111.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($1A.b),Y		; 11 1A ; OR accumulator with memory ($1A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $2D1A.w		; 20 1A 2D ; Jump to subroutine at $2D1A.w [Writes: Stack Pointer] [Flow: call]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $0034.w		; 2E 34 00 ; Rotate left $0034.w [Flags: ZNC]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	bit $27.b,X		; 34 27 ; Test bits $27.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	and $1111.w		; 2D 11 11 ; Logical AND $1111.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $3A34.w,Y		; 39 34 3A ; AND accumulator with memory $3A34.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $1111.w,X		; 3C 11 11 ; Test bits $1111.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $3E3D.w,X		; 3D 3D 3E ; AND accumulator with memory $3E3D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $1134.w,Y		; 39 34 11 ; AND accumulator with memory $1134.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	and [$32.b]		; 27 32 ; AND accumulator with memory (long) [$32.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $4012.w		; 4D 12 40 ; Exclusive OR $4012.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($11.b)		; 52 11 ; Exclusive OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($52.b),Y		; 11 52 ; OR accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($55.b,S),Y		; 53 55 ; XOR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $11.b,X		; 55 11 ; Exclusive OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b),Y		; 11 20 ; OR accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $1111.w,Y		; 59 11 11 ; Exclusive OR accumulator with memory $1111.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $1A2A.w		; 20 2A 1A ; Jump to subroutine at $1A2A.w [Writes: Stack Pointer] [Flow: call]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($25.b),Y		; 11 25 ; OR accumulator with memory ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and #$11.b		; 29 11 ; Logical AND #$11.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $5B.b,X		; 34 5B ; Test bits $5B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$61.b],Y		; 17 61 ; OR accumulator with memory (long indexed) [$61.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1134.w,Y		; 39 34 11 ; AND accumulator with memory $1134.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $5C		; 10 5C ; Branch if plus to $10, $5C [Flow: branch]
	adc $65.b,S		; 63 65 ; Add with carry (stack relative) $65.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc [$11.b]		; 67 11 ; Add with carry (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$75.b		; 69 75 ; Add #$75.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp #$76.b		; C9 76 ; Compare #$76.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $1000.w		; CE 00 10 ; Decrement $1000.w [Flags: ZN]
	adc $6571AD.l		; 6F AD 71 65 ; Add with carry (long) $6571AD.l [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	adc $53.b		; 65 53 ; Add $53.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $4E.b,X		; 75 4E ; Add $4E.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $4B.b,X		; 34 4B ; Test bits $4B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $DB.b,X		; 34 DB ; Test bits $DB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $7B.b		; C4 7B ; Compare $7B.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	stz $017E.w,X		; 9E 7E 01 ; Store zero to $017E.w,X [Reads: X Index]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $C9.b		; 84 C9 ; Store Y register to $C9.b [Reads: Y Index]
	eor ($01.b,X)		; 41 01 ; Exclusive OR accumulator with memory ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp ($53.b),Y		; D1 53 ; Compare accumulator ($53.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	jmp.w [$C853]		; DC 53 C8 ; Jump long indirect [$C853] [Flow: jump]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $41.b,S		; E3 41 ; Subtract stack-relative $41.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	and $014E.w,Y		; 39 4E 01 ; AND accumulator with memory $014E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora ($87.b)		; 12 87 ; OR accumulator with memory (indirect) ($87.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit #$8B.b		; 89 8B ; Test bits #$8B.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $118D.w		; 8D 8D 11 ; Store accumulator to $118D.w [Reads: Accumulator]
	ora ($8B.b),Y		; 11 8B ; OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $92		; 90 92 ; Branch if carry clear to $90, $92 [Flow: branch]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($59.b),Y		; 11 59 ; OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $1D.b,X		; 16 1D ; Arithmetic shift left $1D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $1111.w,X		; 9D 11 11 ; Store accumulator to $1111.w,X [Reads: Accumulator, X Index]
	stz $9E9C.w		; 9C 9C 9E ; Store zero to $9E9C.w
	sta $921111.l,X		; 9F 11 11 92 ; Store accumulator (long,X) $921111.l,X [Reads: Accumulator, X Index]
	asl $5914.w,X		; 1E 14 59 ; Arithmetic shift left $5914.w,X [Reads: X Index] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $2C		; 10 2C ; Branch if plus to $10, $2C [Flow: branch]
	bit $A9.b		; 24 A9 ; Test bits $A9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$A7.b]		; 87 A7 ; Store accumulator (long) [$A7.b] [Reads: Accumulator, Direct Page]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $92AE.w		; AD AE 92 ; Load $92AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $1E.b,X		; 34 1E ; Test bits $1E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($3E.b),Y		; 11 3E ; OR accumulator with memory ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $873C.w,X		; 3D 3C 87 ; AND accumulator with memory $873C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $96.b,X		; 94 96 ; Store Y register $96.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1526.w,Y		; 99 26 15 ; Store accumulator to $1526.w,Y [Reads: Accumulator, Y Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $A924.w		; 2C 24 A9 ; Test bits $A924.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sta [$11.b]		; 87 11 ; Store accumulator (long) [$11.b] [Reads: Accumulator, Direct Page]
	ora ($BC.b,X)		; 01 BC ; Logical OR ($BC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx $C1BF.w,Y		; BE BF C1 ; Load X register $C1BF.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $92BE.w,X		; BC BE 92 ; Load Y register $92BE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C2.b),Y		; 11 C2 ; OR accumulator with memory ($C2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $D6		; 10 D6 ; Branch if plus to $10, $D6 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp [$D9.b],Y		; D7 D9 ; Compare accumulator (long indexed) [$D9.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jmp.w [$119E]		; DC 9E 11 ; Jump long indirect [$119E] [Flow: jump]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $34.b		; C6 34 ; Decrement $34.b [Reads: Direct Page] [Flags: ZN]
	ldy $0000.w		; AC 00 00 ; Load $0000.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc [$6C.b]		; E7 6C ; Subtract with carry (long) [$6C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $C4, $11		; 82 C4 11 ; Branch always long to $82, $C4, $11 [Flow: branch]
	.db $10, $EA		; 10 EA ; Branch if plus to $10, $EA [Flow: branch]
	sbc [$E3.b]		; E7 E3 ; Subtract with carry (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $06.b,X		; D5 06 ; Compare accumulator $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($67.b),Y		; 11 67 ; OR accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $ED.b,X		; 35 ED ; Logical AND $ED.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	pea $F5A5.w		; F4 A5 F5 ; Push absolute address $F5A5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($CA.b,X)		; A1 CA ; Load accumulator ($CA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$AD.b],Y		; F7 AD ; Subtract with carry (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E7.b,X)		; 01 E7 ; Logical OR ($E7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($34.b,S),Y		; 53 34 ; XOR accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($10.b,X)		; 21 10 ; Logical AND ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $34.b		; A4 34 ; Load $34.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $C4.b		; 04 C4 ; Test and set bits $C4.b [Reads: Accumulator] [Flags: Z]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $DB.b,X		; 34 DB ; Test bits $DB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $F5.b		; C4 F5 ; Compare $F5.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $EE0C.w,X		; 9E 0C EE ; Store zero to $EE0C.w,X [Reads: X Index]
	ora $1202.w		; 0D 02 12 ; Logical OR $1202.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $3434.w		; 0E 34 34 ; Arithmetic shift left $3434.w [Flags: ZNC]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	cop $11.b		; 02 11 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $04.b,X		; 34 04 ; Test bits $04.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($05.b),Y		; 11 05 ; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $101034.l,X		; FF 34 10 10 ; Subtract with carry (long,X) $101034.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $C4A334.l		; 0F 34 A3 C4 ; OR accumulator with memory (long) $C4A334.l [Writes: Accumulator] [Flags: ZN]
	jsr $D200.w		; 20 00 D2 ; Jump to subroutine at $D200.w [Writes: Stack Pointer] [Flow: call]
	bit $4E.b,X		; 34 4E ; Test bits $4E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $1100.w,X		; FD 00 11 ; Subtract with carry $1100.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $9F.b,X		; 16 9F ; Arithmetic shift left $9F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc [$A7.b],Y		; F7 A7 ; Subtract with carry (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $C410.w		; 20 10 C4 ; Jump to subroutine at $C410.w [Writes: Stack Pointer] [Flow: call]
	bit $4F.b,X		; 34 4F ; Test bits $4F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($CE.b),Y		; 11 CE ; OR accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	ora $121101.l,X		; 1F 01 11 12 ; Logical OR long $121101.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($10.b,X)		; 21 10 ; Logical AND ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($11.b,S),Y		; 13 11 ; OR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b),Y		; 11 20 ; OR accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1212.w,Y		; 19 12 12 ; OR accumulator with memory $1212.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $1110.w		; 4C 10 11 ; Jump to $1110.w [Flow: jump]
	ora ($1F.b),Y		; 11 1F ; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$18		; C2 18
	clc		; 18 ; Clear carry flag [Flags: C]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	adc $58.b		; 65 58 ; Add $58.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $26.b,X		; 34 26 ; Test bits $26.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $37.b,X		; 36 37 ; Rotate left $37.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$36.b],Y		; 37 36 ; AND accumulator with memory (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $66.b,X		; 34 66 ; Test bits $66.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $45.b,X		; 35 45 ; Logical AND $45.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($11.b)		; B2 11 ; Load accumulator (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($B4.b),Y		; 11 B4 ; OR accumulator with memory ($B4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $126A.w		; 1C 6A 12 ; Test and reset bits $126A.w [Reads: Accumulator] [Flags: Z]
	and ($4B.b,X)		; 21 4B ; Logical AND ($4B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($2C.b),Y		; 51 2C ; Exclusive OR accumulator with memory ($2C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($5C.b),Y		; 11 5C ; OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	.db $50, $C9		; 50 C9 ; Branch if overflow clear to $50, $C9 [Flow: branch]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1149.w,Y		; 19 49 11 ; OR accumulator with memory $1149.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($CE.b,X)		; 41 CE ; Exclusive OR accumulator with memory ($CE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvn $12,$57		; 54 57 12 ; Move block negative $12,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5BC8.w		; 4D C8 5B ; Exclusive OR $5BC8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($10.b)		; 32 10 ; AND accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $1149.w		; 4D 49 11 ; Exclusive OR $1149.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($20.b),Y		; 11 20 ; OR accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($1C.b),Y		; 11 1C ; OR accumulator with memory ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($58.b),Y		; 71 58 ; Add with carry ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	ora ($D5.b)		; 12 D5 ; OR accumulator with memory (indirect) ($D5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b),Y		; 11 20 ; OR accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ora $1111.w,X		; 1D 11 11 ; OR accumulator with memory $1111.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1A.b)		; 12 1A ; OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($42.b)		; 12 42 ; OR accumulator with memory (indirect) ($42.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$32.b]		; 27 32 ; AND accumulator with memory (long) [$32.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $12.b,S		; 23 12 ; AND accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $111159.l,X		; 1F 59 11 11 ; Logical OR long $111159.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	and ($3F.b,S),Y		; 33 3F ; AND accumulator (stack relative indirect indexed) ($3F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($11.b,X)		; 41 11 ; Exclusive OR accumulator with memory ($11.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($32.b),Y		; 11 32 ; OR accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $4D14.w		; 2D 14 4D ; Logical AND $4D14.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $1C.b,X		; 55 1C ; Exclusive OR accumulator with memory $1C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rep #$01		; C2 01 ; Reset processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $0149.w		; 4C 49 01 ; Jump to $0149.w [Flow: jump]
	ora ($57.b),Y		; 11 57 ; OR accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $D566.w		; 1C 66 D5 ; Test and reset bits $D566.w [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $4C26.w		; 2E 26 4C ; Rotate left $4C26.w [Flags: ZNC]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0014D2.l		; CF D2 14 00 ; Compare accumulator (long) $0014D2.l [Reads: Accumulator] [Flags: ZNC]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $C834.w		; 1C 34 C8 ; Test and reset bits $C834.w [Reads: Accumulator] [Flags: Z]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$C8DD]		; DC DD C8 ; Jump long indirect [$C8DD] [Flow: jump]
	lsr $0100.w,X		; 5E 00 01 ; Logical shift right $0100.w,X [Reads: X Index] [Flags: ZNC]
	lsr $1D60.w,X		; 5E 60 1D ; Logical shift right $1D60.w,X [Reads: X Index] [Flags: ZNC]
	rol $11.b		; 26 11 ; Rotate left $11.b [Reads: Direct Page] [Flags: ZNC]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C8.b		; E5 C8 ; Subtract $C8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $20.b		; C6 20 ; Decrement $20.b [Reads: Direct Page] [Flags: ZN]
	.db $50, $10		; 50 10 ; Branch if overflow clear to $50, $10 [Flow: branch]
	and ($C9.b,X)		; 21 C9 ; Logical AND ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$C6.b		; C9 C6 ; Compare #$C6.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $2D1C.w		; 20 1C 2D ; Jump to subroutine at $2D1C.w [Writes: Stack Pointer] [Flow: call]
	rol $222F.w		; 2E 2F 22 ; Rotate left $222F.w [Flags: ZNC]
	jsl $ECE0C9.l		; 22 C9 E0 EC ; Jump to subroutine long $ECE0C9.l [Writes: Stack Pointer] [Flow: call]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	eor $1F2B.w,Y		; 59 2B 1F ; Exclusive OR accumulator with memory $1F2B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $11.b		; 25 11 ; Logical AND $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b,S),Y		; 13 34 ; OR accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $27.b,X		; 34 27 ; Test bits $27.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($D5.b),Y		; 11 D5 ; OR accumulator with memory ($D5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jmp $121232.l		; 5C 32 12 12 ; Jump long to $121232.l [Flow: jump]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$34.b]		; 67 34 ; Add with carry (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $5BC610.l		; 22 10 C6 5B ; Jump to subroutine long $5BC610.l [Writes: Stack Pointer] [Flow: call]
	bit $32.b,X		; 34 32 ; Test bits $32.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $67.b,X		; 36 67 ; Rotate left $67.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $112155.l		; 4F 55 21 11 ; Exclusive OR accumulator with memory (long) $112155.l [Writes: Accumulator] [Flags: ZN]
	cmp #$78.b		; C9 78 ; Compare #$78.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $2F.b,X		; 34 2F ; Test bits $2F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$34.b],Y		; 37 34 ; AND accumulator with memory (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	and ($4D.b)		; 32 4D ; AND accumulator with memory (indirect) ($4D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$11.b		; C9 11 ; Compare #$11.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $86		; 10 86 ; Branch if plus to $10, $86 [Flow: branch]
	and [$34.b],Y		; 37 34 ; AND accumulator with memory (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $12.b,X		; 34 12 ; Test bits $12.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C9.b,S),Y		; 13 C9 ; OR accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($11.b),Y		; 31 11 ; AND accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $34.b		; 02 34 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $1034.w		; 6D 34 10 ; Add $1034.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $10.b		; 26 10 ; Rotate left $10.b [Reads: Direct Page] [Flags: ZNC]
	and ($57.b,X)		; 21 57 ; Logical AND ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($C8.b,X)		; 41 C8 ; Exclusive OR accumulator with memory ($C8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$11.b		; C9 11 ; Compare #$11.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $21343B.l		; 2F 3B 34 21 ; AND accumulator with memory (long) $21343B.l [Writes: Accumulator] [Flags: ZN]
	jsr $121A.w		; 20 1A 12 ; Jump to subroutine at $121A.w [Writes: Stack Pointer] [Flow: call]
	lsr $112E.w		; 4E 2E 11 ; Logical shift right $112E.w [Flags: ZNC]
	ora ($EE.b),Y		; 11 EE ; OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $33		; 10 33 ; Branch if plus to $10, $33 [Flow: branch]
	eor #$11.b		; 49 11 ; Exclusive OR #$11.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $024B3F.l,X		; 3F 3F 4B 02 ; AND accumulator with memory (long,X) $024B3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b,X)		; 21 31 ; Logical AND ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp $5710.w		; 4C 10 57 ; Jump to $5710.w [Flow: jump]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $50, $54		; 50 54 ; Branch if overflow clear to $50, $54 [Flow: branch]
	eor $1111.w,Y		; 59 11 11 ; Exclusive OR accumulator with memory $1111.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5420.w,Y		; 59 20 54 ; Exclusive OR accumulator with memory $5420.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $2F		; 10 2F ; Branch if plus to $10, $2F [Flow: branch]
	adc ($3F.b),Y		; 71 3F ; Add with carry ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$03.b		; 89 03 ; Test bits #$03.b with accumulator [Reads: Accumulator] [Flags: Z]
	and ($9A.b,S),Y		; 33 9A ; AND accumulator (stack relative indirect indexed) ($9A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $6434.w		; 6E 34 64 ; Rotate right $6434.w [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$34.b],Y		; 17 34 ; OR accumulator with memory (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora $81.b,S		; 03 81 ; OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $0000.w,X		; 3E 00 00 ; Rotate left $0000.w,X [Reads: X Index] [Flags: ZNC]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora [$4C.b],Y		; 17 4C ; OR accumulator with memory (long indexed) [$4C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$32.b]		; 07 32 ; OR accumulator with memory (long) [$32.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc [$69.b]		; 67 69 ; Add with carry (long) [$69.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	jmp $0034.w		; 4C 34 00 ; Jump to $0034.w [Flow: jump]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $18.b,X		; 15 18 ; OR accumulator with memory $18.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $00044B.l,X		; 7F 4B 04 00 ; Add long $00044B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $074D.w		; 2E 4D 07 ; Rotate left $074D.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $70, $04		; 70 04 ; Branch if overflow set to $70, $04 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $206439.l		; 5C 39 64 20 ; Jump long to $206439.l [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	and $04.b,X		; 35 04 ; Logical AND $04.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $347C27.l,X		; 3F 27 7C 34 ; AND accumulator with memory (long,X) $347C27.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $47.b		; 65 47 ; Add $47.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $B0, $54		; B0 54 ; Branch if carry set to $B0, $54 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $0034.w,X		; 1D 34 00 ; OR accumulator with memory $0034.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $3F42.w		; 9C 42 3F ; Store zero to $3F42.w
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $4692.w		; 8D 92 46 ; Store accumulator to $4692.w [Reads: Accumulator]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr $349E.w		; 20 9E 34 ; Jump to subroutine at $349E.w [Writes: Stack Pointer] [Flow: call]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	eor $00002D.l		; 4F 2D 00 00 ; Exclusive OR accumulator with memory (long) $00002D.l [Writes: Accumulator] [Flags: ZN]
	ora $4047.w,X		; 1D 47 40 ; OR accumulator with memory $4047.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $103313.l		; 0F 13 33 10 ; OR accumulator with memory (long) $103313.l [Writes: Accumulator] [Flags: ZN]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0A0B.w		; AE 0B 0A ; Load $0A0B.w into X register [Writes: X Index] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	lda ($7E.b),Y		; B1 7E ; Load accumulator ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $64.b		; 64 64 ; Store zero to $64.b
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0E.b		; 24 0E ; Test bits $0E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $001C.w,X		; 1D 1C 00 ; OR accumulator with memory $001C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4B2E.w,X		; 1D 2E 4B ; OR accumulator with memory $4B2E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $1347.w		; 4D 47 13 ; Exclusive OR $1347.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jsr $5D00.w		; 20 00 5D ; Jump to subroutine at $5D00.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3A.b		; 04 3A ; Test and set bits $3A.b [Reads: Accumulator] [Flags: Z]
	stz $24.b		; 64 24 ; Store zero to $24.b
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3434.w		; 0E 34 34 ; Arithmetic shift left $3434.w [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $02963A.l		; 4F 3A 96 02 ; Exclusive OR accumulator with memory (long) $02963A.l [Writes: Accumulator] [Flags: ZN]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$03.b]		; 27 03 ; AND accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$40.b]		; 47 40 ; Exclusive OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$22.b		; C9 22 ; Compare #$22.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor ($C9.b)		; 52 C9 ; Exclusive OR accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C9C834.l,X		; DF 34 C8 C9 ; Compare accumulator (long,X) $C9C834.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $75.b,X		; 75 75 ; Add $75.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp ($DC34.w)		; 6C 34 DC ; Jump indirect to ($DC34.w) [Flow: jump]
	eor ($10.b),Y		; 51 10 ; Exclusive OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $76.b		; 02 76 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $EB.b,X		; 34 EB ; Test bits $EB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $C4.b,S		; E3 C4 ; Subtract stack-relative $C4.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	mvn $02,$10		; 54 10 02 ; Move block negative $02,$10 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and [$10.b]		; 27 10 ; AND accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($4E.b,X)		; 01 4E ; Logical OR ($4E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $42CF.w		; CE CF 42 ; Decrement $42CF.w [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $50, $83		; 50 83 ; Branch if overflow clear to $50, $83 [Flow: branch]
	pei ($11.b)		; D4 11 ; Push effective indirect address ($11.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	bit $86.b,X		; 34 86 ; Test bits $86.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	and ($52.b,X)		; 21 52 ; Logical AND ($52.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $C9.b,X		; 55 C9 ; Exclusive OR accumulator with memory $C9.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $A3.b		; 86 A3 ; Store X register to $A3.b [Reads: X Index]
	jsr $C410.w		; 20 10 C4 ; Jump to subroutine at $C410.w [Writes: Stack Pointer] [Flow: call]
	jmp ($5C57.w,X)		; 7C 57 5C ; Jump indirect indexed to ($5C57.w,X) [Reads: X Index] [Flow: jump]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $615D.w,X		; 5D 5D 61 ; Exclusive OR accumulator with memory $615D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $62, $4B, $5C		; 62 4B 5C ; Push effective relative address $62, $4B, $5C [Writes: Stack Pointer]
	jsl $6A6812.l		; 22 12 68 6A ; Jump to subroutine long $6A6812.l [Writes: Stack Pointer] [Flow: call]
	jmp ($2269.w)		; 6C 69 22 ; Jump indirect to ($2269.w) [Flow: jump]
	jsl $4FC965.l		; 22 65 C9 4F ; Jump to subroutine long $4FC965.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	ora ($71.b),Y		; 11 71 ; OR accumulator with memory ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc [$20.b]		; E7 20 ; Subtract with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($75.b,X)		; 01 75 ; Logical OR ($75.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($E7.b,S),Y		; 53 E7 ; XOR accumulator (stack relative indirect indexed) ($E7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $21.b,X		; 34 21 ; Test bits $21.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $76		; 10 76 ; Branch if plus to $10, $76 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jsr $0F01.w		; 20 01 0F ; Jump to subroutine at $0F01.w [Writes: Stack Pointer] [Flow: call]
	ora $22C934.l		; 0F 34 C9 22 ; OR accumulator with memory (long) $22C934.l [Writes: Accumulator] [Flags: ZN]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($E36C.w)		; 6C 6C E3 ; Jump indirect to ($E36C.w) [Flow: jump]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$C94F]		; DC 4F C9 ; Jump long indirect [$C94F] [Flow: jump]
	eor $0201.w,X		; 5D 01 02 ; Exclusive OR accumulator with memory $0201.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $5E78.w		; 6D 78 5E ; Add $5E78.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stz $22.b		; 64 22 ; Store zero to $22.b
	jsl $7C785E.l		; 22 5E 78 7C ; Jump to subroutine long $7C785E.l [Writes: Stack Pointer] [Flow: call]
	ror $2222.w,X		; 7E 22 22 ; Rotate right $2222.w,X [Reads: X Index] [Flags: ZNC]
	and $78.b,S		; 23 78 ; AND accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $227B.w,Y		; 79 7B 22 ; Add $227B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $84C482.l		; 22 82 C4 84 ; Jump to subroutine long $84C482.l [Writes: Stack Pointer] [Flow: call]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $82807F.l		; 22 7F 80 82 ; Jump to subroutine long $82807F.l [Writes: Stack Pointer] [Flow: call]
	trb $2222.w		; 1C 22 22 ; Test and reset bits $2222.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ror $225E.w		; 6E 5E 22 ; Rotate right $225E.w [Flags: ZNC]
	jsl $06787F.l		; 22 7F 78 06 ; Jump to subroutine long $06787F.l [Writes: Stack Pointer] [Flow: call]
	ror $12.b		; 66 12 ; Rotate right $12.b [Reads: Direct Page] [Flags: ZNC]
	ora ($6E.b),Y		; 11 6E ; OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $8E.b,S		; 23 8E ; AND accumulator with stack relative $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $D08C22.l		; 22 22 8C D0 ; Jump to subroutine long $D08C22.l [Writes: Stack Pointer] [Flow: call]
	sta $81.b,S		; 83 81 ; Store accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer]
	jsr $6E12.w		; 20 12 6E ; Jump to subroutine at $6E12.w [Writes: Stack Pointer] [Flow: call]
	lsr $1E7F.w,X		; 5E 7F 1E ; Logical shift right $1E7F.w,X [Reads: X Index] [Flags: ZNC]
	jsl $789111.l		; 22 11 91 78 ; Jump to subroutine long $789111.l [Writes: Stack Pointer] [Flow: call]
	adc $63.b		; 65 63 ; Add $63.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $787822.l		; 22 22 78 78 ; Jump to subroutine long $787822.l [Writes: Stack Pointer] [Flow: call]
	adc $DB.b,S		; 63 DB ; Add with carry (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jsl $233010.l		; 22 10 30 23 ; Jump to subroutine long $233010.l [Writes: Stack Pointer] [Flow: call]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $22.b		; 24 22 ; Test bits $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($34.b,X)		; 21 34 ; Logical AND ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $97.b,X		; 34 97 ; Test bits $97.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9B9A.w,Y		; 99 9A 9B ; Store accumulator to $9B9A.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $340822.l		; 22 22 08 34 ; Jump to subroutine long $340822.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3C		; 30 3C ; Branch if minus to $30, $3C [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	bit $9F3C.w,X		; 3C 3C 9F ; Test bits $9F3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ldy #$2211.w		; A0 11 22 ; Load #$2211.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($2F.b,X)		; A1 2F ; Load accumulator ($2F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $78.b,X		; 34 78 ; Test bits $78.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($02.b,X)		; 21 02 ; Logical AND ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $22.b		; 24 22 ; Test bits $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($8F.b,X)		; 21 8F ; Logical AND ($8F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz $78.b		; 64 78 ; Store zero to $78.b
	jsl $5C5022.l		; 22 22 50 5C ; Jump to subroutine long $5C5022.l [Writes: Stack Pointer] [Flow: call]
	ldy $78.b		; A4 78 ; Load $78.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp ($6389.w)		; 6C 89 63 ; Jump indirect to ($6389.w) [Flow: jump]
	jsl $806422.l		; 22 22 64 80 ; Jump to subroutine long $806422.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $A66622.l		; 22 22 66 A6 ; Jump to subroutine long $A66622.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsl $788478.l		; 22 78 84 78 ; Jump to subroutine long $788478.l [Writes: Stack Pointer] [Flow: call]
	adc $2222.w,X		; 7D 22 22 ; Add $2222.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $EB8322.l		; 22 22 83 EB ; Jump to subroutine long $EB8322.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$21.b		; 89 21 ; Test bits #$21.b with accumulator [Reads: Accumulator] [Flags: Z]
	jsl $657863.l		; 22 63 78 65 ; Jump to subroutine long $657863.l [Writes: Stack Pointer] [Flow: call]
	cmp #$22.b		; C9 22 ; Compare #$22.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $2E2E.w		; 20 2E 2E ; Jump to subroutine at $2E2E.w [Writes: Stack Pointer] [Flow: call]
	bit $A8.b,X		; 34 A8 ; Test bits $A8.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsl $E0C902.l		; 22 02 C9 E0 ; Jump to subroutine long $E0C902.l [Writes: Stack Pointer] [Flow: call]
	cmp $0000C9.l,X		; DF C9 00 00 ; Compare accumulator (long,X) $0000C9.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $34.b,S		; E3 34 ; Subtract stack-relative $34.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cop $AC.b		; 02 AC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	bit $6D.b,X		; 34 6D ; Test bits $6D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $AC.b,X		; 34 AC ; Test bits $AC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $2102C2.l		; AF C2 02 21 ; Load long $2102C2.l into accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$34		; C2 34
	ror $34.b,X		; 76 34 ; Rotate right $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($34.b,X)		; 61 34 ; Add with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $C5.b		; C4 C5 ; Compare $C5.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	stx $CF.b		; 86 CF ; Store X register to $CF.b [Reads: X Index]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $3441.w,X		; 5E 41 34 ; Logical shift right $3441.w,X [Reads: X Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and ($02.b,X)		; 21 02 ; Logical AND ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $82, $C9, $64		; 82 C9 64 ; Branch always long to $82, $C9, $64 [Flow: branch]
	jsl $909202.l		; 22 02 92 90 ; Jump to subroutine long $909202.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $34		; 90 34 ; Branch if carry clear to $90, $34 [Flow: branch]
	jsl $64B520.l		; 22 20 B5 64 ; Jump to subroutine long $64B520.l [Writes: Stack Pointer] [Flow: call]
	stz $34.b		; 64 34 ; Store zero to $34.b
	jsl $4B3420.l		; 22 20 34 4B ; Jump to subroutine long $4B3420.l [Writes: Stack Pointer] [Flow: call]
	bit $23.b,X		; 34 23 ; Test bits $23.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $82, $4E, $22		; 82 4E 22 ; Branch always long to $82, $4E, $22 [Flow: branch]
	and ($63.b,X)		; 21 63 ; Logical AND ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jsl $1C8322.l		; 22 22 83 1C ; Jump to subroutine long $1C8322.l [Writes: Stack Pointer] [Flow: call]
	sta ($5B.b,X)		; 81 5B ; Store accumulator ($5B.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsl $B75B21.l		; 22 21 5B B7 ; Jump to subroutine long $B75B21.l [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda [$12.b],Y		; B7 12 ; Load accumulator (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $5B1CC7.l		; 22 C7 1C 5B ; Jump to subroutine long $5B1CC7.l [Writes: Stack Pointer] [Flow: call]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $78BC.w,X		; BC BC 78 ; Load Y register $78BC.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $22.b,Y		; B6 22 ; Load X register $22.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($C4.b)		; 12 C4 ; OR accumulator with memory (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $C575.w,Y		; B9 75 C5 ; Load $C575.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $C9C712.l		; 22 12 C7 C9 ; Jump to subroutine long $C9C712.l [Writes: Stack Pointer] [Flow: call]
	and ($CD.b),Y		; 31 CD ; AND accumulator with memory ($CD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $53CF12.l		; 22 12 CF 53 ; Jump to subroutine long $53CF12.l [Writes: Stack Pointer] [Flow: call]
	cmp ($D3.b),Y		; D1 D3 ; Compare accumulator ($D3.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	ora ($D6.b)		; 12 D6 ; OR accumulator with memory (indirect) ($D6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pei ($C8.b)		; D4 C8 ; Push effective indirect address ($C8.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($22.b),Y		; D1 22 ; Compare accumulator ($22.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($D2.b,S),Y		; D3 D2 ; Compare accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jsl $D9D001.l		; 22 01 D0 D9 ; Jump to subroutine long $D9D001.l [Writes: Stack Pointer] [Flow: call]
	cmp [$D4.b],Y		; D7 D4 ; Compare accumulator (long indexed) [$D4.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsl $D15622.l		; 22 22 56 D1 ; Jump to subroutine long $D15622.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$C5C8.w		; C9 C8 C5 ; Compare #$C5C8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp [$20.b]		; C7 20 ; Compare accumulator (long) [$20.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $C8D9D7.l		; 22 D7 D9 C8 ; Jump to subroutine long $C8D9D7.l [Writes: Stack Pointer] [Flow: call]
	jmp $5E2122.l		; 5C 22 21 5E ; Jump long to $5E2122.l [Flow: jump]
	stz $C4.b,X		; 74 C4 ; Store zero to $C4.b,X [Reads: X Index]
	cmp $11.b		; C5 11 ; Compare $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cop $D2.b		; 02 D2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$C8.b]		; C7 C8 ; Compare accumulator (long) [$C8.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $CE2222.l		; 0F 22 22 CE ; OR accumulator with memory (long) $CE2222.l [Writes: Accumulator] [Flags: ZN]
	inc $E7.b		; E6 E7 ; Increment $E7.b [Reads: Direct Page] [Flags: ZN]
	sbc #$2102.w		; E9 02 21 ; Subtract #$2102.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $DF.b		; C5 DF ; Compare $DF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $C72202.l		; EF 02 22 C7 ; Subtract with carry (long) $C72202.l [Writes: Accumulator] [Flags: ZVNC]
	cmp [$E9.b]		; C7 E9 ; Compare accumulator (long) [$E9.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $F2D4.w		; 20 D4 F2 ; Jump to subroutine at $F2D4.w [Writes: Stack Pointer] [Flow: call]
	pea $02E6.w		; F4 E6 02 ; Push absolute address $02E6.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	jsl $583AC8.l		; 22 C8 3A 58 ; Jump to subroutine long $583AC8.l [Writes: Stack Pointer] [Flow: call]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($E4.b)		; 12 E4 ; OR accumulator with memory (indirect) ($E4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $D6F9.w		; CD F9 D6 ; Compare $D6F9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $E9CD22.l		; 22 22 CD E9 ; Jump to subroutine long $E9CD22.l [Writes: Stack Pointer] [Flow: call]
	sty $F1.b		; 84 F1 ; Store Y register to $F1.b [Reads: Y Index]
	jsl $C8E612.l		; 22 12 E6 C8 ; Jump to subroutine long $C8E612.l [Writes: Stack Pointer] [Flow: call]
	cpy $F7.b		; C4 F7 ; Compare $F7.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	jsr $CD02.w		; 20 02 CD ; Jump to subroutine at $CD02.w [Writes: Stack Pointer] [Flow: call]
	cmp $C6CD.w		; CD CD C6 ; Compare $C6CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $34DB22.l		; 22 22 DB 34 ; Jump to subroutine long $34DB22.l [Writes: Stack Pointer] [Flow: call]
	bit $CE.b,X		; 34 CE ; Test bits $CE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $E600.w		; 20 00 E6 ; Jump to subroutine at $E600.w [Writes: Stack Pointer] [Flow: call]
	inc $C4.b		; E6 C4 ; Increment $C4.b [Reads: Direct Page] [Flags: ZN]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($E4.b,X)		; 01 E4 ; Logical OR ($E4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $63FF.w		; CD FF 63 ; Compare $63FF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $06E121.l		; 22 21 E1 06 ; Jump to subroutine long $06E121.l [Writes: Stack Pointer] [Flow: call]
	adc ($74.b,S),Y		; 73 74 ; Add with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $EC.b		; 02 EC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($0E.b),Y		; 31 0E ; AND accumulator with memory ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($13.b)		; 32 13 ; AND accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora [$E6.b]		; 07 E6 ; OR accumulator with memory (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$E6.b]		; E7 E6 ; Subtract with carry (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $16C422.l		; 22 22 C4 16 ; Jump to subroutine long $16C422.l [Writes: Stack Pointer] [Flow: call]
	inc $18.b		; E6 18 ; Increment $18.b [Reads: Direct Page] [Flags: ZN]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpx $F51B.w		; EC 1B F5 ; Compare $F51B.w with X register [Reads: X Index] [Flags: ZNC]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cmp $CE.b		; C5 CE ; Compare $CE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $66.b		; C5 66 ; Compare $66.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $30.b		; E6 30 ; Increment $30.b [Reads: Direct Page] [Flags: ZN]
	ora ($C8.b)		; 12 C8 ; OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C4.b,X		; F5 C4 ; Subtract $C4.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $CD.b		; C5 CD ; Compare $CD.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $EC.b,X		; D5 EC ; Compare accumulator $EC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $1AC621.l		; 22 21 C6 1A ; Jump to subroutine long $1AC621.l [Writes: Stack Pointer] [Flow: call]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $FFD0.w		; 20 D0 FF ; Jump to subroutine at $FFD0.w [Writes: Stack Pointer] [Flow: call]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $FE2932.l		; 22 32 29 FE ; Jump to subroutine long $FE2932.l [Writes: Stack Pointer] [Flow: call]
	cop $2C.b		; 02 2C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($03.b)		; 32 03 ; AND accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$32.b],Y		; 17 32 ; OR accumulator with memory (long indexed) [$32.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0379.w,Y		; D9 79 03 ; Compare accumulator $0379.w,Y [Reads: Y Index] [Flags: ZNC]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $D936.w		; AC 36 D9 ; Load $D936.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($35.b),Y		; F1 35 ; Subtract with carry ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $F1.b,X		; 34 F1 ; Test bits $F1.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $873434.l		; 4F 34 34 87 ; Exclusive OR accumulator with memory (long) $873434.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $36.b		; 86 36 ; Store X register to $36.b [Reads: X Index]
	and [$1B.b],Y		; 37 1B ; AND accumulator with memory (long indexed) [$1B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $32.b,S		; 03 32 ; OR accumulator with stack relative $32.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $87		; 10 87 ; Branch if plus to $10, $87 [Flow: branch]
	bit $3C.b,X		; 34 3C ; Test bits $3C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $2003.w,Y		; 79 03 20 ; Add $2003.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7CB6.w,X		; 9D B6 7C ; Store accumulator to $7CB6.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr $CF01.w		; 20 01 CF ; Jump to subroutine at $CF01.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $3301.w,X		; 3C 01 33 ; Test bits $3301.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $753E.w,X		; 3D 3E 75 ; AND accumulator with memory $753E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($13.b,S),Y		; 33 13 ; AND accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $33.b,X		; 55 33 ; Exclusive OR accumulator with memory $33.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($56.b,S),Y		; 33 56 ; AND accumulator (stack relative indirect indexed) ($56.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jmp $ED3333.l		; 5C 33 33 ED ; Jump long to $ED3333.l [Flow: jump]
	cmp $3434.w,Y		; D9 34 34 ; Compare accumulator $3434.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $D634.w,Y		; 79 34 D6 ; Add $D634.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp ($0379.w)		; 6C 79 03 ; Jump indirect to ($0379.w) [Flow: jump]
	and ($6C.b),Y		; 31 6C ; AND accumulator with memory ($6C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $35.b,X		; 36 35 ; Rotate left $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $34.b,X		; 74 34 ; Store zero to $34.b,X [Reads: X Index]
	adc [$23.b],Y		; 77 23 ; Add with carry (long indexed) [$23.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $79.b,S		; 03 79 ; OR accumulator with stack relative $79.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $3479.w,Y		; 79 79 34 ; Add $3479.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($30.b),Y		; 31 30 ; AND accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $0000.w		; AC 00 00 ; Load $0000.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $7F.b,X		; 34 7F ; Test bits $7F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $7F7381.l,X		; 7F 81 73 7F ; Add long $7F7381.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $360F.w,X		; 7E 0F 36 ; Rotate right $360F.w,X [Reads: X Index] [Flags: ZNC]
	adc $0132.w,Y		; 79 32 01 ; Add $0132.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $7E0F34.l		; 0F 34 0F 7E ; OR accumulator with memory (long) $7E0F34.l [Writes: Accumulator] [Flags: ZN]
	jsr $7323.w		; 20 23 73 ; Jump to subroutine at $7323.w [Writes: Stack Pointer] [Flow: call]
	bit $7A.b,X		; 34 7A ; Test bits $7A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $3130.w,Y		; 79 30 31 ; Add $3130.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($83.b,S),Y		; 73 83 ; Add with carry (stack relative indirect indexed) ($83.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($7934.w,X)		; 7C 34 79 ; Jump indirect indexed to ($7934.w,X) [Reads: X Index] [Flow: jump]
	jmp ($1110.w,X)		; 7C 10 11 ; Jump indirect indexed to ($1110.w,X) [Reads: X Index] [Flow: jump]
	sty $82.b		; 84 82 ; Store Y register to $82.b [Reads: Y Index]
	sta $0133FF.l,X		; 9F FF 33 01 ; Store accumulator (long,X) $0133FF.l,X [Reads: Accumulator, X Index]
	sta $9F9F9F.l,X		; 9F 9F 9F 9F ; Store accumulator (long,X) $9F9F9F.l,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A5.b,S		; A3 A5 ; Load accumulator (stack relative) $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b,S		; A3 A5 ; Load accumulator (stack relative) $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $A5A5AD.l,X		; 9F AD A5 A5 ; Store accumulator (long,X) $A5A5AD.l,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $09.b,X		; 56 09 ; Logical shift right $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	and $4500.w,Y		; 39 00 45 ; AND accumulator with memory $4500.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $30.b		; 86 30 ; Store X register to $30.b [Reads: X Index]
	.db $30, $D1		; 30 D1 ; Branch if minus to $30, $D1 [Flow: branch]
	stx $83.b		; 86 83 ; Store X register to $83.b [Reads: X Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $11.b,S		; 03 11 ; OR accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $898787.l		; 4F 87 87 89 ; Exclusive OR accumulator with memory (long) $898787.l [Writes: Accumulator] [Flags: ZN]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $3434.w		; 4C 34 34 ; Jump to $3434.w [Flow: jump]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $348B.w		; F4 8B 34 ; Push absolute address $348B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3436.w,Y		; 39 36 34 ; AND accumulator with memory $3436.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $0320.w		; 8C 20 03 ; Store Y register to $0320.w [Reads: Y Index]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3434.w,Y		; 39 34 34 ; AND accumulator with memory $3434.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $730220.l		; 0F 20 02 73 ; OR accumulator with memory (long) $730220.l [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol $73.b,X		; 36 73 ; Rotate left $73.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	rol $73.b,X		; 36 73 ; Rotate left $73.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $2003E1.l		; 0F E1 03 20 ; OR accumulator with memory (long) $2003E1.l [Writes: Accumulator] [Flags: ZN]
	sta $7E347E.l		; 8F 7E 34 7E ; Store accumulator (long) $7E347E.l [Reads: Accumulator]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $E18E.w		; 0D 8E E1 ; Logical OR $E18E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $0E.b,X		; 36 0E ; Rotate left $0E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $90, $DA		; 90 DA ; Branch if carry clear to $90, $DA [Flow: branch]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($39.b,S),Y		; 73 39 ; Add with carry (stack relative indirect indexed) ($39.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($7E.b,S),Y		; 73 7E ; Add with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ror $008F.w,X		; 7E 8F 00 ; Rotate right $008F.w,X [Reads: X Index] [Flags: ZNC]
	and ($73.b,S),Y		; 33 73 ; AND accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $338F90.l		; 8F 90 8F 33 ; Store accumulator (long) $338F90.l [Reads: Accumulator]
	and ($35.b,S),Y		; 33 35 ; AND accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $73		; 90 73 ; Branch if carry clear to $90, $73 [Flow: branch]
	ora $3103.w		; 0D 03 31 ; Logical OR $3103.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $DA9036.l		; 8F 36 90 DA ; Store accumulator (long) $DA9036.l [Reads: Accumulator]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	sta $3683.w		; 8D 83 36 ; Store accumulator to $3683.w [Reads: Accumulator]
	and $0233.w,Y		; 39 33 02 ; AND accumulator with memory $0233.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	rol $73.b,X		; 36 73 ; Rotate left $73.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	and ($90.b,S),Y		; 33 90 ; AND accumulator (stack relative indirect indexed) ($90.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $A0.b,X		; 34 A0 ; Test bits $A0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($30.b,S),Y		; 73 30 ; Add with carry (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $90.b,S		; 03 90 ; OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($71.b,S),Y		; 73 71 ; Add with carry (stack relative indirect indexed) ($71.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($33.b),Y		; 71 33 ; Add with carry ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($737A.w,X)		; 7C 7A 73 ; Jump indirect indexed to ($737A.w,X) [Reads: X Index] [Flow: jump]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $AB.b		; A5 AB ; Load $AB.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	sta $AC349F.l,X		; 9F 9F 34 AC ; Store accumulator (long,X) $AC349F.l,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $C6.b		; 14 C6 ; Test and reset bits $C6.b [Reads: Accumulator] [Flags: Z]
	cmp $0033.w		; CD 33 00 ; Compare $0033.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C01D.w,X		; BD 1D C0 ; Load $C01D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($23.b),Y		; 51 23 ; Exclusive OR accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($CD.b,X)		; 21 CD ; Logical AND ($CD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $DCE3.w,Y		; D9 E3 DC ; Compare accumulator $DCE3.w,Y [Reads: Y Index] [Flags: ZNC]
	jsr $D100.w		; 20 00 D1 ; Jump to subroutine at $D100.w [Writes: Stack Pointer] [Flow: call]
	dec $CD.b,X		; D6 CD ; Decrement memory $CD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cmp #$2022.w		; C9 22 20 ; Compare #$2022.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lsr $E2.b,X		; 56 E2 ; Logical shift right $E2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $10D1.w		; EE D1 10 ; Increment $10D1.w [Flags: ZN]
	ora ($CD.b)		; 12 CD ; OR accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $CD.b,X		; D6 CD ; Decrement memory $CD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cmp $2222.w		; CD 22 22 ; Compare $2222.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jmp.w [$4BDC]		; DC DC 4B ; Jump long indirect [$4BDC] [Flow: jump]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	sty $FF.b		; 84 FF ; Store Y register to $FF.b [Reads: Y Index]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $7E3434.l		; 22 34 34 7E ; Jump to subroutine long $7E3434.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $96		; D0 96 ; Branch if not equal to $D0, $96 [Flow: branch]
	jmp.w [$23FF]		; DC FF 23 ; Jump long indirect [$23FF] [Flow: jump]
	jsl $CD3434.l		; 22 34 34 CD ; Jump to subroutine long $CD3434.l [Writes: Stack Pointer] [Flow: call]
	cmp $2200.w		; CD 00 22 ; Compare $2200.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $4B37.w		; CE 37 4B ; Decrement $4B37.w [Flags: ZN]
	adc $1322.w,X		; 7D 22 13 ; Add $1322.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $CDF7.w,X		; 1E F7 CD ; Arithmetic shift left $CDF7.w,X [Reads: X Index] [Flags: ZNC]
	cmp $2212.w		; CD 12 22 ; Compare $2212.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $C9C8.w		; CD C8 C9 ; Compare $C9C8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	and ($22.b)		; 32 22 ; AND accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $7C.b,S		; A3 7C ; Load accumulator (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	cmp $2DCD.w		; CD CD 2D ; Compare $2DCD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $799A21.l		; 22 21 9A 79 ; Jump to subroutine long $799A21.l [Writes: Stack Pointer] [Flow: call]
	adc $010179.l,X		; 7F 79 01 01 ; Add long $010179.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	stz $2302.w,X		; 9E 02 23 ; Store zero to $2302.w,X [Reads: X Index]
	cpx $2D.b		; E4 2D ; Compare $2D.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $76.b,X		; 34 76 ; Test bits $76.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $C5ED.w,Y		; 79 ED C5 ; Add $C5ED.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $2211.w		; CD 11 22 ; Compare $2211.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $D434.w		; 2D 34 D4 ; Logical AND $D434.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $391210.l,X		; 3F 10 12 39 ; AND accumulator with memory (long,X) $391210.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $79.b,X		; 95 79 ; Store accumulator to $79.b,X [Reads: Accumulator, X Index]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	ror $CDED.w,X		; 7E ED CD ; Rotate right $CDED.w,X [Reads: X Index] [Flags: ZNC]
	tsb $31.b		; 04 31 ; Test and set bits $31.b [Reads: Accumulator] [Flags: Z]
	and $35.b,S		; 23 35 ; AND accumulator with stack relative $35.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $35.b		; 05 35 ; Logical OR $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($01.b,X)		; 61 01 ; Add with carry ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($F2.b,X)		; 21 F2 ; Logical AND ($F2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $B77E.w		; CE 7E B7 ; Decrement $B77E.w [Flags: ZN]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: ZN]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$DC13.w		; C9 13 DC ; Compare #$DC13.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda [$03.b],Y		; B7 03 ; Load accumulator (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $DC.b		; 02 DC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $B7C9.w,X		; 1D C9 B7 ; OR accumulator with memory $B7C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $02.b,S		; 23 02 ; AND accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $B7.b,X		; 56 B7 ; Logical shift right $B7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp ($DC.b),Y		; D1 DC ; Compare accumulator ($DC.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $24D6.w,X		; 1D D6 24 ; OR accumulator with memory $24D6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $32.b		; 25 32 ; Logical AND $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($D1.b,S),Y		; 33 D1 ; AND accumulator (stack relative indirect indexed) ($D1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$23.b]		; 27 23 ; AND accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($CD.b,S),Y		; 33 CD ; AND accumulator (stack relative indirect indexed) ($CD.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($27.b,S),Y		; 33 27 ; AND accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $319D30.l		; 22 30 9D 31 ; Jump to subroutine long $319D30.l [Writes: Stack Pointer] [Flow: call]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($79.b),Y		; 71 79 ; Add with carry ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0034.w,X		; 9D 34 00 ; Store accumulator to $0034.w,X [Reads: Accumulator, X Index]
	jsl $04A099.l		; 22 99 A0 04 ; Jump to subroutine long $04A099.l [Writes: Stack Pointer] [Flow: call]
	cmp $33.b,X		; D5 33 ; Compare accumulator $33.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($36.b),Y		; 11 36 ; OR accumulator with memory ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$33.b]		; A7 33 ; Load accumulator (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $353433.l		; 22 33 34 35 ; Jump to subroutine long $353433.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $3400.w		; 20 00 34 ; Jump to subroutine at $3400.w [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $68.b		; 66 68 ; Rotate right $68.b [Reads: Direct Page] [Flags: ZNC]
	and [$34.b],Y		; 37 34 ; AND accumulator with memory (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($30.b,S),Y		; 33 30 ; AND accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0370B1.l		; AF B1 70 03 ; Load long $0370B1.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($72.b,S),Y		; 33 72 ; AND accumulator (stack relative indirect indexed) ($72.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $6D.b,X		; 36 6D ; Rotate left $6D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $D9		; 30 D9 ; Branch if minus to $30, $D9 [Flow: branch]
	lda [$B9.b],Y		; B7 B9 ; Load accumulator (long indexed) [$B9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b,X		; 95 03 ; Store accumulator to $03.b,X [Reads: Accumulator, X Index]
	.db $30, $36		; 30 36 ; Branch if minus to $30, $36 [Flow: branch]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $333734.l,X		; BF 34 37 33 ; Load long $333734.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $34.b		; 02 34 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3418.w,Y		; 19 18 34 ; OR accumulator with memory $3418.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $D537.w		; CE 37 D5 ; Decrement $D537.w [Flags: ZN]
	bit $02.b,X		; 34 02 ; Test bits $02.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	tsb $32.b		; 04 32 ; Test and set bits $32.b [Reads: Accumulator] [Flags: Z]
	and $01.b,X		; 35 01 ; Logical AND $01.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $2536.w		; 20 36 25 ; Jump to subroutine at $2536.w [Writes: Stack Pointer] [Flow: call]
	cmp $32.b,X		; D5 32 ; Compare accumulator $32.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $345C12.l		; 22 12 5C 34 ; Jump to subroutine long $345C12.l [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $12.b		; 04 12 ; Test and set bits $12.b [Reads: Accumulator] [Flags: Z]
	and ($D4.b,X)		; 21 D4 ; Logical AND ($D4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $5C.b,X		; 34 5C ; Test bits $5C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpx #$1210.w		; E0 10 12 ; Compare #$1210.w with X register [Reads: X Index] [Flags: ZNC]
	and $33.b,X		; 35 33 ; Logical AND $33.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C2.b		; 05 C2 ; Logical OR $C2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $E0.b		; 06 E0 ; Arithmetic shift left $E0.b [Reads: Direct Page] [Flags: ZNC]
	ora ($32.b,S),Y		; 13 32 ; OR accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $C3.b,X		; 34 C3 ; Test bits $C3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $C6.b		; C5 C6 ; Compare $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: ZN]
	and ($30.b,S),Y		; 33 30 ; AND accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$C99F.w		; A9 9F C9 ; Load #$C99F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $D03300.l		; CF 00 33 D0 ; Compare accumulator (long) $D03300.l [Reads: Accumulator] [Flags: ZNC]
	cmp ($D2.b),Y		; D1 D2 ; Compare accumulator ($D2.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	eor $4E3033.l		; 4F 33 30 4E ; Exclusive OR accumulator with memory (long) $4E3033.l [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $D3		; 10 D3 ; Branch if plus to $10, $D3 [Flow: branch]
	cmp #$C9C9.w		; C9 C9 C9 ; Compare #$C9C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	lsr $DB4E.w		; 4E 4E DB ; Logical shift right $DB4E.w [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora ($30.b),Y		; 11 30 ; OR accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $34.b		; E4 34 ; Compare $34.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	sbc [$EB.b]		; E7 EB ; Subtract with carry (long) [$EB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $33EE.w		; ED EE 33 ; Subtract $33EE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and ($EE.b,S),Y		; 33 EE ; AND accumulator (stack relative indirect indexed) ($EE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($EBF1.w)		; 6C F1 EB ; Jump indirect to ($EBF1.w) [Flow: jump]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $34.b,X		; F6 34 ; Increment memory $34.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	bit $C9.b,X		; 34 C9 ; Test bits $C9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $DB.b,X		; 34 DB ; Test bits $DB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($FC.b),Y		; F1 FC ; Subtract with carry ($FC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $01FF.w,X		; FE FF 01 ; Increment memory $01FF.w,X [Reads: X Index] [Flags: ZN]
	cmp #$4333.w		; C9 33 43 ; Compare #$4333.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc [$0A.b]		; E7 0A ; Subtract with carry (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $F00B.w		; 0C 0B F0 ; Test and set bits $F00B.w [Reads: Accumulator] [Flags: Z]
	ora $100444.l		; 0F 44 04 10 ; OR accumulator with memory (long) $100444.l [Writes: Accumulator] [Flags: ZN]
	ora ($CA.b),Y		; 11 CA ; OR accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pea $3344.w		; F4 44 33 ; Push absolute address $3344.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($44.b,S),Y		; 33 44 ; AND accumulator (stack relative indirect indexed) ($44.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$19.b],Y		; 17 19 ; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $1E,$44		; 44 44 1E ; Move block positive $1E,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc ($34.b,X)		; E1 34 ; Subtract with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $CA.b,S		; 03 CA ; OR accumulator with stack relative $CA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $3320.w		; 1C 20 33 ; Test and reset bits $3320.w [Reads: Accumulator] [Flags: Z]
	mvp $C6,$C6		; 44 C6 C6 ; Move block positive $C6,$C6 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and $D1.b		; 25 D1 ; Logical AND $D1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($D0.b,S),Y		; 33 D0 ; AND accumulator (stack relative indirect indexed) ($D0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $3427.w,X		; 1E 27 34 ; Arithmetic shift left $3427.w,X [Reads: X Index] [Flags: ZNC]
	bit $40.b,X		; 34 40 ; Test bits $40.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $1D1E.w,Y		; 79 1E 1D ; Add $1D1E.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $0010.w		; 1C 10 00 ; Test and reset bits $0010.w [Reads: Accumulator] [Flags: Z]
	asl $79E1.w,X		; 1E E1 79 ; Arithmetic shift left $79E1.w,X [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $DE9C.w,X		; 9D 9C DE ; Store accumulator to $DE9C.w,X [Reads: Accumulator, X Index]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$44.b]		; E7 44 ; Subtract with carry (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	and #$3433.w		; 29 33 34 ; Logical AND #$3433.w with accumulator [Writes: Accumulator] [Flags: ZN]
	pei ($D4.b)		; D4 D4 ; Push effective indirect address ($D4.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2E4F.w		; C9 4F 2E ; Compare #$2E4F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jmp.w [$4331]		; DC 31 43 ; Jump long indirect [$4331] [Flow: jump]
	jmp.w [$0B0A]		; DC 0A 0B ; Jump long indirect [$0B0A] [Flow: jump]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and ($26.b),Y		; 31 26 ; AND accumulator with memory ($26.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor ($44.b,S),Y		; 53 44 ; XOR accumulator (stack relative indirect indexed) ($44.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($1C.b),Y		; 31 1C ; AND accumulator with memory ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $443434.l		; 22 34 34 44 ; Jump to subroutine long $443434.l [Writes: Stack Pointer] [Flow: call]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$C5.b]		; 27 C5 ; AND accumulator with memory (long) [$C5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($01.b)		; F2 01 ; Subtract with carry (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($E3.b,X)		; 21 E3 ; Logical AND ($E3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$F234.w		; C9 34 F2 ; Compare #$F234.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($CB.b)		; D2 CB ; Compare accumulator (indirect) ($CB.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $CECD.w		; CC CD CE ; Compare $CECD.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($1C.b,S),Y		; 33 1C ; AND accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $34.b,X		; F5 34 ; Subtract $34.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $43.b		; C4 43 ; Compare $43.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $3634.w		; CE 34 36 ; Decrement $3634.w [Flags: ZN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	inc $F0.b,X		; F6 F0 ; Increment memory $F0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $0343.w		; CE 43 03 ; Decrement $0343.w [Flags: ZN]
	.db $50, $3B		; 50 3B ; Branch if overflow clear to $50, $3B [Flow: branch]
	and $141C.w,X		; 3D 1C 14 ; AND accumulator with memory $141C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $CE,$F0		; 44 F0 CE ; Move block positive $CE,$F0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and [$D0.b]		; 27 D0 ; AND accumulator with memory (long) [$D0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $12.b,S		; 03 12 ; OR accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($F6.b,X)		; 41 F6 ; Exclusive OR accumulator with memory ($F6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $3344.w		; CE 44 33 ; Decrement $3344.w [Flags: ZN]
	trb DMALEN2B.w		; 1C 27 43 ; Test and reset bits DMALEN2B.w [Reads: Accumulator] [Flags: Z]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	bit $1C.b,X		; 34 1C ; Test bits $1C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $0034.w,X		; 1D 34 00 ; OR accumulator with memory $0034.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $76, $13		; 82 76 13 ; Branch always long to $82, $76, $13 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $36.b,X		; 94 36 ; Store Y register $36.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $25, $E8		; 82 25 E8 ; Branch always long to $82, $25, $E8 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $001D.w		; CD 1D 00 ; Compare $001D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $1DA8.w		; 20 A8 1D ; Jump to subroutine at $1DA8.w [Writes: Stack Pointer] [Flow: call]
	jmp ($00D5.w,X)		; 7C D5 00 ; Jump indirect indexed to ($00D5.w,X) [Reads: X Index] [Flow: jump]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rol $39.b,X		; 36 39 ; Rotate left $39.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $24D5CD.l,X		; 7F CD D5 24 ; Add long $24D5CD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $1C.b,X		; 34 1C ; Test bits $1C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $B9.b,X		; 76 B9 ; Rotate right $B9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($95.b,S),Y		; 13 95 ; OR accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($CD.b),Y		; 31 CD ; AND accumulator with memory ($CD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $9A.b		; 04 9A ; Test and set bits $9A.b [Reads: Accumulator] [Flags: Z]
	ora ($33.b)		; 12 33 ; OR accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $7636.w		; 2D 36 76 ; Logical AND $7636.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $950010.l		; 4F 10 00 95 ; Exclusive OR accumulator with memory (long) $950010.l [Writes: Accumulator] [Flags: ZN]
	bit $9A.b,X		; 34 9A ; Test bits $9A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $0000.w		; 9C 00 00 ; Store zero to $0000.w
	bit $2D.b,X		; 34 2D ; Test bits $2D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $D60001.l		; 8F 01 00 D6 ; Store accumulator (long) $D60001.l [Reads: Accumulator]
	and $0C0A.w		; 2D 0A 0C ; Logical AND $0C0A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $1D2D.w,X		; 7E 2D 1D ; Rotate right $1D2D.w,X [Reads: X Index] [Flags: ZNC]
	cmp $0201.w		; CD 01 02 ; Compare $0201.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $4FCD.w		; CD CD 4F ; Compare $4FCD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor ($22.b),Y		; 51 22 ; Exclusive OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $51,$52		; 44 52 51 ; Move block positive $51,$52 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $50, $54		; 50 54 ; Branch if overflow clear to $50, $54 [Flow: branch]
	mvp $00,$44		; 44 44 00 ; Move block positive $00,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $5A.b		; A5 5A ; Load $5A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $5C4433.l		; 5C 33 44 5C ; Jump long to $5C4433.l [Flow: jump]
	lsr $5C60.w,X		; 5E 60 5C ; Logical shift right $5C60.w,X [Reads: X Index] [Flags: ZNC]
	mvp $62,$44		; 44 44 62 ; Move block positive $62,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	adc $37.b,S		; 63 37 ; Add with carry (stack relative) $37.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	mvp $38,$42		; 44 42 38 ; Move block positive $38,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror $3070.w		; 6E 70 30 ; Rotate right $3070.w [Flags: ZNC]
	mvp $73,$71		; 44 71 73 ; Move block positive $73,$71 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $77.b,X		; 75 77 ; Add $77.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $58,$44		; 44 44 58 ; Move block positive $58,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $D9.b		; 24 D9 ; Test bits $D9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc $0441.w,X		; 7D 41 04 ; Add $0441.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $6680.w,X		; 7E 80 66 ; Rotate right $6680.w,X [Reads: X Index] [Flags: ZNC]
	ror $4344.w,X		; 7E 44 43 ; Rotate right $4344.w,X [Reads: X Index] [Flags: ZNC]
	sty $86.b		; 84 86 ; Store Y register to $86.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit #$4444.w		; 89 44 44 ; Test bits #$4444.w with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $7E70.w		; 8C 70 7E ; Store Y register to $7E70.w [Reads: Y Index]
	mvp $62,$43		; 44 43 62 ; Move block positive $62,$43 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $449795.l		; 6F 95 97 44 ; Add with carry (long) $449795.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $70,$96		; 44 96 70 ; Move block positive $70,$96 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $70, $CD		; 70 CD ; Branch if overflow set to $70, $CD [Flow: branch]
	mvp $24,$42		; 44 42 24 ; Move block positive $24,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $7E9D.w		; 4E 9D 7E ; Logical shift right $7E9D.w [Flags: ZNC]
	trb $43.b		; 14 43 ; Test and reset bits $43.b [Reads: Accumulator] [Flags: Z]
	ror $8F70.w		; 6E 70 8F ; Rotate right $8F70.w [Flags: ZNC]
	eor ($44.b),Y		; 51 44 ; Exclusive OR accumulator with memory ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $CE,$CD		; 44 CD CE ; Move block positive $CE,$CD [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $A07500.l		; 22 00 75 A0 ; Jump to subroutine long $A07500.l [Writes: Stack Pointer] [Flow: call]
	and [$63.b]		; 27 63 ; AND accumulator with memory (long) [$63.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $34,$31		; 44 31 34 ; Move block positive $34,$31 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $7E.b,X		; 34 7E ; Test bits $7E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	mvp $66,$80		; 44 80 66 ; Move block positive $66,$80 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $A7.b,X		; 34 A7 ; Test bits $A7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	mvp $A9,$04		; 44 04 A9 ; Move block positive $A9,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ror $A7B0.w,X		; 7E B0 A7 ; Rotate right $A7B0.w,X [Reads: X Index] [Flags: ZNC]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $B47E.w		; AE 7E B4 ; Load $B47E.w into X register [Writes: X Index] [Flags: ZN]
	adc $B54443.l		; 6F 43 44 B5 ; Add with carry (long) $B54443.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($B0.b,X)		; 01 B0 ; Logical OR ($B0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp.w [$4244]		; DC 44 42 ; Jump long indirect [$4244] [Flow: jump]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $4010F0.l		; 8F F0 10 40 ; Store accumulator (long) $4010F0.l [Reads: Accumulator]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpx $37.b		; E4 37 ; Compare $37.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $8F70.w		; 6E 70 8F ; Rotate right $8F70.w [Flags: ZNC]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ldx $C08E.w,Y		; BE 8E C0 ; Load X register $C08E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $9B,$44		; 44 44 9B ; Move block positive $9B,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $C6.b		; C5 C6 ; Compare $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvp $C7,$44		; 44 44 C7 ; Move block positive $C7,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $E4C5.w,X		; 9D C5 E4 ; Store accumulator to $E4C5.w,X [Reads: Accumulator, X Index]
	mvp $D6,$22		; 44 22 D6 ; Move block positive $D6,$22 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $5CD8.w		; CD D8 5C ; Compare $5CD8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $CDCC24.l		; 22 24 CC CD ; Jump to subroutine long $CDCC24.l [Writes: Stack Pointer] [Flow: call]
	wai		; CB ; Wait for interrupt
	sta $4444.w,X		; 9D 44 44 ; Store accumulator to $4444.w,X [Reads: Accumulator, X Index]
	bit $28.b,X		; 34 28 ; Test bits $28.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $2358.w		; CD 58 23 ; Compare $2358.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $D1.b		; 24 D1 ; Test bits $D1.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ror $57.b,X		; 76 57 ; Rotate right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $70, $44		; 70 44 ; Branch if overflow set to $70, $44 [Flow: branch]
	mvp $A8,$9D		; 44 9D A8 ; Move block positive $A8,$9D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	mvp $54,$7F		; 44 7F 54 ; Move block positive $54,$7F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $44D3.w,Y		; D9 D3 44 ; Compare accumulator $44D3.w,Y [Reads: Y Index] [Flags: ZNC]
	tsb $70.b		; 04 70 ; Test and set bits $70.b [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $44449D.l,X		; BF 9D 44 44 ; Load long $44449D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $0400.w,Y		; D9 00 04 ; Compare accumulator $0400.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $70, $95		; 70 95 ; Branch if overflow set to $70, $95 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $C34444.l		; 8F 44 44 C3 ; Store accumulator (long) $C34444.l [Reads: Accumulator]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $40.b,X		; 34 40 ; Test bits $40.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($70.b),Y		; 51 70 ; Exclusive OR accumulator with memory ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$4444.w		; E0 44 44 ; Compare #$4444.w with X register [Reads: X Index] [Flags: ZNC]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$36		; E2 36
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $58.b		; C5 58 ; Compare $58.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $57.b		; E6 57 ; Increment $57.b [Reads: Direct Page] [Flags: ZN]
	bit $44.b		; 24 44 ; Test bits $44.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ror $C1.b,X		; 76 C1 ; Rotate right $C1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc [$34.b]		; E7 34 ; Subtract with carry (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $0A,$40		; 44 40 0A ; Move block positive $0A,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $11.b		; C5 11 ; Compare $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($68.b)		; 12 68 ; OR accumulator with memory (indirect) ($68.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $444454.l,X		; 7F 54 44 44 ; Add long $444454.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $34.b		; C4 34 ; Compare $34.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ror $40ED.w,X		; 7E ED 40 ; Rotate right $40ED.w,X [Reads: X Index] [Flags: ZNC]
	and ($AA.b),Y		; 31 AA ; AND accumulator with memory ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $34F0.w		; EE F0 34 ; Increment $34F0.w [Flags: ZN]
	mvp $CD,$40		; 44 40 CD ; Move block positive $CD,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda ($AD.b)		; B2 AD ; Load accumulator (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pea $4424.w		; F4 24 44 ; Push absolute address $4424.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	bit $0A.b,X		; 34 0A ; Test bits $0A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda ($6E.b,S),Y		; B3 6E ; Load accumulator (stack relative indirect indexed) ($6E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $34F6B6.l		; 8F B6 F6 34 ; Store accumulator (long) $34F6B6.l [Reads: Accumulator]
	mvp $6F,$40		; 44 40 6F ; Move block positive $6F,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $A7F0.w		; CD F0 A7 ; Compare $A7F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $42, $44		; 42 44 ; Reserved instruction
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lsr $706F.w		; 4E 6F 70 ; Logical shift right $706F.w [Flags: ZNC]
	mvp $36,$44		; 44 44 36 ; Move block positive $36,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pea $00FE.w		; F4 FE 00 ; Push absolute address $00FE.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $45.b		; 04 45 ; Test and set bits $45.b [Reads: Accumulator] [Flags: Z]
	adc ($8F.b,S),Y		; 73 8F ; Add with carry (stack relative indirect indexed) ($8F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FE.b,X		; F6 FE ; Increment memory $FE.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	mvp $03,$44		; 44 44 03 ; Move block positive $03,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $4454C4.l		; 8F C4 54 44 ; Store accumulator (long) $4454C4.l [Reads: Accumulator]
	bit $24.b,X		; 34 24 ; Test bits $24.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc ($FB.b)		; F2 FB ; Subtract with carry (indirect) ($FB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stz $2301.w		; 9C 01 23 ; Store zero to $2301.w
	bit $7D.b,X		; 34 7D ; Test bits $7D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl $0137.w		; 0E 37 01 ; Arithmetic shift left $0137.w [Flags: ZNC]
	ora ($36.b)		; 12 36 ; OR accumulator with memory (indirect) ($36.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02D1AB.l		; 0F AB D1 02 ; OR accumulator with memory (long) $02D1AB.l [Writes: Accumulator] [Flags: ZN]
	cop $46.b		; 02 46 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $C6.b,X		; 34 C6 ; Test bits $C6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $40.b,X		; 34 40 ; Test bits $40.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $4ACE.w		; CD CE 4A ; Compare $4ACE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $0B3424.l		; 22 24 34 0B ; Jump to subroutine long $0B3424.l [Writes: Stack Pointer] [Flow: call]
	dec $27.b		; C6 27 ; Decrement $27.b [Reads: Direct Page] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $08.b		; C5 08 ; Compare $08.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $C834.w		; 9C 34 C8 ; Store zero to $C834.w
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $C6C6.w		; AD C6 C6 ; Load $C6C6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b)		; 12 34 ; OR accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0255.w		; CD 55 02 ; Compare $0255.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ora [$FF.b],Y		; 17 FF ; OR accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $51.b,X		; 55 51 ; Exclusive OR accumulator with memory $51.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $C527.w		; AD 27 C5 ; Load $C527.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9E2501.l,X		; 1F 01 25 9E ; Logical OR long $9E2501.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($34C5.w,X)		; 7C C5 34 ; Jump indirect indexed to ($34C5.w,X) [Reads: X Index] [Flow: jump]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $EB34.w,Y		; 39 34 EB ; AND accumulator with memory $EB34.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	adc ($93.b,X)		; 61 93 ; Add with carry ($93.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($6C.b,X)		; 81 6C ; Store accumulator ($6C.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($11.b,S),Y		; 13 11 ; OR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $07.b,X		; 34 07 ; Test bits $07.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $05D5.w,Y		; F9 D5 05 ; Subtract with carry $05D5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $239556.l		; 22 56 95 23 ; Jump to subroutine long $239556.l [Writes: Stack Pointer] [Flow: call]
	sbc $5213.w,Y		; F9 13 52 ; Subtract with carry $5213.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $1C.b		; 25 1C ; Logical AND $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $63.b		; E5 63 ; Subtract $63.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($21.b),Y		; 31 21 ; AND accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and ($25.b,S),Y		; 33 25 ; AND accumulator (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $32.b		; E5 32 ; Subtract $32.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($2D.b)		; 52 2D ; Exclusive OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $5B9F.w,X		; 9E 9F 5B ; Store zero to $5B9F.w,X [Reads: X Index]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	cmp #$5B.b		; C9 5B ; Compare #$5B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	eor ($E6.b)		; 52 E6 ; Exclusive OR accumulator with memory (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $26E6.w		; ED E6 26 ; Subtract $26E6.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jsl $E62825.l		; 22 25 28 E6 ; Jump to subroutine long $E62825.l [Writes: Stack Pointer] [Flow: call]
	bit $522D.w		; 2C 2D 52 ; Test bits $522D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	eor $F4.b,X		; 55 F4 ; Exclusive OR accumulator with memory $F4.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $302C.w		; 2C 2C 30 ; Test bits $302C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $29E6.w		; 2E E6 29 ; Rotate left $29E6.w [Flags: ZNC]
	and [$52.b]		; 27 52 ; AND accumulator with memory (long) [$52.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $87.b,X		; 35 87 ; Logical AND $87.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	.db $30, $33		; 30 33 ; Branch if minus to $30, $33 [Flow: branch]
	and $87.b,X		; 35 87 ; Logical AND $87.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $E6.b,X		; 36 E6 ; Rotate left $E6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $35.b		; E6 35 ; Increment $35.b [Reads: Direct Page] [Flags: ZN]
	jsl $3B3B3A.l		; 22 3A 3B 3B ; Jump to subroutine long $3B3B3A.l [Writes: Stack Pointer] [Flow: call]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $55E6.w,X		; FE E6 55 ; Increment memory $55E6.w,X [Reads: X Index] [Flags: ZN]
	jsl $2C2EE6.l		; 22 E6 2E 2C ; Jump to subroutine long $2C2EE6.l [Writes: Stack Pointer] [Flow: call]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $873A40.l,X		; 3F 40 3A 87 ; AND accumulator with memory (long,X) $873A40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $53.b,X		; 55 53 ; Exclusive OR accumulator with memory $53.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $33.b,S		; 43 33 ; Exclusive OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $28.b,X		; 55 28 ; Exclusive OR accumulator with memory $28.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $29.b		; E6 29 ; Increment $29.b [Reads: Direct Page] [Flags: ZN]
	eor #$52.b		; 49 52 ; Exclusive OR #$52.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $4B.b,X		; 35 4B ; Logical AND $4B.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jmp $5555.w		; 4C 55 55 ; Jump to $5555.w [Flow: jump]
	inc $4E3A.w,X		; FE 3A 4E ; Increment memory $4E3A.w,X [Reads: X Index] [Flags: ZN]
	eor $505525.l		; 4F 25 55 50 ; Exclusive OR accumulator with memory (long) $505525.l [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$3A.b		; 29 3A ; Logical AND #$3A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $35.b,X		; 55 35 ; Exclusive OR accumulator with memory $35.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($53.b),Y		; 51 53 ; Exclusive OR accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $E6FE.w,X		; FE FE E6 ; Increment memory $E6FE.w,X [Reads: X Index] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $656425.l		; 22 25 64 65 ; Jump to subroutine long $656425.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $2929.w,X		; FE 29 29 ; Increment memory $2929.w,X [Reads: X Index] [Flags: ZN]
	eor $23.b,X		; 55 23 ; Exclusive OR accumulator with memory $23.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $67.b,X		; 35 67 ; Logical AND $67.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$E6.b]		; 67 E6 ; Add with carry (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($55.b,S),Y		; 53 55 ; XOR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $FE.b		; 25 FE ; Logical AND $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $58.b		; E6 58 ; Increment $58.b [Reads: Direct Page] [Flags: ZN]
	cpx $5222.w		; EC 22 52 ; Compare $5222.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $7154.w		; EC 54 71 ; Compare $7154.w with X register [Reads: X Index] [Flags: ZNC]
	inc $25.b		; E6 25 ; Increment $25.b [Reads: Direct Page] [Flags: ZN]
	eor ($EC.b)		; 52 EC ; Exclusive OR accumulator with memory (indirect) ($EC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $3AE6.w,X		; FE E6 3A ; Increment memory $3AE6.w,X [Reads: X Index] [Flags: ZN]
	jsl $E15825.l		; 22 25 58 E1 ; Jump to subroutine long $E15825.l [Writes: Stack Pointer] [Flow: call]
	sbc ($75.b,X)		; E1 75 ; Subtract with carry ($75.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($25.b)		; 52 25 ; Exclusive OR accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $3A.b		; E6 3A ; Increment $3A.b [Reads: Direct Page] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $3A.b		; E6 3A ; Increment $3A.b [Reads: Direct Page] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor $5528.w,Y		; 59 28 55 ; Exclusive OR accumulator with memory $5528.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $17.b,X		; 55 17 ; Exclusive OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $66.b		; 65 66 ; Add $66.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and ($11.b),Y		; 31 11 ; AND accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $3D2E.w		; 2E 2E 3D ; Rotate left $3D2E.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $83C6.w,X		; 3E C6 83 ; Rotate left $83C6.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$1050]		; DC 50 10 ; Jump long indirect [$1050] [Flow: jump]
	adc $7AC9.w,Y		; 79 C9 7A ; Add $7AC9.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $55		; 50 55 ; Branch if overflow clear to $50, $55 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($5555.w,X)		; 7C 55 55 ; Jump indirect indexed to ($5555.w,X) [Reads: X Index] [Flow: jump]
	eor ($87.b,S),Y		; 53 87 ; XOR accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $29.b,X		; 36 29 ; Rotate left $29.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($55.b,S),Y		; 13 55 ; OR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $85.b		; 84 85 ; Store Y register to $85.b [Reads: Y Index]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Accumulator, Direct Page]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit #$85.b		; 89 85 ; Test bits #$85.b with accumulator [Reads: Accumulator] [Flags: Z]
	inc $55.b		; E6 55 ; Increment $55.b [Reads: Direct Page] [Flags: ZN]
	eor ($E6.b)		; 52 E6 ; Exclusive OR accumulator with memory (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $9190.w,Y		; 39 90 91 ; AND accumulator with memory $9190.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b,S),Y		; 93 92 ; Store accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Accumulator, Direct Page, Y Index]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $97.b		; E6 97 ; Increment $97.b [Reads: Direct Page] [Flags: ZN]
	inc $2539.w,X		; FE 39 25 ; Increment memory $2539.w,X [Reads: X Index] [Flags: ZN]
	and $29.b		; 25 29 ; Logical AND $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $9A6D.w,Y		; 99 6D 9A ; Store accumulator to $9A6D.w,Y [Reads: Accumulator, Y Index]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Accumulator, Direct Page, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $5555.w		; 6D 55 55 ; Add $5555.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $C4C4.w,Y		; 99 C4 C4 ; Store accumulator to $C4C4.w,Y [Reads: Accumulator, Y Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $50, $05		; 50 05 ; Branch if overflow clear to $50, $05 [Flow: branch]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: ZN]
	ror $99.b,X		; 76 99 ; Rotate right $99.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C4C4.w,Y		; 99 C4 C4 ; Store accumulator to $C4C4.w,Y [Reads: Accumulator, Y Index]
	adc $0550.w		; 6D 50 05 ; Add $0550.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $6D6D.w		; 6D 6D 6D ; Add $6D6D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $55		; 90 55 ; Branch if carry clear to $90, $55 [Flow: branch]
	eor $6D.b,X		; 55 6D ; Exclusive OR accumulator with memory $6D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $7D84.w		; 6D 84 7D ; Add $7D84.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $A8.b		; 84 A8 ; Store Y register to $A8.b [Reads: Y Index]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $2F.b,X		; 55 2F ; Exclusive OR accumulator with memory $2F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $55A9A3.l		; 2F A3 A9 55 ; AND accumulator with memory (long) $55A9A3.l [Writes: Accumulator] [Flags: ZN]
	eor $29.b,X		; 55 29 ; Exclusive OR accumulator with memory $29.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $3387.w		; 6D 87 33 ; Add $3387.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor $35.b,X		; 55 35 ; Exclusive OR accumulator with memory $35.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($87.b,S),Y		; 33 87 ; AND accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $E5.b,X		; 36 E5 ; Rotate left $E5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $37FE.w		; 6D FE 37 ; Add $37FE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor $25.b,X		; 55 25 ; Exclusive OR accumulator with memory $25.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2C3C.w,Y		; 39 3C 2C ; AND accumulator with memory $2C3C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $33.b,X		; 76 33 ; Rotate right $33.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp.w [$5533]		; DC 33 55 ; Jump long indirect [$5533] [Flow: jump]
	ora $87.b		; 05 87 ; Logical OR $87.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$35.b]		; 47 35 ; Exclusive OR accumulator with memory (long) [$35.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $3A.b,X		; 55 3A ; Exclusive OR accumulator with memory $3A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $E6E6.w		; EC E6 E6 ; Compare $E6E6.w with X register [Reads: X Index] [Flags: ZNC]
	eor ($22.b)		; 52 22 ; Exclusive OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$87.b		; 29 87 ; Logical AND #$87.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $2A.b		; C4 2A ; Compare $2A.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor ($05.b,S),Y		; 53 05 ; XOR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $35.b		; E6 35 ; Increment $35.b [Reads: Direct Page] [Flags: ZN]
	sbc $39.b		; E5 39 ; Subtract $39.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $2F28.w,X		; 7D 28 2F ; Add $2F28.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $55.b,X		; 36 55 ; Rotate left $55.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $51.b,X		; 55 51 ; Exclusive OR accumulator with memory $51.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$DC.b]		; 87 DC ; Store accumulator (long) [$DC.b] [Reads: Accumulator, Direct Page]
	.db $30, $53		; 30 53 ; Branch if minus to $30, $53 [Flow: branch]
	ora $87.b		; 05 87 ; Logical OR $87.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$33.b]		; 87 33 ; Store accumulator (long) [$33.b] [Reads: Accumulator, Direct Page]
	eor ($33.b,X)		; 41 33 ; Exclusive OR accumulator with memory ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $2A.b,X		; 55 2A ; Exclusive OR accumulator with memory $2A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$2A.b]		; 87 2A ; Store accumulator (long) [$2A.b] [Reads: Accumulator, Direct Page]
	inc $53.b,X		; F6 53 ; Increment memory $53.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor ($36.b,S),Y		; 53 36 ; XOR accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $C9.b		; C6 C9 ; Decrement $C9.b [Reads: Direct Page] [Flags: ZN]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $CCCB.w		; CC CB CC ; Compare $CCCB.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $B3.b		; 05 B3 ; Logical OR $B3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $E9.b,X		; B4 E9 ; Load Y register $E9.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cpx $0055.w		; EC 55 00 ; Compare $0055.w with X register [Reads: X Index] [Flags: ZNC]
	inc $34.b,X		; F6 34 ; Increment memory $34.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc ($55.b,S),Y		; F3 55 ; Subtract with carry (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $F0		; 50 F0 ; Branch if overflow clear to $50, $F0 [Flow: branch]
	cmp $0334D1.l		; CF D1 34 03 ; Compare accumulator (long) $0334D1.l [Reads: Accumulator] [Flags: ZNC]
	and ($D0.b,S),Y		; 33 D0 ; AND accumulator (stack relative indirect indexed) ($D0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FDFB.w,Y		; F9 FB FD ; Subtract with carry $FDFB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	sbc $27361F.l,X		; FF 1F 36 27 ; Subtract with carry (long,X) $27361F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $D03333.l		; CF 33 33 D0 ; Compare accumulator (long) $D03333.l [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	cmp [$33.b]		; C7 33 ; Compare accumulator (long) [$33.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and $C8.b,X		; 35 C8 ; Logical AND $C8.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $C9C9.w		; EC C9 C9 ; Compare $C9C9.w with X register [Reads: X Index] [Flags: ZNC]
	eor ($55.b,S),Y		; 53 55 ; XOR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$EA.b		; E9 EA ; Subtract #$EA.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cpx $0034.w		; EC 34 00 ; Compare $0034.w with X register [Reads: X Index] [Flags: ZNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $A9.b,X		; 36 A9 ; Rotate left $A9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $A8.b,X		; F6 A8 ; Increment memory $A8.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $0000.w		; EE 00 00 ; Increment $0000.w [Flags: ZN]
	sbc $363636.l		; EF 36 36 36 ; Subtract with carry (long) $363636.l [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $34A5.w		; AD A5 34 ; Load $34A5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $D9.b		; 04 D9 ; Test and set bits $D9.b [Reads: Accumulator] [Flags: Z]
	and $C3.b,X		; 35 C3 ; Logical AND $C3.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	sbc ($19.b)		; F2 19 ; Subtract with carry (indirect) ($19.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $382002.l		; AF 02 20 38 ; Load long $382002.l into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $71.b		; C6 71 ; Decrement $71.b [Reads: Direct Page] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	ora $C8C7.w,X		; 1D C7 C8 ; OR accumulator with memory $C8C7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $AA.b		; C6 AA ; Decrement $AA.b [Reads: Direct Page] [Flags: ZN]
	eor $00.b,X		; 55 00 ; Exclusive OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	dec $D2.b		; C6 D2 ; Decrement $D2.b [Reads: Direct Page] [Flags: ZN]
	cmp ($13.b)		; D2 13 ; Compare accumulator (indirect) ($13.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($C6.b,S),Y		; 33 C6 ; AND accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $3333.w		; CD 33 33 ; Compare $3333.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $34.b		; 26 34 ; Rotate left $34.b [Reads: Direct Page] [Flags: ZNC]
	mvp $34,$CE		; 44 CE 34 ; Move block positive $34,$CE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	bit $F6.b,X		; 34 F6 ; Test bits $F6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	wai		; CB ; Wait for interrupt
	cmp $5503.w		; CD 03 55 ; Compare $5503.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $9D		; B0 9D ; Branch if carry set to $B0, $9D [Flow: branch]
	dec $5236.w		; CE 36 52 ; Decrement $5236.w [Flags: ZN]
	.db $30, $B6		; 30 B6 ; Branch if minus to $30, $B6 [Flow: branch]
	lda ($B5.b,S),Y		; B3 B5 ; Load accumulator (stack relative indirect indexed) ($B5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $55.b,X		; F6 55 ; Increment memory $55.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor ($B9.b,S),Y		; 53 B9 ; XOR accumulator (stack relative indirect indexed) ($B9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ldy $5536.w,X		; BC 36 55 ; Load Y register $5536.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $BE		; 50 BE ; Branch if overflow clear to $50, $BE [Flow: branch]
	cpy #$C1.b		; C0 C1 ; Compare #$C1.b with Y register [Reads: Y Index] [Flags: ZNC]
	inc $55.b,X		; F6 55 ; Increment memory $55.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor ($35.b,S),Y		; 53 35 ; XOR accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($CEC3.w,X)		; FC C3 CE ; Jump to subroutine indirect indexed ($CEC3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $3434.w		; CE 34 34 ; Decrement $3434.w [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $9D.b,X		; F6 9D ; Increment memory $9D.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $3234.w		; CE 34 32 ; Decrement $3234.w [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($CA.b),Y		; D1 CA ; Compare accumulator ($CA.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	nop		; EA ; No operation
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$CE.b],Y		; F7 CE ; Subtract with carry (long indexed) [$CE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $CF.b,X		; 34 CF ; Test bits $CF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $D0, $D1		; D0 D1 ; Branch if not equal to $D0, $D1 [Flow: branch]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $CE34.w		; CE 34 CE ; Decrement $CE34.w [Flags: ZN]
	asl $3130.w,X		; 1E 30 31 ; Arithmetic shift left $3130.w,X [Reads: X Index] [Flags: ZNC]
	dec $D5B1.w		; CE B1 D5 ; Decrement $D5B1.w [Flags: ZN]
	ldy $35.b,X		; B4 35 ; Load Y register $35.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	eor $36.b,X		; 55 36 ; Exclusive OR accumulator with memory $36.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $CE.b,X		; 36 CE ; Rotate left $CE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $04CE.w		; CE CE 04 ; Decrement $04CE.w [Flags: ZN]
	dec $2333.w		; CE 33 23 ; Decrement $2333.w [Flags: ZN]
	cmp $D8CA.w,Y		; D9 CA D8 ; Compare accumulator $D8CA.w,Y [Reads: Y Index] [Flags: ZNC]
	bit $03.b,X		; 34 03 ; Test bits $03.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $50, $38		; 50 38 ; Branch if overflow clear to $50, $38 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp #$33.b		; C9 33 ; Compare #$33.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor ($CE.b,S),Y		; 53 CE ; XOR accumulator (stack relative indirect indexed) ($CE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $3333.w		; CE 33 33 ; Decrement $3333.w [Flags: ZN]
	jmp.w [$E0DE]		; DC DE E0 ; Jump long indirect [$E0DE] [Flow: jump]
	sbc [$55.b]		; E7 55 ; Subtract with carry (long) [$55.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $E9.b,X		; 55 E9 ; Exclusive OR accumulator with memory $E9.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	cpx $5579.w		; EC 79 55 ; Compare $5579.w with X register [Reads: X Index] [Flags: ZNC]
	eor ($C4.b),Y		; 51 C4 ; Exclusive OR accumulator with memory ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $0000.w,Y		; D9 00 00 ; Compare accumulator $0000.w,Y [Reads: Y Index] [Flags: ZNC]
	jmp ($C4ED.w,X)		; 7C ED C4 ; Jump indirect indexed to ($C4ED.w,X) [Reads: X Index] [Flow: jump]
	bit $05.b,X		; 34 05 ; Test bits $05.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $D934.w		; EE 34 D9 ; Increment $D934.w [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $F2.b,X		; 34 F2 ; Test bits $F2.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr ($35F4.w,X)		; FC F4 35 ; Jump to subroutine indirect indexed ($35F4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $C8.b		; 05 C8 ; Logical OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $F6.b,X		; 34 F6 ; Test bits $F6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $52		; 50 52 ; Branch if overflow clear to $50, $52 [Flow: branch]
	cmp #$D4.b		; C9 D4 ; Compare #$D4.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($34.b,S),Y		; D3 34 ; Compare accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sbc ($F8.b)		; F2 F8 ; Subtract with carry (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($5103.w)		; 6C 03 51 ; Jump indirect to ($5103.w) [Flow: jump]
	cpx $A0.b		; E4 A0 ; Compare $A0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc ($23.b),Y		; 71 23 ; Add with carry ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($E3.b)		; F2 E3 ; Subtract with carry (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $03.b,X		; 34 03 ; Test bits $03.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $EF.b,X		; 34 EF ; Test bits $EF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $33.b,S		; A3 33 ; Load accumulator (stack relative) $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	sbc $34.b		; E5 34 ; Subtract $34.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $13.b,S		; A3 13 ; Load accumulator (stack relative) $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$11.b]		; A7 11 ; Load accumulator (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $A7.b		; 26 A7 ; Rotate left $A7.b [Reads: Direct Page] [Flags: ZNC]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $71.b,X		; 34 71 ; Test bits $71.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $9D.b,X		; 34 9D ; Test bits $9D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $1E35.w		; 20 35 1E ; Jump to subroutine at $1E35.w [Writes: Stack Pointer] [Flow: call]
	sta $011D.w,X		; 9D 1D 01 ; Store accumulator to $011D.w,X [Reads: Accumulator, X Index]
	jsr $8936.w		; 20 36 89 ; Jump to subroutine at $8936.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	bit $BE.b,X		; 34 BE ; Test bits $BE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lsr $349D.w		; 4E 9D 34 ; Logical shift right $349D.w [Flags: ZNC]
	lda [$44.b]		; A7 44 ; Load accumulator (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $B7.b		; 04 B7 ; Test and set bits $B7.b [Reads: Accumulator] [Flags: Z]
	adc $44FEFE.l		; 6F FE FE 44 ; Add with carry (long) $44FEFE.l [Writes: Accumulator] [Flags: ZVNC]
	eor $9D.b,X		; 55 9D ; Exclusive OR accumulator with memory $9D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $8434.w		; AE 34 84 ; Load $8434.w into X register [Writes: X Index] [Flags: ZN]
	mvp $8B,$04		; 44 04 8B ; Move block positive $8B,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	mvp $04,$46		; 44 46 04 ; Move block positive $04,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $62, $60, $44		; 62 60 44 ; Push effective relative address $62, $60, $44 [Writes: Stack Pointer]
	adc $CD0A9B.l		; 6F 9B 0A CD ; Add with carry (long) $CD0A9B.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $34,$62		; 44 62 34 ; Move block positive $34,$62 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$C1.b],Y		; 57 C1 ; Exclusive OR accumulator with memory (long indexed) [$C1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$04.b],Y		; 37 04 ; AND accumulator with memory (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $E1		; 42 E1 ; Reserved instruction
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $0D,$C4		; 54 C4 0D ; Move block negative $0D,$C4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvp $F5,$60		; 44 60 F5 ; Move block positive $F5,$60 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	asl $5310.w		; 0E 10 53 ; Arithmetic shift left $5310.w [Flags: ZNC]
	ror $DC.b		; 66 DC ; Rotate right $DC.b [Reads: Direct Page] [Flags: ZNC]
	cmp $1027.w		; CD 27 10 ; Compare $1027.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $386D36.l		; 22 36 6D 38 ; Jump to subroutine long $386D36.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	eor $33.b,S		; 43 33 ; Exclusive OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $7E7E.w,X		; 7E 7E 7E ; Rotate right $7E7E.w,X [Reads: X Index] [Flags: ZNC]
	ora ($33.b,S),Y		; 13 33 ; OR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $347E.w,X		; 7E 7E 34 ; Rotate right $347E.w,X [Reads: X Index] [Flags: ZNC]
	asl $0033.w,X		; 1E 33 00 ; Arithmetic shift left $0033.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	bit $B2.b,X		; 34 B2 ; Test bits $B2.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	rol $8F.b,X		; 36 8F ; Rotate left $8F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $ADB2.w		; CD B2 AD ; Compare $ADB2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda [$24.b],Y		; B7 24 ; Load accumulator (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $B9,$B8		; 44 B8 B9 ; Move block positive $B9,$B8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $44,$19		; 54 19 44 ; Move block negative $44,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $87.b		; 26 87 ; Rotate left $87.b [Reads: Direct Page] [Flags: ZNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	rol $F2.b		; 26 F2 ; Rotate left $F2.b [Reads: Direct Page] [Flags: ZNC]
	mvp $27,$11		; 44 11 27 ; Move block positive $27,$11 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $368F.w,X		; 1D 8F 36 ; OR accumulator with memory $368F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $97.b		; [PATTERN: Memory clearing operation] 64 97 ; Store zero to $97.b
	and [$0B.b],Y		; 37 0B ; AND accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($43.b)		; B2 43 ; Load accumulator (indirect) ($43.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $AD.b		; 14 AD ; Test and reset bits $AD.b [Reads: Accumulator] [Flags: Z]
	stz $0B.b,X		; 74 0B ; Store zero to $0B.b,X [Reads: X Index]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $74.b,X		; 34 74 ; Test bits $74.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvn $C5,$54		; 54 54 C5 ; Move block negative $C5,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$34		; E2 34
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F0BAD.l,X		; 1F AD 0B 1F ; Logical OR long $1F0BAD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $16.b		; 64 16 ; Store zero to $16.b
	.db $50, $AD		; 50 AD ; Branch if overflow clear to $50, $AD [Flow: branch]
	jmp.w [$14AD]		; DC AD 14 ; Jump long indirect [$14AD] [Flow: jump]
	bit $27.b		; 24 27 ; Test bits $27.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and [$7C.b]		; 27 7C ; AND accumulator with memory (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($13.b,S),Y		; 33 13 ; AND accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($A5.b)		; 12 A5 ; OR accumulator with memory (indirect) ($A5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $0F.b		; C4 0F ; Compare $0F.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and [$01.b],Y		; 37 01 ; AND accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b,S		; 23 34 ; AND accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $A9.b,X		; 36 A9 ; Rotate left $A9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy #$20.b		; A0 20 ; Load #$20.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $EE.b		; E6 EE ; Increment $EE.b [Reads: Direct Page] [Flags: ZN]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $42C9.w		; 20 C9 42 ; Jump to subroutine at $42C9.w [Writes: Stack Pointer] [Flow: call]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$29.b		; 29 29 ; Logical AND #$29.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $55A8.w		; EC A8 55 ; Compare $55A8.w with X register [Reads: X Index] [Flags: ZNC]
	and $3A.b		; 25 3A ; Logical AND $3A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$28.b],Y		; 37 28 ; AND accumulator with memory (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldx $32.b		; A6 32 ; Load $32.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $37.b,X		; 35 37 ; Logical AND $37.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and [$29.b],Y		; 37 29 ; AND accumulator with memory (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $55.b		; E6 55 ; Increment $55.b [Reads: Direct Page] [Flags: ZN]
	and ($E6.b)		; 32 E6 ; AND accumulator with memory (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $E6E6.w		; EC E6 E6 ; Compare $E6E6.w with X register [Reads: X Index] [Flags: ZNC]
	jsl $E6E622.l		; 22 22 E6 E6 ; Jump to subroutine long $E6E622.l [Writes: Stack Pointer] [Flow: call]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	jsl $333722.l		; 22 22 37 33 ; Jump to subroutine long $333722.l [Writes: Stack Pointer] [Flow: call]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $50.b,X		; 55 50 ; Exclusive OR accumulator with memory $50.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($2A.b,X)		; 41 2A ; Exclusive OR accumulator with memory ($2A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $55		; 50 55 ; Branch if overflow clear to $50, $55 [Flow: branch]
	rol $33.b		; 26 33 ; Rotate left $33.b [Reads: Direct Page] [Flags: ZNC]
	bit $38.b,X		; 34 38 ; Test bits $38.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $605534.l		; 22 34 55 60 ; Jump to subroutine long $605534.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	and $CE.b,X		; 35 CE ; Logical AND $CE.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $00.b,X		; 55 00 ; Exclusive OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $29.b		; E6 29 ; Increment $29.b [Reads: Direct Page] [Flags: ZN]
	cmp #$2B.b		; C9 2B ; Compare #$2B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $06.b		; 25 06 ; Logical AND $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $302F.w		; 2D 2F 30 ; Logical AND $302F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $65.b		; 66 65 ; Rotate right $65.b [Reads: Direct Page] [Flags: ZNC]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $6666.w,X		; 3C 66 66 ; Test bits $6666.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $E6CE.w,X		; 3D CE E6 ; AND accumulator with memory $E6CE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $E6.b		; 25 E6 ; Logical AND $E6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $2A.b		; E6 2A ; Increment $2A.b [Reads: Direct Page] [Flags: ZN]
	eor $22.b,X		; 55 22 ; Exclusive OR accumulator with memory $22.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($30.b,S),Y		; 53 30 ; XOR accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pei ($C9.b)		; D4 C9 ; Push effective indirect address ($C9.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sta $60.b		; 85 60 ; Store accumulator to $60.b [Reads: Accumulator]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $386A.w		; ED 6A 38 ; Subtract $386A.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $343D.w,X		; 3C 3D 34 ; Test bits $343D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ror $60.b		; 66 60 ; Rotate right $60.b [Reads: Direct Page] [Flags: ZNC]
	and $71.b,X		; 35 71 ; Logical AND $71.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $58.b,X		; 36 58 ; Rotate left $58.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($19.b)		; D4 19 ; Push effective indirect address ($19.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $6A.b		; 04 6A ; Test and set bits $6A.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $2A.b		; 85 2A ; Store accumulator to $2A.b [Reads: Accumulator]
	ora ($35.b,S),Y		; 13 35 ; OR accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3C3B.w,Y		; 39 3B 3C ; AND accumulator with memory $3C3B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $5555.w		; 2E 55 55 ; Rotate left $5555.w [Flags: ZNC]
	and $DCDC87.l		; 2F 87 DC DC ; AND accumulator with memory (long) $DCDC87.l [Writes: Accumulator] [Flags: ZN]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($E6.b,S),Y		; 33 E6 ; AND accumulator (stack relative indirect indexed) ($E6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $5228.w		; 2D 28 52 ; Logical AND $5228.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $27.b,X		; 55 27 ; Exclusive OR accumulator with memory $27.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $36.b,S		; E3 36 ; Subtract stack-relative $36.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc $50.b		; E6 50 ; Increment $50.b [Reads: Direct Page] [Flags: ZN]
	eor ($3B.b)		; 52 3B ; Exclusive OR accumulator with memory (indirect) ($3B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $27E6.w,X		; FE E6 27 ; Increment memory $27E6.w,X [Reads: X Index] [Flags: ZN]
	eor ($25.b)		; 52 25 ; Exclusive OR accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $EC.b		; E6 EC ; Increment $EC.b [Reads: Direct Page] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $CE		; 10 CE ; Branch if plus to $10, $CE [Flow: branch]
	cpx $FA2A.w		; EC 2A FA ; Compare $FA2A.w with X register [Reads: X Index] [Flags: ZNC]
	cop $51.b		; 02 51 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $3D29.w		; CE 29 3D ; Decrement $3D29.w [Flags: ZN]
	eor ($03.b,X)		; 41 03 ; Exclusive OR accumulator with memory ($03.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $34.b,X		; 56 34 ; Logical shift right $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $5B.b,X		; 34 5B ; Test bits $5B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jmp ($03CE.w)		; 6C CE 03 ; Jump indirect to ($03CE.w) [Flow: jump]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	eor ($34.b,X)		; 41 34 ; Exclusive OR accumulator with memory ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $06,$66		; 44 66 06 ; Move block positive $06,$66 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor [$72.b]		; 47 72 ; Exclusive OR accumulator with memory (long) [$72.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $63.b		; 66 63 ; Rotate right $63.b [Reads: Direct Page] [Flags: ZNC]
	adc $3442.w,Y		; 79 42 34 ; Add $3442.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $0636.w		; 4E 36 06 ; Logical shift right $0636.w [Flags: ZNC]
	.db $50, $4F		; 50 4F ; Branch if overflow clear to $50, $4F [Flow: branch]
	eor ($CE.b),Y		; 51 CE ; Exclusive OR accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $60.b		; 66 60 ; Rotate right $60.b [Reads: Direct Page] [Flags: ZNC]
	eor ($34.b,X)		; 41 34 ; Exclusive OR accumulator with memory ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$6B.b		; 69 6B ; Add #$6B.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($58.b,S),Y		; 33 58 ; AND accumulator (stack relative indirect indexed) ($58.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $59.b,X		; 34 59 ; Test bits $59.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($60.b,S),Y		; 73 60 ; Add with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($73.b,X)		; 61 73 ; Add with carry ($73.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($76.b,X)		; 41 76 ; Exclusive OR accumulator with memory ($76.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $63.b,X		; 16 63 ; Arithmetic shift left $63.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $6260.w,X		; 5E 60 62 ; Logical shift right $6260.w,X [Reads: X Index] [Flags: ZNC]
	.db $62, $66, $66		; 62 66 66 ; Push effective relative address $62, $66, $66 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $66, $66		; 62 66 66 ; Push effective relative address $62, $66, $66 [Writes: Stack Pointer]
	.db $42, $34		; 42 34 ; Reserved instruction
	lsr $6050.w		; 4E 50 60 ; Logical shift right $6050.w [Flags: ZNC]
	ror $35.b		; 66 35 ; Rotate right $35.b [Reads: Direct Page] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $50, $04		; 50 04 ; Branch if overflow clear to $50, $04 [Flow: branch]
	cmp $67.b,X		; D5 67 ; Compare accumulator $67.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp ($6168.w,X)		; 7C 68 61 ; Jump indirect indexed to ($6168.w,X) [Reads: X Index] [Flow: jump]
	asl $E6.b,X		; 16 E6 ; Arithmetic shift left $E6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $58.b,S		; 83 58 ; Store accumulator (stack relative) $58.b,S [Reads: Accumulator, Stack Pointer]
	inc $20.b		; E6 20 ; Increment $20.b [Reads: Direct Page] [Flags: ZN]
	ora ($5B.b)		; 12 5B ; OR accumulator with memory (indirect) ($5B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $58.b,X		; 34 58 ; Test bits $58.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	bit $9D.b,X		; 34 9D ; Test bits $9D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($02.b),Y		; 31 02 ; AND accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc $36.b		; E6 36 ; Increment $36.b [Reads: Direct Page] [Flags: ZN]
	bit $12.b,X		; 34 12 ; Test bits $12.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $42.b,X		; 34 42 ; Test bits $42.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $6C36.w,X		; 9D 36 6C ; Store accumulator to $6C36.w,X [Reads: Accumulator, X Index]
	rol $20.b,X		; 36 20 ; Rotate left $20.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $86.b		; E6 86 ; Increment $86.b [Reads: Direct Page] [Flags: ZN]
	sbc ($34.b)		; F2 34 ; Subtract with carry (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $9D.b,X		; 34 9D ; Test bits $9D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $86.b,X		; 36 86 ; Rotate left $86.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $F61010.l		; 8F 10 10 F6 ; Store accumulator (long) $F61010.l [Reads: Accumulator]
	inc $34.b,X		; F6 34 ; Increment memory $34.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $01.b,X		; 55 01 ; Exclusive OR accumulator with memory $01.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $3300.w,Y		; F9 00 33 ; Subtract with carry $3300.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $3637.w		; 6D 37 36 ; Add $3637.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $0363.w,X		; FD 63 03 ; Subtract with carry $0363.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $34EB60.l		; 6F 60 EB 34 ; Add with carry (long) $34EB60.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($10.b,X)		; 61 10 ; Add with carry ($10.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $0B.b,X		; 36 0B ; Rotate left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $04C6.w		; 0D C6 04 ; Logical OR $04C6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ror $F5.b		; 66 F5 ; Rotate right $F5.b [Reads: Direct Page] [Flags: ZNC]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $34.b,X		; 15 34 ; OR accumulator with memory $34.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($F8.b),Y		; 71 F8 ; Add with carry ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $10.b,S		; 43 10 ; Exclusive OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$25		; E2 25
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($A3.b),Y		; 71 A3 ; Add with carry ($A3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $1C34.w,Y		; 79 34 1C ; Add $1C34.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0010.w,X		; 9D 10 00 ; Store accumulator to $0010.w,X [Reads: Accumulator, X Index]
	stz $9D9B.w		; 9C 9B 9D ; Store zero to $9D9B.w
	sta $0000.w,X		; 9D 00 00 ; Store accumulator to $0000.w,X [Reads: Accumulator, X Index]
	bit $73.b,X		; 34 73 ; Test bits $73.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldx $02D7.w		; AE D7 02 ; Load $02D7.w into X register [Writes: X Index] [Flags: ZN]
	and $D6.b,S		; 23 D6 ; AND accumulator with stack relative $D6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $03.b,X		; 36 03 ; Rotate left $03.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($30.b)		; 72 30 ; Add with carry (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $06.b		; 46 06 ; Logical shift right $06.b [Reads: Direct Page] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stz $41B0.w,X		; 9E B0 41 ; Store zero to $41B0.w,X [Reads: X Index]
	cop $DE.b		; 02 DE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3536.w,X		; DD 36 35 ; Compare accumulator $3536.w,X [Reads: X Index] [Flags: ZNC]
	and ($04.b,S),Y		; 33 04 ; AND accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($A9C3.w,X)		; FC C3 A9 ; Jump to subroutine indirect indexed ($A9C3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy $0005.w		; AC 05 00 ; Load $0005.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp ($31A3.w)		; 6C A3 31 ; Jump indirect to ($31A3.w) [Flow: jump]
	ora ($84.b,S),Y		; 13 84 ; OR accumulator (stack relative indirect indexed) ($84.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $10.b,S		; E3 10 ; Subtract stack-relative $10.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $7E.b,X		; 36 7E ; Rotate left $7E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $3310.w,X		; 7E 10 33 ; Rotate right $3310.w,X [Reads: X Index] [Flags: ZNC]
	.db $82, $7E, $F0		; 82 7E F0 ; Branch always long to $82, $7E, $F0 [Flow: branch]
	sbc $0333.w,Y		; F9 33 03 ; Subtract with carry $0333.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $34FB.w,Y		; F9 FB 34 ; Subtract with carry $34FB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $33.b,X		; 36 33 ; Rotate left $33.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $00FE.w,X		; FE FE 00 ; Increment memory $00FE.w,X [Reads: X Index] [Flags: ZN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $7E.b,X		; 34 7E ; Test bits $7E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $34.b		; 14 34 ; Test and reset bits $34.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $4440.w		; 0D 40 44 ; Logical OR $4440.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $7434.w		; 0E 34 74 ; Arithmetic shift left $7434.w [Flags: ZNC]
	adc [$40.b],Y		; 77 40 ; Add with carry (long indexed) [$40.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $07B134.l		; 22 34 B1 07 ; Jump to subroutine long $07B134.l [Writes: Stack Pointer] [Flow: call]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($A9.b),Y		; 11 A9 ; OR accumulator with memory ($A9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $346C.w		; AC 6C 34 ; Load $346C.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $7910.w		; 20 10 79 ; Jump to subroutine at $7910.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ror $10.b		; 66 10 ; Rotate right $10.b [Reads: Direct Page] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $7C.b,X		; 34 7C ; Test bits $7C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jmp.w [$6060]		; DC 60 60 ; Jump long indirect [$6060] [Flow: jump]
	.db $82, $BC, $84		; 82 BC 84 ; Branch always long to $82, $BC, $84 [Flow: branch]
	cpy $62.b		; C4 62 ; Compare $62.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	adc ($C6.b,X)		; 61 C6 ; Add with carry ($C6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $3486.w,Y		; 79 86 34 ; Add $3486.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta [$34.b]		; 87 34 ; Store accumulator (long) [$34.b] [Reads: Accumulator, Direct Page]
	sbc $2D.b,S		; E3 2D ; Subtract stack-relative $2D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($39.b,X)		; 01 39 ; Logical OR ($39.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit #$8C.b		; 89 8C ; Test bits #$8C.b with accumulator [Reads: Accumulator] [Flags: Z]
	and $16.b,X		; 35 16 ; Logical AND $16.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $A5A5.w,X		; FD A5 A5 ; Subtract with carry $A5A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($80.b,X)		; 81 80 ; Store accumulator ($80.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta $916606.l		; 8F 06 66 91 ; Store accumulator (long) $916606.l [Reads: Accumulator]
	sta ($8F.b,S),Y		; 93 8F ; Store accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	jsr $6566.w		; 20 66 65 ; Jump to subroutine at $6566.w [Writes: Stack Pointer] [Flow: call]
	sta $9C.b,X		; 95 9C ; Store accumulator to $9C.b,X [Reads: Accumulator, X Index]
	stz $6695.w,X		; 9E 95 66 ; Store zero to $6695.w,X [Reads: X Index]
	ror $CD.b		; 66 CD ; Rotate right $CD.b [Reads: Direct Page] [Flags: ZNC]
	jmp.w [$9595]		; DC 95 95 ; Jump long indirect [$9595] [Flow: jump]
	jsl $DC1F66.l		; 22 66 1F DC ; Jump to subroutine long $DC1F66.l [Writes: Stack Pointer] [Flow: call]
	sta $CD.b,X		; 95 CD ; Store accumulator to $CD.b,X [Reads: Accumulator, X Index]
	eor ($62.b)		; 52 62 ; Exclusive OR accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($95.b)		; D2 95 ; Compare accumulator (indirect) ($95.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $25.b,X		; 95 25 ; Store accumulator to $25.b,X [Reads: Accumulator, X Index]
	rol $63.b		; 26 63 ; Rotate left $63.b [Reads: Direct Page] [Flags: ZNC]
	dec $DA.b		; C6 DA ; Decrement $DA.b [Reads: Direct Page] [Flags: ZN]
	ldx #$A4.b		; A2 A4 ; Load #$A4.b into X register [Writes: X Index] [Flags: ZN]
	jsl $A8A666.l		; 22 66 A6 A8 ; Jump to subroutine long $A8A666.l [Writes: Stack Pointer] [Flow: call]
	ldy $90.b		; A4 90 ; Load $90.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ror $62.b		; 66 62 ; Rotate right $62.b [Reads: Direct Page] [Flags: ZNC]
	sta $C2C69F.l,X		; 9F 9F C6 C2 ; Store accumulator (long,X) $C2C69F.l,X [Reads: Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A4C6.w		; AD C6 A4 ; Load $A4C6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $61.b		; 65 61 ; Add $61.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($66.b),Y		; 11 66 ; OR accumulator with memory ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $AA.b		; C6 AA ; Decrement $AA.b [Reads: Direct Page] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	adc $C6.b,S		; 63 C6 ; Add with carry (stack relative) $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor ($AA.b,S),Y		; 53 AA ; XOR accumulator (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $0601.w		; AE 01 06 ; Load $0601.w into X register [Writes: X Index] [Flags: ZN]
	ldx $D1AE.w		; AE AE D1 ; Load $D1AE.w into X register [Writes: X Index] [Flags: ZN]
	sta $66.b,S		; 83 66 ; Store accumulator (stack relative) $66.b,S [Reads: Accumulator, Stack Pointer]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx $DCAE.w		; AE AE DC ; Load $DCAE.w into X register [Writes: X Index] [Flags: ZN]
	rol $60.b		; 26 60 ; Rotate left $60.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B3.b),Y		; B1 B3 ; Load accumulator ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $78.b,X		; B4 78 ; Load Y register $78.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ror $61.b		; 66 61 ; Rotate right $61.b [Reads: Direct Page] [Flags: ZNC]
	cmp #$E3.b		; C9 E3 ; Compare #$E3.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $7883.w		; CC 83 78 ; Compare $7883.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx $1601.w		; AE 01 16 ; Load $1601.w into X register [Writes: X Index] [Flags: ZN]
	ldx $34AE.w		; AE AE 34 ; Load $34AE.w into X register [Writes: X Index] [Flags: ZN]
	ora $340266.l		; 0F 66 02 34 ; OR accumulator with memory (long) $340266.l [Writes: Accumulator] [Flags: ZN]
	lda $1C.b,S		; A3 1C ; Load accumulator (stack relative) $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $2600.w		; AE 00 26 ; Load $2600.w into X register [Writes: X Index] [Flags: ZN]
	nop		; EA ; No operation
	lda $FF66.w,Y		; B9 66 FF ; Load $FF66.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $62.b,X		; 34 62 ; Test bits $62.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $0166.w,Y		; B9 66 01 ; Load $0166.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($60.b,X)		; 61 60 ; Add with carry ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C4.b,X		; D5 C4 ; Compare accumulator $C4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	ror $FF.b		; 66 FF ; Rotate right $FF.b [Reads: Direct Page] [Flags: ZNC]
	cmp $C8.b		; C5 C8 ; Compare $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $66		; 10 66 ; Branch if plus to $10, $66 [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy $E9.b		; C4 E9 ; Compare $E9.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $16.b,X		; D6 16 ; Decrement memory $16.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	asl $83.b,X		; 16 83 ; Arithmetic shift left $83.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldx $D0AE.w		; AE AE D0 ; Load $D0AE.w into X register [Writes: X Index] [Flags: ZN]
	asl $60.b,X		; 16 60 ; Arithmetic shift left $60.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $7FDB.w,Y		; D9 DB 7F ; Compare accumulator $7FDB.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc #$66.b		; E9 66 ; Subtract #$66.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora ($DC.b),Y		; 11 DC ; OR accumulator with memory ($DC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $AE.b,S		; 83 AE ; Store accumulator (stack relative) $AE.b,S [Reads: Accumulator, Stack Pointer]
	ldx $6661.w		; AE 61 66 ; Load $6661.w into X register [Writes: X Index] [Flags: ZN]
	sbc ($57.b,X)		; E1 57 ; Subtract with carry ($57.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $62C9.w,X		; DE C9 62 ; Decrement memory $62C9.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc $E8.b		; E6 E8 ; Increment $E8.b [Reads: Direct Page] [Flags: ZN]
	eor ($16.b,S),Y		; 53 16 ; XOR accumulator (stack relative indirect indexed) ($16.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($E7.b,X)		; 61 E7 ; Add with carry ($E7.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	dec $6687.w,X		; DE 87 66 ; Decrement memory $6687.w,X [Reads: X Index] [Flags: ZN]
	adc $E7.b,S		; 63 E7 ; Add with carry (stack relative) $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta [$E9.b]		; 87 E9 ; Store accumulator (long) [$E9.b] [Reads: Accumulator, Direct Page]
	ldx $6663.w		; AE 63 66 ; Load $6663.w into X register [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc [$F2.b]		; E7 F2 ; Subtract with carry (long) [$F2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($66.b)		; F2 66 ; Subtract with carry (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $F4.b		; 66 F4 ; Rotate right $F4.b [Reads: Direct Page] [Flags: ZNC]
	inc $F7.b,X		; F6 F7 ; Increment memory $F7.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc [$66.b]		; E7 66 ; Subtract with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $F8.b		; 66 F8 ; Rotate right $F8.b [Reads: Direct Page] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $6166.w		; EE 66 61 ; Increment $6166.w [Flags: ZN]
	sbc [$03.b]		; E7 03 ; Subtract with carry (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $F8.b		; 04 F8 ; Test and set bits $F8.b [Reads: Accumulator] [Flags: Z]
	adc [$76.b]		; 67 76 ; Add with carry (long) [$76.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $E61E.w		; 1C 1E E6 ; Test and reset bits $E61E.w [Reads: Accumulator] [Flags: Z]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $06.b,S		; 63 06 ; Add with carry (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tsb $7E.b		; 04 7E ; Test and set bits $7E.b [Reads: Accumulator] [Flags: Z]
	ldx $1677.w		; AE 77 16 ; Load $1677.w into X register [Writes: X Index] [Flags: ZN]
	ror $1E.b		; 66 1E ; Rotate right $1E.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $12.b		; 04 12 ; Test and set bits $12.b [Reads: Accumulator] [Flags: Z]
	adc [$85.b],Y		; 77 85 ; Add with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $AE20.w		; AE 20 AE ; Load $AE20.w into X register [Writes: X Index] [Flags: ZN]
	rol $26.b,X		; 36 26 ; Rotate left $26.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	jsr $6266.w		; 20 66 62 ; Jump to subroutine at $6266.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc [$0F.b]		; E7 0F ; Subtract with carry (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $117766.l		; 0F 66 77 11 ; OR accumulator with memory (long) $117766.l [Writes: Accumulator] [Flags: ZN]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc [$70.b],Y		; 77 70 ; Add with carry (long indexed) [$70.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($CC.b)		; D2 CC ; Compare accumulator (indirect) ($CC.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $00CC.w		; CC CC 00 ; Compare $00CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Accumulator, Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $E634.w		; AE 34 E6 ; Load $E634.w into X register [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00E79F.l,X		; 9F 9F E7 00 ; Store accumulator (long,X) $00E79F.l,X [Reads: Accumulator, X Index]
	asl $C5.b		; 06 C5 ; Arithmetic shift left $C5.b [Reads: Direct Page] [Flags: ZNC]
	sbc $B7.b		; E5 B7 ; Subtract $B7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda [$01.b],Y		; B7 01 ; Load accumulator (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $06.b		; 66 06 ; Rotate right $06.b [Reads: Direct Page] [Flags: ZNC]
	ldx $1C29.w		; AE 29 1C ; Load $1C29.w into X register [Writes: X Index] [Flags: ZN]
	asl $37.b,X		; 16 37 ; Arithmetic shift left $37.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $C9.b		; C5 C9 ; Compare $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc #$E7.b		; E9 E7 ; Subtract #$E7.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $40AEE9.l,X		; 1F E9 AE 40 ; Logical OR long $40AEE9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($66.b),Y		; 71 66 ; Add with carry ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $AE.b		; 85 AE ; Store accumulator to $AE.b [Reads: Accumulator]
	ldx $36EF.w		; AE EF 36 ; Load $36EF.w into X register [Writes: X Index] [Flags: ZN]
	ror $22.b		; 66 22 ; Rotate right $22.b [Reads: Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($C8.b)		; D2 C8 ; Compare accumulator (indirect) ($C8.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc [$70.b]		; E7 70 ; Subtract with carry (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $00E72A.l,X		; DF 2A E7 00 ; Compare accumulator (long,X) $00E72A.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ror $2B.b,X		; 76 2B ; Rotate right $2B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inc $E7.b		; E6 E7 ; Increment $E7.b [Reads: Direct Page] [Flags: ZN]
	.db $70, $06		; 70 06 ; Branch if overflow set to $70, $06 [Flow: branch]
	ldx $EAE7.w		; AE E7 EA ; Load $EAE7.w into X register [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ror $60.b		; 66 60 ; Rotate right $60.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$FE.b]		; E7 FE ; Subtract with carry (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $6289.w,X		; 1D 89 62 ; OR accumulator with memory $6289.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $9A		; 70 9A ; Branch if overflow set to $70, $9A [Flow: branch]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Accumulator, Direct Page]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	jsr $347C.w		; 20 7C 34 ; Jump to subroutine at $347C.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $7C2110.l,X		; FF 10 21 7C ; Subtract with carry (long,X) $7C2110.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp ($0110.w,X)		; 7C 10 01 ; Jump indirect indexed to ($0110.w,X) [Reads: X Index] [Flow: jump]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	trb $006A.w		; 1C 6A 00 ; Test and reset bits $006A.w [Reads: Accumulator] [Flags: Z]
	and ($34.b,X)		; 21 34 ; Logical AND ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$C4.b],Y		; 17 C4 ; OR accumulator with memory (long indexed) [$C4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $C6.b,S		; A3 C6 ; Load accumulator (stack relative) $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $5E72.w		; 20 72 5E ; Jump to subroutine at $5E72.w [Writes: Stack Pointer] [Flow: call]
	adc ($11.b)		; 72 11 ; Add with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($C6.b),Y		; 71 C6 ; Add with carry ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $10.b,S		; 83 10 ; Store accumulator (stack relative) $10.b,S [Reads: Accumulator, Stack Pointer]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: ZN]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $06E6.w		; 1C E6 06 ; Test and reset bits $06E6.w [Reads: Accumulator] [Flags: Z]
	ora ($23.b)		; 12 23 ; OR accumulator with memory (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $AB17.w		; 1C 17 AB ; Test and reset bits $AB17.w [Reads: Accumulator] [Flags: Z]
	inc $23.b		; E6 23 ; Increment $23.b [Reads: Direct Page] [Flags: ZN]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($20.b),Y		; 71 20 ; Add with carry ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $21.b		; 06 21 ; Arithmetic shift left $21.b [Reads: Direct Page] [Flags: ZNC]
	and ($C6.b),Y		; 31 C6 ; AND accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $4F31.w		; AC 31 4F ; Load $4F31.w into Y register [Writes: Y Index] [Flags: ZN]
	eor $335567.l		; 4F 67 55 33 ; Exclusive OR accumulator with memory (long) $335567.l [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $30, $71		; 30 71 ; Branch if minus to $30, $71 [Flow: branch]
	ror $71.b,X		; 76 71 ; Rotate right $71.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $C6.b		; 85 C6 ; Store accumulator to $C6.b [Reads: Accumulator]
	ora $13.b		; 05 13 ; Logical OR $13.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($65.b),Y		; 71 65 ; Add with carry ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($11.b),Y		; D1 11 ; Compare accumulator ($11.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $10, $DC		; 10 DC ; Branch if plus to $10, $DC [Flow: branch]
	cmp $20C8.w,X		; DD C8 20 ; Compare accumulator $20C8.w,X [Reads: X Index] [Flags: ZNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $A920.w		; 20 20 A9 ; Jump to subroutine at $A920.w [Writes: Stack Pointer] [Flow: call]
	ldy $0055.w		; AC 55 00 ; Load $0055.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $35.b		; C4 35 ; Compare $35.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sbc $C8.b		; E5 C8 ; Subtract $C8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $34.b		; C6 34 ; Decrement $34.b [Reads: Direct Page] [Flags: ZN]
	sbc ($36.b,X)		; E1 36 ; Subtract with carry ($36.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp ($34.b),Y		; D1 34 ; Compare accumulator ($34.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ora [$6A.b],Y		; 17 6A ; OR accumulator with memory (long indexed) [$6A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$39.b],Y		; 37 39 ; AND accumulator with memory (long indexed) [$39.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$77.b],Y		; 17 77 ; OR accumulator with memory (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $85		; 10 85 ; Branch if plus to $10, $85 [Flow: branch]
	cmp $6A20.w		; CD 20 6A ; Compare $6A20.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($21.b)		; 12 21 ; OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b,S		; 43 45 ; Exclusive OR accumulator with stack relative $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$33.b]		; 47 33 ; Exclusive OR accumulator with memory (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$73.b],Y		; 77 73 ; Add with carry (long indexed) [$73.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $DCD0.w		; 20 D0 DC ; Jump to subroutine at $DCD0.w [Writes: Stack Pointer] [Flow: call]
	sta [$52.b],Y		; 97 52 ; Store accumulator (long indexed) [$52.b],Y [Reads: Accumulator, Direct Page, Y Index]
	and $DC.b,S		; 23 DC ; AND accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $4C6A.w		; CD 6A 4C ; Compare $4C6A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $CD1517.l		; 22 17 15 CD ; Jump to subroutine long $CD1517.l [Writes: Stack Pointer] [Flow: call]
	cmp $42DF.w		; CD DF 42 ; Compare $42DF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $346A20.l		; 22 20 6A 34 ; Jump to subroutine long $346A20.l [Writes: Stack Pointer] [Flow: call]
	sbc ($21.b)		; F2 21 ; Subtract with carry (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$20.b]		; C7 20 ; Compare accumulator (long) [$20.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$22.b]		; 67 22 ; Add with carry (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($F2.b,X)		; 21 F2 ; Logical AND ($F2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	jsl $F7E1E1.l		; 22 E1 E1 F7 ; Jump to subroutine long $F7E1E1.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jsl $341C21.l		; 22 21 1C 34 ; Jump to subroutine long $341C21.l [Writes: Stack Pointer] [Flow: call]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $352A.w		; 2D 2A 35 ; Logical AND $352A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora [$51.b],Y		; 17 51 ; OR accumulator with memory (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $F634.w		; 1C 34 F6 ; Test and reset bits $F634.w [Reads: Accumulator] [Flags: Z]
	cmp $F52220.l		; CF 20 22 F5 ; Compare accumulator (long) $F52220.l [Reads: Accumulator] [Flags: ZNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jsr $2373.w		; 20 73 23 ; Jump to subroutine at $2373.w [Writes: Stack Pointer] [Flow: call]
	jsl $934F6A.l		; 22 6A 4F 93 ; Jump to subroutine long $934F6A.l [Writes: Stack Pointer] [Flow: call]
	cmp $3211.w,Y		; D9 11 32 ; Compare accumulator $3211.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $345B.w		; CD 5B 34 ; Compare $345B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($21.b)		; D2 21 ; Compare accumulator (indirect) ($21.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$D9.b],Y		; D7 D9 ; Compare accumulator (long indexed) [$D9.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$22.b]		; C7 22 ; Compare accumulator (long) [$22.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $2034CD.l		; 22 CD 34 20 ; Jump to subroutine long $2034CD.l [Writes: Stack Pointer] [Flow: call]
	jsr $5220.w		; 20 20 52 ; Jump to subroutine at $5220.w [Writes: Stack Pointer] [Flow: call]
	cmp #$57.b		; C9 57 ; Compare #$57.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($C8.b),Y		; D1 C8 ; Compare accumulator ($C8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($C7.b,S),Y		; 53 C7 ; XOR accumulator (stack relative indirect indexed) ($C7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D1.b		; C9 D1 ; Compare #$D1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	and $83.b		; 25 83 ; Logical AND $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $0211.w,Y		; D9 11 02 ; Compare accumulator $0211.w,Y [Reads: Y Index] [Flags: ZNC]
	cpy $C7.b		; C4 C7 ; Compare $C7.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp [$CD.b],Y		; D7 CD ; Compare accumulator (long indexed) [$CD.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$C7.b		; E9 C7 ; Subtract #$C7.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$4D.b		; C9 4D ; Compare #$4D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($CD.b,S),Y		; D3 CD ; Compare accumulator (stack relative indirect indexed) ($CD.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp $02D3.w		; CD D3 02 ; Compare $02D3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $50FF.w		; 20 FF 50 ; Jump to subroutine at $50FF.w [Writes: Stack Pointer] [Flow: call]
	eor ($52.b),Y		; 51 52 ; Exclusive OR accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$77.b]		; 27 77 ; AND accumulator with memory (long) [$77.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $8507.w		; 2D 07 85 ; Logical AND $8507.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora ($31.b),Y		; 11 31 ; OR accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $07.b,X		; D5 07 ; Compare accumulator $07.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $71.b		; 86 71 ; Store X register to $71.b [Reads: X Index]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $CF.b,S		; 03 CF ; OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $13.b,X		; 75 13 ; Add $13.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx $2A.b		; E4 2A ; Compare $2A.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $12.b,X		; 55 12 ; Exclusive OR accumulator with memory $12.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($CF.b,S),Y		; 33 CF ; AND accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($E4.b)		; D2 E4 ; Compare accumulator (indirect) ($E4.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $54E7.w		; 20 E7 54 ; Jump to subroutine at $54E7.w [Writes: Stack Pointer] [Flow: call]
	lsr $26.b,X		; 56 26 ; Logical shift right $26.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$E7.b],Y		; 77 E7 ; Add with carry (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $AE.b,X		; 35 AE ; Logical AND $AE.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $6265.w		; 20 65 62 ; Jump to subroutine at $6265.w [Writes: Stack Pointer] [Flow: call]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	cmp ($E7.b)		; D2 E7 ; Compare accumulator (indirect) ($E7.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($06.b,S),Y		; 33 06 ; AND accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx $FAE9.w		; AE E9 FA ; Load $FAE9.w into X register [Writes: X Index] [Flags: ZN]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$29.b]		; E7 29 ; Subtract with carry (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $6329.w,X		; 1D 29 63 ; OR accumulator with memory $6329.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($60.b,S),Y		; 73 60 ; Add with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$83.b		; 29 83 ; Logical AND #$83.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $1273.w		; 20 73 12 ; Jump to subroutine at $1273.w [Writes: Stack Pointer] [Flow: call]
	trb $1C78.w		; 1C 78 1C ; Test and reset bits $1C78.w [Reads: Accumulator] [Flags: Z]
	and #$21.b		; 29 21 ; Logical AND #$21.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $E7.b,S		; 23 E7 ; AND accumulator with stack relative $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$21.b]		; E7 21 ; Subtract with carry (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($66.b),Y		; 31 66 ; AND accumulator with memory ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$4F.b],Y		; 77 4F ; Add with carry (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $E121.w,Y		; 19 21 E1 ; OR accumulator with memory $E121.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($70.b,S),Y		; 53 70 ; XOR accumulator (stack relative indirect indexed) ($70.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $97E7.w		; 20 E7 97 ; Jump to subroutine at $97E7.w [Writes: Stack Pointer] [Flow: call]
	sta [$36.b],Y		; 97 36 ; Store accumulator (long indexed) [$36.b],Y [Reads: Accumulator, Direct Page, Y Index]
	eor $71.b,X		; 55 71 ; Exclusive OR accumulator with memory $71.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$34.b]		; 67 34 ; Add with carry (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr $0311.w		; 20 11 03 ; Jump to subroutine at $0311.w [Writes: Stack Pointer] [Flow: call]
	sbc [$E7.b]		; E7 E7 ; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $6606.w		; 9C 06 66 ; Store zero to $6606.w
	eor ($65.b),Y		; 51 65 ; Exclusive OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($73.b)		; 72 73 ; Add with carry (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$11.b]		; 67 11 ; Add with carry (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$9E.b],Y		; 17 9E ; OR accumulator with memory (long indexed) [$9E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $E7AE.w,X		; 9E AE E7 ; Store zero to $E7AE.w,X [Reads: X Index]
	eor $66.b,X		; 55 66 ; Exclusive OR accumulator with memory $66.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$FE.b]		; E7 FE ; Subtract with carry (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$9C.b]		; E7 9C ; Subtract with carry (long) [$9C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $65, $9E		; 62 65 9E ; Push effective relative address $62, $65, $9E [Writes: Stack Pointer]
	stz $9C07.w,X		; 9E 07 9C ; Store zero to $9C07.w,X [Reads: X Index]
	eor $15.b,X		; 55 15 ; Exclusive OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AE.b		; 06 AE ; Arithmetic shift left $AE.b [Reads: Direct Page] [Flags: ZNC]
	sbc $1690.w,Y		; F9 90 16 ; Subtract with carry $1690.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FE.b)		; 12 FE ; OR accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $3F.b		; C5 3F ; Compare $3F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc [$20.b]		; E7 20 ; Subtract with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $E7.b,X		; 56 E7 ; Logical shift right $E7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $60E7.w		; AE E7 60 ; Load $60E7.w into X register [Writes: X Index] [Flags: ZN]
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: ZNC]
	sbc $666D25.l		; EF 25 6D 66 ; Subtract with carry (long) $666D25.l [Writes: Accumulator] [Flags: ZVNC]
	adc [$08.b],Y		; 77 08 ; Add with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E7.b]		; E7 E7 ; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($76.b)		; D2 76 ; Compare accumulator (indirect) ($76.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $6FE7.w		; AE E7 6F ; Load $6FE7.w into X register [Writes: X Index] [Flags: ZN]
	sbc $257666.l		; EF 66 76 25 ; Subtract with carry (long) $257666.l [Writes: Accumulator] [Flags: ZVNC]
	inc $E7.b		; E6 E7 ; Increment $E7.b [Reads: Direct Page] [Flags: ZN]
	inc $76.b		; E6 76 ; Increment $76.b [Reads: Direct Page] [Flags: ZN]
	ror $56.b		; 66 56 ; Rotate right $56.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$1D.b]		; E7 1D ; Subtract with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ror $77.b,X		; 76 77 ; Rotate right $77.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $25.b,X		; 55 25 ; Exclusive OR accumulator with memory $25.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $77E4.w		; AE E4 77 ; Load $77E4.w into X register [Writes: X Index] [Flags: ZN]
	ror $73.b		; 66 73 ; Rotate right $73.b [Reads: Direct Page] [Flags: ZNC]
	jmp ($1C76.w)		; 6C 76 1C ; Jump indirect to ($1C76.w) [Flow: jump]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $77.b,X		; 55 77 ; Exclusive OR accumulator with memory $77.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $77E5.w		; AE E5 77 ; Load $77E5.w into X register [Writes: X Index] [Flags: ZN]
	ror $E4.b		; 66 E4 ; Rotate right $E4.b [Reads: Direct Page] [Flags: ZNC]
	ora [$F9.b]		; 07 F9 ; OR accumulator with memory (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $67.b,X		; 56 67 ; Logical shift right $67.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$97.b]		; 67 97 ; Add with carry (long) [$97.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	and ($FA.b,X)		; 21 FA ; Logical AND ($FA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$76.b],Y		; 57 76 ; Exclusive OR accumulator with memory (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($77.b,S),Y		; 73 77 ; Add with carry (stack relative indirect indexed) ($77.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($F9.b)		; 72 F9 ; Add with carry (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$76.b],Y		; 77 76 ; Add with carry (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$65.b]		; E7 65 ; Subtract with carry (long) [$65.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc [$61.b]		; E7 61 ; Subtract with carry (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $7C.b,X		; 76 7C ; Rotate right $7C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp $779D96.l		; 5C 96 9D 77 ; Jump long to $779D96.l [Flow: jump]
	eor $1D.b,X		; 55 1D ; Exclusive OR accumulator with memory $1D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $05.b		; 25 05 ; Logical AND $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($E6.b),Y		; 11 E6 ; OR accumulator with memory ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $40C7.w		; AE C7 40 ; Load $40C7.w into X register [Writes: X Index] [Flags: ZN]
	asl $06.b,X		; 16 06 ; Arithmetic shift left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp [$CC.b]		; C7 CC ; Compare accumulator (long) [$CC.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jmp.w [$00CC]		; DC CC 00 ; Jump long indirect [$00CC] [Flow: jump]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $537E.w		; CC 7E 53 ; Compare $537E.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$CC.b		; A9 CC ; Load #$CC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $AE		; D0 AE ; Branch if not equal to $D0, $AE [Flow: branch]
	jsr $E306.w		; 20 06 E3 ; Jump to subroutine at $E306.w [Writes: Stack Pointer] [Flow: call]
	sbc $C8.b,S		; E3 C8 ; Subtract stack-relative $C8.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $0200.w,X		; 1E 00 02 ; Arithmetic shift left $0200.w,X [Reads: X Index] [Flags: ZNC]
	ldy $CE.b		; A4 CE ; Load $CE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $0020.w		; AE 20 00 ; Load $0020.w into X register [Writes: X Index] [Flags: ZN]
	.db $62, $AE, $FF		; 62 AE FF ; Push effective relative address $62, $AE, $FF [Writes: Stack Pointer]
	bit $DA.b,X		; 34 DA ; Test bits $DA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($7E.b)		; F2 7E ; Subtract with carry (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pei ($83.b)		; D4 83 ; Push effective indirect address ($83.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$01.b],Y		; 17 01 ; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $07.b,X		; 34 07 ; Test bits $07.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora ($71.b,X)		; 01 71 ; Logical OR ($71.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stx $5F.b		; 86 5F ; Store X register to $5F.b [Reads: X Index]
	ldx $1134.w		; AE 34 11 ; Load $1134.w into X register [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $34AE.w		; AE AE 34 ; Load $34AE.w into X register [Writes: X Index] [Flags: ZN]
	ror $0366.w		; 6E 66 03 ; Rotate right $0366.w [Flags: ZNC]
	ror $AE75.w,X		; 7E 75 AE ; Rotate right $AE75.w,X [Reads: X Index] [Flags: ZNC]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $53.b,X		; 34 53 ; Test bits $53.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor ($5C.b,S),Y		; 53 5C ; XOR accumulator (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $65.b		; 04 65 ; Test and set bits $65.b [Reads: Accumulator] [Flags: Z]
	inc $FE.b		; E6 FE ; Increment $FE.b [Reads: Direct Page] [Flags: ZN]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $3434.w		; 1C 34 34 ; Test and reset bits $3434.w [Reads: Accumulator] [Flags: Z]
	asl $20.b		; 06 20 ; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: ZNC]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $EC.b,X		; 34 EC ; Test bits $EC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl $02.b,X		; 16 02 ; Arithmetic shift left $02.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $71.b		; E6 71 ; Increment $71.b [Reads: Direct Page] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ldx $0621.w		; AE 21 06 ; Load $0621.w into X register [Writes: X Index] [Flags: ZN]
	ldx $E3DB.w		; AE DB E3 ; Load $E3DB.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0660.w		; AE 60 06 ; Load $0660.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AE85.w		; AE 85 AE ; Load $AE85.w into X register [Writes: X Index] [Flags: ZN]
	bit $63.b,X		; 34 63 ; Test bits $63.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	jsr $2271.w		; 20 71 22 ; Jump to subroutine at $2271.w [Writes: Stack Pointer] [Flow: call]
	and ($34.b,X)		; 21 34 ; Logical AND ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($DF.b),Y		; 31 DF ; AND accumulator with memory ($DF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$01.b]		; C7 01 ; Compare accumulator (long) [$01.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $7FC7C7.l		; 22 C7 C7 7F ; Jump to subroutine long $7FC7C7.l [Writes: Stack Pointer] [Flow: call]
	cmp $22.b,X		; D5 22 ; Compare accumulator $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($AB.b),Y		; 71 AB ; Add with carry ($AB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $DA.b,X		; D6 DA ; Decrement memory $DA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $62.b		; E5 62 ; Subtract $62.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($B7.b,X)		; 21 B7 ; Logical AND ($B7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $AAA2.w,X		; 1E A2 AA ; Arithmetic shift left $AAA2.w,X [Reads: X Index] [Flags: ZNC]
	.db $62, $60, $7F		; 62 60 7F ; Push effective relative address $62, $60, $7F [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp [$83.b]		; C7 83 ; Compare accumulator (long) [$83.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($21.b)		; 12 21 ; OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$C6.b],Y		; 57 C6 ; Exclusive OR accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $CC.b		; C6 CC ; Decrement $CC.b [Reads: Direct Page] [Flags: ZN]
	jsr $CC00.w		; 20 00 CC ; Jump to subroutine at $CC00.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $0283.w		; 20 83 02 ; Jump to subroutine at $0283.w [Writes: Stack Pointer] [Flow: call]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $7F53.w		; 20 53 7F ; Jump to subroutine at $7F53.w [Writes: Stack Pointer] [Flow: call]
	eor $11.b,X		; 55 11 ; Exclusive OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $82.b,S		; 83 82 ; Store accumulator (stack relative) $82.b,S [Reads: Accumulator, Stack Pointer]
	sbc $EF.b,X		; F5 EF ; Subtract $EF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$22.b],Y		; 17 22 ; OR accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$8B.b		; 29 8B ; Logical AND #$8B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $F4.b		; 85 F4 ; Store accumulator to $F4.b [Reads: Accumulator]
	and ($72.b,S),Y		; 33 72 ; AND accumulator (stack relative indirect indexed) ($72.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pea $4220.w		; F4 20 42 ; Push absolute address $4220.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $51.b		; 25 51 ; Logical AND $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $87.b,S		; E3 87 ; Subtract stack-relative $87.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sta [$C6.b]		; 87 C6 ; Store accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page]
	ora $32.b,S		; 03 32 ; OR accumulator with stack relative $32.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $7C8787.l,X		; 7F 87 87 7C ; Add long $7C8787.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$77.b],Y		; 17 77 ; OR accumulator with memory (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $A2.b		; E6 A2 ; Increment $A2.b [Reads: Direct Page] [Flags: ZN]
	inc $F6.b		; E6 F6 ; Increment $F6.b [Reads: Direct Page] [Flags: ZN]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	rol $EC.b		; 26 EC ; Rotate left $EC.b [Reads: Direct Page] [Flags: ZNC]
	inc $8A.b		; E6 8A ; Increment $8A.b [Reads: Direct Page] [Flags: ZN]
	and ($27.b)		; 32 27 ; AND accumulator with memory (indirect) ($27.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: ZNC]
	and ($23.b,S),Y		; 33 23 ; AND accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $E600.w,Y		; [PATTERN: Memory clearing operation] 99 00 E6 ; Store accumulator to $E600.w,Y [Reads: Accumulator, Y Index]
	inc $33.b		; E6 33 ; Increment $33.b [Reads: Direct Page] [Flags: ZN]
	jsl $C2E8E6.l		; 22 E6 E8 C2 ; Jump to subroutine long $C2E8E6.l [Writes: Stack Pointer] [Flow: call]
	stz $3522.w		; 9C 22 35 ; Store zero to $3522.w
	stz $9669.w,X		; 9E 69 96 ; Store zero to $9669.w,X [Reads: X Index]
	sta [$56.b],Y		; 97 56 ; Store accumulator (long indexed) [$56.b],Y [Reads: Accumulator, Direct Page, Y Index]
	eor $68.b,X		; 55 68 ; Exclusive OR accumulator with memory $68.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	sta ($61.b,X)		; 81 61 ; Store accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($D8.b),Y		; 11 D8 ; OR accumulator with memory ($D8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$D1.b]		; 07 D1 ; OR accumulator with memory (long) [$D1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($21.b,X)		; 81 21 ; Store accumulator ($21.b,X) [Reads: Accumulator, X Index, Direct Page]
	and [$C7.b]		; 27 C7 ; AND accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C6CD.w		; CD CD C6 ; Compare $C6CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $C7C722.l		; 22 22 C7 C7 ; Jump to subroutine long $C7C722.l [Writes: Stack Pointer] [Flow: call]
	cmp [$2D.b],Y		; D7 2D ; Compare accumulator (long indexed) [$2D.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsl $CDC521.l		; 22 21 C5 CD ; Jump to subroutine long $CDC521.l [Writes: Stack Pointer] [Flow: call]
	cmp [$A2.b]		; C7 A2 ; Compare accumulator (long) [$A2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cop $26.b		; 02 26 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $CDC7.w		; CD C7 CD ; Compare $CDC7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $2222.w,X		; DD 22 22 ; Compare accumulator $2222.w,X [Reads: X Index] [Flags: ZNC]
	inc $04.b,X		; F6 04 ; Increment memory $04.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $77.b,S		; 23 77 ; AND accumulator with stack relative $77.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($04.b),Y		; 51 04 ; Exclusive OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $E8.b,S		; 63 E8 ; Add with carry (stack relative) $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,S),Y		; 73 12 ; Add with carry (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $E6.b		; C4 E6 ; Compare $E6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $6702.w		; 8C 02 67 ; Store Y register to $6702.w [Reads: Y Index]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $16.b		; A5 16 ; Load $16.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	inc $33.b		; E6 33 ; Increment $33.b [Reads: Direct Page] [Flags: ZN]
	adc ($8D.b)		; 72 8D ; Add with carry (indirect) ($8D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $EC.b		; E6 EC ; Increment $EC.b [Reads: Direct Page] [Flags: ZN]
	adc $72.b		; 65 72 ; Add $72.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($65.b,X)		; 21 65 ; Logical AND ($65.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: ZNC]
	sta $11.b,X		; 95 11 ; Store accumulator to $11.b,X [Reads: Accumulator, X Index]
	adc [$94.b],Y		; 77 94 ; Add with carry (long indexed) [$94.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $A89B.w		; 9C 9B A8 ; Store zero to $A89B.w
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $7777.w		; AD 77 77 ; Load $7777.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$94.b],Y		; 97 94 ; Store accumulator (long indexed) [$94.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($95.b,S),Y		; 93 95 ; Store accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $B9B8.w		; 9C B8 B9 ; Store zero to $B9B8.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ldy $BEBB.w,X		; BC BB BE ; Load Y register $BEBB.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sty $93.b,X		; 94 93 ; Store Y register $93.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta [$77.b],Y		; 97 77 ; Store accumulator (long indexed) [$77.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc [$B8.b],Y		; 77 B8 ; Add with carry (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C6.b,S		; C3 C6 ; Compare accumulator (stack relative) $C6.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda #$AC.b		; A9 AC ; Load #$AC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $9394.w		; AD 94 93 ; Load $9394.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$77.b],Y		; 97 77 ; Store accumulator (long indexed) [$77.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc [$CC.b],Y		; 77 CC ; Add with carry (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $CFC6.w		; CE C6 CF ; Decrement $CFC6.w [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	lda [$C2.b],Y		; B7 C2 ; Load accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C3DF.w,X		; DD DF C3 ; Compare accumulator $C3DF.w,X [Reads: X Index] [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$D7		; E2 D7
	cmp $77E3.w,Y		; D9 E3 77 ; Compare accumulator $77E3.w,Y [Reads: Y Index] [Flags: ZNC]
	adc [$E5.b],Y		; 77 E5 ; Add with carry (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$96.b]		; E7 96 ; Subtract with carry (long) [$96.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($77.b,S),Y		; F3 77 ; Subtract with carry (stack relative indirect indexed) ($77.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$F4.b],Y		; 77 F4 ; Add with carry (long indexed) [$F4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $C6.b,X		; F6 C6 ; Increment memory $C6.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FBB8.w,Y		; F9 B8 FB ; Subtract with carry $FBB8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $77.b,X		; 95 77 ; Store accumulator to $77.b,X [Reads: Accumulator, X Index]
	adc [$96.b],Y		; 77 96 ; Add with carry (long indexed) [$96.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $770F.w		; AD 0F 77 ; Load $770F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($04.b)		; 72 04 ; Add with carry (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $C6.b		; 06 C6 ; Arithmetic shift left $C6.b [Reads: Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc [$C2.b],Y		; 77 C2 ; Add with carry (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $D9.b,S		; C3 D9 ; Compare accumulator (stack relative) $D9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $7777.w		; AD 77 77 ; Load $7777.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($A9.b,X)		; E1 A9 ; Subtract with carry ($A9.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$C6.b]		; E7 C6 ; Subtract with carry (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $F8C6.w		; 0C C6 F8 ; Test and set bits $F8C6.w [Reads: Accumulator] [Flags: Z]
	dec $87.b		; C6 87 ; Decrement $87.b [Reads: Direct Page] [Flags: ZN]
	adc [$D7.b],Y		; 77 D7 ; Add with carry (long indexed) [$D7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $1396.w,Y		; D9 96 13 ; Compare accumulator $1396.w,Y [Reads: Y Index] [Flags: ZNC]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora $00F3.w		; 0D F3 00 ; Logical OR $00F3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$CF.b]		; 87 CF ; Store accumulator (long) [$CF.b] [Reads: Accumulator, Direct Page]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda #$C5.b		; A9 C5 ; Load #$C5.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $ADF8.w		; CD F8 AD ; Compare $ADF8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	adc [$DA.b],Y		; 77 DA ; Add with carry (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$AD		; C2 AD
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($03.b,S),Y		; B3 03 ; Load accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $B8.b		; E4 B8 ; Compare $B8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc [$D1.b],Y		; 77 D1 ; Add with carry (long indexed) [$D1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $EF.b,X		; 15 EF ; OR accumulator with memory $EF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $78		; B0 78 ; Branch if carry set to $B0, $78 [Flow: branch]
	adc [$93.b],Y		; 77 93 ; Add with carry (long indexed) [$93.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$C3.b],Y		; 97 C3 ; Store accumulator (long indexed) [$C3.b],Y [Reads: Accumulator, Direct Page, Y Index]
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	adc [$A3.b],Y		; 77 A3 ; Add with carry (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $E2E1.w,Y		; BE E1 E2 ; Load X register $E2E1.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$C2.b],Y		; B7 C2 ; Load accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $77.b,S		; C3 77 ; Compare accumulator (stack relative) $77.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	adc [$D9.b],Y		; 77 D9 ; Add with carry (long indexed) [$D9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $9B9A.w		; AD 9A 9B ; Load $9B9A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $C6CB.w,X		; 1D CB C6 ; OR accumulator with memory $C6CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $87.b		; C6 87 ; Decrement $87.b [Reads: Direct Page] [Flags: ZN]
	adc [$20.b],Y		; 77 20 ; Add with carry (long indexed) [$20.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($95.b,S),Y		; 93 95 ; Store accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $87.b,X		; 94 87 ; Store Y register $87.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc [$BA.b],Y		; 77 BA ; Add with carry (long indexed) [$BA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $28A9.w,X		; BC A9 28 ; Load Y register $28A9.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$1BE1.w		; 29 E1 1B ; Logical AND #$1BE1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda [$2D.b],Y		; B7 2D ; Load accumulator (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $2E.b		; C6 2E ; Decrement $2E.b [Reads: Direct Page] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and $30F9FA.l		; 2F FA F9 30 ; AND accumulator with memory (long) $30F9FA.l [Writes: Accumulator] [Flags: ZN]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	dec $C6C6.w		; CE C6 C6 ; Decrement $C6C6.w [Flags: ZN]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	adc [$39.b],Y		; 77 39 ; Add with carry (long indexed) [$39.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $88A9.w,Y		; D9 A9 88 ; Compare accumulator $88A9.w,Y [Reads: Y Index] [Flags: ZNC]
	adc [$D1.b],Y		; 77 D1 ; Add with carry (long indexed) [$D1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$C6.b]		; C7 C6 ; Compare accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $C77277.l		; 0F 77 72 C7 ; OR accumulator with memory (long) $C77277.l [Writes: Accumulator] [Flags: ZN]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: ZN]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	ora [$C6.b]		; 07 C6 ; OR accumulator with memory (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C599.w,Y		; D9 99 C5 ; Compare accumulator $C599.w,Y [Reads: Y Index] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $33.b		; C6 33 ; Decrement $33.b [Reads: Direct Page] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	cmp $7777D0.l		; CF D0 77 77 ; Compare accumulator (long) $7777D0.l [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	ldx $77CB.w		; AE CB 77 ; Load $77CB.w into X register [Writes: X Index] [Flags: ZN]
	adc [$42.b],Y		; 77 42 ; Add with carry (long indexed) [$42.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	.db $D0, $E2		; D0 E2 ; Branch if not equal to $D0, $E2 [Flow: branch]
	lda $77BB.w		; AD BB 77 ; Load $77BB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$F3.b],Y		; 77 F3 ; Add with carry (long indexed) [$F3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $DC.b		; C6 DC ; Decrement $DC.b [Reads: Direct Page] [Flags: ZN]
	cpx $77.b		; E4 77 ; Compare $77.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$B7.b],Y		; 77 B7 ; Add with carry (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp $7746.w,Y		; D9 46 77 ; Compare accumulator $7746.w,Y [Reads: Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($C6.b,S),Y		; F3 C6 ; Subtract with carry (stack relative indirect indexed) ($C6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	wai		; CB ; Wait for interrupt
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $C5.b		; 46 C5 ; Logical shift right $C5.b [Reads: Direct Page] [Flags: ZNC]
	adc [$87.b],Y		; 77 87 ; Add with carry (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $C4C6.w,X		; 1E C6 C4 ; Arithmetic shift left $C4C6.w,X [Reads: X Index] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	rep #$42		; C2 42 ; Reset processor status bits #$42 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec $7778.w		; CE 78 77 ; Decrement $7778.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc ($F8.b,S),Y		; F3 F8 ; Subtract with carry (stack relative indirect indexed) ($F8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $AE46.w,Y		; D9 46 AE ; Compare accumulator $AE46.w,Y [Reads: Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc [$46.b],Y		; 77 46 ; Add with carry (long indexed) [$46.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C6.b,S		; C3 C6 ; Compare accumulator (stack relative) $C6.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $AD7787.l		; CF 87 77 AD ; Compare accumulator (long) $AD7787.l [Reads: Accumulator] [Flags: ZNC]
	dec $DA.b		; C6 DA ; Decrement $DA.b [Reads: Direct Page] [Flags: ZN]
	lda $7777.w		; AD 77 77 ; Load $7777.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec $D0.b		; C6 D0 ; Decrement $D0.b [Reads: Direct Page] [Flags: ZN]
	dec $E2.b		; C6 E2 ; Decrement $E2.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $B8F8.w		; AD F8 B8 ; Load $B8F8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $7777.w,Y		; D9 77 77 ; Compare accumulator $7777.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $C6.b,S		; C3 C6 ; Compare accumulator (stack relative) $C6.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	dec $DA.b		; C6 DA ; Decrement $DA.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $1B344F.l		; 4F 4F 34 1B ; Exclusive OR accumulator with memory (long) $1B344F.l [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $1B.b,X		; 34 1B ; Test bits $1B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $3436.w,X		; FE 36 34 ; Increment memory $3436.w,X [Reads: X Index] [Flags: ZN]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	eor ($53.b),Y		; 51 53 ; Exclusive OR accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $55		; 50 55 ; Branch if overflow clear to $50, $55 [Flow: branch]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $5C5B.w,Y		; 59 5B 5C ; Exclusive OR accumulator with memory $5C5B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $8888.w,X		; 5D 88 88 ; Exclusive OR accumulator with memory $8888.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $52		; 50 52 ; Branch if overflow clear to $50, $52 [Flow: branch]
	asl $8865.w,X		; 1E 65 88 ; Arithmetic shift left $8865.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $50, $5E		; 50 5E ; Branch if overflow clear to $50, $5E [Flow: branch]
	eor $888858.l,X		; 5F 58 88 88 ; Exclusive OR accumulator with memory (long,X) $888858.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $50.b		; 66 50 ; Rotate right $50.b [Reads: Direct Page] [Flags: ZNC]
	adc $68.b,S		; 63 68 ; Add with carry (stack relative) $68.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $2770.w		; 6E 70 27 ; Rotate right $2770.w [Flags: ZNC]
	adc ($88.b),Y		; 71 88 ; Add with carry ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($50.b,S),Y		; 53 50 ; XOR accumulator (stack relative indirect indexed) ($50.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ror $8888.w		; 6E 88 88 ; Rotate right $8888.w [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($80.b),Y		; 71 80 ; Add with carry ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($18.b,X)		; 81 18 ; Store accumulator ($18.b,X) [Reads: Accumulator, X Index, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $82, $84		; 82 82 84 ; Branch always long to $82, $82, $84 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	eor ($18.b,S),Y		; 53 18 ; XOR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($86.b,X)		; 81 86 ; Store accumulator ($86.b,X) [Reads: Accumulator, X Index, Direct Page]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $88.b		; 65 88 ; Add $88.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $6B		; 50 6B ; Branch if overflow clear to $50, $6B [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $8888.w		; 6E 88 88 ; Rotate right $8888.w [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $11.b		; 86 11 ; Store X register to $11.b [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$80.b]		; 87 80 ; Store accumulator (long) [$80.b] [Reads: Accumulator, Direct Page]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $89		; 50 89 ; Branch if overflow clear to $50, $89 [Flow: branch]
	sta [$88.b]		; 87 88 ; Store accumulator (long) [$88.b] [Reads: Accumulator, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $8D58.w		; 6E 58 8D ; Rotate right $8D58.w [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $C9EB.w,Y		; 39 EB C9 ; AND accumulator with memory $C9EB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$C4.b],Y		; 57 C4 ; Exclusive OR accumulator with memory (long indexed) [$C4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $CC.b		; A5 CC ; Load $CC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($10.b,X)		; 21 10 ; Logical AND ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$4E.b],Y		; 57 4E ; Exclusive OR accumulator with memory (long indexed) [$4E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($10.b,X)		; 21 10 ; Logical AND ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $A4A59E.l,X		; FF 9E A5 A4 ; Subtract with carry (long,X) $A4A59E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	lda $41.b		; A5 41 ; Load $41.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $0150.w		; 4E 50 01 ; Logical shift right $0150.w [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stx $98.b,Y		; 96 98 ; Store X register $98.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $9F9D.w,X		; 9D 9D 9F ; Store accumulator to $9F9D.w,X [Reads: Accumulator, X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $5F.b,S		; A3 5F ; Load accumulator (stack relative) $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $9AADAB.l		; 6F AB AD 9A ; Add with carry (long) $9AADAB.l [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $B2B0.w		; AE B0 B2 ; Load $B2B0.w into X register [Writes: X Index] [Flags: ZN]
	ldy $88.b,X		; B4 88 ; Load Y register $88.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $27.b,Y		; B6 27 ; Load X register $27.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($66.b,X)		; 81 66 ; Store accumulator ($66.b,X) [Reads: Accumulator, X Index, Direct Page]
	sty $50.b		; 84 50 ; Store Y register to $50.b [Reads: Y Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpy #$B1.b		; C0 B1 ; Compare #$B1.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp $C5.b,S		; C3 C5 ; Compare accumulator (stack relative) $C5.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $88.b,S		; C3 88 ; Compare accumulator (stack relative) $88.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $C8C6.w		; AE C6 C8 ; Load $C8C6.w into X register [Writes: X Index] [Flags: ZN]
	eor $528888.l,X		; 5F 88 88 52 ; Exclusive OR accumulator with memory (long,X) $528888.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $77.b,X		; 76 77 ; Rotate right $77.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $88.b,X		; D6 88 ; Decrement memory $88.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $D7.b,X		; 34 D7 ; Test bits $D7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $08D9.w		; CD D9 08 ; Compare $08D9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jmp.w [$C6DE]		; DC DE C6 ; Jump long indirect [$C6DE] [Flow: jump]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$D5.b		; E0 D5 ; Compare #$D5.b with X register [Reads: X Index] [Flags: ZNC]
	.db $50, $6F		; 50 6F ; Branch if overflow clear to $50, $6F [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $EF.b,X		; 34 EF ; Test bits $EF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc ($08.b)		; F2 08 ; Subtract with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($F2.b,S),Y		; F3 F2 ; Subtract with carry (stack relative indirect indexed) ($F2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F5.b,S),Y		; F3 F5 ; Subtract with carry (stack relative indirect indexed) ($F5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$F9.b],Y		; F7 F9 ; Subtract with carry (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $88.b,X		; 34 88 ; Test bits $88.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$99.b],Y		; F7 99 ; Subtract with carry (long indexed) [$99.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	sbc $888994.l,X		; FF 94 89 88 ; Subtract with carry (long,X) $888994.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($EF.b,X)		; 81 EF ; Store accumulator ($EF.b,X) [Reads: Accumulator, X Index, Direct Page]
	lda $70.b		; A5 70 ; Load $70.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($11.b),Y		; 71 11 ; Add with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $C6.b,X		; 34 C6 ; Test bits $C6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $0000.w		; CC 00 00 ; Compare $0000.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl $799F.w		; 0E 9F 79 ; Arithmetic shift left $799F.w [Flags: ZNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FB.b)		; 12 FB ; OR accumulator with memory (indirect) ($FB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta ($10.b,S),Y		; 93 10 ; Store accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $4B9F.w		; 4E 9F 4B ; Logical shift right $4B9F.w [Flags: ZNC]
	eor ($10.b,S),Y		; 53 10 ; XOR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $50, $67		; 50 67 ; Branch if overflow clear to $50, $67 [Flow: branch]
	jmp $888869.l		; 5C 69 88 88 ; Jump long to $888869.l [Flow: jump]
	.db $50, $0B		; 50 0B ; Branch if overflow clear to $50, $0B [Flow: branch]
	eor [$5C.b],Y		; 57 5C ; Exclusive OR accumulator with memory (long indexed) [$5C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$5088.w		; 89 88 50 ; Test bits #$5088.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	.db $82, $88, $98		; 82 88 98 ; Branch always long to $82, $88, $98 [Flow: branch]
	.db $82, $62, $5C		; 82 62 5C ; Branch always long to $82, $62, $5C [Flow: branch]
	jmp $5C8888.l		; 5C 88 88 5C ; Jump long to $5C8888.l [Flow: jump]
	jmp $880D81.l		; 5C 81 0D 88 ; Jump long to $880D81.l [Flow: jump]
	bit #$517F.w		; 89 7F 51 ; Test bits #$517F.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor [$0F.b],Y		; 57 0F ; Exclusive OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit #$6765.w		; 89 65 67 ; Test bits #$6765.w with accumulator [Reads: Accumulator] [Flags: Z]
	adc $8863.w		; 6D 63 88 ; Add $8863.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($8B.b,X)		; 81 8B ; Store accumulator ($8B.b,X) [Reads: Accumulator, X Index, Direct Page]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$88.b],Y		; 17 88 ; OR accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($58.b,X)		; 81 58 ; Store accumulator ($58.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($53.b,X)		; 81 53 ; Store accumulator ($53.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Accumulator, X Index, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($6C.b,X)		; 81 6C ; Store accumulator ($6C.b,X) [Reads: Accumulator, X Index, Direct Page]
	jmp $88885C.l		; 5C 5C 88 88 ; Jump long to $88885C.l [Flow: jump]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($5F.b,X)		; 81 5F ; Store accumulator ($5F.b,X) [Reads: Accumulator, X Index, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $8166.w		; 0D 66 81 ; Logical OR $8166.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($81.b,X)		; 61 81 ; Add with carry ($81.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $8851.w		; 6D 51 88 ; Add $8851.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rol $28.b		; 26 28 ; Rotate left $28.b [Reads: Direct Page] [Flags: ZNC]
	adc $95.b		; 65 95 ; Add $95.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($88.b),Y		; 11 88 ; OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $73.b		; 24 73 ; Test bits $73.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp #$1838.w		; C9 38 18 ; Compare #$1838.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta ($38.b,X)		; 81 38 ; Store accumulator ($38.b,X) [Reads: Accumulator, X Index, Direct Page]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ror $73.b		; 66 73 ; Rotate right $73.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $1699.w,Y		; 99 99 16 ; Store accumulator to $1699.w,Y [Reads: Accumulator, Y Index]
	asl $E2.b,X		; 16 E2 ; Arithmetic shift left $E2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $99.b		; E4 99 ; Compare $99.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($64.b),Y		; 51 64 ; Exclusive OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($11.b)		; 52 11 ; Exclusive OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $8B5C66.l		; 6F 66 5C 8B ; Add with carry (long) $8B5C66.l [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $8C54.w,X		; 7E 54 8C ; Rotate right $8C54.w,X [Reads: X Index] [Flags: ZNC]
	adc $0C8881.l,X		; 7F 81 88 0C ; Add long $0C8881.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc ($58.b),Y		; 71 58 ; Add with carry ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	tsb $890C.w		; 0C 0C 89 ; Test and set bits $890C.w [Reads: Accumulator] [Flags: Z]
	sta $0C5D.w,Y		; 99 5D 0C ; Store accumulator to $0C5D.w,Y [Reads: Accumulator, Y Index]
	ror $8987.w,X		; 7E 87 89 ; Rotate right $8987.w,X [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $58.b,X		; 95 58 ; Store accumulator to $58.b,X [Reads: Accumulator, X Index]
	.db $62, $68, $88		; 62 68 88 ; Push effective relative address $62, $68, $88 [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($28.b),Y		; 51 28 ; Exclusive OR accumulator with memory ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Accumulator, X Index, Direct Page]
	tsb $8057.w		; 0C 57 80 ; Test and set bits $8057.w [Reads: Accumulator] [Flags: Z]
	tsb $8998.w		; 0C 98 89 ; Test and set bits $8998.w [Reads: Accumulator] [Flags: Z]
	ror $5858.w		; 6E 58 58 ; Rotate right $5858.w [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta [$68.b]		; 87 68 ; Store accumulator (long) [$68.b] [Reads: Accumulator, Direct Page]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($65.b)		; 52 65 ; Exclusive OR accumulator with memory (indirect) ($65.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $63.b,X		; 56 63 ; Logical shift right $63.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jmp ($5065.w)		; 6C 65 50 ; Jump indirect to ($5065.w) [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $80, $50		; 80 50 ; Branch always to $80, $50 [Flow: branch]
	ora $8188.w,X		; 1D 88 81 ; OR accumulator with memory $8188.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $6E5053.l,X		; 5F 53 50 6E ; Exclusive OR accumulator with memory (long,X) $6E5053.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $1A.b,X		; 95 1A ; Store accumulator to $1A.b,X [Reads: Accumulator, X Index]
	adc ($58.b),Y		; 71 58 ; Add with carry ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit #$8B88.w		; 89 88 8B ; Test bits #$8B88.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$5880.w		; 89 80 58 ; Test bits #$5880.w with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($71.b,X)		; 41 71 ; Exclusive OR accumulator with memory ($71.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($95.b,S),Y		; 53 95 ; XOR accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sty $86.b,X		; 94 86 ; Store Y register $86.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	eor $528818.l,X		; 5F 18 88 52 ; Exclusive OR accumulator with memory (long,X) $528818.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $8C7E.w		; 1C 7E 8C ; Test and reset bits $8C7E.w [Reads: Accumulator] [Flags: Z]
	bit #$4A88.w		; 89 88 4A ; Test bits #$4A88.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $7F.b,X		; 56 7F ; Logical shift right $7F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $50, $11		; 50 11 ; Branch if overflow clear to $50, $11 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $5252.w		; 6E 52 52 ; Rotate right $5252.w [Flags: ZNC]
	adc $348888.l		; 6F 88 88 34 ; Add with carry (long) $348888.l [Writes: Accumulator] [Flags: ZVNC]
	lsr $7878.w		; 4E 78 78 ; Logical shift right $7878.w [Flags: ZNC]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $7F24.w		; 2E 24 7F ; Rotate left $7F24.w [Flags: ZNC]
	.db $50, $21		; 50 21 ; Branch if overflow clear to $50, $21 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc #$5455.w		; 69 55 54 ; Add #$5455.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $88.b,X		; 56 88 ; Logical shift right $88.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc [$6D.b]		; 67 6D ; Add with carry (long) [$6D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $8988.w		; 0C 88 89 ; Test and set bits $8988.w [Reads: Accumulator] [Flags: Z]
	asl $6E8B.w,X		; 1E 8B 6E ; Arithmetic shift left $6E8B.w,X [Reads: X Index] [Flags: ZNC]
	eor ($98.b,S),Y		; 53 98 ; XOR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	ror $5F.b		; 66 5F ; Rotate right $5F.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	jmp ($8825.w)		; 6C 25 88 ; Jump indirect to ($8825.w) [Flow: jump]
	sta ($34.b,X)		; 81 34 ; Store accumulator ($34.b,X) [Reads: Accumulator, X Index, Direct Page]
	and $5052.w,Y		; 39 52 50 ; AND accumulator with memory $5052.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $88.b		; 02 88 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($6B.b,X)		; 21 6B ; Logical AND ($6B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $D4.b,X		; 35 D4 ; Logical AND $D4.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $35.b,X		; D5 35 ; Compare accumulator $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $91.b		; 05 91 ; Logical OR $91.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($F2.b,X)		; 01 F2 ; Logical OR ($F2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stx $C4.b		; 86 C4 ; Store X register to $C4.b [Reads: X Index]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $AB.b,X		; 34 AB ; Test bits $AB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($84.b),Y		; 71 84 ; Add with carry ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $88.b		; 02 88 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $EB29.w,Y		; 39 29 EB ; AND accumulator with memory $EB29.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($29.b)		; 52 29 ; Exclusive OR accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $2D.b,X		; 34 2D ; Test bits $2D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $792886.l		; 2F 86 28 79 ; AND accumulator with memory (long) $792886.l [Writes: Accumulator] [Flags: ZN]
	ora ($8C.b),Y		; 11 8C ; OR accumulator with memory ($8C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3B.b,X		; 34 3B ; Test bits $3B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $90		; 80 90 ; Branch always to $80, $90 [Flow: branch]
	rol $4140.w,X		; 3E 40 41 ; Rotate left $4140.w,X [Reads: X Index] [Flags: ZNC]
	.db $42, $99		; 42 99 ; Reserved instruction
	sta $4834.w,Y		; 99 34 48 ; Store accumulator to $4834.w,Y [Reads: Accumulator, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $9809.w		; 6E 09 98 ; Rotate right $9809.w [Flags: ZNC]
	inc $7250.w		; EE 50 72 ; Increment $7250.w [Flags: ZN]
	ror $8818.w,X		; 7E 18 88 ; Rotate right $8818.w,X [Reads: X Index] [Flags: ZNC]
	and ($7F.b),Y		; 31 7F ; AND accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($50.b,X)		; 81 50 ; Store accumulator ($50.b,X) [Reads: Accumulator, X Index, Direct Page]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $8C58.w		; 6E 58 8C ; Rotate right $8C58.w [Flags: ZNC]
	mvn $81,$88		; 54 88 81 ; Move block negative $81,$88 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($83.b,X)		; 81 83 ; Store accumulator ($83.b,X) [Reads: Accumulator, X Index, Direct Page]
	bit #$8888.w		; 89 88 88 ; Test bits #$8888.w with accumulator [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit #$8087.w		; 89 87 80 ; Test bits #$8087.w with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $8054.w		; 0C 54 80 ; Test and set bits $8054.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta ($87.b),Y		; 91 87 ; Store accumulator ($87.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $C64A.w		; AD 4A C6 ; Load $C64A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $0D4C.w,Y		; 79 4C 0D ; Add $0D4C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$9840.w		; A9 40 98 ; Load #$9840.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc [$D6.b]		; E7 D6 ; Subtract with carry (long) [$D6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $B7.b		; C6 B7 ; Decrement $B7.b [Reads: Direct Page] [Flags: ZN]
	sbc $77FA.w,Y		; F9 FA 77 ; Subtract with carry $77FA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$51.b],Y		; 77 51 ; Add with carry (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lsr $97.b		; 46 97 ; Logical shift right $97.b [Reads: Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lsr $D0D6.w		; 4E D6 D0 ; Logical shift right $D0D6.w [Flags: ZNC]
	jsr $7887.w		; 20 87 78 ; Jump to subroutine at $7887.w [Writes: Stack Pointer] [Flow: call]
	and $AB.b,X		; 35 AB ; Logical AND $AB.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$EE		; C2 EE
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	lsr $C5BB.w		; 4E BB C5 ; Logical shift right $C5BB.w [Flags: ZNC]
	dec $87.b		; C6 87 ; Decrement $87.b [Reads: Direct Page] [Flags: ZN]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $DB.b		; C6 DB ; Decrement $DB.b [Reads: Direct Page] [Flags: ZN]
	mvn $79,$77		; 54 77 79 ; Move block negative $79,$77 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc [$96.b]		; E7 96 ; Subtract with carry (long) [$96.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $58.b		; 46 58 ; Logical shift right $58.b [Reads: Direct Page] [Flags: ZNC]
	dec $59.b		; C6 59 ; Decrement $59.b [Reads: Direct Page] [Flags: ZN]
	bit #$9679.w		; 89 79 96 ; Test bits #$9679.w with accumulator [Reads: Accumulator] [Flags: Z]
.INDEX 8
	sep #$DB		; E2 DB
	lda $7777.w		; AD 77 77 ; Load $7777.w into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta [$9A.b],Y		; 97 9A ; Store accumulator (long indexed) [$9A.b],Y [Reads: Accumulator, Direct Page, Y Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $B8AD.w		; 4E AD B8 ; Logical shift right $B8AD.w [Flags: ZNC]
	cmp $87.b,S		; C3 87 ; Compare accumulator (stack relative) $87.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	adc [$93.b],Y		; 77 93 ; Add with carry (long indexed) [$93.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $97.b		; 46 97 ; Logical shift right $97.b [Reads: Direct Page] [Flags: ZNC]
	ora $117878.l		; 0F 78 78 11 ; OR accumulator with memory (long) $117878.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	lda $7788.w		; AD 88 77 ; Load $7788.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $C6DB.w		; AD DB C6 ; Load $C6DB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $7777.w		; AC 77 77 ; Load $7777.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$C636.w		; C9 36 C6 ; Compare #$C636.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor ($70.b,X)		; 41 70 ; Exclusive OR accumulator with memory ($70.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and $DA.b		; 25 DA ; Logical AND $DA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$5A.b],Y		; 97 5A ; Store accumulator (long indexed) [$5A.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$79.b]		; 87 79 ; Store accumulator (long) [$79.b] [Reads: Accumulator, Direct Page]
	dec $DA.b		; C6 DA ; Decrement $DA.b [Reads: Direct Page] [Flags: ZN]
	lda $7777B2.l		; AF B2 77 77 ; Load long $7777B2.l into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$1C9A.w		; 49 9A 1C ; Exclusive OR #$1C9A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $C0BD.w		; AD BD C0 ; Load $C0BD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $DB.b		; C4 DB ; Compare $DB.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sta [$A9.b],Y		; 97 A9 ; Store accumulator (long indexed) [$A9.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$C6.b]		; C7 C6 ; Compare accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $7777.w		; EE 77 77 ; Increment $7777.w [Flags: ZN]
	cmp $F3D6E6.l		; CF E6 D6 F3 ; Compare accumulator (long) $F3D6E6.l [Reads: Accumulator] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$C6.b]		; C7 C6 ; Compare accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rol $4B.b,X		; 36 4B ; Rotate left $4B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$09.b],Y		; 77 09 ; Add with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $CFC6.w		; 20 C6 CF ; Jump to subroutine at $CFC6.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta ($D6.b,S),Y		; 93 D6 ; Store accumulator (stack relative indirect indexed) ($D6.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	rol $77.b,X		; 36 77 ; Rotate left $77.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $70, $5A		; 70 5A ; Branch if overflow set to $70, $5A [Flow: branch]
	ora $43D0.w		; 0D D0 43 ; Logical OR $43D0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sep #$4E		; E2 4E ; Set processor status bits #$4E [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	pei ($4E.b)		; D4 4E ; Push effective indirect address ($4E.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	.db $B0, $12		; B0 12 ; Branch if carry set to $B0, $12 [Flow: branch]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $C6.b		; 24 C6 ; Test bits $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $37.b,X		; 36 37 ; Rotate left $37.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Accumulator, Direct Page]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec $22.b		; C6 22 ; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	ora $8877.w		; 0D 77 88 ; Logical OR $8877.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $BE.b,S		; A3 BE ; Load accumulator (stack relative) $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $4F.b		; C6 4F ; Decrement $4F.b [Reads: Direct Page] [Flags: ZN]
	adc [$79.b],Y		; 77 79 ; Add with carry (long indexed) [$79.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $F312.w		; 4E 12 F3 ; Logical shift right $F312.w [Flags: ZNC]
	dec $88.b		; C6 88 ; Decrement $88.b [Reads: Direct Page] [Flags: ZN]
	adc [$C7.b],Y		; 77 C7 ; Add with carry (long indexed) [$C7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $4E.b		; C6 4E ; Decrement $4E.b [Reads: Direct Page] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$87.b],Y		; 77 87 ; Add with carry (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp ($B0.b,X)		; C1 B0 ; Compare accumulator ($B0.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	adc [$AD.b],Y		; 77 AD ; Add with carry (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$A579.w		; A9 79 A5 ; Load #$A579.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $70, $17		; 70 17 ; Branch if overflow set to $70, $17 [Flow: branch]
	lda [$C6.b]		; A7 C6 ; Load accumulator (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $A3.b,X		; 16 A3 ; Arithmetic shift left $A3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$87.b],Y		; 77 87 ; Add with carry (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$5B.b]		; A7 5B ; Load accumulator (long) [$5B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $9E.b,X		; 16 9E ; Arithmetic shift left $9E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $9D87.w,Y		; 79 87 9D ; Add $9D87.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $25,$24		; 44 24 25 ; Move block positive $25,$24 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $C4.b		; C4 C4 ; Compare $C4.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	lda $A1.b,X		; B5 A1 ; Load $A1.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $B0.b,X		; D6 B0 ; Decrement memory $B0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lda $7777B1.l		; AF B1 77 77 ; Load long $7777B1.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	lsr $774E.w		; 4E 4E 77 ; Logical shift right $774E.w [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $A7.b,S		; A3 A7 ; Load accumulator (stack relative) $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $8777.w,Y		; BE 77 87 ; Load X register $8777.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	asl $C6C6.w,X		; 1E C6 C6 ; Arithmetic shift left $C6C6.w,X [Reads: X Index] [Flags: ZNC]
	lsr $87.b		; 46 87 ; Logical shift right $87.b [Reads: Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $C3ADDB.l		; CF DB AD C3 ; Compare accumulator (long) $C3ADDB.l [Reads: Accumulator] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $A1.b,X		; B5 A1 ; Load $A1.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $EE.b		; C6 EE ; Decrement $EE.b [Reads: Direct Page] [Flags: ZN]
	ora $7877.w		; 0D 77 78 ; Logical OR $7877.w with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $99C6.w		; 1C C6 99 ; Test and reset bits $99C6.w [Reads: Accumulator] [Flags: Z]
	stx $87.b,Y		; 96 87 ; Store X register $87.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc [$CA.b],Y		; 77 CA ; Add with carry (long indexed) [$CA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($36.b,S),Y		; 33 36 ; AND accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($78.b,S),Y		; 93 78 ; Store accumulator (stack relative indirect indexed) ($78.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora [$C7.b]		; 07 C7 ; OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $D0CF.w		; 2E CF D0 ; Rotate left $D0CF.w [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc [$28.b],Y		; 77 28 ; Add with carry (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $D0.b		; E6 D0 ; Increment $D0.b [Reads: Direct Page] [Flags: ZN]
	lsr $87.b		; 46 87 ; Logical shift right $87.b [Reads: Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dec $D0.b,X		; D6 D0 ; Decrement memory $D0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $D0, $93		; D0 93 ; Branch if not equal to $D0, $93 [Flow: branch]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $64.b		; 65 64 ; Add $64.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $09.b		; 66 09 ; Rotate right $09.b [Reads: Direct Page] [Flags: ZNC]
	sta $65C4.w,Y		; 99 C4 65 ; Store accumulator to $65C4.w,Y [Reads: Accumulator, Y Index]
	stz $66.b		; 64 66 ; Store zero to $66.b
	ora #$3499.w		; 09 99 34 ; Logical OR #$3499.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $6E.b		; 05 6E ; Logical OR $6E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$6E6A.w		; C9 6A 6E ; Compare #$6E6A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $C8.b		; 66 C8 ; Rotate right $C8.b [Reads: Direct Page] [Flags: ZNC]
	cpx #$C8.b		; E0 C8 ; Compare #$C8.b with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	adc ($6F.b,X)		; 61 6F ; Add with carry ($6F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6F.b)		; 72 6F ; Add with carry (indirect) ($6F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $D399.w,Y		; 19 99 D3 ; OR accumulator with memory $D399.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $D6.b		; 65 D6 ; Add $D6.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $340009.l		; 4F 09 00 34 ; Exclusive OR accumulator with memory (long) $340009.l [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$00C9.w		; C9 C9 00 ; Compare #$00C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $34B0.w		; AE B0 34 ; Load $34B0.w into X register [Writes: X Index] [Flags: ZN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $E8CE.w		; 0E CE E8 ; Arithmetic shift left $E8CE.w [Flags: ZNC]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc #$9232.w		; 69 32 92 ; Add #$9232.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$8012]		; DC 12 80 ; Jump long indirect [$8012] [Flow: jump]
	jmp.w [$3634]		; DC 34 36 ; Jump long indirect [$3634] [Flow: jump]
	lsr $0100.w		; 4E 00 01 ; Logical shift right $0100.w [Flags: ZNC]
	.db $90, $4B		; 90 4B ; Branch if carry clear to $90, $4B [Flow: branch]
	eor ($21.b,X)		; 41 21 ; Exclusive OR accumulator with memory ($21.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta $93.b		; 85 93 ; Store accumulator to $93.b [Reads: Accumulator]
	.db $80, $77		; 80 77 ; Branch always to $80, $77 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and #$7978.w		; 29 78 79 ; Logical AND #$7978.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $112924.l		; 4F 24 29 11 ; Exclusive OR accumulator with memory (long) $112924.l [Writes: Accumulator] [Flags: ZN]
	bit $4B.b,X		; 34 4B ; Test bits $4B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jmp ($015D.w)		; 6C 5D 01 ; Jump indirect to ($015D.w) [Flow: jump]
	ora ($7B.b)		; 12 7B ; OR accumulator with memory (indirect) ($7B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $20.b,X		; 76 20 ; Rotate right $20.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $2999.w,X		; 7E 99 29 ; Rotate right $2999.w,X [Reads: X Index] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $8278.w		; 8C 78 82 ; Store Y register to $8278.w [Reads: Y Index]
	jsl $807F29.l		; 22 29 7F 80 ; Jump to subroutine long $807F29.l [Writes: Stack Pointer] [Flow: call]
	sty $221C.w		; 8C 1C 22 ; Store Y register to $221C.w [Reads: Y Index]
	jsl $78887B.l		; 22 7B 88 78 ; Jump to subroutine long $78887B.l [Writes: Stack Pointer] [Flow: call]
	bit #$2229.w		; 89 29 22 ; Test bits #$2229.w with accumulator [Reads: Accumulator] [Flags: Z]
	adc $8D807F.l,X		; 7F 7F 80 8D ; Add long $8D807F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($29.b)		; 12 29 ; OR accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $89.b		; 66 89 ; Rotate right $89.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $812912.l		; 8F 12 29 81 ; Store accumulator (long) $812912.l [Reads: Accumulator]
	bit #$7791.w		; 89 91 77 ; Test bits #$7791.w with accumulator [Reads: Accumulator] [Flags: Z]
	jsl $8B7829.l		; 22 29 78 8B ; Jump to subroutine long $8B7829.l [Writes: Stack Pointer] [Flow: call]
	.db $70, $7D		; 70 7D ; Branch if overflow set to $70, $7D [Flow: branch]
	and #$7889.w		; 29 89 78 ; Logical AND #$7889.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty $2224.w		; 8C 24 22 ; Store Y register to $2224.w [Reads: Y Index]
	sta ($78.b),Y		; 91 78 ; Store accumulator ($78.b),Y [Reads: Accumulator, Direct Page, Y Index]
	adc $297678.l,X		; 7F 78 76 29 ; Add long $297678.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$8F4E.w		; [PATTERN: Memory clearing operation] 29 4E 8F ; Logical AND #$8F4E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $96.b		; 64 96 ; Store zero to $96.b
	ora ($29.b)		; 12 29 ; OR accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz $78.b		; 64 78 ; Store zero to $78.b
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $648322.l		; 22 22 83 64 ; Jump to subroutine long $648322.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta ($22.b)		; 92 22 ; Store accumulator (indirect) ($22.b) [Reads: Accumulator, Direct Page]
	stx $98.b,Y		; 96 98 ; Store X register $98.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	bit $78.b,X		; 34 78 ; Test bits $78.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $9822.w,Y		; 99 22 98 ; Store accumulator to $9822.w,Y [Reads: Accumulator, Y Index]
	sta ($7C.b,X)		; 81 7C ; Store accumulator ($7C.b,X) [Reads: Accumulator, X Index, Direct Page]
	bit #$9292.w		; 89 92 92 ; Test bits #$9292.w with accumulator [Reads: Accumulator] [Flags: Z]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ror $8276.w,X		; 7E 76 82 ; Rotate right $8276.w,X [Reads: X Index] [Flags: ZNC]
	sta ($99.b)		; 92 99 ; Store accumulator (indirect) ($99.b) [Reads: Accumulator, Direct Page]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $94.b		; 86 94 ; Store X register to $94.b [Reads: X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta $2E92.w,Y		; 99 92 2E ; Store accumulator to $2E92.w,Y [Reads: Accumulator, Y Index]
	sbc $6D.b,S		; E3 6D ; Subtract stack-relative $6D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $98		; 10 98 ; Branch if plus to $10, $98 [Flow: branch]
	ror $648C.w,X		; 7E 8C 64 ; Rotate right $648C.w,X [Reads: X Index] [Flags: ZNC]
	sta $2322.w,Y		; 99 22 23 ; Store accumulator to $2322.w,Y [Reads: Accumulator, Y Index]
	sta ($7C.b,S),Y		; 93 7C ; Store accumulator (stack relative indirect indexed) ($7C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $9229.w		; 8C 29 92 ; Store Y register to $9229.w [Reads: Y Index]
	adc $8D.b,S		; 63 8D ; Add with carry (stack relative) $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	bit #$2263.w		; 89 63 22 ; Test bits #$2263.w with accumulator [Reads: Accumulator] [Flags: Z]
	jsl $8191A2.l		; 22 A2 91 81 ; Jump to subroutine long $8191A2.l [Writes: Stack Pointer] [Flow: call]
	stx $99.b		; 86 99 ; Store X register to $99.b [Reads: X Index]
	and #$C57D.w		; 29 7D C5 ; Logical AND #$C57D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $92CD.w		; CD CD 92 ; Compare $92CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $D6E4B7.l		; 22 B7 E4 D6 ; Jump to subroutine long $D6E4B7.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsl $D8E422.l		; 22 22 E4 D8 ; Jump to subroutine long $D8E422.l [Writes: Stack Pointer] [Flow: call]
	cmp $22CD.w		; CD CD 22 ; Compare $22CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $D2CDFB.l		; 22 FB CD D2 ; Jump to subroutine long $D2CDFB.l [Writes: Stack Pointer] [Flow: call]
	ldx #$22.b		; A2 22 ; Load #$22.b into X register [Writes: X Index] [Flags: ZN]
	rol $CA.b		; 26 CA ; Rotate left $CA.b [Reads: Direct Page] [Flags: ZNC]
	cmp $F6CD.w		; CD CD F6 ; Compare $F6CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $EF.b,X		; F6 EF ; Increment memory $EF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cmp $22C5.w		; CD C5 22 ; Compare $22C5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $A5F99E.l		; 22 9E F9 A5 ; Jump to subroutine long $A5F99E.l [Writes: Stack Pointer] [Flow: call]
	cpy $32.b		; C4 32 ; Compare $32.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $30, $BA		; 30 BA ; Branch if minus to $30, $BA [Flow: branch]
	cmp $C7FA.w		; CD FA C7 ; Compare $C7FA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $342D22.l		; 22 22 2D 34 ; Jump to subroutine long $342D22.l [Writes: Stack Pointer] [Flow: call]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	cmp $9E.b,X		; D5 9E ; Compare accumulator $9E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $03C7.w		; CD C7 03 ; Compare $03C7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $DF39C9.l		; 22 C9 39 DF ; Jump to subroutine long $DF39C9.l [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $DF7622.l		; 22 22 76 DF ; Jump to subroutine long $DF7622.l [Writes: Stack Pointer] [Flow: call]
	dec $1207.w		; CE 07 12 ; Decrement $1207.w [Flags: ZN]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $73.b,X		; 34 73 ; Test bits $73.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $12.b,X		; 74 12 ; Store zero to $12.b,X [Reads: X Index]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $C4.b		; 26 C4 ; Rotate left $C4.b [Reads: Direct Page] [Flags: ZNC]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $5D.b		; 00 5D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $1166.w		; 4E 66 11 ; Logical shift right $1166.w [Flags: ZNC]
	ora ($6D.b),Y		; 11 6D ; OR accumulator with memory ($6D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $113A.w,X		; 9E 3A 11 ; Store zero to $113A.w,X [Reads: X Index]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$D5.b],Y		; 77 D5 ; Add with carry (long indexed) [$D5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $8687.w		; 9C 87 86 ; Store zero to $8687.w
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$B6.b],Y		; 77 B6 ; Add with carry (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Accumulator, Direct Page]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0134.w,X)		; 7C 34 01 ; Jump indirect indexed to ($0134.w,X) [Reads: X Index] [Flow: jump]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $31.b		; 02 31 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $0387.w,X		; 9E 87 03 ; Store zero to $0387.w,X [Reads: X Index]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta [$34.b]		; 87 34 ; Store accumulator (long) [$34.b] [Reads: Accumulator, Direct Page]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C976.w,Y		; D9 76 C9 ; Compare accumulator $C976.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$34.b],Y		; F7 34 ; Subtract with carry (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $50FE.w		; 6E FE 50 ; Rotate right $50FE.w [Flags: ZNC]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	bit $03.b,X		; 34 03 ; Test bits $03.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor #$4834.w		; 49 34 48 ; Exclusive OR #$4834.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora [$77.b]		; 07 77 ; OR accumulator with memory (long) [$77.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $380FA9.l,X		; 9F A9 0F 38 ; Store accumulator (long,X) $380FA9.l,X [Reads: Accumulator, X Index]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A3C4.w		; AD C4 A3 ; Load $A3C4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $86.b,X		; 34 86 ; Test bits $86.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $F234.w		; AC 34 F2 ; Load $F234.w into Y register [Writes: Y Index] [Flags: ZN]
	sep #$00		; E2 00 ; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $E4.b		; 05 E4 ; Logical OR $E4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: ZN]
	bit $55.b,X		; 34 55 ; Test bits $55.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	bit $32.b,X		; 34 32 ; Test bits $32.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $2100.w,Y		; 39 00 21 ; AND accumulator with memory $2100.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $CE.b,X		; 34 CE ; Test bits $CE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$E80D]		; DC 0D E8 ; Jump long indirect [$E80D] [Flow: jump]
	and $760220.l,X		; 3F 20 02 76 ; AND accumulator with memory (long,X) $760220.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $95.b,X		; 35 95 ; Logical AND $95.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $B035.w		; AE 35 B0 ; Load $B035.w into X register [Writes: X Index] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $343434.l,X		; 7F 34 34 34 ; Add long $343434.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F33434.l		; EF 34 34 F3 ; Subtract with carry (long) $F33434.l [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	lda ($9F.b,X)		; A1 9F ; Load accumulator ($9F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($A5.b,X)		; A1 A5 ; Load accumulator ($A5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $ADA5AD.l,X		; 9F AD A5 AD ; Store accumulator (long,X) $ADA5AD.l,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $36.b		; A5 36 ; Load $36.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $010050.l,X		; 7F 50 00 01 ; Add long $010050.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($5B.b,S),Y		; 53 5B ; XOR accumulator (stack relative indirect indexed) ($5B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $53.b,X		; 75 53 ; Add $53.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $CA.b,X		; 75 CA ; Add $CA.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $10DB.w,X		; DD DB 10 ; Compare accumulator $10DB.w,X [Reads: X Index] [Flags: ZNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $68.b,S		; E3 68 ; Subtract stack-relative $68.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc $3120.w,Y		; 79 20 31 ; Add $3120.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	bit $72.b,X		; 34 72 ; Test bits $72.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $3130.w,Y		; 79 30 31 ; Add $3130.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($35.b)		; 72 35 ; Add with carry (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $30.b,X		; 95 30 ; Store accumulator to $30.b,X [Reads: Accumulator, X Index]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $ADAC.w		; 6D AC AD ; Add $ADAC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldx $9919.w		; AE 19 99 ; Load $9919.w into X register [Writes: X Index] [Flags: ZN]
	.db $B0, $34		; B0 34 ; Branch if carry set to $B0, $34 [Flow: branch]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	.db $90, $99		; 90 99 ; Branch if carry clear to $90, $99 [Flow: branch]
	lda $34B336.l		; AF 36 B3 34 ; Load long $34B336.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $3690.w		; 20 90 36 ; Jump to subroutine at $3690.w [Writes: Stack Pointer] [Flow: call]
	lda ($36.b,S),Y		; B3 36 ; Load accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F0209.l		; 0F 09 02 0F ; OR accumulator with memory (long) $0F0209.l [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	ora #$B0B3.w		; 09 B3 B0 ; Logical OR #$B0B3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $239987.l		; 0F 87 99 23 ; OR accumulator with memory (long) $239987.l [Writes: Accumulator] [Flags: ZN]
	sta [$A9.b]		; 87 A9 ; Store accumulator (long) [$A9.b] [Reads: Accumulator, Direct Page]
	bit $F4.b,X		; 34 F4 ; Test bits $F4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $F302.w,Y		; 39 02 F3 ; AND accumulator with memory $F302.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $23.b,X		; 34 23 ; Test bits $23.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $34.b		; 85 34 ; Store accumulator to $34.b [Reads: Accumulator]
	sbc ($01.b,X)		; E1 01 ; Subtract with carry ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $AEAD.w,Y		; 39 AD AE ; AND accumulator with memory $AEAD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $9929.w		; AD 29 99 ; Load $9929.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $29AE.w		; AD AE 29 ; Load $29AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($99.b,X)		; E1 99 ; Subtract with carry ($99.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr $E1B1.w		; 20 B1 E1 ; Jump to subroutine at $E1B1.w [Writes: Stack Pointer] [Flow: call]
	jmp ($9036.w,X)		; 7C 36 90 ; Jump indirect indexed to ($9036.w,X) [Reads: X Index] [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and [$B0.b]		; 27 B0 ; AND accumulator with memory (long) [$B0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $2939.w		; AE 39 29 ; Load $2939.w into X register [Writes: X Index] [Flags: ZN]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Accumulator, Direct Page]
	ror $ABAE.w,X		; 7E AE AB ; Rotate right $ABAE.w,X [Reads: X Index] [Flags: ZNC]
	ora ($99.b,S),Y		; 13 99 ; OR accumulator (stack relative indirect indexed) ($99.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx $AE87.w		; AE 87 AE ; Load $AE87.w into X register [Writes: X Index] [Flags: ZN]
	sta $3469.w,Y		; 99 69 34 ; Store accumulator to $3469.w,Y [Reads: Accumulator, Y Index]
	stx $B3.b		; 86 B3 ; Store X register to $B3.b [Reads: X Index]
	ldy $9906.w		; AC 06 99 ; Load $9906.w into Y register [Writes: Y Index] [Flags: ZN]
	and $B3.b,X		; 35 B3 ; Logical AND $B3.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $09DA.w,X		; 9D DA 09 ; Store accumulator to $09DA.w,X [Reads: Accumulator, X Index]
	jsr $B2B2.w		; 20 B2 B2 ; Jump to subroutine at $B2B2.w [Writes: Stack Pointer] [Flow: call]
	ldy $99AD.w		; AC AD 99 ; Load $99AD.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $DAAE.w,Y		; 99 AE DA ; Store accumulator to $DAAE.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0990.w		; AE 90 09 ; Load $0990.w into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta ($9D.b,X)		; 81 9D ; Store accumulator ($9D.b,X) [Reads: Accumulator, X Index, Direct Page]
	bit $06.b,X		; 34 06 ; Test bits $06.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $3636.w		; 20 36 36 ; Jump to subroutine at $3636.w [Writes: Stack Pointer] [Flow: call]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $29.b,X		; 34 29 ; Test bits $29.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and #$02B3.w		; 29 B3 02 ; Logical AND #$02B3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$7EB3.w		; 29 B3 7E ; Logical AND #$7EB3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$B3.b		; A0 B3 ; Load #$B3.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($09.b,S),Y		; 93 09 ; Store accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda ($08.b,S),Y		; B3 08 ; Load accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $AF.b,X		; 34 AF ; Test bits $AF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta $3688.w,X		; 9D 88 36 ; Store accumulator to $3688.w,X [Reads: Accumulator, X Index]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $D9FE.w		; 6E FE D9 ; Rotate right $D9FE.w [Flags: ZNC]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: ZNC]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $FE.b,X		; 34 FE ; Test bits $FE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	mvp $36,$00		; 44 00 36 ; Move block positive $36,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ldx $00.b,Y		; B6 00 ; Load X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	jsl $E629B8.l		; 22 B8 29 E6 ; Jump to subroutine long $E629B8.l [Writes: Stack Pointer] [Flow: call]
	inc $2223.w,X		; FE 23 22 ; Increment memory $2223.w,X [Reads: X Index] [Flags: ZN]
	jmp.w [$D0B8]		; DC B8 D0 ; Jump long indirect [$D0B8] [Flow: jump]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	jsr $E683.w		; 20 83 E6 ; Jump to subroutine at $E683.w [Writes: Stack Pointer] [Flow: call]
	cmp $011256.l		; CF 56 12 01 ; Compare accumulator (long) $011256.l [Reads: Accumulator] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $CA.b,S		; 03 CA ; OR accumulator with stack relative $CA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $0223.w,X		; FE 23 02 ; Increment memory $0223.w,X [Reads: X Index] [Flags: ZN]
	bit $E3.b,X		; 34 E3 ; Test bits $E3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $33.b,X		; D5 33 ; Compare accumulator $33.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $37EE.w		; CE EE 37 ; Decrement $37EE.w [Flags: ZN]
	bit $02.b,X		; 34 02 ; Test bits $02.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $ECED.w		; 20 ED EC ; Jump to subroutine at $ECED.w [Writes: Stack Pointer] [Flow: call]
	lda ($62.b),Y		; B1 62 ; Load accumulator ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $E60221.l		; 22 21 02 E6 ; Jump to subroutine long $E60221.l [Writes: Stack Pointer] [Flow: call]
	bit $ED.b,X		; 34 ED ; Test bits $ED.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($01.b)		; 32 01 ; AND accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pei ($1E.b)		; D4 1E ; Push effective indirect address ($1E.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora $320335.l,X		; 1F 35 03 32 ; Logical OR long $320335.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $EB.b		; 06 EB ; Arithmetic shift left $EB.b [Reads: Direct Page] [Flags: ZNC]
	bit $FD.b,X		; 34 FD ; Test bits $FD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($02.b),Y		; 11 02 ; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	sbc $22.b,X		; F5 22 ; Subtract $22.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $C53723.l		; 22 23 37 C5 ; Jump to subroutine long $C53723.l [Writes: Stack Pointer] [Flow: call]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsr $7811.w		; 20 11 78 ; Jump to subroutine at $7811.w [Writes: Stack Pointer] [Flow: call]
	jsr $91C8.w		; 20 C8 91 ; Jump to subroutine at $91C8.w [Writes: Stack Pointer] [Flow: call]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $6AEC21.l		; 8F 21 EC 6A ; Store accumulator (long) $6AEC21.l [Reads: Accumulator]
	adc ($11.b,S),Y		; 73 11 ; Add with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $CC.b,X		; 34 CC ; Test bits $CC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $F0.b		; E6 F0 ; Increment $F0.b [Reads: Direct Page] [Flags: ZN]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $CA37.w,X		; FE 37 CA ; Increment memory $CA37.w,X [Reads: X Index] [Flags: ZN]
	jmp ($0122.w)		; 6C 22 01 ; Jump indirect to ($0122.w) [Flow: jump]
	lda $8784.w		; AD 84 87 ; Load $8784.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ror $01.b,X		; 76 01 ; Rotate right $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($54.b),Y		; 31 54 ; AND accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $6A05.w,X		; FE 05 6A ; Increment memory $6A05.w,X [Reads: X Index] [Flags: ZN]
	jsl $201E11.l		; 22 11 1E 20 ; Jump to subroutine long $201E11.l [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$13.b],Y		; 17 13 ; OR accumulator with memory (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($63.b,S),Y		; 73 63 ; Add with carry (stack relative indirect indexed) ($63.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $60.b		; C5 60 ; Compare $60.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($D5.b)		; 12 D5 ; OR accumulator with memory (indirect) ($D5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $17.b		; 06 17 ; Arithmetic shift left $17.b [Reads: Direct Page] [Flags: ZNC]
	adc ($09.b),Y		; 71 09 ; Add with carry ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	bit $BF.b,X		; 34 BF ; Test bits $BF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $39		; 10 39 ; Branch if plus to $10, $39 [Flow: branch]
	adc $67.b		; 65 67 ; Add $67.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $336F.w		; 4E 6F 33 ; Logical shift right $336F.w [Flags: ZNC]
	ora ($71.b,S),Y		; 13 71 ; OR accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9330E7.l,X		; BF E7 30 93 ; Load long $9330E7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($FC.b,X)		; C1 FC ; Compare accumulator ($FC.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	inc $9376.w,X		; FE 76 93 ; Increment memory $9376.w,X [Reads: X Index] [Flags: ZN]
	rol $D2.b,X		; 36 D2 ; Rotate left $D2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$C8.b]		; C7 C8 ; Compare accumulator (long) [$C8.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $E193.w,Y		; 99 93 E1 ; Store accumulator to $E193.w,Y [Reads: Accumulator, Y Index]
	wai		; CB ; Wait for interrupt
	cpy $09CC.w		; CC CC 09 ; Compare $09CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $CA34.w,Y		; 99 34 CA ; Store accumulator to $CA34.w,Y [Reads: Accumulator, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $9409.w		; 1C 09 94 ; Test and reset bits $9409.w [Reads: Accumulator] [Flags: Z]
	cmp ($D7.b),Y		; D1 D7 ; Compare accumulator ($D7.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora $4999D9.l,X		; 1F D9 99 49 ; Logical OR long $4999D9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $94.b,X		; 34 94 ; Test bits $94.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$DCDD]		; DC DD DC ; Jump long indirect [$DCDD] [Flow: jump]
	eor #$DD99.w		; 49 99 DD ; Exclusive OR #$DD99.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $DFF0.w,X		; DD F0 DF ; Compare accumulator $DFF0.w,X [Reads: X Index] [Flags: ZNC]
	sta $E109.w,Y		; 99 09 E1 ; Store accumulator to $E109.w,Y [Reads: Accumulator, Y Index]
	cmp ($34.b)		; D2 34 ; Compare accumulator (indirect) ($34.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($04.b,S),Y		; 93 04 ; Store accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	bit $CE.b,X		; 34 CE ; Test bits $CE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $1C.b		; E6 1C ; Increment $1C.b [Reads: Direct Page] [Flags: ZN]
	ora $94.b,S		; 03 94 ; OR accumulator with stack relative $94.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $90.b,X		; 34 90 ; Test bits $90.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $9D.b,X		; 34 9D ; Test bits $9D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $9D.b,X		; 36 9D ; Rotate left $9D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $3434.w		; 20 34 34 ; Jump to subroutine at $3434.w [Writes: Stack Pointer] [Flow: call]
	rol $14.b,X		; 36 14 ; Rotate left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	sta $2536.w,X		; 9D 36 25 ; Store accumulator to $2536.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr $3411.w		; 20 11 34 ; Jump to subroutine at $3411.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $ECEC.w		; EC EC EC ; Compare $ECEC.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $9999.w		; EC 99 99 ; Compare $9999.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $ECEC.w		; EC EC EC ; Compare $ECEC.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $9999.w		; ED 99 99 ; Subtract $9999.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $F5F3F1.l		; EF F1 F3 F5 ; Subtract with carry (long) $F5F3F1.l [Writes: Accumulator] [Flags: ZVNC]
	sta $F799.w,Y		; 99 99 F7 ; Store accumulator to $F799.w,Y [Reads: Accumulator, Y Index]
	cpx $F0EE.w		; EC EE F0 ; Compare $F0EE.w with X register [Reads: X Index] [Flags: ZNC]
	sta $F299.w,Y		; 99 99 F2 ; Store accumulator to $F299.w,Y [Reads: Accumulator, Y Index]
	pea $F4C5.w		; F4 C5 F4 ; Push absolute address $F4C5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sta $F559.w,Y		; 99 59 F5 ; Store accumulator to $F559.w,Y [Reads: Accumulator, Y Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FA.b,X		; F5 FA ; Subtract $FA.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $2499.w,Y		; 99 99 24 ; Store accumulator to $2499.w,Y [Reads: Accumulator, Y Index]
	pea $FDF8.w		; F4 F8 FD ; Push absolute address $FDF8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $F899.w,Y		; 19 99 F8 ; OR accumulator with memory $F899.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($F6.b,S),Y		; F3 F6 ; Subtract with carry (stack relative indirect indexed) ($F6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $9999.w		; F4 99 99 ; Push absolute address $9999.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $F32401.l,X		; FF 01 24 F3 ; Subtract with carry (long,X) $F32401.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $F5F6.w,Y		; 19 F6 F5 ; OR accumulator with memory $F5F6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $99.b		; 02 99 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $02F5.w,Y		; 19 F5 02 ; OR accumulator with memory $02F5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0D.b		; 04 0D ; Test and set bits $0D.b [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora #$F512.w		; 09 12 F5 ; Logical OR #$F512.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$AA.b]		; 07 AA ; OR accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc $FAF6.w,Y		; F9 F6 FA ; Subtract with carry $FAF6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9999.w,Y		; F9 99 99 ; Subtract with carry $9999.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $1605.w		; 0C 05 16 ; Test and set bits $1605.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($F3.b)		; 12 F3 ; OR accumulator with memory (indirect) ($F3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0903.w		; A9 03 09 ; Load #$0903.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $04.b,X		; 16 04 ; Arithmetic shift left $04.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	inc $A9FE.w,X		; FE FE A9 ; Increment memory $A9FE.w,X [Reads: X Index] [Flags: ZN]
	sta $1112.w,Y		; 99 12 11 ; Store accumulator to $1112.w,Y [Reads: Accumulator, Y Index]
	inc $AAFE.w,X		; FE FE AA ; Increment memory $AAFE.w,X [Reads: X Index] [Flags: ZN]
	sta $07FE.w,Y		; 99 FE 07 ; Store accumulator to $07FE.w,Y [Reads: Accumulator, Y Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $9A		; F0 9A ; Branch if equal to $F0, $9A [Flow: branch]
	sta $FEFE.w,Y		; 99 FE FE ; Store accumulator to $FEFE.w,Y [Reads: Accumulator, Y Index]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sta $F699.w,Y		; 99 99 F6 ; Store accumulator to $F699.w,Y [Reads: Accumulator, Y Index]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $9A.b,S		; 03 9A ; OR accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $1F1E.w,Y		; 19 1E 1F ; OR accumulator with memory $1F1E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $AA.b,X		; 16 AA ; Arithmetic shift left $AA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $09.b		; 25 09 ; Logical AND $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $2927.w,Y		; 19 27 29 ; OR accumulator with memory $2927.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $AA.b,X		; 16 AA ; Arithmetic shift left $AA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($99AA.w,X)		; FC AA 99 ; Jump to subroutine indirect indexed ($99AA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $120FFC.l		; 0F FC 0F 12 ; OR accumulator with memory (long) $120FFC.l [Writes: Accumulator] [Flags: ZN]
	lda #$FCAA.w		; A9 AA FC ; Load #$FCAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$F9.b]		; 07 F9 ; OR accumulator with memory (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$9A.b]		; 07 9A ; OR accumulator with memory (long) [$9A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora [$EC.b]		; 07 EC ; OR accumulator with memory (long) [$EC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $A9F7.w		; EC F7 A9 ; Compare $A9F7.w with X register [Reads: X Index] [Flags: ZNC]
	sta $302E.w,Y		; 99 2E 30 ; Store accumulator to $302E.w,Y [Reads: Accumulator, Y Index]
	and ($2B.b)		; 32 2B ; AND accumulator with memory (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and $ECEC.w		; 2D EC EC ; Logical AND $ECEC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $99A9.w		; EC A9 99 ; Compare $99A9.w with X register [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rol $2F33.w		; 2E 33 2F ; Rotate left $2F33.w [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol $302F.w		; 2E 2F 30 ; Rotate left $302F.w [Flags: ZNC]
	cmp $AA.b		; C5 AA ; Compare $AA.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($F0.b),Y		; 31 F0 ; AND accumulator with memory ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $9AAA.w		; 2C AA 9A ; Test bits $9AAA.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora ($35.b,X)		; 01 35 ; Logical OR ($35.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($FE.b,S),Y		; 33 FE ; AND accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $33		; 30 33 ; Branch if minus to $30, $33 [Flow: branch]
	lda #$FCAA.w		; A9 AA FC ; Load #$FCAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $360C.w,Y		; 19 0C 36 ; OR accumulator with memory $360C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($2F.b,S),Y		; 33 2F ; AND accumulator (stack relative indirect indexed) ($2F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $AA0E.w,Y		; 19 0E AA ; OR accumulator with memory $AA0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $3036.w		; 0C 36 30 ; Test and set bits $3036.w [Reads: Accumulator] [Flags: Z]
	ora ($AA.b,X)		; 01 AA ; Logical OR ($AA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $FE07.w,Y		; F9 07 FE ; Subtract with carry $FE07.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $9A9A.w		; 2E 9A 9A ; Rotate left $9A9A.w [Flags: ZNC]
	jsr ($1518.w,X)		; FC 18 15 ; Jump to subroutine indirect indexed ($1518.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $9A.b		; 04 9A ; Test and set bits $9A.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($2F.b,S),Y		; 33 2F ; AND accumulator (stack relative indirect indexed) ($2F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $19.b		; 04 19 ; Test and set bits $19.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	.db $30, $F6		; 30 F6 ; Branch if minus to $30, $F6 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$1AFE.w		; A9 FE 1A ; Load #$1AFE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $F0, $9A		; F0 9A ; Branch if equal to $F0, $9A [Flow: branch]
	lda #$F0F0.w		; A9 F0 F0 ; Load #$F0F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($30.b,S),Y		; 33 30 ; AND accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04AA.w,Y		; 99 AA 04 ; Store accumulator to $04AA.w,Y [Reads: Accumulator, Y Index]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $AA.b		; 04 AA ; Test and set bits $AA.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	inc $AA12.w,X		; FE 12 AA ; Increment memory $AA12.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc $1212.w,X		; FD 12 12 ; Subtract with carry $1212.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FCAA9A.l		; 0F 9A AA FC ; OR accumulator with memory (long) $FCAA9A.l [Writes: Accumulator] [Flags: ZN]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $FB99.w,Y		; 99 99 FB ; Store accumulator to $FB99.w,Y [Reads: Accumulator, Y Index]
	ora ($2F.b)		; 12 2F ; OR accumulator with memory (indirect) ($2F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $A39A.w		; 9C 9A A3 ; Store zero to $A39A.w
	ora $7D34.w		; 0D 34 7D ; Logical OR $7D34.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	bit $A5.b		; 24 A5 ; Test bits $A5.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $01.b,X		; 95 01 ; Store accumulator to $01.b,X [Reads: Accumulator, X Index]
	.db $10, $24		; 10 24 ; Branch if plus to $10, $24 [Flow: branch]
	rol $0B.b,X		; 36 0B ; Rotate left $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec $13A5.w		; CE A5 13 ; Decrement $13A5.w [Flags: ZN]
	and ($A5.b,X)		; 21 A5 ; Logical AND ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $12.b		; A5 12 ; Load $12.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($CE.b,X)		; 01 CE ; Logical OR ($CE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($11.b),Y		; 71 11 ; Add with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($20.b,X)		; 61 20 ; Add with carry ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($9E.b),Y		; 31 9E ; AND accumulator with memory ($9E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9C9.w		; C9 C9 C9 ; Compare #$C9C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$403F.w		; C9 3F 40 ; Compare #$403F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $EC43.w		; ED 43 EC ; Subtract $EC43.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	jsl $4F4E22.l		; 22 22 4E 4F ; Jump to subroutine long $4F4E22.l [Writes: Stack Pointer] [Flow: call]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $E651EC.l		; 22 EC 51 E6 ; Jump to subroutine long $E651EC.l [Writes: Stack Pointer] [Flow: call]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $4540.w,X		; 5D 40 45 ; Exclusive OR accumulator with memory $4540.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $61.b		; E6 61 ; Increment $61.b [Reads: Direct Page] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	lsr $1A2A.w		; 4E 2A 1A ; Logical shift right $1A2A.w [Flags: ZNC]
	inc $51.b		; E6 51 ; Increment $51.b [Reads: Direct Page] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $E66AE6.l		; 22 E6 6A E6 ; Jump to subroutine long $E66AE6.l [Writes: Stack Pointer] [Flow: call]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	adc ($EC.b,X)		; 61 EC ; Add with carry ($EC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $2A1A.w		; 4E 1A 2A ; Logical shift right $2A1A.w [Flags: ZNC]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $AA.b		; 45 AA ; Exclusive OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $5B45.w,Y		; 59 45 5B ; Exclusive OR accumulator with memory $5B45.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $E6.b		; 45 E6 ; Exclusive OR $E6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $A2.b		; 45 A2 ; Exclusive OR $A2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $72.b		; 45 72 ; Exclusive OR $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $73.b		; 45 73 ; Exclusive OR $73.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $4E.b		; E6 4E ; Increment $4E.b [Reads: Direct Page] [Flags: ZN]
	lsr $2A4E.w		; 4E 4E 2A ; Logical shift right $2A4E.w [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($E6.b,X)		; 41 E6 ; Exclusive OR accumulator with memory ($E6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $15.b		; 45 15 ; Exclusive OR $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $456A.w		; 6E 6A 45 ; Rotate right $456A.w [Flags: ZNC]
	eor $AA.b		; 45 AA ; Exclusive OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $46.b,X		; 74 46 ; Store zero to $46.b,X [Reads: X Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $6A.b,X		; 76 6A ; Rotate right $6A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $AA.b		; E6 AA ; Increment $AA.b [Reads: Direct Page] [Flags: ZN]
	ldx #$45.b		; A2 45 ; Load #$45.b into X register [Writes: X Index] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx #$2A.b		; A2 2A ; Load #$2A.b into X register [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $6D.b		; 45 6D ; Exclusive OR $6D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $48.b		; E6 48 ; Increment $48.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	inc $45.b		; E6 45 ; Increment $45.b [Reads: Direct Page] [Flags: ZN]
	inc $12.b		; E6 12 ; Increment $12.b [Reads: Direct Page] [Flags: ZN]
	ldx #$45.b		; A2 45 ; Load #$45.b into X register [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $6A.b		; 45 6A ; Exclusive OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc ($45.b),Y		; 71 45 ; Add with carry ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $51.b		; 45 51 ; Exclusive OR $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $64.b		; E6 64 ; Increment $64.b [Reads: Direct Page] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $48.b		; 66 48 ; Rotate right $48.b [Reads: Direct Page] [Flags: ZNC]
	inc $4E.b		; E6 4E ; Increment $4E.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $E64F.w		; 4E 4F E6 ; Logical shift right $E64F.w [Flags: ZNC]
	inc $AA.b		; E6 AA ; Increment $AA.b [Reads: Direct Page] [Flags: ZN]
	jsl $48E6E6.l		; 22 E6 E6 48 ; Jump to subroutine long $48E6E6.l [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $5467AA.l		; 22 AA 67 54 ; Jump to subroutine long $5467AA.l [Writes: Stack Pointer] [Flow: call]
	eor $AAAA7C.l		; 4F 7C AA AA ; Exclusive OR accumulator with memory (long) $AAAA7C.l [Writes: Accumulator] [Flags: ZN]
	jmp ($4E4E.w,X)		; 7C 4E 4E ; Jump indirect indexed to ($4E4E.w,X) [Reads: X Index] [Flow: jump]
	lsr $AAAA.w		; 4E AA AA ; Logical shift right $AAAA.w [Flags: ZNC]
	eor ($5B.b,S),Y		; 53 5B ; XOR accumulator (stack relative indirect indexed) ($5B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($7C.b,X)		; 41 7C ; Exclusive OR accumulator with memory ($7C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($7C7C.w,X)		; 7C 7C 7C ; Jump indirect indexed to ($7C7C.w,X) [Reads: X Index] [Flow: jump]
	cmp #$A0AA.w		; C9 AA A0 ; Compare #$A0AA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$7D7B.w		; C9 7B 7D ; Compare #$7D7B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	mvp $AA,$0A		; 44 0A AA ; Move block positive $AA,$0A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($7C7C.w,X)		; 7C 7C 7C ; Jump indirect indexed to ($7C7C.w,X) [Reads: X Index] [Flow: jump]
	jmp ($AAAA.w,X)		; 7C AA AA ; Jump indirect indexed to ($AAAA.w,X) [Reads: X Index] [Flow: jump]
	sta ($84.b,X)		; 81 84 ; Store accumulator ($84.b,X) [Reads: Accumulator, X Index, Direct Page]
	inc $6A.b		; E6 6A ; Increment $6A.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $868F.w		; 8D 8F 86 ; Store accumulator to $868F.w [Reads: Accumulator]
	.db $90, $AA		; 90 AA ; Branch if carry clear to $90, $AA [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $90, $87		; 90 87 ; Branch if carry clear to $90, $87 [Flow: branch]
	stx $AA8D.w		; 8E 8D AA ; Store X register to $AA8D.w [Reads: X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr $4653.w		; 4E 53 46 ; Logical shift right $4653.w [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $9A93.w,Y		; 99 93 9A ; Store accumulator to $9A93.w,Y [Reads: Accumulator, Y Index]
	stz $AAAA.w		; 9C AA AA ; Store zero to $AAAA.w
	sty $99.b,X		; 94 99 ; Store Y register $99.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta $AA6D.w,X		; 9D 6D AA ; Store accumulator to $AA6D.w,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor #$A3A3.w		; 49 A3 A3 ; Exclusive OR #$A3A3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$AA.b		; A0 AA ; Load #$AA.b into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $9BA0.w		; 9C A0 9B ; Store zero to $9BA0.w
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $E6.b,S		; A3 E6 ; Load accumulator (stack relative) $E6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $A3.b		; E6 A3 ; Increment $A3.b [Reads: Direct Page] [Flags: ZN]
	ldx #$2A.b		; A2 2A ; Load #$2A.b into X register [Writes: X Index] [Flags: ZN]
	lda #$A8AA.w		; A9 AA A8 ; Load #$A8AA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$AAAA.w		; A9 AA AA ; Load #$AAAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	eor $5B.b		; 45 5B ; Exclusive OR $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44AAAA.l,X		; 5F AA AA 44 ; Exclusive OR accumulator with memory (long,X) $44AAAA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $57.b,X		; 55 57 ; Exclusive OR accumulator with memory $57.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $AAAA.w		; 4E AA AA ; Logical shift right $AAAA.w [Flags: ZNC]
	adc [$46.b]		; 67 46 ; Add with carry (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $66.b		; 64 66 ; Store zero to $66.b
	adc [$AA.b]		; 67 AA ; Add with carry (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	mvp $AA,$46		; 44 46 AA ; Move block positive $AA,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $77.b,S		; A3 77 ; Load accumulator (stack relative) $77.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $AA,$44		; 44 44 AA ; Move block positive $AA,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	mvn $4E,$4E		; 54 4E 4E ; Move block negative $4E,$4E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $AAAA.w		; 4E AA AA ; Logical shift right $AAAA.w [Flags: ZNC]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $74.b		; 45 74 ; Exclusive OR $74.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $63.b		; 45 63 ; Exclusive OR $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc $48.b		; 65 48 ; Add $48.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $E6A3A3.l		; 22 A3 A3 E6 ; Jump to subroutine long $E6A3A3.l [Writes: Stack Pointer] [Flow: call]
	eor $AA.b		; 45 AA ; Exclusive OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $E6.b		; 46 E6 ; Logical shift right $E6.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx #$5F.b		; A2 5F ; Load #$5F.b into X register [Writes: X Index] [Flags: ZN]
	inc $A3.b		; E6 A3 ; Increment $A3.b [Reads: Direct Page] [Flags: ZN]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp $ADAD.w		; 4C AD AD ; Jump to $ADAD.w [Flow: jump]
	lsr $AA.b		; 46 AA ; Logical shift right $AA.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $4E.b,S		; A3 4E ; Load accumulator (stack relative) $4E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $AA4E.w		; 4E 4E AA ; Logical shift right $AA4E.w [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr $6367.w		; 4E 67 63 ; Logical shift right $6367.w [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $3439.w		; AD 39 34 ; Load $3439.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $50, $34		; 50 34 ; Branch if overflow clear to $50, $34 [Flow: branch]
	bit $C0.b,X		; 34 C0 ; Test bits $C0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $AAEC.w,Y		; B9 EC AA ; Load $AAEC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx $B7C0.w,Y		; BE C0 B7 ; Load X register $B7C0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $C8.b,X		; 34 C8 ; Test bits $C8.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rol $F3.b,X		; 36 F3 ; Rotate left $F3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pea $00A8.w		; F4 A8 00 ; Push absolute address $00A8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C7C6.w,Y		; D9 C6 C7 ; Compare accumulator $C7C6.w,Y [Reads: Y Index] [Flags: ZNC]
	ldy #$AA.b		; A0 AA ; Load #$AA.b into Y register [Writes: Y Index] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	mvp $34,$00		; 44 00 34 ; Move block positive $34,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $F6.b,X		; 34 F6 ; Test bits $F6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $B7E3.w,Y		; F9 E3 B7 ; Subtract with carry $B7E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $F6AA.w,Y		; 39 AA F6 ; AND accumulator with memory $F6AA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $B7.b,S		; E3 B7 ; Subtract stack-relative $B7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda [$39.b],Y		; B7 39 ; Load accumulator (long indexed) [$39.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $70A3.w,X		; FE A3 70 ; Increment memory $70A3.w,X [Reads: X Index] [Flags: ZN]
	bit $D6.b,X		; 34 D6 ; Test bits $D6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $D6.b,X		; 34 D6 ; Test bits $D6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $1B.b,X		; 34 1B ; Test bits $1B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $3332.w		; CE 32 33 ; Decrement $3332.w [Flags: ZN]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	bit $CF.b,X		; 34 CF ; Test bits $CF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $CE34.w		; CE 34 CE ; Decrement $CE34.w [Flags: ZN]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $B7		; 30 B7 ; Branch if minus to $30, $B7 [Flow: branch]
	.db $F0, $CA		; F0 CA ; Branch if equal to $F0, $CA [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy #$94.b		; A0 94 ; Load #$94.b into Y register [Writes: Y Index] [Flags: ZN]
	dec $C06C.w		; CE 6C C0 ; Decrement $C06C.w [Flags: ZN]
	lda $33.b,X		; B5 33 ; Load $33.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ldy $3434.w,X		; BC 34 34 ; Load Y register $3434.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	dec $03A0.w		; CE A0 03 ; Decrement $03A0.w [Flags: ZN]
	adc $D0F0.w,Y		; 79 F0 D0 ; Add $D0F0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $30.b		; C4 30 ; Compare $30.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sta ($35.b,S),Y		; 93 35 ; Store accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $403434.l,X		; FF 34 34 40 ; Subtract with carry (long,X) $403434.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($DCDB.w,X)		; 7C DB DC ; Jump indirect indexed to ($DCDB.w,X) [Reads: X Index] [Flow: jump]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $E4E2.w,X		; DE E2 E4 ; Decrement memory $E4E2.w,X [Reads: X Index] [Flags: ZN]
	bit $AA.b,X		; 34 AA ; Test bits $AA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $35.b,S		; A3 35 ; Load accumulator (stack relative) $35.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$98F6.w		; C9 F6 98 ; Compare #$98F6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor ($E3.b,S),Y		; 53 E3 ; XOR accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $34.b		; 85 34 ; Store accumulator to $34.b [Reads: Accumulator]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $79		; 30 79 ; Branch if minus to $30, $79 [Flow: branch]
	rol $3E34.w,X		; 3E 34 3E ; Rotate left $3E34.w,X [Reads: X Index] [Flags: ZNC]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	trb $9A.b		; 14 9A ; Test and reset bits $9A.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $02.b		; 24 02 ; Test bits $02.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sty $0F.b		; 84 0F ; Store Y register to $0F.b [Reads: Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($F6.b),Y		; 11 F6 ; OR accumulator with memory ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sty $A9.b		; 84 A9 ; Store Y register to $A9.b [Reads: Y Index]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc ($34.b,X)		; E1 34 ; Subtract with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $380A10.l		; 0F 10 0A 38 ; OR accumulator with memory (long) $380A10.l [Writes: Accumulator] [Flags: ZN]
	stz $41C8.w		; 9C C8 41 ; Store zero to $41C8.w
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($02.b,S),Y		; 33 02 ; AND accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora [$0C.b],Y		; 17 0C ; OR accumulator with memory (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $06.b,X		; 36 06 ; Rotate left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $F6.b,S		; 03 F6 ; OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $AAA90F.l		; 0F 0F A9 AA ; OR accumulator with memory (long) $AAA90F.l [Writes: Accumulator] [Flags: ZN]
	bit $7E.b,X		; 34 7E ; Test bits $7E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $0334.w,X		; 7E 34 03 ; Rotate right $0334.w,X [Reads: X Index] [Flags: ZNC]
	.db $30, $7E		; 30 7E ; Branch if minus to $30, $7E [Flow: branch]
	adc ($37.b),Y		; 71 37 ; Add with carry ($37.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $30.b		; 84 30 ; Store Y register to $30.b [Reads: Y Index]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $EB.b,X		; 34 EB ; Test bits $EB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $339D.w		; AD 9D 33 ; Load $339D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($26.b)		; 32 26 ; AND accumulator with memory (indirect) ($26.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	sbc #$0100.w		; E9 00 01 ; Subtract #$0100.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jsr $CDE5.w		; 20 E5 CD ; Jump to subroutine at $CDE5.w [Writes: Stack Pointer] [Flow: call]
	stz $2052.w,X		; 9E 52 20 ; Store zero to $2052.w,X [Reads: X Index]
	sta ($7F.b,X)		; 81 7F ; Store accumulator ($7F.b,X) [Reads: Accumulator, X Index, Direct Page]
	dec $ED.b		; C6 ED ; Decrement $ED.b [Reads: Direct Page] [Flags: ZN]
	adc [$0A.b],Y		; 77 0A ; Add with carry (long indexed) [$0A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	adc $00E5.w		; 6D E5 00 ; Add $00E5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($A5.b)		; 12 A5 ; OR accumulator with memory (indirect) ($A5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $C7.b,X		; 34 C7 ; Test bits $C7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor [$30.b],Y		; 57 30 ; Exclusive OR accumulator with memory (long indexed) [$30.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $F1.b		; E6 F1 ; Increment $F1.b [Reads: Direct Page] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $C6E5.w		; 20 E5 C6 ; Jump to subroutine at $C6E5.w [Writes: Stack Pointer] [Flow: call]
	cpx $10C6.w		; EC C6 10 ; Compare $10C6.w with X register [Reads: X Index] [Flags: ZNC]
	ldy #$C7.b		; A0 C7 ; Load #$C7.b into Y register [Writes: Y Index] [Flags: ZN]
	eor [$E9.b],Y		; 57 E9 ; Exclusive OR accumulator with memory (long indexed) [$E9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	inc $3FC4.w		; EE C4 3F ; Increment $3FC4.w [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $35.b		; 02 35 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $C7.b,X		; 34 C7 ; Test bits $C7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor [$00.b],Y		; 57 00 ; Exclusive OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $C6.b		; 02 C6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C685.w		; CD 85 C6 ; Compare $C685.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $34C7.w		; 0C C7 34 ; Test and set bits $34C7.w [Reads: Accumulator] [Flags: Z]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	brk $41.b		; 00 41 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $EF.b		; E6 EF ; Increment $EF.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $A2		; F0 A2 ; Branch if equal to $F0, $A2 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $F0, $87		; F0 87 ; Branch if equal to $F0, $87 [Flow: branch]
	cpx $AAE6.w		; EC E6 AA ; Compare $AAE6.w with X register [Reads: X Index] [Flags: ZNC]
	jsl $ECE6E6.l		; 22 E6 E6 EC ; Jump to subroutine long $ECE6E6.l [Writes: Stack Pointer] [Flow: call]
	inc $22.b		; E6 22 ; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	jsl $F4F493.l		; 22 93 F4 F4 ; Jump to subroutine long $F4F493.l [Writes: Stack Pointer] [Flow: call]
	pea $AAAA.w		; F4 AA AA ; Push absolute address $AAAA.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sty $46.b,X		; 94 46 ; Store Y register $46.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	inc $4B.b		; E6 4B ; Increment $4B.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $AA.b,S		; A3 AA ; Load accumulator (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $4B.b,S		; A3 4B ; Load accumulator (stack relative) $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$AA.b],Y		; 57 AA ; Exclusive OR accumulator with memory (long indexed) [$AA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $E6.b		; 46 E6 ; Logical shift right $E6.b [Reads: Direct Page] [Flags: ZNC]
	lda $AA.b,S		; A3 AA ; Load accumulator (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	lda $2277.w		; AD 77 22 ; Load $2277.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx $64A3.w		; EC A3 64 ; Compare $64A3.w with X register [Reads: X Index] [Flags: ZNC]
	ror $2A.b		; 66 2A ; Rotate right $2A.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $54.b		; E6 54 ; Increment $54.b [Reads: Direct Page] [Flags: ZN]
	cpx $2AA3.w		; EC A3 2A ; Compare $2AA3.w with X register [Reads: X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpx $ADE6.w		; EC E6 AD ; Compare $ADE6.w with X register [Reads: X Index] [Flags: ZNC]
	adc [$22.b],Y		; 77 22 ; Add with carry (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $A3.b		; E6 A3 ; Increment $A3.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $4B.b		; E6 4B ; Increment $4B.b [Reads: Direct Page] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $EC4C.w		; 6D 4C EC ; Add $EC4C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx #$5B.b		; A2 5B ; Load #$5B.b into X register [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $65.b		; 64 65 ; Store zero to $65.b
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cpy $A5.b		; C4 A5 ; Compare $A5.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	lda ($11.b,X)		; A1 11 ; Load accumulator ($11.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$E6.b]		; 87 E6 ; Store accumulator (long) [$E6.b] [Reads: Accumulator, Direct Page]
	lsr $76E6.w		; 4E E6 76 ; Logical shift right $76E6.w [Flags: ZNC]
	ldx #$E6.b		; A2 E6 ; Load #$E6.b into X register [Writes: X Index] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $2A.b		; E6 2A ; Increment $2A.b [Reads: Direct Page] [Flags: ZN]
	ldx #$F8.b		; A2 F8 ; Load #$F8.b into X register [Writes: X Index] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	bit $77.b,X		; 34 77 ; Test bits $77.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($0A.b,X)		; 61 0A ; Add with carry ($0A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($E6.b),Y		; 71 E6 ; Add with carry ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $4B.b		; E6 4B ; Increment $4B.b [Reads: Direct Page] [Flags: ZN]
	asl $2A.b		; 06 2A ; Arithmetic shift left $2A.b [Reads: Direct Page] [Flags: ZNC]
	lda $4B.b,S		; A3 4B ; Load accumulator (stack relative) $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and $AA.b		; 25 AA ; Logical AND $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $18, $A3		; 62 18 A3 ; Push effective relative address $62, $18, $A3 [Writes: Stack Pointer]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $4B.b		; E6 4B ; Increment $4B.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor $6A.b,X		; 55 6A ; Exclusive OR accumulator with memory $6A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6A.b,S		; 63 6A ; Add with carry (stack relative) $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $AD.b,S		; A3 AD ; Load accumulator (stack relative) $AD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $1A.b		; E6 1A ; Increment $1A.b [Reads: Direct Page] [Flags: ZN]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx $A34B.w		; EC 4B A3 ; Compare $A34B.w with X register [Reads: X Index] [Flags: ZNC]
	ldx #$AA.b		; A2 AA ; Load #$AA.b into X register [Writes: X Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldx #$26.b		; A2 26 ; Load #$26.b into X register [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $A9AD.w		; AD AD A9 ; Load $A9AD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldy #$A5.b		; A0 A5 ; Load #$A5.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $1A.b,X		; 34 1A ; Test bits $1A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldy #$58.b		; A0 58 ; Load #$58.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp $D5.b,X		; D5 D5 ; Compare accumulator $D5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $11.b		; 04 11 ; Test and set bits $11.b [Reads: Accumulator] [Flags: Z]
	ora ($E6.b),Y		; 11 E6 ; OR accumulator with memory ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $4E.b		; E6 4E ; Increment $4E.b [Reads: Direct Page] [Flags: ZN]
	eor $AA22.w		; 4D 22 AA ; Exclusive OR $AA22.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4F44.w		; 4E 44 4F ; Logical shift right $4F44.w [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cmp $47.b,X		; D5 47 ; Compare accumulator $47.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $0AEF.w,Y		; F9 EF 0A ; Subtract with carry $0AEF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $F9.b		; 66 F9 ; Rotate right $F9.b [Reads: Direct Page] [Flags: ZNC]
	sbc $4E4E.w,Y		; F9 4E 4E ; Subtract with carry $4E4E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $AA.b		; 66 AA ; Rotate right $AA.b [Reads: Direct Page] [Flags: ZNC]
	eor ($4F.b,S),Y		; 53 4F ; XOR accumulator (stack relative indirect indexed) ($4F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $A5A4E8.l		; 22 E8 A4 A5 ; Jump to subroutine long $A5A4E8.l [Writes: Stack Pointer] [Flow: call]
	lda $60.b		; A5 60 ; Load $60.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($77.b),Y		; 11 77 ; OR accumulator with memory ($77.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $59.b		; 45 59 ; Exclusive OR $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $E6.b		; 46 E6 ; Logical shift right $E6.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx #$AD.b		; A2 AD ; Load #$AD.b into X register [Writes: X Index] [Flags: ZN]
	eor ($35.b,X)		; 41 35 ; Exclusive OR accumulator with memory ($35.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0A.b,S		; A3 0A ; Load accumulator (stack relative) $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $F845.w		; 6D 45 F8 ; Add $F845.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ldx $A3.b		; A6 A3 ; Load $A3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sbc $34A5.w,Y		; F9 A5 34 ; Subtract with carry $34A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $AA12A3.l,X		; 5F A3 12 AA ; Exclusive OR accumulator with memory (long,X) $AA12A3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora [$FA.b]		; 07 FA ; OR accumulator with memory (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $9E79.w,Y		; 79 79 9E ; Add $9E79.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($30.b,X)		; 61 30 ; Add with carry ($30.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($A5.b,S),Y		; 53 A5 ; XOR accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $A135.w		; AC 35 A1 ; Load $A135.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $45		; 70 45 ; Branch if overflow set to $70, $45 [Flow: branch]
	stz $A001.w,X		; 9E 01 A0 ; Store zero to $A001.w,X [Reads: X Index]
	ldy #$F4.b		; A0 F4 ; Load #$F4.b into Y register [Writes: Y Index] [Flags: ZN]
	inc $A3.b,X		; F6 A3 ; Increment memory $A3.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp ($6C45.w,X)		; 7C 45 6C ; Jump indirect indexed to ($6C45.w,X) [Reads: X Index] [Flow: jump]
	ror $7A.b,X		; 76 7A ; Rotate right $7A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$48.b],Y		; 77 48 ; Add with carry (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $A5.b,X		; 35 A5 ; Logical AND $A5.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$A0.b]		; 07 A0 ; OR accumulator with memory (long) [$A0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$AD.b],Y		; 17 AD ; OR accumulator with memory (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rep #$C4		; C2 C4 ; Reset processor status bits #$C4 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	dec $01.b		; C6 01 ; Decrement $01.b [Reads: Direct Page] [Flags: ZN]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $11.b		; 66 11 ; Rotate right $11.b [Reads: Direct Page] [Flags: ZNC]
	ora ($7C.b),Y		; 11 7C ; OR accumulator with memory ($7C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $65.b		; C4 65 ; Compare $65.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	adc $1410.w		; 6D 10 14 ; Add $1410.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $71.b,X		; 34 71 ; Test bits $71.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($34.b),Y		; 71 34 ; Add with carry ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $EC		; 42 EC ; Reserved instruction
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $71.b		; E6 71 ; Increment $71.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $20.b,X		; 36 20 ; Rotate left $20.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $34.b		; 86 34 ; Store X register to $34.b [Reads: X Index]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	and ($0B.b,X)		; 21 0B ; Logical AND ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $E894.w,X		; 1D 94 E8 ; OR accumulator with memory $E894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sbc $39.b,S		; E3 39 ; Subtract stack-relative $39.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	rol $86.b,X		; 36 86 ; Rotate left $86.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta ($93.b,X)		; 81 93 ; Store accumulator ($93.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $85.b,S		; E3 85 ; Subtract stack-relative $85.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $34.b,S		; E3 34 ; Subtract stack-relative $34.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $82, $3D, $86		; 82 3D 86 ; Branch always long to $82, $3D, $86 [Flow: branch]
	ora ($21.b,S),Y		; 13 21 ; OR accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $ECFE.w,X		; 7E FE EC ; Rotate right $ECFE.w,X [Reads: X Index] [Flags: ZNC]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $F2.b,X		; 76 F2 ; Rotate right $F2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $0034.w,X		; 7E 34 00 ; Rotate right $0034.w,X [Reads: X Index] [Flags: ZNC]
	and ($1E.b,S),Y		; 33 1E ; AND accumulator (stack relative indirect indexed) ($1E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FE8.w,X		; 9D E8 7F ; Store accumulator to $7FE8.w,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $9B.b,X		; 94 9B ; Store Y register $9B.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora $DADA.w		; 0D DA DA ; Logical OR $DADA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ror $35.b,X		; 76 35 ; Rotate right $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $9C.b,X		; 76 9C ; Rotate right $9C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($34.b,X)		; E1 34 ; Subtract with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $719A.w		; 9C 9A 71 ; Store zero to $719A.w
	adc $340000.l,X		; 7F 00 00 34 ; Add long $340000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $00.b,X		; 76 00 ; Rotate right $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $95.b,X		; 35 95 ; Logical AND $95.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0000.w,Y		; D9 00 00 ; Compare accumulator $0000.w,Y [Reads: Y Index] [Flags: ZNC]
	adc ($5D.b),Y		; 71 5D ; Add with carry ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $0134.w,X		; 5E 34 01 ; Logical shift right $0134.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $62		; 10 62 ; Branch if plus to $10, $62 [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $12.b,X		; 35 12 ; Logical AND $12.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $71D47B.l		; 22 7B D4 71 ; Jump to subroutine long $71D47B.l [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $9F.b,X		; 76 9F ; Rotate right $9F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $A5.b		; A4 A5 ; Load $A5.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr $0600.w		; 20 00 06 ; Jump to subroutine at $0600.w [Writes: Stack Pointer] [Flow: call]
	adc ($FF.b),Y		; 71 FF ; Add with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($1120.w,X)		; 7C 20 11 ; Jump indirect indexed to ($1120.w,X) [Reads: X Index] [Flow: jump]
	bit $A5.b,X		; 34 A5 ; Test bits $A5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jmp $110068.l		; 5C 68 00 11 ; Jump long to $110068.l [Flow: jump]
	ora [$A5.b],Y		; 17 A5 ; OR accumulator with memory (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$A4.b]		; A7 A4 ; Load accumulator (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $5C00.w		; 20 00 5C ; Jump to subroutine at $5C00.w [Writes: Stack Pointer] [Flow: call]
	adc $C6.b		; 65 C6 ; Add $C6.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rol $E1.b,X		; 36 E1 ; Rotate left $E1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	cpy $34.b		; C4 34 ; Compare $34.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	stz $1034.w,X		; 9E 34 10 ; Store zero to $1034.w,X [Reads: X Index]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $A3.b		; C6 A3 ; Decrement $A3.b [Reads: Direct Page] [Flags: ZN]
	and [$10.b]		; 27 10 ; AND accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $0D37.w		; AD 37 0D ; Load $0D37.w into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($34.b,X)		; E1 34 ; Subtract with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $120037.l		; 5C 37 00 12 ; Jump long to $120037.l [Flow: jump]
	lsr $3432.w,X		; 5E 32 34 ; Logical shift right $3432.w,X [Reads: X Index] [Flags: ZNC]
	bit $12.b,X		; 34 12 ; Test bits $12.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7C.b,S		; A3 7C ; Load accumulator (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	bit $FA.b,X		; 34 FA ; Test bits $FA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $9E.b		; C6 9E ; Decrement $9E.b [Reads: Direct Page] [Flags: ZN]
	cmp $0210.w		; CD 10 02 ; Compare $0210.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $0220.w		; AD 20 02 ; Load $0220.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $5530.w		; 20 30 55 ; Jump to subroutine at $5530.w [Writes: Stack Pointer] [Flow: call]
	stz $207C.w,X		; 9E 7C 20 ; Store zero to $207C.w,X [Reads: X Index]
	sbc $365101.l,X		; FF 01 51 36 ; Subtract with carry (long,X) $365101.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $C6.b,S		; A3 C6 ; Load accumulator (stack relative) $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	bit $C4.b,X		; 34 C4 ; Test bits $C4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr ($1110.w,X)		; FC 10 11 ; Jump to subroutine indirect indexed ($1110.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $A9.b		; 65 A9 ; Add $A9.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $85.b		; A5 85 ; Load $85.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($C6.b),Y		; 31 C6 ; AND accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $EA.b,X		; 34 EA ; Test bits $EA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	jsl $D305A5.l		; 22 A5 05 D3 ; Jump to subroutine long $D305A5.l [Writes: Stack Pointer] [Flow: call]
	cpy $1B.b		; C4 1B ; Compare $1B.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and ($A5.b,X)		; 21 A5 ; Logical AND ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $0739.w		; 2D 39 07 ; Logical AND $0739.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b),Y		; 11 1B ; OR accumulator with memory ($1B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($4E.b,S),Y		; D3 4E ; Compare accumulator (stack relative indirect indexed) ($4E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $21.b,X		; 34 21 ; Test bits $21.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	cmp #$0841.w		; C9 41 08 ; Compare #$0841.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $1B		; 30 1B ; Branch if minus to $30, $1B [Flow: branch]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora #$1097.w		; 09 97 10 ; Logical OR #$1097.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($1B.b,S),Y		; B3 1B ; Load accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $22CD.w		; CD CD 22 ; Compare $22CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $C524CE.l		; 22 CE 24 C5 ; Jump to subroutine long $C524CE.l [Writes: Stack Pointer] [Flow: call]
	cmp $2221.w		; CD 21 22 ; Compare $2221.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $2590.w		; CD 90 25 ; Compare $2590.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($01.b,S),Y		; F3 01 ; Subtract with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($9F.b,X)		; 01 9F ; Logical OR ($9F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $FF.b,X		; 34 FF ; Test bits $FF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($A8.b),Y		; 11 A8 ; OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $34.b		; 65 34 ; Add $34.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$21.b]		; C7 21 ; Compare accumulator (long) [$21.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$3453]		; DC 53 34 ; Jump long indirect [$3453] [Flow: jump]
	.db $50, $10		; 50 10 ; Branch if overflow clear to $50, $10 [Flow: branch]
	sbc ($C8.b,X)		; E1 C8 ; Subtract with carry ($C8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9E.b,S		; E3 9E ; Subtract stack-relative $9E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $E17F.w,Y		; 79 7F E1 ; Add $E17F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($10.b,X)		; E1 10 ; Subtract with carry ($10.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	bit $D9.b,X		; 34 D9 ; Test bits $D9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $78.b,Y		; B6 78 ; Load X register $78.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp $3020.w,Y		; D9 20 30 ; Compare accumulator $3020.w,Y [Reads: Y Index] [Flags: ZNC]
	ora $84.b		; 05 84 ; Logical OR $84.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $867E.w,X		; 7E 7E 86 ; Rotate right $867E.w,X [Reads: X Index] [Flags: ZNC]
	and ($30.b,S),Y		; 33 30 ; AND accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $D5E6CD.l,X		; 3F CD E6 D5 ; AND accumulator with memory (long,X) $D5E6CD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $002402.l		; 22 02 24 00 ; Jump to subroutine long $002402.l [Writes: Stack Pointer] [Flow: call]
	and [$28.b]		; 27 28 ; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($33.b,S),Y		; 13 33 ; OR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $7E24.w		; CE 24 7E ; Decrement $7E24.w [Flags: ZN]
	cpy $21.b		; C4 21 ; Compare $21.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $7EAD.w		; AD AD 7E ; Load $7EAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $63.b,X		; 36 63 ; Rotate left $63.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$58.b]		; 07 58 ; OR accumulator with memory (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $AA.b		; 24 AA ; Test bits $AA.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $6A.b		; C6 6A ; Decrement $6A.b [Reads: Direct Page] [Flags: ZN]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor ($11.b),Y		; 51 11 ; Exclusive OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $5C.b,X		; F5 5C ; Subtract $5C.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cop $71.b		; 02 71 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc $E66A.w		; EE 6A E6 ; Increment $E66A.w [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $6A.b,Y		; 96 6A ; Store X register $6A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	eor ($32.b),Y		; 51 32 ; Exclusive OR accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$6A.b],Y		; 97 6A ; Store accumulator (long indexed) [$6A.b],Y [Reads: Accumulator, Direct Page, Y Index]
	bit $FD.b,X		; 34 FD ; Test bits $FD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $9C.b		; E6 9C ; Increment $9C.b [Reads: Direct Page] [Flags: ZN]
	asl $65.b		; 06 65 ; Arithmetic shift left $65.b [Reads: Direct Page] [Flags: ZNC]
	and $11.b		; 25 11 ; Logical AND $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$34.b]		; 07 34 ; OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($B6.b,S),Y		; F3 B6 ; Subtract with carry (stack relative indirect indexed) ($B6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	inc $B9.b		; E6 B9 ; Increment $B9.b [Reads: Direct Page] [Flags: ZN]
	and $5029C6.l,X		; 3F C6 29 50 ; AND accumulator with memory (long,X) $5029C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pea $CCE6.w		; F4 E6 CC ; Push absolute address $CCE6.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $01.b		; C6 01 ; Decrement $01.b [Reads: Direct Page] [Flags: ZN]
	jsr $CCC6.w		; 20 C6 CC ; Jump to subroutine at $CCC6.w [Writes: Stack Pointer] [Flow: call]
	inc $72.b		; E6 72 ; Increment $72.b [Reads: Direct Page] [Flags: ZN]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $AB.b		; A5 AB ; Load $AB.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $06B1.w,Y		; F9 B1 06 ; Subtract with carry $06B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $A5		; F0 A5 ; Branch if equal to $F0, $A5 [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($11.b,X)		; 61 11 ; Add with carry ($11.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $FC.b		; A6 FC ; Load $FC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	bit $E1.b,X		; 34 E1 ; Test bits $E1.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($CE.b,X)		; E1 CE ; Subtract with carry ($CE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $7D.b		; C6 7D ; Decrement $7D.b [Reads: Direct Page] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	adc ($07.b),Y		; 71 07 ; Add with carry ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0C.b),Y		; 11 0C ; OR accumulator with memory ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $7D.b		; 66 7D ; Rotate right $7D.b [Reads: Direct Page] [Flags: ZNC]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: ZN]
	.db $70, $C6		; 70 C6 ; Branch if overflow set to $70, $C6 [Flow: branch]
	tsb $0D53.w		; 0C 53 0D ; Test and set bits $0D53.w [Reads: Accumulator] [Flags: Z]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	trb $11C6.w		; 1C C6 11 ; Test and reset bits $11C6.w [Reads: Accumulator] [Flags: Z]
	jsr $1042.w		; 20 42 10 ; Jump to subroutine at $1042.w [Writes: Stack Pointer] [Flow: call]
	ora ($E6.b),Y		; 11 E6 ; OR accumulator with memory ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	lda ($29.b)		; B2 29 ; Load accumulator (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C7.b)		; 12 C7 ; OR accumulator with memory (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $3B.b		; 14 3B ; Test and reset bits $3B.b [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp [$12.b]		; C7 12 ; Compare accumulator (long) [$12.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsl $1C1A29.l		; 22 29 1A 1C ; Jump to subroutine long $1C1A29.l [Writes: Stack Pointer] [Flow: call]
	cmp [$3B.b]		; C7 3B ; Compare accumulator (long) [$3B.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($1E.b)		; B2 1E ; Load accumulator (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $BB20C7.l,X		; 1F C7 20 BB ; Logical OR long $BB20C7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $27.b		; 25 27 ; Logical AND $27.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$BBC7.w		; 29 C7 BB ; Logical AND #$BBC7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($2C.b)		; B2 2C ; Load accumulator (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $52BB.w		; CD BB 52 ; Compare $52BB.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp [$AB.b]		; C7 AB ; Compare accumulator (long) [$AB.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp $B228.w,Y		; D9 28 B2 ; Compare accumulator $B228.w,Y [Reads: Y Index] [Flags: ZNC]
	rol $38.b,X		; 36 38 ; Rotate left $38.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp [$0F.b],Y		; D7 0F ; Compare accumulator (long indexed) [$0F.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	eor $45.b,S		; 43 45 ; Exclusive OR accumulator with stack relative $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $1EC7BB.l		; 22 BB C7 1E ; Jump to subroutine long $1EC7BB.l [Writes: Stack Pointer] [Flow: call]
	trb $2B1A.w		; 1C 1A 2B ; Test and reset bits $2B1A.w [Reads: Accumulator] [Flags: Z]
	and $47.b,S		; 23 47 ; AND accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $D2CD.w		; CD CD D2 ; Compare $D2CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($22.b)		; B2 22 ; Load accumulator (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $BB.b,X		; 55 BB ; Exclusive OR accumulator with memory $BB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor [$C7.b]		; 47 C7 ; Exclusive OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $3B.b,X		; 56 3B ; Logical shift right $3B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jmp $C61E5E.l		; 5C 5E 1E C6 ; Jump long to $C61E5E.l [Flow: jump]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $565A.w		; 20 5A 56 ; Jump to subroutine at $565A.w [Writes: Stack Pointer] [Flow: call]
	.db $62, $63, $7B		; 62 63 7B ; Push effective relative address $62, $63, $7B [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($66.b)		; D2 66 ; Compare accumulator (indirect) ($66.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $2129.w,X		; 1E 29 21 ; Arithmetic shift left $2129.w,X [Reads: X Index] [Flags: ZNC]
	and $C7.b,S		; 23 C7 ; AND accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$6A.b]		; C7 6A ; Compare accumulator (long) [$6A.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jmp ($BB22.w)		; 6C 22 BB ; Jump indirect to ($BB22.w) [Flow: jump]
	ror $C670.w		; 6E 70 C6 ; Rotate right $C670.w [Flags: ZNC]
	adc ($BB.b),Y		; 71 BB ; Add with carry ($BB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora $AB.b,X		; 15 AB ; OR accumulator with memory $AB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx #$1B.b		; A2 1B ; Load #$1B.b into X register [Writes: X Index] [Flags: ZN]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	dec $1F.b		; C6 1F ; Decrement $1F.b [Reads: Direct Page] [Flags: ZN]
	and #$33B2.w		; 29 B2 33 ; Logical AND #$33B2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $75.b,X		; 15 75 ; OR accumulator with memory $75.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($3F.b)		; D2 3F ; Compare accumulator (indirect) ($3F.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	and $20.b		; 25 20 ; Logical AND $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rol $2644.w,X		; 3E 44 26 ; Rotate left $2644.w,X [Reads: X Index] [Flags: ZNC]
	lda $39C7.w,Y		; B9 C7 39 ; Load $39C7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsr $11DF.w		; 20 DF 11 ; Jump to subroutine at $11DF.w [Writes: Stack Pointer] [Flow: call]
	stx $EF.b,Y		; 96 EF ; Store X register $EF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	eor ($CD.b)		; [PATTERN: Memory clearing operation] 52 CD ; Exclusive OR accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $74.b,X		; 74 74 ; Store zero to $74.b,X [Reads: X Index]
	inc $2B.b,X		; F6 2B ; Increment memory $2B.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lda ($3E.b)		; B2 3E ; Load accumulator (indirect) ($3E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $EF.b,X		; 74 EF ; Store zero to $EF.b,X [Reads: X Index]
	stz $BB.b,X		; 74 BB ; Store zero to $BB.b,X [Reads: X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc $9EC874.l		; EF 74 C8 9E ; Subtract with carry (long) $9EC874.l [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$DD.b]		; C7 DD ; Compare accumulator (long) [$DD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$B2.b]		; C7 B2 ; Compare accumulator (long) [$B2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $684636.l		; 22 36 46 68 ; Jump to subroutine long $684636.l [Writes: Stack Pointer] [Flow: call]
	and $BBBB.w,Y		; 39 BB BB ; AND accumulator with memory $BBBB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp [$E6.b]		; C7 E6 ; Compare accumulator (long) [$E6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	jsl $7E20E1.l		; 22 E1 20 7E ; Jump to subroutine long $7E20E1.l [Writes: Stack Pointer] [Flow: call]
	adc $13BB23.l,X		; 7F 23 BB 13 ; Add long $13BB23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $E4A2.w		; F4 A2 E4 ; Push absolute address $E4A2.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lda ($62.b)		; B2 62 ; Load accumulator (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $87.b,S		; 83 87 ; Store accumulator (stack relative) $87.b,S [Reads: Accumulator, Stack Pointer]
	ora $B2B3C7.l		; 0F C7 B3 B2 ; OR accumulator with memory (long) $B2B3C7.l [Writes: Accumulator] [Flags: ZN]
	cmp [$74.b]		; C7 74 ; Compare accumulator (long) [$74.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $34.b		; C5 34 ; Compare $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $0020.w		; CE 20 00 ; Decrement $0020.w [Flags: ZN]
	jsr $3686.w		; 20 86 36 ; Jump to subroutine at $3686.w [Writes: Stack Pointer] [Flow: call]
	cmp $51.b,X		; D5 51 ; Compare accumulator $51.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($C6.b,X)		; 01 C6 ; Logical OR ($C6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $83.b		; 85 83 ; Store accumulator to $83.b [Reads: Accumulator]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Accumulator, Stack Pointer]
	ora ($86.b),Y		; 11 86 ; OR accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $7EDB.w,X		; 7E DB 7E ; Rotate right $7EDB.w,X [Reads: X Index] [Flags: ZNC]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $A3.b,S		; 83 A3 ; Store accumulator (stack relative) $A3.b,S [Reads: Accumulator, Stack Pointer]
	dec $7C.b		; C6 7C ; Decrement $7C.b [Reads: Direct Page] [Flags: ZN]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	sta [$83.b]		; 87 83 ; Store accumulator (long) [$83.b] [Reads: Accumulator, Direct Page]
	bit $A3.b,X		; 34 A3 ; Test bits $A3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	dec $6A.b		; C6 6A ; Decrement $6A.b [Reads: Direct Page] [Flags: ZN]
	sta [$7E.b]		; 87 7E ; Store accumulator (long) [$7E.b] [Reads: Accumulator, Direct Page]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp ($8434.w,X)		; 7C 34 84 ; Jump indirect indexed to ($8434.w,X) [Reads: X Index] [Flow: jump]
	bit $60.b,X		; 34 60 ; Test bits $60.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta [$7E.b]		; 87 7E ; Store accumulator (long) [$7E.b] [Reads: Accumulator, Direct Page]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $0487.w,X		; 7E 87 04 ; Rotate right $0487.w,X [Reads: X Index] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol $B2.b,X		; 36 B2 ; Rotate left $B2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $0486.w		; 1C 86 04 ; Test and reset bits $0486.w [Reads: Accumulator] [Flags: Z]
	inc $21.b,X		; F6 21 ; Increment memory $21.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lda ($F6.b)		; B2 F6 ; Load accumulator (indirect) ($F6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $FD.b,X		; F6 FD ; Increment memory $FD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ldx $22.b		; A6 22 ; Load $22.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $10, $7E		; 10 7E ; Branch if plus to $10, $7E [Flow: branch]
	ldx #$CD.b		; A2 CD ; Load #$CD.b into X register [Writes: X Index] [Flags: ZN]
	sbc $2236.w,Y		; F9 36 22 ; Subtract with carry $2236.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C2CD.w,Y		; F9 CD C2 ; Subtract with carry $C2CD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$22.b]		; 67 22 ; Add with carry (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($F9.b),Y		; 11 F9 ; OR accumulator with memory ($F9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $58.b,X		; D6 58 ; Decrement memory $58.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $CDD711.l		; 22 11 D7 CD ; Jump to subroutine long $CDD711.l [Writes: Stack Pointer] [Flow: call]
	cmp $22D9.w,Y		; D9 D9 22 ; Compare accumulator $22D9.w,Y [Reads: Y Index] [Flags: ZNC]
	jsl $D9D706.l		; 22 06 D7 D9 ; Jump to subroutine long $D9D706.l [Writes: Stack Pointer] [Flow: call]
	cmp ($B2.b)		; D2 B2 ; Compare accumulator (indirect) ($B2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $6AC7C7.l		; 22 C7 C7 6A ; Jump to subroutine long $6AC7C7.l [Writes: Stack Pointer] [Flow: call]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta [$7E.b]		; 87 7E ; Store accumulator (long) [$7E.b] [Reads: Accumulator, Direct Page]
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda ($22.b,S),Y		; B3 22 ; Load accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $068A.w		; 8D 8A 06 ; Store accumulator to $068A.w [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $C8.b		; 05 C8 ; Logical OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$B282.w		; C9 82 B2 ; Compare #$B282.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol $8F.b		; 26 8F ; Rotate left $8F.b [Reads: Direct Page] [Flags: ZNC]
	ora [$34.b]		; 07 34 ; OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $B1.b		; 06 B1 ; Arithmetic shift left $B1.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ror $347E.w,X		; 7E 7E 34 ; Rotate right $347E.w,X [Reads: X Index] [Flags: ZNC]
	and $30.b,S		; 23 30 ; AND accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	dec $6A.b		; C6 6A ; Decrement $6A.b [Reads: Direct Page] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $7E.b		; C6 7E ; Decrement $7E.b [Reads: Direct Page] [Flags: ZN]
	sta $60.b,S		; 83 60 ; Store accumulator (stack relative) $60.b,S [Reads: Accumulator, Stack Pointer]
	ora ($D1.b),Y		; 11 D1 ; OR accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $C7.b,S		; 83 C7 ; Store accumulator (stack relative) $C7.b,S [Reads: Accumulator, Stack Pointer]
	stx $07.b		; 86 07 ; Store X register to $07.b [Reads: X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $7D.b,S		; E3 7D ; Subtract stack-relative $7D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp [$03.b]		; C7 03 ; Compare accumulator (long) [$03.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
.INDEX 8
	sep #$36		; E2 36
	sta $0B30.w		; 8D 30 0B ; Store accumulator to $0B30.w [Reads: Accumulator]
	bit #$C7.b		; 89 C7 ; Test bits #$C7.b with accumulator [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol $B2.b,X		; 36 B2 ; Rotate left $B2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr $DA7E.w		; 20 7E DA ; Jump to subroutine at $DA7E.w [Writes: Stack Pointer] [Flow: call]
	stx $7E.b		; 86 7E ; Store X register to $7E.b [Reads: X Index]
	and ($63.b)		; 32 63 ; AND accumulator with memory (indirect) ($63.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $34C6.w,X		; 7E C6 34 ; Rotate right $34C6.w,X [Reads: X Index] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($02.b)		; 32 02 ; AND accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$7E.b]		; 87 7E ; Store accumulator (long) [$7E.b] [Reads: Accumulator, Direct Page]
	ror $635C.w,X		; 7E 5C 63 ; Rotate right $635C.w,X [Reads: X Index] [Flags: ZNC]
	and ($C5.b),Y		; 31 C5 ; AND accumulator with memory ($C5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $7E.b,X		; D6 7E ; Decrement memory $7E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ror $3302.w,X		; 7E 02 33 ; Rotate right $3302.w,X [Reads: X Index] [Flags: ZNC]
	ror $DBC8.w,X		; 7E C8 DB ; Rotate right $DBC8.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($32.b,S),Y		; D3 32 ; Compare accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	jsl $E5067E.l		; 22 7E 06 E5 ; Jump to subroutine long $E5067E.l [Writes: Stack Pointer] [Flow: call]
	cmp $1231.w,Y		; D9 31 12 ; Compare accumulator $1231.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp ($7E.b)		; D2 7E ; Compare accumulator (indirect) ($7E.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $D3.b,X		; 34 D3 ; Test bits $D3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $02.b,S		; 23 02 ; AND accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($D3.b,X)		; 81 D3 ; Store accumulator ($D3.b,X) [Reads: Accumulator, X Index, Direct Page]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: ZN]
	.db $62, $01, $C7		; 62 01 C7 ; Push effective relative address $62, $01, $C7 [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ror $2322.w,X		; 7E 22 23 ; Rotate right $2322.w,X [Reads: X Index] [Flags: ZNC]
	sbc #$EA.b		; E9 EA ; Subtract #$EA.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp ($83.b,S),Y		; D3 83 ; Compare accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	jsl $987E23.l		; 22 23 7E 98 ; Jump to subroutine long $987E23.l [Writes: Stack Pointer] [Flow: call]
	bit $86.b,X		; 34 86 ; Test bits $86.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $87.b		; 06 87 ; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZNC]
	sta $3A.b,S		; 83 3A ; Store accumulator (stack relative) $3A.b,S [Reads: Accumulator, Stack Pointer]
	cmp $63.b,X		; D5 63 ; Compare accumulator $63.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr $897E.w		; 20 7E 89 ; Jump to subroutine at $897E.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3B.b,S		; E3 3B ; Subtract stack-relative $3B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $B0, $4B		; B0 4B ; Branch if carry set to $B0, $4B [Flow: branch]
	lsr $7D.b,X		; 56 7D ; Logical shift right $7D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($71.b),Y		; 11 71 ; OR accumulator with memory ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $F46A.w		; CD 6A F4 ; Compare $F46A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	inc $21.b,X		; F6 21 ; Increment memory $21.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $9DFB.w		; CD FB 9D ; Compare $9DFB.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($23.b)		; B2 23 ; Load accumulator (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CD9D.w		; CD 9D CD ; Compare $CD9D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $2223.w		; CD 23 22 ; Compare $2223.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $DAC7.w		; CD C7 DA ; Compare $DAC7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc ($22.b),Y		; 71 22 ; Add with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $6AD6.w		; 20 D6 6A ; Jump to subroutine at $6AD6.w [Writes: Stack Pointer] [Flow: call]
	cmp ($DA.b)		; D2 DA ; Compare accumulator (indirect) ($DA.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $C7.b,S		; E3 C7 ; Subtract stack-relative $C7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $D6CD.w,Y		; D9 CD D6 ; Compare accumulator $D6CD.w,Y [Reads: Y Index] [Flags: ZNC]
	adc $2122.w		; 6D 22 21 ; Add $2122.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $D2EFA2.l,X		; DF A2 EF D2 ; Compare accumulator (long,X) $D2EFA2.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsl $DAC7D2.l		; 22 D2 C7 DA ; Jump to subroutine long $DAC7D2.l [Writes: Stack Pointer] [Flow: call]
	pei ($22.b)		; D4 22 ; Push effective indirect address ($22.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $A0D2F6.l		; 22 F6 D2 A0 ; Jump to subroutine long $A0D2F6.l [Writes: Stack Pointer] [Flow: call]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda [$A0.b]		; A7 A0 ; Load accumulator (long) [$A0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$DD.b]		; C7 DD ; Compare accumulator (long) [$DD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $9ECDA0.l		; 22 A0 CD 9E ; Jump to subroutine long $9ECDA0.l [Writes: Stack Pointer] [Flow: call]
	ldy $BBB2.w		; AC B2 BB ; Load $BBB2.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A5.b		; A9 A5 ; Load #$A5.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx $C7C7.w		; AE C7 C7 ; Load $C7C7.w into X register [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $B6B5DF.l		; 22 DF B5 B6 ; Jump to subroutine long $B6B5DF.l [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	lda [$BB.b],Y		; B7 BB ; Load accumulator (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($BC.b,S),Y		; B3 BC ; Load accumulator (stack relative indirect indexed) ($BC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $22BBD2.l		; EF D2 BB 22 ; Subtract with carry (long) $22BBD2.l [Writes: Accumulator] [Flags: ZVNC]
	lda $B7B8.w,X		; BD B8 B7 ; Load $B7B8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($BB.b,X)		; C1 BB ; Compare accumulator ($BB.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda [$B3.b],Y		; B7 B3 ; Load accumulator (long indexed) [$B3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A5.b,S		; C3 A5 ; Compare accumulator (stack relative) $A5.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $B6C6.w,Y		; B9 C6 B6 ; Load $B6C6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$C1.b],Y		; B7 C1 ; Load accumulator (long indexed) [$C1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp [$C8.b]		; C7 C8 ; Compare accumulator (long) [$C8.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($B7.b,X)		; C1 B7 ; Compare accumulator ($B7.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($C7.b,S),Y		; B3 C7 ; Load accumulator (stack relative indirect indexed) ($C7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($AC.b)		; D2 AC ; Compare accumulator (indirect) ($AC.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($2B.b)		; B2 2B ; Load accumulator (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $C8.b,Y		; B6 C8 ; Load X register $C8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $BB		; D0 BB ; Branch if not equal to $D0, $BB [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($C8.b)		; D2 C8 ; Compare accumulator (indirect) ($C8.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$BB.b		; C9 BB ; Compare #$BB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($A0.b,S),Y		; B3 A0 ; Load accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $B5.b		; C6 B5 ; Decrement $B5.b [Reads: Direct Page] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda ($A9.b,S),Y		; B3 A9 ; Load accumulator (stack relative indirect indexed) ($A9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$AA.b		; A9 AA ; Load #$AA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$C2.b		; A9 C2 ; Load #$C2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $21BB53.l		; EF 53 BB 21 ; Subtract with carry (long) $21BB53.l [Writes: Accumulator] [Flags: ZVNC]
	jsr $CF20.w		; 20 20 CF ; Jump to subroutine at $CF20.w [Writes: Stack Pointer] [Flow: call]
	inc $0155.w		; EE 55 01 ; Increment $0155.w [Flags: ZN]
	jsr $83E0.w		; 20 E0 83 ; Jump to subroutine at $83E0.w [Writes: Stack Pointer] [Flow: call]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $50, $31		; 50 31 ; Branch if overflow clear to $50, $31 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $D4.b,X		; 34 D4 ; Test bits $D4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8A8934.l		; 0F 34 89 8A ; OR accumulator with memory (long) $8A8934.l [Writes: Accumulator] [Flags: ZN]
	jsr $71BB.w		; 20 BB 71 ; Jump to subroutine at $71BB.w [Writes: Stack Pointer] [Flow: call]
	dec $6A.b		; C6 6A ; Decrement $6A.b [Reads: Direct Page] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $89		; 10 89 ; Branch if plus to $10, $89 [Flow: branch]
	stx $A3.b,Y		; 96 A3 ; Store X register $A3.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($76.b,X)		; 01 76 ; Logical OR ($76.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stz $209F.w,X		; 9E 9F 20 ; Store zero to $209F.w,X [Reads: X Index]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	and $2087.w		; 2D 87 20 ; Logical AND $2087.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora [$21.b],Y		; 17 21 ; OR accumulator with memory (long indexed) [$21.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $C65C.w		; CD 5C C6 ; Compare $C65C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $27.b		; 04 27 ; Test and set bits $27.b [Reads: Accumulator] [Flags: Z]
	ora $C8.b,S		; 03 C8 ; OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $5A.b		; E6 5A ; Increment $5A.b [Reads: Direct Page] [Flags: ZN]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $3A.b,X		; D5 3A ; Compare accumulator $3A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $2270.w,X		; FE 70 22 ; Increment memory $2270.w,X [Reads: X Index] [Flags: ZN]
	adc $612D16.l,X		; 7F 16 2D 61 ; Add long $612D16.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($11.b,S),Y		; 13 11 ; OR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $2733.w		; 8D 33 27 ; Store accumulator to $2733.w [Reads: Accumulator]
	cmp $CD.b		; C5 CD ; Compare $CD.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc ($22.b,X)		; E1 22 ; Subtract with carry ($22.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sta $F6EF.w		; 8D EF F6 ; Store accumulator to $F6EF.w [Reads: Accumulator]
	cmp [$72.b]		; C7 72 ; Compare accumulator (long) [$72.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $42C6CD.l		; 22 CD C6 42 ; Jump to subroutine long $42C6CD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $C756.w		; 20 56 C7 ; Jump to subroutine at $C756.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	inc $C6.b		; E6 C6 ; Increment $C6.b [Reads: Direct Page] [Flags: ZN]
	jsl $C7C720.l		; 22 20 C7 C7 ; Jump to subroutine long $C7C720.l [Writes: Stack Pointer] [Flow: call]
	cmp $22E6.w		; CD E6 22 ; Compare $22E6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $C745C7.l		; 22 C7 45 C7 ; Jump to subroutine long $C745C7.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$60.b		; 29 60 ; Logical AND #$60.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $C7.b,X		; 15 C7 ; OR accumulator with memory $C7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$B2.b],Y		; 37 B2 ; AND accumulator with memory (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $42, $15		; 42 15 ; Reserved instruction
	trb $65.b		; 14 65 ; Test and reset bits $65.b [Reads: Accumulator] [Flags: Z]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and [$5B.b],Y		; 37 5B ; AND accumulator with memory (long indexed) [$5B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $78DAB1.l		; 22 B1 DA 78 ; Jump to subroutine long $78DAB1.l [Writes: Stack Pointer] [Flow: call]
	ora $B221DF.l		; 0F DF 21 B2 ; OR accumulator with memory (long) $B221DF.l [Writes: Accumulator] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $12.b		; E6 12 ; Increment $12.b [Reads: Direct Page] [Flags: ZN]
	jsl $E9C72B.l		; 22 2B C7 E9 ; Jump to subroutine long $E9C72B.l [Writes: Stack Pointer] [Flow: call]
	trb $2B29.w		; 1C 29 2B ; Test and reset bits $2B29.w [Reads: Accumulator] [Flags: Z]
	and $46.b,S		; 23 46 ; AND accumulator with stack relative $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$EB.b]		; C7 EB ; Compare accumulator (long) [$EB.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $B3B2.w,Y		; 19 B2 B3 ; OR accumulator with memory $B3B2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$68.b]		; C7 68 ; Compare accumulator (long) [$68.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsl $684620.l		; 22 20 46 68 ; Jump to subroutine long $684620.l [Writes: Stack Pointer] [Flow: call]
	adc ($3B.b),Y		; 71 3B ; Add with carry ($3B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $71AA.w		; 20 AA 71 ; Jump to subroutine at $71AA.w [Writes: Stack Pointer] [Flow: call]
	adc [$30.b]		; 67 30 ; Add with carry (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$C7.b],Y		; 17 C7 ; OR accumulator with memory (long indexed) [$C7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsl $96682B.l		; 22 2B 68 96 ; Jump to subroutine long $96682B.l [Writes: Stack Pointer] [Flow: call]
	ora [$C7.b]		; 07 C7 ; OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $12.b,X		; B5 12 ; Load $12.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$71.b]		; C7 71 ; Compare accumulator (long) [$71.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $67062B.l		; 22 2B 06 67 ; Jump to subroutine long $67062B.l [Writes: Stack Pointer] [Flow: call]
	adc ($12.b),Y		; 71 12 ; Add with carry ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ror $C6C7.w,X		; 7E C7 C6 ; Rotate right $C6C7.w,X [Reads: X Index] [Flags: ZNC]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3F.b,X		; 15 3F ; OR accumulator with memory $3F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $BB.b,X		; F6 BB ; Increment memory $BB.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lda ($E7.b)		; B2 E7 ; Load accumulator (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $7F.b		; 65 7F ; Add $7F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$B1.b]		; C7 B1 ; Compare accumulator (long) [$B1.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc ($C6.b)		; 72 C6 ; Add with carry (indirect) ($C6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	inc $5B00.w		; EE 00 5B ; Increment $5B00.w [Flags: ZN]
	ora ($E6.b),Y		; 11 E6 ; OR accumulator with memory ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $DA.b		; 14 DA ; Test and reset bits $DA.b [Reads: Accumulator] [Flags: Z]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$11.b]		; C7 11 ; Compare accumulator (long) [$11.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr $2B3E.w		; 20 3E 2B ; Jump to subroutine at $2B3E.w [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $C7,$40		; 44 40 C7 ; Move block positive $C7,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($9B.b),Y		; 11 9B ; OR accumulator with memory ($9B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($C7.b)		; D2 C7 ; Compare accumulator (indirect) ($C7.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $D374C7.l,X		; 3F C7 74 D3 ; AND accumulator with memory (long,X) $D374C7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$39.b]		; C7 39 ; Compare accumulator (long) [$39.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ror $2BD7.w,X		; 7E D7 2B ; Rotate right $2BD7.w,X [Reads: X Index] [Flags: ZNC]
	lda ($74.b)		; B2 74 ; Load accumulator (indirect) ($74.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor [$C7.b]		; 47 C7 ; Exclusive OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $B2.b,Y		; B6 B2 ; Load X register $B2.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	adc [$E6.b]		; 67 E6 ; Add with carry (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $B2C5.w,X		; FE C5 B2 ; Increment memory $B2C5.w,X [Reads: X Index] [Flags: ZN]
	jsr $68E6.w		; 20 E6 68 ; Jump to subroutine at $68E6.w [Writes: Stack Pointer] [Flow: call]
	dec $40.b		; C6 40 ; Decrement $40.b [Reads: Direct Page] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	asl $CC.b		; 06 CC ; Arithmetic shift left $CC.b [Reads: Direct Page] [Flags: ZNC]
	cpy $CC78.w		; CC 78 CC ; Compare $CC78.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $FF20.w		; CC 20 FF ; Compare $FF20.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $1002.w		; AD 02 10 ; Load $1002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $3434.w		; EE 34 34 ; Increment $3434.w [Flags: ZN]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C6.b,X		; D5 C6 ; Compare accumulator $C6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($75.b,S),Y		; 93 75 ; Store accumulator (stack relative indirect indexed) ($75.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $1B3B.w		; 8D 3B 1B ; Store accumulator to $1B3B.w [Reads: Accumulator]
	sta $A9.b,X		; 95 A9 ; Store accumulator to $A9.b,X [Reads: Accumulator, X Index]
	jmp ($B022.w,X)		; 7C 22 B0 ; Jump indirect indexed to ($B022.w,X) [Reads: X Index] [Flow: jump]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $82, $35, $0F		; 82 35 0F ; Branch always long to $82, $35, $0F [Flow: branch]
	and $02.b,S		; 23 02 ; AND accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $EA.b,S		; 03 EA ; OR accumulator with stack relative $EA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $E9.b		; 04 E9 ; Test and set bits $E9.b [Reads: Accumulator] [Flags: Z]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	.db $F0, $85		; F0 85 ; Branch if equal to $F0, $85 [Flow: branch]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $DB.b,X		; 34 DB ; Test bits $DB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C703.w,Y		; 99 03 C7 ; Store accumulator to $C703.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $7EF5F3.l		; 22 F3 F5 7E ; Jump to subroutine long $7EF5F3.l [Writes: Stack Pointer] [Flow: call]
	bit $BB.b,X		; 34 BB ; Test bits $BB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $B2FB.w,Y		; F9 FB B2 ; Subtract with carry $B2FB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $E9.b,S		; 03 E9 ; OR accumulator with stack relative $E9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $07.b,X		; 34 07 ; Test bits $07.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda ($0B.b)		; B2 0B ; Load accumulator (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$01.b],Y		; D7 01 ; Compare accumulator (long indexed) [$01.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $C6CB.w		; 2C CB C6 ; Test bits $C6CB.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora $C8.b		; 05 C8 ; Logical OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $2B.b		; 06 2B ; Arithmetic shift left $2B.b [Reads: Direct Page] [Flags: ZNC]
	bit $0605.w		; 2C 05 06 ; Test bits $0605.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $85.b,X		; 34 85 ; Test bits $85.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	wai		; CB ; Wait for interrupt
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $8682.w,X		; 7E 82 86 ; Rotate right $8682.w,X [Reads: X Index] [Flags: ZNC]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	lda $7690.w		; AD 90 76 ; Load $7690.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $69.b,S		; 03 69 ; OR accumulator with stack relative $69.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $B184.w,X		; 7E 84 B1 ; Rotate right $B184.w,X [Reads: X Index] [Flags: ZNC]
	and ($7E.b,S),Y		; 33 7E ; AND accumulator (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stx $30.b		; 86 30 ; Store X register to $30.b [Reads: X Index]
	asl $E8.b		; 06 E8 ; Arithmetic shift left $E8.b [Reads: Direct Page] [Flags: ZNC]
	ror $EB34.w,X		; 7E 34 EB ; Rotate right $EB34.w,X [Reads: X Index] [Flags: ZNC]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $7E.b,S		; 83 7E ; Store accumulator (stack relative) $7E.b,S [Reads: Accumulator, Stack Pointer]
	stx $03.b,Y		; 96 03 ; Store X register $03.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $82.b		; E6 82 ; Increment $82.b [Reads: Direct Page] [Flags: ZN]
	.db $82, $12, $33		; 82 12 33 ; Branch always long to $82, $12, $33 [Flow: branch]
	sta ($89.b,S),Y		; 93 89 ; Store accumulator (stack relative indirect indexed) ($89.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	rol $ED.b,X		; 36 ED ; Rotate left $ED.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cop $34.b		; 02 34 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $057E.w		; 8D 7E 05 ; Store accumulator to $057E.w [Reads: Accumulator]
	adc ($34.b,S),Y		; 73 34 ; Add with carry (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $CC		; B0 CC ; Branch if carry set to $B0, $CC [Flow: branch]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $53.b,S		; 03 53 ; OR accumulator with stack relative $53.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta [$10.b]		; 87 10 ; Store accumulator (long) [$10.b] [Reads: Accumulator, Direct Page]
	ora [$6F.b]		; 07 6F ; OR accumulator with memory (long) [$6F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $ED.b		; E5 ED ; Subtract $ED.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta [$72.b]		; 87 72 ; Store accumulator (long) [$72.b] [Reads: Accumulator, Direct Page]
	ora [$F5.b],Y		; 17 F5 ; OR accumulator with memory (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$AB.b]		; 87 AB ; Store accumulator (long) [$AB.b] [Reads: Accumulator, Direct Page]
	jmp ($0717.w,X)		; 7C 17 07 ; Jump indirect indexed to ($0717.w,X) [Reads: X Index] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and [$5C.b]		; 27 5C ; AND accumulator with memory (long) [$5C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $7201.w		; ED 01 72 ; Subtract $7201.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc $ED.b		; E6 ED ; Increment $ED.b [Reads: Direct Page] [Flags: ZN]
	jsr $22E6.w		; 20 E6 22 ; Jump to subroutine at $22E6.w [Writes: Stack Pointer] [Flow: call]
	and ($18.b)		; 32 18 ; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $37.b		; 26 37 ; Rotate left $37.b [Reads: Direct Page] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $5B.b		; 65 5B ; Add $5B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $31		; 10 31 ; Branch if plus to $10, $31 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	inc $CD.b,X		; F6 CD ; Increment memory $CD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$DD.b]		; 47 DD ; Exclusive OR accumulator with memory (long) [$DD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $C7.b		; 46 C7 ; Logical shift right $C7.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$D7.b]		; 67 D7 ; Add with carry (long) [$D7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$53.b		; C9 53 ; Compare #$53.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $12.b		; 46 12 ; Logical shift right $12.b [Reads: Direct Page] [Flags: ZNC]
	inc $EC.b		; E6 EC ; Increment $EC.b [Reads: Direct Page] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $758B15.l		; 22 15 8B 75 ; Jump to subroutine long $758B15.l [Writes: Stack Pointer] [Flow: call]
	ora ($B3.b)		; 12 B3 ; OR accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($87.b)		; 12 87 ; OR accumulator with memory (indirect) ($87.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $96.b		; E6 96 ; Increment $96.b [Reads: Direct Page] [Flags: ZN]
	lda ($25.b,S),Y		; B3 25 ; Load accumulator (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $89.b		; E6 89 ; Increment $89.b [Reads: Direct Page] [Flags: ZN]
	cmp $274F.w		; CD 4F 27 ; Compare $274F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and [$4F.b]		; 27 4F ; AND accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $51.b		; 66 51 ; Rotate right $51.b [Reads: Direct Page] [Flags: ZNC]
	dec $71.b		; C6 71 ; Decrement $71.b [Reads: Direct Page] [Flags: ZN]
	adc ($B6.b)		; 72 B6 ; Add with carry (indirect) ($B6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda ($0F.b,S),Y		; B3 0F ; Load accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $BB		; 10 BB ; Branch if plus to $10, $BB [Flow: branch]
	cpy $B6A9.w		; CC A9 B6 ; Compare $B6A9.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($E4.b)		; 12 E4 ; OR accumulator with memory (indirect) ($E4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rep #$CE		; C2 CE ; Reset processor status bits #$CE [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp $17.b		; C5 17 ; Compare $17.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $C5CBBB.l,X		; BF BB CB C5 ; Load long $C5CBBB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($D7.b,S),Y		; B3 D7 ; Load accumulator (stack relative indirect indexed) ($D7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $22BB.w		; CD BB 22 ; Compare $22BB.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp [$B5.b],Y		; D7 B5 ; Compare accumulator (long indexed) [$B5.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	asl $D8C8.w,X		; 1E C8 D8 ; Arithmetic shift left $D8C8.w,X [Reads: X Index] [Flags: ZNC]
	lda #$CB.b		; A9 CB ; Load #$CB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $12B5.w		; 20 B5 12 ; Jump to subroutine at $12B5.w [Writes: Stack Pointer] [Flow: call]
	cmp [$CB.b]		; C7 CB ; Compare accumulator (long) [$CB.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
.INDEX 16
	rep #$1D		; C2 1D
	lda $C2.b,X		; B5 C2 ; Load $C2.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $CB.b,X		; B5 CB ; Load $CB.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $B4.b,S		; C3 B4 ; Compare accumulator (stack relative) $B4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $BBC7.w,X		; BD C7 BB ; Load $BBC7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($C7.b)		; B2 C7 ; Load accumulator (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$9E.b]		; C7 9E ; Compare accumulator (long) [$9E.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$22.b]		; C7 22 ; Compare accumulator (long) [$22.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($9E.b)		; B2 9E ; Load accumulator (indirect) ($9E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $A2DA.w,X		; 9E DA A2 ; Store zero to $A2DA.w,X [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rol $A1.b		; 26 A1 ; Rotate left $A1.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp [$20.b],Y		; D7 20 ; Compare accumulator (long indexed) [$20.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $1DC7.w,X		; BC C7 1D ; Load Y register $1DC7.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $BB2C.w,Y		; D9 2C BB ; Compare accumulator $BB2C.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $CDD7.w		; CD D7 CD ; Compare $CDD7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp [$2B.b]		; C7 2B ; Compare accumulator (long) [$2B.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $CDE4AE.l		; 22 AE E4 CD ; Jump to subroutine long $CDE4AE.l [Writes: Stack Pointer] [Flow: call]
	cpx $B2.b		; E4 B2 ; Compare $B2.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $D4C7DA.l		; 22 DA C7 D4 ; Jump to subroutine long $D4C7DA.l [Writes: Stack Pointer] [Flow: call]
	cmp ($22.b)		; D2 22 ; Compare accumulator (indirect) ($22.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $D7D9A0.l		; 22 A0 D9 D7 ; Jump to subroutine long $D7D9A0.l [Writes: Stack Pointer] [Flow: call]
	cmp [$B2.b]		; C7 B2 ; Compare accumulator (long) [$B2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($CD.b)		; B2 CD ; Load accumulator (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$A3.b],Y		; D7 A3 ; Compare accumulator (long indexed) [$A3.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta $B32B.w,X		; 9D 2B B3 ; Store accumulator to $B32B.w,X [Reads: Accumulator, X Index]
	cmp $E6E6E4.l,X		; DF E4 E6 E6 ; Compare accumulator (long,X) $E6E6E4.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	jsl $04CD22.l		; 22 22 CD 04 ; Jump to subroutine long $04CD22.l [Writes: Stack Pointer] [Flow: call]
	adc $07.b,S		; 63 07 ; Add with carry (stack relative) $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and $13.b,S		; 23 13 ; AND accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $4F22.w		; 8D 22 4F ; Store accumulator to $4F22.w [Reads: Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	jmp ($2572.w,X)		; 7C 72 25 ; Jump indirect indexed to ($2572.w,X) [Reads: X Index] [Flow: jump]
	eor ($BA.b),Y		; 51 BA ; Exclusive OR accumulator with memory ($BA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and [$23.b]		; 27 23 ; AND accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($8D.b,S),Y		; 13 8D ; OR accumulator (stack relative indirect indexed) ($8D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($CC.b),Y		; 31 CC ; AND accumulator with memory ($CC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$12.b],Y		; 37 12 ; AND accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($E6.b,S),Y		; 53 E6 ; XOR accumulator (stack relative indirect indexed) ($E6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $61.b		; E6 61 ; Increment $61.b [Reads: Direct Page] [Flags: ZN]
	ora ($21.b)		; 12 21 ; OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $1685.w,Y		; B9 85 16 ; Load $1685.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $93.b		; 85 93 ; Store accumulator to $93.b [Reads: Accumulator]
	and ($94.b,S),Y		; 33 94 ; AND accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $2DCD.w		; CD CD 2D ; Compare $2DCD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($21.b)		; 32 21 ; AND accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $5151.w,X		; FD 51 51 ; Subtract with carry $5151.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $27.b		; 04 27 ; Test and set bits $27.b [Reads: Accumulator] [Flags: Z]
	adc ($63.b,S),Y		; 73 63 ; Add with carry (stack relative indirect indexed) ($63.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $F8.b		; E6 F8 ; Increment $F8.b [Reads: Direct Page] [Flags: ZN]
	sbc $6612.w,Y		; F9 12 66 ; Subtract with carry $6612.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E651.w,Y		; F9 51 E6 ; Subtract with carry $E651.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$67.b],Y		; 77 67 ; Add with carry (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$85.b]		; 27 85 ; AND accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$77.b],Y		; 37 77 ; AND accumulator with memory (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0758.w		; 8D 58 07 ; Store accumulator to $0758.w [Reads: Accumulator]
	rol $71.b		; 26 71 ; Rotate left $71.b [Reads: Direct Page] [Flags: ZNC]
	trb $2628.w		; 1C 28 26 ; Test and reset bits $2628.w [Reads: Accumulator] [Flags: Z]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $2BCC.w		; CC CC 2B ; Compare $2BCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $CC.b		; 26 CC ; Rotate left $CC.b [Reads: Direct Page] [Flags: ZNC]
	cpy $2A36.w		; CC 36 2A ; Compare $2A36.w with Y register [Reads: Y Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpy $3CCC.w		; CC CC 3C ; Compare $3CCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $34.b		; 26 34 ; Rotate left $34.b [Reads: Direct Page] [Flags: ZNC]
	eor ($CC.b,X)		; 41 CC ; Exclusive OR accumulator with memory ($CC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $4443.w		; CC 43 44 ; Compare $4443.w with Y register [Reads: Y Index] [Flags: ZNC]
	lsr $33.b		; 46 33 ; Logical shift right $33.b [Reads: Direct Page] [Flags: ZNC]
	cpy $26CC.w		; CC CC 26 ; Compare $26CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor $514F.w		; 4D 4F 51 ; Exclusive OR $514F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $56CC.w		; CC CC 56 ; Compare $56CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor [$59.b],Y		; 57 59 ; Exclusive OR accumulator with memory (long indexed) [$59.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $CCCC.w,X		; 5E CC CC ; Logical shift right $CCCC.w,X [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $CC66.w,X		; 5D 66 CC ; Exclusive OR accumulator with memory $CC66.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy $6867.w		; CC 67 68 ; Compare $6867.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $70, $69		; 70 69 ; Branch if overflow set to $70, $69 [Flow: branch]
	cpy $702C.w		; CC 2C 70 ; Compare $702C.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	.db $70, $22		; 70 22 ; Branch if overflow set to $70, $22 [Flow: branch]
	jsl $6A7070.l		; 22 70 70 6A ; Jump to subroutine long $6A7070.l [Writes: Stack Pointer] [Flow: call]
	adc #$22.b		; 69 22 ; Add #$22.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy $7068.w		; CC 68 70 ; Compare $7068.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $70, $69		; 70 69 ; Branch if overflow set to $70, $69 [Flow: branch]
.ACCU 16
	rep #$2C		; C2 2C
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	adc #$2270.w		; 69 70 22 ; Add #$2270.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$6A		; C2 6A
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 16
	rep #$2C		; C2 2C
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	jsl $686A2C.l		; 22 2C 6A 68 ; Jump to subroutine long $686A2C.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc #$CCCC.w		; 69 CC CC ; Add #$CCCC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp ($706C.w)		; 6C 6C 70 ; Jump indirect to ($706C.w) [Flow: jump]
	adc #$2CCC.w		; 69 CC 2C ; Add #$2CCC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $70, $6C		; 70 6C ; Branch if overflow set to $70, $6C [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rep #$CC		; C2 CC ; Reset processor status bits #$CC [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $70, $68		; 70 68 ; Branch if overflow set to $70, $68 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rep #$CC		; C2 CC ; Reset processor status bits #$CC [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jmp ($7070.w)		; 6C 70 70 ; Jump indirect to ($7070.w) [Flow: jump]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 16
	rep #$2C		; C2 2C
	.db $70, $68		; 70 68 ; Branch if overflow set to $70, $68 [Flow: branch]
	.db $70, $68		; 70 68 ; Branch if overflow set to $70, $68 [Flow: branch]
	bit $702C.w		; 2C 2C 70 ; Test bits $702C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $70, $68		; 70 68 ; Branch if overflow set to $70, $68 [Flow: branch]
	adc #$CC22.w		; 69 22 CC ; Add #$CC22.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsl $7070CC.l		; 22 CC 70 70 ; Jump to subroutine long $7070CC.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc #$CC22.w		; 69 22 CC ; Add #$CC22.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	adc #$2268.w		; 69 68 22 ; Add #$2268.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy $6D6D.w		; CC 6D 6D ; Compare $6D6D.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $CC69.w		; 6D 69 CC ; Add $CC69.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy $6B70.w		; CC 70 6B ; Compare $6B70.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $2C70.w		; 6D 70 2C ; Add $2C70.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$69		; C2 69
	.db $70, $6D		; 70 6D ; Branch if overflow set to $70, $6D [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rep #$CC		; C2 CC ; Reset processor status bits #$CC [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $70, $69		; 70 69 ; Branch if overflow set to $70, $69 [Flow: branch]
	.db $70, $C2		; 70 C2 ; Branch if overflow set to $70, $C2 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$70		; C2 70
	.db $70, $6F		; 70 6F ; Branch if overflow set to $70, $6F [Flow: branch]
	adc $71CC22.l		; 6F 22 CC 71 ; Add with carry (long) $71CC22.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($78.b,S),Y		; 73 78 ; Add with carry (stack relative indirect indexed) ($78.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $CC.b,X		; 75 CC ; Add $CC.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $75C9.w		; 1C C9 75 ; Test and reset bits $75C9.w [Reads: Accumulator] [Flags: Z]
	adc ($78.b),Y		; 71 78 ; Add with carry ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $77CC.w		; 0C CC 77 ; Test and set bits $77CC.w [Reads: Accumulator] [Flags: Z]
	jmp.w [$7586]		; DC 86 75 ; Jump long indirect [$7586] [Flow: jump]
	cpy #$7A1C.w		; C0 1C 7A ; Compare #$7A1C.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $75.b,X		; 34 75 ; Test bits $75.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $C0.b,S		; E3 C0 ; Subtract stack-relative $C0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpy #$7871.w		; C0 71 78 ; Compare #$7871.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($7D.b),Y		; 71 7D ; Add with carry ($7D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $560C.w		; CC 0C 56 ; Compare $560C.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $85.b,X		; 34 85 ; Test bits $85.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta [$10.b]		; 87 10 ; Store accumulator (long) [$10.b] [Reads: Accumulator, Direct Page]
	cpy $8988.w		; CC 88 89 ; Compare $8988.w with Y register [Reads: Y Index] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpy $8CCC.w		; CC CC 8C ; Compare $8CCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($93.b),Y		; D1 93 ; Compare accumulator ($93.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta [$C2.b]		; 87 C2 ; Store accumulator (long) [$C2.b] [Reads: Accumulator, Direct Page]
	cpy $9790.w		; CC 90 97 ; Compare $9790.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $CC91.w,Y		; 99 91 CC ; Store accumulator to $CC91.w,Y [Reads: Accumulator, Y Index]
	cpy $9C34.w		; CC 34 9C ; Compare $9C34.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $0CCD.w,Y		; F9 CD 0C ; Subtract with carry $0CCD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $A690A5.l		; 22 A5 90 A6 ; Jump to subroutine long $A690A5.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpy $91CC.w		; CC CC 91 ; Compare $91CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($AA.b,X)		; A1 AA ; Load accumulator ($AA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy $87C3.w		; CC C3 87 ; Compare $87C3.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($B3.b),Y		; B1 B3 ; Load accumulator ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $CC.b,X		; B4 CC ; Load Y register $CC.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy $A1B6.w		; CC B6 A1 ; Compare $A1B6.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $24.b,S		; A3 24 ; Load accumulator (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $27C5.w		; CC C5 27 ; Compare $27C5.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $C2C0.w		; CD C0 C2 ; Compare $C2C0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($CC.b)		; 32 CC ; AND accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($A1.b),Y		; 71 A1 ; Add with carry ($A1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$51.b],Y		; 77 51 ; Add with carry (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $06C7.w		; 0C C7 06 ; Test and set bits $06C7.w [Reads: Accumulator] [Flags: Z]
	adc $07.b		; 65 07 ; Add $07.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	ror $C3.b		; 66 C3 ; Rotate right $C3.b [Reads: Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($CC.b,X)		; 01 CC ; Logical OR ($CC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $C9.b		; A5 C9 ; Load $C9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$CCCB.w		; C9 CB CC ; Compare #$CCCB.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpy $C8CB.w		; CC CB C8 ; Compare $C8CB.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp ($CCA3.w,X)		; 7C A3 CC ; Jump indirect indexed to ($CCA3.w,X) [Reads: X Index] [Flow: jump]
	cpy #$AAA1.w		; C0 A1 AA ; Compare #$AAA1.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	cpy $A5CC.w		; CC CC A5 ; Compare $A5CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($C9.b,X)		; A1 C9 ; Load accumulator ($C9.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($1C.b)		; D2 1C ; Compare accumulator (indirect) ($1C.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $D5C0.w		; CC C0 D5 ; Compare $D5C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp #$CCCB.w		; C9 CB CC ; Compare #$CCCB.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpy $DACB.w		; CC CB DA ; Compare $DACB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($87.b,X)		; C1 87 ; Compare accumulator ($87.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy $A9CC.w		; CC CC A9 ; Compare $A9CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($C3.b),Y		; D1 C3 ; Compare accumulator ($C3.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta $CC0C.w		; 8D 0C CC ; Store accumulator to $CC0C.w [Reads: Accumulator]
	jmp ($D4A1.w,X)		; 7C A1 D4 ; Jump indirect indexed to ($D4A1.w,X) [Reads: X Index] [Flow: jump]
	cpy #$CCCC.w		; C0 CC CC ; Compare #$CCCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp.w [$34DE]		; DC DE 34 ; Jump long indirect [$34DE] [Flow: jump]
	bit $CC.b,X		; 34 CC ; Test bits $CC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $CCDFC9.l		; AF C9 DF CC ; Load long $CCDFC9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $DACB.w		; CC CB DA ; Compare $DACB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CCE1.w		; C0 E1 CC ; Compare #$CCE1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $E7DC.w		; CC DC E7 ; Compare $E7DC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc #$CCE2.w		; E9 E2 CC ; Subtract #$CCE2.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cpy $C9AA.w		; CC AA C9 ; Compare $C9AA.w with Y register [Reads: Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpy $71CC.w		; CC CC 71 ; Compare $71CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	ror $F3.b,X		; 76 F3 ; Rotate right $F3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy $7CCC.w		; CC CC 7C ; Compare $7CCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy $FCC6.w		; CC C6 FC ; Compare $FCC6.w with Y register [Reads: Y Index] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	bit $FC.b,X		; 34 FC ; Test bits $FC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	bit $C1.b,X		; 34 C1 ; Test bits $C1.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $0C.b		; 66 0C ; Rotate right $0C.b [Reads: Direct Page] [Flags: ZNC]
	lda $0100.w,Y		; B9 00 01 ; Load $0100.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $CD.b		; 00 CD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $04C7.w,X		; DD C7 04 ; Compare accumulator $04C7.w,X [Reads: X Index] [Flags: ZNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	and $C7DD.w		; 2D DD C7 ; Logical AND $C7DD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$7A.b]		; C7 7A ; Compare accumulator (long) [$7A.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $710466.l		; 22 66 04 71 ; Jump to subroutine long $710466.l [Writes: Stack Pointer] [Flow: call]
	stx $06.b		; 86 06 ; Store X register to $06.b [Reads: X Index]
	jmp.w [$FECD]		; DC CD FE ; Jump long indirect [$FECD] [Flow: jump]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $D2C0.w		; CD C0 D2 ; Compare $D2C0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	cmp $DD71.w		; CD 71 DD ; Compare $DD71.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $34C2.w		; 2C C2 34 ; Test bits $34C2.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $C0DA.w		; 2D DA C0 ; Logical AND $C0DA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $CD		; 10 CD ; Branch if plus to $10, $CD [Flow: branch]
	ora $CD.b,S		; 03 CD ; OR accumulator with stack relative $CD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$2D.b]		; C7 2D ; Compare accumulator (long) [$2D.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $E2FA83.l		; 22 83 FA E2 ; Jump to subroutine long $E2FA83.l [Writes: Stack Pointer] [Flow: call]
	sbc $0CCC.w,X		; FD CC 0C ; Subtract with carry $0CCC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $030A.w		; 0C 0A 03 ; Test and set bits $030A.w [Reads: Accumulator] [Flags: Z]
	cmp $06DD.w,X		; DD DD 06 ; Compare accumulator $06DD.w,X [Reads: X Index] [Flags: ZNC]
	rol $C7.b,X		; 36 C7 ; Rotate left $C7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp [$D2.b]		; C7 D2 ; Compare accumulator (long) [$D2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $C6DAD7.l		; 22 D7 DA C6 ; Jump to subroutine long $C6DAD7.l [Writes: Stack Pointer] [Flow: call]
	cmp $2220.w		; CD 20 22 ; Compare $2220.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $DD34.w		; CD 34 DD ; Compare $DD34.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $0531.w		; 20 31 05 ; Jump to subroutine at $0531.w [Writes: Stack Pointer] [Flow: call]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $08DD.w,X		; 1D DD 08 ; OR accumulator with memory $08DD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $FD.b,X		; 34 FD ; Test bits $FD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $D0, $C3		; D0 C3 ; Branch if not equal to $D0, $C3 [Flow: branch]
	tsb $76.b		; 04 76 ; Test and set bits $76.b [Reads: Accumulator] [Flags: Z]
	jmp ($DCFD.w,X)		; 7C FD DC ; Jump indirect indexed to ($DCFD.w,X) [Reads: X Index] [Flow: jump]
	cpy $B99B.w		; CC 9B B9 ; Compare $B99B.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec $CC36.w,X		; DE 36 CC ; Decrement memory $CC36.w,X [Reads: X Index] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$F7		; C2 F7
	tsb $ED.b		; 04 ED ; Test and set bits $ED.b [Reads: Accumulator] [Flags: Z]
	sbc $1C2D.w,X		; FD 2D 1C ; Subtract with carry $1C2D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $9C34.w		; 2D 34 9C ; Logical AND $9C34.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($10.b,X)		; C1 10 ; Compare accumulator ($10.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy $10C1.w		; CC C1 10 ; Compare $10C1.w with Y register [Reads: Y Index] [Flags: ZNC]
.ACCU 16
.INDEX 16
	rep #$F7		; C2 F7
	cmp $F8C2.w		; CD C2 F8 ; Compare $F8C2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp [$CD.b]		; C7 CD ; Compare accumulator (long) [$CD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc $2C22.w,X		; 7D 22 2C ; Add $2C22.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($6F.b),Y		; 11 6F ; OR accumulator with memory ($6F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$DC36.w		; C0 36 DC ; Compare #$DC36.w with Y register [Reads: Y Index] [Flags: ZNC]
.ACCU 16
	rep #$ED		; C2 ED
	cmp [$C2.b],Y		; D7 C2 ; Compare accumulator (long indexed) [$C2.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc ($12.b),Y		; 71 12 ; Add with carry ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $ED76.w		; CC 76 ED ; Compare $ED76.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jmp ($CCC1.w,X)		; 7C C1 CC ; Jump indirect indexed to ($CCC1.w,X) [Reads: X Index] [Flow: jump]
	sbc $0DCA.w		; ED CA 0D ; Subtract $0DCA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	rol $12.b,X		; 36 12 ; Rotate left $12.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	ora $FC.b		; 05 FC ; Logical OR $FC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $CCCD.w,X		; FD CD CC ; Subtract with carry $CCCD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $D7C5.w		; CD C5 D7 ; Compare $D7C5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($22.b)		; D2 22 ; Compare accumulator (indirect) ($22.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $C7CD0A.l		; 22 0A CD C7 ; Jump to subroutine long $C7CD0A.l [Writes: Stack Pointer] [Flow: call]
	ora $D2.b,S		; 03 D2 ; OR accumulator with stack relative $D2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $0AC7.w		; 2D C7 0A ; Logical AND $0AC7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$CD.b]		; C7 CD ; Compare accumulator (long) [$CD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and $D722.w		; 2D 22 D7 ; Logical AND $D722.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$FE.b]		; C7 FE ; Compare accumulator (long) [$FE.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$22.b]		; C7 22 ; Compare accumulator (long) [$22.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rep #$03		; C2 03 ; Reset processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	inc $1F0B.w,X		; FE 0B 1F ; Increment memory $1F0B.w,X [Reads: X Index] [Flags: ZN]
	jmp.w [$05DB]		; DC DB 05 ; Jump long indirect [$05DB] [Flow: jump]
	ora ($0A.b,S),Y		; 13 0A ; OR accumulator (stack relative indirect indexed) ($0A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $C7DBDD.l,X		; 1F DD DB C7 ; Logical OR long $C7DBDD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $08C7.w		; CD C7 08 ; Compare $08C7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $040A2D.l		; 22 2D 0A 04 ; Jump to subroutine long $040A2D.l [Writes: Stack Pointer] [Flow: call]
	cmp $DDC7.w		; CD C7 DD ; Compare $DDC7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $CDC7C7.l		; 22 C7 C7 CD ; Jump to subroutine long $CDC7C7.l [Writes: Stack Pointer] [Flow: call]
	cmp [$22.b]		; C7 22 ; Compare accumulator (long) [$22.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $2604CD.l		; 22 CD 04 26 ; Jump to subroutine long $2604CD.l [Writes: Stack Pointer] [Flow: call]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $D703.w,X		; 3D 03 D7 ; AND accumulator with memory $D703.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $B3D204.l,X		; 1F 04 D2 B3 ; Logical OR long $B3D204.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	jsl $C711DD.l		; 22 DD 11 C7 ; Jump to subroutine long $C711DD.l [Writes: Stack Pointer] [Flow: call]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2C.b)		; 32 2C ; AND accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0D36.w,Y		; B9 36 0D ; Load $0D36.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$C2.b],Y		; B7 C2 ; Load accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B9.b)		; 12 B9 ; OR accumulator with memory (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $EBA4.w		; 9C A4 EB ; Store zero to $EBA4.w
	bit $CDC1.w		; 2C C1 CD ; Test bits $CDC1.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $3533.w		; 2D 33 35 ; Logical AND $3533.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc ($78.b),Y		; 71 78 ; Add with carry ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $34CC.w		; CD CC 34 ; Compare $34CC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	stx $C6.b		; 86 C6 ; Store X register to $C6.b [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($2D.b,X)		; 01 2D ; Logical OR ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
.ACCU 16
	rep #$E9		; C2 E9
	ora ($C1.b),Y		; 11 C1 ; OR accumulator with memory ($C1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $0EDC.w		; CC DC 0E ; Compare $0EDC.w with Y register [Reads: Y Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jmp.w [$CD00]		; DC 00 CD ; Jump long indirect [$CD00] [Flow: jump]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$2D.b]		; C7 2D ; Compare accumulator (long) [$2D.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($CD.b)		; D2 CD ; Compare accumulator (indirect) ($CD.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($28.b),Y		; 11 28 ; OR accumulator with memory ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $7073.w,X		; 3D 73 70 ; AND accumulator with memory $7073.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$DE		; C2 DE
	cpy $DECC.w		; CC CC DE ; Compare $DECC.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $2CC2.w,X		; 7D C2 2C ; Add $2CC2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$F4.b],Y		; 77 F4 ; Add with carry (long indexed) [$F4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$CC10.w		; C0 10 CC ; Compare #$CC10.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $E918.w		; CD 18 E9 ; Compare $E918.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $DC36.w		; 0E 36 DC ; Arithmetic shift left $DC36.w [Flags: ZNC]
	cmp ($CD.b)		; D2 CD ; Compare accumulator (indirect) ($CD.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc $6F1A.w,X		; 7D 1A 6F ; Add $6F1A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $70DC.w		; 2C DC 70 ; Test bits $70DC.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora ($72.b),Y		; 11 72 ; OR accumulator with memory ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($CD.b,S),Y		; D3 CD ; Compare accumulator (stack relative indirect indexed) ($CD.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cpy $76C0.w		; CC C0 76 ; Compare $76C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp ($CC08.w,X)		; 7C 08 CC ; Jump indirect indexed to ($CC08.w,X) [Reads: X Index] [Flow: jump]
	cmp $B938.w		; CD 38 B9 ; Compare $B938.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $3C70.w,Y		; B9 70 3C ; Load $3C70.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $D311.w		; CC 11 D3 ; Compare $D311.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc $CCDC.w,Y		; 79 DC CC ; Add $CCDC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($05EB.w,X)		; 7C EB 05 ; Jump indirect indexed to ($05EB.w,X) [Reads: X Index] [Flow: jump]
	ora $C1.b,S		; 03 C1 ; OR accumulator with stack relative $C1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $9C04.w,X		; DD 04 9C ; Compare accumulator $9C04.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	bit $11DD.w,X		; 3C DD 11 ; Test bits $11DD.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $DC7C.w		; 6D 7C DC ; Add $DC7C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	trb $770D.w		; 1C 0D 77 ; Test and reset bits $770D.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $C2DC.w		; CD DC C2 ; Compare $C2DC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $D21A1A.l		; CF 1A 1A D2 ; Compare accumulator (long) $D21A1A.l [Reads: Accumulator] [Flags: ZNC]
	cmp $B9C1.w,X		; DD C1 B9 ; Compare accumulator $B9C1.w,X [Reads: X Index] [Flags: ZNC]
	sbc $CCDC.w		; ED DC CC ; Subtract $CCDC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora ($B9.b)		; 12 B9 ; OR accumulator with memory (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($0A.b),Y		; D1 0A ; Compare accumulator ($0A.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.INDEX 16
	rep #$DD		; C2 DD
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $B98322.l		; 22 22 83 B9 ; Jump to subroutine long $B98322.l [Writes: Stack Pointer] [Flow: call]
	cmp [$DF.b]		; C7 DF ; Compare accumulator (long) [$DF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $0422.w		; CC 22 04 ; Compare $0422.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $D278D3.l,X		; DF D3 78 D2 ; Compare accumulator (long,X) $D278D3.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpy $33C7.w		; CC C7 33 ; Compare $33C7.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($DF.b)		; 32 DF ; AND accumulator with memory (indirect) ($DF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $C2C022.l		; 22 22 C0 C2 ; Jump to subroutine long $C2C022.l [Writes: Stack Pointer] [Flow: call]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	cpy $CF22.w		; CC 22 CF ; Compare $CF22.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $9BE2.w		; 6D E2 9B ; Add $9BE2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and ($0C.b,X)		; 21 0C ; Logical AND ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$0E8E.w		; C0 8E 0E ; Compare #$0E8E.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpy $9B12.w		; CC 12 9B ; Compare $9B12.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $CDC00F.l		; 0F 0F C0 CD ; OR accumulator with memory (long) $CDC00F.l [Writes: Accumulator] [Flags: ZN]
	jmp.w [$1D31]		; DC 31 1D ; Jump long indirect [$1D31] [Flow: jump]
	cmp [$7A.b]		; C7 7A ; Compare accumulator (long) [$7A.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $3226.w,X		; 1D 26 32 ; OR accumulator with memory $3226.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $2D1211.l		; 0F 11 12 2D ; OR accumulator with memory (long) $2D1211.l [Writes: Accumulator] [Flags: ZN]
	cmp $D3A4.w,X		; DD A4 D3 ; Compare accumulator $D3A4.w,X [Reads: X Index] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $C0DD.w		; CC DD C0 ; Compare $C0DD.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($7C.b,X)		; C1 7C ; Compare accumulator ($7C.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	adc ($CC.b,S),Y		; 73 CC ; Add with carry (stack relative indirect indexed) ($CC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $1173.w		; CC 73 11 ; Compare $1173.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($11.b),Y		; 71 11 ; Add with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $72CD.w		; CD CD 72 ; Compare $72CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($F3.b,S),Y		; D3 F3 ; Compare accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	adc ($CC.b)		; 72 CC ; Add with carry (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $CFC1.w		; CC C1 CF ; Compare $CFC1.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($78.b,S),Y		; F3 78 ; Subtract with carry (stack relative indirect indexed) ($78.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$F7CC.w		; C0 CC F7 ; Compare #$F7CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $CD7DF9.l		; 22 F9 7D CD ; Jump to subroutine long $CD7DF9.l [Writes: Stack Pointer] [Flow: call]
	cpy $7979.w		; CC 79 79 ; Compare $7979.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec $1A.b		; C6 1A ; Decrement $1A.b [Reads: Direct Page] [Flags: ZN]
	cpy $342D.w		; CC 2D 34 ; Compare $342D.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $0CD0.w		; 6D D0 0C ; Add $0CD0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($2D.b,X)		; 01 2D ; Logical OR ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $9D34.w,X		; DE 34 9D ; Decrement memory $9D34.w,X [Reads: X Index] [Flags: ZN]
	sbc $C0.b,S		; E3 C0 ; Subtract stack-relative $C0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	jsr $D0E3.w		; 20 E3 D0 ; Jump to subroutine at $D0E3.w [Writes: Stack Pointer] [Flow: call]
	tsb $020F.w		; 0C 0F 02 ; Test and set bits $020F.w [Reads: Accumulator] [Flags: Z]
	cmp $9DC2.w,X		; DD C2 9D ; Compare accumulator $9DC2.w,X [Reads: X Index] [Flags: ZNC]
	eor ($34.b,S),Y		; 53 34 ; XOR accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($C71F.w,X)		; FC 1F C7 ; Jump to subroutine indirect indexed ($C71F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp ($C7B2.w)		; 6C B2 C7 ; Jump indirect to ($C7B2.w) [Flow: jump]
	cmp [$83.b]		; C7 83 ; Compare accumulator (long) [$83.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	cmp $D122.w		; CD 22 D1 ; Compare $D122.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $3134DC.l		; 22 DC 34 31 ; Jump to subroutine long $3134DC.l [Writes: Stack Pointer] [Flow: call]
	ora $F9.b		; 05 F9 ; Logical OR $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($52.b,X)		; 01 52 ; Logical OR ($52.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($F7.b,S),Y		; 33 F7 ; AND accumulator (stack relative indirect indexed) ($F7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $22FA.w,Y		; F9 FA 22 ; Subtract with carry $22FA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $51AE78.l		; 22 78 AE 51 ; Jump to subroutine long $51AE78.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
.INDEX 16
	rep #$11		; C2 11
	lda $55B0.w,Y		; B9 B0 55 ; Load $55B0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($22.b,S),Y		; 53 22 ; XOR accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($D1.b),Y		; 31 D1 ; AND accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$DC.b]		; C7 DC ; Compare accumulator (long) [$DC.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($22.b),Y		; D1 22 ; Compare accumulator ($22.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsl $CD00C7.l		; 22 C7 00 CD ; Jump to subroutine long $CD00C7.l [Writes: Stack Pointer] [Flow: call]
	cmp [$2D.b]		; C7 2D ; Compare accumulator (long) [$2D.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $343232.l		; 22 32 32 34 ; Jump to subroutine long $343232.l [Writes: Stack Pointer] [Flow: call]
	and ($22.b,S),Y		; 33 22 ; AND accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $9B.b		; 02 9B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$2A28]		; DC 28 2A ; Jump long indirect [$2A28] [Flow: jump]
	cpy $2BDD.w		; CC DD 2B ; Compare $2BDD.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $DD		; 30 DD ; Branch if minus to $30, $DD [Flow: branch]
	cmp $3030.w,X		; DD 30 30 ; Compare accumulator $3030.w,X [Reads: X Index] [Flags: ZNC]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	cmp $32DD.w,X		; DD DD 32 ; Compare accumulator $32DD.w,X [Reads: X Index] [Flags: ZNC]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $DD		; 30 DD ; Branch if minus to $30, $DD [Flow: branch]
	cmp $EC30.w,X		; DD 30 EC ; Compare accumulator $EC30.w,X [Reads: X Index] [Flags: ZNC]
	and $DDD33F.l,X		; 3F 3F D3 DD ; AND accumulator with memory (long,X) $DDD33F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($43.b,X)		; 41 43 ; Exclusive OR accumulator with memory ($43.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $40DD.w,X		; DD DD 40 ; Compare accumulator $40DD.w,X [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $57.b		; 45 57 ; Exclusive OR $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $40D8.w,X		; DD D8 40 ; Compare accumulator $40D8.w,X [Reads: X Index] [Flags: ZNC]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$DD.b],Y		; 57 DD ; Exclusive OR accumulator with memory (long indexed) [$DD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lsr $5140.w		; 4E 40 51 ; Logical shift right $5140.w [Flags: ZNC]
	sta $DD.b,S		; 83 DD ; Store accumulator (stack relative) $DD.b,S [Reads: Accumulator, Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$55.b],Y		; 57 55 ; Exclusive OR accumulator with memory (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $6188.w,X		; DD 88 61 ; Compare accumulator $6188.w,X [Reads: X Index] [Flags: ZNC]
	mvn $57,$56		; 54 56 57 ; Move block negative $57,$56 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $0CDD.w		; 8D DD 0C ; Store accumulator to $0CDD.w [Reads: Accumulator]
	eor $10.b,X		; 55 10 ; Exclusive OR accumulator with memory $10.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $9D98.w		; 4E 98 9D ; Logical shift right $9D98.w [Flags: ZNC]
	eor [$12.b],Y		; 57 12 ; Exclusive OR accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$5A.b],Y		; 57 5A ; Exclusive OR accumulator with memory (long indexed) [$5A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$5B8D.w		; 89 8D 5B ; Test bits #$5B8D.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor $5F5D.w,X		; 5D 5D 5F ; Exclusive OR accumulator with memory $5F5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $5EDD.w,X		; DD DD 5E ; Compare accumulator $5EDD.w,X [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $DD.b,S		; 63 DD ; Add with carry (stack relative) $DD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp $5F5F.w,X		; DD 5F 5F ; Compare accumulator $5F5F.w,X [Reads: X Index] [Flags: ZNC]
	adc $61.b		; 65 61 ; Add $61.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $5DDD.w,X		; DD DD 5D ; Compare accumulator $5DDD.w,X [Reads: X Index] [Flags: ZNC]
	ror $716F.w		; 6E 6F 71 ; Rotate right $716F.w [Flags: ZNC]
	cmp $5BDD.w,X		; DD DD 5B ; Compare accumulator $5BDD.w,X [Reads: X Index] [Flags: ZNC]
	adc [$5F.b]		; 67 5F ; Add with carry (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $62DD.w,X		; DD DD 62 ; Compare accumulator $62DD.w,X [Reads: X Index] [Flags: ZNC]
	stz $61.b		; 64 61 ; Store zero to $61.b
	adc [$DD.b],Y		; 77 DD ; Add with carry (long indexed) [$DD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $7D7B.w,X		; DD 7B 7D ; Compare accumulator $7D7B.w,X [Reads: X Index] [Flags: ZNC]
	ror $DD80.w,X		; 7E 80 DD ; Rotate right $DD80.w,X [Reads: X Index] [Flags: ZNC]
	cmp $8382.w,X		; DD 82 83 ; Compare accumulator $8382.w,X [Reads: X Index] [Flags: ZNC]
	sta $87.b		; 85 87 ; Store accumulator to $87.b [Reads: Accumulator]
	cmp $93DD.w,X		; DD DD 93 ; Compare accumulator $93DD.w,X [Reads: X Index] [Flags: ZNC]
	sty $96.b,X		; 94 96 ; Store Y register $96.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $99DD.w,X		; DD DD 99 ; Compare accumulator $99DD.w,X [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta ($A1.b,S),Y		; 93 A1 ; Store accumulator (stack relative indirect indexed) ($A1.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cmp $99DD.w,X		; DD DD 99 ; Compare accumulator $99DD.w,X [Reads: X Index] [Flags: ZNC]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FFFF.l,X		; FF FF FF 01 ; Subtract with carry (long,X) $01FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b,X		; 15 14 ; OR accumulator with memory $14.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $31.b		; 04 31 ; Test and set bits $31.b [Reads: Accumulator] [Flags: Z]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $3B.b		; 02 3B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($3D.b,S),Y		; 33 3D ; AND accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $005250.l		; 4F 50 52 00 ; Exclusive OR accumulator with memory (long) $005250.l [Writes: Accumulator] [Flags: ZN]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $56.b		; 04 56 ; Test and set bits $56.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$2F.b]		; 27 2F ; AND accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $04.b,S		; 63 04 ; Add with carry (stack relative) $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $33.b,X		; 56 33 ; Logical shift right $33.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $2F.b		; 04 2F ; Test and set bits $2F.b [Reads: Accumulator] [Flags: Z]
	stz $00.b		; 64 00 ; Store zero to $00.b
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $41		; 30 41 ; Branch if minus to $30, $41 [Flow: branch]
	bit $70.b,X		; 34 70 ; Test bits $70.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $64, $09		; 62 64 09 ; Push effective relative address $62, $64, $09 [Writes: Stack Pointer]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $3319.w		; 6D 19 33 ; Add $3319.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora ($54.b,X)		; 01 54 ; Logical OR ($54.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $0000.w,X		; 3C 00 00 ; Test bits $0000.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rol $3319.w,X		; 3E 19 33 ; Rotate left $3319.w,X [Reads: X Index] [Flags: ZNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$5E6E.w		; 29 6E 5E ; Logical AND #$5E6E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$23.b],Y		; 57 23 ; Exclusive OR accumulator with memory (long indexed) [$23.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $26.b		; 46 26 ; Logical shift right $26.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$34.b]		; 47 34 ; Exclusive OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $5F.b,X		; 55 5F ; Exclusive OR accumulator with memory $5F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $041F.w		; 1C 1F 04 ; Test and reset bits $041F.w [Reads: Accumulator] [Flags: Z]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $005C40.l		; 6F 40 5C 00 ; Add with carry (long) $005C40.l [Writes: Accumulator] [Flags: ZVNC]
	brk $39.b		; 00 39 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $6132.w		; 6E 32 61 ; Rotate right $6132.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $04.b		; 64 04 ; Store zero to $04.b
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc #$0034.w		; 69 34 00 ; Add #$0034.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $51.b		; 00 51 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $56.b		; 04 56 ; Test and set bits $56.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$87.b],Y		; 17 87 ; OR accumulator with memory (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $67.b		; 86 67 ; Store X register to $67.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $87.b,X		; 34 87 ; Test bits $87.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	trb $09.b		; 14 09 ; Test and reset bits $09.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	bit $8D.b,X		; 34 8D ; Test bits $8D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stx $0000.w		; 8E 00 00 ; Store X register to $0000.w [Reads: X Index]
	bit $8F.b,X		; 34 8F ; Test bits $8F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta ($93.b),Y		; 91 93 ; Store accumulator ($93.b),Y [Reads: Accumulator, Direct Page, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($91.b)		; 92 91 ; Store accumulator (indirect) ($91.b) [Reads: Accumulator, Direct Page]
	adc #$0034.w		; 69 34 00 ; Add #$0034.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $9F.b,X		; 34 9F ; Test bits $9F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and #$00A8.w		; 29 A8 00 ; Logical AND #$00A8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $3534.w		; AC 34 35 ; Load $3534.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $97.b,X		; 34 97 ; Test bits $97.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2005B0.l,X		; 3F B0 05 20 ; AND accumulator with memory (long,X) $2005B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($B4.b,S),Y		; 33 B4 ; AND accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $0000.w		; 8C 00 00 ; Store Y register to $0000.w [Reads: Y Index]
	bit $B6.b,X		; 34 B6 ; Test bits $B6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc [$4F.b],Y		; 77 4F ; Add with carry (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rol $30.b		; 26 30 ; Rotate left $30.b [Reads: Direct Page] [Flags: ZNC]
	ror $0000.w		; 6E 00 00 ; Rotate right $0000.w [Flags: ZNC]
	lda $8101.w,X		; BD 01 81 ; Load $8101.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $97.b,X		; 34 97 ; Test bits $97.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $6EB0.w,X		; 3E B0 6E ; Rotate left $6EB0.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$3496.w		; 69 96 34 ; Add #$3496.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $0000.w,X		; 5E 00 00 ; Logical shift right $0000.w,X [Reads: X Index] [Flags: ZNC]
	adc ($41.b,S),Y		; 73 41 ; Add with carry (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($01.b,X)		; 81 01 ; Store accumulator ($01.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $21.b		; 04 21 ; Test and set bits $21.b [Reads: Accumulator] [Flags: Z]
	and $4B.b,X		; 35 4B ; Logical AND $4B.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $005F4B.l,X		; 3F 4B 5F 00 ; AND accumulator with memory (long,X) $005F4B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $005805.l,X		; 5F 05 58 00 ; Exclusive OR accumulator with memory (long,X) $005805.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $34		; 90 34 ; Branch if carry clear to $90, $34 [Flow: branch]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $6E		; 30 6E ; Branch if minus to $30, $6E [Flow: branch]
	and $00.b,X		; 35 00 ; Logical AND $00.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $78.b		; 65 78 ; Add $78.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$00C8.w		; C9 C8 00 ; Compare #$00C8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($D1.b),Y		; D1 D1 ; Compare accumulator ($D1.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($00.b)		; D2 00 ; Compare accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($4F.b,S),Y		; D3 4F ; Compare accumulator (stack relative indirect indexed) ($4F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jmp.w [$0000]		; DC 00 00 ; Jump long indirect [$0000] [Flow: jump]
	cmp $C8DC.w,X		; DD DC C8 ; Compare accumulator $C8DC.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($00.b)		; D2 00 ; Compare accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0202.w,Y		; BE 02 02 ; Load X register $0202.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($E2DA.w,X)		; 7C DA E2 ; Jump indirect indexed to ($E2DA.w,X) [Reads: X Index] [Flow: jump]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $D5.b		; E6 D5 ; Increment $D5.b [Reads: Direct Page] [Flags: ZN]
	bit $53.b,X		; 34 53 ; Test bits $53.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $E9.b,X		; 34 E9 ; Test bits $E9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	nop		; EA ; No operation
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $C434.w		; EC 34 C4 ; Compare $C434.w with X register [Reads: X Index] [Flags: ZNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$78.b]		; 07 78 ; OR accumulator with memory (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $34F0.w		; EE F0 34 ; Increment $34F0.w [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc ($F5.b,S),Y		; F3 F5 ; Subtract with carry (stack relative indirect indexed) ($F5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $0000.w		; F4 00 00 ; Push absolute address $0000.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	ldx $007E.w		; AE 7E 00 ; Load $007E.w into X register [Writes: X Index] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($02.b)		; F2 02 ; Subtract with carry (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	asl $D5.b		; 06 D5 ; Arithmetic shift left $D5.b [Reads: Direct Page] [Flags: ZNC]
	rol $11.b,X		; 36 11 ; Rotate left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$341D.w		; 89 1D 34 ; Test bits #$341D.w with accumulator [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$AE05.w		; 09 05 AE ; Logical OR #$AE05.w with accumulator [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $DA34.w		; 9C 34 DA ; Store zero to $DA34.w
	dec $0000.w		; CE 00 00 ; Decrement $0000.w [Flags: ZN]
	cmp $05.b		; C5 05 ; Compare $05.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora [$89.b]		; 07 89 ; OR accumulator with memory (long) [$89.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $7FAF.w		; 0D AF 7F ; Logical OR $7FAF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	ror $0C.b,X		; 76 0C ; Rotate right $0C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $E1.b		; C6 E1 ; Decrement $E1.b [Reads: Direct Page] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stx $9B36.w		; 8E 36 9B ; Store X register to $9B36.w [Reads: X Index]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $0F.b		; C5 0F ; Compare $0F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	asl $CE0D.w		; 0E 0D CE ; Arithmetic shift left $CE0D.w [Flags: ZNC]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1E.w,X		; 1D 1E 1C ; OR accumulator with memory $1C1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1111.w,X		; 1D 11 11 ; OR accumulator with memory $1111.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($21.b)		; 12 21 ; OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $1124.w		; 2C 24 11 ; Test bits $1124.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $342F.w		; 2E 2F 34 ; Rotate left $342F.w [Flags: ZNC]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $3130.w		; 2E 30 31 ; Rotate left $3130.w [Flags: ZNC]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $2C		; 10 2C ; Branch if plus to $10, $2C [Flow: branch]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3B.b,X		; 34 3B ; Test bits $3B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $1100.w,X		; 3C 00 11 ; Test bits $1100.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $3E3E.w,X		; 3D 3E 3E ; AND accumulator with memory $3E3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$1111.w		; 49 11 11 ; Exclusive OR #$1111.w with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($34.b,X)		; 41 34 ; Exclusive OR accumulator with memory ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($4C.b),Y		; 31 4C ; AND accumulator with memory ($4C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($33.b),Y		; 11 33 ; OR accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$5252.w		; 49 52 52 ; Exclusive OR #$5252.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $54		; 50 54 ; Branch if overflow clear to $50, $54 [Flow: branch]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($4C.b),Y		; 11 4C ; OR accumulator with memory ($4C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$1111.w		; 49 11 11 ; Exclusive OR #$1111.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvn $11,$12		; 54 12 11 ; Move block negative $11,$12 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($2B.b),Y		; 11 2B ; OR accumulator with memory ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($28.b),Y		; 11 28 ; OR accumulator with memory ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1F.b		; 14 1F ; Test and reset bits $1F.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $58.b,X		; 34 58 ; Test bits $58.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($23.b),Y		; 11 23 ; OR accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b		; 25 34 ; Logical AND $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $5B.b,X		; 34 5B ; Test bits $5B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $343441.l		; CF 41 34 34 ; Compare accumulator (long) $343441.l [Reads: Accumulator] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $62, $64, $66		; 62 64 66 ; Push effective relative address $62, $64, $66 [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $62.b,X		; 34 62 ; Test bits $62.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$776D.w		; C9 6D 77 ; Compare #$776D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $6570.w		; AC 70 65 ; Load $6570.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $1111.w,Y		; 39 11 11 ; AND accumulator with memory $1111.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $D3.b,X		; 34 D3 ; Test bits $D3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jmp ($D17D.w,X)		; 7C 7D D1 ; Jump indirect indexed to ($D17D.w,X) [Reads: X Index] [Flow: jump]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$6185.w		; C9 85 61 ; Compare #$6185.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $1101.w,Y		; 39 01 11 ; AND accumulator with memory $1101.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pei ($83.b)		; D4 83 ; Push effective indirect address ($83.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jmp.w [$01CA]		; DC CA 01 ; Jump long indirect [$01CA] [Flow: jump]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $CA.b,S		; E3 CA ; Subtract stack-relative $CA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $4E.b		; 86 4E ; Store X register to $4E.b [Reads: X Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $1111.w		; 4E 11 11 ; Logical shift right $1111.w [Flags: ZNC]
	bit $4E.b,X		; 34 4E ; Test bits $4E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($88.b)		; 12 88 ; OR accumulator with memory (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $8E8D.w		; 8C 8D 8E ; Store Y register to $8E8D.w [Reads: Y Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $201291.l		; 8F 91 12 20 ; Store accumulator (long) $201291.l [Reads: Accumulator]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1C.b),Y		; 11 1C ; OR accumulator with memory ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $9E9C.w,X		; 1D 9C 9E ; OR accumulator with memory $9E9C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $9C9D.w		; 9C 9D 9C ; Store zero to $9C9D.w
	sta ($11.b),Y		; 91 11 ; Store accumulator ($11.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($1D.b),Y		; 11 1D ; OR accumulator with memory ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $AFA8.w		; AC A8 AF ; Load $AFA8.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $1111.w,Y		; 79 11 11 ; Add $1111.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $17.b		; 26 17 ; Rotate left $17.b [Reads: Direct Page] [Flags: ZNC]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $303C.w,X		; 3D 3C 30 ; AND accumulator with memory $303C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($11.b,S),Y		; 93 11 ; Store accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora ($95.b),Y		; 11 95 ; OR accumulator with memory ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$B0.b],Y		; 97 B0 ; Store accumulator (long indexed) [$B0.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$11.b],Y		; 97 11 ; Store accumulator (long indexed) [$11.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($95.b),Y		; 11 95 ; OR accumulator with memory ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $1112.w,X		; 1E 12 11 ; Arithmetic shift left $1112.w,X [Reads: X Index] [Flags: ZNC]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $A5.b,X		; 34 A5 ; Test bits $A5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldy #$1110.w		; A0 10 11 ; Load #$1110.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $C0A1.w,X		; BD A1 C0 ; Load $C0A1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($11.b,X)		; A1 11 ; Load accumulator ($11.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($BD.b),Y		; 11 BD ; OR accumulator with memory ($BD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $79.b		; A4 79 ; Load $79.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.INDEX 16
	rep #$11		; C2 11
	ora ($C2.b),Y		; 11 C2 ; OR accumulator with memory ($C2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1C.b)		; 12 1C ; OR accumulator with memory (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$1011.w		; A9 11 10 ; Load #$1011.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$8D.b],Y		; D7 8D ; Compare accumulator (long indexed) [$8D.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy $1111.w		; CC 11 11 ; Compare $1111.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp [$DB.b],Y		; D7 DB ; Compare accumulator (long indexed) [$DB.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc $11A3.w,Y		; 79 A3 11 ; Add $11A3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($E9E8.w)		; 6C E8 E9 ; Jump indirect to ($E9E8.w) [Flow: jump]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $EB.b		; 06 EB ; Arithmetic shift left $EB.b [Reads: Direct Page] [Flags: ZNC]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $C5.b,S		; E3 C5 ; Subtract stack-relative $C5.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc $F2.b		; 65 F2 ; Add $F2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $6A.b,X		; 34 6A ; Test bits $6A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	ldy $C4.b		; A4 C4 ; Load $C4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	inc $10.b,X		; F6 10 ; Increment memory $10.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($AC.b,S),Y		; D3 AC ; Compare accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0503.w		; AC 03 05 ; Load $0503.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	jsl $C4D334.l		; 22 34 D3 C4 ; Jump to subroutine long $C4D334.l [Writes: Stack Pointer] [Flow: call]
	jmp ($0100.w,X)		; 7C 00 01 ; Jump indirect indexed to ($0100.w,X) [Reads: X Index] [Flow: jump]
	pea $865B.w		; F4 5B 86 ; Push absolute address $865B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $20.b		; C4 20 ; Compare $20.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and ($34.b,X)		; 21 34 ; Logical AND ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C5.b),Y		; 11 C5 ; OR accumulator with memory ($C5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $FF.b,X		; 34 FF ; Test bits $FF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $A3.b,X		; 34 A3 ; Test bits $A3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $05.b,X		; 34 05 ; Test bits $05.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B.b		; 05 0B ; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($1234.w,X)		; 7C 34 12 ; Jump indirect indexed to ($1234.w,X) [Reads: X Index] [Flow: jump]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	stz $C507.w,X		; 9E 07 C5 ; Store zero to $C507.w,X [Reads: X Index]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $4B.b		; C6 4B ; Decrement $4B.b [Reads: Direct Page] [Flags: ZN]
	and $01FE.w,Y		; 39 FE 01 ; AND accumulator with memory $01FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $FC.b,S		; A3 FC ; Load accumulator (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $50, $39		; 50 39 ; Branch if overflow clear to $50, $39 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$1010.w		; E9 10 10 ; Subtract #$1010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $1110.w		; 20 10 11 ; Jump to subroutine at $1110.w [Writes: Stack Pointer] [Flow: call]
	trb $11.b		; 14 11 ; Test and reset bits $11.b [Reads: Accumulator] [Flags: Z]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($2A.b),Y		; 11 2A ; OR accumulator with memory ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $111859.l,X		; 1F 59 18 11 ; Logical OR long $111859.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,S),Y		; 13 10 ; OR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$26		; C2 26
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($66.b),Y		; 11 66 ; OR accumulator with memory ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $2734.w		; 20 34 27 ; Jump to subroutine at $2734.w [Writes: Stack Pointer] [Flow: call]
	and #$011B.w		; 29 1B 01 ; Logical AND #$011B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b		; 25 34 ; Logical AND $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: ZN]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $10.b,X		; 36 10 ; Rotate left $10.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$11.b],Y		; 37 11 ; AND accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($36.b),Y		; 11 36 ; OR accumulator with memory ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1B.b,X		; 35 1B ; Logical AND $1B.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $342211.l,X		; 1F 11 22 34 ; Logical OR long $342211.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	ora ($47.b),Y		; 11 47 ; OR accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($B3.b),Y		; B1 B3 ; Load accumulator ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1B.b,X		; 35 1B ; Logical AND $1B.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $1234.w		; 20 34 12 ; Jump to subroutine at $1234.w [Writes: Stack Pointer] [Flow: call]
	jsr $324E.w		; 20 4E 32 ; Jump to subroutine at $324E.w [Writes: Stack Pointer] [Flow: call]
	and $1139.w		; 2D 39 11 ; Logical AND $1139.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($5D.b),Y		; 11 5D ; OR accumulator with memory ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($C9.b,X)		; 21 C9 ; Logical AND ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lsr $22C5.w		; 4E C5 22 ; Logical shift right $22C5.w [Flags: ZNC]
	ora ($02.b),Y		; 11 02 ; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $1110.w		; 4C 10 11 ; Jump to $1110.w [Flow: jump]
	ora ($1A.b),Y		; 11 1A ; OR accumulator with memory ($1A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $1223.w		; EC 23 12 ; Compare $1223.w with X register [Reads: X Index] [Flags: ZNC]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $1A2B.w		; 20 2B 1A ; Jump to subroutine at $1A2B.w [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $1310.w,Y		; 59 10 13 ; Exclusive OR accumulator with memory $1310.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $1211.w		; 20 11 12 ; Jump to subroutine at $1211.w [Writes: Stack Pointer] [Flow: call]
	ror $58.b		; 66 58 ; Rotate right $58.b [Reads: Direct Page] [Flags: ZNC]
	and #$1112.w		; 29 12 11 ; Logical AND #$1112.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($19.b),Y		; 11 19 ; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($2C.b)		; 12 2C ; OR accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $11.b		; C5 11 ; Compare $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	dec $12.b		; C6 12 ; Decrement $12.b [Reads: Direct Page] [Flags: ZN]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $1111.w		; 4D 11 11 ; Exclusive OR $1111.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	asl $1D.b,X		; 16 1D ; Arithmetic shift left $1D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3143.w		; 2C 43 31 ; Test bits $3143.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsl $241111.l		; 22 11 11 24 ; Jump to subroutine long $241111.l [Writes: Stack Pointer] [Flow: call]
	ora ($24.b,S),Y		; 13 24 ; OR accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $2111.w,Y		; 59 11 21 ; Exclusive OR accumulator with memory $2111.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $402C.w		; 4D 2C 40 ; Exclusive OR $402C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $1111.w		; 4E 11 11 ; Logical shift right $1111.w [Flags: ZNC]
	bit $1924.w		; 2C 24 19 ; Test bits $1924.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2516.w		; C9 16 25 ; Compare #$2516.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $13.b,X		; 34 13 ; Test bits $13.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor [$01.b],Y		; 57 01 ; Exclusive OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($57.b),Y		; 11 57 ; OR accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $11.b,X		; D5 11 ; Compare accumulator $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($34.b,X)		; 21 34 ; Logical AND ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $252B.w,X		; 1D 2B 25 ; OR accumulator with memory $252B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $C6D0.w		; CE D0 C6 ; Decrement $C6D0.w [Flags: ZN]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($C3.b,X)		; 01 C3 ; Logical OR ($C3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $DB.b,X		; 34 DB ; Test bits $DB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	cmp $C9DC.w,X		; DD DC C9 ; Compare accumulator $C9DC.w,X [Reads: X Index] [Flags: ZNC]
	lsr $0100.w,X		; 5E 00 01 ; Logical shift right $0100.w,X [Reads: X Index] [Flags: ZNC]
	eor $272534.l,X		; 5F 34 25 27 ; Exclusive OR accumulator with memory (long,X) $272534.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	cpx $E3.b		; E4 E3 ; Compare $E3.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp #$001C.w		; C9 1C 00 ; Compare #$001C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $2A.b		; 02 2A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $C921.w		; 1C 21 C9 ; Test and reset bits $C921.w [Reads: Accumulator] [Flags: Z]
	jsl $C9C920.l		; 22 20 C9 C9 ; Jump to subroutine long $C9C920.l [Writes: Stack Pointer] [Flow: call]
	ror $0053.w,X		; 7E 53 00 ; Rotate right $0053.w,X [Reads: X Index] [Flags: ZNC]
	ora ($53.b),Y		; 11 53 ; OR accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9DF.w		; C9 DF C9 ; Compare #$C9DF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	cmp $24C939.l,X		; DF 39 C9 24 ; Compare accumulator (long,X) $24C939.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($2E.b,S),Y		; 53 2E ; XOR accumulator (stack relative indirect indexed) ($2E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $12C9.w		; 2E C9 12 ; Rotate left $12C9.w [Flags: ZNC]
	jsr $C92D.w		; 20 2D C9 ; Jump to subroutine at $C92D.w [Writes: Stack Pointer] [Flow: call]
	and ($C9.b),Y		; 31 C9 ; AND accumulator with memory ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $10, $59		; 10 59 ; Branch if plus to $10, $59 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $14.b,X		; 34 14 ; Test bits $14.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $6218.w,Y		; 19 18 62 ; OR accumulator with memory $6218.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($22.b,S),Y		; 33 22 ; AND accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($33.b)		; 12 33 ; OR accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $60.b,X		; 34 60 ; Test bits $60.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $1C		; 10 1C ; Branch if plus to $10, $1C [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $62, $35, $21		; 62 35 21 ; Push effective relative address $62, $35, $21 [Writes: Stack Pointer]
	ora ($34.b)		; 12 34 ; OR accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $50.b,X		; 34 50 ; Test bits $50.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($20.b)		; 12 20 ; OR accumulator with memory (indirect) ($20.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($53.b),Y		; 11 53 ; OR accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit $CE.b,X		; 34 CE ; Test bits $CE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $ED.b,X		; 34 ED ; Test bits $ED.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($20.b),Y		; 31 20 ; AND accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	eor ($11.b,S),Y		; 53 11 ; XOR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b),Y		; 11 34 ; OR accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc OAMADDL.w		; ED 02 21 ; Subtract OAMADDL.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	bit $14.b,X		; 34 14 ; Test bits $14.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpx $0139.w		; EC 39 01 ; Compare $0139.w with X register [Reads: X Index] [Flags: ZNC]
	ora ($DB.b),Y		; 11 DB ; OR accumulator with memory ($DB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $34.b,X		; 76 34 ; Rotate right $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($53.b,X)		; 01 53 ; Logical OR ($53.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and [$10.b]		; 27 10 ; AND accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($4A.b,X)		; 01 4A ; Logical OR ($4A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $53C9.w,Y		; 39 C9 53 ; AND accumulator with memory $53C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $104B.w,X		; 3C 4B 10 ; Test bits $104B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($12.b,X)		; 21 12 ; Logical AND ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $274E.w		; 2C 4E 27 ; Test bits $274E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $12,$1F		; 54 1F 12 ; Move block negative $12,$1F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($3F.b,X)		; 61 3F ; Add with carry ($3F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $27		; 50 27 ; Branch if overflow clear to $50, $27 [Flow: branch]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2B.b)		; 32 2B ; AND accumulator with memory (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1157.w,Y		; 19 57 11 ; OR accumulator with memory $1157.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($3F.b),Y		; 11 3F ; OR accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($55.b,S),Y		; 53 55 ; XOR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $1121.w,Y		; 59 21 11 ; Exclusive OR accumulator with memory $1121.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $1855.w,Y		; 59 55 18 ; Exclusive OR accumulator with memory $1855.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $4B34.w		; 6E 34 4B ; Rotate right $4B34.w [Flags: ZNC]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $70.b,X		; 34 70 ; Test bits $70.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $3C.b		; 86 3C ; Store X register to $3C.b [Reads: X Index]
	adc ($05.b),Y		; 71 05 ; Add with carry ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $3347.w,X		; 5E 47 33 ; Logical shift right $3347.w,X [Reads: X Index] [Flags: ZNC]
	bit $0000.w,X		; 3C 00 00 ; Test bits $0000.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jmp $045E.w		; 4C 5E 04 ; Jump to $045E.w [Flow: jump]
	lsr $0000.w,X		; 5E 00 00 ; Logical shift right $0000.w,X [Reads: X Index] [Flags: ZNC]
	rol $19.b		; 26 19 ; Rotate left $19.b [Reads: Direct Page] [Flags: ZNC]
	sta ($55.b,X)		; 81 55 ; Store accumulator ($55.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $043B61.l		; 2F 61 3B 04 ; AND accumulator with memory (long) $043B61.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$66.b]		; 67 66 ; Add with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr $0000.w,X		; 5E 00 00 ; Logical shift right $0000.w,X [Reads: X Index] [Flags: ZNC]
	jmp $3304.w		; 4C 04 33 ; Jump to $3304.w [Flow: jump]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$2F.b],Y		; 17 2F ; OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00335E.l,X		; 3F 5E 33 00 ; AND accumulator with memory (long,X) $00335E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $04.b,Y		; B6 04 ; Load X register $04.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $4C2F.w,X		; 5D 2F 4C ; Exclusive OR accumulator with memory $4C2F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $04,$36		; 54 36 04 ; Move block negative $04,$36 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($3A.b),Y		; 71 3A ; Add with carry ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $4101.w		; 4C 01 41 ; Jump to $4101.w [Flow: jump]
	jmp ($0000.w)		; 6C 00 00 ; Jump indirect to ($0000.w) [Flow: jump]
	and $2A1465.l,X		; 3F 65 14 2A ; AND accumulator with memory (long,X) $2A1465.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $69.b,X		; 36 69 ; Rotate left $69.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $34.b,X		; 76 34 ; Rotate right $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $95.b,X		; 36 95 ; Rotate left $95.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $8B.b,X		; 34 8B ; Test bits $8B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor [$2A.b]		; 47 2A ; Exclusive OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($3434.w,X)		; 7C 34 34 ; Jump indirect indexed to ($3434.w,X) [Reads: X Index] [Flow: jump]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $1C4D.w		; 4E 4D 1C ; Logical shift right $1C4D.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $794140.l,X		; 1F 40 41 79 ; Logical OR long $794140.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; [PATTERN: Memory clearing operation] 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7B12.w,Y		; B9 12 7B ; Load $7B12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $0000.w,X		; 9E 00 00 ; Store zero to $0000.w,X [Reads: X Index]
	adc $2C10.w		; 6D 10 2C ; Add $2C10.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stz $0000.w,X		; 9E 00 00 ; Store zero to $0000.w,X [Reads: X Index]
	bit $AF.b,X		; 34 AF ; Test bits $AF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsb $007E.w		; 0C 7E 00 ; Test and set bits $007E.w [Reads: Accumulator] [Flags: Z]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($2A.b),Y		; B1 2A ; Load accumulator ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $1D1E.w,X		; 7D 1E 1D ; Add $1D1E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $411E.w		; 1C 1E 41 ; Test and reset bits $411E.w [Reads: Accumulator] [Flags: Z]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	tsb $41.b		; 04 41 ; Test and set bits $41.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp $5B0000.l		; 5C 00 00 5B ; Jump long to $5B0000.l [Flow: jump]
	ror $6934.w		; 6E 34 69 ; Rotate right $6934.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $70.b		; 04 70 ; Test and set bits $70.b [Reads: Accumulator] [Flags: Z]
	eor $25.b,S		; 43 25 ; Exclusive OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $3434.w,X		; 7D 34 34 ; Add $3434.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $0000.w		; 6E 00 00 ; Rotate right $0000.w [Flags: ZNC]
	adc $7307.w,Y		; 79 07 73 ; Add $7307.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $81.b,X		; 75 81 ; Add $81.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp ($B034.w,X)		; 7C 34 B0 ; Jump indirect indexed to ($B034.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$5378.w		; C9 78 53 ; Compare #$5378.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$2434.w		; E0 34 24 ; Compare #$2434.w with X register [Reads: X Index] [Flags: ZNC]
	cmp #$1000.w		; C9 00 10 ; Compare #$1000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $215B.w		; 2D 5B 21 ; Logical AND $215B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($2121.w)		; 6C 21 21 ; Jump indirect to ($2121.w) [Flow: jump]
	adc $5034.w		; 6D 34 50 ; Add $5034.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$2010]		; DC 10 20 ; Jump long indirect [$2010] [Flow: jump]
	adc $C9E7.w		; 6D E7 C9 ; Add $C9E7.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor ($11.b,S),Y		; 53 11 ; XOR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($53.b,X)		; 01 53 ; Logical OR ($53.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $37.b,S		; E3 37 ; Subtract stack-relative $37.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc BG2VOFS.w		; EE 10 21 ; Increment BG2VOFS.w [Flags: ZN]
	inc $3434.w		; EE 34 34 ; Increment $3434.w [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	lsr $76C4.w		; 4E C4 76 ; Logical shift right $76C4.w [Flags: ZNC]
	eor $10.b,S		; 43 10 ; Exclusive OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($4F.b),Y		; 11 4F ; OR accumulator with memory ($4F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $11CAC9.l,X		; 7F C9 CA 11 ; Add long $11CAC9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $C94152.l,X		; 7F 52 41 C9 ; Add long $C94152.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $21A4.w,X		; 9E A4 21 ; Store zero to $21A4.w,X [Reads: X Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $83.b,X		; 34 83 ; Test bits $83.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $1210.w,X		; 5D 10 12 ; Exclusive OR accumulator with memory $1210.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $415E.w,X		; 5D 5E 41 ; Exclusive OR accumulator with memory $415E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $611222.l,X		; 5F 22 12 61 ; Exclusive OR accumulator with memory (long,X) $611222.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $4F.b,X		; 34 4F ; Test bits $4F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $20.b,S		; 63 20 ; Add with carry (stack relative) $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora ($69.b)		; 12 69 ; OR accumulator with memory (indirect) ($69.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $226E.w		; 6D 6E 22 ; Add $226E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $52C95E.l		; 22 5E C9 52 ; Jump to subroutine long $52C95E.l [Writes: Stack Pointer] [Flow: call]
	jmp $721220.l		; 5C 20 12 72 ; Jump long to $721220.l [Flow: jump]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $20.b,X		; 74 20 ; Store zero to $20.b,X [Reads: X Index]
	cop $34.b		; 02 34 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$73.b],Y		; 77 73 ; Add with carry (long indexed) [$73.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $02.b,X		; 34 02 ; Test bits $02.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $0F34.w		; 20 34 0F ; Jump to subroutine at $0F34.w [Writes: Stack Pointer] [Flow: call]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3434.w,Y		; 39 34 34 ; AND accumulator with memory $3434.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $20.b,X		; 76 20 ; Rotate right $20.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $82, $DC, $01		; 82 DC 01 ; Branch always long to $82, $DC, $01 [Flow: branch]
	.db $10, $DC		; 10 DC ; Branch if plus to $10, $DC [Flow: branch]
	.db $50, $61		; 50 61 ; Branch if overflow clear to $50, $61 [Flow: branch]
	stz $01.b		; 64 01 ; Store zero to $01.b
	ora ($78.b)		; 12 78 ; OR accumulator with memory (indirect) ($78.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($6561.w)		; 6C 61 65 ; Jump indirect to ($6561.w) [Flow: jump]
	jsl $78C912.l		; 22 12 C9 78 ; Jump to subroutine long $78C912.l [Writes: Stack Pointer] [Flow: call]
	adc $0278.w,X		; 7D 78 02 ; Add $0278.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $7A7881.l		; 22 81 78 7A ; Jump to subroutine long $7A7881.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $C48322.l		; 22 22 83 C4 ; Jump to subroutine long $C48322.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta $5B.b,S		; 83 5B ; Store accumulator (stack relative) $5B.b,S [Reads: Accumulator, Stack Pointer]
	jsl $787821.l		; 22 21 78 78 ; Jump to subroutine long $787821.l [Writes: Stack Pointer] [Flow: call]
	adc $CA.b		; 65 CA ; Add $CA.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $8A5B20.l		; 22 20 5B 8A ; Jump to subroutine long $8A5B20.l [Writes: Stack Pointer] [Flow: call]
	adc $8B.b		; 65 8B ; Add $8B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $8D.b		; 65 8D ; Add $8D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $842222.l		; 6F 22 22 84 ; Add with carry (long) $842222.l [Writes: Accumulator] [Flags: ZVNC]
	cmp ($8F.b),Y		; D1 8F ; Compare accumulator ($8F.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr $6522.w		; 20 22 65 ; Jump to subroutine at $6522.w [Writes: Stack Pointer] [Flow: call]
	cmp #$F21D.w		; C9 1D F2 ; Compare #$F21D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $7811.w		; 20 11 78 ; Jump to subroutine at $7811.w [Writes: Stack Pointer] [Flow: call]
	bit #$805D.w		; 89 5D 80 ; Test bits #$805D.w with accumulator [Reads: Accumulator] [Flags: Z]
	jsl $927822.l		; 22 22 78 92 ; Jump to subroutine long $927822.l [Writes: Stack Pointer] [Flow: call]
	trb $22E3.w		; 1C E3 22 ; Test and reset bits $22E3.w [Reads: Accumulator] [Flags: Z]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	sta $78.b		; 85 78 ; Store accumulator to $78.b [Reads: Accumulator]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta $30.b,S		; 83 30 ; Store accumulator (stack relative) $30.b,S [Reads: Accumulator, Stack Pointer]
	jsl $973421.l		; 22 21 34 97 ; Jump to subroutine long $973421.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$02.b],Y		; 97 02 ; Store accumulator (long indexed) [$02.b],Y [Reads: Accumulator, Direct Page, Y Index]
	jsl $979A9A.l		; 22 9A 9A 97 ; Jump to subroutine long $979A9A.l [Writes: Stack Pointer] [Flow: call]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $9D34.w		; 20 34 9D ; Jump to subroutine at $9D34.w [Writes: Stack Pointer] [Flow: call]
	bit $023C.w,X		; [PATTERN: Memory clearing operation] 3C 3C 02 ; Test bits $023C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora ($3C.b),Y		; 11 3C ; OR accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $A0A0.w,X		; 9E A0 A0 ; Store zero to $A0A0.w,X [Reads: X Index]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $2734.w,X		; 9E 34 27 ; Store zero to $2734.w,X [Reads: X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $7912.w		; 20 12 79 ; Jump to subroutine at $7912.w [Writes: Stack Pointer] [Flow: call]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $39.b,S		; 83 39 ; Store accumulator (stack relative) $39.b,S [Reads: Accumulator, Stack Pointer]
	jsl $7F8521.l		; 22 21 85 7F ; Jump to subroutine long $7F8521.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $65		; 80 65 ; Branch always to $80, $65 [Flow: branch]
	jsl $63C922.l		; 22 22 C9 63 ; Jump to subroutine long $63C922.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $64.b		; 65 64 ; Add $64.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $786422.l		; 22 22 64 78 ; Jump to subroutine long $786422.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	and ($A5.b,X)		; 21 A5 ; Logical AND ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $8B8A6A.l,X		; 7F 6A 8A 8B ; Add long $8B8A6A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $D07822.l		; 22 22 78 D0 ; Jump to subroutine long $D07822.l [Writes: Stack Pointer] [Flow: call]
	jmp ($207E.w,X)		; 7C 7E 20 ; Jump indirect indexed to ($207E.w,X) [Reads: X Index] [Flow: jump]
	jsl $787878.l		; 22 78 78 78 ; Jump to subroutine long $787878.l [Writes: Stack Pointer] [Flow: call]
	sty $2222.w		; 8C 22 22 ; Store Y register to $2222.w [Reads: Y Index]
	and [$8F.b],Y		; 37 8F ; AND accumulator with memory (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $5E7878.l		; 22 78 78 5E ; Jump to subroutine long $5E7878.l [Writes: Stack Pointer] [Flow: call]
	jmp $2E2222.l		; 5C 22 22 2E ; Jump long to $2E2222.l [Flow: jump]
	and $228334.l		; 2F 34 83 22 ; AND accumulator with memory (long) $228334.l [Writes: Accumulator] [Flags: ZN]
	ora ($DF.b,X)		; 01 DF ; Logical OR ($DF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$C9E0.w		; C9 E0 C9 ; Compare #$C9E0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $4B.b		; 86 4B ; Store X register to $4B.b [Reads: X Index]
	dec $34.b		; C6 34 ; Decrement $34.b [Reads: Direct Page] [Flags: ZN]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy VMDATALREAD.w		; AC 39 21 ; Load VMDATALREAD.w into Y register [Writes: Y Index] [Flags: ZN]
	jsl $766D27.l		; 22 27 6D 76 ; Jump to subroutine long $766D27.l [Writes: Stack Pointer] [Flow: call]
.INDEX 16
	rep #$11		; C2 11
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $12346C.l		; AF 6C 34 12 ; Load long $12346C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $4B		; 10 4B ; Branch if plus to $10, $4B [Flow: branch]
	ldx $B0E8.w		; AE E8 B0 ; Load $B0E8.w into X register [Writes: X Index] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	bit $CA.b,X		; 34 CA ; Test bits $CA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($34.b,X)		; 61 34 ; Add with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $78.b,X		; 34 78 ; Test bits $78.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	adc $C983.w		; 6D 83 C9 ; Add $C983.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	cop $63.b		; 02 63 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $1C		; 90 1C ; Branch if carry clear to $90, $1C [Flow: branch]
	and [$12.b]		; 27 12 ; AND accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($63.b),Y		; 11 63 ; OR accumulator with memory ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $65.b		; 64 65 ; Store zero to $65.b
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $A834.w		; 20 34 A8 ; Jump to subroutine at $A834.w [Writes: Stack Pointer] [Flow: call]
	and $0285.w,Y		; 39 85 02 ; AND accumulator with memory $0285.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $83786D.l		; 22 6D 78 83 ; Jump to subroutine long $83786D.l [Writes: Stack Pointer] [Flow: call]
	eor $A42122.l		; 4F 22 21 A4 ; Exclusive OR accumulator with memory (long) $A42122.l [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsl $23C522.l		; 22 22 C5 23 ; Jump to subroutine long $23C522.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $B8.b,Y		; B6 B8 ; Load X register $B8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $2222.w,Y		; B9 22 22 ; Load $2222.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$5B.b],Y		; 57 5B ; Exclusive OR accumulator with memory (long indexed) [$5B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($BB.b),Y		; 31 BB ; AND accumulator with memory ($BB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($12.b,X)		; 21 12 ; Logical AND ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $752D.w,X		; BC 2D 75 ; Load Y register $752D.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda [$21.b],Y		; B7 21 ; Load accumulator (long indexed) [$21.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B7.b)		; 12 B7 ; OR accumulator with memory (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $31.b		; C4 31 ; Compare $31.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $20.b		; C6 20 ; Decrement $20.b [Reads: Direct Page] [Flags: ZN]
	ora ($C8.b)		; 12 C8 ; OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $CEC5.w		; CE C5 CE ; Decrement $CEC5.w [Flags: ZN]
	jsr $CA22.w		; 20 22 CA ; Jump to subroutine at $CA22.w [Writes: Stack Pointer] [Flow: call]
	.db $D0, $D2		; D0 D2 ; Branch if not equal to $D0, $D2 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($05.b,X)		; 21 05 ; Logical AND ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$53.b]		; 07 53 ; OR accumulator with memory (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($11.b),Y		; D1 11 ; Compare accumulator ($11.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora ($CD.b)		; 12 CD ; OR accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CA.b,X		; D5 CA ; Compare accumulator $CA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $22.b		; C6 22 ; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $22C6.w		; CE C6 22 ; Decrement $22C6.w [Flags: ZN]
	jsr $D102.w		; 20 02 D1 ; Jump to subroutine at $D102.w [Writes: Stack Pointer] [Flow: call]
	cmp ($CD.b)		; D2 CD ; Compare accumulator (indirect) ($CD.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $22.b,X		; D5 22 ; Compare accumulator $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $C8D2D0.l		; 22 D0 D2 C8 ; Jump to subroutine long $C8D2D0.l [Writes: Stack Pointer] [Flow: call]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsl $D0CE22.l		; 22 22 CE D0 ; Jump to subroutine long $D0CE22.l [Writes: Stack Pointer] [Flow: call]
	dec $DD.b		; C6 DD ; Decrement $DD.b [Reads: Direct Page] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C9D2.w,Y		; D9 D2 C9 ; Compare accumulator $C9D2.w,Y [Reads: Y Index] [Flags: ZNC]
	eor $2122.w,X		; 5D 22 21 ; Exclusive OR accumulator with memory $2122.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $C4DE.w,X		; 5E DE C4 ; Logical shift right $C4DE.w,X [Reads: X Index] [Flags: ZNC]
	cpx $12.b		; E4 12 ; Compare $12.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$C9.b]		; C7 C9 ; Compare accumulator (long) [$C9.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $E6E5.w		; 20 E5 E6 ; Jump to subroutine at $E6E5.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsl $CDCA20.l		; 22 20 CA CD ; Jump to subroutine long $CDCA20.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $DD2202.l,X		; DF 02 22 DD ; Compare accumulator (long,X) $DD2202.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp [$F0.b]		; C7 F0 ; Compare accumulator (long) [$F0.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $F3F1.w		; 20 F1 F3 ; Jump to subroutine at $F3F1.w [Writes: Stack Pointer] [Flow: call]
	sbc $EE.b,X		; F5 EE ; Subtract $EE.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $C4CA22.l		; 22 22 CA C4 ; Jump to subroutine long $C4CA22.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $F9F9.w		; CD F9 F9 ; Compare $F9F9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $2222.w		; CD 22 22 ; Compare $2222.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $F585F0.l,X		; DF F0 85 F5 ; Compare accumulator (long,X) $F585F0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	jsl $CAEE12.l		; 22 12 EE CA ; Jump to subroutine long $CAEE12.l [Writes: Stack Pointer] [Flow: call]
	cmp $0220F8.l		; CF F8 20 02 ; Compare accumulator (long) $0220F8.l [Reads: Accumulator] [Flags: ZNC]
	dec $CD.b,X		; D6 CD ; Decrement memory $CD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cmp $22C8.w		; CD C8 22 ; Compare $22C8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $5C34C9.l		; 22 C9 34 5C ; Jump to subroutine long $5C34C9.l [Writes: Stack Pointer] [Flow: call]
	sbc $1220.w,X		; FD 20 12 ; Subtract with carry $1220.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FE.b		; E6 FE ; Increment $FE.b [Reads: Direct Page] [Flags: ZN]
	cmp $0222C5.l		; CF C5 22 02 ; Compare accumulator (long) $0222C5.l [Reads: Accumulator] [Flags: ZNC]
	cmp $04CD.w		; CD CD 04 ; Compare $04CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($E1.b,S),Y		; 33 E1 ; AND accumulator (stack relative indirect indexed) ($E1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($73.b)		; 72 73 ; Add with carry (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $21.b,S		; 63 21 ; Add with carry (stack relative) $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $0D.b		; E6 0D ; Increment $0D.b [Reads: Direct Page] [Flags: ZN]
	ora $113332.l		; 0F 32 33 11 ; OR accumulator with memory (long) $113332.l [Writes: Accumulator] [Flags: ZN]
	sbc $E6E6.w,X		; FD E6 E6 ; Subtract with carry $E6E6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($22.b)		; 32 22 ; AND accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$E6.b]		; 07 E6 ; OR accumulator with memory (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$B9.b],Y		; B7 B9 ; Load accumulator (long indexed) [$B9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($22.b)		; 32 22 ; AND accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $17E6.w,X		; FD E6 17 ; Subtract with carry $17E6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $3322.w,Y		; 19 22 33 ; OR accumulator with memory $3322.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	trb $22E6.w		; 1C E6 22 ; Test and reset bits $22E6.w [Reads: Accumulator] [Flags: Z]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $1ECF.w		; CD CF 1E ; Compare $1ECF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($23.b)		; 12 23 ; OR accumulator with memory (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $2071.w,X		; FE 71 20 ; Increment memory $2071.w,X [Reads: X Index] [Flags: ZN]
	and $21.b,S		; 23 21 ; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($F1.b,S),Y		; 33 F1 ; AND accumulator (stack relative indirect indexed) ($F1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $51C5.w,X		; FE C5 51 ; Increment memory $51C5.w,X [Reads: X Index] [Flags: ZN]
	jsl $D4CD01.l		; 22 01 CD D4 ; Jump to subroutine long $D4CD01.l [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc #$0122.w		; E9 22 01 ; Subtract #$0122.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc ($E6.b),Y		; 71 E6 ; Add with carry ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc #$12D2.w		; E9 D2 12 ; Subtract #$12D2.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $D1		; 10 D1 ; Branch if plus to $10, $D1 [Flow: branch]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($23.b)		; D4 23 ; Push effective indirect address ($23.b) [Reads: Direct Page] [Writes: Stack Pointer]
	and ($E6.b)		; 32 E6 ; AND accumulator with memory (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $31		; 30 31 ; Branch if minus to $30, $31 [Flow: branch]
	eor ($A9.b,S),Y		; 53 A9 ; XOR accumulator (stack relative indirect indexed) ($A9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($30.b),Y		; F1 30 ; Subtract with carry ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $D7.b		; 00 D7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($BE.b),Y		; F1 BE ; Subtract with carry ($BE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $0000.w		; 4E 00 00 ; Logical shift right $0000.w [Flags: ZNC]
	cmp $3434.w,Y		; D9 34 34 ; Compare accumulator $3434.w,Y [Reads: Y Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta [$30.b]		; 87 30 ; Store accumulator (long) [$30.b] [Reads: Accumulator, Direct Page]
	jsr $34D9.w		; 20 D9 34 ; Jump to subroutine at $34D9.w [Writes: Stack Pointer] [Flow: call]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $34.b		; 86 34 ; Store X register to $34.b [Reads: X Index]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($3B.b,S),Y		; 53 3B ; XOR accumulator (stack relative indirect indexed) ($3B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $F2.b,X		; 34 F2 ; Test bits $F2.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $77.b,X		; B5 77 ; Load $77.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $1000.w,Y		; BE 00 10 ; Load X register $1000.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp #$3B39.w		; C9 39 3B ; Compare #$3B39.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $3303.w,X		; 3C 03 33 ; Test bits $3303.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $453F.w,X		; 3D 3F 45 ; AND accumulator with memory $453F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $33.b		; 46 33 ; Logical shift right $33.b [Reads: Direct Page] [Flags: ZNC]
	and ($48.b,S),Y		; 33 48 ; AND accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $31336A.l,X		; 3F 6A 33 31 ; AND accumulator with memory (long,X) $31336A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$59.b],Y		; 57 59 ; Exclusive OR accumulator with memory (long indexed) [$59.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $3333.w,X		; 5D 33 33 ; Exclusive OR accumulator with memory $3333.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $F1.b,X		; 34 F1 ; Test bits $F1.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lsr $0034.w		; 4E 34 00 ; Logical shift right $0034.w [Flags: ZNC]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$3369.w		; A9 69 33 ; Load #$3369.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $34.b		; 02 34 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $76.b,X		; 75 76 ; Add $76.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$3476.w		; A9 76 34 ; Load #$3476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $03.b,X		; 34 03 ; Test bits $03.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($03.b,S),Y		; 73 03 ; Add with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($80.b,S),Y		; 33 80 ; AND accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $337D73.l,X		; 7F 73 7D 33 ; Add long $337D73.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($7E.b,S),Y		; 33 7E ; AND accumulator (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $A9.b,X		; 34 A9 ; Test bits $A9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $30.b,X		; 36 30 ; Rotate left $30.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $7E.b,X		; 36 7E ; Rotate left $7E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $82, $30, $33		; 82 30 33 ; Branch always long to $82, $30, $33 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda #$007A.w		; A9 7A 00 ; Load #$007A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $0030.w,X		; 9E 30 00 ; Store zero to $0030.w,X [Reads: X Index]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $A334.w,X		; 7E 34 A3 ; Rotate right $A334.w,X [Reads: X Index] [Flags: ZNC]
	sta $9F0030.l,X		; 9F 30 00 9F ; Store accumulator (long,X) $9F0030.l,X [Reads: Accumulator, X Index]
	sta $009F9F.l,X		; 9F 9F 9F 00 ; Store accumulator (long,X) $009F9F.l,X [Reads: Accumulator, X Index]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $9F1111.l,X		; FF 11 11 9F ; Subtract with carry (long,X) $9F1111.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $0000.w		; AC 00 00 ; Load $0000.w into Y register [Writes: Y Index] [Flags: ZN]
	lsr $C3.b,X		; 56 C3 ; Logical shift right $C3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ora [$CD.b]		; 07 CD ; OR accumulator with memory (long) [$CD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $D1.b		; 86 D1 ; Store X register to $D1.b [Reads: X Index]
	adc $87.b,X		; 75 87 ; Add $87.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	dec $87.b,X		; D6 87 ; Decrement memory $87.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta [$03.b]		; 87 03 ; Store accumulator (long) [$03.b] [Reads: Accumulator, Direct Page]
	and ($EE.b,S),Y		; 33 EE ; AND accumulator (stack relative indirect indexed) ($EE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $123471.l		; 0F 71 34 12 ; OR accumulator with memory (long) $123471.l [Writes: Accumulator] [Flags: ZN]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $34FA.w		; F4 FA 34 ; Push absolute address $34FA.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	jsl $393610.l		; 22 10 36 39 ; Jump to subroutine long $393610.l [Writes: Stack Pointer] [Flow: call]
	bit $8D.b,X		; 34 8D ; Test bits $8D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $39.b,X		; 36 39 ; Rotate left $39.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($0F.b,S),Y		; 73 0F ; Add with carry (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($DA.b,S),Y		; 73 DA ; Add with carry (stack relative indirect indexed) ($DA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $33		; 30 33 ; Branch if minus to $30, $33 [Flow: branch]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8E.b,S),Y		; 73 8E ; Add with carry (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($83.b,X)		; E1 83 ; Subtract with carry ($83.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($34.b,S),Y		; 73 34 ; Add with carry (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $037EDA.l		; 8F DA 7E 03 ; Store accumulator (long) $037EDA.l [Reads: Accumulator]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $90, $DA		; 90 DA ; Branch if carry clear to $90, $DA [Flow: branch]
	adc ($03.b,S),Y		; 73 03 ; Add with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $39.b,S		; 03 39 ; OR accumulator with stack relative $39.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($7E.b,S),Y		; 73 7E ; Add with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($23.b,S),Y		; 73 23 ; Add with carry (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($DA.b,S),Y		; 33 DA ; AND accumulator (stack relative indirect indexed) ($DA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $908E.w,X		; 7E 8E 90 ; Rotate right $908E.w,X [Reads: X Index] [Flags: ZNC]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $8E90.w		; 8E 90 8E ; Store X register to $8E90.w [Reads: X Index]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $90		; 30 90 ; Branch if minus to $30, $90 [Flow: branch]
	ror $8E82.w,X		; 7E 82 8E ; Rotate right $8E82.w,X [Reads: X Index] [Flags: ZNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $0DDA.w		; 8E DA 0D ; Store X register to $0DDA.w [Reads: X Index]
	sty $1330.w		; 8C 30 13 ; Store Y register to $1330.w [Reads: Y Index]
	.db $90, $34		; 90 34 ; Branch if carry clear to $90, $34 [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	rol $30.b,X		; 36 30 ; Rotate left $30.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $30, $36		; 30 36 ; Branch if minus to $30, $36 [Flow: branch]
	sty $8E8E.w		; 8C 8E 8E ; Store Y register to $8E8E.w [Reads: Y Index]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $90, $9E		; 90 9E ; Branch if carry clear to $90, $9E [Flow: branch]
	lda ($90.b,X)		; A1 90 ; Load accumulator ($90.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $90, $34		; 90 34 ; Branch if carry clear to $90, $34 [Flow: branch]
	adc ($7A.b),Y		; 71 7A ; Add with carry ($7A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ror $3333.w,X		; 7E 33 33 ; Rotate right $3333.w,X [Reads: X Index] [Flags: ZNC]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $FF.b		; A5 FF ; Load $FF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $34AD9F.l,X		; 9F 9F AD 34 ; Store accumulator (long,X) $34AD9F.l,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($13.b),Y		; 31 13 ; AND accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2D.b,S),Y		; 13 2D ; OR accumulator (stack relative indirect indexed) ($2D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $31CF.w,X		; 7E CF 31 ; Rotate right $31CF.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	cpy $C5CF.w		; CC CF C5 ; Compare $C5CF.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $34D402.l		; 22 02 D4 34 ; Jump to subroutine long $34D402.l [Writes: Stack Pointer] [Flow: call]
	jmp.w [$2078]		; DC 78 20 ; Jump long indirect [$2078] [Flow: jump]
	ora ($CD.b,X)		; 01 CD ; Logical OR ($CD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $53D4.w		; CD D4 53 ; Compare $53D4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $27C821.l		; 22 21 C8 27 ; Jump to subroutine long $27C821.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $CD		; D0 CD ; Branch if not equal to $D0, $CD [Flow: branch]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $CDCD.w		; CD CD CD ; Compare $CDCD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pei ($22.b)		; D4 22 ; Push effective indirect address ($22.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $39DCD1.l		; 22 D1 DC 39 ; Jump to subroutine long $39DCD1.l [Writes: Stack Pointer] [Flow: call]
	sbc $1122.w		; ED 22 11 ; Subtract $1122.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and [$85.b]		; 27 85 ; AND accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $35.b		; 04 35 ; Test and set bits $35.b [Reads: Accumulator] [Flags: Z]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $7D.b,X		; 35 7D ; Logical AND $7D.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $EE.b,S		; 83 EE ; Store accumulator (stack relative) $EE.b,S [Reads: Accumulator, Stack Pointer]
	ora $31.b,S		; 03 31 ; OR accumulator with stack relative $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$D197]		; DC 97 D1 ; Jump long indirect [$D197] [Flow: jump]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	and $71.b,S		; 23 71 ; AND accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $D6.b		; 84 D6 ; Store Y register to $D6.b [Reads: Y Index]
	cpx $03.b		; E4 03 ; Compare $03.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $39342D.l		; 22 2D 34 39 ; Jump to subroutine long $39342D.l [Writes: Stack Pointer] [Flow: call]
	ror $1310.w,X		; 7E 10 13 ; Rotate right $1310.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($F8.b)		; F2 F8 ; Subtract with carry (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $12CD.w		; CD CD 12 ; Compare $12CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $61C9D8.l		; 22 D8 C9 61 ; Jump to subroutine long $61C9D8.l [Writes: Stack Pointer] [Flow: call]
	adc $1120.w,Y		; 79 20 11 ; Add $1120.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$CD.b]		; 27 CD ; AND accumulator with memory (long) [$CD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$32D5]		; DC D5 32 ; Jump long indirect [$32D5] [Flow: jump]
	jsl $26FF24.l		; 22 24 FF 26 ; Jump to subroutine long $26FF24.l [Writes: Stack Pointer] [Flow: call]
	rol $11.b,X		; 36 11 ; Rotate left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($F7.b)		; 12 F7 ; OR accumulator with memory (indirect) ($F7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $37CE.w		; CD CE 37 ; Compare $37CE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $AE9B22.l		; 22 22 9B AE ; Jump to subroutine long $AE9B22.l [Writes: Stack Pointer] [Flow: call]
	lda #$00AE.w		; A9 AE 00 ; Load #$00AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$CD.b],Y		; F7 CD ; Subtract with carry (long indexed) [$CD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $2222.w		; CD 22 22 ; Compare $2222.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $899F.w		; CE 9F 89 ; Decrement $899F.w [Flags: ZN]
	lda #$0023.w		; A9 23 00 ; Load #$0023.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit #$CD31.w		; 89 31 CD ; Test bits #$CD31.w with accumulator [Reads: Accumulator] [Flags: Z]
	dec $2201.w		; CE 01 22 ; Decrement $2201.w [Flags: ZN]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp $41.b,X		; D5 41 ; Compare accumulator $41.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $9AA9.w		; 9C A9 9A ; Store zero to $9AA9.w
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $FF31.w,X		; 7E 31 FF ; Rotate right $FF31.w,X [Reads: X Index] [Flags: ZNC]
	adc $31.b,S		; 63 31 ; Add with carry (stack relative) $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and ($04.b,X)		; 21 04 ; Logical AND ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($12.b,X)		; 41 12 ; Exclusive OR accumulator with memory ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $B783.w		; 2D 83 B7 ; Logical AND $B783.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $CDC6.w		; CD C6 CD ; Compare $CDC6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($20.b),Y		; D1 20 ; Compare accumulator ($20.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsr $C913.w		; 20 13 C9 ; Jump to subroutine at $C913.w [Writes: Stack Pointer] [Flow: call]
	lda [$DC.b],Y		; B7 DC ; Load accumulator (long indexed) [$DC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	jmp.w [$B71D]		; DC 1D B7 ; Jump long indirect [$B71D] [Flow: jump]
	cmp #$2023.w		; C9 23 20 ; Compare #$2023.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda [$56.b],Y		; B7 56 ; Load accumulator (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $211D.w		; CD 1D 21 ; Compare $211D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $DC.b,S		; 23 DC ; AND accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $2525.w		; CD 25 25 ; Compare $2525.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $27CD33.l		; 22 33 CD 27 ; Jump to subroutine long $27CD33.l [Writes: Stack Pointer] [Flow: call]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $A533.w		; CD 33 A5 ; Compare $A533.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $ED		; 30 ED ; Branch if minus to $30, $ED [Flow: branch]
	cmp $34.b		; C5 34 ; Compare $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and $12.b,X		; 35 12 ; Logical AND $12.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($A6.b),Y		; F1 A6 ; Subtract with carry ($A6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($25.b)		; 32 25 ; AND accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $D4.b		; 04 D4 ; Test and set bits $D4.b [Reads: Accumulator] [Flags: Z]
	cmp $33.b,X		; D5 33 ; Compare accumulator $33.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($A8.b),Y		; 11 A8 ; OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $33.b		; A6 33 ; Load $33.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $347135.l		; 22 35 71 34 ; Jump to subroutine long $347135.l [Writes: Stack Pointer] [Flow: call]
	stx $20.b		; 86 20 ; Store X register to $20.b [Reads: X Index]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $34.b		; 86 34 ; Store X register to $34.b [Reads: X Index]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $67.b,S		; 03 67 ; OR accumulator with stack relative $67.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $35.b,X		; 36 35 ; Rotate left $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $AE		; 30 AE ; Branch if minus to $30, $AE [Flow: branch]
	.db $B0, $6F		; B0 6F ; Branch if carry set to $B0, $6F [Flow: branch]
	adc ($33.b),Y		; 71 33 ; Add with carry ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($36.b,S),Y		; 33 36 ; AND accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $CE6E.w,X		; 9D 6E CE ; Store accumulator to $CE6E.w,X [Reads: Accumulator, X Index]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $B8.b,Y		; B6 B8 ; Load X register $B8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($36.b,X)		; 01 36 ; Logical OR ($36.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $BCCE.w,X		; 9D CE BC ; Store accumulator to $BCCE.w,X [Reads: Accumulator, X Index]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $3434.w,Y		; BE 34 34 ; Load X register $3434.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	dec $0030.w		; CE 30 00 ; Decrement $0030.w [Flags: ZN]
	and $1A.b,X		; 35 1A ; Logical AND $1A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $CE.b		; C4 CE ; Compare $CE.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora $00F1.w,Y		; 19 F1 00 ; OR accumulator with memory $00F1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $0536.w		; 20 36 05 ; Jump to subroutine at $0536.w [Writes: Stack Pointer] [Flow: call]
	and $71.b,X		; 35 71 ; Logical AND $71.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $D5.b,X		; 34 D5 ; Test bits $D5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda ($35.b),Y		; B1 35 ; Load accumulator ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $C258.w		; CE 58 C2 ; Decrement $C258.w [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b),Y		; 11 19 ; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $62.b,X		; 34 62 ; Test bits $62.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ora ($35.b,S),Y		; 13 35 ; OR accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $02.b,X		; 35 02 ; Logical AND $02.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $580CE0.l		; 22 E0 0C 58 ; Jump to subroutine long $580CE0.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$23		; C2 23
	ora ($34.b,S),Y		; 13 34 ; OR accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: ZN]
	and ($C6.b,S),Y		; 33 C6 ; AND accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	stx $33.b		; 86 33 ; Store X register to $33.b [Reads: X Index]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	jmp ($D0CE.w,X)		; 7C CE D0 ; Jump indirect indexed to ($D0CE.w,X) [Reads: X Index] [Flow: jump]
	ora ($33.b),Y		; 11 33 ; OR accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $C9		; D0 C9 ; Branch if not equal to $D0, $C9 [Flow: branch]
	dec $33D6.w		; CE D6 33 ; Decrement $33D6.w [Flags: ZN]
	.db $30, $4F		; 30 4F ; Branch if minus to $30, $4F [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $01C9.w		; 4E C9 01 ; Logical shift right $01C9.w [Flags: ZNC]
	ora ($D4.b,S),Y		; 13 D4 ; OR accumulator (stack relative indirect indexed) ($D4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9C9.w		; C9 C9 C9 ; Compare #$C9C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	lsr $DC39.w		; 4E 39 DC ; Logical shift right $DC39.w [Flags: ZNC]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp #$0300.w		; C9 00 03 ; Compare #$0300.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $EC.b,X		; 34 EC ; Test bits $EC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $03EE.w		; EE EE 03 ; Increment $03EE.w [Flags: ZN]
	and ($EF.b,S),Y		; 33 EF ; AND accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	sbc ($33.b,S),Y		; F3 33 ; Subtract with carry (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $E334.w		; CE 34 E3 ; Decrement $E334.w [Flags: ZN]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F0.b,S		; E3 F0 ; Subtract stack-relative $F0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($FD.b)		; F2 FD ; Subtract with carry (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $EA00.w,X		; FE 00 EA ; Increment memory $EA00.w,X [Reads: X Index] [Flags: ZN]
	cmp ($34.b)		; D2 34 ; Compare accumulator (indirect) ($34.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($D2.b,S),Y		; 33 D2 ; AND accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($33.b)		; D2 33 ; Compare accumulator (indirect) ($33.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($D2.b,S),Y		; 33 D2 ; AND accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($34.b)		; D2 34 ; Compare accumulator (indirect) ($34.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($04.b,S),Y		; 33 04 ; AND accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $360E.w		; 0D 0E 36 ; Logical OR $360E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $44		; 10 44 ; Branch if plus to $10, $44 [Flow: branch]
	tsb $11.b		; 04 11 ; Test and set bits $11.b [Reads: Accumulator] [Flags: Z]
	ora ($CE.b)		; 12 CE ; OR accumulator with memory (indirect) ($CE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
	and ($D1.b,S),Y		; 33 D1 ; AND accumulator (stack relative indirect indexed) ($D1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $30.b,X		; 15 30 ; OR accumulator with memory $30.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $17.b		; 04 17 ; Test and set bits $17.b [Reads: Accumulator] [Flags: Z]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	mvp $1F,$44		; 44 44 1F ; Move block positive $1F,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc ($F6.b,X)		; E1 F6 ; Subtract with carry ($F6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and ($CA.b,S),Y		; 33 CA ; AND accumulator (stack relative indirect indexed) ($CA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $3321.w		; 1C 21 33 ; Test and reset bits $3321.w [Reads: Accumulator] [Flags: Z]
	mvp $C6,$C6		; 44 C6 C6 ; Move block positive $C6,$C6 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($1C.b)		; D2 1C ; Compare accumulator (indirect) ($1C.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $CF.b,X		; 34 CF ; Test bits $CF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $27.b,X		; F5 27 ; Subtract $27.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $4034A9.l,X		; 1F A9 34 40 ; Logical OR long $4034A9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1C.b,X		; 35 1C ; Logical AND $1C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $001D.w,X		; 1E 1D 00 ; Arithmetic shift left $001D.w,X [Reads: X Index] [Flags: ZNC]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$9CE1.w		; A9 E1 9C ; Load #$9CE1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $1311.w,X		; 9D 11 13 ; Store accumulator to $1311.w,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta $0A.b,S		; 83 0A ; Store accumulator (stack relative) $0A.b,S [Reads: Accumulator, Stack Pointer]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pei ($2D.b)		; D4 2D ; Push effective indirect address ($2D.b) [Reads: Direct Page] [Writes: Stack Pointer]
	inc $E1.b,X		; F6 E1 ; Increment memory $E1.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $D793.w		; CE 93 D7 ; Decrement $D793.w [Flags: ZN]
	jmp.w [$3333]		; DC 33 33 ; Jump long indirect [$3333] [Flow: jump]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $44.b,X		; F6 44 ; Increment memory $44.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor $26.b,S		; 43 26 ; Exclusive OR accumulator with stack relative $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $CE.b		; 26 CE ; Rotate left $CE.b [Reads: Direct Page] [Flags: ZNC]
	lsr $44.b,X		; 56 44 ; Logical shift right $44.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($1C.b),Y		; 31 1C ; AND accumulator with memory ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b,S		; 23 34 ; AND accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $44.b,X		; 35 44 ; Logical AND $44.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($CD.b),Y		; 31 CD ; AND accumulator with memory ($CD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$01.b],Y		; F7 01 ; Subtract with carry (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $34CE86.l		; 22 86 CE 34 ; Jump to subroutine long $34CE86.l [Writes: Stack Pointer] [Flow: call]
	sbc [$13.b],Y		; F7 13 ; Subtract with carry (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $D2.b		; 02 D2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($33.b)		; D2 33 ; Compare accumulator (indirect) ($33.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($D2.b,S),Y		; 33 D2 ; AND accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($CA.b)		; D2 CA ; Compare accumulator (indirect) ($CA.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $3333.w		; CC 33 33 ; Compare $3333.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $0ACA.w		; CC CA 0A ; Compare $0ACA.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($CF.b,S),Y		; 13 CF ; OR accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9C3.w		; C9 C3 C9 ; Compare #$C9C3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$340A.w		; C9 0A 34 ; Compare #$340A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and [$31.b],Y		; 37 31 ; AND accumulator with memory (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp #$34C9.w		; C9 C9 34 ; Compare #$34C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($3C.b),Y		; 51 3C ; Exclusive OR accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14C9.w		; 1C C9 14 ; Test and reset bits $14C9.w [Reads: Accumulator] [Flags: Z]
	eor $C9.b,S		; 43 C9 ; Exclusive OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $EE.b,X		; 34 EE ; Test bits $EE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp ($30.b),Y		; D1 30 ; Compare accumulator ($30.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora ($1C.b)		; 12 1C ; OR accumulator with memory (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $C9.b,X		; 34 C9 ; Test bits $C9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $3240.w,X		; 9D 40 32 ; Store accumulator to $3240.w,X [Reads: Accumulator, X Index]
	.db $42, $27		; 42 27 ; Reserved instruction
	cmp #$4434.w		; C9 34 44 ; Compare #$4434.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	ora $E776.w,X		; 1D 76 E7 ; OR accumulator with memory $E776.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	and $E8.b		; 25 E8 ; Logical AND $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$11.b]		; 27 11 ; AND accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $34.b,X		; 95 34 ; Store accumulator to $34.b,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $82.b,S		; 83 82 ; Store accumulator (stack relative) $82.b,S [Reads: Accumulator, Stack Pointer]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$CD.b]		; 27 CD ; AND accumulator with memory (long) [$CD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $01.b,X		; 76 01 ; Rotate right $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr $76F1.w		; 20 F1 76 ; Jump to subroutine at $76F1.w [Writes: Stack Pointer] [Flow: call]
	and [$45.b]		; 27 45 ; AND accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $9B.b,X		; 36 9B ; Rotate left $9B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and [$34.b]		; 27 34 ; AND accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$D4.b]		; 27 D4 ; AND accumulator with memory (long) [$D4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $12.b,X		; 34 12 ; Test bits $12.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $3434.w		; 20 34 34 ; Jump to subroutine at $3434.w [Writes: Stack Pointer] [Flow: call]
	bit #$001D.w		; 89 1D 00 ; Test bits #$001D.w with accumulator [Reads: Accumulator] [Flags: Z]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($94.b),Y		; 11 94 ; OR accumulator with memory ($94.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$10.b]		; 27 10 ; AND accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C5.b,X)		; 01 C5 ; Logical OR ($C5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $222763.l,X		; FF 63 27 22 ; Subtract with carry (long,X) $222763.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($24.b,S),Y		; 13 24 ; OR accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$8B36.w		; 89 36 8B ; Test bits #$8B36.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($CE.b,X)		; 01 CE ; Logical OR ($CE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $0B.b		; 46 0B ; Logical shift right $0B.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor [$4A.b]		; 47 4A ; Exclusive OR accumulator with memory (long) [$4A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp $4244.w		; CD 44 42 ; Compare $4244.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpx $4E.b		; E4 4E ; Compare $4E.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	bit $44.b		; 24 44 ; Test bits $44.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor ($4F.b)		; 52 4F ; Exclusive OR accumulator with memory (indirect) ($4F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $27,$44		; 44 44 27 ; Move block positive $27,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $5C5B.w		; 4E 5B 5C ; Logical shift right $5C5B.w [Flags: ZNC]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $5C5F.w,X		; 5D 5F 5C ; Exclusive OR accumulator with memory $5C5F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($44.b,X)		; 61 44 ; Add with carry ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $5C,$5A		; 44 5A 5C ; Move block positive $5C,$5A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $6D.b,S		; 63 6D ; Add with carry (stack relative) $6D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	mvp $B0,$44		; 44 44 B0 ; Move block positive $B0,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $706F.w		; 4E 6F 70 ; Logical shift right $706F.w [Flags: ZNC]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	adc ($74.b)		; 72 74 ; Add with carry (indirect) ($74.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $57.b,X		; 76 57 ; Rotate right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvp $58,$44		; 44 44 58 ; Move block positive $58,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc ($4E.b)		; F2 4E ; Subtract with carry (indirect) ($4E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvn $44,$40		; 54 40 44 ; Move block negative $44,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $4E6765.l,X		; 7F 65 67 4E ; Add long $4E6765.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $85,$44		; 44 44 85 ; Move block positive $85,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta [$88.b]		; 87 88 ; Store accumulator (long) [$88.b] [Reads: Accumulator, Direct Page]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $8B,$44		; 44 44 8B ; Move block positive $8B,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stx $8D.b		; 86 8D ; Store X register to $8D.b [Reads: X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	mvp $6E,$44		; 44 44 6E ; Move block positive $6E,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $449896.l		; 8F 96 98 44 ; Store accumulator (long) $449896.l [Reads: Accumulator]
	mvp $70,$62		; 44 62 70 ; Move block positive $70,$62 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $44D6.w,Y		; 99 D6 44 ; Store accumulator to $44D6.w,Y [Reads: Accumulator, Y Index]
	.db $42, $F2		; 42 F2 ; Reserved instruction
	ror $4EF0.w		; 6E F0 4E ; Rotate right $4EF0.w [Flags: ZNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	adc $525170.l		; 6F 70 51 52 ; Add with carry (long) $525170.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $CD,$44		; 44 44 CD ; Move block positive $CD,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $7334.w		; 2D 34 73 ; Logical AND $7334.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($04.b,X)		; 21 04 ; Logical AND ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $58.b,X		; 76 58 ; Rotate right $58.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $7E,$31		; 44 31 7E ; Move block positive $7E,$31 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $443454.l,X		; 7F 54 34 44 ; Add long $443454.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $67.b		; 65 67 ; Add $67.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $A8.b,X		; 34 A8 ; Test bits $A8.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	mvp $AA,$04		; 44 04 AA ; Move block positive $AA,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ror $ADB1.w,X		; 7E B1 AD ; Rotate right $ADB1.w,X [Reads: X Index] [Flags: ZNC]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($B3.b)		; B2 B3 ; Load accumulator (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $448F.w		; 6E 8F 44 ; Rotate right $448F.w [Flags: ZNC]
	mvp $34,$B6		; 44 B6 34 ; Move block positive $34,$B6 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda ($DC.b),Y		; B1 DC ; Load accumulator ($DC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $42, $F2		; 42 F2 ; Reserved instruction
	lsr $349D.w		; 4E 9D 34 ; Logical shift right $349D.w [Flags: ZNC]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $00F2.w		; CD F2 00 ; Compare $00F2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $706F.w		; 20 6F 70 ; Jump to subroutine at $706F.w [Writes: Stack Pointer] [Flow: call]
	sta $44BE.w,X		; 9D BE 44 ; Store accumulator to $44BE.w,X [Reads: Accumulator, X Index]
	mvp $6E,$34		; 44 34 6E ; Move block positive $6E,$34 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp ($6E.b,X)		; C1 6E ; Compare accumulator ($6E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	cpy $34.b		; C4 34 ; Compare $34.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp [$51.b]		; C7 51 ; Compare accumulator (long) [$51.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	mvp $31,$C8		; 44 C8 31 ; Move block positive $31,$C8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $41CD.w		; CD CD 41 ; Compare $41CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $CDCDCD.l		; 22 CD CD CD ; Jump to subroutine long $CDCDCD.l [Writes: Stack Pointer] [Flow: call]
	wai		; CB ; Wait for interrupt
	jsl $5CC224.l		; 22 24 C2 5C ; Jump to subroutine long $5CC224.l [Writes: Stack Pointer] [Flow: call]
	cpy $44CE.w		; CC CE 44 ; Compare $44CE.w with Y register [Reads: Y Index] [Flags: ZNC]
	mvp $F8,$9A		; 44 9A F8 ; Move block positive $F8,$9A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $32D0.w		; CD D0 32 ; Compare $32D0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $75.b		; 24 75 ; Test bits $75.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc [$C1.b],Y		; 77 C1 ; Add with carry (long indexed) [$C1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $344444.l		; 8F 44 44 34 ; Store accumulator (long) $344444.l [Reads: Accumulator]
	lda $7E69.w		; AD 69 7E ; Load $7E69.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($44.b,S),Y		; 33 44 ; AND accumulator (stack relative indirect indexed) ($44.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $D2		; 80 D2 ; Branch always to $80, $D2 [Flow: branch]
	sta $4470.w,X		; 9D 70 44 ; Store accumulator to $4470.w,X [Reads: Accumulator, X Index]
	bit $87.b		; 24 87 ; Test bits $87.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $4044F0.l,X		; 9F F0 44 40 ; Store accumulator (long,X) $4044F0.l,X [Reads: Accumulator, X Index]
	asl $9D34.w		; 0E 34 9D ; Arithmetic shift left $9D34.w [Flags: ZNC]
	.db $70, $10		; 70 10 ; Branch if overflow set to $70, $10 [Flow: branch]
	bit $70.b		; 24 70 ; Test bits $70.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc $C262.w,Y		; 79 62 C2 ; Add $C262.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $F0,$44		; 44 44 F0 ; Move block positive $F0,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp.w [$049D]		; DC 9D 04 ; Jump long indirect [$049D] [Flow: jump]
	.db $42, $51		; 42 51 ; Reserved instruction
	ror $E18F.w		; 6E 8F E1 ; Rotate right $E18F.w [Flags: ZNC]
	mvp $4E,$44		; 44 44 4E ; Move block positive $4E,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $0240.w,X		; 9D 40 02 ; Store accumulator to $0240.w,X [Reads: Accumulator, X Index]
	dec $E5.b,X		; D6 E5 ; Decrement memory $E5.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	adc $75.b,X		; 75 75 ; Add $75.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $44.b		; 24 44 ; Test bits $44.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc [$F0.b],Y		; 77 F0 ; Add with carry (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sep #$40		; E2 40 ; Set processor status bits #$40 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	mvp $E7,$AD		; 44 AD E7 ; Move block positive $E7,$AD [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($CD.b),Y		; 51 CD ; Exclusive OR accumulator with memory ($CD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($12.b),Y		; 31 12 ; AND accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$807E.w		; 69 7E 80 ; Add #$807E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $4444.w,X		; 7E 44 44 ; Rotate right $4444.w,X [Reads: X Index] [Flags: ZNC]
	cmp $7E.b		; C5 7E ; Compare $7E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lsr $43EE.w		; 4E EE 43 ; Logical shift right $43EE.w [Flags: ZNC]
	eor ($ED.b,X)		; 41 ED ; Exclusive OR accumulator with memory ($ED.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $449DF1.l		; EF F1 9D 44 ; Subtract with carry (long) $449DF1.l [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $CD		; 42 CD ; Reserved instruction
	sbc ($EF.b,S),Y		; F3 EF ; Subtract with carry (stack relative indirect indexed) ($EF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $AD,$E2		; 44 E2 AD ; Move block positive $AD,$E2 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ldy $6F.b,X		; B4 6F ; Load Y register $6F.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $01.b,X		; B5 01 ; Load $01.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$34.b],Y		; F7 34 ; Subtract with carry (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $70,$40		; 44 40 70 ; Move block positive $70,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $F8F1.w		; CD F1 F8 ; Compare $F8F1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $42, $44		; 42 44 ; Reserved instruction
	ldy $706E.w		; AC 6E 70 ; Load $706E.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $9D4444.l		; 8F 44 44 9D ; Store accumulator (long) $9D4444.l [Reads: Accumulator]
	sbc $01FF.w,X		; FD FF 01 ; Subtract with carry $01FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $45.b		; 24 45 ; Test bits $45.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stx $02C0.w		; 8E C0 02 ; Store X register to $02C0.w [Reads: X Index]
	sbc $045444.l,X		; FF 44 54 04 ; Subtract with carry (long,X) $045444.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp $54.b		; C5 54 ; Compare $54.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	mvp $34,$13		; 44 13 34 ; Move block positive $34,$13 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $A3.b,X		; 34 A3 ; Test bits $A3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $3400.w		; 20 00 34 ; Jump to subroutine at $3400.w [Writes: Stack Pointer] [Flow: call]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $FB		; 10 FB ; Branch if plus to $10, $FB [Flow: branch]
	adc $344B.w,Y		; 79 4B 34 ; Add $344B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $CD79CE.l		; 0F CE 79 CD ; OR accumulator with memory (long) $CD79CE.l [Writes: Accumulator] [Flags: ZN]
	jsr $AF12.w		; 20 12 AF ; Jump to subroutine at $AF12.w [Writes: Stack Pointer] [Flow: call]
	ora ($79.b,S),Y		; 13 79 ; OR accumulator (stack relative indirect indexed) ($79.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $2DCD.w		; CD CD 2D ; Compare $2DCD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	trb $1022.w		; 1C 22 10 ; Test and reset bits $1022.w [Reads: Accumulator] [Flags: Z]
	dec $FFC6.w		; CE C6 FF ; Decrement $FFC6.w [Flags: ZN]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $539B2D.l		; 0F 2D 9B 53 ; OR accumulator with memory (long) $539B2D.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $95		; 10 95 ; Branch if plus to $10, $95 [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $C4.b		; 02 C4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($CE34.w,X)		; 7C 34 CE ; Jump indirect indexed to ($CE34.w,X) [Reads: X Index] [Flow: jump]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $AC.b		; C6 AC ; Decrement $AC.b [Reads: Direct Page] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b,X		; 15 14 ; OR accumulator with memory $14.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor $11.b,X		; 55 11 ; Exclusive OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $1F31.w		; AC 31 1F ; Load $1F31.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $9F5501.l,X		; 1F 01 55 9F ; Logical OR long $9F5501.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $E4.b,X		; 34 E4 ; Test bits $E4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $2000.w		; CE 00 20 ; Decrement $2000.w [Flags: ZN]
	adc ($E7.b),Y		; 71 E7 ; Add with carry ($E7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($D4.b,S),Y		; 53 D4 ; XOR accumulator (stack relative indirect indexed) ($D4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $EB6C80.l,X		; 3F 80 6C EB ; AND accumulator with memory (long,X) $EB6C80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($11.b,X)		; 21 11 ; Logical AND ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($56.b)		; D4 56 ; Push effective indirect address ($56.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora $21.b,X		; 15 21 ; OR accumulator with memory $21.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $56.b,X		; 94 56 ; Store Y register $56.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	bit $F9.b		; 24 F9 ; Test bits $F9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($52.b),Y		; 31 52 ; AND accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$1734.w		; A0 34 17 ; Load #$1734.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($90.b,S),Y		; 33 90 ; AND accumulator (stack relative indirect indexed) ($90.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $2222.w,X		; FE 22 22 ; Increment memory $2222.w,X [Reads: X Index] [Flags: ZN]
	sbc $9F9F.w,X		; FD 9F 9F ; Subtract with carry $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $20.b		; 26 20 ; Rotate left $20.b [Reads: Direct Page] [Flags: ZNC]
	ora $C9.b		; 05 C9 ; Logical OR $C9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$EDE6.w		; 29 E6 ED ; Logical AND #$EDE6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	and #$22C9.w		; 29 C9 22 ; Logical AND #$22C9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $50, $E6		; 50 E6 ; Branch if overflow clear to $50, $E6 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $25F4.w		; 2C F4 25 ; Test bits $25F4.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	eor ($2E.b)		; 52 2E ; Exclusive OR accumulator with memory (indirect) ($2E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $2F2F.w		; 2C 2F 2F ; Test bits $2F2F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta [$55.b]		; 87 55 ; Store accumulator (long) [$55.b] [Reads: Accumulator, Direct Page]
	eor ($87.b,S),Y		; 53 87 ; XOR accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$33.b]		; 87 33 ; Store accumulator (long) [$33.b] [Reads: Accumulator, Direct Page]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $87.b,X		; 55 87 ; Exclusive OR accumulator with memory $87.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($37.b)		; 32 37 ; AND accumulator with memory (indirect) ($37.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $3A.b,X		; 55 3A ; Exclusive OR accumulator with memory $3A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $3A.b		; E6 3A ; Increment $3A.b [Reads: Direct Page] [Flags: ZN]
	eor $25.b,X		; 55 25 ; Exclusive OR accumulator with memory $25.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $2A37.w,Y		; 39 37 2A ; AND accumulator with memory $2A37.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2F.b)		; 32 2F ; AND accumulator with memory (indirect) ($2F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $553E.w		; 2D 3E 55 ; Logical AND $553E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C9.b,X		; 55 C9 ; Exclusive OR accumulator with memory $C9.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($2A.b,X)		; 41 2A ; Exclusive OR accumulator with memory ($2A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$05.b]		; 87 05 ; Store accumulator (long) [$05.b] [Reads: Accumulator, Direct Page]
	eor ($87.b,S),Y		; 53 87 ; XOR accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$43.b]		; 87 43 ; Store accumulator (long) [$43.b] [Reads: Accumulator, Direct Page]
	eor $33.b,S		; 43 33 ; Exclusive OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $EC.b,X		; 55 EC ; Exclusive OR accumulator with memory $EC.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $48.b,X		; 35 48 ; Logical AND $48.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$4A3A.w		; 49 3A 4A ; Exclusive OR #$4A3A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $5555.w,Y		; 39 55 55 ; AND accumulator with memory $5555.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$4D.b],Y		; 37 4D ; AND accumulator with memory (long indexed) [$4D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $55554F.l		; 4F 4F 55 55 ; Exclusive OR accumulator with memory (long) $55554F.l [Writes: Accumulator] [Flags: ZN]
	eor ($37.b),Y		; 51 37 ; Exclusive OR accumulator with memory ($37.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5A.b)		; 52 5A ; Exclusive OR accumulator with memory (indirect) ($5A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $555E5D.l		; 5C 5D 5E 55 ; Jump long to $555E5D.l [Flow: jump]
	eor $E5.b,X		; 55 E5 ; Exclusive OR accumulator with memory $E5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($37.b)		; 32 37 ; AND accumulator with memory (indirect) ($37.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $25.b,S		; 63 25 ; Add with carry (stack relative) $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $60.b,X		; 55 60 ; Exclusive OR accumulator with memory $60.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $5D.b		; 66 5D ; Rotate right $5D.b [Reads: Direct Page] [Flags: ZNC]
	lsr $55.b,X		; 56 55 ; Logical shift right $55.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $E5.b,X		; 55 E5 ; Exclusive OR accumulator with memory $E5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	jmp ($256D.w)		; 6C 6D 25 ; Jump indirect to ($256D.w) [Flow: jump]
	eor $6E.b,X		; 55 6E ; Exclusive OR accumulator with memory $6E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $5D, $5E		; 62 5D 5E ; Push effective relative address $62, $5D, $5E [Writes: Stack Pointer]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($6F.b)		; 32 6F ; AND accumulator with memory (indirect) ($6F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and [$55.b],Y		; 37 55 ; AND accumulator with memory (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $70.b,X		; 55 70 ; Exclusive OR accumulator with memory $70.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $E6,$EC		; 54 EC E6 ; Move block negative $E6,$EC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $22.b,X		; 55 22 ; Exclusive OR accumulator with memory $22.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $EC2A.w,Y		; 39 2A EC ; AND accumulator with memory $EC2A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $742555.l		; 6F 55 25 74 ; Add with carry (long) $742555.l [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $52.b,X		; 76 52 ; Rotate right $52.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $2A.b		; 25 2A ; Logical AND $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $3A.b		; E6 3A ; Increment $3A.b [Reads: Direct Page] [Flags: ZN]
	eor $25.b,X		; 55 25 ; Exclusive OR accumulator with memory $25.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc [$55.b],Y		; 77 55 ; Add with carry (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $58.b,X		; 55 58 ; Exclusive OR accumulator with memory $58.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and #$553A.w		; 29 3A 55 ; Logical AND #$553A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $1F.b,X		; 35 1F ; Logical AND $1F.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$3331.w		; 29 31 33 ; Logical AND #$3331.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $292D.w		; 2C 2D 29 ; Test bits $292D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $35.b,X		; 55 35 ; Exclusive OR accumulator with memory $35.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3640AB.l,X		; 3F AB 40 36 ; AND accumulator with memory (long,X) $3640AB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $55		; 50 55 ; Branch if overflow clear to $50, $55 [Flow: branch]
	cmp #$7B34.w		; C9 34 7B ; Compare #$7B34.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $5255.w,X		; FE 55 52 ; Increment memory $5255.w,X [Reads: X Index] [Flags: ZN]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	adc $336D.w,Y		; 79 6D 33 ; Add $336D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FE.b,X		; 55 FE ; Exclusive OR accumulator with memory $FE.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $85.b		; 86 85 ; Store X register to $85.b [Reads: X Index]
	sta [$25.b]		; 87 25 ; Store accumulator (long) [$25.b] [Reads: Accumulator, Direct Page]
	eor $7F.b,X		; 55 7F ; Exclusive OR accumulator with memory $7F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $FE.b		; 86 FE ; Store X register to $FE.b [Reads: X Index]
	cpx $2255.w		; EC 55 22 ; Compare $2255.w with X register [Reads: X Index] [Flags: ZNC]
	and $6DFE.w,Y		; 39 FE 6D ; AND accumulator with memory $6DFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($52.b)		; 92 52 ; Store accumulator (indirect) ($52.b) [Reads: Accumulator, Direct Page]
	eor $94.b,X		; 55 94 ; Exclusive OR accumulator with memory $94.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($95.b,S),Y		; 93 95 ; Store accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	inc $5255.w,X		; FE 55 52 ; Increment memory $5255.w,X [Reads: X Index] [Flags: ZN]
	stx $98.b,Y		; 96 98 ; Store X register $98.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $5255.w,X		; FE 55 52 ; Increment memory $5255.w,X [Reads: X Index] [Flags: ZN]
	adc $9A6D.w		; 6D 6D 9A ; Add $9A6D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $9A.b,X		; 95 9A ; Store accumulator to $9A.b,X [Reads: Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $5555.w		; 6D 55 55 ; Add $5555.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	inc $57C4.w,X		; FE C4 57 ; Increment memory $57C4.w,X [Reads: X Index] [Flags: ZN]
	stz $20.b,X		; 74 20 ; Store zero to $20.b,X [Reads: X Index]
	eor $A2.b,X		; 55 A2 ; Exclusive OR accumulator with memory $A2.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6D.b,X		; 75 6D ; Add $6D.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $55		; 30 55 ; Branch if minus to $30, $55 [Flow: branch]
	eor $6D.b,X		; 55 6D ; Exclusive OR accumulator with memory $6D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6D2A.w,X		; 7D 2A 6D ; Add $6D2A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6D6D.w		; 6D 6D 6D ; Add $6D6D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $5555.w		; 6D 55 55 ; Add $5555.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $DCFE.w		; 6D FE DC ; Add $DCFE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor $20.b,X		; 55 20 ; Exclusive OR accumulator with memory $20.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $A9FE.w		; 6D FE A9 ; Add $A9FE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $5552.w		; 2C 52 55 ; Test bits $5552.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $30, $2C		; 30 2C ; Branch if minus to $30, $2C [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc $5555.w,X		; 7D 55 55 ; Add $5555.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $EE.b		; E6 EE ; Increment $EE.b [Reads: Direct Page] [Flags: ZN]
	sta [$30.b]		; 87 30 ; Store accumulator (long) [$30.b] [Reads: Accumulator, Direct Page]
	jsl $878735.l		; 22 35 87 87 ; Jump to subroutine long $878735.l [Writes: Stack Pointer] [Flow: call]
	cpy $E6.b		; C4 E6 ; Compare $E6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and ($02.b,S),Y		; 33 02 ; AND accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $84.b		; E6 84 ; Increment $84.b [Reads: Direct Page] [Flags: ZN]
	cpy $E6.b		; C4 E6 ; Compare $E6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and $02.b		; 25 02 ; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $A32C.w,X		; FE 2C A3 ; Increment memory $A32C.w,X [Reads: X Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $DC.b		; E6 DC ; Increment $DC.b [Reads: Direct Page] [Flags: ZN]
	jmp.w [$2087]		; DC 87 20 ; Jump long indirect [$2087] [Flow: jump]
	ora $36.b,S		; 03 36 ; OR accumulator with stack relative $36.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$55.b]		; 47 55 ; Exclusive OR accumulator with memory (long) [$55.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $E6.b,X		; 55 E6 ; Exclusive OR accumulator with memory $E6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	inc $22.b		; E6 22 ; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	jsl $7D8727.l		; 22 27 87 7D ; Jump to subroutine long $7D8727.l [Writes: Stack Pointer] [Flow: call]
	cpx $5253.w		; EC 53 52 ; Compare $5253.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $E629.w		; EC 29 E6 ; Compare $E629.w with X register [Reads: X Index] [Flags: ZNC]
	inc $2223.w,X		; FE 23 22 ; Increment memory $2223.w,X [Reads: X Index] [Flags: ZN]
	rol $EC.b,X		; 36 EC ; Rotate left $EC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $52C4.w,X		; 7D C4 52 ; Add $52C4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $3A		; 50 3A ; Branch if overflow clear to $50, $3A [Flow: branch]
	jmp.w [$3333]		; DC 33 33 ; Jump long indirect [$3333] [Flow: jump]
	.db $50, $55		; 50 55 ; Branch if overflow clear to $50, $55 [Flow: branch]
	sta [$42.b]		; 87 42 ; Store accumulator (long) [$42.b] [Reads: Accumulator, Direct Page]
	rol $E6.b,X		; 36 E6 ; Rotate left $E6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $52.b,X		; 35 52 ; Logical AND $52.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$33.b]		; 27 33 ; AND accumulator with memory (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $36.b		; E6 36 ; Increment $36.b [Reads: Direct Page] [Flags: ZN]
	eor $20.b,X		; 55 20 ; Exclusive OR accumulator with memory $20.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $CA.b,X		; F6 CA ; Increment memory $CA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $CA.b		; C6 CA ; Decrement $CA.b [Reads: Direct Page] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $CDCC.w		; CD CC CD ; Compare $CDCC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B3.b		; 05 B3 ; Logical OR $B3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $EB.b,X		; B5 EB ; Load $EB.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $55.b,X		; F6 55 ; Increment memory $55.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora $B9.b,S		; 03 B9 ; OR accumulator with stack relative $B9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ldy $55F7.w,X		; BC F7 55 ; Load Y register $55F7.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $F6		; 50 F6 ; Branch if overflow clear to $50, $F6 [Flow: branch]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	cmp $D13333.l		; CF 33 33 D1 ; Compare accumulator (long) $D13333.l [Reads: Accumulator] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr ($30FE.w,X)		; FC FE 30 ; Jump to subroutine indirect indexed ($30FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $42.b,X		; 34 42 ; Test bits $42.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $CA,$CA		; 44 CA CA ; Move block positive $CA,$CA [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc ($D0.b,S),Y		; F3 D0 ; Subtract with carry (stack relative indirect indexed) ($D0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	and ($35.b,S),Y		; 33 35 ; AND accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($CA.b,S),Y		; F3 CA ; Subtract with carry (stack relative indirect indexed) ($CA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor ($55.b,S),Y		; 53 55 ; XOR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $79.b		; C6 79 ; Decrement $79.b [Reads: Direct Page] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F7.b,X		; F5 F7 ; Subtract $F7.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00EE.w		; ED EE 00 ; Subtract $00EE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $3414.w		; AC 14 34 ; Load $3414.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $004434.l,X		; FF 34 44 00 ; Subtract with carry (long,X) $004434.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $1A.b,X		; 36 1A ; Rotate left $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $0B.b,X		; 34 0B ; Test bits $0B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $EA.b,X		; 34 EA ; Test bits $EA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $30.b		; C6 30 ; Decrement $30.b [Reads: Direct Page] [Flags: ZN]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	ror $1A.b		; 66 1A ; Rotate right $1A.b [Reads: Direct Page] [Flags: ZNC]
	bit #$2001.w		; 89 01 20 ; Test bits #$2001.w with accumulator [Reads: Accumulator] [Flags: Z]
	trb $C876.w		; 1C 76 C8 ; Test and reset bits $C876.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	eor $32.b,X		; 55 32 ; Exclusive OR accumulator with memory $32.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp ($CB.b)		; D2 CB ; Compare accumulator (indirect) ($CB.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bit $43.b,X		; 34 43 ; Test bits $43.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $AC.b,X		; 34 AC ; Test bits $AC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $05CE.w		; CC CE 05 ; Compare $05CE.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor $EC.b,X		; 55 EC ; Exclusive OR accumulator with memory $EC.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$B136.w		; C9 36 B1 ; Compare #$B136.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($B7.b,S),Y		; B3 B7 ; Load accumulator (stack relative indirect indexed) ($B7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $B8		; F0 B8 ; Branch if equal to $F0, $B8 [Flow: branch]
	eor $05.b,X		; 55 05 ; Exclusive OR accumulator with memory $05.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $BD		; F0 BD ; Branch if equal to $F0, $BD [Flow: branch]
	eor $05.b,X		; 55 05 ; Exclusive OR accumulator with memory $05.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $34F0BE.l,X		; BF BE F0 34 ; Load long $34F0BE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $04.b,X		; 55 04 ; Exclusive OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0204.w,X		; 9D 04 02 ; Store accumulator to $0204.w,X [Reads: Accumulator, X Index]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	cmp #$CFC9.w		; C9 C9 CF ; Compare #$CFC9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	cmp #$34CE.w		; C9 CE 34 ; Compare #$34CE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $C9.b,X		; 34 C9 ; Test bits $C9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $D0CF.w,Y		; 99 CF D0 ; Store accumulator to $D0CF.w,Y [Reads: Accumulator, Y Index]
	cmp ($33.b),Y		; D1 33 ; Compare accumulator ($33.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	cmp #$3303.w		; C9 03 33 ; Compare #$3303.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $C9.b,X		; 34 C9 ; Test bits $C9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $90.b,X		; 34 90 ; Test bits $90.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $B2.b,X		; 36 B2 ; Rotate left $B2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $B5.b,X		; D6 B5 ; Decrement memory $B5.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $C9.b,X		; 36 C9 ; Rotate left $C9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $F6.b,X		; 34 F6 ; Test bits $F6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsb $F1.b		; 04 F1 ; Test and set bits $F1.b [Reads: Accumulator] [Flags: Z]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$D926.w		; C9 26 D9 ; Compare #$D926.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$5334.w		; C9 34 53 ; Compare #$5334.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $D2.b,X		; 34 D2 ; Test bits $D2.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	bit $C9.b,X		; 34 C9 ; Test bits $C9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($35.b,S),Y		; 33 35 ; AND accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $AEDF.w,X		; DD DF AE ; Compare accumulator $AEDF.w,X [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor $05.b,X		; 55 05 ; Exclusive OR accumulator with memory $05.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit #$55B9.w		; 89 B9 55 ; Test bits #$55B9.w with accumulator [Reads: Accumulator] [Flags: Z]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$D6.b]		; 27 D6 ; AND accumulator with memory (long) [$D6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$11.b]		; 27 11 ; AND accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($E9.b,X)		; 01 E9 ; Logical OR ($E9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $ED24.w		; EE 24 ED ; Increment $ED24.w [Flags: ZN]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $F1EE.w		; EE EE F1 ; Increment $F1EE.w [Flags: ZN]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F1.b,S		; 03 F1 ; OR accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	cmp #$C9C9.w		; C9 C9 C9 ; Compare #$C9C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ror $00.b,X		; 76 00 ; Rotate right $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($A7.b,X)		; 01 A7 ; Logical OR ($A7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $34.b,X		; F6 34 ; Increment memory $34.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $24.b,X		; D5 24 ; Compare accumulator $24.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	.db $10, $DB		; 10 DB ; Branch if plus to $10, $DB [Flow: branch]
	jmp ($98F8.w)		; 6C F8 98 ; Jump indirect to ($98F8.w) [Flow: jump]
	ora ($53.b,X)		; 01 53 ; Logical OR ($53.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $04.b,X		; D6 04 ; Decrement memory $04.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	and $DB.b,X		; 35 DB ; Logical AND $DB.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $F0, $A5		; F0 A5 ; Branch if equal to $F0, $A5 [Flow: branch]
	and ($11.b,S),Y		; 33 11 ; AND accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $9EE6.w,Y		; 79 E6 9E ; Add $9EE6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $13.b		; A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	and $10.b,X		; 35 10 ; Logical AND $10.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $34.b		; A6 34 ; Load $34.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $34		; 90 34 ; Branch if carry clear to $90, $34 [Flow: branch]
	ror $12.b,X		; 76 12 ; Rotate right $12.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $DADA.w		; 1C DA DA ; Test and reset bits $DADA.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $3434.w,Y		; BE 34 34 ; Load X register $3434.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ror $34F0.w		; 6E F0 34 ; Rotate right $34F0.w [Flags: ZNC]
	lda $0440.w		; AD 40 04 ; Load $0440.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $BAFE.w,Y		; B9 FE BA ; Load $BAFE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $FD,$54		; 44 54 FD ; Move block positive $FD,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda ($4E.b)		; B2 4E ; Load accumulator (indirect) ($4E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $4454.w,X		; 9E 54 44 ; Store zero to $4454.w,X [Reads: X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $038F.w		; 8C 8F 03 ; Store Y register to $038F.w [Reads: Y Index]
	mvp $04,$46		; 44 46 04 ; Move block positive $04,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp $44646E.l		; 5C 6E 64 44 ; Jump long to $44646E.l [Flow: jump]
	sta $CD0A09.l		; 8F 09 0A CD ; Store accumulator (long) $CD0A09.l [Reads: Accumulator]
	lsr $62.b		; 46 62 ; Logical shift right $62.b [Reads: Direct Page] [Flags: ZNC]
	sty $0B.b		; 84 0B ; Store Y register to $0B.b [Reads: Y Index]
	sbc $36A7.w,X		; FD A7 36 ; Subtract with carry $36A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($E1.b,S),Y		; 53 E1 ; XOR accumulator (stack relative indirect indexed) ($E1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvn $04,$00		; 54 00 04 ; Move block negative $04,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $B2,$0C		; 54 0C B2 ; Move block negative $B2,$0C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ror $46.b,X		; 76 46 ; Rotate right $46.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($38.b,X)		; 41 38 ; Exclusive OR accumulator with memory ($38.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $66330F.l		; 0F 0F 33 66 ; OR accumulator with memory (long) $66330F.l [Writes: Accumulator] [Flags: ZN]
	jmp.w [$27D6]		; DC D6 27 ; Jump long indirect [$27D6] [Flow: jump]
	ora $383622.l		; 0F 22 36 38 ; OR accumulator with memory (long) $383622.l [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $7E7E.w,X		; 7E 7E 7E ; Rotate right $7E7E.w,X [Reads: X Index] [Flags: ZNC]
	ror $3333.w,X		; 7E 33 33 ; Rotate right $3333.w,X [Reads: X Index] [Flags: ZNC]
	ror $AD82.w,X		; 7E 82 AD ; Rotate right $AD82.w,X [Reads: X Index] [Flags: ZNC]
	trb $0033.w		; 1C 33 00 ; Test and reset bits $0033.w [Reads: Accumulator] [Flags: Z]
	sbc ($E2.b),Y		; F1 E2 ; Subtract with carry ($E2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $44F3.w,X		; 9D F3 44 ; Store accumulator to $44F3.w,X [Reads: Accumulator, X Index]
	bit $EF.b		; 24 EF ; Test bits $EF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lsr $349D.w		; 4E 9D 34 ; Logical shift right $349D.w [Flags: ZNC]
	mvp $CD,$40		; 44 40 CD ; Move block positive $CD,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $4E.b,X		; 15 4E ; OR accumulator with memory $4E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $4526.w,X		; FE 26 45 ; Increment memory $4526.w,X [Reads: X Index] [Flags: ZN]
	adc $1A31BA.l		; 6F BA 31 1A ; Add with carry (long) $1A31BA.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $8B,$16		; 44 16 8B ; Move block positive $8B,$16 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $449A1E.l,X		; 9F 1E 9A 44 ; Store accumulator (long,X) $449A1E.l,X [Reads: Accumulator, X Index]
	ora ($27.b,S),Y		; 13 27 ; OR accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $36.b,X		; 95 36 ; Store accumulator to $36.b,X [Reads: Accumulator, X Index]
	mvp $0B,$98		; 44 98 0B ; Move block positive $0B,$98 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $4115.w,X		; 1D 15 41 ; OR accumulator with memory $4115.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $73.b,X		; 16 73 ; Arithmetic shift left $73.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$C1.b],Y		; 57 C1 ; Exclusive OR accumulator with memory (long indexed) [$C1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $44.b,X		; 36 44 ; Rotate left $44.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$75		; E2 75
	bit $9A.b,X		; 34 9A ; Test bits $9A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $04.b,S		; 43 04 ; Exclusive OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvn $36,$C4		; 54 C4 36 ; Move block negative $36,$C4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $E2.b,X		; 36 E2 ; Rotate left $E2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $4600.w,X		; 1E 00 46 ; Arithmetic shift left $4600.w,X [Reads: X Index] [Flags: ZNC]
	eor $4F0B0E.l		; 4F 0E 0B 4F ; Exclusive OR accumulator with memory (long) $4F0B0E.l [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($10.b,S),Y		; 53 10 ; XOR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$1610]		; DC 10 16 ; Jump long indirect [$1610] [Flow: jump]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($F7.b,X)		; 21 F7 ; Logical AND ($F7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($62.b,S),Y		; 33 62 ; AND accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $79.b		; A5 79 ; Load $79.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $21.b,X		; 36 21 ; Rotate left $21.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc [$36.b],Y		; F7 36 ; Subtract with carry (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1020A1.l,X		; FF A1 20 10 ; Subtract with carry (long,X) $1020A1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $3A.b		; A4 3A ; Load $3A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	inc $12.b		; E6 12 ; Increment $12.b [Reads: Direct Page] [Flags: ZN]
	jsl $E6E626.l		; 22 26 E6 E6 ; Jump to subroutine long $E6E626.l [Writes: Stack Pointer] [Flow: call]
	lda #$52.b		; A9 52 ; Load #$52.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $3A.b		; 25 3A ; Logical AND $3A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$E6.b		; 29 E6 ; Logical AND #$E6.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $32.b,X		; 55 32 ; Exclusive OR accumulator with memory $32.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $3A.b		; E6 3A ; Increment $3A.b [Reads: Direct Page] [Flags: ZN]
	lda [$29.b]		; A7 29 ; Load accumulator (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $3B.b		; E6 3B ; Increment $3B.b [Reads: Direct Page] [Flags: ZN]
	and #$E6.b		; 29 E6 ; Logical AND #$E6.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $32.b		; 25 32 ; Logical AND $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$29.b		; A9 29 ; Load #$29.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	inc $53.b		; E6 53 ; Increment $53.b [Reads: Direct Page] [Flags: ZN]
	eor ($E6.b)		; 52 E6 ; Exclusive OR accumulator with memory (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $EC.b		; E6 EC ; Increment $EC.b [Reads: Direct Page] [Flags: ZN]
	inc $22.b		; E6 22 ; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	jsl $E6E6E6.l		; 22 E6 E6 E6 ; Jump to subroutine long $E6E6E6.l [Writes: Stack Pointer] [Flow: call]
	inc $22.b		; E6 22 ; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	jsl $C93029.l		; 22 29 30 C9 ; Jump to subroutine long $C93029.l [Writes: Stack Pointer] [Flow: call]
	cmp #$35.b		; C9 35 ; Compare #$35.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $05.b		; E6 05 ; Increment $05.b [Reads: Direct Page] [Flags: ZN]
	eor ($C9.b)		; 52 C9 ; Exclusive OR accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$29.b		; C9 29 ; Compare #$29.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	eor $E6.b,X		; 55 E6 ; Exclusive OR accumulator with memory $E6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $25.b,X		; 35 25 ; Logical AND $25.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	bit $23.b,X		; 34 23 ; Test bits $23.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $50, $65		; 50 65 ; Branch if overflow clear to $50, $65 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	bit $6655.w		; 2C 55 66 ; Test bits $6655.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol $232C.w		; 2E 2C 23 ; Rotate left $232C.w [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $61.b		; 66 61 ; Rotate right $61.b [Reads: Direct Page] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $393B.w,Y		; 39 3B 39 ; AND accumulator with memory $393B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $66.b,X		; 16 66 ; Arithmetic shift left $66.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $2A.b,S		; 23 2A ; AND accumulator with stack relative $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $65.b		; E6 65 ; Increment $65.b [Reads: Direct Page] [Flags: ZN]
	eor ($E6.b)		; 52 E6 ; Exclusive OR accumulator with memory (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $5B6A.w		; EC 6A 5B ; Compare $5B6A.w with X register [Reads: X Index] [Flags: ZNC]
	jsl $C93F11.l		; 22 11 3F C9 ; Jump to subroutine long $C93F11.l [Writes: Stack Pointer] [Flow: call]
	sty $C9.b		; 84 C9 ; Store Y register to $C9.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($06.b),Y		; 11 06 ; OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3534.w,Y		; 39 34 35 ; AND accumulator with memory $3534.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $1A.b,X		; 34 1A ; Test bits $1A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $1A.b,X		; D5 1A ; Compare accumulator $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pei ($35.b)		; D4 35 ; Push effective indirect address ($35.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $2D.b		; E6 2D ; Increment $2D.b [Reads: Direct Page] [Flags: ZN]
	bit $5522.w		; 2C 22 55 ; Test bits $5522.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc $DC87.w,X		; 7D 87 DC ; Add $DC87.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$53.b]		; 87 53 ; Store accumulator (long) [$53.b] [Reads: Accumulator, Direct Page]
	ora $87.b,S		; 03 87 ; OR accumulator with stack relative $87.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $5235E6.l		; 2F E6 35 52 ; AND accumulator with memory (long) $5235E6.l [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	and ($3B.b)		; 32 3B ; AND accumulator with memory (indirect) ($3B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2AC4.w,Y		; 39 C4 2A ; AND accumulator with memory $2AC4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($50.b,S),Y		; 33 50 ; AND accumulator (stack relative indirect indexed) ($50.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $E6.b,X		; 55 E6 ; Exclusive OR accumulator with memory $E6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$41.b],Y		; 37 41 ; AND accumulator with memory (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b,S		; 23 25 ; AND accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $32.b		; 66 32 ; Rotate right $32.b [Reads: Direct Page] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rol $42.b		; 26 42 ; Rotate left $42.b [Reads: Direct Page] [Flags: ZNC]
	eor $56.b,X		; 55 56 ; Exclusive OR accumulator with memory $56.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $2E.b		; E5 2E ; Subtract $2E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $25.b,X		; 34 25 ; Test bits $25.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	and $27.b,S		; 23 27 ; AND accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $06.b,S		; E3 06 ; Subtract stack-relative $06.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $50, $65		; 50 65 ; Branch if overflow clear to $50, $65 [Flow: branch]
	adc #$23.b		; 69 23 ; Add #$23.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($65.b,S),Y		; 33 65 ; AND accumulator (stack relative indirect indexed) ($65.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $43.b,X		; 34 43 ; Test bits $43.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $10.b		; 45 10 ; Exclusive OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $44.b		; 66 44 ; Rotate right $44.b [Reads: Direct Page] [Flags: ZNC]
	lsr $6F.b		; 46 6F ; Logical shift right $6F.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b,X		; 76 66 ; Rotate right $66.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($23.b,S),Y		; 33 23 ; AND accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $4D.b,X		; 34 4D ; Test bits $4D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $4E6660.l		; 4F 60 66 4E ; Exclusive OR accumulator with memory (long) $4E6660.l [Writes: Accumulator] [Flags: ZN]
	.db $50, $9A		; 50 9A ; Branch if overflow clear to $50, $9A [Flow: branch]
	and [$66.b],Y		; 37 66 ; AND accumulator with memory (long indexed) [$66.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $6A.b,X		; 34 6A ; Test bits $6A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor [$00.b],Y		; 57 00 ; Exclusive OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $86.b,X		; 36 86 ; Rotate left $86.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp $017373.l		; 5C 73 73 01 ; Jump long to $017373.l [Flow: jump]
	ora ($5A.b),Y		; 11 5A ; OR accumulator with memory ($5A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $36.b		; 65 36 ; Add $36.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $626261.l,X		; 5F 61 62 62 ; Exclusive OR accumulator with memory (long,X) $626261.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	cpx $6262.w		; EC 62 62 ; Compare $6262.w with X register [Reads: X Index] [Flags: ZNC]
	and $6526.w,Y		; 39 26 65 ; AND accumulator with memory $6526.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $4D.b,X		; 76 4D ; Rotate right $4D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $663651.l		; 4F 51 36 66 ; Exclusive OR accumulator with memory (long) $663651.l [Writes: Accumulator] [Flags: ZN]
	and $883433.l,X		; 3F 33 34 88 ; AND accumulator with memory (long,X) $883433.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $50.b		; 65 50 ; Add $50.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $38.b,X		; 34 38 ; Test bits $38.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $5005.w		; CE 05 50 ; Decrement $5005.w [Flags: ZN]
	pei ($9F.b)		; D4 9F ; Push effective indirect address ($9F.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cpy $AA.b		; C4 AA ; Compare $AA.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $FB.b		; C6 FB ; Decrement $FB.b [Reads: Direct Page] [Flags: ZN]
	inc $01E6.w,X		; FE E6 01 ; Increment memory $01E6.w,X [Reads: X Index] [Flags: ZN]
	jsl $6944EC.l		; 22 EC 44 69 ; Jump to subroutine long $6944EC.l [Writes: Stack Pointer] [Flow: call]
	and $20.b,X		; 35 20 ; Logical AND $20.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6A.b		; 65 6A ; Add $6A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit #$69.b		; 89 69 ; Test bits #$69.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3429.w		; 1C 29 34 ; Test and reset bits $3429.w [Reads: Accumulator] [Flags: Z]
	bit $23.b,X		; 34 23 ; Test bits $23.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $9D.b,X		; 36 9D ; Rotate left $9D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $2000.w,Y		; B9 00 20 ; Load $2000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $F2.b,X		; 35 F2 ; Logical AND $F2.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $55.b,X		; 34 55 ; Test bits $55.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $F2.b,X		; 34 F2 ; Test bits $F2.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $340210.l		; 0F 10 02 34 ; OR accumulator with memory (long) $340210.l [Writes: Accumulator] [Flags: ZN]
	sbc [$6A.b]		; E7 6A ; Subtract with carry (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($9D.b,X)		; 61 9D ; Add with carry ($9D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($20.b)		; F2 20 ; Subtract with carry (indirect) ($20.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit #$00.b		; 89 00 ; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $60.b,X		; 34 60 ; Test bits $60.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $0B01.w		; 20 01 0B ; Jump to subroutine at $0B01.w [Writes: Stack Pointer] [Flow: call]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stx $10F6.w		; 8E F6 10 ; Store X register to $10F6.w [Reads: X Index]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $3534.w,X		; 9D 34 35 ; Store accumulator to $3534.w,X [Reads: Accumulator, X Index]
	eor ($03.b)		; 52 03 ; Exclusive OR accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$F7.b],Y		; 37 F7 ; AND accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $33F9.w,Y		; F9 F9 33 ; Subtract with carry $33F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($F9.b,S),Y		; 33 F9 ; AND accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $FC.b,X		; 34 FC ; Test bits $FC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $3333.w,X		; FE 33 33 ; Increment memory $3333.w,X [Reads: X Index] [Flags: ZN]
	inc $53E7.w,X		; FE E7 53 ; Increment memory $53E7.w,X [Reads: X Index] [Flags: ZN]
	rol $31.b,X		; 36 31 ; Rotate left $31.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	tsb $710B.w		; 0C 0B 71 ; Test and set bits $710B.w [Reads: Accumulator] [Flags: Z]
	mvp $70,$41		; 44 41 70 ; Move block positive $70,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	trb $63.b		; 14 63 ; Test and reset bits $63.b [Reads: Accumulator] [Flags: Z]
	tsb $34.b		; 04 34 ; Test and set bits $34.b [Reads: Accumulator] [Flags: Z]
	bit $66.b,X		; 34 66 ; Test bits $66.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $D5.b,X		; 34 D5 ; Test bits $D5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ora $A9.b,S		; 03 A9 ; OR accumulator with stack relative $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$9E.b]		; E7 9E ; Subtract with carry (long) [$9E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit #$1D.b		; 89 1D ; Test bits #$1D.b with accumulator [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9B9C.w,X		; 9D 9C 9B ; Store accumulator to $9B9C.w,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$AD.b]		; E7 AD ; Subtract with carry (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $12D5.w		; 2E D5 12 ; Rotate left $12D5.w [Flags: ZNC]
	eor $D7.b,S		; 43 D7 ; Exclusive OR accumulator with stack relative $D7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $71.b		; 02 71 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $F0.b		; 64 F0 ; Store zero to $F0.b
	ror $7C.b,X		; 76 7C ; Rotate right $7C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $A3.b,X		; 15 A3 ; OR accumulator with memory $A3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx #$34.b		; A2 34 ; Load #$34.b into X register [Writes: X Index] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and ($40.b,S),Y		; 33 40 ; AND accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $89.b		; A4 89 ; Load $89.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($2E.b,X)		; 81 2E ; Store accumulator ($2E.b,X) [Reads: Accumulator, X Index, Direct Page]
	cmp $854331.l,X		; DF 31 43 85 ; Compare accumulator (long,X) $854331.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$10.b],Y		; F7 10 ; Subtract with carry (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $7E7E.w,X		; 7E 7E 7E ; Rotate right $7E7E.w,X [Reads: X Index] [Flags: ZNC]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit #$36.b		; 89 36 ; Test bits #$36.b with accumulator [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $00.b,X		; 75 00 ; Add $00.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $FA.b		; 06 FA ; Arithmetic shift left $FA.b [Reads: Direct Page] [Flags: ZNC]
	cpx $3633.w		; EC 33 36 ; Compare $3633.w with X register [Reads: X Index] [Flags: ZNC]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	bit $77.b,X		; 34 77 ; Test bits $77.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $3006F0.l,X		; FF F0 06 30 ; Subtract with carry (long,X) $3006F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sty $34.b		; 84 34 ; Store Y register to $34.b [Reads: Y Index]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	ora $0F.b,X		; 15 0F ; OR accumulator with memory $0F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb MDMAEN.w		; 0C 0B 42 ; Test and set bits MDMAEN.w [Reads: Accumulator] [Flags: Z]
	mvp $34,$F0		; 44 F0 34 ; Move block positive $34,$F0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $34.b,X		; 75 34 ; Add $34.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $06.b,X		; 35 06 ; Logical AND $06.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	cmp $37.b,X		; D5 37 ; Compare accumulator $37.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $CE		; 70 CE ; Branch if overflow set to $70, $CE [Flow: branch]
	jmp ($1078.w)		; 6C 78 10 ; Jump indirect to ($1078.w) [Flow: jump]
	asl $79.b,X		; 16 79 ; Arithmetic shift left $79.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	dec $62.b		; C6 62 ; Decrement $62.b [Reads: Direct Page] [Flags: ZN]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $DC.b,X		; 34 DC ; Test bits $DC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	sta $BC.b,S		; 83 BC ; Store accumulator (stack relative) $BC.b,S [Reads: Accumulator, Stack Pointer]
	sta $C6.b		; 85 C6 ; Store accumulator to $C6.b [Reads: Accumulator]
	.db $62, $60, $C6		; 62 60 C6 ; Push effective relative address $62, $60, $C6 [Writes: Stack Pointer]
	bit $87.b,X		; 34 87 ; Test bits $87.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	ror $34.b		; 66 34 ; Rotate right $34.b [Reads: Direct Page] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $24.b,S		; E3 24 ; Subtract stack-relative $24.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $6634.w		; 8D 34 66 ; Store accumulator to $6634.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$A5.b],Y		; 17 A5 ; OR accumulator with memory (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $8000.w		; 20 00 80 ; Jump to subroutine at $8000.w [Writes: Stack Pointer] [Flow: call]
	bit $81.b,X		; 34 81 ; Test bits $81.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	ror $92.b		; 66 92 ; Rotate right $92.b [Reads: Direct Page] [Flags: ZNC]
	sty $4E.b,X		; 94 4E ; Store Y register $4E.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	jsr $1566.w		; 20 66 15 ; Jump to subroutine at $1566.w [Writes: Stack Pointer] [Flow: call]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $209F.w,X		; 9D 9F 20 ; Store accumulator to $209F.w,X [Reads: Accumulator, X Index]
	ror $65.b		; 66 65 ; Rotate right $65.b [Reads: Direct Page] [Flags: ZNC]
	cmp $96DC.w		; CD DC 96 ; Compare $96DC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jmp.w [$6222]		; DC 22 62 ; Jump long indirect [$6222] [Flow: jump]
	jmp.w [$A0DC]		; DC DC A0 ; Jump long indirect [$A0DC] [Flow: jump]
	cmp $6222.w		; CD 22 62 ; Compare $6222.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp [$96.b]		; C7 96 ; Compare accumulator (long) [$96.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($26.b,X)		; A1 26 ; Load accumulator ($26.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $63.b		; 26 63 ; Rotate left $63.b [Reads: Direct Page] [Flags: ZNC]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $22A5.w		; CD A5 22 ; Compare $22A5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol $A7.b		; 26 A7 ; Rotate left $A7.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $90, $F2		; 90 F2 ; Branch if carry clear to $90, $F2 [Flow: branch]
	ror $21.b		; 66 21 ; Rotate right $21.b [Reads: Direct Page] [Flags: ZNC]
	sta $18799F.l,X		; 9F 9F 79 18 ; Store accumulator (long,X) $18799F.l,X [Reads: Accumulator, X Index]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ldy $1026.w		; AC 26 10 ; Load $1026.w into Y register [Writes: Y Index] [Flags: ZN]
	ora ($65.b,X)		; 01 65 ; Logical OR ($65.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $11.b		; 65 11 ; Add $11.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $ABAA.w,Y		; 79 AA AB ; Add $ABAA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: ZN]
	ldx $02AE.w		; AE AE 02 ; Load $02AE.w into X register [Writes: X Index] [Flags: ZN]
	ror $AE.b		; 66 AE ; Rotate right $AE.b [Reads: Direct Page] [Flags: ZNC]
	ror $53D1.w,X		; 7E D1 53 ; Rotate right $53D1.w,X [Reads: X Index] [Flags: ZNC]
	adc ($01.b,X)		; 61 01 ; Add with carry ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $7EAE.w		; AE AE 7E ; Load $7EAE.w into X register [Writes: X Index] [Flags: ZN]
	.db $B0, $66		; B0 66 ; Branch if carry set to $B0, $66 [Flow: branch]
	asl $B2.b,X		; 16 B2 ; Arithmetic shift left $B2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp.w [$C9D1]		; DC D1 C9 ; Jump long indirect [$C9D1] [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpy $0010.w		; CC 10 00 ; Compare $0010.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $5353.w		; CC 53 53 ; Compare $5353.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx $1601.w		; AE 01 16 ; Load $1601.w into X register [Writes: X Index] [Flags: ZN]
	ldx $34AE.w		; AE AE 34 ; Load $34AE.w into X register [Writes: X Index] [Flags: ZN]
	ora $340266.l		; 0F 66 02 34 ; OR accumulator with memory (long) $340266.l [Writes: Accumulator] [Flags: ZN]
	ldx $AEEE.w		; AE EE AE ; Load $AEEE.w into X register [Writes: X Index] [Flags: ZN]
	asl $16.b		; 06 16 ; Arithmetic shift left $16.b [Reads: Direct Page] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $21667C.l,X		; 1F 7C 66 21 ; Logical OR long $21667C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $67BAB8.l		; 5C B8 BA 67 ; Jump long to $67BAB8.l [Flow: jump]
	asl $61.b,X		; 16 61 ; Arithmetic shift left $61.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda #$C3.b		; A9 C3 ; Load #$C3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $62.b		; 06 62 ; Arithmetic shift left $62.b [Reads: Direct Page] [Flags: ZNC]
	dec $C9C7.w		; CE C7 C9 ; Decrement $C9C7.w [Flags: ZN]
	trb $6206.w		; 1C 06 62 ; Test and reset bits $6206.w [Reads: Accumulator] [Flags: Z]
	lda $C5.b,S		; A3 C5 ; Load accumulator (stack relative) $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $D7.b,X		; D5 D7 ; Compare accumulator $D7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $66.b		; 06 66 ; Arithmetic shift left $66.b [Reads: Direct Page] [Flags: ZNC]
	adc $D8E9AE.l,X		; 7F AE E9 D8 ; Add long $D8E9AE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $AE.b,S		; 83 AE ; Store accumulator (stack relative) $AE.b,S [Reads: Accumulator, Stack Pointer]
	cmp $61.b,X		; D5 61 ; Compare accumulator $61.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $DD.b		; 66 DD ; Rotate right $DD.b [Reads: Direct Page] [Flags: ZNC]
	adc $61C7AE.l,X		; 7F AE C7 61 ; Add long $61C7AE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$AE		; E2 AE
	cmp $6066CA.l,X		; DF CA 66 60 ; Compare accumulator (long,X) $6066CA.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp #$E7.b		; C9 E7 ; Compare #$E7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $06E9.w		; AE E9 06 ; Load $06E9.w into X register [Writes: X Index] [Flags: ZN]
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: ZNC]
	sta [$DF.b]		; 87 DF ; Store accumulator (long) [$DF.b] [Reads: Accumulator, Direct Page]
	sbc #$63.b		; E9 63 ; Subtract #$63.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ror $EA.b		; 66 EA ; Rotate right $EA.b [Reads: Direct Page] [Flags: ZNC]
	sta [$E7.b]		; 87 E7 ; Store accumulator (long) [$E7.b] [Reads: Accumulator, Direct Page]
	ldx $6663.w		; AE 63 66 ; Load $6663.w into X register [Writes: X Index] [Flags: ZN]
	ldx $F2F1.w		; AE F1 F2 ; Load $F2F1.w into X register [Writes: X Index] [Flags: ZN]
	sbc ($66.b,S),Y		; F3 66 ; Subtract with carry (stack relative indirect indexed) ($66.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $F5.b		; 66 F5 ; Rotate right $F5.b [Reads: Direct Page] [Flags: ZNC]
	sbc ($E7.b)		; F2 E7 ; Subtract with carry (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$66.b]		; E7 66 ; Subtract with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $F9.b		; 66 F9 ; Rotate right $F9.b [Reads: Direct Page] [Flags: ZNC]
	ldx $E91C.w		; AE 1C E9 ; Load $E91C.w into X register [Writes: X Index] [Flags: ZN]
	ror $26.b		; 66 26 ; Rotate right $26.b [Reads: Direct Page] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FA.b]		; E7 FA ; Subtract with carry (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$66.b],Y		; 77 66 ; Add with carry (long indexed) [$66.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $E7AE.w		; 20 AE E7 ; Jump to subroutine at $E7AE.w [Writes: Stack Pointer] [Flow: call]
	sbc [$26.b]		; E7 26 ; Subtract with carry (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $06.b		; 66 06 ; Rotate right $06.b [Reads: Direct Page] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $71.b,S		; 83 71 ; Store accumulator (stack relative) $71.b,S [Reads: Accumulator, Stack Pointer]
	ror $11.b,X		; 76 11 ; Rotate right $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $E70BE6.l,X		; 1F E6 0B E7 ; Logical OR long $E70BE6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $76.b		; 26 76 ; Rotate left $76.b [Reads: Direct Page] [Flags: ZNC]
	ldx $E61C.w		; AE 1C E6 ; Load $E61C.w into X register [Writes: X Index] [Flags: ZN]
	sta $62.b		; 85 62 ; Store accumulator to $62.b [Reads: Accumulator]
	adc $1C.b,S		; 63 1C ; Add with carry (stack relative) $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	inc $23.b		; E6 23 ; Increment $23.b [Reads: Direct Page] [Flags: ZN]
	rol $1C.b		; 26 1C ; Rotate left $1C.b [Reads: Direct Page] [Flags: ZNC]
	asl $100F.w		; 0E 0F 10 ; Arithmetic shift left $100F.w [Flags: ZNC]
	and [$77.b]		; 27 77 ; AND accumulator with memory (long) [$77.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b),Y		; 11 0F ; OR accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$AE.b]		; E7 AE ; Subtract with carry (long) [$AE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$66.b],Y		; 77 66 ; Add with carry (long indexed) [$66.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $CCCC.w		; AE CC CC ; Load $CCCC.w into X register [Writes: X Index] [Flags: ZN]
	sbc $60.b,S		; E3 60 ; Subtract stack-relative $60.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $D053.w,X		; 7E 53 D0 ; Rotate right $D053.w,X [Reads: X Index] [Flags: ZNC]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $C5DB.w,Y		; 79 DB C5 ; Add $C5DB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $10FEA3.l,X		; 9F A3 FE 10 ; Store accumulator (long,X) $10FEA3.l,X [Reads: Accumulator, X Index]
	cop $AE.b		; 02 AE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $B7.b		; E6 B7 ; Increment $B7.b [Reads: Direct Page] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($67.b,X)		; 61 67 ; Add with carry ($67.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$E7.b]		; E7 E7 ; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($66.b)		; 12 66 ; OR accumulator with memory (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $E753.w		; AE 53 E7 ; Load $E753.w into X register [Writes: X Index] [Flags: ZN]
	inc $6261.w,X		; FE 61 62 ; Increment memory $6261.w,X [Reads: X Index] [Flags: ZN]
	jsr $AED0.w		; 20 D0 AE ; Jump to subroutine at $AED0.w [Writes: Stack Pointer] [Flow: call]
	ldx $6670.w		; AE 70 66 ; Load $6670.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	and ($66.b,X)		; 21 66 ; Logical AND ($66.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc [$23.b]		; 67 23 ; Add with carry (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $C9C7.w		; EC C7 C9 ; Compare $C9C7.w with X register [Reads: X Index] [Flags: ZNC]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $D0.b		; 24 D0 ; Test bits $D0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $67		; 70 67 ; Branch if overflow set to $70, $67 [Flow: branch]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc [$E7.b]		; E7 E7 ; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $C5CA.w		; 2C CA C5 ; Test bits $C5CA.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora $0770.w,X		; 1D 70 07 ; OR accumulator with memory $0770.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $C83F.w		; AE 3F C8 ; Load $C83F.w into X register [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$C5.b]		; E7 C5 ; Subtract with carry (long) [$C5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $3488.w,X		; DE 88 34 ; Decrement memory $3488.w,X [Reads: X Index] [Flags: ZN]
	lda $0000.w		; AD 00 00 ; Load $0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $FF0BDA.l,X		; FF DA 0B FF ; Subtract with carry (long,X) $FF0BDA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $9F.b		; C6 9F ; Decrement $9F.b [Reads: Direct Page] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $0036.w,X		; 9E 36 00 ; Store zero to $0036.w,X [Reads: X Index]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $5B.b,X		; 34 5B ; Test bits $5B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $ABA5.w,X		; FD A5 AB ; Subtract with carry $ABA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C60110.l,X		; FF 10 01 C6 ; Subtract with carry (long,X) $C60110.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $5E06.w		; 1C 06 5E ; Test and reset bits $5E06.w [Reads: Accumulator] [Flags: Z]
	eor $341123.l,X		; 5F 23 11 34 ; Exclusive OR accumulator with memory (long,X) $341123.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $C6.b,X		; 34 C6 ; Test bits $C6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $530000.l,X		; DF 00 00 53 ; Compare accumulator (long,X) $530000.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $1767.w		; 0C 67 17 ; Test and set bits $1767.w [Reads: Accumulator] [Flags: Z]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $D50C.w		; EE 0C D5 ; Increment $D50C.w [Flags: ZN]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($E6.b),Y		; 71 E6 ; Add with carry ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($12.b,S),Y		; 33 12 ; AND accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $66.b		; E6 66 ; Increment $66.b [Reads: Direct Page] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($C6.b),Y		; 31 C6 ; AND accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $4F		; 30 4F ; Branch if minus to $30, $4F [Flow: branch]
	eor $577532.l		; 4F 32 75 57 ; Exclusive OR accumulator with memory (long) $577532.l [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $66C6.w		; AC C6 66 ; Load $66C6.w into Y register [Writes: Y Index] [Flags: ZN]
	ror $01.b		; 66 01 ; Rotate right $01.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	asl $20.b		; 06 20 ; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: ZNC]
	ora ($AC.b),Y		; 11 AC ; OR accumulator with memory ($AC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($61.b),Y		; D1 61 ; Compare accumulator ($61.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $10, $DD		; 10 DD ; Branch if plus to $10, $DD [Flow: branch]
	jmp.w [$2020]		; DC 20 20 ; Jump long indirect [$2020] [Flow: jump]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $A453.w		; 20 53 A4 ; Jump to subroutine at $A453.w [Writes: Stack Pointer] [Flow: call]
	bit $51.b,X		; 34 51 ; Test bits $51.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $35.b		; E4 35 ; Compare $35.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $70, $C6		; 70 C6 ; Branch if overflow set to $70, $C6 [Flow: branch]
	sbc ($34.b,X)		; E1 34 ; Subtract with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$D1.b		; A9 D1 ; Load #$D1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($36.b),Y		; 71 36 ; Add with carry ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4F.b,X		; 34 4F ; Test bits $4F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	trb $1200.w		; 1C 00 12 ; Test and reset bits $1200.w [Reads: Accumulator] [Flags: Z]
	rol $38.b,X		; 36 38 ; Rotate left $38.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpx $7077.w		; EC 77 70 ; Compare $7077.w with X register [Reads: X Index] [Flags: ZNC]
	bit $71.b,X		; 34 71 ; Test bits $71.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp #$84.b		; C9 84 ; Compare #$84.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$D9.b		; C9 D9 ; Compare #$D9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	trb $0242.w		; 1C 42 02 ; Test and reset bits $0242.w [Reads: Accumulator] [Flags: Z]
	and [$44.b]		; 27 44 ; AND accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $F0.b		; 46 F0 ; Logical shift right $F0.b [Reads: Direct Page] [Flags: ZNC]
	rol $77.b,X		; 36 77 ; Rotate left $77.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $53.b,S		; 03 53 ; OR accumulator with stack relative $53.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$DC96]		; DC 96 DC ; Jump long indirect [$DC96] [Flow: jump]
	ora ($32.b)		; 12 32 ; OR accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($D2.b),Y		; D1 D2 ; Compare accumulator ($D2.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	rol $14.b,X		; 36 14 ; Rotate left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $CD4C04.l		; 22 04 4C CD ; Jump to subroutine long $CD4C04.l [Writes: Stack Pointer] [Flow: call]
	cpx $C7.b		; E4 C7 ; Compare $C7.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($22.b)		; 72 22 ; Add with carry (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $3460.w		; 1C 60 34 ; Test and reset bits $3460.w [Reads: Accumulator] [Flags: Z]
	sbc $0121.w		; ED 21 01 ; Subtract $0121.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp [$A2.b]		; C7 A2 ; Compare accumulator (long) [$A2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	rol $71.b		; 26 71 ; Rotate left $71.b [Reads: Direct Page] [Flags: ZNC]
	sbc $04EF.w		; ED EF 04 ; Subtract $04EF.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc ($12.b,X)		; E1 12 ; Subtract with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($E1.b)		; 32 E1 ; AND accumulator with memory (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $F8.b		; 06 F8 ; Arithmetic shift left $F8.b [Reads: Direct Page] [Flags: ZNC]
	jsr $2223.w		; 20 23 22 ; Jump to subroutine at $2223.w [Writes: Stack Pointer] [Flow: call]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and [$C7.b]		; 27 C7 ; AND accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$11.b]		; C7 11 ; Compare accumulator (long) [$11.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $31E6E5.l		; 22 E5 E6 31 ; Jump to subroutine long $31E6E5.l [Writes: Stack Pointer] [Flow: call]
	adc $6A1122.l,X		; 7F 22 11 6A ; Add long $6A1122.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$CD.b]		; 27 CD ; AND accumulator with memory (long) [$CD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($11.b),Y		; F1 11 ; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $C651ED.l		; 22 ED 51 C6 ; Jump to subroutine long $C651ED.l [Writes: Stack Pointer] [Flow: call]
	bit $21.b,X		; 34 21 ; Test bits $21.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $12CD6C.l,X		; 3F 6C CD 12 ; AND accumulator with memory (long,X) $12CD6C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($CD.b)		; 12 CD ; OR accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $AB.b,S		; 83 AB ; Store accumulator (stack relative) $AB.b,S [Reads: Accumulator, Stack Pointer]
	cmp [$21.b]		; C7 21 ; Compare accumulator (long) [$21.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $D2D9DD.l		; 22 DD D9 D2 ; Jump to subroutine long $D2D9DD.l [Writes: Stack Pointer] [Flow: call]
	cmp [$22.b],Y		; D7 22 ; Compare accumulator (long indexed) [$22.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsl $D0CECD.l		; 22 CD CE D0 ; Jump to subroutine long $D0CECD.l [Writes: Stack Pointer] [Flow: call]
	trb $0220.w		; 1C 20 02 ; Test and reset bits $0220.w [Reads: Accumulator] [Flags: Z]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $C7.b,S		; 83 C7 ; Store accumulator (stack relative) $C7.b,S [Reads: Accumulator, Stack Pointer]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($CD.b,S),Y		; 53 CD ; XOR accumulator (stack relative indirect indexed) ($CD.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $3412.w		; 20 12 34 ; Jump to subroutine at $3412.w [Writes: Stack Pointer] [Flow: call]
	eor ($D0.b,S),Y		; 53 D0 ; XOR accumulator (stack relative indirect indexed) ($D0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pei ($01.b)		; D4 01 ; Push effective indirect address ($01.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cop $C4.b		; 02 C4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$CD.b]		; C7 CD ; Compare accumulator (long) [$CD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $2202.w		; CD 02 22 ; Compare $2202.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $02CE76.l		; EF 76 CE 02 ; Subtract with carry (long) $02CE76.l [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	jmp.w [$CAD5]		; DC D5 CA ; Jump long indirect [$CAD5] [Flow: jump]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $CD.b		; C4 CD ; Compare $CD.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $02C4.w		; CD C4 02 ; Compare $02C4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $5104.w		; 20 04 51 ; Jump to subroutine at $5104.w [Writes: Stack Pointer] [Flow: call]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$72.b],Y		; 37 72 ; AND accumulator with memory (long indexed) [$72.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $F7.b		; C6 F7 ; Decrement $F7.b [Reads: Direct Page] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $668640.l		; CF 40 86 66 ; Compare accumulator (long) $668640.l [Reads: Accumulator] [Flags: ZNC]
	asl $31.b		; 06 31 ; Arithmetic shift left $31.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$D3.b],Y		; F7 D3 ; Subtract with carry (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	jsr $D501.w		; 20 01 D5 ; Jump to subroutine at $D501.w [Writes: Stack Pointer] [Flow: call]
	cmp $31DB.w		; CD DB 31 ; Compare $31DB.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $D5		; D0 D5 ; Branch if not equal to $D0, $D5 [Flow: branch]
	cpx $AE.b		; E4 AE ; Compare $AE.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $5553.w		; AE 53 55 ; Load $5553.w into X register [Writes: X Index] [Flags: ZN]
	sbc [$67.b]		; E7 67 ; Subtract with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $E7.b,X		; 76 E7 ; Rotate right $E7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and #$1C.b		; 29 1C ; Logical AND #$1C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $27.b,S		; 63 27 ; Add with carry (stack relative) $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	trb $5BD0.w		; 1C D0 5B ; Test and reset bits $5BD0.w [Reads: Accumulator] [Flags: Z]
	sbc [$20.b]		; E7 20 ; Subtract with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $8B.b,X		; 76 8B ; Rotate right $8B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $1C5F.w,X		; 7E 5F 1C ; Rotate right $1C5F.w,X [Reads: X Index] [Flags: ZNC]
	and ($72.b),Y		; 31 72 ; AND accumulator with memory ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc [$67.b]		; E7 67 ; Subtract with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $85.b,X		; 76 85 ; Rotate right $85.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $62, $53, $7E		; 62 53 7E ; Push effective relative address $62, $53, $7E [Writes: Stack Pointer]
	and [$11.b],Y		; 37 11 ; AND accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $635B53.l		; 22 53 5B 63 ; Jump to subroutine long $635B53.l [Writes: Stack Pointer] [Flow: call]
	and ($17.b,X)		; 21 17 ; Logical AND ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc [$EF.b]		; E7 EF ; Subtract with carry (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $4F.b,X		; 55 4F ; Exclusive OR accumulator with memory $4F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $75.b		; 66 75 ; Rotate right $75.b [Reads: Direct Page] [Flags: ZNC]
	eor $34FA63.l		; 4F 63 FA 34 ; Exclusive OR accumulator with memory (long) $34FA63.l [Writes: Accumulator] [Flags: ZN]
	eor [$60.b],Y		; 57 60 ; Exclusive OR accumulator with memory (long indexed) [$60.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $66.b,S		; 63 66 ; Add with carry (stack relative) $66.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc [$55.b],Y		; 77 55 ; Add with carry (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $68.b		; 66 68 ; Rotate right $68.b [Reads: Direct Page] [Flags: ZNC]
	sbc ($63.b,X)		; E1 63 ; Subtract with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$66.b]		; E7 66 ; Subtract with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$11.b]		; 67 11 ; Add with carry (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $73.b		; 65 73 ; Add $73.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($25.b,S),Y		; 73 25 ; Add with carry (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $85B1.w,X		; 9E B1 85 ; Store zero to $85B1.w,X [Reads: X Index]
	sbc [$52.b]		; E7 52 ; Subtract with carry (long) [$52.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $17.b,X		; 36 17 ; Rotate left $17.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $96.b		; C5 96 ; Compare $96.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $5530.w,X		; 9D 30 55 ; Store accumulator to $5530.w,X [Reads: Accumulator, X Index]
	stz $AE06.w,X		; 9E 06 AE ; Store zero to $AE06.w,X [Reads: X Index]
	ora $51.b		; 05 51 ; Logical OR $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($07.b,X)		; 61 07 ; Add with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	ora [$22.b],Y		; 17 22 ; OR accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $AE.b		; C4 AE ; Compare $AE.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc [$06.b]		; E7 06 ; Subtract with carry (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $E7.b		; 06 E7 ; Arithmetic shift left $E7.b [Reads: Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldx $60E7.w		; AE E7 60 ; Load $60E7.w into X register [Writes: X Index] [Flags: ZN]
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: ZNC]
	and ($6C.b,X)		; 21 6C ; Logical AND ($6C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$67.b]		; 07 67 ; OR accumulator with memory (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$E7.b],Y		; 77 E7 ; Add with carry (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $AEE7.w,X		; 1D E7 AE ; OR accumulator with memory $AEE7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$66.b]		; 67 66 ; Add with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $60.b		; 85 60 ; Store accumulator to $60.b [Reads: Accumulator]
	sbc [$F0.b]		; E7 F0 ; Subtract with carry (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$66.b],Y		; 37 66 ; AND accumulator with memory (long indexed) [$66.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $E8E7.w		; AE E7 E8 ; Load $E8E7.w into X register [Writes: X Index] [Flags: ZN]
	sbc [$66.b]		; E7 66 ; Subtract with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$72.b]		; E7 72 ; Subtract with carry (long) [$72.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$66.b]		; 07 66 ; OR accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$F0.b],Y		; 77 F0 ; Add with carry (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $E46C.w		; AE 6C E4 ; Load $E46C.w into X register [Writes: X Index] [Flags: ZN]
	ror $76.b		; 66 76 ; Rotate right $76.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$75.b]		; E7 75 ; Subtract with carry (long) [$75.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $67F8.w,X		; 1D F8 67 ; OR accumulator with memory $67F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $F0.b,X		; 76 F0 ; Rotate right $F0.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $6C.b,S		; E3 6C ; Subtract stack-relative $6C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc [$67.b]		; 67 67 ; Add with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $E755.w,Y		; F9 55 E7 ; Subtract with carry $E755.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $76.b,X		; 76 76 ; Rotate right $76.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta [$E7.b],Y		; 97 E7 ; Store accumulator (long indexed) [$E7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sbc $5677.w,Y		; F9 77 56 ; Subtract with carry $5677.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$60.b]		; 67 60 ; Add with carry (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($5A.b,S),Y		; 73 5A ; Add with carry (stack relative indirect indexed) ($5A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$66.b]		; E7 66 ; Subtract with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$5C.b]		; E7 5C ; Subtract with carry (long) [$5C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($67.b,X)		; [PATTERN: Memory clearing operation] 61 67 ; Add with carry ($67.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$73.b]		; E7 73 ; Subtract with carry (long) [$73.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $679E.w		; 9C 9E 67 ; Store zero to $679E.w
	eor $1E.b,X		; 55 1E ; Exclusive OR accumulator with memory $1E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $E506.w,X		; 9E 06 E5 ; Store zero to $E506.w,X [Reads: X Index]
	and $11.b		; 25 11 ; Logical AND $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$AE.b],Y		; B7 AE ; Load accumulator (long indexed) [$AE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $0666.w		; AE 66 06 ; Load $0666.w into X register [Writes: X Index] [Flags: ZN]
	cpy $CCDC.w		; CC DC CC ; Compare $CCDC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $0000.w		; CC 00 00 ; Compare $0000.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $83CC.w		; CC CC 83 ; Compare $83CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $1000.w		; CC 00 10 ; Compare $1000.w with Y register [Reads: Y Index] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpy $85D2.w		; CC D2 85 ; Compare $85D2.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsr $E303.w		; 20 03 E3 ; Jump to subroutine at $E303.w [Writes: Stack Pointer] [Flow: call]
	sbc $CA.b,S		; E3 CA ; Subtract stack-relative $CA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ldx $0600.w		; AE 00 06 ; Load $0600.w into X register [Writes: X Index] [Flags: ZN]
	asl $1CC5.w		; 0E C5 1C ; Arithmetic shift left $1CC5.w [Flags: ZNC]
	adc $2720.w,X		; 7D 20 27 ; Add $2720.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $347C.w		; AE 7C 34 ; Load $347C.w into X register [Writes: X Index] [Flags: ZN]
	asl $0161.w		; 0E 61 01 ; Arithmetic shift left $0161.w [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $FAD0.w,X		; 7D D0 FA ; Add $FAD0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$01.b],Y		; 17 01 ; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2001AE.l		; 0F AE 01 20 ; OR accumulator with memory (long) $2001AE.l [Writes: Accumulator] [Flags: ZN]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	bit $60.b,X		; 34 60 ; Test bits $60.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $2134.w		; 6D 34 21 ; Add $2134.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $83		; 30 83 ; Branch if minus to $30, $83 [Flow: branch]
	jsr $34AE.w		; 20 AE 34 ; Jump to subroutine at $34AE.w [Writes: Stack Pointer] [Flow: call]
	ora ($60.b)		; 12 60 ; OR accumulator with memory (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor ($42.b,S),Y		; 53 42 ; XOR accumulator (stack relative indirect indexed) ($42.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $C5.b,Y		; 96 C5 ; Store X register $C5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($50.b),Y		; 11 50 ; OR accumulator with memory ($50.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $65CE.w,Y		; 39 CE 65 ; AND accumulator with memory $65CE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pei ($ED.b)		; D4 ED ; Push effective indirect address ($ED.b) [Reads: Direct Page] [Writes: Stack Pointer]
	adc ($02.b,X)		; 61 02 ; Add with carry ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $65.b,Y		; 96 65 ; Store X register $65.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $0651.w		; AE 51 06 ; Load $0651.w into X register [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $71AB.w		; AE AB 71 ; Load $71AB.w into X register [Writes: X Index] [Flags: ZN]
	mvn $12,$60		; 54 60 12 ; Move block negative $12,$60 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp [$A2.b]		; C7 A2 ; Compare accumulator (long) [$A2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $2666.w,X		; 1E 66 26 ; Arithmetic shift left $2666.w,X [Reads: X Index] [Flags: ZNC]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $C7.b		; C5 C7 ; Compare $C7.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$EF.b]		; C7 EF ; Compare accumulator (long) [$EF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $22AA.w,X		; 1E AA 22 ; Arithmetic shift left $22AA.w,X [Reads: X Index] [Flags: ZNC]
	rol $58.b		; 26 58 ; Rotate left $58.b [Reads: Direct Page] [Flags: ZNC]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	inc $12.b		; E6 12 ; Increment $12.b [Reads: Direct Page] [Flags: ZN]
	and ($1D.b,X)		; 21 1D ; Logical AND ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: ZN]
	ror $2120.w,X		; 7E 20 21 ; Rotate right $2120.w,X [Reads: X Index] [Flags: ZNC]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	sbc $210253.l		; EF 53 02 21 ; Subtract with carry (long) $210253.l [Writes: Accumulator] [Flags: ZVNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	cmp [$CC.b]		; C7 CC ; Compare accumulator (long) [$CC.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$A2.b],Y		; 57 A2 ; Exclusive OR accumulator with memory (long indexed) [$A2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $20.b		; C6 20 ; Decrement $20.b [Reads: Direct Page] [Flags: ZN]
	rol $05.b		; 26 05 ; Rotate left $05.b [Reads: Direct Page] [Flags: ZNC]
	jsr $4CD0.w		; 20 D0 4C ; Jump to subroutine at $4CD0.w [Writes: Stack Pointer] [Flow: call]
	ror $3150.w,X		; 7E 50 31 ; Rotate right $3150.w,X [Reads: X Index] [Flags: ZNC]
	eor ($82.b,S),Y		; 53 82 ; XOR accumulator (stack relative indirect indexed) ($82.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $17CD.w		; EE CD 17 ; Increment $17CD.w [Flags: ZN]
	jsl $86536A.l		; 22 6A 53 86 ; Jump to subroutine long $86536A.l [Writes: Stack Pointer] [Flow: call]
	pea $7261.w		; F4 61 72 ; Push absolute address $7261.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor ($35.b,S),Y		; 53 35 ; XOR accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $5031.w,X		; 9E 31 50 ; Store zero to $5031.w,X [Reads: X Index]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	jmp $33C7.w		; 4C C7 33 ; Jump to $33C7.w [Flow: jump]
	and ($5A.b)		; 32 5A ; AND accumulator with memory (indirect) ($5A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	inc $77.b		; E6 77 ; Increment $77.b [Reads: Direct Page] [Flags: ZN]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $CD89.w		; CD 89 CD ; Compare $CD89.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc ($72.b)		; 72 72 ; Add with carry (indirect) ($72.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $E7E6.w		; CD E6 E7 ; Compare $E7E6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc ($22.b)		; F2 22 ; Subtract with carry (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $E1.b		; A5 E1 ; Load $E1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$33.b],Y		; F7 33 ; Subtract with carry (long indexed) [$33.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $E627A0.l		; 22 A0 27 E6 ; Jump to subroutine long $E627A0.l [Writes: Stack Pointer] [Flow: call]
	inc $33.b		; E6 33 ; Increment $33.b [Reads: Direct Page] [Flags: ZN]
	jsl $E6E8E6.l		; 22 E6 E8 E6 ; Jump to subroutine long $E6E8E6.l [Writes: Stack Pointer] [Flow: call]
	sta $2522.w,X		; 9D 22 25 ; Store accumulator to $2522.w,X [Reads: Accumulator, X Index]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta [$68.b],Y		; 97 68 ; Store accumulator (long indexed) [$68.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ror $56.b,X		; 76 56 ; Rotate right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $65.b		; E6 65 ; Increment $65.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $6C		; 80 6C ; Branch always to $80, $6C [Flow: branch]
	and ($11.b,X)		; 21 11 ; Logical AND ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $CDD5.w		; CD D5 CD ; Compare $CDD5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $20.b		; 06 20 ; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: ZNC]
	and ($DD.b,X)		; 21 DD ; Logical AND ($DD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpx $C7.b		; E4 C7 ; Compare $C7.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $C7C722.l		; 22 22 C7 C7 ; Jump to subroutine long $C7C722.l [Writes: Stack Pointer] [Flow: call]
	cmp $22C4.w		; CD C4 22 ; Compare $22C4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsr $C6C6.w		; 20 C6 C6 ; Jump to subroutine at $C6C6.w [Writes: Stack Pointer] [Flow: call]
	cmp [$E4.b]		; C7 E4 ; Compare accumulator (long) [$E4.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $A2.b		; C6 A2 ; Decrement $A2.b [Reads: Direct Page] [Flags: ZN]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	inc $50.b,X		; F6 50 ; Increment memory $50.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$77.b]		; 27 77 ; AND accumulator with memory (long) [$77.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($05.b)		; 52 05 ; Exclusive OR accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($33.b),Y		; 71 33 ; Add with carry ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8BE6.w,X		; FD E6 8B ; Subtract with carry $8BE6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7722.w		; 8D 22 77 ; Store accumulator to $7722.w [Reads: Accumulator]
	inc $25.b		; E6 25 ; Increment $25.b [Reads: Direct Page] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $E60533.l		; 22 33 05 E6 ; Jump to subroutine long $E60533.l [Writes: Stack Pointer] [Flow: call]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $8D2A.w		; 8D 2A 8D ; Store accumulator to $8D2A.w [Reads: Accumulator]
	adc $77.b		; 65 77 ; Add $77.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($66.b),Y		; 71 66 ; Add with carry ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$94.b]		; 07 94 ; OR accumulator with memory (long) [$94.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($11.b,S),Y		; 93 11 ; Store accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc [$95.b],Y		; 77 95 ; Add with carry (long indexed) [$95.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($97.b,S),Y		; 93 97 ; Store accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $7777.w,Y		; 99 77 77 ; Store accumulator to $7777.w,Y [Reads: Accumulator, Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $77A9.w		; 9C A9 77 ; Store zero to $77A9.w
	adc [$A8.b],Y		; 77 A8 ; Add with carry (long indexed) [$A8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $77AD.w		; AC AD 77 ; Load $77AD.w into Y register [Writes: Y Index] [Flags: ZN]
	adc [$AE.b],Y		; 77 AE ; Add with carry (long indexed) [$AE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $94.b,X		; 95 94 ; Store accumulator to $94.b,X [Reads: Accumulator, X Index]
	sta ($77.b,S),Y		; 93 77 ; Store accumulator (stack relative indirect indexed) ($77.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc [$B7.b],Y		; 77 B7 ; Add with carry (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $ACA8.w		; AD A8 AC ; Load $ACA8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	lda $77BB.w,X		; BD BB 77 ; Load $77BB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$BC.b],Y		; 77 BC ; Add with carry (long indexed) [$BC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	lda $7777.w		; AD 77 77 ; Load $7777.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $C7.b		; C5 C7 ; Compare $C7.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $C3.b		; C6 C3 ; Decrement $C3.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$C7.b		; C9 C7 ; Compare #$C7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $7777.w		; AD 77 77 ; Load $7777.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $CB95.w		; AE 95 CB ; Load $CB95.w into X register [Writes: X Index] [Flags: ZN]
	cmp $77.b		; C5 77 ; Compare $77.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$CD.b],Y		; 77 CD ; Add with carry (long indexed) [$CD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	adc [$D1.b],Y		; 77 D1 ; Add with carry (long indexed) [$D1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $C3B8.w		; 9C B8 C3 ; Store zero to $C3B8.w
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C4E0.w,X		; DE E0 C4 ; Decrement memory $C4E0.w,X [Reads: X Index] [Flags: ZN]
	sbc ($77.b,X)		; E1 77 ; Subtract with carry ($77.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$97.b],Y		; 77 97 ; Add with carry (long indexed) [$97.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sta [$E4.b],Y		; 97 E4 ; Store accumulator (long indexed) [$E4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $97.b		; E6 97 ; Increment $97.b [Reads: Direct Page] [Flags: ZN]
	rep #$C6		; C2 C6 ; Reset processor status bits #$C6 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7.b,X		; F5 F7 ; Subtract $F7.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $98.b		; C6 98 ; Decrement $98.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta [$94.b],Y		; 97 94 ; Store accumulator (long indexed) [$94.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($77.b,S),Y		; 93 77 ; Store accumulator (stack relative indirect indexed) ($77.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc [$97.b],Y		; 77 97 ; Add with carry (long indexed) [$97.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $C6C5.w		; AC C5 C6 ; Load $C6C5.w into Y register [Writes: Y Index] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $2788DB.l		; 0F DB 88 27 ; OR accumulator with memory (long) $2788DB.l [Writes: Accumulator] [Flags: ZN]
	cmp $C4.b,S		; C3 C4 ; Compare accumulator (stack relative) $C4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $7708.w		; AD 08 77 ; Load $7708.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sep #$C5		; E2 C5 ; Set processor status bits #$C5 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	cmp $C8.b		; C5 C8 ; Compare $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy $D6.b		; C4 D6 ; Compare $D6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	adc [$DA.b],Y		; 77 DA ; Add with carry (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	cmp [$07.b]		; C7 07 ; Compare accumulator (long) [$07.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta [$DA.b]		; 87 DA ; Store accumulator (long) [$DA.b] [Reads: Accumulator, Direct Page]
	sty $E2.b,X		; 94 E2 ; Store Y register $E2.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cpy $7777.w		; CC 77 77 ; Compare $7777.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec $C5AD.w		; CE AD C5 ; Decrement $C5AD.w [Flags: ZN]
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	adc [$B9.b],Y		; 77 B9 ; Add with carry (long indexed) [$B9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$D7.b		; C9 D7 ; Compare #$D7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $7777.w,Y		; D9 77 77 ; Compare accumulator $7777.w,Y [Reads: Y Index] [Flags: ZNC]
	ldy $D5.b,X		; B4 D5 ; Load Y register $D5.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	jmp.w [$77D6]		; DC D6 77 ; Jump long indirect [$77D6] [Flow: jump]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $AF.b,X		; 16 AF ; Arithmetic shift left $AF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $78		; F0 78 ; Branch if equal to $F0, $78 [Flow: branch]
	adc [$96.b],Y		; 77 96 ; Add with carry (long indexed) [$96.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 16
	rep #$19		; C2 19
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	sta [$BD.b]		; 87 BD ; Store accumulator (long) [$BD.b] [Reads: Accumulator, Direct Page]
	cpy #$C9A8.w		; C0 A8 C9 ; Compare #$C9A8.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp [$D9.b],Y		; D7 D9 ; Compare accumulator (long indexed) [$D9.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $77.b,S		; C3 77 ; Compare accumulator (stack relative) $77.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	adc [$C4.b],Y		; 77 C4 ; Add with carry (long indexed) [$C4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $1C1B.w		; AD 1B 1C ; Load $1C1B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C5.b		; C6 C5 ; Decrement $C5.b [Reads: Direct Page] [Flags: ZN]
	dec $F8.b		; C6 F8 ; Decrement $F8.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $94.b		; C6 94 ; Decrement $94.b [Reads: Direct Page] [Flags: ZN]
	sta ($95.b,S),Y		; 93 95 ; Store accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	and #$78.b		; 29 78 ; Logical AND #$78.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stz $7788.w		; 9C 88 77 ; Store zero to $7788.w
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec $88.b		; C6 88 ; Decrement $88.b [Reads: Direct Page] [Flags: ZN]
	sta [$F9.b]		; 87 F9 ; Store accumulator (long) [$F9.b] [Reads: Accumulator, Direct Page]
	.db $30, $FA		; 30 FA ; Branch if minus to $30, $FA [Flow: branch]
	sbc $7778.w,Y		; F9 78 77 ; Subtract with carry $7778.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	adc [$9F.b],Y		; 77 9F ; Add with carry (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $B9.b		; C6 B9 ; Decrement $B9.b [Reads: Direct Page] [Flags: ZN]
	and $7807.w,X		; 3D 07 78 ; AND accumulator with memory $7807.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	adc ($77.b)		; 72 77 ; Add with carry (indirect) ($77.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $A9.b		; C6 A9 ; Decrement $A9.b [Reads: Direct Page] [Flags: ZN]
	rol $70C6.w,X		; 3E C6 70 ; Rotate left $70C6.w,X [Reads: X Index] [Flags: ZNC]
	sta [$C7.b]		; 87 C7 ; Store accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $C7.b,X		; 34 C7 ; Test bits $C7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $78.b		; C6 78 ; Decrement $78.b [Reads: Direct Page] [Flags: ZN]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $D0.b		; C6 D0 ; Decrement $D0.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	adc [$43.b],Y		; 77 43 ; Add with carry (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $C594.w		; AD 94 C5 ; Load $C594.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	cmp [$CF.b]		; C7 CF ; Compare accumulator (long) [$CF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $98.b,S		; 43 98 ; Exclusive OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	dec $F8.b		; C6 F8 ; Decrement $F8.b [Reads: Direct Page] [Flags: ZN]
	inc $1B.b		; E6 1B ; Increment $1B.b [Reads: Direct Page] [Flags: ZN]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$E3.b		; 49 E3 ; Exclusive OR #$E3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $C2.b		; C4 C2 ; Compare $C2.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $AD		; D0 AD ; Branch if not equal to $D0, $AD [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc [$97.b],Y		; 77 97 ; Add with carry (long indexed) [$97.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $C6AE.w		; 4C AE C6 ; Jump to $C6AE.w [Flow: jump]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc [$F3.b],Y		; 77 F3 ; Add with carry (long indexed) [$F3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $BCB9.w		; EE B9 BC ; Increment $BCB9.w [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F8.b,S),Y		; F3 F8 ; Subtract with carry (stack relative indirect indexed) ($F8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $CC.b		; C5 CC ; Compare $CC.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rep #$4D		; C2 4D ; Reset processor status bits #$4D [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sta [$77.b],Y		; 97 77 ; Store accumulator (long indexed) [$77.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$D7.b]		; 87 D7 ; Store accumulator (long) [$D7.b] [Reads: Accumulator, Direct Page]
	lsr $94.b		; 46 94 ; Logical shift right $94.b [Reads: Direct Page] [Flags: ZNC]
	lda $7778.w		; AD 78 77 ; Load $7778.w into accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$F3		; C2 F3
	cmp [$DA.b]		; C7 DA ; Compare accumulator (long) [$DA.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $970D.w		; AE 0D 97 ; Load $970D.w into X register [Writes: X Index] [Flags: ZN]
	lda $7778.w,Y		; B9 78 77 ; Load $7778.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora DMASRC4H.w		; 0D 43 43 ; Logical OR DMASRC4H.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $88.b		; 46 88 ; Logical shift right $88.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $4E.b,S		; E3 4E ; Subtract stack-relative $4E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp [$77.b],Y		; D7 77 ; Compare accumulator (long indexed) [$77.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta [$C9.b]		; 87 C9 ; Store accumulator (long) [$C9.b] [Reads: Accumulator, Direct Page]
	cmp [$CF.b]		; C7 CF ; Compare accumulator (long) [$CF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($F2.b,S),Y		; D3 F2 ; Compare accumulator (stack relative indirect indexed) ($F2.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc $0000.w		; ED 00 00 ; Subtract $0000.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc ($34.b)		; F2 34 ; Subtract with carry (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0049.w,Y		; F9 49 00 ; Subtract with carry $0049.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$FD.b]		; 07 FD ; OR accumulator with memory (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($34.b)		; F2 34 ; Subtract with carry (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	eor ($50.b)		; 52 50 ; Exclusive OR accumulator with memory (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $50,$55		; 54 55 50 ; Move block negative $50,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($50.b)		; 52 50 ; Exclusive OR accumulator with memory (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jmp $88505C.l		; 5C 5C 50 88 ; Jump long to $88505C.l [Flow: jump]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $888865.l,X		; 5F 65 88 88 ; Exclusive OR accumulator with memory (long,X) $888865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($1C.b),Y		; 51 1C ; Exclusive OR accumulator with memory ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $50, $67		; 50 67 ; Branch if overflow clear to $50, $67 [Flow: branch]
	jmp $888869.l		; 5C 69 88 88 ; Jump long to $888869.l [Flow: jump]
	adc $583170.l		; 6F 70 31 58 ; Add with carry (long) $583170.l [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	adc $888876.l		; 6F 76 88 88 ; Add with carry (long) $888876.l [Writes: Accumulator] [Flags: ZVNC]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ror $8888.w,X		; 7E 88 88 ; Rotate right $8888.w,X [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $088181.l,X		; 7F 81 81 08 ; Add long $088181.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $83, $72		; 82 83 72 ; Branch always long to $82, $83, $72 [Flow: branch]
	ror $8888.w,X		; 7E 88 88 ; Rotate right $8888.w,X [Reads: X Index] [Flags: ZNC]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	.db $50, $54		; 50 54 ; Branch if overflow clear to $50, $54 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$50.b]		; 87 50 ; Store accumulator (long) [$50.b] [Reads: Accumulator, Direct Page]
	adc $88.b		; 65 88 ; Add $88.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($7F.b),Y		; 51 7F ; Exclusive OR accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $8888.w,X		; 7E 88 88 ; Rotate right $8888.w,X [Reads: X Index] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvn $11,$58		; 54 58 11 ; Move block negative $11,$58 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $50.b		; 84 50 ; Store Y register to $50.b [Reads: Y Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora [$88.b],Y		; 17 88 ; OR accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($53.b,X)		; 81 53 ; Store accumulator ($53.b,X) [Reads: Accumulator, X Index, Direct Page]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ror $888A.w		; 6E 8A 88 ; Rotate right $888A.w [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lsr $888E.w,X		; 5E 8E 88 ; Logical shift right $888E.w,X [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($57.b,S),Y		; 53 57 ; XOR accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($23.b),Y		; 51 23 ; Exclusive OR accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($34.b,X)		; 81 34 ; Store accumulator ($34.b,X) [Reads: Accumulator, X Index, Direct Page]
	cmp #$5376.w		; C9 76 53 ; Compare #$5376.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $A5.b		; A4 A5 ; Load $A5.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp [$CC.b]		; C7 CC ; Compare accumulator (long) [$CC.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $39.b		; A5 39 ; Load $39.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $11CC.w,Y		; 39 CC 11 ; AND accumulator with memory $11CC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $7C		; 10 7C ; Branch if plus to $10, $7C [Flow: branch]
	sta ($A5.b,S),Y		; 93 A5 ; Store accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
	lsr $954E.w		; 4E 4E 95 ; Logical shift right $954E.w [Flags: ZNC]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $9997.w,X		; 5E 97 99 ; Logical shift right $9997.w,X [Reads: X Index] [Flags: ZNC]
	sta $8888.w,Y		; 99 88 88 ; Store accumulator to $8888.w,Y [Reads: Accumulator, Y Index]
	stz $9E9E.w		; 9C 9E 9E ; Store zero to $9E9E.w
	ldy #$8888.w		; A0 88 88 ; Load #$8888.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($A2.b,X)		; A1 A2 ; Load accumulator ($A2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $6B.b		; A4 6B ; Load $6B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $50, $58		; 50 58 ; Branch if overflow clear to $50, $58 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $AC.b		; 24 AC ; Test bits $AC.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldy #$18A0.w		; A0 A0 18 ; Load #$18A0.w into Y register [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $99B3B1.l		; AF B1 B3 99 ; Load long $99B3B1.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($B5.b,X)		; A1 B5 ; Load accumulator ($B5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$71.b],Y		; B7 71 ; Load accumulator (long indexed) [$71.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ror $2351.w		; 6E 51 23 ; Rotate right $2351.w [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($70.b,X)		; 81 70 ; Store accumulator ($70.b,X) [Reads: Accumulator, X Index, Direct Page]
	lda $88A0C1.l,X		; BF C1 A0 88 ; Load long $88A0C1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rep #$C4		; C2 C4 ; Reset processor status bits #$C4 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.ACCU 16
	rep #$A0		; C2 A0
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($C7.b)		; B2 C7 ; Load accumulator (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $52.b,X		; 34 52 ; Test bits $52.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc [$76.b],Y		; 77 76 ; Add with carry (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $88		; 70 88 ; Branch if overflow set to $70, $88 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp ($D9.b,X)		; C1 D9 ; Compare accumulator ($D9.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $DFDE.w,X		; DD DE DF ; Compare accumulator $DFDE.w,X [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($34.b,X)		; E1 34 ; Subtract with carry ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	inc $F1F0.w		; EE F0 F1 ; Increment $F1F0.w [Flags: ZN]
	sbc ($88.b,S),Y		; F3 88 ; Subtract with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pea $F4F3.w		; F4 F3 F4 ; Push absolute address $F4F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inc $88.b,X		; F6 88 ; Increment memory $88.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $58.b,X		; 34 58 ; Test bits $58.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $88		; 80 88 ; Branch always to $80, $88 [Flow: branch]
	ora ($CF.b,X)		; 01 CF ; Logical OR ($CF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $CF		; F0 CF ; Branch if equal to $F0, $CF [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $E8.b,X		; 34 E8 ; Test bits $E8.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $0601.w,Y		; 99 01 06 ; Store accumulator to $0601.w,Y [Reads: Accumulator, Y Index]
	sbc ($15.b,S),Y		; F3 15 ; Subtract with carry (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$11.b]		; C7 11 ; Compare accumulator (long) [$11.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr $AD76.w		; 20 76 AD ; Jump to subroutine at $AD76.w [Writes: Stack Pointer] [Flow: call]
	cmp [$86.b]		; C7 86 ; Compare accumulator (long) [$86.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	bit $7C.b,X		; 34 7C ; Test bits $7C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($34.b,S),Y		; 93 34 ; Store accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	stz $8007.w,X		; 9E 07 80 ; Store zero to $8007.w,X [Reads: X Index]
	cop $39.b		; 02 39 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($4E.b,S),Y		; 93 4E ; Store accumulator (stack relative indirect indexed) ($4E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	.db $50, $18		; 50 18 ; Branch if overflow clear to $50, $18 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $50, $63		; 50 63 ; Branch if overflow clear to $50, $63 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $50, $88		; 50 88 ; Branch if overflow clear to $50, $88 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $5D0A.w,X		; 5D 0A 5D ; Exclusive OR accumulator with memory $5D0A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	.db $50, $58		; 50 58 ; Branch if overflow clear to $50, $58 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $50, $82		; 50 82 ; Branch if overflow clear to $50, $82 [Flow: branch]
	.db $82, $88, $88		; 82 88 88 ; Branch always long to $82, $88, $88 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $5C.b,S		; 63 5C ; Add with carry (stack relative) $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jmp $5C8888.l		; 5C 88 88 5C ; Jump long to $5C8888.l [Flow: jump]
	stz $81.b		; 64 81 ; Store zero to $81.b
	ror $8888.w		; 6E 88 88 ; Rotate right $8888.w [Flags: ZNC]
	.db $80, $53		; 80 53 ; Branch always to $80, $53 [Flow: branch]
	mvn $88,$56		; 54 56 88 ; Move block negative $88,$56 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($6C.b,X)		; 81 6C ; Store accumulator ($6C.b,X) [Reads: Accumulator, X Index, Direct Page]
	adc [$5C.b]		; 67 5C ; Add with carry (long) [$5C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($8A.b,X)		; 81 8A ; Store accumulator ($8A.b,X) [Reads: Accumulator, X Index, Direct Page]
	bit #$885F.w		; 89 5F 88 ; Test bits #$885F.w with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($51.b,S),Y		; 53 51 ; XOR accumulator (stack relative indirect indexed) ($51.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc [$63.b]		; 67 63 ; Add with carry (long) [$63.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $888864.l		; 5C 64 88 88 ; Jump long to $888864.l [Flow: jump]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $50, $53		; 50 53 ; Branch if overflow clear to $50, $53 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $8181.w		; 6E 81 81 ; Rotate right $8181.w [Flags: ZNC]
	eor $88.b,X		; 55 88 ; Exclusive OR accumulator with memory $88.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($67.b,X)		; 81 67 ; Store accumulator ($67.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($5E.b,X)		; 81 5E ; Store accumulator ($5E.b,X) [Reads: Accumulator, X Index, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and [$66.b]		; 27 66 ; AND accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($23.b,X)		; 81 23 ; Store accumulator ($23.b,X) [Reads: Accumulator, X Index, Direct Page]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($25.b,X)		; 81 25 ; Store accumulator ($25.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($38.b,S),Y		; 13 38 ; OR accumulator (stack relative indirect indexed) ($38.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $C911.w,Y		; 19 11 C9 ; OR accumulator with memory $C911.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($7F.b,S),Y		; 73 7F ; Add with carry (stack relative indirect indexed) ($7F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$88.b]		; 27 88 ; AND accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($15.b),Y		; 71 15 ; Add with carry ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $99.b,X		; 16 99 ; Arithmetic shift left $99.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $1616.w,Y		; 99 16 16 ; Store accumulator to $1616.w,Y [Reads: Accumulator, Y Index]
	sbc $73.b,S		; E3 73 ; Subtract stack-relative $73.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sta $4E88.w,Y		; 99 88 4E ; Store accumulator to $4E88.w,Y [Reads: Accumulator, Y Index]
	adc ($95.b),Y		; 71 95 ; Add with carry ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $6467.w		; 2D 67 64 ; Logical AND $6467.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $8818.w		; 6E 18 88 ; Rotate right $8818.w [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $808C.w		; 8C 8C 80 ; Store Y register to $808C.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $586E.w		; 0C 6E 58 ; Test and set bits $586E.w [Reads: Accumulator] [Flags: Z]
	sta [$98.b]		; 87 98 ; Store accumulator (long) [$98.b] [Reads: Accumulator, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C99.w,Y		; 99 99 0C ; Store accumulator to $0C99.w,Y [Reads: Accumulator, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit #$1898.w		; 89 98 18 ; Test bits #$1898.w with accumulator [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ror $63.b		; 66 63 ; Rotate right $63.b [Reads: Direct Page] [Flags: ZNC]
	adc #$8888.w		; 69 88 88 ; Add #$8888.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor ($6B.b)		; 52 6B ; Exclusive OR accumulator with memory (indirect) ($6B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($88.b,S),Y		; 53 88 ; XOR accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $578B.w		; 0C 8B 57 ; Test and set bits $578B.w [Reads: Accumulator] [Flags: Z]
	ora $8998.w		; 0D 98 89 ; Logical OR $8998.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $885858.l		; 6F 58 58 88 ; Add with carry (long) $885858.l [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $69		; 80 69 ; Branch always to $80, $69 [Flow: branch]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $68, $88		; 62 68 88 ; Push effective relative address $62, $68, $88 [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $5065.w		; 6D 65 50 ; Add $5065.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $8888.w		; 6E 88 88 ; Rotate right $8888.w [Flags: ZNC]
	adc $1D5150.l,X		; 7F 50 51 1D ; Add long $1D5150.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($52.b,X)		; 81 52 ; Store accumulator ($52.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $526A1B.l		; 6F 1B 6A 52 ; Add with carry (long) $526A1B.l [Writes: Accumulator] [Flags: ZVNC]
	bit #$8F88.w		; 89 88 8F ; Test bits #$8F88.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$6F95.w		; 89 95 6F ; Test bits #$6F95.w with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lsr $506F.w		; 4E 6F 50 ; Logical shift right $506F.w [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($50.b)		; 92 50 ; Store accumulator (indirect) ($50.b) [Reads: Accumulator, Direct Page]
	lsr $8152.w,X		; 5E 52 81 ; Logical shift right $8152.w,X [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $8C8C6E.l,X		; 7F 6E 8C 8C ; Add long $8C8C6E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lsr $54.b,X		; 56 54 ; Logical shift right $54.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $80, $8B		; 80 8B ; Branch always to $80, $8B [Flow: branch]
	ora ($88.b),Y		; 11 88 ; OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($58.b)		; 52 58 ; Exclusive OR accumulator with memory (indirect) ($58.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $88.b,S		; C3 88 ; Compare accumulator (stack relative) $88.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta ($26.b,X)		; 81 26 ; Store accumulator ($26.b,X) [Reads: Accumulator, X Index, Direct Page]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $2D.b		; 24 2D ; Test bits $2D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $804E.w		; 2E 4E 80 ; Rotate left $804E.w [Flags: ZNC]
	.db $62, $21, $88		; 62 21 88 ; Push effective relative address $62, $21, $88 [Writes: Stack Pointer]
	mvn $0F,$56		; 54 56 0F ; Move block negative $0F,$56 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $50, $88		; 50 88 ; Branch if overflow clear to $50, $88 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($808B.w)		; 6C 8B 80 ; Jump indirect to ($808B.w) [Flow: jump]
	adc [$88.b]		; 67 88 ; Add with carry (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $89.b,S		; 63 89 ; Add with carry (stack relative) $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $52		; 50 52 ; Branch if overflow clear to $50, $52 [Flow: branch]
	.db $50, $58		; 50 58 ; Branch if overflow clear to $50, $58 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $67		; 50 67 ; Branch if overflow clear to $50, $67 [Flow: branch]
	jmp ($8835.w)		; 6C 35 88 ; Jump indirect to ($8835.w) [Flow: jump]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	bit $53.b,X		; 34 53 ; Test bits $53.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $8920.w		; 0D 20 89 ; Logical OR $8920.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $D53466.l		; 22 66 34 D5 ; Jump to subroutine long $D53466.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $6334.w,Y		; 19 34 63 ; OR accumulator with memory $6334.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Accumulator, Direct Page]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $58.b,X		; 34 58 ; Test bits $58.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $8310.w		; 9C 10 83 ; Store zero to $8310.w
	bit $5B.b,X		; 34 5B ; Test bits $5B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta [$80.b]		; 87 80 ; Store accumulator (long) [$80.b] [Reads: Accumulator, Direct Page]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $2A.b,X		; 34 2A ; Test bits $2A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $53.b,X		; 75 53 ; Add $53.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora #$DB18.w		; 09 18 DB ; Logical OR #$DB18.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	ora #$5377.w		; 09 77 53 ; Logical OR #$5377.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $4A08.w,Y		; 19 08 4A ; OR accumulator with memory $4A08.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $193D.w,X		; 3C 3D 19 ; Test bits $193D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta $533F.w,Y		; 99 3F 53 ; Store accumulator to $533F.w,Y [Reads: Accumulator, Y Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $91.b,X		; 34 91 ; Test bits $91.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $47		; 90 47 ; Branch if carry clear to $90, $47 [Flow: branch]
	eor #$5834.w		; 49 34 58 ; Exclusive OR #$5834.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5408.w,Y		; 99 08 54 ; Store accumulator to $5408.w,Y [Reads: Accumulator, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($71.b,X)		; 81 71 ; Store accumulator ($71.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	ora $8988.w		; 0D 88 89 ; Logical OR $8988.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sty $8886.w		; 8C 86 88 ; Store Y register to $8886.w [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($82.b),Y		; 11 82 ; OR accumulator with memory ($82.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	bit #$8898.w		; 89 98 88 ; Test bits #$8898.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$896E.w		; 89 6E 89 ; Test bits #$896E.w with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $8988.w		; 0C 88 89 ; Test and set bits $8988.w [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $50.b		; 86 50 ; Store X register to $50.b [Reads: X Index]
	ldy $8788.w		; AC 88 87 ; Load $8788.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $C6.b		; C5 C6 ; Compare $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $3DDA.w		; 4D DA 3D ; Exclusive OR $3DDA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($97.b,X)		; 41 97 ; Exclusive OR accumulator with memory ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lsr $D0.b		; 46 D0 ; Logical shift right $D0.b [Reads: Direct Page] [Flags: ZNC]
	.db $D0, $C6		; D0 C6 ; Branch if not equal to $D0, $C6 [Flow: branch]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	dec $30.b		; C6 30 ; Decrement $30.b [Reads: Direct Page] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit $7878.w		; 2C 78 78 ; Test bits $7878.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	lda $46C4C3.l		; AF C3 C4 46 ; Load long $46C4C3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $DAD0.w		; 4E D0 DA ; Logical shift right $DAD0.w [Flags: ZNC]
	dec $87.b		; C6 87 ; Decrement $87.b [Reads: Direct Page] [Flags: ZN]
	adc [$36.b],Y		; 77 36 ; Add with carry (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $C3C9.w		; AC C9 C3 ; Load $C3C9.w into Y register [Writes: Y Index] [Flags: ZN]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $C6C6.w		; AC C6 C6 ; Load $C6C6.w into Y register [Writes: Y Index] [Flags: ZN]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	cpy $C64A.w		; CC 4A C6 ; Compare $C64A.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec $78.b		; C6 78 ; Decrement $78.b [Reads: Direct Page] [Flags: ZN]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $55.b		; C5 55 ; Compare $55.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$79.b],Y		; 77 79 ; Add with carry (long indexed) [$79.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$D6.b],Y		; D7 D6 ; Compare accumulator (long indexed) [$D6.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $CC.b		; C5 CC ; Compare $CC.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $94.b		; C6 94 ; Decrement $94.b [Reads: Direct Page] [Flags: ZN]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$97.b],Y		; D7 97 ; Compare accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$43.b],Y		; D7 43 ; Compare accumulator (long indexed) [$43.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $DCD7.w		; AC D7 DC ; Load $DCD7.w into Y register [Writes: Y Index] [Flags: ZN]
	lsr $7877.w		; 4E 77 78 ; Logical shift right $7877.w [Flags: ZNC]
	lsr $D7.b		; 46 D7 ; Logical shift right $D7.b [Reads: Direct Page] [Flags: ZNC]
.INDEX 16
	rep #$D7		; C2 D7
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	wai		; CB ; Wait for interrupt
	sta [$C5.b],Y		; 97 C5 ; Store accumulator (long indexed) [$C5.b],Y [Reads: Accumulator, Direct Page, Y Index]
	.db $10, $77		; 10 77 ; Branch if plus to $10, $77 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $DBD711.l		; 0F 11 D7 DB ; OR accumulator with memory (long) $DBD711.l [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc [$AD.b],Y		; 77 AD ; Add with carry (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C6.b		; C5 C6 ; Compare $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
.ACCU 16
.INDEX 16
	rep #$77		; C2 77
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $40.b		; C6 40 ; Decrement $40.b [Reads: Direct Page] [Flags: ZN]
	bit $77.b		; 24 77 ; Test bits $77.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $4EC5D7.l		; CF D7 C5 4E ; Compare accumulator (long) $4EC5D7.l [Reads: Accumulator] [Flags: ZNC]
	adc [$79.b],Y		; 77 79 ; Add with carry (long indexed) [$79.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $ADB0EF.l		; CF EF B0 AD ; Compare accumulator (long) $ADB0EF.l [Reads: Accumulator] [Flags: ZNC]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $55E5.w,Y		; 99 E5 55 ; Store accumulator to $55E5.w,Y [Reads: Accumulator, Y Index]
	sta [$77.b],Y		; 97 77 ; Store accumulator (long indexed) [$77.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$C4.b],Y		; 97 C4 ; Store accumulator (long indexed) [$C4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $BE.b,S		; A3 BE ; Load accumulator (stack relative) $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$77		; C2 77
	adc [$DB.b],Y		; 77 DB ; Add with carry (long indexed) [$DB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $E2FB.w		; 4C FB E2 ; Jump to $E2FB.w [Flow: jump]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc [$36.b],Y		; 77 36 ; Add with carry (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$C5.b]		; C7 C5 ; Compare accumulator (long) [$C5.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $07.b		; C4 07 ; Compare $07.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	adc [$DA.b],Y		; 77 DA ; Add with carry (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$1E.b]		; E7 1E ; Subtract with carry (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$77.b]		; C7 77 ; Compare accumulator (long) [$77.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta [$C6.b]		; 87 C6 ; Store accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: ZN]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	and [$4A.b]		; 27 4A ; AND accumulator with memory (long) [$4A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	sty $96.b,X		; 94 96 ; Store Y register $96.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp ($5A.b),Y		; D1 5A ; Compare accumulator ($5A.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc [$79.b],Y		; 77 79 ; Add with carry (long indexed) [$79.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $D0.b		; C6 D0 ; Decrement $D0.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $A8		; D0 A8 ; Branch if not equal to $D0, $A8 [Flow: branch]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $4ED5.w,Y		; B9 D5 4E ; Load $4ED5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	rol $F8.b,X		; 36 F8 ; Rotate left $F8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora [$89.b]		; 07 89 ; OR accumulator with memory (long) [$89.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $36.b		; 25 36 ; Logical AND $36.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $32.b,X		; 36 32 ; Rotate left $32.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora $DA23.w		; 0D 23 DA ; Logical OR $DA23.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BD.b]		; 87 BD ; Store accumulator (long) [$BD.b] [Reads: Accumulator, Direct Page]
	jmp $7950C6.l		; 5C C6 50 79 ; Jump long to $7950C6.l [Flow: jump]
	adc $C208.w,Y		; 79 08 C2 ; Add $C208.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	sta [$77.b]		; 87 77 ; Store accumulator (long) [$77.b] [Reads: Accumulator, Direct Page]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	lsr $77F9.w		; 4E F9 77 ; Logical shift right $77F9.w [Flags: ZNC]
	sta [$49.b]		; 87 49 ; Store accumulator (long) [$49.b] [Reads: Accumulator, Direct Page]
	lda $87DAF0.l		; AF F0 DA 87 ; Load long $87DAF0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$5B.b],Y		; 77 5B ; Add with carry (long indexed) [$5B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	eor [$A6.b],Y		; 57 A6 ; Exclusive OR accumulator with memory (long indexed) [$A6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $97		; 90 97 ; Branch if carry clear to $90, $97 [Flow: branch]
	ora $A4C815.l,X		; 1F 15 C8 A4 ; Logical OR long $A4C815.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc [$F2.b],Y		; 77 F2 ; Add with carry (long indexed) [$F2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $C6.b,X		; 15 C6 ; OR accumulator with memory $C6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $247778.l,X		; 9F 78 77 24 ; Store accumulator (long,X) $247778.l,X [Reads: Accumulator, X Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $88.b		; C6 88 ; Decrement $88.b [Reads: Direct Page] [Flags: ZN]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Accumulator, Direct Page]
	cmp ($B6.b)		; D2 B6 ; Compare accumulator (indirect) ($B6.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($87.b,X)		; 21 87 ; Logical AND ($87.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp ($B1.b),Y		; D1 B1 ; Compare accumulator ($B1.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($D1.b),Y		; B1 D1 ; Load accumulator ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $775B.w		; 4E 5B 77 ; Logical shift right $775B.w [Flags: ZNC]
	bit #$BFA4.w		; 89 A4 BF ; Test bits #$BFA4.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda $774B.w,X		; BD 4B 77 ; Load $774B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($C6.b,S),Y		; F3 C6 ; Subtract with carry (stack relative indirect indexed) ($C6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx $7777.w		; AE 77 77 ; Load $7777.w into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jmp $F3C2.w		; 4C C2 F3 ; Jump to $F3C2.w [Flow: jump]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc [$D2.b],Y		; 77 D2 ; Add with carry (long indexed) [$D2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $21.b,Y		; B6 21 ; Load X register $21.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: ZN]
	sta [$43.b]		; 87 43 ; Store accumulator (long) [$43.b] [Reads: Accumulator, Direct Page]
	dec $C3.b		; C6 C3 ; Decrement $C3.b [Reads: Direct Page] [Flags: ZN]
	adc ($87.b,X)		; 61 87 ; Add with carry ($87.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $2F1D.w,Y		; 79 1D 2F ; Add $2F1D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cmp $88.b		; C5 88 ; Compare $88.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $2D.b,X		; 34 2D ; Test bits $2D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $8878.w		; 20 78 88 ; Jump to subroutine at $8878.w [Writes: Stack Pointer] [Flow: call]
	dec $36.b		; C6 36 ; Decrement $36.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	.db $70, $77		; 70 77 ; Branch if overflow set to $70, $77 [Flow: branch]
	dec $E4.b		; C6 E4 ; Decrement $E4.b [Reads: Direct Page] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lsr $77.b		; 46 77 ; Logical shift right $77.b [Reads: Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $7877.w		; 20 77 78 ; Jump to subroutine at $7877.w [Writes: Stack Pointer] [Flow: call]
	dec $43.b		; C6 43 ; Decrement $43.b [Reads: Direct Page] [Flags: ZN]
	ora #$78DA.w		; 09 DA 78 ; Logical OR #$78DA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $66.b		; C4 66 ; Compare $66.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ror $90.b		; 66 90 ; Rotate right $90.b [Reads: Direct Page] [Flags: ZNC]
	sta $C464.w,Y		; 99 64 C4 ; Store accumulator to $C464.w,Y [Reads: Accumulator, Y Index]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $99		; 90 99 ; Branch if carry clear to $90, $99 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$6668.w		; C9 68 66 ; Compare #$6668.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jmp ($9909.w)		; 6C 09 99 ; Jump indirect to ($9909.w) [Flow: jump]
	adc $CADF.w		; 6D DF CA ; Add $CADF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	.db $70, $71		; 70 71 ; Branch if overflow set to $70, $71 [Flow: branch]
	adc ($6D.b)		; 72 6D ; Add with carry (indirect) ($6D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $C499.w,Y		; 99 99 C4 ; Store accumulator to $C499.w,Y [Reads: Accumulator, Y Index]
	cmp $008B4E.l		; CF 4E 8B 00 ; Compare accumulator (long) $008B4E.l [Reads: Accumulator] [Flags: ZNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $C9.b		; E6 C9 ; Increment $C9.b [Reads: Direct Page] [Flags: ZN]
	cmp #$0000.w		; C9 00 00 ; Compare #$0000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C86D.w		; AD 6D C8 ; Load $C86D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec $0021.w		; CE 21 00 ; Decrement $0021.w [Flags: ZN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$34.b],Y		; 37 34 ; AND accumulator with memory (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	.db $62, $75, $6C		; 62 75 6C ; Push effective relative address $62, $75, $6C [Writes: Stack Pointer]
	jmp.w [$1019]		; DC 19 10 ; Jump long indirect [$1019] [Flow: jump]
	jmp.w [$3434]		; DC 34 34 ; Jump long indirect [$3434] [Flow: jump]
	lsr $0100.w		; 4E 00 01 ; Logical shift right $0100.w [Flags: ZNC]
	sta ($4F.b),Y		; 91 4F ; Store accumulator ($4F.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and $8185.w,Y		; 39 85 81 ; AND accumulator with memory $8185.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($A4.b,X)		; 41 A4 ; Exclusive OR accumulator with memory ($A4.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $78.b,X		; 76 78 ; Rotate right $78.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $92		; 10 92 ; Branch if plus to $10, $92 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit #$3985.w		; 89 85 39 ; Test bits #$3985.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($81.b)		; 92 81 ; Store accumulator (indirect) ($81.b) [Reads: Accumulator, Direct Page]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $6494.w,Y		; 39 94 64 ; AND accumulator with memory $6494.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($82.b),Y		; 11 82 ; OR accumulator with memory ($82.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($2077.w,X)		; 7C 77 20 ; Jump indirect indexed to ($2077.w,X) [Reads: X Index] [Flow: jump]
	adc $802999.l,X		; 7F 99 29 80 ; Add long $802999.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	stz $85.b		; 64 85 ; Store zero to $85.b
	sta $20.b,S		; 83 20 ; Store accumulator (stack relative) $20.b,S [Reads: Accumulator, Stack Pointer]
	and #$8722.w		; 29 22 87 ; Logical AND #$8722.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit #$658A.w		; 89 8A 65 ; Test bits #$658A.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta $2092.w,Y		; 99 92 20 ; Store accumulator to $2092.w,Y [Reads: Accumulator, Y Index]
	stz $8C.b		; 64 8C ; Store zero to $8C.b
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $658D92.l		; 22 92 8D 65 ; Jump to subroutine long $658D92.l [Writes: Stack Pointer] [Flow: call]
	stx $7C.b		; 86 7C ; Store X register to $7C.b [Reads: X Index]
	jsl $659099.l		; 22 99 90 65 ; Jump to subroutine long $659099.l [Writes: Stack Pointer] [Flow: call]
	ror $89.b,X		; 76 89 ; Rotate right $89.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	sty $92.b,X		; 94 92 ; Store Y register $92.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	and [$78.b]		; 27 78 ; AND accumulator with memory (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($12.b)		; 92 12 ; Store accumulator (indirect) ($12.b) [Reads: Accumulator, Direct Page]
	.db $82, $78, $8D		; 82 78 8D ; Branch always long to $82, $78, $8D [Flow: branch]
	.db $70, $92		; 70 92 ; Branch if overflow set to $70, $92 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $7878.w,X		; 7E 78 78 ; Rotate right $7878.w,X [Reads: X Index] [Flags: ZNC]
	adc [$92.b],Y		; 77 92 ; Add with carry (long indexed) [$92.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$814F.w		; 29 4F 81 ; Logical AND #$814F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $89		; 80 89 ; Branch always to $80, $89 [Flow: branch]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $978880.l,X		; 7F 80 88 97 ; Add long $978880.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $808929.l		; 22 29 89 80 ; Jump to subroutine long $808929.l [Writes: Stack Pointer] [Flow: call]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $997892.l		; 22 92 78 99 ; Jump to subroutine long $997892.l [Writes: Stack Pointer] [Flow: call]
	sta $2978.w		; 8D 78 29 ; Store accumulator to $2978.w [Reads: Accumulator]
	jsl $787D99.l		; 22 99 7D 78 ; Jump to subroutine long $787D99.l [Writes: Stack Pointer] [Flow: call]
	adc $99.b		; 65 99 ; Add $99.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $817878.l		; 22 78 78 81 ; Jump to subroutine long $817878.l [Writes: Stack Pointer] [Flow: call]
	bit #$9222.w		; 89 22 92 ; Test bits #$9222.w with accumulator [Reads: Accumulator] [Flags: Z]
	stz $8078.w,X		; 9E 78 80 ; Store zero to $8078.w,X [Reads: X Index]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta $862F.w,Y		; 99 2F 86 ; Store accumulator to $862F.w,Y [Reads: Accumulator, Y Index]
	rol $4B.b,X		; 36 4B ; Rotate left $4B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $837F.w,Y		; 99 7F 83 ; Store accumulator to $837F.w,Y [Reads: Accumulator, Y Index]
	stz $99.b		; 64 99 ; Store zero to $99.b
	jsl $78A181.l		; 22 81 A1 78 ; Jump to subroutine long $78A181.l [Writes: Stack Pointer] [Flow: call]
	sta $29.b,S		; 83 29 ; Store accumulator (stack relative) $29.b,S [Reads: Accumulator, Stack Pointer]
	jsl $657880.l		; 22 80 78 65 ; Jump to subroutine long $657880.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	jsl $838C89.l		; 22 89 8C 83 ; Jump to subroutine long $838C89.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $CD7C92.l		; 22 92 7C CD ; Jump to subroutine long $CD7C92.l [Writes: Stack Pointer] [Flow: call]
	cmp $22CE.w		; CD CE 22 ; Compare $22CE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $E4CDB7.l		; 22 B7 CD E4 ; Jump to subroutine long $E4CDB7.l [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsl $CDCD22.l		; 22 22 CD CD ; Jump to subroutine long $CDCD22.l [Writes: Stack Pointer] [Flow: call]
	cmp $22FA.w		; CD FA 22 ; Compare $22FA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $C7CDCD.l		; 22 CD CD C7 ; Jump to subroutine long $C7CDCD.l [Writes: Stack Pointer] [Flow: call]
	pei ($22.b)		; D4 22 ; Push effective indirect address ($22.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $CDCD3A.l		; 22 3A CD CD ; Jump to subroutine long $CDCD3A.l [Writes: Stack Pointer] [Flow: call]
	inc $22.b,X		; F6 22 ; Increment memory $22.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	jsl $D8CDDF.l		; 22 DF CD D8 ; Jump to subroutine long $D8CDDF.l [Writes: Stack Pointer] [Flow: call]
	sbc $2222.w,Y		; F9 22 22 ; Subtract with carry $2222.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $DECD.w,X		; 9E CD DE ; Store zero to $DECD.w,X [Reads: X Index]
	cpy $32.b		; C4 32 ; Compare $32.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	jsr $D6FB.w		; 20 FB D6 ; Jump to subroutine at $D6FB.w [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ldy $22.b		; A4 22 ; Load $22.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	and #$0137.w		; 29 37 01 ; Logical AND #$0137.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $9E.b		; C4 9E ; Compare $9E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc #$0036.w		; E9 36 00 ; Subtract #$0036.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jsr $D36D.w		; 20 6D D3 ; Jump to subroutine at $D36D.w [Writes: Stack Pointer] [Flow: call]
	bit $AB.b		; 24 AB ; Test bits $AB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc ($73.b)		; 72 73 ; Add with carry (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $31.b,S		; 63 31 ; Add with carry (stack relative) $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora ($24.b),Y		; 11 24 ; OR accumulator with memory ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$1111.w		; 69 11 11 ; Add #$1111.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor $67CEAD.l,X		; 5F AD CE 67 ; Exclusive OR accumulator with memory (long,X) $67CEAD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dec $4F34.w		; CE 34 4F ; Decrement $4F34.w [Flags: ZN]
	sbc #$8100.w		; E9 00 81 ; Subtract #$8100.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lda $5A.b,S		; A3 5A ; Load accumulator (stack relative) $5A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $07.b,X		; 34 07 ; Test bits $07.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $95		; 30 95 ; Branch if minus to $30, $95 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Accumulator, Direct Page]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($02.b),Y		; 71 02 ; Add with carry ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $0300.w		; 2C 00 03 ; Test bits $0300.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0388.w,X)		; 7C 88 03 ; Jump indirect indexed to ($0388.w,X) [Reads: X Index] [Flow: jump]
	.db $10, $87		; 10 87 ; Branch if plus to $10, $87 [Flow: branch]
	stx $88.b		; 86 88 ; Store X register to $88.b [Reads: X Index]
	lda $0000.w		; AD 00 00 ; Load $0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$98.b]		; E7 98 ; Subtract with carry (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$13C9.w		; C9 C9 13 ; Compare #$13C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($76FE.w,X)		; FC FE 76 ; Jump to subroutine indirect indexed ($76FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($36.b,S),Y		; 33 36 ; AND accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda [$05.b]		; A7 05 ; Load accumulator (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $94.b		; 04 94 ; Test and set bits $94.b [Reads: Accumulator] [Flags: Z]
	sbc ($49.b),Y		; F1 49 ; Subtract with carry ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $7C7057.l,X		; FF 57 70 7C ; Subtract with carry (long,X) $7C7057.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0834.w,Y		; 79 34 08 ; Add $0834.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $FF.b		; A5 FF ; Load $FF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $AD.b		; A5 AD ; Load $AD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc ($E3.b,X)		; E1 E3 ; Subtract with carry ($E3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $34.b		; E5 34 ; Subtract $34.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $34.b,X		; 75 34 ; Add $34.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and [$A5.b],Y		; 37 A5 ; AND accumulator with memory (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0012.w		; AC 12 00 ; Load $0012.w into Y register [Writes: Y Index] [Flags: ZN]
	stx $82.b,Y		; 96 82 ; Store X register $82.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	and $93.b,X		; 35 93 ; Logical AND $93.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($6C.b),Y		; 71 6C ; Add with carry ($6C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $E3.b,X		; 34 E3 ; Test bits $E3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($34.b,X)		; A1 34 ; Load accumulator ($34.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $1100F6.l		; EF F6 00 11 ; Subtract with carry (long) $1100F6.l [Writes: Accumulator] [Flags: ZVNC]
	bit $A0.b,X		; 34 A0 ; Test bits $A0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $00F5.w,X		; 9E F5 00 ; Store zero to $00F5.w,X [Reads: X Index]
	ora ($A3.b,X)		; 01 A3 ; Logical OR ($A3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4F.b,X		; 34 4F ; Test bits $4F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A9.b),Y		; 11 A9 ; OR accumulator with memory ($A9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $93.b		; 86 93 ; Store X register to $93.b [Reads: X Index]
	and ($6A.b),Y		; 31 6A ; AND accumulator with memory ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A978.w,X		; DD 78 A9 ; Compare accumulator $A978.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	lda #$1165.w		; A9 65 11 ; Load #$1165.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $036FA9.l		; 6F A9 6F 03 ; Add with carry (long) $036FA9.l [Writes: Accumulator] [Flags: ZVNC]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $9C.b,X		; 34 9C ; Test bits $9C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $0000.w		; AD 00 00 ; Load $0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $AC0F.w		; 9C 0F AC ; Store zero to $AC0F.w
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $09AF.w		; AD AF 09 ; Load $09AF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $AF34.w,Y		; 99 34 AF ; Store accumulator to $AF34.w,Y [Reads: Accumulator, Y Index]
	ldy $0934.w		; AC 34 09 ; Load $0934.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $C9		; 90 C9 ; Branch if carry clear to $90, $C9 [Flow: branch]
	lda ($36.b,S),Y		; B3 36 ; Load accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $09.b,X		; 36 09 ; Rotate left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $B3.b		; 00 B3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $0390.w,X		; 7E 90 03 ; Rotate right $0390.w,X [Reads: X Index] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $9900B3.l		; AF B3 00 99 ; Load long $9900B3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $873434.l		; AF 34 34 87 ; Load long $873434.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	sta [$EE.b]		; 87 EE ; Store accumulator (long) [$EE.b] [Reads: Accumulator, Direct Page]
	and $31F2.w,Y		; 39 F2 31 ; AND accumulator with memory $31F2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $7D34F4.l		; 22 F4 34 7D ; Jump to subroutine long $7D34F4.l [Writes: Stack Pointer] [Flow: call]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $30.b,S		; 23 30 ; AND accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $E3.b		; 84 E3 ; Store Y register to $E3.b [Reads: Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc ($10.b,X)		; E1 10 ; Subtract with carry ($10.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $E1		; 10 E1 ; Branch if plus to $10, $E1 [Flow: branch]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora $29.b,S		; 03 29 ; OR accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $ACAD.w		; AC AD AC ; Load $ACAD.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9999.w		; AD 99 99 ; Load $9999.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $E128.w		; AD 28 E1 ; Load $E128.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($92.b,X)		; E1 92 ; Subtract with carry ($92.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $B2.b		; 00 B2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $9626.w,X		; 7E 26 96 ; Rotate right $9626.w,X [Reads: X Index] [Flags: ZNC]
	and ($B3.b)		; 32 B3 ; AND accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $3439.w		; AC 39 34 ; Load $3439.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $3423.w,Y		; 99 23 34 ; Store accumulator to $3423.w,Y [Reads: Accumulator, Y Index]
	ldy $AAAA.w		; AC AA AA ; Load $AAAA.w into Y register [Writes: Y Index] [Flags: ZN]
	ora #$AC99.w		; 09 99 AC ; Logical OR #$AC99.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $AC.b		; 86 AC ; Store X register to $AC.b [Reads: X Index]
	bit $96.b,X		; 34 96 ; Test bits $96.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $B3		; 90 B3 ; Branch if carry clear to $90, $B3 [Flow: branch]
	sta [$B3.b]		; 87 B3 ; Store accumulator (long) [$B3.b] [Reads: Accumulator, Direct Page]
	ldx $9996.w		; AE 96 99 ; Load $9996.w into X register [Writes: X Index] [Flags: ZN]
	lda ($34.b,S),Y		; B3 34 ; Load accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $B1.b,X		; 34 B1 ; Test bits $B1.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda ($B3.b),Y		; B1 B3 ; Load accumulator ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $99AD.w		; AD AD 99 ; Load $99AD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $DADA.w,Y		; 99 DA DA ; Store accumulator to $DADA.w,Y [Reads: Accumulator, Y Index]
	ldy $00DA.w		; AC DA 00 ; Load $00DA.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	lda ($7E.b,S),Y		; B3 7E ; Load accumulator (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$69.b]		; A7 69 ; Load accumulator (long) [$69.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($36.b,S),Y		; 33 36 ; AND accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lda ($28.b,S),Y		; B3 28 ; Load accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $7EB392.l		; 22 92 B3 7E ; Jump to subroutine long $7EB392.l [Writes: Stack Pointer] [Flow: call]
	lda ($B3.b,X)		; A1 B3 ; Load accumulator ($B3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($09.b,S),Y		; 93 09 ; Store accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda ($34.b,S),Y		; B3 34 ; Load accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $B0.b,X		; 34 B0 ; Test bits $B0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	ror $3486.w,X		; 7E 86 34 ; Rotate right $3486.w,X [Reads: X Index] [Flags: ZNC]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0276.w,X		; FE 76 02 ; Increment memory $0276.w,X [Reads: X Index] [Flags: ZN]
	and ($64.b,S),Y		; 33 64 ; AND accumulator (stack relative indirect indexed) ($64.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	sbc $44FF.w,Y		; F9 FF 44 ; Subtract with carry $44FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $B8D1.w		; CD D1 B8 ; Compare $B8D1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	and [$22.b],Y		; 37 22 ; AND accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $D1DCB8.l		; 22 B8 DC D1 ; Jump to subroutine long $D1DCB8.l [Writes: Stack Pointer] [Flow: call]
	cmp ($20.b),Y		; D1 20 ; Compare accumulator ($20.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsr $E653.w		; 20 53 E6 ; Jump to subroutine at $E653.w [Writes: Stack Pointer] [Flow: call]
	.db $D0, $B8		; D0 B8 ; Branch if not equal to $D0, $B8 [Flow: branch]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $C8.b,X		; 56 C8 ; Logical shift right $C8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp.w [$1037]		; DC 37 10 ; Jump long indirect [$1037] [Flow: jump]
	cop $DB.b		; 02 DB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FD.b,X		; B5 FD ; Load $FD.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $09.b		; 25 09 ; Logical AND $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FC.b		; 25 FC ; Logical AND $FC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $5C.b,X		; 34 5C ; Test bits $5C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsl $ECE601.l		; 22 01 E6 EC ; Jump to subroutine long $ECE601.l [Writes: Stack Pointer] [Flow: call]
	and ($63.b)		; 32 63 ; AND accumulator with memory (indirect) ($63.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $FE0721.l		; 22 21 07 FE ; Jump to subroutine long $FE0721.l [Writes: Stack Pointer] [Flow: call]
	bit $5B.b,X		; 34 5B ; Test bits $5B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($01.b)		; 32 01 ; AND accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($E6.b,X)		; 61 E6 ; Add with carry ($E6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($21.b)		; 12 21 ; OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $20.b		; 66 20 ; Rotate right $20.b [Reads: Direct Page] [Flags: ZNC]
	dec $1516.w		; CE 16 15 ; Decrement $1516.w [Flags: ZN]
	ora $E6.b,S		; 03 E6 ; OR accumulator with stack relative $E6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $B8.b,X		; 15 B8 ; OR accumulator with memory $B8.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $9223.w,X		; FE 23 92 ; Increment memory $9223.w,X [Reads: X Index] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$53.b]		; E7 53 ; Subtract with carry (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $61C9.w		; 20 C9 61 ; Jump to subroutine at $61C9.w [Writes: Stack Pointer] [Flow: call]
	stx $1750.w		; 8E 50 17 ; Store X register to $1750.w [Reads: X Index]
	inc $20.b		; E6 20 ; Increment $20.b [Reads: Direct Page] [Flags: ZN]
	cpy $ED.b		; C4 ED ; Compare $ED.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and $01.b		; 25 01 ; Logical AND $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta ($EF.b)		; 92 EF ; Store accumulator (indirect) ($EF.b) [Reads: Accumulator, Direct Page]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$67.b]		; 07 67 ; OR accumulator with memory (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $D4.b		; C4 D4 ; Compare $D4.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	adc $0100.w		; 6D 00 01 ; Add $0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy $85.b		; C4 85 ; Compare $85.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $0111.w		; 6D 11 01 ; Add $0111.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$329F.w		; 29 9F 32 ; Logical AND #$329F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $33.b,X		; 36 33 ; Rotate left $33.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $E61AF2.l		; 22 F2 1A E6 ; Jump to subroutine long $E61AF2.l [Writes: Stack Pointer] [Flow: call]
	ora $1C2313.l,X		; 1F 13 23 1C ; Logical OR long $1C2313.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($36.b),Y		; 71 36 ; Add with carry ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $11.b		; 25 11 ; Logical AND $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $D55151.l		; 22 51 51 D5 ; Jump to subroutine long $D55151.l [Writes: Stack Pointer] [Flow: call]
	ora [$77.b]		; 07 77 ; OR accumulator with memory (long) [$77.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($AD.b),Y		; 11 AD ; OR accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $4B.b,X		; 34 4B ; Test bits $4B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy #$1963.w		; C0 63 19 ; Compare #$1963.w with Y register [Reads: Y Index] [Flags: ZNC]
	ror $68.b		; 66 68 ; Rotate right $68.b [Reads: Direct Page] [Flags: ZNC]
	and $3370.w,Y		; 39 70 33 ; AND accumulator with memory $3370.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($72.b,S),Y		; 13 72 ; OR accumulator (stack relative indirect indexed) ($72.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $3434.w		; 8E 34 34 ; Store X register to $3434.w [Reads: X Index]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	inc $6E.b,X		; F6 6E ; Increment memory $6E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $3600.w,X		; FE 00 36 ; Increment memory $3600.w,X [Reads: X Index] [Flags: ZN]
	bit $D2.b,X		; 34 D2 ; Test bits $D2.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $3433.w		; 0E 33 34 ; Arithmetic shift left $3433.w [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$99CA.w		; C9 CA 99 ; Compare #$99CA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta ($CA.b,S),Y		; 93 CA ; Store accumulator (stack relative indirect indexed) ($CA.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cpy $CDCC.w		; CC CC CD ; Compare $CDCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $3499.w,Y		; 99 99 34 ; Store accumulator to $3499.w,Y [Reads: Accumulator, Y Index]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	trb $0409.w		; 1C 09 04 ; Test and reset bits $0409.w [Reads: Accumulator] [Flags: Z]
	cmp ($D8.b)		; D2 D8 ; Compare accumulator (indirect) ($D8.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	trb $99DA.w		; 1C DA 99 ; Test and reset bits $99DA.w [Reads: Accumulator] [Flags: Z]
	eor #$34DB.w		; 49 DB 34 ; Exclusive OR #$34DB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	inc $DD.b,X		; F6 DD ; Increment memory $DD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $39DD.w,X		; DE DD 39 ; Decrement memory $39DD.w,X [Reads: X Index] [Flags: ZN]
	sta $DEDD.w,Y		; 99 DD DE ; Store accumulator to $DEDD.w,Y [Reads: Accumulator, Y Index]
	inc $E0.b,X		; F6 E0 ; Increment memory $E0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sta $E239.w,Y		; 99 39 E2 ; Store accumulator to $E239.w,Y [Reads: Accumulator, Y Index]
	cmp ($29.b)		; D2 29 ; Compare accumulator (indirect) ($29.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp #$4393.w		; C9 93 43 ; Compare #$4393.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $E3.b,X		; 34 E3 ; Test bits $E3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora #$EB94.w		; 09 94 EB ; Logical OR #$EB94.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta [$90.b]		; 87 90 ; Store accumulator (long) [$90.b] [Reads: Accumulator, Direct Page]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$34.b]		; 27 34 ; AND accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$6B.b]		; 27 6B ; AND accumulator with memory (long) [$6B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $27.b,S		; 63 27 ; Add with carry (stack relative) $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rol $27.b,X		; 36 27 ; Rotate left $27.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $10.b,X		; 15 10 ; OR accumulator with memory $10.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $34.b		; 14 34 ; Test and reset bits $34.b [Reads: Accumulator] [Flags: Z]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $03.b,X		; 34 03 ; Test bits $03.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and [$13.b]		; 27 13 ; AND accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx $ECEC.w		; EC EC EC ; Compare $ECEC.w with X register [Reads: X Index] [Flags: ZNC]
	sta $EC99.w,Y		; 99 99 EC ; Store accumulator to $EC99.w,Y [Reads: Accumulator, Y Index]
	cpx $EEEC.w		; EC EC EE ; Compare $EEEC.w with X register [Reads: X Index] [Flags: ZNC]
	sta $F099.w,Y		; 99 99 F0 ; Store accumulator to $F099.w,Y [Reads: Accumulator, Y Index]
	sbc ($F4.b)		; F2 F4 ; Subtract with carry (indirect) ($F4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $99.b,X		; F6 99 ; Increment memory $99.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sta $EDF7.w,Y		; 99 F7 ED ; Store accumulator to $EDF7.w,Y [Reads: Accumulator, Y Index]
	sbc $9999F1.l		; EF F1 99 99 ; Subtract with carry (long) $9999F1.l [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F5.b,S),Y		; F3 F5 ; Subtract with carry (stack relative indirect indexed) ($F5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $F8.b		; C5 F8 ; Compare $F8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $F959.w,Y		; 99 59 F9 ; Store accumulator to $F959.w,Y [Reads: Accumulator, Y Index]
	sbc ($F9.b,S),Y		; F3 F9 ; Subtract with carry (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $F399.w,Y		; 99 99 F3 ; Store accumulator to $F399.w,Y [Reads: Accumulator, Y Index]
	pea $F4F5.w		; F4 F5 F4 ; Push absolute address $F4F5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sta $F899.w,Y		; 99 99 F8 ; Store accumulator to $F899.w,Y [Reads: Accumulator, Y Index]
	sbc $FE.b,X		; F5 FE ; Subtract $FE.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $0099.w,Y		; 99 99 00 ; Store accumulator to $0099.w,Y [Reads: Accumulator, Y Index]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($AA.b,S),Y		; F3 AA ; Subtract with carry (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $07F3.w,Y		; 99 F3 07 ; Store accumulator to $07F3.w,Y [Reads: Accumulator, Y Index]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $F4.b		; 06 F4 ; Arithmetic shift left $F4.b [Reads: Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $03F9.w,Y		; 99 F9 03 ; Store accumulator to $03F9.w,Y [Reads: Accumulator, Y Index]
	tsb $9A0E.w		; 0C 0E 9A ; Test and set bits $9A0E.w [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $F4.b		; 06 F4 ; Arithmetic shift left $F4.b [Reads: Direct Page] [Flags: ZNC]
	inc $A912.w,X		; FE 12 A9 ; Increment memory $A912.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $F3FC.w,X		; FE FC F3 ; Increment memory $F3FC.w,X [Reads: X Index] [Flags: ZN]
	sta $0299.w,Y		; 99 99 02 ; Store accumulator to $0299.w,Y [Reads: Accumulator, Y Index]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	ora [$AA.b],Y		; 17 AA ; OR accumulator with memory (long indexed) [$AA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $AA.b		; 02 AA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $19.b		; 04 19 ; Test and set bits $19.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $F4.b,S		; 03 F4 ; OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $07.b,X		; F6 07 ; Increment memory $07.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lda #$079A.w		; A9 9A 07 ; Load #$079A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $F9.b,X		; F6 F9 ; Increment memory $F9.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $F3FA.w,Y		; 99 FA F3 ; Store accumulator to $F3FA.w,Y [Reads: Accumulator, Y Index]
	sbc $9A9900.l,X		; FF 00 99 9A ; Subtract with carry (long,X) $9A9900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $1B.b,X		; F6 1B ; Increment memory $1B.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	inc $1DF8.w,X		; FE F8 1D ; Increment memory $1DF8.w,X [Reads: X Index] [Flags: ZN]
	tsb $99.b		; 04 99 ; Test and set bits $99.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $AA0320.l,X		; 1F 20 03 AA ; Logical OR long $AA0320.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $07.b,X		; F5 07 ; Subtract $07.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	lda #$FCA9.w		; A9 A9 FC ; Load #$FCA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($F9.b)		; 12 F9 ; OR accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($9A.b)		; 12 9A ; OR accumulator with memory (indirect) ($9A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($EC.b)		; 12 EC ; OR accumulator with memory (indirect) ($EC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $A9FE.w		; EC FE A9 ; Compare $A9FE.w with X register [Reads: X Index] [Flags: ZNC]
	sta $312F.w,Y		; 99 2F 31 ; Store accumulator to $312F.w,Y [Reads: Accumulator, Y Index]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpx $ECEC.w		; EC EC EC ; Compare $ECEC.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $9999.w		; EC 99 99 ; Compare $9999.w with X register [Reads: X Index] [Flags: ZNC]
	jsr ($3330.w,X)		; FC 30 33 ; Jump to subroutine indirect indexed ($3330.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $A99A.w,X		; FE 9A A9 ; Increment memory $A99A.w,X [Reads: X Index] [Flags: ZN]
	and ($2F.b,S),Y		; 33 2F ; AND accumulator (stack relative indirect indexed) ($2F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $30, $32		; 30 32 ; Branch if minus to $30, $32 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $AAAA.w		; 2D AA AA ; Logical AND $AAAA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $AA30.w,X		; FE 30 AA ; Increment memory $AA30.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	inc $2E.b,X		; F6 2E ; Increment memory $2E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	and ($2F.b,S),Y		; 33 2F ; AND accumulator (stack relative indirect indexed) ($2F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol $1416.w		; 2E 16 14 ; Rotate left $1416.w [Flags: ZNC]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $0DF6.w,X		; FE F6 0D ; Increment memory $0DF6.w,X [Reads: X Index] [Flags: ZN]
	trb $99.b		; 14 99 ; Test and reset bits $99.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	trb $FC.b		; 14 FC ; Test and reset bits $FC.b [Reads: Accumulator] [Flags: Z]
	jsr ($A912.w,X)		; FC 12 A9 ; Jump to subroutine indirect indexed ($A912.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	inc $12.b,X		; F6 12 ; Increment memory $12.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora [$2F.b]		; 07 2F ; OR accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol $0305.w		; 2E 05 03 ; Rotate left $0305.w [Flags: ZNC]
	rol $AA.b,X		; 36 AA ; Rotate left $AA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($F6.b,S),Y		; 33 F6 ; AND accumulator (stack relative indirect indexed) ($F6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$A903.w		; 09 03 A9 ; Logical OR #$A903.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $F636.w		; 0C 36 F6 ; Test and set bits $F636.w [Reads: Accumulator] [Flags: Z]
	inc $AA.b,X		; F6 AA ; Increment memory $AA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sta $FE11.w,Y		; 99 11 FE ; Store accumulator to $FE11.w,Y [Reads: Accumulator, Y Index]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	lda #$0099.w		; A9 99 00 ; Load #$0099.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $2F.b,X		; 35 2F ; Logical AND $2F.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($AA.b,S),Y		; 33 AA ; AND accumulator (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $36.b,S		; 03 36 ; OR accumulator with stack relative $36.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $AA07.w		; 2E 07 AA ; Rotate left $AA07.w [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $9A		; 10 9A ; Branch if plus to $10, $9A [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $F9F9.w,Y		; F9 F9 F9 ; Subtract with carry $F9F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$99.b]		; 07 99 ; OR accumulator with memory (long) [$99.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora [$2E.b]		; 07 2E ; OR accumulator with memory (long) [$2E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$CE34.w		; A0 34 CE ; Load #$CE34.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $0034.w,Y		; 79 34 00 ; Add $0034.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $79		; 10 79 ; Branch if plus to $10, $79 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $1234.w,Y		; 79 34 12 ; Add $1234.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	dec $FFA5.w		; CE A5 FF ; Decrement $FFA5.w [Flags: ZN]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$0B.b],Y		; 37 0B ; AND accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$A5.b],Y		; 37 A5 ; AND accumulator with memory (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $A1.b,S		; A3 A1 ; Load accumulator (stack relative) $A1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $A53434.l,X		; FF 34 34 A5 ; Subtract with carry (long,X) $A53434.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $2D.b,X		; 34 2D ; Test bits $2D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $9F12A0.l,X		; 3F A0 12 9F ; AND accumulator with memory (long,X) $9F12A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9C9.w		; C9 C9 C9 ; Compare #$C9C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$4040.w		; C9 40 40 ; Compare #$4040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor ($0A.b,X)		; 41 0A ; Exclusive OR accumulator with memory ($0A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $42, $E6		; 42 E6 ; Reserved instruction
	mvp $A2,$46		; 44 46 A2 ; Move block positive $A2,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	cpx $224D.w		; EC 4D 22 ; Compare $224D.w with X register [Reads: X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $E6E6.w		; 4E E6 E6 ; Logical shift right $E6E6.w [Flags: ZNC]
	inc $A2.b		; E6 A2 ; Increment $A2.b [Reads: Direct Page] [Flags: ZN]
	jsl $445250.l		; 22 50 52 44 ; Jump to subroutine long $445250.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp $465F5E.l		; 5C 5E 5F 46 ; Jump long to $465F5E.l [Flow: jump]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $68, $4F		; 62 68 4F ; Push effective relative address $62, $68, $4F [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $50, $52		; 50 52 ; Branch if overflow clear to $50, $52 [Flow: branch]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $446B69.l		; 22 69 6B 44 ; Jump to subroutine long $446B69.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($4D62.w)		; 6C 62 4D ; Jump indirect to ($4D62.w) [Flow: jump]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor [$5B.b],Y		; 57 5B ; Exclusive OR accumulator with memory (long indexed) [$5B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($AA46.w)		; 6C 46 AA ; Jump indirect to ($AA46.w) [Flow: jump]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $49		; 70 49 ; Branch if overflow set to $70, $49 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr $60.b		; 46 60 ; Logical shift right $60.b [Reads: Direct Page] [Flags: ZNC]
	adc ($45.b),Y		; 71 45 ; Add with carry ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $6E.b		; 45 6E ; Exclusive OR $6E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $AA.b		; 46 AA ; Logical shift right $AA.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $4E4E.w		; 4D 4E 4E ; Exclusive OR $4E4E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $29AAAA.l		; 4F AA AA 29 ; Exclusive OR accumulator with memory (long) $29AAAA.l [Writes: Accumulator] [Flags: ZN]
	inc $44.b		; E6 44 ; Increment $44.b [Reads: Direct Page] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($AA.b)		; 32 AA ; AND accumulator with memory (indirect) ($AA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $63.b		; 45 63 ; Exclusive OR $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc [$46.b]		; 67 46 ; Add with carry (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $6A.b		; E6 6A ; Increment $6A.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $6E6A.w,Y		; 59 6A 6E ; Exclusive OR accumulator with memory $6E6A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $AA,$AA		; 44 AA AA ; Move block positive $AA,$AA [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $60,$44		; 54 44 60 ; Move block negative $60,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $AA.b		; 45 AA ; Exclusive OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror $456E.w		; 6E 6E 45 ; Rotate right $456E.w [Flags: ZNC]
	adc $AA.b,X		; 75 AA ; Add $AA.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stz $4C.b,X		; 74 4C ; Store zero to $4C.b,X [Reads: X Index]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc $444644.l		; 6F 44 46 44 ; Add with carry (long) $444644.l [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $AA6A.w,Y		; 59 6A AA ; Exclusive OR accumulator with memory $AA6A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $46.b,S		; 63 46 ; Add with carry (stack relative) $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	inc $AA.b		; E6 AA ; Increment $AA.b [Reads: Direct Page] [Flags: ZN]
	ldx #$5A58.w		; A2 58 5A ; Load #$5A58.w into X register [Writes: X Index] [Flags: ZN]
	eor [$65.b]		; 47 65 ; Exclusive OR accumulator with memory (long) [$65.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$4E3F.w		; 49 3F 4E ; Exclusive OR #$4E3F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr $77E6.w		; 4E E6 77 ; Logical shift right $77E6.w [Flags: ZNC]
	adc [$A2.b],Y		; 77 A2 ; Add with carry (long indexed) [$A2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $4E73AA.l		; 22 AA 73 4E ; Jump to subroutine long $4E73AA.l [Writes: Stack Pointer] [Flow: call]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($AAAA.w,X)		; 7C AA AA ; Jump indirect indexed to ($AAAA.w,X) [Reads: X Index] [Flow: jump]
	adc $4E4E.w,X		; 7D 4E 4E ; Add $4E4E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $AAAA.w		; 4E AA AA ; Logical shift right $AAAA.w [Flags: ZNC]
	eor $40.b		; 45 40 ; Exclusive OR $40.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($AAAA.w,X)		; 7C AA AA ; Jump indirect indexed to ($AAAA.w,X) [Reads: X Index] [Flow: jump]
	jmp ($7D7C.w,X)		; 7C 7C 7D ; Jump indirect indexed to ($7D7C.w,X) [Reads: X Index] [Flow: jump]
	cmp #$A0AA.w		; C9 AA A0 ; Compare #$A0AA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$FE7C.w		; C9 7C FE ; Compare #$FE7C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $0A.b		; 45 0A ; Exclusive OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $46.b		; E6 46 ; Increment $46.b [Reads: Direct Page] [Flags: ZN]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Accumulator, X Index, Direct Page]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($7C7C.w,X)		; 7C 7C 7C ; Jump indirect indexed to ($7C7C.w,X) [Reads: X Index] [Flow: jump]
	sta $AA.b,S		; 83 AA ; Store accumulator (stack relative) $AA.b,S [Reads: Accumulator, Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Accumulator, X Index, Direct Page]
	adc #$A26B.w		; 69 6B A2 ; Add #$A26B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $8785.w		; 8E 85 87 ; Store X register to $8785.w [Reads: X Index]
	sta ($AA.b),Y		; 91 AA ; Store accumulator ($AA.b),Y [Reads: Accumulator, Direct Page, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $85.b		; 86 85 ; Store X register to $85.b [Reads: X Index]
	sta $A2AAFE.l		; 8F FE AA A2 ; Store accumulator (long) $A2AAFE.l [Reads: Accumulator]
	eor ($45.b,S),Y		; 53 45 ; XOR accumulator (stack relative indirect indexed) ($45.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $99.b		; E6 99 ; Increment $99.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta [$94.b],Y		; 97 94 ; Store accumulator (long indexed) [$94.b],Y [Reads: Accumulator, Direct Page, Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta ($AA.b,S),Y		; 93 AA ; Store accumulator (stack relative indirect indexed) ($AA.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $99.b,X		; 95 99 ; Store accumulator to $99.b,X [Reads: Accumulator, X Index]
	inc $AA63.w,X		; FE 63 AA ; Increment memory $AA63.w,X [Reads: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $A3.b		; E6 A3 ; Increment $A3.b [Reads: Direct Page] [Flags: ZN]
	stz $2AA0.w		; 9C A0 2A ; Store zero to $2AA0.w
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $A0.b		; A4 A0 ; Load $A0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda $AA.b,S		; A3 AA ; Load accumulator (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $E6E6.w,X		; FE E6 E6 ; Increment memory $E6E6.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $9BA92A.l		; 22 2A A9 9B ; Jump to subroutine long $9BA92A.l [Writes: Stack Pointer] [Flow: call]
	lda #$AAAA.w		; A9 AA AA ; Load #$AAAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $45.b,S		; A3 45 ; Load accumulator (stack relative) $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $AAAA45.l		; 5C 45 AA AA ; Jump long to $AAAA45.l [Flow: jump]
	mvn $4E,$56		; 54 56 4E ; Move block negative $4E,$56 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $E6.b		; 45 E6 ; Exclusive OR $E6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $48.b		; E6 48 ; Increment $48.b [Reads: Direct Page] [Flags: ZN]
	ldx #$482A.w		; A2 2A 48 ; Load #$482A.w into X register [Writes: X Index] [Flags: ZN]
	adc $48.b		; 65 48 ; Add $48.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $AAAA.w		; AC AA AA ; Load $AAAA.w into Y register [Writes: Y Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $45.b		; E6 45 ; Increment $45.b [Reads: Direct Page] [Flags: ZN]
	lda $AAA2.w		; AD A2 AA ; Load $AAA2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ACAD.w		; AD AD AC ; Load $ACAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $AA.b		; 45 AA ; Exclusive OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor [$AC.b],Y		; 57 AC ; Exclusive OR accumulator with memory (long indexed) [$AC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($64.b,S),Y		; 73 64 ; Add with carry (stack relative indirect indexed) ($64.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror $AF.b		; 66 AF ; Rotate right $AF.b [Reads: Direct Page] [Flags: ZNC]
	inc $A3.b		; E6 A3 ; Increment $A3.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $E6A3.w		; AD A3 E6 ; Load $E6A3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $AA.b,S		; 63 AA ; Add with carry (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc [$A3.b]		; 67 A3 ; Add with carry (long) [$A3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $AA.b		; E6 AA ; Increment $AA.b [Reads: Direct Page] [Flags: ZN]
	ldx #$A34C.w		; A2 4C A3 ; Load #$A34C.w into X register [Writes: X Index] [Flags: ZN]
	lda $AAA3.w		; AD A3 AA ; Load $AAA3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr $77.b		; 46 77 ; Logical shift right $77.b [Reads: Direct Page] [Flags: ZNC]
	mvp $AA,$A3		; 44 A3 AA ; Move block positive $AA,$A3 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $4E4E.w,X		; FE 4E 4E ; Increment memory $4E4E.w,X [Reads: X Index] [Flags: ZN]
	eor ($2A.b,S),Y		; 53 2A ; XOR accumulator (stack relative indirect indexed) ($2A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $34FEA3.l		; AF A3 FE 34 ; Load long $34FEA3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $3434.w		; 20 34 34 ; Jump to subroutine at $3434.w [Writes: Stack Pointer] [Flow: call]
	cpy #$00B6.w		; C0 B6 00 ; Compare #$00B6.w with Y register [Reads: Y Index] [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	inc $AA.b,X		; F6 AA ; Increment memory $AA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lda $BE.b,S		; A3 BE ; Load accumulator (stack relative) $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $AABD06.l,X		; BF 06 BD AA ; Load long $AABD06.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $C9.b,X		; 35 C9 ; Logical AND $C9.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $34.b,S		; C3 34 ; Compare accumulator (stack relative) $34.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $50, $36		; 50 36 ; Branch if overflow clear to $50, $36 [Flow: branch]
	pea $CDF7.w		; F4 F7 CD ; Push absolute address $CDF7.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $C6D1.w		; EC D1 C6 ; Compare $C6D1.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $26A00A.l,X		; FF 0A A0 26 ; Subtract with carry (long,X) $26A00A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $34.b		; 26 34 ; Rotate left $34.b [Reads: Direct Page] [Flags: ZNC]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $F7.b,X		; 34 F7 ; Test bits $F7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $3300.w,Y		; F9 00 33 ; Subtract with carry $3300.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp ($B7.b)		; D2 B7 ; Compare accumulator (indirect) ($B7.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $02A03A.l,X		; FF 3A A0 02 ; Subtract with carry (long,X) $02A03A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $4AB7B7.l		; CF B7 B7 4A ; Compare accumulator (long) $4AB7B7.l [Reads: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx $FDF9.w		; EC F9 FD ; Compare $FDF9.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $D50000.l,X		; FF 00 00 D5 ; Subtract with carry (long,X) $D50000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $D5.b,X		; 34 D5 ; Test bits $D5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $A0.b,X		; 34 A0 ; Test bits $A0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $1B.b,S		; A3 1B ; Load accumulator (stack relative) $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $D03323.l		; CF 23 33 D0 ; Compare accumulator (long) $D03323.l [Reads: Accumulator] [Flags: ZNC]
	cmp ($34.b),Y		; D1 34 ; Compare accumulator ($34.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$35E3.w		; C9 E3 35 ; Compare #$35E3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $90.b,S		; 03 90 ; OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $E1		; D0 E1 ; Branch if not equal to $D0, $E1 [Flow: branch]
	and #$A034.w		; 29 34 A0 ; Logical AND #$A034.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc #$36C9.w		; 69 C9 36 ; Add #$36C9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp [$33.b],Y		; D7 33 ; Compare accumulator (long indexed) [$33.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $8EBF.w,X		; BD BF 8E ; Load $8EBF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $A9.b,X		; 76 A9 ; Rotate right $A9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $C9.b,S		; 03 C9 ; OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $34.b,S		; C3 34 ; Compare accumulator (stack relative) $34.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	and $C330.w,Y		; 39 30 C3 ; AND accumulator with memory $C330.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($BF.b,X)		; 01 BF ; Logical OR ($BF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $51.b,X		; 34 51 ; Test bits $51.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $BF		; 90 BF ; Branch if carry clear to $90, $BF [Flow: branch]
	.db $B0, $DC		; B0 DC ; Branch if carry set to $B0, $DC [Flow: branch]
	cmp $AA9A.w,X		; DD 9A AA ; Compare accumulator $AA9A.w,X [Reads: X Index] [Flags: ZNC]
	cpx $E5E3.w		; EC E3 E5 ; Compare $E5E3.w with X register [Reads: X Index] [Flags: ZNC]
	bit $0A.b,X		; 34 0A ; Test bits $0A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldy $C8.b		; A4 C8 ; Load $C8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $8402A4.l,X		; 3F A4 02 84 ; AND accumulator with memory (long,X) $8402A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $34.b,S		; E3 34 ; Subtract stack-relative $34.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	stz $3010.w,X		; 9E 10 30 ; Store zero to $3010.w,X [Reads: X Index]
	and $3DAD.w,X		; 3D AD 3D ; AND accumulator with memory $3DAD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $17F8.w		; 20 F8 17 ; Jump to subroutine at $17F8.w [Writes: Stack Pointer] [Flow: call]
	tsb $9A03.w		; 0C 03 9A ; Test and set bits $9A03.w [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $0616.w		; 0C 16 06 ; Test and set bits $0616.w [Reads: Accumulator] [Flags: Z]
	asl $AA.b		; 06 AA ; Arithmetic shift left $AA.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $9A10.w,X		; 7E 10 9A ; Rotate right $9A10.w,X [Reads: X Index] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $34FE.w,X		; FE FE 34 ; Increment memory $34FE.w,X [Reads: X Index] [Flags: ZN]
	ror $0399.w,X		; 7E 99 03 ; Rotate right $0399.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($E1.b)		; F2 E1 ; Subtract with carry (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $0010.w,X		; 7E 10 00 ; Rotate right $0010.w,X [Reads: X Index] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc ($95.b)		; F2 95 ; Subtract with carry (indirect) ($95.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($38.b,X)		; 61 38 ; Add with carry ($38.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $A5.b,X		; 34 A5 ; Test bits $A5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $33.b		; 14 33 ; Test and reset bits $33.b [Reads: Accumulator] [Flags: Z]
	ora $AAAA.w,Y		; 19 AA AA ; OR accumulator with memory $AAAA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $1A.b		; 04 1A ; Test and set bits $1A.b [Reads: Accumulator] [Flags: Z]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $82.b,X		; 34 82 ; Test bits $82.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $037D.w,X		; 7E 7D 03 ; Rotate right $037D.w,X [Reads: X Index] [Flags: ZNC]
	and ($82.b,S),Y		; 33 82 ; AND accumulator (stack relative indirect indexed) ($82.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7E0B.w,X		; 9D 0B 7E ; Store accumulator to $7E0B.w,X [Reads: Accumulator, X Index]
	and ($13.b)		; 32 13 ; AND accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $1E.b,X		; 34 1E ; Test bits $1E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $11064F.l		; 4F 4F 06 11 ; Exclusive OR accumulator with memory (long) $11064F.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sec		; 38 ; Set carry flag [Flags: C]
	asl $33E1.w,X		; 1E E1 33 ; Arithmetic shift left $33E1.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: ZN]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $FE.b,X		; 76 FE ; Rotate right $FE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $12A3.w		; CE A3 12 ; Decrement $12A3.w [Flags: ZN]
	jsr $C6ED.w		; 20 ED C6 ; Jump to subroutine at $C6ED.w [Writes: Stack Pointer] [Flow: call]
	sta ($7F.b,X)		; 81 7F ; Store accumulator ($7F.b,X) [Reads: Accumulator, X Index, Direct Page]
	ldy #$C777.w		; A0 77 C7 ; Load #$C777.w into Y register [Writes: Y Index] [Flags: ZN]
	ror $71.b,X		; 76 71 ; Rotate right $71.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $0201.w		; EE 01 02 ; Increment $0201.w [Flags: ZN]
	adc $0D.b,S		; 63 0D ; Add with carry (stack relative) $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cpy $12C6.w		; CC C6 12 ; Compare $12C6.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$F5.b],Y		; 37 F5 ; AND accumulator with memory (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $02.b,X		; 34 02 ; Test bits $02.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $E5EC.w		; 20 EC E5 ; Jump to subroutine at $E5EC.w [Writes: Stack Pointer] [Flow: call]
	asl $A1D5.w,X		; 1E D5 A1 ; Arithmetic shift left $A1D5.w,X [Reads: X Index] [Flags: ZNC]
	jsr $C6CC.w		; 20 CC C6 ; Jump to subroutine at $C6CC.w [Writes: Stack Pointer] [Flow: call]
	inc $00C6.w		; EE C6 00 ; Increment $00C6.w [Flags: ZN]
	ldy #$7FE9.w		; A0 E9 7F ; Load #$7FE9.w into Y register [Writes: Y Index] [Flags: ZN]
	and [$41.b],Y		; 37 41 ; AND accumulator with memory (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$CCA9.w		; A9 A9 CC ; Load #$CCA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $09C6.w		; CE C6 09 ; Decrement $09C6.w [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $CC.b		; 05 CC ; Logical OR $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $85.b,X		; 34 85 ; Test bits $85.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	inc $85.b		; E6 85 ; Increment $85.b [Reads: Direct Page] [Flags: ZN]
	sta ($F1.b,X)		; 81 F1 ; Store accumulator ($F1.b,X) [Reads: Accumulator, X Index, Direct Page]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $85.b		; 86 85 ; Store X register to $85.b [Reads: X Index]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $E6E6EC.l		; 22 EC E6 E6 ; Jump to subroutine long $E6E6EC.l [Writes: Stack Pointer] [Flow: call]
	sta ($22.b)		; 92 22 ; Store accumulator (indirect) ($22.b) [Reads: Accumulator, Direct Page]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $F5.b,X		; 94 F5 ; Store Y register $F5.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	inc $93.b,X		; F6 93 ; Increment memory $93.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta ($EC.b)		; 92 EC ; Store accumulator (indirect) ($EC.b) [Reads: Accumulator, Direct Page]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $4A.b,S		; A3 4A ; Load accumulator (stack relative) $4A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $AA4E.w		; 4D 4E AA ; Exclusive OR $AA4E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	inc $A3.b		; E6 A3 ; Increment $A3.b [Reads: Direct Page] [Flags: ZN]
	inc $A2.b		; E6 A2 ; Increment $A2.b [Reads: Direct Page] [Flags: ZN]
	ldx #$AD77.w		; A2 77 AD ; Load #$AD77.w into X register [Writes: X Index] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $65ECA3.l		; 22 A3 EC 65 ; Jump to subroutine long $65ECA3.l [Writes: Stack Pointer] [Flow: call]
	adc [$A2.b]		; 67 A2 ; Add with carry (long) [$A2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $4F.b		; E6 4F ; Increment $4F.b [Reads: Direct Page] [Flags: ZN]
	lda $E6.b,S		; A3 E6 ; Load accumulator (stack relative) $E6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx #$AD77.w		; A2 77 AD ; Load #$AD77.w into X register [Writes: X Index] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $A3E6A3.l		; 22 A3 E6 A3 ; Jump to subroutine long $A3E6A3.l [Writes: Stack Pointer] [Flow: call]
	mvp $AA,$A2		; 44 A2 AA ; Move block positive $AA,$A2 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $4A.b,S		; A3 4A ; Load accumulator (stack relative) $4A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $AA.b,S		; A3 AA ; Load accumulator (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $46.b		; E6 46 ; Increment $46.b [Reads: Direct Page] [Flags: ZN]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $6548.w,Y		; F9 48 65 ; Subtract with carry $6548.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $AA.b		; 66 AA ; Rotate right $AA.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $87A5.w		; 20 A5 87 ; Jump to subroutine at $87A5.w [Writes: Stack Pointer] [Flow: call]
	ldx #$A517.w		; A2 17 A5 ; Load #$A517.w into X register [Writes: X Index] [Flags: ZN]
	eor $E64F.w		; 4D 4F E6 ; Exclusive OR $E64F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldx #$A3A3.w		; A2 A3 A3 ; Load #$A3A3.w into X register [Writes: X Index] [Flags: ZN]
	lda $44.b,S		; A3 44 ; Load accumulator (stack relative) $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $346A.w,Y		; F9 6A 34 ; Subtract with carry $346A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$61.b],Y		; 77 61 ; Add with carry (long indexed) [$61.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $44.b,X		; 35 44 ; Logical AND $44.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $0A.b,S		; A3 0A ; Load accumulator (stack relative) $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpx $1AA5.w		; EC A5 1A ; Compare $1AA5.w with X register [Reads: X Index] [Flags: ZNC]
	ldx #$A312.w		; A2 12 A3 ; Load #$A312.w into X register [Writes: X Index] [Flags: ZN]
	lda $34A3.w		; AD A3 34 ; Load $34A3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$E644.w		; A0 44 E6 ; Load #$E644.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $A25B.w,Y		; 79 5B A2 ; Add $A25B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($A3.b),Y		; 11 A3 ; OR accumulator with memory ($A3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $4734.w		; AD 34 47 ; Load $4734.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$A34A.w		; 49 4A A3 ; Exclusive OR #$A34A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	cpx $2279.w		; EC 79 22 ; Compare $2279.w with X register [Reads: X Index] [Flags: ZNC]
	and ($A3.b,X)		; 21 A3 ; Logical AND ($A3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $AD.b,S		; A3 AD ; Load accumulator (stack relative) $AD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($79.b,X)		; A1 79 ; Load accumulator ($79.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $1A.b,X		; 35 1A ; Logical AND $1A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$D51A.w		; A0 1A D5 ; Load #$D51A.w into Y register [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $21.b,X		; D5 21 ; Compare accumulator $21.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($E6.b,X)		; 21 E6 ; Logical AND ($E6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $4E4F.w		; 4D 4F 4E ; Exclusive OR $4E4F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc $AEE6.w		; 6D E6 AE ; Add $AEE6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $48.b		; C5 48 ; Compare $48.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($0A.b,X)		; 21 0A ; Logical AND ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc [$F9.b],Y		; 77 F9 ; Add with carry (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FB.b,X		; D5 FB ; Compare accumulator $FB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $AA60.w		; 4E 60 AA ; Logical shift right $AA60.w [Flags: ZNC]
	stz $E6.b,X		; 74 E6 ; Store zero to $E6.b,X [Reads: X Index]
	eor $A2E6.w		; 4D E6 A2 ; Exclusive OR $A2E6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$C4A5.w		; A2 A5 C4 ; Load #$C4A5.w into X register [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $45.b,X		; D5 45 ; Compare accumulator $45.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0A.b,X		; 76 0A ; Rotate right $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $E6.b		; 45 E6 ; Exclusive OR $E6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$AA.b]		; 47 AA ; Exclusive OR accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy $E8.b		; C4 E8 ; Compare $E8.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $16.b		; A5 16 ; Load $16.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($44.b),Y		; 11 44 ; OR accumulator with memory ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $F946.w		; AC 46 F9 ; Load $F946.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx $F9.b		; A6 F9 ; Load $F9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc $660B.w,Y		; 79 0B 66 ; Add $660B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($E6.b)		; 12 E6 ; OR accumulator with memory (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $6AA5AC.l,X		; 3F AC A5 6A ; AND accumulator with memory (long,X) $6AA5AC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($A5.b,X)		; A1 A5 ; Load accumulator ($A5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A5.b		; A4 A5 ; Load $A5.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	lda $43.b		; A5 43 ; Load $43.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $A3.b,X		; 34 A3 ; Test bits $A3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $4DA4.w		; AC A4 4D ; Load $4DA4.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $A0.b,X		; 34 A0 ; Test bits $A0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	ldy $219F.w		; AC 9F 21 ; Load $219F.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$F5F3.w		; A0 F3 F5 ; Load #$F5F3.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $77		; F0 77 ; Branch if equal to $F0, $77 [Flow: branch]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $75,$AC		; 44 AC 75 ; Move block positive $75,$AC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	inc $AA.b		; E6 AA ; Increment $AA.b [Reads: Direct Page] [Flags: ZN]
	adc ($FA.b)		; 72 FA ; Add with carry (indirect) ($FA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $D5F7.w		; AD F7 D5 ; Load $D5F7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$CE10.w		; A0 10 CE ; Load #$CE10.w into Y register [Writes: Y Index] [Flags: ZN]
	dec $AAC5.w		; CE C5 AA ; Decrement $AAC5.w [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $5B.b		; 65 5B ; Add $5B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $0706.w		; CE 06 07 ; Decrement $0706.w [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit #$0033.w		; 89 33 00 ; Test bits #$0033.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit $0F.b,X		; 34 0F ; Test bits $0F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $E7.b,X		; 34 E7 ; Test bits $E7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $35.b		; E6 35 ; Increment $35.b [Reads: Direct Page] [Flags: ZN]
	sbc ($89.b)		; F2 89 ; Subtract with carry (indirect) ($89.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $F234.w		; EC 34 F2 ; Compare $F234.w with X register [Reads: X Index] [Flags: ZNC]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($89.b),Y		; 71 89 ; Add with carry ($89.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $349D.w,X		; 1E 9D 34 ; Arithmetic shift left $349D.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$36.b],Y		; F7 36 ; Subtract with carry (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $5034.w,Y		; 39 34 50 ; AND accumulator with memory $5034.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $3989.w		; 20 89 39 ; Jump to subroutine at $3989.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $3402.w		; 2E 02 34 ; Rotate left $3402.w [Flags: ZNC]
	sty $E3.b		; 84 E3 ; Store Y register to $E3.b [Reads: Y Index]
	sbc $9E.b,S		; E3 9E ; Subtract stack-relative $9E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $3E34.w,X		; 7D 34 3E ; Add $3E34.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $30.b		; 84 30 ; Store Y register to $30.b [Reads: Y Index]
	and $36.b,S		; 23 36 ; AND accumulator with stack relative $36.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $019A.w,X		; FE 9A 01 ; Increment memory $019A.w,X [Reads: X Index] [Flags: ZN]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $7E.b,X		; 34 7E ; Test bits $7E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $30.b,X		; 34 30 ; Test bits $30.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	dec $E7AE.w,X		; DE AE E7 ; Decrement memory $E7AE.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9C.b,X		; 95 9C ; Store accumulator to $9C.b,X [Reads: Accumulator, X Index]
	adc ($9A.b),Y		; 71 9A ; Add with carry ($9A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $DA		; B0 DA ; Branch if carry set to $B0, $DA [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $89.b,X		; 34 89 ; Test bits $89.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($95.b),Y		; 71 95 ; Add with carry ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0D.b),Y		; 71 0D ; Add with carry ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.INDEX 8
	sep #$9A		; E2 9A
	rol $71.b,X		; 36 71 ; Rotate left $71.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $DE.b,X		; 95 DE ; Store accumulator to $DE.b,X [Reads: Accumulator, X Index]
	sbc [$34.b]		; E7 34 ; Subtract with carry (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $E7.b,X		; 35 E7 ; Logical AND $E7.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $B0.b,X		; 34 B0 ; Test bits $B0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $B9.b,X		; 34 B9 ; Test bits $B9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc ($35.b),Y		; F1 35 ; Subtract with carry ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $695E5E.l		; 5C 5E 5E 69 ; Jump long to $695E5E.l [Flow: jump]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $8E20.w		; 20 20 8E ; Jump to subroutine at $8E20.w [Writes: Stack Pointer] [Flow: call]
	ror $34.b,X		; 76 34 ; Rotate right $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A5.b,S		; A3 A5 ; Load accumulator (stack relative) $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $0000.w		; AC 00 00 ; Load $0000.w into Y register [Writes: Y Index] [Flags: ZN]
	and $02.b,X		; 35 02 ; Logical AND $02.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $000234.l,X		; 9F 34 02 00 ; Store accumulator (long,X) $000234.l,X [Reads: Accumulator, X Index]
	lda $62AC.w		; AD AC 62 ; Load $62AC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $1100.w,X		; FD 00 11 ; Subtract with carry $1100.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $AC.b,X		; 34 AC ; Test bits $AC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $07, $40		; 62 07 40 ; Push effective relative address $62, $07, $40 [Writes: Stack Pointer]
	bit $11.b,X		; 34 11 ; Test bits $11.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0000.w		; AD 00 00 ; Load $0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $FDA336.l,X		; FF 36 A3 FD ; Subtract with carry (long,X) $FDA336.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	asl $FF.b,X		; 16 FF ; Arithmetic shift left $FF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $EE.b		; A4 EE ; Load $EE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp $DA34C4.l		; 5C C4 34 DA ; Jump long to $DA34C4.l [Flow: jump]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$34		; E2 34
	dec $00F2.w		; CE F2 00 ; Decrement $00F2.w [Flags: ZN]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $411B.w		; ED 1B 41 ; Subtract $411B.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $113834.l,X		; FF 34 38 11 ; Subtract with carry (long,X) $113834.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $71.b,S		; 03 71 ; OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FDFB.w,Y		; F9 FB FD ; Subtract with carry $FDFB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $11.b,S		; A3 11 ; Load accumulator (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $0202E4.l,X		; 9F E4 02 02 ; Store accumulator (long,X) $0202E4.l,X [Reads: Accumulator, X Index]
	sbc [$0F.b]		; E7 0F ; Subtract with carry (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $12C6.w		; AC C6 12 ; Load $12C6.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $20.b		; 26 20 ; Rotate left $20.b [Reads: Direct Page] [Flags: ZNC]
	ror $11.b,X		; 76 11 ; Rotate right $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($9F.b)		; 52 9F ; Exclusive OR accumulator with memory (indirect) ($9F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $027C53.l		; AF 53 7C 02 ; Load long $027C53.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($36.b),Y		; 11 36 ; OR accumulator with memory ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $C6.b		; C6 C6 ; Decrement $C6.b [Reads: Direct Page] [Flags: ZN]
	eor $0100.w,X		; 5D 00 01 ; Exclusive OR accumulator with memory $0100.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldy $A7.b		; A4 A7 ; Load $A7.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$A5.b]		; 07 A5 ; OR accumulator with memory (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $D5.b		; A5 D5 ; Load $D5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	jsl $34C7A5.l		; 22 A5 C7 34 ; Jump to subroutine long $34C7A5.l [Writes: Stack Pointer] [Flow: call]
	lda $12.b		; A5 12 ; Load $12.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $06.b		; 24 06 ; Test bits $06.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp [$11.b]		; C7 11 ; Compare accumulator (long) [$11.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($E1.b)		; B2 E1 ; Load accumulator (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $3403.w		; 6D 03 34 ; Add $3403.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $61.b,X		; 34 61 ; Test bits $61.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $312D.w,X		; 9D 2D 31 ; Store accumulator to $312D.w,X [Reads: Accumulator, X Index]
	and ($9D.b,X)		; 21 9D ; Logical AND ($9D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($DC.b)		; F2 DC ; Subtract with carry (indirect) ($DC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$2220]		; DC 20 22 ; Jump long indirect [$2220] [Flow: jump]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc ($D9.b)		; F2 D9 ; Subtract with carry (indirect) ($D9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $2220.w		; CD 20 22 ; Compare $2220.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $269D.w		; 2D 9D 26 ; Logical AND $269D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $3212.w,Y		; F9 12 32 ; Subtract with carry $3212.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $1C.b,X		; F6 1C ; Increment memory $1C.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sta $211E.w,X		; 9D 1E 21 ; Store accumulator to $211E.w,X [Reads: Accumulator, X Index]
	and ($A1.b,X)		; 21 A1 ; Logical AND ($A1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $EF.b,X		; 34 EF ; Test bits $EF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $7C1000.l,X		; 9F 00 10 7C ; Store accumulator (long,X) $7C1000.l,X [Reads: Accumulator, X Index]
	lda $A4A3.w		; AD A3 A4 ; Load $A4A3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $C8.b,X		; 34 C8 ; Test bits $C8.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $8678.w		; 20 78 86 ; Jump to subroutine at $8678.w [Writes: Stack Pointer] [Flow: call]
	adc ($51.b),Y		; 71 51 ; Add with carry ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $DB		; 10 DB ; Branch if plus to $10, $DB [Flow: branch]
	jsr $A386.w		; 20 86 A3 ; Jump to subroutine at $A386.w [Writes: Stack Pointer] [Flow: call]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $E1E1.w		; AE E1 E1 ; Load $E1E1.w into X register [Writes: X Index] [Flags: ZN]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $8971.w		; AE 71 89 ; Load $8971.w into X register [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $26.b,X		; B5 26 ; Load $26.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $7E.b,S		; C3 7E ; Compare accumulator (stack relative) $7E.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $C9BE.w		; 9C BE C9 ; Store zero to $C9BE.w
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $827E.w,X		; 7E 7E 82 ; Rotate right $827E.w,X [Reads: X Index] [Flags: ZNC]
	dec $3033.w		; CE 33 30 ; Decrement $3033.w [Flags: ZN]
	and $E6C4CD.l,X		; 3F CD C4 E6 ; AND accumulator with memory (long,X) $E6C4CD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $278300.l		; 22 00 83 27 ; Jump to subroutine long $278300.l [Writes: Stack Pointer] [Flow: call]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $7E.b		; C4 7E ; Compare $7E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and $C4.b,X		; 35 C4 ; Logical AND $C4.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b		; 06 AD ; Arithmetic shift left $AD.b [Reads: Direct Page] [Flags: ZNC]
	lda $1604.w		; AD 04 16 ; Load $1604.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($09.b,X)		; 61 09 ; Add with carry ($09.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $B17E.w		; AC 7E B1 ; Load $B17E.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $32.b,X		; 16 32 ; Arithmetic shift left $32.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $7D.b		; C6 7D ; Decrement $7D.b [Reads: Direct Page] [Flags: ZN]
	cmp $C6.b,X		; D5 C6 ; Compare accumulator $C6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $0C.b,X		; D5 0C ; Compare accumulator $0C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($70.b,S),Y		; 53 70 ; XOR accumulator (stack relative indirect indexed) ($70.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($F1.b),Y		; 11 F1 ; OR accumulator with memory ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E9.b		; E6 E9 ; Increment $E9.b [Reads: Direct Page] [Flags: ZN]
	inc $1122.w		; EE 22 11 ; Increment $1122.w [Flags: ZN]
	eor ($D3.b,S),Y		; 53 D3 ; XOR accumulator (stack relative indirect indexed) ($D3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $E6.b,X		; 34 E6 ; Test bits $E6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	inc $347E.w,X		; FE 7E 34 ; Increment memory $347E.w,X [Reads: X Index] [Flags: ZN]
	inc $23.b		; E6 23 ; Increment $23.b [Reads: Direct Page] [Flags: ZN]
	cop $9C.b		; 02 9C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $35, $E6		; 82 35 E6 ; Branch always long to $82, $35, $E6 [Flow: branch]
	eor ($02.b,S),Y		; 53 02 ; XOR accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $05.b		; E6 05 ; Increment $05.b [Reads: Direct Page] [Flags: ZN]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($11.b,X)		; 21 11 ; Logical AND ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $EF.b		; C6 EF ; Decrement $EF.b [Reads: Direct Page] [Flags: ZN]
	dec $01E6.w		; CE E6 01 ; Decrement $01E6.w [Flags: ZN]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2285CA.l,X		; 3F CA 85 22 ; AND accumulator with memory (long,X) $2285CA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $F1.b,S		; 03 F1 ; OR accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $CC23.w		; 8E 23 CC ; Store X register to $CC23.w [Reads: X Index]
	and [$30.b]		; 27 30 ; AND accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $02A5.w		; AD A5 02 ; Load $02A5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($C7.b,X)		; 01 C7 ; Logical OR ($C7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($E6.b)		; 92 E6 ; Store accumulator (indirect) ($E6.b) [Reads: Accumulator, Direct Page]
	sbc $07.b		; E5 07 ; Subtract $07.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $0C.b		; 26 0C ; Rotate left $0C.b [Reads: Direct Page] [Flags: ZNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $B1.b,X		; 55 B1 ; Exclusive OR accumulator with memory $B1.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$25.b],Y		; 77 25 ; Add with carry (long indexed) [$25.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora [$34.b]		; 07 34 ; OR accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $20		; 70 20 ; Branch if overflow set to $70, $20 [Flow: branch]
	inc $1BA7.w,X		; FE A7 1B ; Increment memory $1BA7.w,X [Reads: X Index] [Flags: ZN]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $C41B.w		; 20 1B C4 ; Jump to subroutine at $C41B.w [Writes: Stack Pointer] [Flow: call]
	ora $66.b		; 05 66 ; Logical OR $66.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $0911.w		; 20 11 09 ; Jump to subroutine at $0911.w [Writes: Stack Pointer] [Flow: call]
	adc ($5B.b),Y		; 71 5B ; Add with carry ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $11.b		; 66 11 ; Rotate right $11.b [Reads: Direct Page] [Flags: ZNC]
	ora ($06.b),Y		; 11 06 ; OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $C6C6.w,X		; 7E C6 C6 ; Rotate right $C6C6.w,X [Reads: X Index] [Flags: ZNC]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: ZN]
	eor [$D1.b],Y		; 57 D1 ; Exclusive OR accumulator with memory (long indexed) [$D1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($C9.b,S),Y		; 53 C9 ; XOR accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $107E.w		; EE 7E 10 ; Increment $107E.w [Flags: ZN]
	ora ($0F.b),Y		; 11 0F ; OR accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	ora $0F2BBB.l		; 0F BB 2B 0F ; OR accumulator with memory (long) $0F2BBB.l [Writes: Accumulator] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$B2.b]		; C7 B2 ; Compare accumulator (long) [$B2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $C7C713.l		; 22 13 C7 C7 ; Jump to subroutine long $C7C713.l [Writes: Stack Pointer] [Flow: call]
	trb $B2.b		; 14 B2 ; Test and reset bits $B2.b [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $1B.b,X		; 15 1B ; OR accumulator with memory $1B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $BBC7.w,X		; 1D C7 BB ; OR accumulator with memory $BBC7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($C7.b)		; B2 C7 ; Load accumulator (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$1E.b]		; C7 1E ; Compare accumulator (long) [$1E.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rol $28.b		; 26 28 ; Rotate left $28.b [Reads: Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	and $15C7.w		; 2D C7 15 ; Logical AND $15C7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	lda ($2B.b)		; B2 2B ; Load accumulator (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$C7.b],Y		; B7 C7 ; Load accumulator (long indexed) [$C7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($B8.b)		; D2 B8 ; Compare accumulator (indirect) ($B8.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $F63937.l		; 22 37 39 F6 ; Jump to subroutine long $F63937.l [Writes: Stack Pointer] [Flow: call]
	ora ($BB.b)		; 12 BB ; OR accumulator with memory (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp [$42.b]		; C7 42 ; Compare accumulator (long) [$42.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	mvp $2B,$C7		; 44 C7 2B ; Move block positive $2B,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda ($14.b)		; B2 14 ; Load accumulator (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$29.b]		; C7 29 ; Compare accumulator (long) [$29.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lsr $B2.b		; 46 B2 ; Logical shift right $B2.b [Reads: Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$CD.b],Y		; D7 CD ; Compare accumulator (long indexed) [$CD.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $2251.w		; CD 51 22 ; Compare $2251.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	eor ($54.b)		; 52 54 ; Exclusive OR accumulator with memory (indirect) ($54.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $BBC7.w		; 4C C7 BB ; Jump to $BBC7.w [Flow: jump]
	lda ($46.b)		; B2 46 ; Load accumulator (indirect) ($46.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$51.b]		; C7 51 ; Compare accumulator (long) [$51.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $C65A.w,X		; 5D 5A C6 ; Exclusive OR accumulator with memory $C65A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$BB.b],Y		; 77 BB ; Add with carry (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp [$7F.b]		; C7 7F ; Compare accumulator (long) [$7F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	and [$6B.b]		; 27 6B ; AND accumulator with memory (long) [$6B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$69.b]		; C7 69 ; Compare accumulator (long) [$69.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $BB2B.w		; 6D 2B BB ; Add $BB2B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $E667C7.l		; 6F C7 67 E6 ; Add with carry (long) $E667C7.l [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $C7.b		; E6 C7 ; Increment $C7.b [Reads: Direct Page] [Flags: ZN]
	lda [$CD.b],Y		; B7 CD ; Load accumulator (long indexed) [$CD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $82, $73		; 62 82 73 ; Push effective relative address $62, $82, $73 [Writes: Stack Pointer]
	stz $E0.b,X		; 74 E0 ; Store zero to $E0.b,X [Reads: X Index]
	inc $BB.b		; E6 BB ; Increment $BB.b [Reads: Direct Page] [Flags: ZN]
	jsl $7476C7.l		; 22 C7 76 74 ; Jump to subroutine long $7476C7.l [Writes: Stack Pointer] [Flow: call]
	sbc ($2B.b),Y		; F1 2B ; Subtract with carry ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($E6.b)		; B2 E6 ; Load accumulator (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $4145.w		; 1C 45 41 ; Test and reset bits $4145.w [Reads: Accumulator] [Flags: Z]
	.db $62, $9B, $38		; 62 9B 38 ; Push effective relative address $62, $9B, $38 [Writes: Stack Pointer]
	rol $EE.b,X		; 36 EE ; Rotate left $EE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $E613.w		; 20 13 E6 ; Jump to subroutine at $E613.w [Writes: Stack Pointer] [Flow: call]
	stz $B2F6.w		; 9C F6 B2 ; Store zero to $B2F6.w
	eor ($D2.b)		; 52 D2 ; Exclusive OR accumulator with memory (indirect) ($D2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $DFFE.w,Y		; 79 FE DF ; Add $DFFE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsl $DFFE3F.l		; 22 3F FE DF ; Jump to subroutine long $DFFE3F.l [Writes: Stack Pointer] [Flow: call]
	inc $22B2.w		; EE B2 22 ; Increment $22B2.w [Flags: ZN]
	cmp $C9E6.w		; CD E6 C9 ; Compare $C9E6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $22.b		; C6 22 ; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	cop $11.b		; 02 11 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora ($C7.b,S),Y		; 13 C7 ; OR accumulator (stack relative indirect indexed) ($C7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($74.b)		; B2 74 ; Load accumulator (indirect) ($74.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor [$C7.b]		; 47 C7 ; Exclusive OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($7B.b)		; B2 7B ; Load accumulator (indirect) ($7B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $E6.b,X		; 74 E6 ; Store zero to $E6.b,X [Reads: X Index]
	and $0625BB.l,X		; 3F BB 25 06 ; AND accumulator with memory (long,X) $0625BB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $C7.b,X		; 15 C7 ; OR accumulator with memory $C7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $3B		; 80 3B ; Branch always to $80, $3B [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($8B.b),Y		; 11 8B ; OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $B39D.w		; CD 9D B3 ; Compare $B39D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $84.b,S		; 23 84 ; AND accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $12		; 42 12 ; Reserved instruction
	cmp $B2B5.w,X		; DD B5 B2 ; Compare accumulator $B2B5.w,X [Reads: X Index] [Flags: ZNC]
	cmp [$E6.b]		; C7 E6 ; Compare accumulator (long) [$E6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $0122.w,X		; FD 22 01 ; Subtract with carry $0122.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $C5.b		; A5 C5 ; Load $C5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $B1.b,X		; 34 B1 ; Test bits $B1.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($02.b),Y		; 11 02 ; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror $53C9.w,X		; 7E C9 53 ; Rotate right $53C9.w,X [Reads: X Index] [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $D37E.w,X		; 7D 7E D3 ; Add $D37E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($06.b,S),Y		; 33 06 ; AND accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $0186A4.l,X		; FF A4 86 01 ; Subtract with carry (long,X) $0186A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	dec $62.b		; C6 62 ; Decrement $62.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $79		; 10 79 ; Branch if plus to $10, $79 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $1686.w,X		; 7E 86 16 ; Rotate right $1686.w,X [Reads: X Index] [Flags: ZNC]
	rol $1B.b,X		; 36 1B ; Rotate left $1B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $7E.b,X		; 34 7E ; Test bits $7E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	.db $30, $0E		; 30 0E ; Branch if minus to $30, $0E [Flow: branch]
	stx $7E.b		; 86 7E ; Store X register to $7E.b [Reads: X Index]
	ror $3326.w,X		; 7E 26 33 ; Rotate right $3326.w,X [Reads: X Index] [Flags: ZNC]
	stx $03.b		; 86 03 ; Store X register to $03.b [Reads: X Index]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $EF03EE.l		; 22 EE 03 EF ; Jump to subroutine long $EF03EE.l [Writes: Stack Pointer] [Flow: call]
	inc $1B.b,X		; F6 1B ; Increment memory $1B.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	jsl $17DFF6.l		; 22 F6 DF 17 ; Jump to subroutine long $17DFF6.l [Writes: Stack Pointer] [Flow: call]
	lda [$22.b]		; A7 22 ; Load accumulator (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $D605.w		; 20 05 D6 ; Jump to subroutine at $D605.w [Writes: Stack Pointer] [Flow: call]
	sbc $B2F9.w,Y		; F9 F9 B2 ; Subtract with carry $B2F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $C2CDCD.l		; 22 CD CD C2 ; Jump to subroutine long $C2CDCD.l [Writes: Stack Pointer] [Flow: call]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $1ACD.w		; CD CD 1A ; Compare $1ACD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp $D9CD.w		; CD CD D9 ; Compare $D9CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $2222.w,Y		; D9 22 22 ; Compare accumulator $2222.w,Y [Reads: Y Index] [Flags: ZNC]
	ora [$D9.b]		; 07 D9 ; OR accumulator with memory (long) [$D9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $B2C7.w,Y		; D9 C7 B2 ; Compare accumulator $B2C7.w,Y [Reads: Y Index] [Flags: ZNC]
	jsl $7EDADD.l		; 22 DD DA 7E ; Jump to subroutine long $7EDADD.l [Writes: Stack Pointer] [Flow: call]
	stx $22.b		; 86 22 ; Store X register to $22.b [Reads: X Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $EA03.w,X		; 7E 03 EA ; Rotate right $EA03.w,X [Reads: X Index] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $8E7A78.l		; 22 78 7A 8E ; Jump to subroutine long $8E7A78.l [Writes: Stack Pointer] [Flow: call]
	bit $66.b,X		; 34 66 ; Test bits $66.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $B0, $DA		; B0 DA ; Branch if carry set to $B0, $DA [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $8C.b,X		; 34 8C ; Test bits $8C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsl $1C8D0B.l		; 22 0B 8D 1C ; Jump to subroutine long $1C8D0B.l [Writes: Stack Pointer] [Flow: call]
	bit $DB.b,X		; 34 DB ; Test bits $DB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $62, $02, $C9		; 62 02 C9 ; Push effective relative address $62, $02, $C9 [Writes: Stack Pointer]
	ror $347E.w,X		; 7E 7E 34 ; Rotate right $347E.w,X [Reads: X Index] [Flags: ZNC]
	and $30.b,S		; 23 30 ; AND accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Accumulator, Direct Page, Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	bit $BB.b,X		; 34 BB ; Test bits $BB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $85.b		; C6 85 ; Decrement $85.b [Reads: Direct Page] [Flags: ZN]
	ror $0353.w,X		; 7E 53 03 ; Rotate right $0353.w,X [Reads: X Index] [Flags: ZNC]
	ora ($83.b),Y		; 11 83 ; OR accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $C8.b		; 84 C8 ; Store Y register to $C8.b [Reads: Y Index]
	sta [$17.b]		; 87 17 ; Store accumulator (long) [$17.b] [Reads: Accumulator, Direct Page]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stx $83.b		; 86 83 ; Store X register to $83.b [Reads: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($13.b,S),Y		; D3 13 ; Compare accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $7E.b,X		; 36 7E ; Rotate left $7E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $3B30.w		; 8E 30 3B ; Store X register to $3B30.w [Reads: X Index]
	sty $C7.b,X		; 94 C7 ; Store Y register $C7.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp ($7E.b,S),Y		; D3 7E ; Compare accumulator (stack relative indirect indexed) ($7E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	lda ($23.b)		; B2 23 ; Load accumulator (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $87D3.w		; CE D3 87 ; Decrement $87D3.w [Flags: ZN]
	.db $82, $02, $63		; 82 02 63 ; Branch always long to $82, $02, $63 [Flow: branch]
	ror $03D3.w,X		; 7E D3 03 ; Rotate right $03D3.w,X [Reads: X Index] [Flags: ZNC]
	stx $32.b		; 86 32 ; Store X register to $32.b [Reads: X Index]
	ldx $7E.b,Y		; B6 7E ; Load X register $7E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ror $CE82.w,X		; 7E 82 CE ; Rotate right $CE82.w,X [Reads: X Index] [Flags: ZNC]
	and ($30.b,S),Y		; 33 30 ; AND accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $CD.b,X		; D5 CD ; Compare accumulator $CD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $7E.b,X		; 36 7E ; Rotate left $7E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $DB.b		; 05 DB ; Logical OR $DB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$7E.b]		; 07 7E ; OR accumulator with memory (long) [$7E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($B3.b)		; B2 B3 ; Load accumulator (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $07.b,X		; 34 07 ; Test bits $07.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $D9.b,X		; D5 D9 ; Compare accumulator $D9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp ($82.b,S),Y		; D3 82 ; Compare accumulator (stack relative indirect indexed) ($82.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sty $80.b		; 84 80 ; Store Y register to $80.b [Reads: Y Index]
	and $36.b,S		; 23 36 ; AND accumulator with stack relative $36.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($C6.b,X)		; 81 C6 ; Store accumulator ($C6.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $B0, $70		; B0 70 ; Branch if carry set to $B0, $70 [Flow: branch]
	cmp [$D3.b]		; C7 D3 ; Compare accumulator (long) [$D3.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($05.b,S),Y		; D3 05 ; Compare accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	jsl $04EA2B.l		; 22 2B EA 04 ; Jump to subroutine long $04EA2B.l [Writes: Stack Pointer] [Flow: call]
	ror $2BCE.w,X		; 7E CE 2B ; Rotate right $2BCE.w,X [Reads: X Index] [Flags: ZNC]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	ror $877D.w,X		; 7E 7D 87 ; Rotate right $877D.w,X [Reads: X Index] [Flags: ZNC]
	lda ($36.b,S),Y		; B3 36 ; Load accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $C534.w,X		; 7E 34 C5 ; Rotate right $C534.w,X [Reads: X Index] [Flags: ZNC]
	cmp $30.b		; C5 30 ; Compare $30.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$7E.b		; 89 7E ; Test bits #$7E.b with accumulator [Reads: Accumulator] [Flags: Z]
	sbc $3B.b,S		; E3 3B ; Subtract stack-relative $3B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $30, $9B		; 30 9B ; Branch if minus to $30, $9B [Flow: branch]
	lsr $1C.b,X		; 56 1C ; Logical shift right $1C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc #$B1.b		; E9 B1 ; Subtract #$B1.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jsr $F39E.w		; 20 9E F3 ; Jump to subroutine at $F39E.w [Writes: Stack Pointer] [Flow: call]
	sbc $F4.b,X		; F5 F4 ; Subtract $F4.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $CDE4.w		; CD E4 CD ; Compare $CDE4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($22.b)		; 32 22 ; AND accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $D9D6.w,X		; 9D D6 D9 ; Store accumulator to $D9D6.w,X [Reads: Accumulator, X Index]
	cmp $2232.w		; CD 32 22 ; Compare $2232.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($C7.b)		; D2 C7 ; Compare accumulator (indirect) ($C7.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $2122E7.l		; EF E7 22 21 ; Subtract with carry (long) $2122E7.l [Writes: Accumulator] [Flags: ZVNC]
	sta $DA4B.w,X		; 9D 4B DA ; Store accumulator to $DA4B.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $DA.b,S		; E3 DA ; Subtract stack-relative $DA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp [$D9.b]		; C7 D9 ; Compare accumulator (long) [$D9.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $D2CD.w,Y		; D9 CD D2 ; Compare accumulator $D2CD.w,Y [Reads: Y Index] [Flags: ZNC]
	dec $2022.w		; CE 22 20 ; Decrement $2022.w [Flags: ZN]
	lda ($A3.b,X)		; A1 A3 ; Load accumulator ($A3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $BBD7.w		; CD D7 BB ; Compare $BBD7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $D7C7C7.l		; 22 C7 C7 D7 ; Jump to subroutine long $D7C7C7.l [Writes: Stack Pointer] [Flow: call]
	jmp.w [$2222]		; DC 22 22 ; Jump long indirect [$2222] [Flow: jump]
	cmp $9E9E.w,Y		; D9 9E 9E ; Compare accumulator $9E9E.w,Y [Reads: Y Index] [Flags: ZNC]
	ldx $2B.b		; A6 2B ; Load $2B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $C7.b		; A4 C7 ; Load $C7.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp [$9E.b]		; C7 9E ; Compare accumulator (long) [$9E.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($2B.b)		; B2 2B ; Load accumulator (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$D2.b]		; C7 D2 ; Compare accumulator (long) [$D2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ldy $A9.b		; A4 A9 ; Load $A9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsl $ABA9BB.l		; 22 BB A9 AB ; Jump to subroutine long $ABA9BB.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$BB.b		; A9 BB ; Load #$BB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldy #$C7.b		; A0 C7 ; Load #$C7.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp [$BB.b],Y		; D7 BB ; Compare accumulator (long indexed) [$BB.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsl $B7AFB4.l		; 22 B4 AF B7 ; Jump to subroutine long $B7AFB4.l [Writes: Stack Pointer] [Flow: call]
	lda [$BB.b],Y		; B7 BB ; Load accumulator (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda [$B9.b],Y		; B7 B9 ; Load accumulator (long indexed) [$B9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$BB.b],Y		; B7 BB ; Load accumulator (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$C7.b		; A9 C7 ; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $B2DA.w		; CD DA B2 ; Compare $B2DA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $C0B9AF.l		; 22 AF B9 C0 ; Jump to subroutine long $C0B9AF.l [Writes: Stack Pointer] [Flow: call]
	lda [$BB.b],Y		; B7 BB ; Load accumulator (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $EFC2.w,Y		; B9 C2 EF ; Load $EFC2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($BB.b,S),Y		; D3 BB ; Compare accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	jsr $B8A1.w		; 20 A1 B8 ; Jump to subroutine at $B8A1.w [Writes: Stack Pointer] [Flow: call]
	cpy #$B8.b		; C0 B8 ; Compare #$B8.b with Y register [Reads: Y Index] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$B7.b		; C9 B7 ; Compare #$B7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldx #$9E.b		; A2 9E ; Load #$9E.b into X register [Writes: X Index] [Flags: ZN]
	lda $BBBBB6.l		; AF B6 BB BB ; Load long $BBBBB6.l into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($BB.b),Y		; D1 BB ; Compare accumulator ($BB.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($C8.b,S),Y		; D3 C8 ; Compare accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda [$C7.b]		; A7 C7 ; Load accumulator (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$AF.b],Y		; D7 AF ; Compare accumulator (long indexed) [$AF.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$D8.b		; A9 D8 ; Load #$D8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $DCD8C3.l		; AF C3 D8 DC ; Load long $DCD8C3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $01.b,X		; 55 01 ; Exclusive OR accumulator with memory $01.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $343420.l,X		; DF 20 34 34 ; Compare accumulator (long,X) $343420.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $CA.b,X		; 34 CA ; Test bits $CA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $93.b,X		; 34 93 ; Test bits $93.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit #$34.b		; 89 34 ; Test bits #$34.b with accumulator [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $B0, $CE		; B0 CE ; Branch if carry set to $B0, $CE [Flow: branch]
	trb $8835.w		; 1C 35 88 ; Test and reset bits $8835.w [Reads: Accumulator] [Flags: Z]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stz $DDD5.w,X		; 9E D5 DD ; Store zero to $DDD5.w,X [Reads: X Index]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	adc $9F9F.w		; 6D 9F 9F ; Add $9F9F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $0110.w,X		; 7E 10 01 ; Rotate right $0110.w,X [Reads: X Index] [Flags: ZNC]
	cmp $C6.b		; C5 C6 ; Compare $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $0053.w		; EE 53 00 ; Increment $0053.w [Flags: ZN]
	ora ($24.b),Y		; 11 24 ; OR accumulator with memory ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dec $E0.b		; C6 E0 ; Decrement $E0.b [Reads: Direct Page] [Flags: ZN]
	and [$02.b],Y		; 37 02 ; AND accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($5C.b),Y		; F1 5C ; Subtract with carry ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $E6.b		; C6 E6 ; Decrement $E6.b [Reads: Direct Page] [Flags: ZN]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($C4.b),Y		; 31 C4 ; AND accumulator with memory ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $CF.b		; E5 CF ; Subtract $CF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: ZNC]
	sbc $121E.w,X		; FD 1E 12 ; Subtract with carry $121E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $27.b,S		; 23 27 ; AND accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $8D.b,S		; 63 8D ; Add with carry (stack relative) $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	inc $31.b		; E6 31 ; Increment $31.b [Reads: Direct Page] [Flags: ZN]
	adc ($CD.b)		; 72 CD ; Add with carry (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $8D11.w		; CD 11 8D ; Compare $8D11.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $F68D37.l		; 22 37 8D F6 ; Jump to subroutine long $F68D37.l [Writes: Stack Pointer] [Flow: call]
	cmp $2272DA.l,X		; DF DA 72 22 ; Compare accumulator (long,X) $2272DA.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $1C5F7E.l,X		; DF 7E 5F 1C ; Compare accumulator (long,X) $1C5F7E.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	and ($72.b,X)		; 21 72 ; Logical AND ($72.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp [$D7.b]		; C7 D7 ; Compare accumulator (long) [$D7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $6222.w		; 1C 22 62 ; Test and reset bits $6222.w [Reads: Accumulator] [Flags: Z]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $2260.w		; CD 60 22 ; Compare $2260.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and [$40.b]		; 27 40 ; AND accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $C7C7.w,Y		; 39 C7 C7 ; AND accumulator with memory $C7C7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $EF85E6.l		; 22 E6 85 EF ; Jump to subroutine long $EF85E6.l [Writes: Stack Pointer] [Flow: call]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	trb $D7E6.w		; 1C E6 D7 ; Test and reset bits $D7E6.w [Reads: Accumulator] [Flags: Z]
	cmp [$22.b]		; C7 22 ; Compare accumulator (long) [$22.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $C736C7.l		; 22 C7 36 C7 ; Jump to subroutine long $C736C7.l [Writes: Stack Pointer] [Flow: call]
	ror $212B.w,X		; 7E 2B 21 ; Rotate right $212B.w,X [Reads: X Index] [Flags: ZNC]
	ldx #$53.b		; A2 53 ; Load #$53.b into X register [Writes: X Index] [Flags: ZN]
	ora ($EF.b)		; 12 EF ; OR accumulator with memory (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($B2.b,X)		; 61 B2 ; Add with carry ($B2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	inc $0F.b		; E6 0F ; Increment $0F.b [Reads: Direct Page] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda ($50.b)		; B2 50 ; Load accumulator (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$5B.b]		; C7 5B ; Compare accumulator (long) [$5B.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda ($13.b)		; B2 13 ; Load accumulator (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$C7.b]		; 47 C7 ; Exclusive OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$1A.b]		; C7 1A ; Compare accumulator (long) [$1A.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($23.b)		; B2 23 ; Load accumulator (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$47.b]		; 67 47 ; Add with carry (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $DA		; 50 DA ; Branch if overflow clear to $50, $DA [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($1A.b)		; B2 1A ; Load accumulator (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	stx $3B.b,Y		; 96 3B ; Store X register $3B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lda $1A.b,X		; B5 1A ; Load $1A.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ror $ED.b		; 66 ED ; Rotate right $ED.b [Reads: Direct Page] [Flags: ZNC]
	.db $30, $1B		; 30 1B ; Branch if minus to $30, $1B [Flow: branch]
	rol $C7.b,X		; 36 C7 ; Rotate left $C7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$68.b]		; 67 68 ; Add with carry (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($79.b),Y		; 71 79 ; Add with carry ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $74.b		; C6 74 ; Decrement $74.b [Reads: Direct Page] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $B2.b		; E6 B2 ; Increment $B2.b [Reads: Direct Page] [Flags: ZN]
	jsl $0F6807.l		; 22 07 68 0F ; Jump to subroutine long $0F6807.l [Writes: Stack Pointer] [Flow: call]
	cmp [$1B.b]		; C7 1B ; Compare accumulator (long) [$1B.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($C7.b)		; B2 C7 ; Load accumulator (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$C6.b]		; C7 C6 ; Compare accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $22.b		; C6 22 ; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $DFC7.w,X		; 3E C7 DF ; Rotate left $DFC7.w,X [Reads: X Index] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsl $C666C7.l		; 22 C7 66 C6 ; Jump to subroutine long $C666C7.l [Writes: Stack Pointer] [Flow: call]
	stz $21.b,X		; 74 21 ; Store zero to $21.b,X [Reads: X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $D1.b,X		; D5 D1 ; Compare accumulator $D1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $EE.b		; E6 EE ; Increment $EE.b [Reads: Direct Page] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $EEEE22.l		; 22 22 EE EE ; Jump to subroutine long $EEEE22.l [Writes: Stack Pointer] [Flow: call]
	and ($45.b,X)		; 21 45 ; Logical AND ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($B9.b)		; B2 B9 ; Load accumulator (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $EEEE45.l,X		; 3F 45 EE EE ; AND accumulator with memory (long,X) $EEEE45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $D0B2.w,Y		; B9 B2 D0 ; Load $D0B2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $EA.b		; C6 EA ; Decrement $EA.b [Reads: Direct Page] [Flags: ZN]
	mvp $B9,$00		; 44 00 B9 ; Move block positive $B9,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp [$A2.b]		; C7 A2 ; Compare accumulator (long) [$A2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $C4.b		; E6 C4 ; Increment $C4.b [Reads: Direct Page] [Flags: ZN]
	rol $20.b		; 26 20 ; Rotate left $20.b [Reads: Direct Page] [Flags: ZNC]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($22.b)		; D2 22 ; Compare accumulator (indirect) ($22.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($E6.b)		; B2 E6 ; Load accumulator (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $C7.b		; 46 C7 ; Logical shift right $C7.b [Reads: Direct Page] [Flags: ZNC]
	adc [$2B.b]		; 67 2B ; Add with carry (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	stx $C4.b,Y		; 96 C4 ; Store X register $C4.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	dec $B5.b		; C6 B5 ; Decrement $B5.b [Reads: Direct Page] [Flags: ZN]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $C6.b		; 85 C6 ; Store accumulator to $C6.b [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $30, $CC		; 30 CC ; Branch if minus to $30, $CC [Flow: branch]
	cpy $CC53.w		; CC 53 CC ; Compare $CC53.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $7CC4.w		; CC C4 7C ; Compare $7CC4.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $01.b		; C4 01 ; Compare $01.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora ($78.b),Y		; 11 78 ; OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$34.b		; A9 34 ; Load #$34.b into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $09.b		; C5 09 ; Compare $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($C6.b),Y		; 11 C6 ; OR accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$6A.b		; 89 6A ; Test bits #$6A.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $0B.b,X		; 95 0B ; Store accumulator to $0B.b,X [Reads: Accumulator, X Index]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $FF.b,X		; 95 FF ; Store accumulator to $FF.b,X [Reads: Accumulator, X Index]
	sty $78.b		; 84 78 ; Store Y register to $78.b [Reads: Y Index]
	lda ($31.b),Y		; B1 31 ; Load accumulator ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $34.b		; C6 34 ; Decrement $34.b [Reads: Direct Page] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	nop		; EA ; No operation
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	nop		; EA ; No operation
	jsl $34EA22.l		; 22 22 EA 34 ; Jump to subroutine long $34EA22.l [Writes: Stack Pointer] [Flow: call]
	trb $2003.w		; 1C 03 20 ; Test and reset bits $2003.w [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp #$99.b		; C9 99 ; Compare #$99.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$22.b		; C9 22 ; Compare #$22.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($07.b)		; B2 07 ; Load accumulator (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $C7.b		; 04 C7 ; Test and set bits $C7.b [Reads: Accumulator] [Flags: Z]
	sbc #$BB.b		; E9 BB ; Subtract #$BB.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jsl $05F6F4.l		; 22 F4 F6 05 ; Jump to subroutine long $05F6F4.l [Writes: Stack Pointer] [Flow: call]
	bit $BB.b,X		; 34 BB ; Test bits $BB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $B0, $C7		; B0 C7 ; Branch if carry set to $B0, $C7 [Flow: branch]
	cmp [$FA.b]		; C7 FA ; Compare accumulator (long) [$FA.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr ($BB22.w,X)		; FC 22 BB ; Jump to subroutine indirect indexed ($BB22.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	sta $B2DA.w,Y		; 99 DA B2 ; Store accumulator to $B2DA.w,Y [Reads: Accumulator, Y Index]
	lda ($D9.b)		; B2 D9 ; Load accumulator (indirect) ($D9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$2C.b		; A2 2C ; Load #$2C.b into X register [Writes: X Index] [Flags: ZN]
	dec $D3.b		; C6 D3 ; Decrement $D3.b [Reads: Direct Page] [Flags: ZN]
	cmp [$C9.b]		; C7 C9 ; Compare accumulator (long) [$C9.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	bit $0706.w		; 2C 06 07 ; Test bits $0706.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc $CB1C.w,X		; 7D 1C CB ; Add $CB1C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($7E.b)		; 32 7E ; AND accumulator with memory (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $3434.w,X		; 7E 34 34 ; Rotate right $3434.w,X [Reads: X Index] [Flags: ZNC]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($AD.b),Y		; 71 AD ; Add with carry ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1684.w		; 0C 84 16 ; Test and set bits $1684.w [Reads: Accumulator] [Flags: Z]
	ora ($F0.b,S),Y		; 13 F0 ; OR accumulator (stack relative indirect indexed) ($F0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $05, $7E		; 62 05 7E ; Push effective relative address $62, $05, $7E [Writes: Stack Pointer]
	and ($B3.b,X)		; 21 B3 ; Logical AND ($B3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $82, $0F, $34		; 82 0F 34 ; Branch always long to $82, $0F, $34 [Flow: branch]
	sta [$32.b]		; 87 32 ; Store accumulator (long) [$32.b] [Reads: Accumulator, Direct Page]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZNC]
	sta ($E2.b,S),Y		; 93 E2 ; Store accumulator (stack relative indirect indexed) ($E2.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	eor ($CB.b,S),Y		; 53 CB ; XOR accumulator (stack relative indirect indexed) ($CB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $3493.w,X		; 7D 93 34 ; Add $3493.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($B0.b,S),Y		; 13 B0 ; OR accumulator (stack relative indirect indexed) ($B0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($FE.b,S),Y		; 53 FE ; XOR accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	ora ($33.b)		; 12 33 ; OR accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($8A.b)		; 92 8A ; Store accumulator (indirect) ($8A.b) [Reads: Accumulator, Direct Page]
	bit $E6.b,X		; 34 E6 ; Test bits $E6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cop $AD.b		; 02 AD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $E0.b		; E6 E0 ; Increment $E0.b [Reads: Direct Page] [Flags: ZN]
	.db $82, $22, $B3		; 82 22 B3 ; Branch always long to $82, $22, $B3 [Flow: branch]
	sep #$CC		; E2 CC ; Set processor status bits #$CC [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	.db $42, $C8		; 42 C8 ; Reserved instruction
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$34.b],Y		; 77 34 ; Add with carry (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $2087.w		; 0D 87 20 ; Logical OR $2087.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and [$E6.b]		; 27 E6 ; AND accumulator with memory (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $20.b		; E6 20 ; Increment $20.b [Reads: Direct Page] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsl $87F420.l		; 22 20 F4 87 ; Jump to subroutine long $87F420.l [Writes: Stack Pointer] [Flow: call]
	adc [$E6.b],Y		; 77 E6 ; Add with carry (long indexed) [$E6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$72.b],Y		; 17 72 ; OR accumulator with memory (long indexed) [$72.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $7C29.w		; 20 29 7C ; Jump to subroutine at $7C29.w [Writes: Stack Pointer] [Flow: call]
	cpx $7253.w		; EC 53 72 ; Compare $7253.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $1AE6.w		; EC E6 1A ; Compare $1AE6.w with X register [Reads: X Index] [Flags: ZNC]
	inc $22.b		; E6 22 ; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	and ($26.b)		; 32 26 ; AND accumulator with memory (indirect) ($26.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	adc #$17.b		; 69 17 ; Add #$17.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rol $25.b,X		; 36 25 ; Rotate left $25.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $C5.b		; 65 C5 ; Add $C5.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$21.b]		; 27 21 ; AND accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($C5.b,X)		; 21 C5 ; Logical AND ($C5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $E4F6.w		; CD F6 E4 ; Compare $E4F6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $C7C722.l		; 22 22 C7 C7 ; Jump to subroutine long $C7C722.l [Writes: Stack Pointer] [Flow: call]
	eor [$DD.b]		; 47 DD ; Exclusive OR accumulator with memory (long) [$DD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $CD47B2.l		; 22 B2 47 CD ; Jump to subroutine long $CD47B2.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda ($0B.b)		; B2 0B ; Load accumulator (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sbc $B2E6E6.l		; EF E6 E6 B2 ; Subtract with carry (long) $B2E6E6.l [Writes: Accumulator] [Flags: ZVNC]
	jsl $2953C7.l		; 22 C7 53 29 ; Jump to subroutine long $2953C7.l [Writes: Stack Pointer] [Flow: call]
	sbc $C73221.l		; EF 21 32 C7 ; Subtract with carry (long) $C73221.l [Writes: Accumulator] [Flags: ZVNC]
	asl $9735.w		; 0E 35 97 ; Arithmetic shift left $9735.w [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	eor $E7.b,X		; 55 E7 ; Exclusive OR accumulator with memory $E7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $27214F.l,X		; FF 4F 21 27 ; Subtract with carry (long,X) $27214F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $A1B125.l		; 4F 25 B1 A1 ; Exclusive OR accumulator with memory (long) $A1B125.l [Writes: Accumulator] [Flags: ZN]
	adc ($2B.b)		; 72 2B ; Add with carry (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($BB.b),Y		; 11 BB ; OR accumulator with memory ($BB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $BBAF.w		; CC AF BB ; Compare $BBAF.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx #$CD.b		; A2 CD ; Load #$CD.b into X register [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $62, $C5, $C5		; 62 C5 C5 ; Push effective relative address $62, $C5, $C5 [Writes: Stack Pointer]
	ldx $BB18.w,Y		; BE 18 BB ; Load X register $BB18.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $BCCB.w,X		; BC CB BC ; Load Y register $BCCB.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp $BBE4.w		; CD E4 BB ; Compare $BBE4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $A9A91D.l		; 22 1D A9 A9 ; Jump to subroutine long $A9A91D.l [Writes: Stack Pointer] [Flow: call]
	lda #$CB.b		; A9 CB ; Load #$CB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $BCC2A9.l,X		; 1F A9 C2 BC ; Logical OR long $BCC2A9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldx #$C2.b		; A2 C2 ; Load #$C2.b into X register [Writes: X Index] [Flags: ZN]
	sbc $2BBBD7.l		; EF D7 BB 2B ; Subtract with carry (long) $2BBBD7.l [Writes: Accumulator] [Flags: ZVNC]
	jsr $1DDA.w		; 20 DA 1D ; Jump to subroutine at $1DDA.w [Writes: Stack Pointer] [Flow: call]
	rep #$CB		; C2 CB ; Reset processor status bits #$CB [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	wai		; CB ; Wait for interrupt
	cmp [$A3.b]		; C7 A3 ; Compare accumulator (long) [$A3.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ldy $2BEF.w,X		; BC EF 2B ; Load Y register $2BEF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda ($DA.b)		; B2 DA ; Load accumulator (indirect) ($DA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$A0.b]		; C7 A0 ; Compare accumulator (long) [$A0.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$22.b]		; C7 22 ; Compare accumulator (long) [$22.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($A0.b)		; B2 A0 ; Load accumulator (indirect) ($A0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $BBCEC7.l,X		; 9F C7 CE BB ; Store accumulator (long,X) $BBCEC7.l,X [Reads: Accumulator, X Index]
	jsl $1DA0B5.l		; 22 B5 A0 1D ; Jump to subroutine long $1DA0B5.l [Writes: Stack Pointer] [Flow: call]
	ora ($BB.b)		; 12 BB ; OR accumulator with memory (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $B5A1.w		; CC A1 B5 ; Compare $B5A1.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda #$CA.b		; A9 CA ; Load #$CA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	dec $CDA3.w		; CE A3 CD ; Decrement $CDA3.w [Flags: ZN]
	stz $2B2B.w,X		; 9E 2B 2B ; Store zero to $2B2B.w,X [Reads: X Index]
	ldy #$CD.b		; A0 CD ; Load #$CD.b into Y register [Writes: Y Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	jsl $D5D7C7.l		; 22 C7 D7 D5 ; Jump to subroutine long $D5D7C7.l [Writes: Stack Pointer] [Flow: call]
	stz $2B22.w,X		; 9E 22 2B ; Store zero to $2B22.w,X [Reads: X Index]
	cmp [$CD.b],Y		; D7 CD ; Compare accumulator (long indexed) [$CD.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora ($DD.b)		; 12 DD ; OR accumulator with memory (indirect) ($DD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $A2DFC2.l		; 22 C2 DF A2 ; Jump to subroutine long $A2DFC2.l [Writes: Stack Pointer] [Flow: call]
	sbc $222BCD.l		; EF CD 2B 22 ; Subtract with carry (long) $222BCD.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $E6E6FF.l		; EF FF E6 E6 ; Subtract with carry (long) $E6E6FF.l [Writes: Accumulator] [Flags: ZVNC]
	jsl $05CD22.l		; 22 22 CD 05 ; Jump to subroutine long $05CD22.l [Writes: Stack Pointer] [Flow: call]
	and ($E6.b,X)		; 21 E6 ; Logical AND ($E6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($C2.b,X)		; 21 C2 ; Logical AND ($C2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $4F23.w		; 8D 23 4F ; Store accumulator to $4F23.w [Reads: Accumulator]
	cmp $727C.w		; CD 7C 72 ; Compare $727C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor ($B1.b),Y		; 51 B1 ; Exclusive OR accumulator with memory ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	asl $72.b		; 06 72 ; Arithmetic shift left $72.b [Reads: Direct Page] [Flags: ZNC]
	and $14.b		; 25 14 ; Logical AND $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C0CA.w		; 8D CA C0 ; Store accumulator to $C0CA.w [Reads: Accumulator]
	and [$22.b],Y		; 37 22 ; AND accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc $9C.b		; E6 9C ; Increment $9C.b [Reads: Direct Page] [Flags: ZN]
	sta ($12.b),Y		; 91 12 ; Store accumulator ($12.b),Y [Reads: Accumulator, Direct Page, Y Index]
	eor [$1E.b],Y		; 57 1E ; Exclusive OR accumulator with memory (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc $7E.b		; E6 7E ; Increment $7E.b [Reads: Direct Page] [Flags: ZN]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	sta $CD.b,X		; 95 CD ; Store accumulator to $CD.b,X [Reads: Accumulator, X Index]
	dec $32C4.w		; CE C4 32 ; Decrement $32C4.w [Flags: ZN]
	jsr $51E6.w		; 20 E6 51 ; Jump to subroutine at $51E6.w [Writes: Stack Pointer] [Flow: call]
	lda ($05.b),Y		; B1 05 ; Load accumulator ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$21.b]		; 27 21 ; AND accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $32F9.w,Y		; F9 F9 32 ; Subtract with carry $32F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: ZNC]
	lda ($E8.b),Y		; B1 E8 ; Load accumulator ($E8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($6772.w,X)		; 7C 72 67 ; Jump indirect indexed to ($6772.w,X) [Reads: X Index] [Flow: jump]
	cmp $87.b,X		; D5 87 ; Compare accumulator $87.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $07.b		; E6 07 ; Increment $07.b [Reads: Direct Page] [Flags: ZN]
	adc ($E2.b)		; 72 E2 ; Add with carry (indirect) ($E2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$AB.b		; 69 AB ; Add #$AB.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and [$B6.b]		; 27 B6 ; AND accumulator with memory (long) [$B6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $2626.w		; 0C 26 26 ; Test and set bits $2626.w [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy $26CC.w		; CC CC 26 ; Compare $26CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $CC.b		; 26 CC ; Rotate left $CC.b [Reads: Direct Page] [Flags: ZNC]
	cpy $372A.w		; CC 2A 37 ; Compare $372A.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $CC3B.w,Y		; 39 3B CC ; AND accumulator with memory $CC3B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $263D.w		; CC 3D 26 ; Compare $263D.w with Y register [Reads: Y Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $42, $CC		; 42 CC ; Reserved instruction
	cpy $453D.w		; CC 3D 45 ; Compare $453D.w with Y register [Reads: Y Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $CC.b,X		; 34 CC ; Test bits $CC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $4E33.w		; CC 33 4E ; Compare $4E33.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $50, $46		; 50 46 ; Branch if overflow clear to $50, $46 [Flow: branch]
	cpy $56CC.w		; CC CC 56 ; Compare $56CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	eor $61CCCC.l,X		; 5F CC CC 61 ; Exclusive OR accumulator with memory (long,X) $61CCCC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $CC6456.l		; 5C 56 64 CC ; Jump long to $CC6456.l [Flow: jump]
	cpy $6961.w		; CC 61 69 ; Compare $6961.w with Y register [Reads: Y Index] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $70, $CC		; 70 CC ; Branch if overflow set to $70, $CC [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$70		; C2 70
	adc #$7070.w		; 69 70 70 ; Add #$7070.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $7022.w		; 2C 22 70 ; Test bits $7022.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc #$6870.w		; 69 70 68 ; Add #$6870.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $702C.w		; 2C 2C 70 ; Test bits $702C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc #$6970.w		; 69 70 69 ; Add #$6970.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $6A2C.w		; 2C 2C 6A ; Test bits $6A2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$2C		; C2 2C
	adc #$706B.w		; 69 6B 70 ; Add #$706B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp ($2CCC.w)		; 6C CC 2C ; Jump indirect to ($2CCC.w) [Flow: jump]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $70, $6C		; 70 6C ; Branch if overflow set to $70, $6C [Flow: branch]
	adc #$CCC2.w		; 69 C2 CC ; Add #$CCC2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc #$7070.w		; 69 70 70 ; Add #$7070.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy $7022.w		; CC 22 70 ; Compare $7022.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc #$7069.w		; 69 69 70 ; Add #$7069.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $69C2.w		; 2C C2 69 ; Test bits $69C2.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	.db $70, $C2		; 70 C2 ; Branch if overflow set to $70, $C2 [Flow: branch]
	jsl $687070.l		; 22 70 70 68 ; Jump to subroutine long $687070.l [Writes: Stack Pointer] [Flow: call]
	.db $70, $22		; 70 22 ; Branch if overflow set to $70, $22 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$70		; C2 70
	adc #$7068.w		; 69 68 70 ; Add #$7068.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $70C2.w		; 2C C2 70 ; Test bits $70C2.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc #$6A70.w		; 69 70 6A ; Add #$6A70.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $702C.w		; 2C 2C 70 ; Test bits $702C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jmp ($7070.w)		; 6C 70 70 ; Jump indirect to ($7070.w) [Flow: jump]
	bit $6822.w		; 2C 22 68 ; Test bits $6822.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ror $696C.w		; 6E 6C 69 ; Rotate right $696C.w [Flags: ZNC]
	cpy $70CC.w		; CC CC 70 ; Compare $70CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $70, $2C		; 70 2C ; Branch if overflow set to $70, $2C [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$70		; C2 70
	adc $6D70.w		; 6D 70 6D ; Add $6D70.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $6B2C.w		; 2C 2C 6B ; Test bits $6B2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 16
	rep #$2C		; C2 2C
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $70, $6D		; 70 6D ; Branch if overflow set to $70, $6D [Flow: branch]
	cpy $702C.w		; CC 2C 70 ; Compare $702C.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc #$6D70.w		; 69 70 6D ; Add #$6D70.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $702C.w		; 2C 2C 70 ; Test bits $702C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $2C		; 70 2C ; Branch if overflow set to $70, $2C [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$70		; C2 70
	adc $706F.w		; 6D 6F 70 ; Add $706F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $72CC.w		; 2C CC 72 ; Test bits $72CC.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc $CCC974.l		; 6F 74 C9 CC ; Add with carry (long) $CCC974.l [Writes: Accumulator] [Flags: ZVNC]
	cpy #$CA74.w		; C0 74 CA ; Compare #$CA74.w with Y register [Reads: Y Index] [Flags: ZNC]
	ror $79.b,X		; 76 79 ; Rotate right $79.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cpy #$72CC.w		; C0 CC 72 ; Compare #$72CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $74.b,S		; E3 74 ; Subtract stack-relative $74.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	bit $C0.b,X		; 34 C0 ; Test bits $C0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy #$747B.w		; C0 7B 74 ; Compare #$747B.w with Y register [Reads: Y Index] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp.w [$00CC]		; DC CC 00 ; Jump long indirect [$00CC] [Flow: jump]
	ror $7C.b,X		; 76 7C ; Rotate right $7C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $C80C.w		; CC 0C C8 ; Compare $C80C.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $82, $86, $34		; 82 86 34 ; Branch always long to $82, $86, $34 [Flow: branch]
	tsb $89C0.w		; 0C C0 89 ; Test and set bits $89C0.w [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $CC.b,X		; 34 CC ; Test bits $CC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy #$A0D4.w		; C0 D4 A0 ; Compare #$A0D4.w with Y register [Reads: Y Index] [Flags: ZNC]
	sty $95.b,X		; 94 95 ; Store Y register $95.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	rol $CC.b		; 26 CC ; Rotate left $CC.b [Reads: Direct Page] [Flags: ZNC]
	stx $98.b,Y		; 96 98 ; Store X register $98.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $9A.b,Y		; 96 9A ; Store X register $9A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cpy $9BCC.w		; CC CC 9B ; Compare $9BCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $A0CD.w,X		; 9D CD A0 ; Store accumulator to $A0CD.w,X [Reads: Accumulator, X Index]
	cpy $9526.w		; CC 26 95 ; Compare $9526.w with Y register [Reads: Y Index] [Flags: ZNC]
	stx $A7.b,Y		; 96 A7 ; Store X register $A7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $CC.b,Y		; 96 CC ; Store X register $CC.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cpy $A99A.w		; CC 9A A9 ; Compare $A99A.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($08.b)		; 72 08 ; Add with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $B0C5.w		; CC C5 B0 ; Compare $B0C5.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($B4.b)		; B2 B4 ; Load accumulator (indirect) ($B4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $CC.b,X		; B5 CC ; Load $CC.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $A2B7.w		; CC B7 A2 ; Compare $A2B7.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($B8.b)		; 72 B8 ; Add with carry (indirect) ($B8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $28CC.w		; CC CC 28 ; Compare $28CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$B9C1.w		; A0 C1 B9 ; Load #$B9C1.w into Y register [Writes: Y Index] [Flags: ZN]
	rol $CC.b,X		; 36 CC ; Rotate left $CC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($51.b)		; 72 51 ; Add with carry (indirect) ($51.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $65C7.w		; 0C C7 65 ; Test and set bits $65C7.w [Reads: Accumulator] [Flags: Z]
	adc $C6.b		; 65 C6 ; Add $C6.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: ZN]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($71.b),Y		; 51 71 ; Exclusive OR accumulator with memory ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora [$CC.b],Y		; 17 CC ; OR accumulator with memory (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $C9.b,X		; 34 C9 ; Test bits $C9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	tsb $CCCC.w		; 0C CC CC ; Test and set bits $CCCC.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $A901.w		; CC 01 A9 ; Compare $A901.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($C1.b)		; 72 C1 ; Add with carry (indirect) ($C1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $CC.b		; A5 CC ; Load $CC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $79FF.w		; CC FF 79 ; Compare $79FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($C9.b),Y		; D1 C9 ; Compare accumulator ($C9.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	trb $8DCC.w		; 1C CC 8D ; Test and reset bits $8DCC.w [Reads: Accumulator] [Flags: Z]
	jmp ($CBD6.w,X)		; 7C D6 CB ; Jump indirect indexed to ($CBD6.w,X) [Reads: X Index] [Flow: jump]
	cpy $C9CC.w		; CC CC C9 ; Compare $C9CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$34C2.w		; C0 C2 34 ; Compare #$34C2.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $A5C0.w		; CC C0 A5 ; Compare $A5C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	.db $D0, $D5		; D0 D5 ; Branch if not equal to $D0, $D5 [Flow: branch]
	trb $34CC.w		; 1C CC 34 ; Test and reset bits $34CC.w [Reads: Accumulator] [Flags: Z]
	lda #$93CB.w		; A9 CB 93 ; Load #$93CB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $DDCC.w		; 0C CC DD ; Test and set bits $DDCC.w [Reads: Accumulator] [Flags: Z]
	lda $9B34.w,Y		; B9 34 9B ; Load $9B34.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $790C.w		; CC 0C 79 ; Compare $790C.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($C9.b)		; 72 C9 ; Add with carry (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	wai		; CB ; Wait for interrupt
	cpy $C9CC.w		; CC CC C9 ; Compare $C9CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $D0.b,S		; C3 D0 ; Compare accumulator (stack relative) $D0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sep #$CC		; E2 CC ; Set processor status bits #$CC [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpy $E8E6.w		; CC E6 E8 ; Compare $E8E6.w with Y register [Reads: Y Index] [Flags: ZNC]
	nop		; EA ; No operation
	sta $CCCC.w,X		; 9D CC CC ; Store accumulator to $CCCC.w,X [Reads: Accumulator, X Index]
	ldy $D4.b		; A4 D4 ; Load $D4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	cmp #$CCCC.w		; C9 CC CC ; Compare #$CCCC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($F3.b,S),Y		; D3 F3 ; Compare accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	adc ($F9.b)		; 72 F9 ; Add with carry (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $7DCC.w		; CC CC 7D ; Compare $7DCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $FC7C.w,Y		; 79 7C FC ; Add $FC7C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $FCCC.w		; CC CC FC ; Compare $FCCC.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $78.b,X		; 34 78 ; Test bits $78.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cpy #$FC66.w		; C0 66 FC ; Compare #$FC66.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rep #$C0		; C2 C0 ; Reset processor status bits #$C0 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tsb $C7FF.w		; 0C FF C7 ; Test and set bits $C7FF.w [Reads: Accumulator] [Flags: Z]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.INDEX 16
	rep #$D2		; C2 D2
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	cmp $C7DD.w,X		; DD DD C7 ; Compare accumulator $C7DD.w,X [Reads: X Index] [Flags: ZNC]
	inc $FD35.w,X		; FE 35 FD ; Increment memory $FD35.w,X [Reads: X Index] [Flags: ZN]
	bit $040C.w		; 2C 0C 04 ; Test bits $040C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sta $7C.b		; 85 7C ; Store accumulator to $7C.b [Reads: Accumulator]
	cmp [$DC.b]		; C7 DC ; Compare accumulator (long) [$DC.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
.ACCU 16
.INDEX 16
	rep #$7A		; C2 7A
	asl $CD.b		; 06 CD ; Arithmetic shift left $CD.b [Reads: Direct Page] [Flags: ZNC]
	tsb $6D.b		; 04 6D ; Test and set bits $6D.b [Reads: Accumulator] [Flags: Z]
	and $0009.w		; 2D 09 00 ; Logical AND $0009.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp ($DD.b,X)		; C1 DD ; Compare accumulator ($DD.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	jmp.w [$FF7C]		; DC 7C FF ; Jump long indirect [$FF7C] [Flow: jump]
	and [$ED.b],Y		; 37 ED ; AND accumulator with memory (long indexed) [$ED.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $C621.w		; CC 21 C6 ; Compare $C621.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	cmp [$2D.b]		; C7 2D ; Compare accumulator (long) [$2D.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($84.b)		; D2 84 ; Compare accumulator (indirect) ($84.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	cmp [$CC.b]		; C7 CC ; Compare accumulator (long) [$CC.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $62, $CD, $C7		; 62 CD C7 ; Push effective relative address $62, $CD, $C7 [Writes: Stack Pointer]
	tsb $2204.w		; 0C 04 22 ; Test and set bits $2204.w [Reads: Accumulator] [Flags: Z]
	cmp $34C7.w,X		; DD C7 34 ; Compare accumulator $34C7.w,X [Reads: X Index] [Flags: ZNC]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $ED0A22.l		; 22 22 0A ED ; Jump to subroutine long $ED0A22.l [Writes: Stack Pointer] [Flow: call]
	cmp [$CD.b]		; C7 CD ; Compare accumulator (long) [$CD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($22.b),Y		; D1 22 ; Compare accumulator ($22.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $ED.b		; 05 ED ; Logical OR $ED.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $03C5D1.l		; 22 D1 C5 03 ; Jump to subroutine long $03C5D1.l [Writes: Stack Pointer] [Flow: call]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	and $CDDD.w		; 2D DD CD ; Logical AND $CDDD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp [$27.b]		; C7 27 ; Compare accumulator (long) [$27.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rol $23.b		; 26 23 ; Rotate left $23.b [Reads: Direct Page] [Flags: ZNC]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $DE6BDC.l,X		; 1F DC 6B DE ; Logical OR long $DE6BDC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $CC34.w,Y		; B9 34 CC ; Load $CC34.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$F8		; C2 F8
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$2D.b]		; C7 2D ; Compare accumulator (long) [$2D.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($37.b)		; 12 37 ; OR accumulator with memory (indirect) ($37.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora $DD2C0F.l		; 0F 0F 2C DD ; OR accumulator with memory (long) $DD2C0F.l [Writes: Accumulator] [Flags: ZN]
	ora $99B9C1.l		; 0F C1 B9 99 ; OR accumulator with memory (long) $99B9C1.l [Writes: Accumulator] [Flags: ZN]
	jmp.w [$DFC3]		; DC C3 DF ; Jump long indirect [$DFC3] [Flow: jump]
	ora $2B79D4.l,X		; 1F D4 79 2B ; Logical OR long $2B79D4.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $DA12.w		; 2C 12 DA ; Test bits $DA12.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cmp ($33.b,X)		; C1 33 ; Compare accumulator ($33.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	jmp.w [$31C2]		; DC C2 31 ; Jump long indirect [$31C2] [Flow: jump]
	pei ($9C.b)		; D4 9C ; Push effective indirect address ($9C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	adc ($12.b)		; 72 12 ; Add with carry (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $12CE.w		; CC CE 12 ; Compare $12CE.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $03CE.w,Y		; 79 CE 03 ; Add $03CE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$1DBD.w		; C0 BD 1D ; Compare #$1DBD.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $162378.l		; 0F 78 23 16 ; OR accumulator with memory (long) $162378.l [Writes: Accumulator] [Flags: ZN]
	and $FCFE.w		; 2D FE FC ; Logical AND $FCFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $D2CF.w		; CD CF D2 ; Compare $D2CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp [$22.b],Y		; D7 22 ; Compare accumulator (long indexed) [$22.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($0A.b)		; D2 0A ; Compare accumulator (indirect) ($0A.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $CDC7.w		; CD C7 CD ; Compare $CDC7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($22.b)		; D2 22 ; Compare accumulator (indirect) ($22.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $CD1F0A.l,X		; 1F 0A 1F CD ; Logical OR long $CD1F0A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $CDB2.w,X		; BD B2 CD ; Load $CDB2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $2DC7.w,X		; FD C7 2D ; Subtract with carry $2DC7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rep #$04		; C2 04 ; Reset processor status bits #$04 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $22.b,X		; D6 22 ; Decrement memory $22.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cmp [$08.b]		; C7 08 ; Compare accumulator (long) [$08.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $2D1F.w		; CD 1F 2D ; Compare $2D1F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp [$05.b],Y		; D7 05 ; Compare accumulator (long indexed) [$05.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$CD.b]		; C7 CD ; Compare accumulator (long) [$CD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and $0A22.w		; 2D 22 0A ; Logical AND $0A22.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $08CD.w		; CD CD 08 ; Compare $08CD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($2D.b)		; D2 2D ; Compare accumulator (indirect) ($2D.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $DB0B04.l,X		; 1F 04 0B DB ; Logical OR long $DB0B04.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0404.w,X		; DD 04 04 ; Compare accumulator $0404.w,X [Reads: X Index] [Flags: ZNC]
	tsb $1F.b		; 04 1F ; Test and set bits $1F.b [Reads: Accumulator] [Flags: Z]
	cmp $CDDB.w,X		; DD DB CD ; Compare accumulator $CDDB.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($03.b)		; D2 03 ; Compare accumulator (indirect) ($03.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($22.b)		; 32 22 ; AND accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($33.b)		; D2 33 ; Compare accumulator (indirect) ($33.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $F9.b,X		; 34 F9 ; Test bits $F9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2D.b		; 25 2D ; Logical AND $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,S		; 03 9B ; OR accumulator with stack relative $9B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$1D		; C2 1D
	cpy $3334.w		; CC 34 33 ; Compare $3334.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $1202B7.l		; 0F B7 02 12 ; OR accumulator with memory (long) $1202B7.l [Writes: Accumulator] [Flags: ZN]
	and $C00F.w		; 2D 0F C0 ; Logical AND $C00F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $1D.b,X		; 75 1D ; Add $1D.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($CD.b,X)		; C1 CD ; Compare accumulator ($CD.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	lda $33.b		; A5 33 ; Load $33.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and #$112C.w		; 29 2C 11 ; Logical AND #$112C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($CCDD.w,X)		; 7C DD CC ; Jump indirect indexed to ($CCDD.w,X) [Reads: X Index] [Flow: jump]
	lda $CEDA55.l		; AF 55 DA CE ; Load long $CEDA55.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$DDDC.w		; C0 DC DD ; Compare #$DDDC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $B9B9.w		; CC B9 B9 ; Compare $B9B9.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $CCED.w		; ED ED CC ; Subtract $CCED.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora ($05.b),Y		; 11 05 ; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	cmp [$DD.b]		; C7 DD ; Compare accumulator (long) [$DD.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($D4.b)		; D2 D4 ; Compare accumulator (indirect) ($D4.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy #$C799.w		; C0 99 C7 ; Compare #$C799.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $6F32.w		; 2C 32 6F ; Test bits $6F32.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora ($DE.b),Y		; 11 DE ; OR accumulator with memory ($DE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $CCCD.w,X		; DE CD CC ; Decrement memory $CCCD.w,X [Reads: X Index] [Flags: ZN]
	lda $3433.w,Y		; B9 33 34 ; Load $3433.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $2CC2.w,Y		; 79 C2 2C ; Add $2CC2.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $1077.w		; F4 77 10 ; Push absolute address $1077.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpy $C1DD.w		; CC DD C1 ; Compare $C1DD.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp.w [$34B9]		; DC B9 34 ; Jump long indirect [$34B9] [Flow: jump]
	cpy $CEC2.w		; CC C2 CE ; Compare $CEC2.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $11DC2D.l		; 6F 2D DC 11 ; Add with carry (long) $11DC2D.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($71.b),Y		; 71 71 ; Add with carry ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $DC.b		; A4 DC ; Load $DC.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy $78D3.w		; CC D3 78 ; Compare $78D3.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $CCCE.w		; ED CE CC ; Subtract $CCCE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora ($34.b)		; 12 34 ; OR accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora ($3C.b),Y		; 11 3C ; OR accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $7671.w		; CD 71 76 ; Compare $7671.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $CC77.w,Y		; F9 77 CC ; Subtract with carry $CC77.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $53E7.w		; CC E7 53 ; Compare $53E7.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $B211FF.l,X		; 1F FF 11 B2 ; Logical OR long $B211FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($0F.b)		; 32 0F ; AND accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp ($2D.b,X)		; C1 2D ; Compare accumulator ($2D.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	jmp.w [$7C11]		; DC 11 7C ; Jump long indirect [$7C11] [Flow: jump]
	adc $DCE7.w,X		; 7D E7 DC ; Add $DCE7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($79.b,X)		; C1 79 ; Compare accumulator ($79.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc ($7C.b,S),Y		; F3 7C ; Subtract with carry (stack relative indirect indexed) ($7C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy $CECD.w		; CC CD CE ; Compare $CECD.w with Y register [Reads: Y Index] [Flags: ZNC]
	ror $1A.b,X		; 76 1A ; Rotate right $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $DC21.w,Y		; 79 21 DC ; Add $DC21.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$E2		; C2 E2
	and ($D1.b),Y		; 31 D1 ; AND accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$ED12.w		; C0 12 ED ; Compare #$ED12.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp ($CD.b)		; D2 CD ; Compare accumulator (indirect) ($CD.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $DC22.w,X		; 1D 22 DC ; OR accumulator with memory $DC22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$DDC7]		; DC C7 DD ; Jump long indirect [$DDC7] [Flow: jump]
	jsl $36C222.l		; 22 22 C2 36 ; Jump to subroutine long $36C222.l [Writes: Stack Pointer] [Flow: call]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$DD		; C2 DD
	tsb $C7.b		; 04 C7 ; Test and set bits $C7.b [Reads: Accumulator] [Flags: Z]
	ror $87.b,X		; 76 87 ; Rotate right $87.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp ($CC.b)		; D2 CC ; Compare accumulator (indirect) ($CC.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$34.b],Y		; D7 34 ; Compare accumulator (long indexed) [$34.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	and ($C7.b,S),Y		; 33 C7 ; AND accumulator (stack relative indirect indexed) ($C7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $B9C122.l		; 22 22 C1 B9 ; Jump to subroutine long $B9C122.l [Writes: Stack Pointer] [Flow: call]
	ora $BDCC07.l,X		; 1F 07 CC BD ; Logical OR long $BDCC07.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $E1.b,X		; 76 E1 ; Rotate right $E1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $9C.b,X		; 34 9C ; Test bits $9C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	sta $DBB9.w		; 8D B9 DB ; Store accumulator to $DBB9.w [Reads: Accumulator]
	and [$CC.b],Y		; 37 CC ; AND accumulator with memory (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $9C.b		; 02 9C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($A4.b,X)		; C1 A4 ; Compare accumulator ($A4.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ldy $CC.b		; A4 CC ; Load $CC.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy $1EBA.w		; CC BA 1E ; Compare $1EBA.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $2D62.w,X		; FE 62 2D ; Increment memory $2D62.w,X [Reads: X Index] [Flags: ZN]
	cmp ($35.b,X)		; C1 35 ; Compare accumulator ($35.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $C0DC2C.l		; 6F 2C DC C0 ; Add with carry (long) $C0DC2C.l [Writes: Accumulator] [Flags: ZVNC]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($CC.b),Y		; 11 CC ; OR accumulator with memory ($CC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $78C1.w,X		; DD C1 78 ; Compare accumulator $78C1.w,X [Reads: X Index] [Flags: ZNC]
	sbc $CC70.w		; ED 70 CC ; Subtract $CC70.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $1170.w		; 1C 70 11 ; Test and reset bits $1170.w [Reads: Accumulator] [Flags: Z]
	adc ($71.b)		; 72 71 ; Add with carry (indirect) ($71.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $71CC.w		; CD CC 71 ; Compare $71CC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ror $F3.b,X		; 76 F3 ; Rotate right $F3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($CC.b),Y		; 71 CC ; Add with carry ($CC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $7678.w		; CC 78 76 ; Compare $7678.w with Y register [Reads: Y Index] [Flags: ZNC]
	ror $F6.b,X		; 76 F6 ; Rotate right $F6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp ($CC.b,X)		; C1 CC ; Compare accumulator ($CC.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc [$7C.b],Y		; F7 7C ; Subtract with carry (long indexed) [$7C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cpy $F8CC.w		; CC CC F8 ; Compare $F8CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $BCCC7C.l,X		; 1F 7C CC BC ; Logical OR long $BCCC7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $D10A.w		; AC 0A D1 ; Load $D10A.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $B92B21.l,X		; 1F 21 2B B9 ; Logical OR long $B92B21.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $0B.b,X		; 34 0B ; Test bits $0B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $C0.b,S		; E3 C0 ; Subtract stack-relative $C0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $10, $56		; 10 56 ; Branch if plus to $10, $56 [Flow: branch]
	cmp ($C7.b),Y		; D1 C7 ; Compare accumulator ($C7.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($12.b,X)		; C1 12 ; Compare accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	bit $0BB9.w		; 2C B9 0B ; Test bits $0BB9.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc [$34.b],Y		; 77 34 ; Add with carry (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($20.b,X)		; C1 20 ; Compare accumulator ($20.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $C7C7.w,X		; FD C7 C7 ; Subtract with carry $C7C7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($1F22.w)		; 6C 22 1F ; Jump indirect to ($1F22.w) [Flow: jump]
	ora $BBED84.l,X		; 1F 84 ED BB ; Logical OR long $BBED84.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($D0.b,X)		; C1 D0 ; Compare accumulator ($D0.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp ($24.b)		; D2 24 ; Compare accumulator (indirect) ($24.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jmp ($3C22.w,X)		; 7C 22 3C ; Jump indirect indexed to ($3C22.w,X) [Reads: X Index] [Flow: jump]
	sbc $FBBA.w		; ED BA FB ; Subtract $FBBA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and [$12.b]		; 27 12 ; AND accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1434.w		; 2D 34 14 ; Logical AND $1434.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $2D05.w		; CD 05 2D ; Compare $2D05.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $7C.b		; 25 7C ; Logical AND $7C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($22.b,X)		; C1 22 ; Compare accumulator ($22.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy $86.b		; C4 86 ; Compare $86.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and ($51.b),Y		; 31 51 ; AND accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $DCD7.w		; CD D7 DC ; Compare $DCD7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $2222.w		; CD 22 22 ; Compare $2222.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($C7.b,X)		; 01 C7 ; Logical OR ($C7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pei ($03.b)		; D4 03 ; Push effective indirect address ($03.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($2D.b)		; D2 2D ; Compare accumulator (indirect) ($2D.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	pei ($35.b)		; D4 35 ; Push effective indirect address ($35.b) [Reads: Direct Page] [Writes: Stack Pointer]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl $2829.w		; 0E 29 28 ; Arithmetic shift left $2829.w [Flags: ZNC]
	cmp $29DD.w		; CD DD 29 ; Compare $29DD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($DD.b),Y		; 31 DD ; AND accumulator with memory ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $3131.w,X		; DD 31 31 ; Compare accumulator $3131.w,X [Reads: X Index] [Flags: ZNC]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $33DD.w,X		; DD DD 33 ; Compare accumulator $33DD.w,X [Reads: X Index] [Flags: ZNC]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($DD.b),Y		; 31 DD ; AND accumulator with memory ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $EC31.w,X		; DD 31 EC ; Compare accumulator $EC31.w,X [Reads: X Index] [Flags: ZNC]
	and $DDD33F.l,X		; 3F 3F D3 DD ; AND accumulator with memory (long,X) $DDD33F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $42, $40		; 42 40 ; Reserved instruction
	cmp $40DD.w,X		; DD DD 40 ; Compare accumulator $40DD.w,X [Reads: X Index] [Flags: ZNC]
	mvp $46,$57		; 44 57 46 ; Move block positive $46,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $408D.w,X		; DD 8D 40 ; Compare accumulator $408D.w,X [Reads: X Index] [Flags: ZNC]
	eor $5757.w		; 4D 57 57 ; Exclusive OR $5757.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $4F88.w,X		; DD 88 4F ; Compare accumulator $4F88.w,X [Reads: X Index] [Flags: ZNC]
	.db $50, $43		; 50 43 ; Branch if overflow clear to $50, $43 [Flow: branch]
	eor [$DD.b],Y		; 57 DD ; Exclusive OR accumulator with memory (long indexed) [$DD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $42, $57		; 42 57 ; Reserved instruction
	eor [$55.b],Y		; 57 55 ; Exclusive OR accumulator with memory (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor [$55.b],Y		; 57 55 ; Exclusive OR accumulator with memory (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$55.b],Y		; 57 55 ; Exclusive OR accumulator with memory (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $5888.w		; 8D 88 58 ; Store accumulator to $5888.w [Reads: Accumulator]
	eor $12.b,X		; 55 12 ; Exclusive OR accumulator with memory $12.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sta $4610.w,X		; 9D 10 46 ; Store accumulator to $4610.w,X [Reads: Accumulator, X Index]
	lsr $5A.b		; 46 5A ; Logical shift right $5A.b [Reads: Direct Page] [Flags: ZNC]
	sta $5CDD.w,X		; 9D DD 5C ; Store accumulator to $5CDD.w,X [Reads: Accumulator, X Index]
	lsr $5D5F.w,X		; 5E 5F 5D ; Logical shift right $5D5F.w,X [Reads: X Index] [Flags: ZNC]
	cmp $5DDD.w,X		; DD DD 5D ; Compare accumulator $5DDD.w,X [Reads: X Index] [Flags: ZNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $5FDDDD.l,X		; 5F DD DD 5F ; Exclusive OR accumulator with memory (long,X) $5FDDDD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $66.b		; 64 66 ; Store zero to $66.b
	ror $DD.b		; 66 DD ; Rotate right $DD.b [Reads: Direct Page] [Flags: ZNC]
	cmp $5D6E.w,X		; DD 6E 5D ; Compare accumulator $5D6E.w,X [Reads: X Index] [Flags: ZNC]
	.db $70, $72		; 70 72 ; Branch if overflow set to $70, $72 [Flow: branch]
	cmp $5CDD.w,X		; DD DD 5C ; Compare accumulator $5CDD.w,X [Reads: X Index] [Flags: ZNC]
	eor $DD6167.l,X		; 5F 67 61 DD ; Exclusive OR accumulator with memory (long,X) $DD6167.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $6563.w,X		; DD 63 65 ; Compare accumulator $6563.w,X [Reads: X Index] [Flags: ZNC]
	ror $78.b		; 66 78 ; Rotate right $78.b [Reads: Direct Page] [Flags: ZNC]
	cmp $7CDD.w,X		; DD DD 7C ; Compare accumulator $7CDD.w,X [Reads: X Index] [Flags: ZNC]
	adc $817F.w,X		; 7D 7F 81 ; Add $817F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $83DD.w,X		; DD DD 83 ; Compare accumulator $83DD.w,X [Reads: X Index] [Flags: ZNC]
	sty $86.b		; 84 86 ; Store Y register to $86.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $93DD.w,X		; DD DD 93 ; Compare accumulator $93DD.w,X [Reads: X Index] [Flags: ZNC]
	sta $97.b,X		; 95 97 ; Store accumulator to $97.b,X [Reads: Accumulator, X Index]
	sta $DDDD.w,Y		; 99 DD DD ; Store accumulator to $DDDD.w,Y [Reads: Accumulator, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stx $A0.b,Y		; 96 A0 ; Store X register $A0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $DDDD.w,Y		; 99 DD DD ; Store accumulator to $DDDD.w,Y [Reads: Accumulator, Y Index]
	ldx #$0093.w		; A2 93 00 ; Load #$0093.w into X register [Writes: X Index] [Flags: ZN]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $22FFFF.l,X		; FF FF FF 22 ; Subtract with carry (long,X) $22FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($E4.b),Y		; 11 E4 ; OR accumulator with memory ($E4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $0000.w		; 2C 00 00 ; Test bits $0000.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0B.b),Y		; 11 0B ; OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b],Y		; 17 01 ; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($17.b,S),Y		; 33 17 ; AND accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $120011.l		; 22 11 00 12 ; Jump to subroutine long $120011.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	jmp $1122.w		; 4C 22 11 ; Jump to $1122.w [Flow: jump]
	ora $12.b		; 05 12 ; Logical OR $12.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($31.b),Y		; 11 31 ; OR accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($33.b,S),Y		; 13 33 ; OR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($31.b,S),Y		; 13 31 ; OR accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($17.b,S),Y		; 33 17 ; AND accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $120411.l		; 22 11 04 12 ; Jump to subroutine long $120411.l [Writes: Stack Pointer] [Flow: call]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($32.b,S),Y		; 13 32 ; OR accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($41.b),Y		; 31 41 ; AND accumulator with memory ($41.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$31.b],Y		; 17 31 ; OR accumulator with memory (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $210011.l		; 22 11 00 21 ; Jump to subroutine long $210011.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	eor $06.b		; 45 06 ; Exclusive OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($23.b,S),Y		; 13 23 ; OR accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $1703.w		; 20 03 17 ; Jump to subroutine at $1703.w [Writes: Stack Pointer] [Flow: call]
	bit $0000.w		; 2C 00 00 ; Test bits $0000.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $10, $29		; 10 29 ; Branch if plus to $10, $29 [Flow: branch]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $012722.l		; 22 22 27 01 ; Jump to subroutine long $012722.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $13.b,S		; 23 13 ; AND accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$44.b],Y		; 37 44 ; AND accumulator with memory (long indexed) [$44.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($23.b,S),Y		; 13 23 ; OR accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $22.b		; 24 22 ; Test bits $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $003F32.l		; 22 32 3F 00 ; Jump to subroutine long $003F32.l [Writes: Stack Pointer] [Flow: call]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $010311.l		; 22 11 03 01 ; Jump to subroutine long $010311.l [Writes: Stack Pointer] [Flow: call]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$27.b],Y		; 17 27 ; OR accumulator with memory (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($85.b),Y		; 11 85 ; OR accumulator with memory ($85.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $95.b		; 00 95 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $12.b		; 04 12 ; Test and set bits $12.b [Reads: Accumulator] [Flags: Z]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Accumulator, Direct Page]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $31.b,S		; 03 31 ; OR accumulator with stack relative $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($24.b,S),Y		; 13 24 ; OR accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0700.w		; 20 00 07 ; Jump to subroutine at $0700.w [Writes: Stack Pointer] [Flow: call]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $99.b		; E4 99 ; Compare $99.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($05.b),Y		; 11 05 ; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b,S),Y		; 13 17 ; OR accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$31.b],Y		; 17 31 ; OR accumulator with memory (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $22.b,S		; 43 22 ; Exclusive OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$31.b],Y		; 17 31 ; OR accumulator with memory (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $02.b,S		; 83 02 ; Store accumulator (stack relative) $02.b,S [Reads: Accumulator, Stack Pointer]
	ora $4300.w,X		; 1D 00 43 ; OR accumulator with memory $4300.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $028311.l		; 22 11 83 02 ; Jump to subroutine long $028311.l [Writes: Stack Pointer] [Flow: call]
	ora $1123.w,X		; 1D 23 11 ; OR accumulator with memory $1123.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($17.b,S),Y		; 33 17 ; AND accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$31.b]		; 27 31 ; AND accumulator with memory (long) [$31.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $22.b,S		; 43 22 ; Exclusive OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($84.b),Y		; 11 84 ; OR accumulator with memory ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $25.b		; 02 25 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $030411.l		; 22 11 04 03 ; Jump to subroutine long $030411.l [Writes: Stack Pointer] [Flow: call]
	ora $27.b,S		; 03 27 ; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($43.b),Y		; 31 43 ; AND accumulator with memory ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $028311.l		; 22 11 83 02 ; Jump to subroutine long $028311.l [Writes: Stack Pointer] [Flow: call]
	and $23.b,X		; 35 23 ; Logical AND $23.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b),Y		; 11 02 ; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$22.b],Y		; 17 22 ; OR accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($11.b,X)		; 21 11 ; Logical AND ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($24.b,S),Y		; 33 24 ; AND accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $31.b,S		; 23 31 ; AND accumulator with stack relative $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	cmp ($84.b,X)		; C1 84 ; Compare accumulator ($84.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	adc ($27.b,S),Y		; 73 27 ; Add with carry (stack relative indirect indexed) ($27.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($83.b),Y		; 31 83 ; AND accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $61.b		; 02 61 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $83		; 30 83 ; Branch if minus to $30, $83 [Flow: branch]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $83		; 10 83 ; Branch if plus to $10, $83 [Flow: branch]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($21.b,S),Y		; 13 21 ; OR accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b),Y		; 11 02 ; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($11.b),Y		; 31 11 ; AND accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($17.b,S),Y		; 33 17 ; AND accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,X		; 35 00 ; Logical AND $00.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx $37.b		; E4 37 ; Compare $37.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($E4.b)		; 32 E4 ; AND accumulator with memory (indirect) ($E4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($51.b,X)		; 01 51 ; Logical OR ($51.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($83.b),Y		; 11 83 ; OR accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $1D.b		; 02 1D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $227002.l		; 8F 02 70 22 ; Store accumulator (long) $227002.l [Reads: Accumulator]
	ora ($83.b),Y		; 11 83 ; OR accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	cpy #$0302.w		; C0 02 03 ; Compare #$0302.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($12.b,S),Y		; 33 12 ; AND accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $37.b		; E4 37 ; Compare $37.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($2F.b),Y		; 31 2F ; AND accumulator with memory ($2F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($03.b,X)		; 21 03 ; Logical AND ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $018500.l,X		; 3F 00 85 01 ; AND accumulator with memory (long,X) $018500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($27.b)		; 32 27 ; AND accumulator with memory (indirect) ($27.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($25.b)		; 12 25 ; OR accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	jsl $112400.l		; 22 00 24 11 ; Jump to subroutine long $112400.l [Writes: Stack Pointer] [Flow: call]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $83.b,S		; 23 83 ; AND accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($17.b,S),Y		; 33 17 ; AND accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $31.b		; 04 31 ; Test and set bits $31.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($83.b),Y		; 31 83 ; AND accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Accumulator, Stack Pointer]
	adc $0483.w,X		; 7D 83 04 ; Add $0483.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ldx $00.b,Y		; B6 00 ; Load X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	adc $211204.l		; 6F 04 12 21 ; Add with carry (long) $211204.l [Writes: Accumulator] [Flags: ZVNC]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $83		; 10 83 ; Branch if plus to $10, $83 [Flow: branch]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $002511.l		; 22 11 25 00 ; Jump to subroutine long $002511.l [Writes: Stack Pointer] [Flow: call]
	sta $04.b,S		; 83 04 ; Store accumulator (stack relative) $04.b,S [Reads: Accumulator, Stack Pointer]
	sta ($2A.b,X)		; 81 2A ; Store accumulator ($2A.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($84.b),Y		; 11 84 ; OR accumulator with memory ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $112200.l,X		; 3F 00 22 11 ; AND accumulator with memory (long,X) $112200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $12.b		; 04 12 ; Test and set bits $12.b [Reads: Accumulator] [Flags: Z]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $12.b,S		; 03 12 ; OR accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $120311.l		; 22 11 03 12 ; Jump to subroutine long $120311.l [Writes: Stack Pointer] [Flow: call]
	ora ($02.b),Y		; 11 02 ; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($83.b)		; 32 83 ; AND accumulator with memory (indirect) ($83.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($32.b)		; 12 32 ; OR accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $01.b		; 86 01 ; Store X register to $01.b [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$04.b]		; 87 04 ; Store accumulator (long) [$04.b] [Reads: Accumulator, Direct Page]
	cpx #$0039.w		; E0 39 00 ; Compare #$0039.w with X register [Reads: X Index] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	jmp.w [$0083]		; DC 83 00 ; Jump long indirect [$0083] [Flow: jump]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $26.b		; 05 26 ; Logical OR $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	cmp $031104.l,X		; DF 04 11 03 ; Compare accumulator (long,X) $031104.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($03.b,X)		; 21 03 ; Logical AND ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($13.b,S),Y		; 33 13 ; AND accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($83.b),Y		; 11 83 ; OR accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2C.b		; 05 2C ; Logical OR $2C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	and $0084.w		; 2D 84 00 ; Logical AND $0084.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $86.b,S		; 03 86 ; OR accumulator with stack relative $86.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	and $11.b		; 25 11 ; Logical AND $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $E4		; 10 E4 ; Branch if plus to $10, $E4 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	jsl $008411.l		; 22 11 84 00 ; Jump to subroutine long $008411.l [Writes: Stack Pointer] [Flow: call]
	adc $E4.b,S		; 63 E4 ; Add with carry (stack relative) $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	ora $11.b,S		; 03 11 ; OR accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($30.b),Y		; 11 30 ; OR accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($23.b),Y		; 11 23 ; OR accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E9.b		; 05 E9 ; Logical OR $E9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $22.b		; E4 22 ; Compare $22.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $E9.b		; 05 E9 ; Logical OR $E9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($25.b),Y		; 31 25 ; AND accumulator with memory ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Accumulator, Stack Pointer]
	cpx #$1203.w		; E0 03 12 ; Compare #$1203.w with X register [Reads: X Index] [Flags: ZNC]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($27.b,S),Y		; 13 27 ; OR accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($11.b),Y		; 51 11 ; Exclusive OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($30.b),Y		; 11 30 ; OR accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($03.b,X)		; 21 03 ; Logical AND ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($17.b,S),Y		; 33 17 ; AND accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $27		; 50 27 ; Branch if overflow clear to $50, $27 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	ora $840400.l		; 0F 00 04 84 ; OR accumulator with memory (long) $840400.l [Writes: Accumulator] [Flags: ZN]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $008311.l		; 22 11 83 00 ; Jump to subroutine long $008311.l [Writes: Stack Pointer] [Flow: call]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and ($83.b,X)		; 21 83 ; Logical AND ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $3F.b		; 04 3F ; Test and set bits $3F.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $11.b		; 24 11 ; Test bits $11.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($27.b),Y		; 11 27 ; OR accumulator with memory ($27.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($28.b,S),Y		; 33 28 ; AND accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E3FFFF.l,X		; FF FF FF E3 ; Subtract with carry (long,X) $E3FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $3E		; 90 3E ; Branch if carry clear to $90, $3E [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $3E		; 90 3E ; Branch if carry clear to $90, $3E [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $6C76.w,X		; BC 76 6C ; Load Y register $6C76.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy $2077.w,X		; BC 77 20 ; Load Y register $2077.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpx $503B.w		; EC 3B 50 ; Compare $503B.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $203B.w		; EC 3B 20 ; Compare $203B.w with X register [Reads: X Index] [Flags: ZNC]
	lda $BB1FB2.l,X		; BF B2 1F BB ; Load long $BB1FB2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($1F.b,S),Y		; B3 1F ; Load accumulator (stack relative indirect indexed) ($1F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $BF1CB4.l		; CF B4 1C BF ; Compare accumulator (long) $BF1CB4.l [Reads: Accumulator] [Flags: ZNC]
	sta $BF60.w		; 8D 60 BF ; Store accumulator to $BF60.w [Reads: Accumulator]
	stx $C129.w		; 8E 29 C1 ; Store X register to $C129.w [Reads: X Index]
	sbc $FFC13D.l,X		; FF 3D C1 FF ; Subtract with carry (long,X) $FFC13D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($C1.b),Y		; 51 C1 ; Exclusive OR accumulator with memory ($C1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $215DFC.l,X		; FF FC 5D 21 ; Subtract with carry (long,X) $215DFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $219D.w,X		; FD 9D 21 ; Subtract with carry $219D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $91.b,X		; 34 91 ; Test bits $91.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $4CAA21.l		; 4F 21 AA 4C ; Exclusive OR accumulator with memory (long) $4CAA21.l [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $AB4B.w,X		; FD 4B AB ; Subtract with carry $AB4B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AB53.w,X		; FD 53 AB ; Subtract with carry $AB53.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF.w,X		; FD FF FF ; Subtract with carry $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($4F.b),Y		; 91 4F ; Store accumulator ($4F.b),Y [Reads: Accumulator, Direct Page, Y Index]
	jsr ($6AE9.w,X)		; FC E9 6A ; Jump to subroutine indirect indexed ($6AE9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $DDA8.w,Y		; 19 A8 DD ; OR accumulator with memory $DDA8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $DDC8.w,Y		; 19 C8 DD ; OR accumulator with memory $DDC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($A78B.w,X)		; FC 8B A7 ; Jump to subroutine indirect indexed ($A78B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A76D.w,X)		; FC 6D A7 ; Jump to subroutine indirect indexed ($A76D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A7AD.w,X)		; FC AD A7 ; Jump to subroutine indirect indexed ($A7AD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $90, $3E		; 90 3E ; Branch if carry clear to $90, $3E [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc $083B.w		; EE 3B 08 ; Increment $083B.w [Flags: ZN]
	ldy $7076.w,X		; BC 76 70 ; Load Y register $7076.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $7B.b		; A5 7B ; Load $7B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($77BC.w)		; 6C BC 77 ; Jump indirect to ($77BC.w) [Flow: jump]
	sbc $686D.w,X		; FD 6D 68 ; Subtract with carry $686D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $883B.w		; EE 3B 88 ; Increment $883B.w [Flags: ZN]
	ldy $F076.w,X		; BC 76 F0 ; Load Y register $F076.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $7B.b		; A5 7B ; Load $7B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $77BC.w		; EC BC 77 ; Compare $77BC.w with X register [Reads: X Index] [Flags: ZNC]
	inc $2989.w,X		; FE 89 29 ; Increment memory $2989.w,X [Reads: X Index] [Flags: ZN]
	cmp $9F.b,S		; C3 9F ; Compare accumulator (stack relative) $9F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	sta $B0D1FA.l,X		; 9F FA D1 B0 ; Store accumulator (long,X) $B0D1FA.l,X [Reads: Accumulator, X Index]
	cmp $A9D0.w,X		; DD D0 A9 ; Compare accumulator $A9D0.w,X [Reads: X Index] [Flags: ZNC]
	bit $8AFD.w,X		; 3C FD 8A ; Test bits $8AFD.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($FD.b,X)		; 21 FD ; Logical AND ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($FD.b,X)		; A1 FD ; Load accumulator ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	and ($FD.b,X)		; 21 FD ; Logical AND ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc ($1E.b,X)		; E1 1E ; Subtract with carry ($1E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $93D0.w,X		; FD D0 93 ; Subtract with carry $93D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6AFE.w,X		; FD FE 6A ; Subtract with carry $6AFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($A8.b,X)		; 21 A8 ; Logical AND ($A8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $B2.b,X		; D6 B2 ; Decrement memory $B2.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cmp ($B3.b),Y		; D1 B3 ; Compare accumulator ($B3.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp [$8D.b],Y		; D7 8D ; Compare accumulator (long indexed) [$8D.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	pei ($D7.b)		; D4 D7 ; Push effective indirect address ($D7.b) [Reads: Direct Page] [Writes: Stack Pointer]
	stx $FFFF.w		; 8E FF FF ; Store X register to $FFFF.w [Reads: X Index]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $3E90.w		; 20 90 3E ; Jump to subroutine at $3E90.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc $083B.w		; EE 3B 08 ; Increment $083B.w [Flags: ZN]
	ldy $7076.w,X		; BC 76 70 ; Load Y register $7076.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $7B.b		; A5 7B ; Load $7B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($E85B.w,X)		; FC 5B E8 ; Jump to subroutine indirect indexed ($E85B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($6AA9.w,X)		; FC A9 6A ; Jump to subroutine indirect indexed ($6AA9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	mvn $4F,$91		; 54 91 4F ; Move block negative $4F,$91 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $DDC8.w		; 4D C8 DD ; Exclusive OR $DDC8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $3CC1.w		; 4C C1 3C ; Jump to $3CC1.w [Flow: jump]
	and [$9F.b]		; 27 9F ; AND accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and $16FA9F.l		; 2F 9F FA 16 ; AND accumulator with memory (long) $16FA9F.l [Writes: Accumulator] [Flags: ZN]
	sta $9F1EFD.l,X		; 9F FD 1E 9F ; Store accumulator (long,X) $9F1EFD.l,X [Reads: Accumulator, X Index]
	sbc $A716.w,X		; FD 16 A7 ; Subtract with carry $A716.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A71E.w,X		; FD 1E A7 ; Subtract with carry $A71E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A726.w,X		; FD 26 A7 ; Subtract with carry $A726.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A72E.w,X		; FD 2E A7 ; Subtract with carry $A72E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AF26.w,X		; FD 26 AF ; Subtract with carry $AF26.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AF2E.w,X		; FD 2E AF ; Subtract with carry $AF2E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $933C.w,X		; FD 3C 93 ; Subtract with carry $933C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A638.w,X		; FD 38 A6 ; Subtract with carry $A638.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($3A.b)		; B2 3A ; Load accumulator (indirect) ($3A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($B3.b,X)		; A1 B3 ; Load accumulator ($B3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $B4.b,X		; B5 B4 ; Load $B4.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	lda [$8D.b]		; A7 8D ; Load accumulator (long) [$8D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $A7.b		; 64 A7 ; Store zero to $A7.b
	stx $CA52.w		; 8E 52 CA ; Store X register to $CA52.w [Reads: X Index]
	sbc $FFFF.w,X		; FD FF FF ; Subtract with carry $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0CE3FF.l,X		; FF FF E3 0C ; Subtract with carry (long,X) $0CE3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $0878.w,Y		; 39 78 08 ; AND accumulator with memory $0878.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $39		; 70 39 ; Branch if overflow set to $70, $39 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $A5		; 70 A5 ; Branch if overflow set to $70, $A5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $3BEC.w		; 20 EC 3B ; Jump to subroutine at $3BEC.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $EC		; 50 EC ; Branch if overflow clear to $50, $EC [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($4F.b),Y		; 11 4F ; OR accumulator with memory ($4F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $3F1B.w,X		; DD 1B 3F ; Compare accumulator $3F1B.w,X [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $4619FA.l		; 4F FA 19 46 ; Exclusive OR accumulator with memory (long) $4619FA.l [Writes: Accumulator] [Flags: ZN]
	sbc $5516.w,Y		; F9 16 55 ; Subtract with carry $5516.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $631B.w		; 4C 1B 63 ; Jump to $631B.w [Flow: jump]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr ($2786.w,X)		; FC 86 27 ; Jump to subroutine indirect indexed ($2786.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($27C6.w,X)		; FC C6 27 ; Jump to subroutine indirect indexed ($27C6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $2706.w,X		; FD 06 27 ; Subtract with carry $2706.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2746.w,X		; FD 46 27 ; Subtract with carry $2746.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2786.w,X		; FD 86 27 ; Subtract with carry $2786.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $3C79.w		; 20 79 3C ; Jump to subroutine at $3C79.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $483C.w,Y		; 79 3C 48 ; Add $483C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($3C.b,X)		; A1 3C ; Load accumulator ($3C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($A7CA.w,X)		; FC CA A7 ; Jump to subroutine indirect indexed ($A7CA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A7CB.w,X)		; FC CB A7 ; Jump to subroutine indirect indexed ($A7CB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A7CC.w,X)		; FC CC A7 ; Jump to subroutine indirect indexed ($A7CC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A7CD.w,X)		; FC CD A7 ; Jump to subroutine indirect indexed ($A7CD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($80.b,X)		; 21 80 ; Logical AND ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $8049.w,X		; DD 49 80 ; Compare accumulator $8049.w,X [Reads: X Index] [Flags: ZNC]
	cmp $A849.w,X		; DD 49 A8 ; Compare accumulator $A849.w,X [Reads: X Index] [Flags: ZNC]
	cmp $A118.w,X		; DD 18 A1 ; Compare accumulator $A118.w,X [Reads: X Index] [Flags: ZNC]
	jmp $D918.w		; 4C 18 D9 ; Jump to $D918.w [Flow: jump]
	jmp $E9FE.w		; 4C FE E9 ; Jump to $E9FE.w [Flow: jump]
	and #$69FE.w		; 29 FE 69 ; Logical AND #$69FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $A86B.w,X		; FE 6B A8 ; Increment memory $A86B.w,X [Reads: X Index] [Flags: ZN]
	inc $686D.w,X		; FE 6D 68 ; Increment memory $686D.w,X [Reads: X Index] [Flags: ZN]
	sbc $FFE869.l,X		; FF 69 E8 FF ; Subtract with carry (long,X) $FFE869.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sbc $B8686D.l,X		; FF 6D 68 B8 ; Subtract with carry (long,X) $B8686D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $B2.b		; A4 B2 ; Load $B2.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy $B2.b,X		; B4 B2 ; Load Y register $B2.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy $B2.b		; C4 B2 ; Compare $B2.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pei ($B2.b)		; D4 B2 ; Push effective indirect address ($B2.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $A3.b,X		; B4 A3 ; Load Y register $A3.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($B4.b,S),Y		; B3 B4 ; Load accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$B4.b]		; E7 B4 ; Subtract with carry (long) [$B4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda [$A7.b],Y		; B7 A7 ; Load accumulator (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $A7CB.w		; 8D CB A7 ; Store accumulator to $A7CB.w [Reads: Accumulator]
	stx $C088.w		; 8E 88 C0 ; Store X register to $C088.w [Reads: X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($23.b),Y		; 51 23 ; Exclusive OR accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $82FD.w,X		; FD FD 82 ; Subtract with carry $82FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FC.b,X)		; E1 FC ; Subtract with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $21, $FC		; 62 21 FC ; Push effective relative address $62, $21, $FC [Writes: Stack Pointer]
	.db $62, $A1, $FC		; 62 A1 FC ; Push effective relative address $62, $A1, $FC [Writes: Stack Pointer]
	adc $21.b,S		; 63 21 ; Add with carry (stack relative) $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($2182.w,X)		; FC 82 21 ; Jump to subroutine indirect indexed ($2182.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A182.w,X)		; FC 82 A1 ; Jump to subroutine indirect indexed ($A182.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($21A2.w,X)		; FC A2 21 ; Jump to subroutine indirect indexed ($21A2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $3A5F.w,X		; FD 5F 3A ; Subtract with carry $3A5F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $571F.w,X		; FD 1F 57 ; Subtract with carry $571F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $572F.w,X		; FD 2F 57 ; Subtract with carry $572F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $575B.w,X		; FD 5B 57 ; Subtract with carry $575B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8226.w,X		; FD 26 82 ; Subtract with carry $8226.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AA4E.w,X		; FD 4E AA ; Subtract with carry $AA4E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A323.w,X		; FD 23 A3 ; Subtract with carry $A323.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DB23.w,X		; FD 23 DB ; Subtract with carry $DB23.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A529.w,X		; FD 29 A5 ; Subtract with carry $A529.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $FDA228.l		; 8F 28 A2 FD ; Store accumulator (long) $FDA228.l [Reads: Accumulator]
	and #$FDDA.w		; 29 DA FD ; Logical AND #$FDDA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr ($616C.w,X)		; FC 6C 61 ; Jump to subroutine indirect indexed ($616C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($E16C.w,X)		; FC 6C E1 ; Jump to subroutine indirect indexed ($E16C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $B2.b,X		; D5 B2 ; Compare accumulator $B2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $D2.b		; 45 D2 ; Exclusive OR $D2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($45.b,S),Y		; B3 45 ; Load accumulator (stack relative indirect indexed) ($45.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $B4.b		; E6 B4 ; Increment $B4.b [Reads: Direct Page] [Flags: ZN]
	mvp $8D,$D7		; 44 D7 8D ; Move block positive $8D,$D7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stz $D7.b		; 64 D7 ; Store zero to $D7.b
	stx $FFFF.w		; 8E FF FF ; Store X register to $FFFF.w [Reads: X Index]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8084.w,X)		; FC 84 80 ; Jump to subroutine indirect indexed ($8084.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($48.b),Y		; 31 48 ; AND accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvp $20,$82		; 44 82 20 ; Move block positive $20,$82 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $81.b		; 86 81 ; Store X register to $81.b [Reads: X Index]
	.db $50, $5A		; 50 5A ; Branch if overflow clear to $50, $5A [Flow: branch]
	.db $62, $FD, $46		; 62 FD 46 ; Push effective relative address $62, $FD, $46 [Writes: Stack Pointer]
	sta $2D.b,S		; 83 2D ; Store accumulator (stack relative) $2D.b,S [Reads: Accumulator, Stack Pointer]
	lsr $F9.b,X		; 56 F9 ; Logical shift right $F9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $F956.w,X		; 3D 56 F9 ; AND accumulator with memory $F956.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $F956.w		; 4D 56 F9 ; Exclusive OR $F956.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr ($012D.w,X)		; FC 2D 01 ; Jump to subroutine indirect indexed ($012D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($056D.w,X)		; FC 6D 05 ; Jump to subroutine indirect indexed ($056D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc ($61.b,X)		; E1 61 ; Subtract with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $836E.w,X		; FD 6E 83 ; Subtract with carry $836E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc ($62.b,X)		; E1 62 ; Subtract with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $076D.w,X		; FD 6D 07 ; Subtract with carry $076D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03AD.w,X		; FD AD 03 ; Subtract with carry $03AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor $AB.b,S		; 43 AB ; Exclusive OR accumulator with stack relative $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and $20FAA3.l,X		; 3F A3 FA 20 ; AND accumulator with memory (long,X) $20FAA3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$283D.w		; A0 3D 28 ; Load #$283D.w into Y register [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $D130.w,X		; 3D 30 D1 ; AND accumulator with memory $D130.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $B850.w,X		; 3D 50 B8 ; AND accumulator with memory $B850.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $A058.w,X		; 3D 58 A0 ; AND accumulator with memory $A058.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $E108.w,X		; 3D 08 E1 ; AND accumulator with memory $E108.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$E168.w		; C0 68 E1 ; Compare #$E168.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4A01.w		; C0 01 4A ; Compare #$4A01.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4A61.w		; C0 61 4A ; Compare #$4A61.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$0B0B.w		; C0 0B 0B ; Compare #$0B0B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$0B4A.w		; C0 4A 0B ; Compare #$0B4A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $A5		; 70 A5 ; Branch if overflow set to $70, $A5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($6AE9.w,X)		; FC E9 6A ; Jump to subroutine indirect indexed ($6AE9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $B2A4.w,Y		; 19 A4 B2 ; OR accumulator with memory $B2A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $B2B4.w,Y		; 19 B4 B2 ; OR accumulator with memory $B2B4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $B2C4.w,Y		; 19 C4 B2 ; OR accumulator with memory $B2C4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $B2CC.w,Y		; 19 CC B2 ; OR accumulator with memory $B2CC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $B3.b,S		; A3 B3 ; Load accumulator (stack relative) $B3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda ($B3.b,X)		; A1 B3 ; Load accumulator ($B3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $DD58B4.l,X		; DF B4 58 DD ; Compare accumulator (long,X) $DD58B4.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ldy $1B.b,X		; B4 1B ; Load Y register $1B.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $8D.b		; A5 8D ; Load $8D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$A5.b]		; 67 A5 ; Add with carry (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $A51D.w		; 8E 1D A5 ; Store X register to $A51D.w [Reads: X Index]
	sbc $FFA52D.l,X		; FF 2D A5 FF ; Subtract with carry (long,X) $FFA52D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FFA5.w,X		; 3D A5 FF ; AND accumulator with memory $FFA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $FFA5.w		; 4D A5 FF ; Exclusive OR $FFA5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $FFA5.w,X		; 5D A5 FF ; Exclusive OR accumulator with memory $FFA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FFB5.w,X		; 1D B5 FF ; OR accumulator with memory $FFB5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $FFB5.w		; 2D B5 FF ; Logical AND $FFB5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $FFB5.w,X		; 3D B5 FF ; AND accumulator with memory $FFB5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $FFB5.w		; 4D B5 FF ; Exclusive OR $FFB5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $FFB5.w,X		; 5D B5 FF ; Exclusive OR accumulator with memory $FFB5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FFC5.w,X		; 1D C5 FF ; OR accumulator with memory $FFC5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $FFC5.w		; 2D C5 FF ; Logical AND $FFC5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $FFC5.w		; 4D C5 FF ; Exclusive OR $FFC5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $FFC5.w,X		; 5D C5 FF ; Exclusive OR accumulator with memory $FFC5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FFD5.w,X		; 1D D5 FF ; OR accumulator with memory $FFD5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $FFD5.w,X		; 5D D5 FF ; Exclusive OR accumulator with memory $FFD5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $0049.w,X		; FE 49 00 ; Increment memory $0049.w,X [Reads: X Index] [Flags: ZN]
	sta ($A1.b)		; 92 A1 ; Store accumulator (indirect) ($A1.b) [Reads: Accumulator, Direct Page]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $FF81.w		; 4E 81 FF ; Logical shift right $FF81.w [Flags: ZNC]
	bit #$E202.w		; 89 02 E2 ; Test bits #$E202.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $AA838E.l,X		; FF 8E 83 AA ; Subtract with carry (long,X) $AA838E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$FEC5.w		; A9 C5 FE ; Load #$FEC5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $9CC8.w,Y		; 79 C8 9C ; Add $9CC8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $FE63.w		; AE 63 FE ; Load $FE63.w into X register [Writes: X Index] [Flags: ZN]
	jmp ($AD49.w,X)		; 7C 49 AD ; Jump indirect indexed to ($AD49.w,X) [Reads: X Index] [Flow: jump]
	stz $FF03.w		; 9C 03 FF ; Store zero to $FF03.w
	eor $D4CA.w,Y		; 59 CA D4 ; Exclusive OR accumulator with memory $D4CA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $FF64.w		; AE 64 FF ; Load $FF64.w into X register [Writes: X Index] [Flags: ZN]
	jmp $C4AD4B.l		; 5C 4B AD C4 ; Jump long to $C4AD4B.l [Flow: jump]
	tsb $9C.b		; 04 9C ; Test and set bits $9C.b [Reads: Accumulator] [Flags: Z]
	cmp $22.b,X		; D5 22 ; Compare accumulator $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $D5		; D0 D5 ; Branch if not equal to $D0, $D5 [Flow: branch]
	jsl $FADBDB.l		; 22 DB DB FA ; Jump to subroutine long $FADBDB.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $C4		; 90 C4 ; Branch if carry clear to $90, $C4 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy $7B.b		; C4 7B ; Compare $7B.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $90, $3A		; 90 3A ; Branch if carry clear to $90, $3A [Flow: branch]
	inc $A1CA.w,X		; FE CA A1 ; Increment memory $A1CA.w,X [Reads: X Index] [Flags: ZN]
	inc $21AB.w,X		; FE AB 21 ; Increment memory $21AB.w,X [Reads: X Index] [Flags: ZN]
	lda $F9AA.w,Y		; B9 AA F9 ; Load $F9AA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($AB.b,X)		; C1 AB ; Compare accumulator ($AB.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $C7B9.w,X		; FD B9 C7 ; Subtract with carry $C7B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $918B.w,Y		; F9 8B 91 ; Subtract with carry $918B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($91.b,S),Y		; F3 91 ; Subtract with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($2E.b,X)		; 81 2E ; Store accumulator ($2E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $4BF1.w		; 20 F1 4B ; Jump to subroutine at $4BF1.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $A5		; 70 A5 ; Branch if overflow set to $70, $A5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $93.b		; 14 93 ; Test and reset bits $93.b [Reads: Accumulator] [Flags: Z]
	sbc $9334.w,X		; FD 34 93 ; Subtract with carry $9334.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9354.w,X		; FD 54 93 ; Subtract with carry $9354.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AB34.w,X		; FD 34 AB ; Subtract with carry $AB34.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $5AFC.w,X		; 3C FC 5A ; Test bits $5AFC.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	lda [$FC.b]		; A7 FC ; Load accumulator (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda [$FC.b]		; A7 FC ; Load accumulator (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda [$3C.b]		; A7 3C ; Load accumulator (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	bit $A85C.w,X		; 3C 5C A8 ; Test bits $A85C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $AF14.w,X		; 3C 14 AF ; Test bits $AF14.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $B314.w,X		; FD 14 B3 ; Subtract with carry $B314.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AF34.w,X		; FD 34 AF ; Subtract with carry $AF34.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $B334.w,X		; FD 34 B3 ; Subtract with carry $B334.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AF54.w,X		; FD 54 AF ; Subtract with carry $AF54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $B354.w,X		; FD 54 B3 ; Subtract with carry $B354.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D855.w,X		; FD 55 D8 ; Subtract with carry $D855.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $D838.w,X		; DD 38 D8 ; Compare accumulator $D838.w,X [Reads: X Index] [Flags: ZNC]
	lda ($34.b)		; B2 34 ; Load accumulator (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$B3.b],Y		; D7 B3 ; Compare accumulator (long indexed) [$B3.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	bit $EB.b,X		; 34 EB ; Test bits $EB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldy $34.b,X		; B4 34 ; Load Y register $34.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta $DB48.w		; 8D 48 DB ; Store accumulator to $DB48.w [Reads: Accumulator]
	stx $6AFE.w		; 8E FE 6A ; Store X register to $6AFE.w [Reads: X Index]
	.db $80, $A9		; 80 A9 ; Branch always to $80, $A9 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $82, $99, $BA		; 82 99 BA ; Branch always long to $82, $99, $BA [Flow: branch]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $D981.w		; 6E 81 D9 ; Rotate right $D981.w [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	.db $62, $FF, $6E		; 62 FF 6E ; Push effective relative address $62, $FF, $6E [Writes: Stack Pointer]
	sta $BC.b,S		; 83 BC ; Store accumulator (stack relative) $BC.b,S [Reads: Accumulator, Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rol $CC98.w,X		; 3E 98 CC ; Rotate left $CC98.w,X [Reads: X Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx #$7BCC.w		; E0 CC 7B ; Compare #$7BCC.w with X register [Reads: X Index] [Flags: ZNC]
	lda $BFFABF.l		; AF BF FA BF ; Load long $BFFABF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $BFCFFA.l,X		; BF FA CF BF ; Load long $BFCFFA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $BFFACF.l		; AF CF FA BF ; Load long $BFFACF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $CFCFFA.l		; CF FA CF CF ; Compare accumulator (long) $CFCFFA.l [Reads: Accumulator] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $CFFADF.l		; AF DF FA CF ; Load long $CFFADF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $898BFA.l,X		; DF FA 8B 89 ; Compare accumulator (long,X) $898BFA.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpy #$89CA.w		; C0 CA 89 ; Compare #$89CA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$AB88.w		; C0 88 AB ; Compare #$AB88.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E888.w		; C0 88 E8 ; Compare #$E888.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$ABE8.w		; C0 E8 AB ; Compare #$ABE8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E8E8.w		; C0 E8 E8 ; Compare #$E8E8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($2E.b,X)		; 81 2E ; Store accumulator ($2E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $002A.w,X		; FE 2A 00 ; Increment memory $002A.w,X [Reads: X Index] [Flags: ZN]
	sta $01A2.w,Y		; 99 A2 01 ; Store accumulator to $01A2.w,Y [Reads: Accumulator, Y Index]
	sbc $C9022A.l,X		; FF 2A 02 C9 ; Subtract with carry (long,X) $C9022A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b),Y		; B1 62 ; Load accumulator ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02DA.w,Y		; 99 DA 02 ; Store accumulator to $02DA.w,Y [Reads: Accumulator, Y Index]
	sbc $FE832D.l,X		; FF 2D 83 FE ; Subtract with carry (long,X) $FE832D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $0881.w		; 2D 81 08 ; Logical AND $0881.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($29E9.w,X)		; FC E9 29 ; Jump to subroutine indirect indexed ($29E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $3CB0.w,X		; 3C B0 3C ; Test bits $3CB0.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $B8.b,X		; 35 B8 ; Logical AND $B8.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $EE18.w,X		; DD 18 EE ; Compare accumulator $EE18.w,X [Reads: X Index] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $FDFA9F.l		; 4F 9F FA FD ; Exclusive OR accumulator with memory (long) $FDFA9F.l [Writes: Accumulator] [Flags: ZN]
	eor $ACE8.w,Y		; 59 E8 AC ; Exclusive OR accumulator with memory $ACE8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$AC3E.w		; A0 3E AC ; Load #$AC3E.w into Y register [Writes: Y Index] [Flags: ZN]
	cpx #$BD4B.w		; E0 4B BD ; Compare #$BD4B.w with X register [Reads: X Index] [Flags: ZNC]
	ldx $8BF9.w		; AE F9 8B ; Load $8BF9.w into X register [Writes: X Index] [Flags: ZN]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$E8CA.w		; C0 CA E8 ; Compare #$E8CA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A3D9.w		; C0 D9 A3 ; Compare #$A3D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E0D9.w		; C0 D9 E0 ; Compare #$E0D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($FC.b,X)		; 21 FC ; Logical AND ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda ($FC.b,X)		; A1 FC ; Load accumulator ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($FC.b,X)		; 21 FC ; Logical AND ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit #$FCE1.w		; 89 E1 FC ; Test bits #$FCE1.w with accumulator [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($FC.b,X)		; E1 FC ; Subtract with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($FC.b,X)		; 21 FC ; Logical AND ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$38E1.w		; C9 E1 38 ; Compare #$38E1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($34.b)		; B2 34 ; Load accumulator (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$B3.b],Y		; D7 B3 ; Compare accumulator (long indexed) [$B3.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	bit $EB.b,X		; 34 EB ; Test bits $EB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldy $34.b,X		; B4 34 ; Load Y register $34.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta $DB48.w		; 8D 48 DB ; Store accumulator to $DB48.w [Reads: Accumulator]
	stx $BC58.w		; 8E 58 BC ; Store X register to $BC58.w [Reads: X Index]
	lda ($54.b)		; B2 54 ; Load accumulator (indirect) ($54.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($54.b,S),Y		; B3 54 ; Load accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $BF54B4.l		; CF B4 54 BF ; Compare accumulator (long) $BF54B4.l [Reads: Accumulator] [Flags: ZNC]
	sta $BF68.w		; 8D 68 BF ; Store accumulator to $BF68.w [Reads: Accumulator]
	stx $7AFE.w		; 8E FE 7A ; Store X register to $7AFE.w [Reads: X Index]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $FE61.w,X		; BC 61 FE ; Load Y register $FE61.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $FE61.w		; 1C 61 FE ; Test and reset bits $FE61.w [Reads: Accumulator] [Flags: Z]
	jsr ($FEA1.w,X)		; FC A1 FE ; Jump to subroutine indirect indexed ($FEA1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp ($FFA1.w,X)		; 7C A1 FF ; Jump indirect indexed to ($FFA1.w,X) [Reads: X Index] [Flow: jump]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $612E82.l,X		; FF 82 2E 61 ; Subtract with carry (long,X) $612E82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0800E2.l,X		; FF E2 00 08 ; Subtract with carry (long,X) $0800E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $080D.w		; AE 0D 08 ; Load $080D.w into X register [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl $9258.w		; 0E 58 92 ; Arithmetic shift left $9258.w [Flags: ZNC]
	ora $10E658.l		; 0F 58 E6 10 ; OR accumulator with memory (long) $10E658.l [Writes: Accumulator] [Flags: ZN]
	ora #$61B1.w		; 09 B1 61 ; Logical OR #$61B1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$62B1.w		; 69 B1 62 ; Add #$62B1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $90, $3E		; 90 3E ; Branch if carry clear to $90, $3E [Flow: branch]
	.db $50, $90		; 50 90 ; Branch if overflow clear to $50, $90 [Flow: branch]
	rol $F028.w,X		; 3E 28 F0 ; Rotate left $F028.w,X [Reads: X Index] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $50, $F0		; 50 F0 ; Branch if overflow clear to $50, $F0 [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $B0, $78		; B0 78 ; Branch if carry set to $B0, $78 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $78		; D0 78 ; Branch if not equal to $D0, $78 [Flow: branch]
	.db $70, $B0		; 70 B0 ; Branch if overflow set to $70, $B0 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $D0		; 70 D0 ; Branch if overflow set to $70, $D0 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $91.b,X		; 34 91 ; Test bits $91.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $B2B720.l		; 4F 20 B7 B2 ; Exclusive OR accumulator with memory (long) $B2B720.l [Writes: Accumulator] [Flags: ZN]
	and $B1.b,S		; 23 B1 ; AND accumulator with stack relative $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($23.b,S),Y		; B3 23 ; Load accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $B4.b		; C5 B4 ; Compare $B4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr $8DB7.w		; 20 B7 8D ; Jump to subroutine at $8DB7.w [Writes: Stack Pointer] [Flow: call]
	jmp $188DB7.l		; 5C B7 8D 18 ; Jump long to $188DB7.l [Flow: jump]
	ldy $3D.b,X		; B4 3D ; Load Y register $3D.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $3D.b,X		; B4 3D ; Load Y register $3D.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr ($6039.w,X)		; FC 39 60 ; Jump to subroutine indirect indexed ($6039.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($6059.w,X)		; FC 59 60 ; Jump to subroutine indirect indexed ($6059.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($A0.b,S),Y		; 93 A0 ; Store accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $935CA1.l,X		; DF A1 5C 93 ; Compare accumulator (long,X) $935CA1.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ldx #$F75C.w		; A2 5C F7 ; Load #$F75C.w into X register [Writes: X Index] [Flags: ZN]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $610061.l,X		; FF 61 00 61 ; Subtract with carry (long,X) $610061.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $340CE1.l,X		; FF E1 0C 34 ; Subtract with carry (long,X) $340CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $1804.w,X		; DE 04 18 ; Decrement memory $1804.w,X [Reads: X Index] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($25.b,X)		; 61 25 ; Add with carry ($25.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ror $FC83.w		; 6E 83 FC ; Rotate right $FC83.w [Flags: ZNC]
	ror $FC81.w		; 6E 81 FC ; Rotate right $FC81.w [Flags: ZNC]
	sta $3488.w,Y		; 99 88 34 ; Store accumulator to $3488.w,Y [Reads: Accumulator, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($0E.b),Y		; 51 0E ; Exclusive OR accumulator with memory ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0D4D.w,Y		; 19 4D 0D ; OR accumulator with memory $0D4D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($61.b)		; 52 61 ; Exclusive OR accumulator with memory (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $6E.b		; 24 6E ; Test bits $6E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc ($58.b,X)		; 61 58 ; Add with carry ($58.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $5810.w,X		; 5E 10 58 ; Logical shift right $5810.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($62.b,S),Y		; D3 62 ; Compare accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	.db $62, $62, $FD		; 62 62 FD ; Push effective relative address $62, $62, $FD [Writes: Stack Pointer]
	and $FC8A.w,Y		; 39 8A FC ; AND accumulator with memory $FC8A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $4DC9.w,X		; 9D C9 4D ; Store accumulator to $4DC9.w,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	and $D8CB.w,X		; 3D CB D8 ; AND accumulator with memory $D8CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b)		; 12 0F ; OR accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($64.b),Y		; D1 64 ; Compare accumulator ($64.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	.db $30, $62		; 30 62 ; Branch if minus to $30, $62 [Flow: branch]
	bit #$0E40.w		; 89 40 0E ; Test bits #$0E40.w with accumulator [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$10BC.w		; C0 BC 10 ; Compare #$10BC.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($B2.b),Y		; B1 B2 ; Load accumulator ($B2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $29FF.w,Y		; F9 FF 29 ; Subtract with carry $29FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $02.b,S		; C3 02 ; Compare accumulator (stack relative) $02.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	inc $016C.w,X		; FE 6C 01 ; Increment memory $016C.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc ($48.b,X)		; 61 48 ; Add with carry ($48.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $22.b,X		; 95 22 ; Store accumulator to $22.b,X [Reads: Accumulator, X Index]
	bit $95.b		; 24 95 ; Test bits $95.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $20C5FE.l		; 22 FE C5 20 ; Jump to subroutine long $20C5FE.l [Writes: Stack Pointer] [Flow: call]
	sbc $B82025.l,X		; FF 25 20 B8 ; Subtract with carry (long,X) $B82025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $B875.w		; 1C 75 B8 ; Test and reset bits $B875.w [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $D8.b,X		; 75 D8 ; Add $D8.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $75		; 30 75 ; Branch if minus to $30, $75 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $5C		; 10 5C ; Branch if plus to $10, $5C [Flow: branch]
	lda ($10.b,X)		; A1 10 ; Load accumulator ($10.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($14A0.w,X)		; 7C A0 14 ; Jump indirect indexed to ($14A0.w,X) [Reads: X Index] [Flow: jump]
	jmp ($88C0.w)		; 6C C0 88 ; Jump indirect to ($88C0.w) [Flow: jump]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($A0.b),Y		; 91 A0 ; Store accumulator ($A0.b),Y [Reads: Accumulator, Direct Page, Y Index]
	cpy $CD.b		; C4 CD ; Compare $CD.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	lda $DC.b,S		; A3 DC ; Load accumulator (stack relative) $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($A2.b,S),Y		; 13 A2 ; OR accumulator (stack relative indirect indexed) ($A2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $75.b,X		; D5 75 ; Compare accumulator $75.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $D9.b,S		; A3 D9 ; Load accumulator (stack relative) $D9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor $24.b		; 45 24 ; Exclusive OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($64.b,X)		; 01 64 ; Logical OR ($64.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $0F.b		; 24 0F ; Test bits $0F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $62, $89, $34		; 62 89 34 ; Push effective relative address $62, $89, $34 [Writes: Stack Pointer]
	ora $3B88.w		; 0D 88 3B ; Logical OR $3B88.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($19.b,X)		; 61 19 ; Add with carry ($19.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $A0.b		; 26 A0 ; Rotate left $A0.b [Reads: Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $C005.w,Y		; 59 05 C0 ; Exclusive OR accumulator with memory $C005.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $DD68C0.l,X		; 9F C0 68 DD ; Store accumulator (long,X) $DD68C0.l,X [Reads: Accumulator, X Index]
	cpy #$1189.w		; C0 89 11 ; Compare #$1189.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$5589.w		; A0 89 55 ; Load #$5589.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($FC.b,X)		; A1 FC ; Load accumulator ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$78B2.w		; E9 B2 78 ; Subtract #$78B2.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jmp ($A35C.w)		; 6C 5C A3 ; Jump indirect to ($A35C.w) [Flow: jump]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc $C0.b,S		; 63 C0 ; Add with carry (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $2E		; 80 2E ; Branch always to $80, $2E [Flow: branch]
	sta ($10.b),Y		; 91 10 ; Store accumulator ($10.b),Y [Reads: Accumulator, Direct Page, Y Index]
	.db $62, $00, $FF		; 62 00 FF ; Push effective relative address $62, $00, $FF [Writes: Stack Pointer]
	sbc $FC10F1.l,X		; FF F1 10 FC ; Subtract with carry (long,X) $FC10F1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $1A01.w		; 2C 01 1A ; Test bits $1A01.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cpy #$FD02.w		; C0 02 FD ; Compare #$FD02.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp ($5805.w)		; 6C 05 58 ; Jump indirect to ($5805.w) [Flow: jump]
	cmp ($61.b,S),Y		; D3 61 ; Compare accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc $816E.w,X		; FD 6E 81 ; Subtract with carry $816E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $836E.w,X		; FE 6E 83 ; Increment memory $836E.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($62.b,S),Y		; D3 62 ; Compare accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	inc $076C.w,X		; FE 6C 07 ; Increment memory $076C.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $02.b,S		; C3 02 ; Compare accumulator (stack relative) $02.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $C3030C.l,X		; FF 0C 03 C3 ; Subtract with carry (long,X) $C3030C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $62.b,S		; 03 62 ; OR accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$79		; C2 79
	.db $62, $FE, $49		; 62 FE 49 ; Push effective relative address $62, $FE, $49 [Writes: Stack Pointer]
	tsb $90.b		; 04 90 ; Test and set bits $90.b [Reads: Accumulator] [Flags: Z]
	cop $61.b		; 02 61 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0441.w,X		; FE 41 04 ; Increment memory $0441.w,X [Reads: X Index] [Flags: ZN]
	inc $8546.w,X		; FE 46 85 ; Increment memory $8546.w,X [Reads: X Index] [Flags: ZN]
	.db $90, $7B		; 90 7B ; Branch if carry clear to $90, $7B [Flow: branch]
	adc ($9F.b,X)		; 61 9F ; Add with carry ($9F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $63.b,S		; 03 63 ; OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $6383.w		; 9C 83 63 ; Store zero to $6383.w
	jsl $71039D.l		; 22 9D 03 71 ; Jump to subroutine long $71039D.l [Writes: Stack Pointer] [Flow: call]
	sta $9F8D69.l,X		; 9F 69 8D 9F ; Store accumulator (long,X) $9F8D69.l,X [Reads: Accumulator, X Index]
	adc #$C48C.w		; 69 8C C4 ; Add #$C48C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $691F9B.l		; 22 9B 1F 69 ; Jump to subroutine long $691F9B.l [Writes: Stack Pointer] [Flow: call]
	jsr ($C859.w,X)		; FC 59 C8 ; Jump to subroutine indirect indexed ($C859.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	trb $AC.b		; 14 AC ; Test and reset bits $AC.b [Reads: Accumulator] [Flags: Z]
	adc $22.b,S		; 63 22 ; Add with carry (stack relative) $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $04.b,X		; B5 04 ; Load $04.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($495B.w,X)		; FC 5B 49 ; Jump to subroutine indirect indexed ($495B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $90, $9D		; 90 9D ; Branch if carry clear to $90, $9D [Flow: branch]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $91CC.w,Y		; 79 CC 91 ; Add $91CC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $04.b,X		; B4 04 ; Load Y register $04.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda [$03.b],Y		; B7 03 ; Load accumulator (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $B5.b		; [PATTERN: Memory clearing operation] 64 B5 ; Store zero to $B5.b
	.db $82, $64, $FE		; 82 64 FE ; Branch always long to $82, $64, $FE [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stz $C4.b		; 64 C4 ; Store zero to $C4.b
	jsl $695C98.l		; 22 98 5C 69 ; Jump to subroutine long $695C98.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor $C5.b,S		; 43 C5 ; Exclusive OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $82, $C5, $91		; 82 C5 91 ; Branch always long to $82, $C5, $91 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $A8.b		; C5 A8 ; Compare $A8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $23.b		; C5 23 ; Compare $23.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $60.b		; C5 60 ; Compare $60.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $7D.b		; C5 7D ; Compare $7D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	sbc $2E50.w,Y		; F9 50 2E ; Subtract with carry $2E50.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $4A50.w		; 0D 50 4A ; Logical OR $4A50.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $3151.w		; 0E 51 31 ; Arithmetic shift left $3151.w [Flags: ZNC]
	adc ($71.b,X)		; 61 71 ; Add with carry ($71.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $88		; 30 88 ; Branch if minus to $30, $88 [Flow: branch]
	bit #$8830.w		; 89 30 88 ; Test bits #$8830.w with accumulator [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $13		; 50 13 ; Branch if overflow clear to $50, $13 [Flow: branch]
	ldy #$5F50.w		; A0 50 5F ; Load #$5F50.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($D2.b,X)		; A1 D2 ; Load accumulator ($D2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($52.b)		; D2 52 ; Compare accumulator (indirect) ($52.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy #$93D2.w		; C0 D2 93 ; Compare #$93D2.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2AB.w		; C0 AB D2 ; Compare #$D2AB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2E8.w		; C0 E8 D2 ; Compare #$D2E8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D20B.w		; C0 0B D2 ; Compare #$D20B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D248.w		; C0 48 D2 ; Compare #$D248.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora [$9E.b],Y		; 17 9E ; OR accumulator with memory (long indexed) [$9E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $9E55.w,Y		; D9 55 9E ; Compare accumulator $9E55.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $9E93.w,Y		; D9 93 9E ; Compare accumulator $9E93.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $039E.w,Y		; D9 9E 03 ; Compare accumulator $039E.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $439E.w,Y		; D9 9E 43 ; Compare accumulator $439E.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $819E.w,Y		; D9 9E 81 ; Compare accumulator $819E.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $02A1.w,Y		; D9 A1 02 ; Compare accumulator $02A1.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	inc $3773.w,X		; FE 73 37 ; Increment memory $3773.w,X [Reads: X Index] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b),Y		; 71 12 ; Add with carry ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	sbc $08E0FF.l,X		; FF FF E0 08 ; Subtract with carry (long,X) $08E0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0062.w,X)		; FC 62 00 ; Jump to subroutine indirect indexed ($0062.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $6133.w,Y		; 19 33 61 ; OR accumulator with memory $6133.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($8166.w,X)		; FC 66 81 ; Jump to subroutine indirect indexed ($8166.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and #$0122.w		; 29 22 01 ; Logical AND #$0122.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0262.w,X		; FD 62 02 ; Subtract with carry $0262.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $6233.w,Y		; 59 33 62 ; Exclusive OR accumulator with memory $6233.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $8366.w,X		; FD 66 83 ; Subtract with carry $8366.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0089.w,X)		; FC 89 00 ; Jump to subroutine indirect indexed ($0089.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FC61A1.l		; 22 A1 61 FC ; Jump to subroutine long $FC61A1.l [Writes: Stack Pointer] [Flow: call]
	stx $9081.w		; 8E 81 90 ; Store X register to $9081.w [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl $E6D0.w		; 0E D0 E6 ; Arithmetic shift left $E6D0.w [Flags: ZNC]
	.db $10, $FE		; 10 FE ; Branch if plus to $10, $FE [Flow: branch]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($23.b,S),Y		; 93 23 ; Store accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($92.b,X)		; 61 92 ; Add with carry ($92.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($02.b,X)		; 81 02 ; Store accumulator ($02.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $62, $E2, $98		; 62 E2 98 ; Push effective relative address $62, $E2, $98 [Writes: Stack Pointer]
	.db $62, $FE, $71		; 62 FE 71 ; Push effective relative address $62, $FE, $71 [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $031C.w		; AD 1C 03 ; Load $031C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $9DCA51.l,X		; FF 51 CA 9D ; Subtract with carry (long,X) $9DCA51.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FE63.w		; 2D 63 FE ; Logical AND $FE63.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $89.b,X		; 75 89 ; Add $89.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $0458.w		; AD 58 04 ; Load $0458.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $2D.b,X		; D5 2D ; Compare accumulator $2D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	eor $8B.b,X		; 55 8B ; Exclusive OR accumulator with memory $8B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $0878.w,X		; FE 78 08 ; Increment memory $0878.w,X [Reads: X Index] [Flags: ZN]
	lda $0380.w		; AD 80 03 ; Load $0380.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $9C0A58.l,X		; FF 58 0A 9C ; Subtract with carry (long,X) $9C0A58.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($63.b),Y		; 91 63 ; Store accumulator ($63.b),Y [Reads: Accumulator, Direct Page, Y Index]
	inc $097A.w,X		; FE 7A 09 ; Increment memory $097A.w,X [Reads: X Index] [Flags: ZN]
	lda $04A0.w		; AD A0 04 ; Load $04A0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $D40B5A.l,X		; FF 5A 0B D4 ; Subtract with carry (long,X) $D40B5A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($64.b),Y		; 91 64 ; Store accumulator ($64.b),Y [Reads: Accumulator, Direct Page, Y Index]
	bit $DC2E.w		; 2C 2E DC ; Test bits $DC2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $F93E.w,X		; 3D 3E F9 ; AND accumulator with memory $F93E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($A9.b)		; 32 A9 ; AND accumulator with memory (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $A93A.w,Y		; F9 3A A9 ; Subtract with carry $A93A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A942.w,Y		; F9 42 A9 ; Subtract with carry $A942.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A94A.w,Y		; F9 4A A9 ; Subtract with carry $A94A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9E57.w,Y		; F9 57 9E ; Subtract with carry $9E57.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$DC54.w		; 69 54 DC ; Add #$DC54.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$C838.w		; 69 38 C8 ; Add #$C838.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit #$9C58.w		; 89 58 9C ; Test bits #$9C58.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$A858.w		; 89 58 A8 ; Test bits #$A858.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B458.w		; 89 58 B4 ; Test bits #$B458.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$C058.w		; 89 58 C0 ; Test bits #$C058.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$CC58.w		; 89 58 CC ; Test bits #$CC58.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$D858.w		; 89 58 D8 ; Test bits #$D858.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$E458.w		; 89 58 E4 ; Test bits #$E458.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$2EAA.w		; 89 AA 2E ; Test bits #$2EAA.w with accumulator [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and #$AA3F.w		; 29 3F AA ; Logical AND #$AA3F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $AA79.w		; 2E 79 AA ; Rotate left $AA79.w [Flags: ZNC]
	eor $D640.w,Y		; 59 40 D6 ; Exclusive OR accumulator with memory $D640.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $AA7A.w		; 2E 7A AA ; Rotate left $AA7A.w [Flags: ZNC]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $A83F.w		; 8D 3F A8 ; Store accumulator to $A83F.w [Reads: Accumulator]
	sta ($79.b,S),Y		; 93 79 ; Store accumulator (stack relative indirect indexed) ($79.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda ($40.b,X)		; A1 40 ; Load accumulator ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pei ($93.b)		; D4 93 ; Push effective indirect address ($93.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ply		; [PATTERN: Memory clearing operation] 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $F95B.w,Y		; B9 5B F9 ; Load $F95B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $F9A3.w,Y		; B9 A3 F9 ; Load $F9A3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $2268.w		; 9C 68 22 ; Store zero to $2268.w
	stz $696A.w		; 9C 6A 69 ; Store zero to $696A.w
	stz $227C.w		; 9C 7C 22 ; Store zero to $227C.w
	pei ($7C.b)		; D4 7C ; Push effective indirect address ($7C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $22B09C.l		; 22 9C B0 22 ; Jump to subroutine long $22B09C.l [Writes: Stack Pointer] [Flow: call]
	pei ($B0.b)		; D4 B0 ; Push effective indirect address ($B0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $FA73B3.l		; 22 B3 73 FA ; Jump to subroutine long $FA73B3.l [Writes: Stack Pointer] [Flow: call]
	cmp $DD68.w		; CD 68 DD ; Compare $DD68.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy #$08DD.w		; C0 DD 08 ; Compare #$08DD.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	eor $C010.w,Y		; 59 10 C0 ; Exclusive OR accumulator with memory $C010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Accumulator, Direct Page, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $DF		; 90 DF ; Branch if carry clear to $90, $DF [Flow: branch]
	lda ($D4.b,X)		; A1 D4 ; Load accumulator ($D4.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$A3.b],Y		; F7 A3 ; Subtract with carry (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $61.b,X		; 36 61 ; Rotate left $61.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $0E81.w		; 0E 81 0E ; Arithmetic shift left $0E81.w [Flags: ZNC]
	sbc $0051FF.l,X		; FF FF 51 00 ; Subtract with carry (long,X) $0051FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($812C.w,X)		; FC 2C 81 ; Jump to subroutine indirect indexed ($812C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$FC02.w		; C9 02 FC ; Compare #$FC02.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sty $2085.w		; 8C 85 20 ; Store Y register to $2085.w [Reads: Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $FD81.w		; 8E 81 FD ; Store X register to $FD81.w [Reads: X Index]
	ldy $6083.w		; AC 83 60 ; Load $6083.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$FD02.w		; C9 02 FD ; Compare #$FD02.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jmp $5087.w		; 4C 87 50 ; Jump to $5087.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $4E		; 62 FD 4E ; Push effective relative address $62, $FD, $4E [Writes: Stack Pointer]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	eor $25C8.w,Y		; 59 C8 25 ; Exclusive OR accumulator with memory $25C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $FD03.w,X		; 9E 03 FD ; Store zero to $FD03.w,X [Reads: X Index]
	adc $14CA.w,Y		; 79 CA 14 ; Add $14CA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FC63.w		; AD 63 FC ; Load $FC63.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cmp #$BC24.w		; C9 24 BC ; Compare #$BC24.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $CD2C.w		; CD 2C CD ; Compare $CD2C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $3CC9.w,X		; BD C9 3C ; Load $3CC9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$FD04]		; DC 04 FD ; Jump long indirect [$FD04] [Flow: jump]
	ora $44CB.w,X		; 1D CB 44 ; OR accumulator with memory $44CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $FD64.w		; CD 64 FD ; Compare $FD64.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $04BC54.l		; CF 54 BC 04 ; Compare accumulator (long) $04BC54.l [Reads: Accumulator] [Flags: ZNC]
	sbc $CB7B.w,X		; FD 7B CB ; Subtract with carry $CB7B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $FE64AD.l		; 5C AD 64 FE ; Jump long to $FE64AD.l [Flow: jump]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($01.b)		; 32 01 ; AND accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $A90223.l,X		; FF 23 02 A9 ; Subtract with carry (long,X) $A90223.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($61.b,X)		; 41 61 ; Exclusive OR accumulator with memory ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: ZN]
	cmp #$6241.w		; C9 41 62 ; Compare #$6241.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $FE8326.l,X		; FF 26 83 FE ; Subtract with carry (long,X) $FE8326.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$AA00.w		; A9 00 AA ; Load #$AA00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $81AE.w,X		; FE AE 81 ; Increment memory $81AE.w,X [Reads: X Index] [Flags: ZN]
	sbc $CA0229.l,X		; FF 29 02 CA ; Subtract with carry (long,X) $CA0229.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $BB832E.l,X		; FF 2E 83 BB ; Subtract with carry (long,X) $BB832E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $B3.b,S		; C3 B3 ; Compare accumulator (stack relative) $B3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $BB.b,S		; C3 BB ; Compare accumulator (stack relative) $BB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $CB.b,S		; C3 CB ; Compare accumulator (stack relative) $CB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora ($D9.b,X)		; 01 D9 ; Logical OR ($D9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$D961.w		; C0 61 D9 ; Compare #$D961.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$118B.w		; C0 8B 11 ; Compare #$118B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$11CA.w		; C0 CA 11 ; Compare #$11CA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$0088.w		; C0 88 00 ; Compare #$0088.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$6000.w		; A0 00 60 ; Load #$6000.w into Y register [Writes: Y Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$6000.w		; E0 00 60 ; Compare #$6000.w with X register [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $AB33FF.l,X		; FF FF 33 AB ; Subtract with carry (long,X) $AB33FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and ($B3.b,S),Y		; 33 B3 ; AND accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and ($BB.b,S),Y		; 33 BB ; AND accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor $B3.b,S		; 43 B3 ; Exclusive OR accumulator with stack relative $B3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor ($B3.b,S),Y		; 53 B3 ; XOR accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $30, $EE		; 30 EE ; Branch if minus to $30, $EE [Flow: branch]
	adc ($40.b,X)		; 61 40 ; Add with carry ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF62.w		; EE 62 FF ; Increment $FF62.w [Flags: ZN]
	sbc $C69E17.l,X		; FF 17 9E C6 ; Subtract with carry (long,X) $C69E17.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $C69E.w		; 4D 9E C6 ; Exclusive OR $C69E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $C6CD.w		; 2D CD C6 ; Logical AND $C6CD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $C6,$CD		; 44 CD C6 ; Move block positive $C6,$CD [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $2E		; 80 2E ; Branch always to $80, $2E [Flow: branch]
	sta ($04.b),Y		; 91 04 ; Store accumulator ($04.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($004A.w,X)		; FC 4A 00 ; Jump to subroutine indirect indexed ($004A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FD01A0.l		; 22 A0 01 FD ; Jump to subroutine long $FD01A0.l [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $11.b		; 02 11 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($61.b,S),Y		; B3 61 ; Load accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($814E.w,X)		; FC 4E 81 ; Jump to subroutine indirect indexed ($814E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc ($B3.b,X)		; 61 B3 ; Add with carry ($B3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $FD, $8E		; 62 FD 8E ; Push effective relative address $62, $FD, $8E [Writes: Stack Pointer]
	sta $3C.b,S		; 83 3C ; Store accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer]
	ldy #$103E.w		; A0 3E 10 ; Load #$103E.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $6878.w		; CC 78 68 ; Compare $6878.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $207B.w		; CC 7B 20 ; Compare $207B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $503B.w		; EC 3B 50 ; Compare $503B.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $203B.w		; EC 3B 20 ; Compare $203B.w with X register [Reads: X Index] [Flags: ZNC]
	lda [$FD.b]		; A7 FD ; Load accumulator (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($A1EA.w,X)		; FC EA A1 ; Jump to subroutine indirect indexed ($A1EA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $A10A.w,X		; FD 0A A1 ; Subtract with carry $A10A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $4F.b		; A5 4F ; Load $4F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $B5		; 50 B5 ; Branch if overflow clear to $50, $B5 [Flow: branch]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	lda ($4D.b)		; B2 4D ; Load accumulator (indirect) ($4D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $71.b,X		; B4 71 ; Load Y register $71.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	jmp $4CD5.w		; 4C D5 4C ; Jump to $4CD5.w [Flow: jump]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ldx $FD.b,Y		; B6 FD ; Load X register $FD.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	jsl $22B3B4.l		; 22 B4 B3 22 ; Jump to subroutine long $22B3B4.l [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy $20.b,X		; B4 20 ; Load Y register $20.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta $BB48.w		; 8D 48 BB ; Store accumulator to $BB48.w [Reads: Accumulator]
	stx $ABFF.w		; 8E FF AB ; Store X register to $ABFF.w [Reads: X Index]
	sta $B1.b,S		; 83 B1 ; Store accumulator (stack relative) $B1.b,S [Reads: Accumulator, Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta [$A0.b]		; 87 A0 ; Store accumulator (long) [$A0.b] [Reads: Accumulator, Direct Page]
	cmp #$FE62.w		; C9 62 FE ; Compare #$FE62.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta $B106.w		; 8D 06 B1 ; Store accumulator to $B106.w [Reads: Accumulator]
	cmp ($01.b,S),Y		; D3 01 ; Compare accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc $8802AD.l,X		; FF AD 02 88 ; Subtract with carry (long,X) $8802AD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $4BC0.w,X		; BC C0 4B ; Load Y register $4BC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy $3ED0.w,X		; BC D0 3E ; Load Y register $3ED0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy #$3BEC.w		; A0 EC 3B ; Load #$3BEC.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FE6A4D.l,X		; [PATTERN: Memory clearing operation] FF 4D 6A FE ; Subtract with carry (long,X) $FE6A4D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$FEE8.w		; A9 E8 FE ; Load #$FEE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc #$C969.w		; E9 69 C9 ; Subtract #$C969.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	stz $D8F9.w,X		; 9E F9 D8 ; Store zero to $D8F9.w,X [Reads: X Index]
	stz $D13C.w		; 9C 3C D1 ; Store zero to $D13C.w
	ldy $DD.b		; A4 DD ; Load $DD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	dec $A6.b,X		; D6 A6 ; Decrement memory $A6.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $C9B2.w,X		; FD B2 C9 ; Subtract with carry $C9B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($90.b,S),Y		; 13 90 ; OR accumulator (stack relative indirect indexed) ($90.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$9051.w		; C0 51 90 ; Compare #$9051.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9173.w		; C0 73 91 ; Compare #$9173.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E5FF.l,X		; FF FF E5 00 ; Subtract with carry (long,X) $00E5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $DC21.w		; 20 21 DC ; Jump to subroutine at $DC21.w [Writes: Stack Pointer] [Flow: call]
	and ($2A.b),Y		; 31 2A ; AND accumulator with memory ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3150.w,Y		; F9 50 31 ; Subtract with carry $3150.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $3950.w,X		; 5E 50 39 ; Logical shift right $3950.w,X [Reads: X Index] [Flags: ZNC]
	bit #$5150.w		; 89 50 51 ; Test bits #$5150.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $3058.w,X		; 5E 58 30 ; Logical shift right $3058.w,X [Reads: X Index] [Flags: ZNC]
	lsr $4050.w,X		; 5E 50 40 ; Logical shift right $4050.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5058.w,X		; 5E 58 50 ; Logical shift right $5058.w,X [Reads: X Index] [Flags: ZNC]
	lsr $A719.w,X		; 5E 19 A7 ; Logical shift right $A719.w,X [Reads: X Index] [Flags: ZNC]
	rep #$49		; C2 49 ; Reset processor status bits #$49 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lda [$C2.b]		; A7 C2 ; Load accumulator (long) [$C2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $27A1.w,Y		; 19 A1 27 ; OR accumulator with memory $27A1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda [$6A.b]		; A7 6A ; Load accumulator (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $28E5.w,Y		; 19 E5 28 ; OR accumulator with memory $28E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$A7.b],Y		; 37 A7 ; AND accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor #$27A1.w		; 49 A1 27 ; Exclusive OR #$27A1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda [$6A.b]		; A7 6A ; Load accumulator (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$28E5.w		; 49 E5 28 ; Exclusive OR #$28E5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$A7.b]		; 67 A7 ; Add with carry (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $C827.w,Y		; 99 27 C8 ; Store accumulator to $C827.w,Y [Reads: Accumulator, Y Index]
	cmp #$C827.w		; C9 27 C8 ; Compare #$C827.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $3F.b,S		; 23 3F ; AND accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and ($3F.b,X)		; 21 3F ; Logical AND ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and [$79.b]		; 27 79 ; AND accumulator with memory (long) [$79.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $4065.w,Y		; 99 65 40 ; Store accumulator to $4065.w,Y [Reads: Accumulator, Y Index]
	ldx $3A.b,Y		; B6 3A ; Load X register $3A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ldy $37.b,X		; B4 37 ; Load Y register $37.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	eor ($CA.b,X)		; 41 CA ; Exclusive OR accumulator with memory ($CA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $65C9.w,Y		; 79 C9 65 ; Add $65C9.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc [$27.b]		; E7 27 ; Subtract with carry (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	inc $A4E3.w,X		; FE E3 A4 ; Increment memory $A4E3.w,X [Reads: X Index] [Flags: ZN]
	sta $C2A7.w,Y		; 99 A7 C2 ; Store accumulator to $C2A7.w,Y [Reads: Accumulator, Y Index]
	sta $27A1.w,Y		; 99 A1 27 ; Store accumulator to $27A1.w,Y [Reads: Accumulator, Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda [$6A.b]		; A7 6A ; Load accumulator (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $28E5.w,Y		; 99 E5 28 ; Store accumulator to $28E5.w,Y [Reads: Accumulator, Y Index]
	lda [$A7.b],Y		; B7 A7 ; Load accumulator (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C2A7.w		; C9 A7 C2 ; Compare #$C2A7.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$27A1.w		; C9 A1 27 ; Compare #$27A1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	lda [$6A.b]		; A7 6A ; Load accumulator (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$28E5.w		; C9 E5 28 ; Compare #$28E5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc [$A7.b]		; E7 A7 ; Subtract with carry (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $2E		; 80 2E ; Branch always to $80, $2E [Flow: branch]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0800E3.l,X		; FF E3 00 08 ; Subtract with carry (long,X) $0800E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $7076.w,X		; BC 76 70 ; Load Y register $7076.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $7B.b		; A5 7B ; Load $7B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($77BC.w)		; 6C BC 77 ; Jump indirect to ($77BC.w) [Flow: jump]
	jsr $3BEC.w		; 20 EC 3B ; Jump to subroutine at $3BEC.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $EC		; 50 EC ; Branch if overflow clear to $50, $EC [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($A159.w,X)		; FC 59 A1 ; Jump to subroutine indirect indexed ($A159.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($215A.w,X)		; FC 5A 21 ; Jump to subroutine indirect indexed ($215A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A1B9.w,X)		; FC B9 A1 ; Jump to subroutine indirect indexed ($A1B9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A1D9.w,X)		; FC D9 A1 ; Jump to subroutine indirect indexed ($A1D9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($21CA.w,X)		; FC CA 21 ; Jump to subroutine indirect indexed ($21CA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($6979.w,X)		; FC 79 69 ; Jump to subroutine indirect indexed ($6979.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $FDA7.w		; 4D A7 FD ; Exclusive OR $FDA7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $B8.b,S		; 23 B8 ; AND accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $1B.b		; C5 1B ; Compare $1B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda [$34.b],Y		; B7 34 ; Load accumulator (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldy $34.b,X		; B4 34 ; Load Y register $34.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	and $C8.b,S		; 23 C8 ; AND accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $17.b,X		; 34 17 ; Test bits $17.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	sbc $BA63.w,X		; FD 63 BA ; Subtract with carry $BA63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CDFC.w,X		; FD FC CD ; Subtract with carry $CDFC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$2DFD.w		; A0 FD 2D ; Load #$2DFD.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$D818.w		; A0 18 D8 ; Load #$D818.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $FFFF.w,X		; DD FF FF ; Compare accumulator $FFFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E2FF.l,X		; FF FF E2 00 ; Subtract with carry (long,X) $00E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8029.w,X)		; FC 29 80 ; Jump to subroutine indirect indexed ($8029.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$1582.w		; A9 82 15 ; Load #$1582.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and ($5C.b,S),Y		; 33 5C ; AND accumulator (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and ($16.b,S),Y		; 33 16 ; AND accumulator (stack relative indirect indexed) ($16.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FD4C.w		; C9 4C FD ; Compare #$FD4C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta $0B67.w		; 8D 67 0B ; Store accumulator to $0B67.w [Reads: Accumulator]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc $163B.w		; EE 3B 16 ; Increment $163B.w [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $FE.b		; A4 FE ; Load $FE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $FEA4.w		; 6D A4 FE ; Add $FEA4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda ($2A.b)		; B2 2A ; Load accumulator (indirect) ($2A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $B3.b,X		; D5 B3 ; Compare accumulator $B3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $DA54.w		; 8D 54 DA ; Store accumulator to $DA54.w [Reads: Accumulator]
	stx $FFFF.w		; 8E FF FF ; Store X register to $FFFF.w [Reads: X Index]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0CE1FF.l,X		; FF FF E1 0C ; Subtract with carry (long,X) $0CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($4044.w,X)		; FC 44 40 ; Jump to subroutine indirect indexed ($4044.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FD0144.l		; 22 44 01 FD ; Jump to subroutine long $FD0144.l [Writes: Stack Pointer] [Flow: call]
	sty $42.b		; 84 42 ; Store Y register to $42.b [Reads: Y Index]
	ora ($56.b,S),Y		; 13 56 ; OR accumulator (stack relative indirect indexed) ($56.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $2001.w		; 4C 01 20 ; Jump to $2001.w [Flow: jump]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	jsr ($05AC.w,X)		; FC AC 05 ; Jump to subroutine indirect indexed ($05AC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp ($61.b,S),Y		; D3 61 ; Compare accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	jsr ($81AE.w,X)		; FC AE 81 ; Jump to subroutine indirect indexed ($81AE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($62.b,S),Y		; D3 62 ; Compare accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc $832E.w,X		; FD 2E 83 ; Subtract with carry $832E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	adc $56.b,S		; 63 56 ; Add with carry (stack relative) $56.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $FD, $8C		; 62 FD 8C ; Push effective relative address $62, $FD, $8C [Writes: Stack Pointer]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $2C07.w		; 2C 07 2C ; Test bits $2C07.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	jsr ($A3A7.w,X)		; FC A7 A3 ; Jump to subroutine indirect indexed ($A3A7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $A327.w,X		; FD 27 A3 ; Subtract with carry $A327.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($23A9.w,X)		; FC A9 23 ; Jump to subroutine indirect indexed ($23A9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $2329.w,X		; FD 29 23 ; Subtract with carry $2329.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($A3AA.w,X)		; FC AA A3 ; Jump to subroutine indirect indexed ($A3AA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $A32A.w,X		; FD 2A A3 ; Subtract with carry $A32A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $012D.w,X		; FE 2D 01 ; Increment memory $012D.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	inc $058D.w,X		; FE 8D 05 ; Increment memory $058D.w,X [Reads: X Index] [Flags: ZN]
	ldy #$61E1.w		; A0 E1 61 ; Load #$61E1.w into Y register [Writes: Y Index] [Flags: ZN]
	inc $818E.w,X		; FE 8E 81 ; Increment memory $818E.w,X [Reads: X Index] [Flags: ZN]
	sbc $D0834E.l,X		; FF 4E 83 D0 ; Subtract with carry (long,X) $D0834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($62.b,X)		; E1 62 ; Subtract with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0074D.l,X		; FF 4D 07 E0 ; Subtract with carry (long,X) $E0074D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $A003AD.l,X		; FF AD 03 A0 ; Subtract with carry (long,X) $A003AD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$33.b],Y		; B7 33 ; Load accumulator (long indexed) [$33.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9F34B2.l,X		; 9F B2 34 9F ; Store accumulator (long,X) $9F34B2.l,X [Reads: Accumulator, X Index]
	dec $34.b		; C6 34 ; Decrement $34.b [Reads: Direct Page] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $3D.b,X		; B4 3D ; Load Y register $3D.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cpx #$3DB4.w		; E0 B4 3D ; Compare #$3DB4.w with X register [Reads: X Index] [Flags: ZNC]
	sta ($E1.b,X)		; 81 E1 ; Store accumulator ($E1.b,X) [Reads: Accumulator, X Index, Direct Page]
	cpy #$E1E1.w		; C0 E1 E1 ; Compare #$E1E1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$0008.w		; C0 08 00 ; Compare #$0008.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$C0D2.w		; 09 D2 C0 ; Logical OR #$C0D2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C0D2.w,Y		; 59 D2 C0 ; Exclusive OR accumulator with memory $C0D2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b,S),Y		; 13 07 ; OR accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$0751.w		; C0 51 07 ; Compare #$0751.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $04E5FF.l,X		; FF FF E5 04 ; Subtract with carry (long,X) $04E5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $811F0E.l,X		; 5F 0E 1F 81 ; Exclusive OR accumulator with memory (long,X) $811F0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $0881.w,X		; 7E 81 08 ; Rotate right $0881.w,X [Reads: X Index] [Flags: ZNC]
	lsr $FD61.w,X		; 5E 61 FD ; Logical shift right $FD61.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5483.w,X		; 5E 83 54 ; Logical shift right $5483.w,X [Reads: X Index] [Flags: ZNC]
	adc $815710.l,X		; 7F 10 57 81 ; Add long $815710.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $68, $5E		; 62 68 5E ; Push effective relative address $62, $68, $5E [Writes: Stack Pointer]
	.db $62, $FC, $51		; 62 FC 51 ; Push effective relative address $62, $FC, $51 [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $5F.b		; 14 5F ; Test and reset bits $5F.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $2F151C.l,X		; 7F 1C 15 2F ; Add long $2F151C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $5D.b,S		; 63 5D ; Add with carry (stack relative) $5D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and $802A64.l		; 2F 64 2A 80 ; AND accumulator with memory (long) $802A64.l [Writes: Accumulator] [Flags: ZN]
	adc $4A.b,S		; 63 4A ; Add with carry (stack relative) $4A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $64		; 80 64 ; Branch always to $80, $64 [Flow: branch]
	jsr ($89AC.w,X)		; FC AC 89 ; Jump to subroutine indirect indexed ($89AC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp #$FD04.w		; C9 04 FD ; Compare #$FD04.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $288B.w		; 2C 8B 28 ; Test bits $288B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $22D848.l		; 22 48 D8 22 ; Jump to subroutine long $22D848.l [Writes: Stack Pointer] [Flow: call]
	and $F9CB.w,Y		; 39 CB F9 ; AND accumulator with memory $F9CB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $51		; 30 51 ; Branch if minus to $30, $51 [Flow: branch]
	and $282C.w,X		; 3D 2C 28 ; AND accumulator with memory $282C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$2E3D]		; DC 3D 2E ; Jump long indirect [$2E3D] [Flow: jump]
	sbc $7008.w,Y		; F9 08 70 ; Subtract with carry $7008.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($68.b,X)		; A1 68 ; Load accumulator ($68.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($08A3.w,X)		; 7C A3 08 ; Jump indirect indexed to ($08A3.w,X) [Reads: X Index] [Flow: jump]
	sta $C0.b,S		; 83 C0 ; Store accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora [$83.b],Y		; 17 83 ; OR accumulator with memory (long indexed) [$83.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc [$83.b]		; 67 83 ; Add with carry (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $C0.b,S		; 83 C0 ; Store accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $AC		; 10 AC ; Branch if plus to $10, $AC [Flow: branch]
	ora $9A29.w		; 0D 29 9A ; Logical OR $9A29.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $61B011.l		; 0F 11 B0 61 ; OR accumulator with memory (long) $61B011.l [Writes: Accumulator] [Flags: ZN]
	jsr ($014D.w,X)		; FC 4D 01 ; Jump to subroutine indirect indexed ($014D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr $02D2.w		; 20 D2 02 ; Jump to subroutine at $02D2.w [Writes: Stack Pointer] [Flow: call]
	jsr ($05BD.w,X)		; FC BD 05 ; Jump to subroutine indirect indexed ($05BD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $61E1.w		; 2C E1 61 ; Test bits $61E1.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsr ($81BE.w,X)		; FC BE 81 ; Jump to subroutine indirect indexed ($81BE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc ($B0.b,X)		; 61 B0 ; Add with carry ($B0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $54, $D2		; 62 54 D2 ; Push effective relative address $62, $54, $D2 [Writes: Stack Pointer]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FD03.w		; 8D 03 FD ; Store accumulator to $FD03.w [Reads: Accumulator]
	ora $4407.w,X		; 1D 07 44 ; OR accumulator with memory $4407.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($62.b,X)		; E1 62 ; Subtract with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $831E.w,X		; FD 1E 83 ; Subtract with carry $831E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($A5.b),Y		; 31 A5 ; AND accumulator with memory ($A5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$A431.w		; C9 31 A4 ; Compare #$A431.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc #$C031.w		; 69 31 C0 ; Add #$C031.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $69A44D.l		; 22 4D A4 69 ; Jump to subroutine long $69A44D.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $B850.w,X		; 3D 50 B8 ; AND accumulator with memory $B850.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $9910.w,X		; 3D 10 99 ; AND accumulator with memory $9910.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$995C.w		; A0 5C 99 ; Load #$995C.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$980B.w		; A2 0B 98 ; Load #$980B.w into X register [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $C0E1.w		; 0D E1 C0 ; Logical OR $C0E1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $E1.b,X		; 55 E1 ; Exclusive OR accumulator with memory $E1.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$920B.w		; C0 0B 92 ; Compare #$920B.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0069.w,X		; FE 69 00 ; Increment memory $0069.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $816B.w,X		; FE 6B 81 ; Increment memory $816B.w,X [Reads: X Index] [Flags: ZN]
	inc $85AB.w,X		; FE AB 85 ; Increment memory $85AB.w,X [Reads: X Index] [Flags: ZN]
	lda #$61C8.w		; A9 C8 61 ; Load #$61C8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $81AE.w,X		; FE AE 81 ; Increment memory $81AE.w,X [Reads: X Index] [Flags: ZN]
	sbc $D80269.l,X		; FF 69 02 D8 ; Subtract with carry (long,X) $D80269.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF836B.l,X		; FF 6B 83 FF ; Subtract with carry (long,X) $FF836B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sta [$C9.b]		; 87 C9 ; Store accumulator (long) [$C9.b] [Reads: Accumulator, Direct Page]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $62, $FF, $2E		; 62 FF 2E ; Push effective relative address $62, $FF, $2E [Writes: Stack Pointer]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: ZN]
	sbc $CA0221.l,X		; FF 21 02 CA ; Subtract with carry (long,X) $CA0221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $BB8326.l,X		; FF 26 83 BB ; Subtract with carry (long,X) $BB8326.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $23.b,S		; C3 23 ; Compare accumulator (stack relative) $23.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $2B.b,S		; C3 2B ; Compare accumulator (stack relative) $2B.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $53.b,S		; C3 53 ; Compare accumulator (stack relative) $53.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $B0, $A0		; B0 A0 ; Branch if carry set to $B0, $A0 [Flow: branch]
	and $1398.w,X		; 3D 98 13 ; AND accumulator with memory $1398.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$5298.w		; C0 98 52 ; Compare #$5298.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$0088.w		; C0 88 00 ; Compare #$0088.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$CAD8.w		; C0 D8 CA ; Compare #$CAD8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$13D8.w		; C0 D8 13 ; Compare #$13D8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$52D8.w		; C0 D8 52 ; Compare #$52D8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $2E		; 80 2E ; Branch always to $80, $2E [Flow: branch]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $0CE1FF.l,X		; FF FF E1 0C ; Subtract with carry (long,X) $0CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $FC01.w,X		; 1E 01 FC ; Arithmetic shift left $FC01.w,X [Reads: X Index] [Flags: ZNC]
	and ($C0.b,X)		; 21 C0 ; Logical AND ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$0E52.w		; 09 52 0E ; Logical OR #$0E52.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($61.b)		; 52 61 ; Exclusive OR accumulator with memory (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sta ($61.b,X)		; 81 61 ; Store accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsr ($81AE.w,X)		; FC AE 81 ; Jump to subroutine indirect indexed ($81AE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor #$107E.w		; 49 7E 10 ; Exclusive OR #$107E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $C2A1.w,X		; FD A1 C2 ; Subtract with carry $C2A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor ($62.b)		; 52 62 ; Exclusive OR accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta ($62.b,X)		; 81 62 ; Store accumulator ($62.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $832E.w,X		; FD 2E 83 ; Subtract with carry $832E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $29.b,S		; 23 29 ; AND accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($29.b,X)		; 21 29 ; Logical AND ($29.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc #$295D.w		; 69 5D 29 ; Add #$295D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$4823.w		; 69 23 48 ; Add #$4823.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $E494FC.l		; 22 FC 94 E4 ; Jump to subroutine long $E494FC.l [Writes: Stack Pointer] [Flow: call]
	sbc $E434.w,X		; FD 34 E4 ; Subtract with carry $E434.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $60.b,X		; 34 60 ; Test bits $60.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $6044.w,X		; 3D 44 60 ; AND accumulator with memory $6044.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $8034.w,X		; 3D 34 80 ; AND accumulator with memory $8034.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $8044.w,X		; 3D 44 80 ; AND accumulator with memory $8044.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $A034.w,X		; 3D 34 A0 ; AND accumulator with memory $A034.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $A044.w,X		; 3D 44 A0 ; AND accumulator with memory $A044.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $C034.w,X		; 3D 34 C0 ; AND accumulator with memory $C034.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $C044.w,X		; 3D 44 C0 ; AND accumulator with memory $C044.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $AE88.w,X		; 3D 88 AE ; AND accumulator with memory $AE88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $CA88.w		; 0D 88 CA ; Logical OR $CA88.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $92D8.w		; 0E D8 92 ; Arithmetic shift left $92D8.w [Flags: ZNC]
	ora $10E6D8.l		; 0F D8 E6 10 ; OR accumulator with memory (long) $10E6D8.l [Writes: Accumulator] [Flags: ZN]
	bit #$61B1.w		; 89 B1 61 ; Test bits #$61B1.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc #$62B1.w		; E9 B1 62 ; Subtract #$62B1.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $0D.b,X		; 34 0D ; Test bits $0D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda #$C832.w		; A9 32 C8 ; Load #$C832.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($21.b,X)		; A1 21 ; Load accumulator ($21.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $31C902.l		; 22 02 C9 31 ; Jump to subroutine long $31C902.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $FF, $25		; 62 FF 25 ; Push effective relative address $62, $FF, $25 [Writes: Stack Pointer]
	sta $A1.b,S		; 83 A1 ; Store accumulator (stack relative) $A1.b,S [Reads: Accumulator, Stack Pointer]
	eor $8802.w,Y		; 59 02 88 ; Exclusive OR accumulator with memory $8802.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl $3B88.w		; 0E 88 3B ; Arithmetic shift left $3B88.w [Flags: ZNC]
	adc ($A3.b,X)		; 61 A3 ; Add with carry ($A3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $C8		; B0 C8 ; Branch if carry set to $B0, $C8 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$A83F.w		; A9 3F A8 ; Load #$A83F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $A079.w		; AC 79 A0 ; Load $A079.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $B0, $46		; B0 46 ; Branch if carry set to $B0, $46 [Flow: branch]
	ldy #$79B5.w		; A0 B5 79 ; Load #$79B5.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$44BE.w		; A0 BE 44 ; Load #$44BE.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $B0, $C0		; B0 C0 ; Branch if carry set to $B0, $C0 [Flow: branch]
	adc $C5B1.w,Y		; 79 B1 C5 ; Add $C5B1.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy $7AC0.w		; CC C0 7A ; Compare $7AC0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $43BE.w		; CC BE 43 ; Compare $43BE.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp.w [$7AB5]		; DC B5 7A ; Jump long indirect [$7AB5] [Flow: jump]
	pei ($B0.b)		; D4 B0 ; Push effective indirect address ($B0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	eor $D4.b		; 45 D4 ; Exclusive OR $D4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A97A.w		; AC 7A A9 ; Load $A97A.w into Y register [Writes: Y Index] [Flags: ZN]
	and ($3F.b),Y		; 31 3F ; AND accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$7937.w		; A9 37 79 ; Load #$7937.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$4055.w		; A9 55 40 ; Load #$4055.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $37.b		; C5 37 ; Compare $37.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	inc $248C.w,X		; FE 8C 24 ; Increment memory $248C.w,X [Reads: X Index] [Flags: ZN]
	sbc $00244C.l,X		; FF 4C 24 00 ; Subtract with carry (long,X) $00244C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$A1.b]		; 67 A1 ; Add with carry (long) [$A1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora #$C083.w		; 09 83 C0 ; Logical OR #$C083.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$C0C3.w		; 09 C3 C0 ; Logical OR #$C0C3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $59A37F.l		; 5C 7F A3 59 ; Jump long to $59A37F.l [Flow: jump]
	sta $C0.b,S		; 83 C0 ; Store accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer]
	eor $C0C3.w,Y		; 59 C3 C0 ; Exclusive OR accumulator with memory $C0C3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $88A0.w,X		; 1E A0 88 ; Arithmetic shift left $88A0.w,X [Reads: X Index] [Flags: ZNC]
	eor $A1.b,X		; 55 A1 ; Exclusive OR accumulator with memory $A1.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($1B.b,X)		; A1 1B ; Load accumulator ($1B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $5DD9C0.l,X		; 1F C0 D9 5D ; Logical OR long $5DD9C0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$688B.w		; C0 8B 68 ; Compare #$688B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$68C8.w		; C0 C8 68 ; Compare #$68C8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9388.w		; C0 88 93 ; Compare #$9388.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$DF88.w		; A0 88 DF ; Load #$DF88.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($DC.b,X)		; A1 DC ; Load accumulator ($DC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($A2.b,S),Y		; 93 A2 ; Store accumulator (stack relative indirect indexed) ($A2.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	jmp.w [$A3F7]		; DC F7 A3 ; Jump long indirect [$A3F7] [Flow: jump]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $62, $2E, $81		; 62 2E 81 ; Push effective relative address $62, $2E, $81 [Writes: Stack Pointer]
	asl $0E61.w		; 0E 61 0E ; Arithmetic shift left $0E61.w [Flags: ZNC]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $012D.w,X		; FE 2D 01 ; Increment memory $012D.w,X [Reads: X Index] [Flags: ZN]
	inc $056D.w,X		; FE 6D 05 ; Increment memory $056D.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($61.b,X)		; E1 61 ; Subtract with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $816E.w,X		; FE 6E 81 ; Increment memory $816E.w,X [Reads: X Index] [Flags: ZN]
	sbc $D8836E.l,X		; FF 6E 83 D8 ; Subtract with carry (long,X) $D8836E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($62.b,X)		; E1 62 ; Subtract with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF076D.l,X		; FF 6D 07 FF ; Subtract with carry (long,X) $FF076D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FE03.w		; AD 03 FE ; Load $FE03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $80.b		; 84 80 ; Store Y register to $80.b [Reads: Y Index]
	lda ($48.b),Y		; B1 48 ; Load accumulator ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvp $A0,$82		; 44 82 A0 ; Move block positive $A0,$82 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $81.b		; 86 81 ; Store X register to $81.b [Reads: X Index]
	sbc $D08346.l,X		; FF 46 83 D0 ; Subtract with carry (long,X) $D08346.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $62, $A0, $A0		; 62 A0 A0 ; Push effective relative address $62, $A0, $A0 [Writes: Stack Pointer]
	and $A0D8.w,Y		; 39 D8 A0 ; AND accumulator with memory $A0D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B8A8.w,Y		; 39 A8 B8 ; AND accumulator with memory $B8A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B8D0.w,Y		; 39 D0 B8 ; AND accumulator with memory $B8D0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $D1B0.w,Y		; 39 B0 D1 ; AND accumulator with memory $D1B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $57AF.w,Y		; 39 AF 57 ; AND accumulator with memory $57AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda [$57.b],Y		; B7 57 ; Load accumulator (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp [$57.b]		; C7 57 ; Compare accumulator (long) [$57.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $88FA57.l		; CF 57 FA 88 ; Compare accumulator (long) $88FA57.l [Reads: Accumulator] [Flags: ZNC]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpy #$0BCA.w		; C0 CA 0B ; Compare #$0BCA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4A81.w		; C0 81 4A ; Compare #$4A81.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4AE1.w		; C0 E1 4A ; Compare #$4AE1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E2FF.l,X		; FF FF E2 00 ; Subtract with carry (long,X) $00E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C5.b,S		; A3 C5 ; Load accumulator (stack relative) $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $A3.b,X		; 56 A3 ; Logical shift right $A3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($1B.b),Y		; 71 1B ; Add with carry ($1B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$1834]		; DC 34 18 ; Jump long indirect [$1834] [Flow: jump]
	sta ($FC.b,S),Y		; 93 FC ; Store accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($FC.b)		; 92 FC ; Store accumulator (indirect) ($FC.b) [Reads: Accumulator, Direct Page]
	and $FCA7.w,Y		; 39 A7 FC ; AND accumulator with memory $FCA7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr ($B05C.w,X)		; FC 5C B0 ; Jump to subroutine indirect indexed ($B05C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $B858.w,X		; 3C 58 B8 ; Test bits $B858.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $FFFF.w,X		; DD FF FF ; Compare accumulator $FFFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E5FF.l,X		; FF FF E5 00 ; Subtract with carry (long,X) $00E5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0049.w,X)		; FC 49 00 ; Jump to subroutine indirect indexed ($0049.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($A1.b)		; 12 A1 ; OR accumulator with memory (indirect) ($A1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $FD81.w		; 4E 81 FD ; Logical shift right $FD81.w [Flags: ZNC]
	bit #$6202.w		; 89 02 62 ; Test bits #$6202.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $838E.w,X		; FD 8E 83 ; Subtract with carry $838E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $A7.b		; 26 A7 ; Rotate left $A7.b [Reads: Direct Page] [Flags: ZNC]
	jmp.w [$B828]		; DC 28 B8 ; Jump long indirect [$B828] [Flow: jump]
	and $B850.w,X		; 3D 50 B8 ; AND accumulator with memory $B850.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $9124.w,X		; 3D 24 91 ; AND accumulator with memory $9124.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $D838.w,X		; FD 38 D8 ; Subtract with carry $D838.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc ($20.b),Y		; 71 20 ; Add with carry ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $503B.w		; EC 3B 50 ; Compare $503B.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $FE3B.w		; EC 3B FE ; Compare $FE3B.w with X register [Reads: X Index] [Flags: ZNC]
	eor #$9200.w		; 49 00 92 ; Exclusive OR #$9200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $814E.w,X		; FE 4E 81 ; Increment memory $814E.w,X [Reads: X Index] [Flags: ZN]
	sbc $E20289.l,X		; FF 89 02 E2 ; Subtract with carry (long,X) $E20289.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $A6838E.l,X		; FF 8E 83 A6 ; Subtract with carry (long,X) $A6838E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$DC.b]		; A7 DC ; Load accumulator (long) [$DC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $B8D0.w,X		; 3D D0 B8 ; AND accumulator with memory $B8D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $91A4.w,X		; 3D A4 91 ; AND accumulator with memory $91A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $D8B8.w,X		; FD B8 D8 ; Subtract with carry $D8B8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($B4.b,S),Y		; 33 B4 ; AND accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc ($C8.b),Y		; 71 C8 ; Add with carry ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc ($A0.b),Y		; 71 A0 ; Add with carry ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $D03B.w		; EC 3B D0 ; Compare $D03B.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $0B3B.w		; EC 3B 0B ; Compare $0B3B.w with X register [Reads: X Index] [Flags: ZNC]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Accumulator, Direct Page, Y Index]
	adc ($91.b,S),Y		; 73 91 ; Add with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sbc ($91.b,S),Y		; F3 91 ; Subtract with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $04E5FF.l,X		; FF FF E5 04 ; Subtract with carry (long,X) $04E5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8127.w,X)		; FC 27 81 ; Jump to subroutine indirect indexed ($8127.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	asl $C421.w		; 0E 21 C4 ; Arithmetic shift left $C421.w [Flags: ZNC]
	ora $9B38.w		; 0D 38 9B ; Logical OR $9B38.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($21.b,X)		; 61 21 ; Add with carry ($21.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $FD81.w		; 8E 81 FD ; Store X register to $FD81.w [Reads: X Index]
	eor ($02.b,X)		; 41 02 ; Exclusive OR accumulator with memory ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($60.b),Y		; 51 60 ; Exclusive OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $622252.l		; 0F 52 22 62 ; OR accumulator with memory (long) $622252.l [Writes: Accumulator] [Flags: ZN]
	eor ($C4.b),Y		; 51 C4 ; Exclusive OR accumulator with memory ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $69		; 10 69 ; Branch if plus to $10, $69 [Flow: branch]
	bit #$5162.w		; 89 62 51 ; Test bits #$5162.w with accumulator [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $62, $FD, $4E		; 62 FD 4E ; Push effective relative address $62, $FD, $4E [Writes: Stack Pointer]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2F.b,X		; 15 2F ; OR accumulator with memory $2F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $24.b,S		; 63 24 ; Add with carry (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($FC04.w)		; 6C 04 FC ; Jump indirect to ($FC04.w) [Flow: jump]
	lsr $C9.b,X		; 56 C9 ; Logical shift right $C9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and #$1A6D.w		; 29 6D 1A ; Logical AND #$1A6D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $19C4.w		; 2D C4 19 ; Logical AND $19C4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $63,$9A		; 44 9A 63 ; Move block positive $63,$9A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $63CA.w		; 2C CA 63 ; Test bits $63CA.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsr ($C9BD.w,X)		; FC BD C9 ; Jump to subroutine indirect indexed ($C9BD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $04DC.w,X		; 3C DC 04 ; Test bits $04DC.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $1F.b		; 24 1F ; Test bits $1F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $45.b,S		; 03 45 ; OR accumulator with stack relative $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $28.b		; 46 28 ; Logical shift right $28.b [Reads: Direct Page] [Flags: ZNC]
	stz $FD.b		; [PATTERN: Memory clearing operation] 64 FD ; Store zero to $FD.b
	ora ($CA.b),Y		; 11 CA ; OR accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C4.b		; 45 C4 ; Exclusive OR $C4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $885D.w		; 1C 5D 88 ; Test and reset bits $885D.w [Reads: Accumulator] [Flags: Z]
	stz $44.b		; 64 44 ; Store zero to $44.b
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	ora $24CB.w,X		; 1D CB 24 ; OR accumulator with memory $24CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $253D.w,Y		; 39 3D 25 ; AND accumulator with memory $253D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp $41FE.w,X		; DD FE 41 ; Compare accumulator $41FE.w,X [Reads: X Index] [Flags: ZNC]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $0E		; 42 0E ; Reserved instruction
	bit #$0DA4.w		; 89 A4 0D ; Test bits #$0DA4.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($22.b),Y		; 91 22 ; Store accumulator ($22.b),Y [Reads: Accumulator, Direct Page, Y Index]
	adc ($A1.b,X)		; 61 A1 ; Add with carry ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $89		; 62 61 89 ; Push effective relative address $62, $61, $89 [Writes: Stack Pointer]
	cpy #$890E.w		; C0 0E 89 ; Compare #$890E.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda #$D861.w		; A9 61 D8 ; Load #$D861.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $C110.w,X		; 5E 10 C1 ; Logical shift right $C110.w,X [Reads: X Index] [Flags: ZNC]
	ldy $D910.w		; AC 10 D9 ; Load $D910.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $42, $62		; 42 62 ; Reserved instruction
	cpy #$0FB2.w		; C0 B2 0F ; Compare #$0FB2.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$62B2.w		; C0 B2 62 ; Compare #$62B2.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $D0834E.l,X		; FF 4E 83 D0 ; Subtract with carry (long,X) $D0834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($62.b,S),Y		; D3 62 ; Compare accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	stz $1A42.w		; 9C 42 1A ; Store zero to $1A42.w
	sta $6328.w,X		; 9D 28 63 ; Store accumulator to $6328.w,X [Reads: Accumulator, X Index]
	inc $C871.w,X		; FE 71 C8 ; Increment memory $C871.w,X [Reads: X Index] [Flags: ZN]
	sta $A4.b,X		; 95 A4 ; Store accumulator to $A4.b,X [Reads: Accumulator, X Index]
	ora $61AD.w,Y		; 19 AD 61 ; OR accumulator with memory $61AD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $94.b,S		; 63 94 ; Add with carry (stack relative) $94.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($1A.b,X)		; C1 1A ; Compare accumulator ($1A.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sta $A8.b,X		; 95 A8 ; Store accumulator to $A8.b,X [Reads: Accumulator, X Index]
	adc $AD.b,S		; 63 AD ; Add with carry (stack relative) $AD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora $CC03.w,X		; 1D 03 CC ; OR accumulator with memory $CC03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $DD1C.w,X		; 5E 1C DD ; Logical shift right $DD1C.w,X [Reads: X Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	stz $FF.b		; [PATTERN: Memory clearing operation] 64 FF ; Store zero to $FF.b
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $AC.b,X		; B5 AC ; Load $AC.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $62CD.w		; 1C CD 62 ; Test and reset bits $62CD.w [Reads: Accumulator] [Flags: Z]
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	lda ($1B.b)		; B2 1B ; Load accumulator (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $B1.b,X		; B4 B1 ; Load Y register $B1.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $C4.b		; 64 C4 ; Store zero to $C4.b
	cmp ($64.b),Y		; D1 64 ; Compare accumulator ($64.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $B0, $DE		; B0 DE ; Branch if carry set to $B0, $DE [Flow: branch]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora $A8CB.w,X		; 1D CB A8 ; OR accumulator with memory $A8CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $87		; B0 87 ; Branch if carry set to $B0, $87 [Flow: branch]
	cpy #$8752.w		; C0 52 87 ; Compare #$8752.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy $39.b,X		; B4 39 ; Load Y register $39.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	and $8824.w,X		; 3D 24 88 ; AND accumulator with memory $8824.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($20.b,X)		; A1 20 ; Load accumulator ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($A0.b),Y		; B1 A0 ; Load accumulator ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$8921.w		; C0 21 89 ; Compare #$8921.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $9B		; 30 9B ; Branch if minus to $30, $9B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($CA.b,X)		; 01 CA ; Logical OR ($CA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$1361.w		; C0 61 13 ; Compare #$1361.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5161.w		; C0 61 51 ; Compare #$5161.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$7164.w		; C0 64 71 ; Compare #$7164.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx #$C564.w		; A2 64 C5 ; Load #$C564.w into X register [Writes: X Index] [Flags: ZN]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$D589.w		; C0 89 D5 ; Compare #$D589.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($90.b,X)		; A1 90 ; Load accumulator ($90.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $90,$A1		; 54 A1 90 ; Move block negative $90,$A1 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $62, $C0, $88		; 62 C0 88 ; Push effective relative address $62, $C0, $88 [Writes: Stack Pointer]
	sta ($A0.b),Y		; 91 A0 ; Store accumulator ($A0.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($60.b,S),Y		; 13 60 ; OR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit #$EC60.w		; 89 60 EC ; Test bits #$EC60.w with accumulator [Reads: Accumulator] [Flags: Z]
	jmp $63E8A3.l		; 5C A3 E8 63 ; Jump long to $63E8A3.l [Flow: jump]
	cpy #$ADD4.w		; C0 D4 AD ; Compare #$ADD4.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $D0.b,S		; A3 D0 ; Load accumulator (stack relative) $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $D2A2.w,X		; BC A2 D2 ; Load Y register $D2A2.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $B0, $C0		; B0 C0 ; Branch if carry set to $B0, $C0 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy #$E1C0.w		; A0 C0 E1 ; Load #$E1C0.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($10.b),Y		; 91 10 ; Store accumulator ($10.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda ($10.b),Y		; B1 10 ; Load accumulator ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0451FF.l,X		; FF FF 51 04 ; Subtract with carry (long,X) $0451FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0127.w,X)		; FC 27 01 ; Jump to subroutine indirect indexed ($0127.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0567.w,X)		; FC 67 05 ; Jump to subroutine indirect indexed ($0567.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($61.b,X)		; 81 61 ; Store accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $03A7.w,X		; FD A7 03 ; Subtract with carry $03A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0767.w,X		; FD 67 07 ; Subtract with carry $0767.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sta ($62.b,X)		; 81 62 ; Store accumulator ($62.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $836E.w,X		; FD 6E 83 ; Subtract with carry $836E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $2B.b,S		; 23 2B ; AND accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($61.b),Y		; 31 61 ; AND accumulator with memory ($61.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $2E.b,X		; 15 2E ; OR accumulator with memory $2E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lsr $49.b,X		; 56 49 ; Logical shift right $49.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr ($4D96.w,X)		; FC 96 4D ; Jump to subroutine indirect indexed ($4D96.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $75.b		; 24 75 ; Test bits $75.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$8234.w		; 09 34 82 ; Logical OR #$8234.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $4C.b		; 04 4C ; Test and set bits $4C.b [Reads: Accumulator] [Flags: Z]
	adc $64.b,X		; 75 64 ; Add $64.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0B38.w,X		; FD 38 0B ; Subtract with carry $0B38.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4F36.w,X		; FD 36 4F ; Subtract with carry $4F36.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4B76.w,X		; FD 76 4B ; Subtract with carry $4B76.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $642E.w,X		; 5D 2E 64 ; Exclusive OR accumulator with memory $642E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $39		; 30 39 ; Branch if minus to $30, $39 [Flow: branch]
	and ($30.b,S),Y		; 33 30 ; AND accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$2D33.w		; 49 33 2D ; Exclusive OR #$2D33.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $7138.w		; 2D 38 71 ; Logical AND $7138.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $345A.w		; 2D 5A 34 ; Logical AND $345A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($38.b),Y		; 51 38 ; Exclusive OR accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($39.b),Y		; 71 39 ; Add with carry ($39.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $F9		; 42 F9 ; Reserved instruction
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $8339.w,Y		; F9 39 83 ; Subtract with carry $8339.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9124.w,Y		; F9 24 91 ; Subtract with carry $9124.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $229148.l		; 22 48 91 22 ; Jump to subroutine long $229148.l [Writes: Stack Pointer] [Flow: call]
	and ($A0.b)		; 32 A0 ; AND accumulator with memory (indirect) ($A0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy #$0888.w		; A0 88 08 ; Load #$0888.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $C0.b,S		; 83 C0 ; Store accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $C0.b,S		; 83 C0 ; Store accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $7076.w,X		; BC 76 70 ; Load Y register $7076.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $7B.b		; A5 7B ; Load $7B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($77BC.w)		; 6C BC 77 ; Jump indirect to ($77BC.w) [Flow: jump]
	jsr $3BEC.w		; 20 EC 3B ; Jump to subroutine at $3BEC.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $EC		; 50 EC ; Branch if overflow clear to $50, $EC [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($A169.w,X)		; FC 69 A1 ; Jump to subroutine indirect indexed ($A169.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($216A.w,X)		; FC 6A 21 ; Jump to subroutine indirect indexed ($216A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A16A.w,X)		; FC 6A A1 ; Jump to subroutine indirect indexed ($A16A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A189.w,X)		; FC 89 A1 ; Jump to subroutine indirect indexed ($A189.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($218A.w,X)		; FC 8A 21 ; Jump to subroutine indirect indexed ($218A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $91.b,X		; 34 91 ; Test bits $91.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $4F9150.l		; 4F 50 91 4F ; Exclusive OR accumulator with memory (long) $4F9150.l [Writes: Accumulator] [Flags: ZN]
	jmp $4CAA.w		; 4C AA 4C ; Jump to $4CAA.w [Flow: jump]
	eor [$AB.b],Y		; 57 AB ; Exclusive OR accumulator with memory (long indexed) [$AB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $AB5F.w,X		; FD 5F AB ; Subtract with carry $AB5F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $BB20.w,X		; FD 20 BB ; Subtract with carry $BB20.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($1F.b)		; B2 1F ; Load accumulator (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$B3.b],Y		; B7 B3 ; Load accumulator (long indexed) [$B3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1CB4CB.l,X		; 1F CB B4 1C ; Logical OR long $1CB4CB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta $BB60.w		; 8D 60 BB ; Store accumulator to $BB60.w [Reads: Accumulator]
	stx $D819.w		; 8E 19 D8 ; Store X register to $D819.w [Reads: X Index]
	cmp $DA1E.w,X		; DD 1E DA ; Compare accumulator $DA1E.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FFFF.w,X		; FD FF FF ; Subtract with carry $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $18E1FF.l,X		; FF FF E1 18 ; Subtract with carry (long,X) $18E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $AC		; 90 AC ; Branch if carry clear to $90, $AC [Flow: branch]
	ora $9AA9.w		; 0D A9 9A ; Logical OR $9AA9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($D8.b,X)		; 01 D8 ; Logical OR ($D8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $61B391.l		; 0F 91 B3 61 ; OR accumulator with memory (long) $61B391.l [Writes: Accumulator] [Flags: ZN]
	inc $814E.w,X		; FE 4E 81 ; Increment memory $814E.w,X [Reads: X Index] [Flags: ZN]
	sbc ($B3.b,X)		; E1 B3 ; Subtract with carry ($B3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $FF, $8E		; 62 FF 8E ; Push effective relative address $62, $FF, $8E [Writes: Stack Pointer]
	sta $B1.b,S		; 83 B1 ; Store accumulator (stack relative) $B1.b,S [Reads: Accumulator, Stack Pointer]
	lda $C9.b		; A5 C9 ; Load $C9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($A4.b),Y		; B1 A4 ; Load accumulator ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$C0B1.w		; 69 B1 C0 ; Add #$C0B1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $69A4CD.l		; 22 CD A4 69 ; Jump to subroutine long $69A4CD.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $B8D0.w,X		; 3D D0 B8 ; AND accumulator with memory $B8D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $9990.w,X		; 3D 90 99 ; AND accumulator with memory $9990.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$988B.w		; A0 8B 98 ; Load #$988B.w into Y register [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($98.b,S),Y		; F3 98 ; Subtract with carry (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp.w [$A299]		; DC 99 A2 ; Jump long indirect [$A299] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($0A.b,X)		; 81 0A ; Store accumulator ($0A.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8124.w,X)		; FC 24 81 ; Jump to subroutine indirect indexed ($8124.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor #$FC02.w		; 49 02 FC ; Exclusive OR #$FC02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $85.b		; 84 85 ; Store Y register to $85.b [Reads: Y Index]
	jsl $FC615B.l		; 22 5B 61 FC ; Jump to subroutine long $FC615B.l [Writes: Stack Pointer] [Flow: call]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $030B.w,X		; FE 0B 03 ; Increment memory $030B.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $9B		; 80 9B ; Branch always to $80, $9B [Flow: branch]
	.db $62, $FE, $08		; 62 FE 08 ; Push effective relative address $62, $FE, $08 [Writes: Stack Pointer]
	sta [$90.b]		; 87 90 ; Store accumulator (long) [$90.b] [Reads: Accumulator, Direct Page]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $A2.b,S		; 83 A2 ; Store accumulator (stack relative) $A2.b,S [Reads: Accumulator, Stack Pointer]
	eor ($62.b,X)		; 41 62 ; Exclusive OR accumulator with memory ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $0783.w,X		; FE 83 07 ; Increment memory $0783.w,X [Reads: X Index] [Flags: ZN]
	.db $B0, $33		; B0 33 ; Branch if carry set to $B0, $33 [Flow: branch]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $05.b,S		; 23 05 ; AND accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($61.b,X)		; 41 61 ; Exclusive OR accumulator with memory ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $B8842A.l,X		; FF 2A 84 B8 ; Subtract with carry (long,X) $B8842A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $80, $A9		; 80 A9 ; Branch always to $80, $A9 [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $FF81.w		; AE 81 FF ; Load $FF81.w into X register [Writes: X Index] [Flags: ZN]
	rol $C883.w		; 2E 83 C8 ; Rotate left $C883.w [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $2C		; 62 FF 2C ; Push effective relative address $62, $FF, $2C [Writes: Stack Pointer]
	sta [$D8.b]		; 87 D8 ; Store accumulator (long) [$D8.b] [Reads: Accumulator, Direct Page]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $FE83.w		; AC 83 FE ; Load $FE83.w into Y register [Writes: Y Index] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $82, $21, $61		; 82 21 61 ; Branch always long to $82, $21, $61 [Flow: branch]
	inc $8406.w,X		; FE 06 84 ; Increment memory $8406.w,X [Reads: X Index] [Flags: ZN]
	.db $70, $6A		; 70 6A ; Branch if overflow set to $70, $6A [Flow: branch]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stx $80.b		; 86 80 ; Store X register to $80.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit #$5004.w		; 89 04 50 ; Test bits #$5004.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Accumulator, Direct Page]
	sbc $0609.w,X		; FD 09 06 ; Subtract with carry $0609.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($5B.b,X)		; 41 5B ; Exclusive OR accumulator with memory ($5B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $FD, $04		; 62 FD 04 ; Push effective relative address $62, $FD, $04 [Writes: Stack Pointer]
	sta [$50.b]		; 87 50 ; Store accumulator (long) [$50.b] [Reads: Accumulator, Direct Page]
	eor #$FD02.w		; 49 02 FD ; Exclusive OR #$FD02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $83.b		; 64 83 ; Store zero to $83.b
	eor $6221.w,Y		; 59 21 62 ; Exclusive OR accumulator with memory $6221.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0261.w,X		; FD 61 02 ; Subtract with carry $0261.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$1F.b],Y		; 17 1F ; OR accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora [$27.b],Y		; 17 27 ; OR accumulator with memory (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $1FFA1F.l,X		; 1F 1F FA 1F ; Logical OR long $1FFA1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$FA.b]		; 27 FA ; AND accumulator with memory (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $1C.b		; 24 1C ; Test bits $1C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jmp.w [$1F4F]		; DC 4F 1F ; Jump long indirect [$1F4F] [Flow: jump]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor $57FA27.l		; 4F 27 FA 57 ; Exclusive OR accumulator with memory (long) $57FA27.l [Writes: Accumulator] [Flags: ZN]
	ora $2757FA.l,X		; 1F FA 57 27 ; Logical OR long $2757FA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $532C.w,Y		; F9 2C 53 ; Subtract with carry $532C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $DF5334.l,X		; DF 34 53 DF ; Compare accumulator (long,X) $DF5334.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	bit $DF86.w		; 2C 86 DF ; Test bits $DF86.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $86.b,X		; 34 86 ; Test bits $86.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $DF9C47.l,X		; DF 47 9C DF ; Compare accumulator (long,X) $DF9C47.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	eor [$A4.b]		; 47 A4 ; Exclusive OR accumulator with memory (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $DF766C.l,X		; DF 6C 76 DF ; Compare accumulator (long,X) $DF766C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	stz $76.b,X		; 74 76 ; Store zero to $76.b,X [Reads: X Index]
	cmp $DF7485.l,X		; DF 85 74 DF ; Compare accumulator (long,X) $DF7485.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sta $7C.b		; 85 7C ; Store accumulator to $7C.b [Reads: Accumulator]
	cmp $DF378C.l,X		; DF 8C 37 DF ; Compare accumulator (long,X) $DF378C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sty $37.b,X		; 94 37 ; Store Y register $37.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp $DF1C8F.l,X		; DF 8F 1C DF ; Compare accumulator (long,X) $DF1C8F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sta $CDDF24.l		; 8F 24 DF CD ; Store accumulator (long) $CDDF24.l [Reads: Accumulator]
	trb $CDDF.w		; 1C DF CD ; Test and reset bits $CDDF.w [Reads: Accumulator] [Flags: Z]
	bit $DF.b		; 24 DF ; Test bits $DF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	pei ($37.b)		; D4 37 ; Push effective indirect address ($37.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $DF37DC.l,X		; DF DC 37 DF ; Compare accumulator (long,X) $DF37DC.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	pei ($77.b)		; D4 77 ; Push effective indirect address ($77.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $DF77DC.l,X		; DF DC 77 DF ; Compare accumulator (long,X) $DF77DC.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ldx $DFB4.w,Y		; BE B4 DF ; Load X register $DFB4.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldx $DFBC.w,Y		; BE BC DF ; Load X register $DFBC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp $DFBCB4.l,X		; DF B4 BC DF ; Compare accumulator (long,X) $DFBCB4.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $30, $43		; 30 43 ; Branch if minus to $30, $43 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldx $C9.b,Y		; B6 C9 ; Load X register $C9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc $C9BE.w,Y		; F9 BE C9 ; Subtract with carry $C9BE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C9C6.w,Y		; F9 C6 C9 ; Subtract with carry $C9C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $80D4.w,Y		; F9 D4 80 ; Subtract with carry $80D4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $40E4.w,X		; 3D E4 40 ; AND accumulator with memory $40E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $508C.w,X		; 3D 8C 50 ; AND accumulator with memory $508C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $509C.w,X		; 3D 9C 50 ; AND accumulator with memory $509C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $602C.w,X		; 3D 2C 60 ; AND accumulator with memory $602C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $603C.w,X		; 3D 3C 60 ; AND accumulator with memory $603C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $802C.w,X		; 3D 2C 80 ; AND accumulator with memory $802C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $803C.w,X		; 3D 3C 80 ; AND accumulator with memory $803C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $5B01.w,X		; 3D 01 5B ; AND accumulator with memory $5B01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$9B01.w		; C0 01 9B ; Compare #$9B01.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C30B.w		; C0 0B C3 ; Compare #$C30B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C34B.w		; C0 4B C3 ; Compare #$C34B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C389.w		; C0 89 C3 ; Compare #$C389.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$41B3.w		; C0 B3 41 ; Compare #$41B3.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cpy #$9891.w		; C0 91 98 ; Compare #$9891.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A990.w		; C0 90 A9 ; Compare #$A990.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$ABA0.w		; C0 A0 AB ; Compare #$ABA0.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $C0D9.w,Y		; D9 D9 C0 ; Compare accumulator $C0D9.w,Y [Reads: Y Index] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora ($60.b,S),Y		; 13 60 ; OR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $62		; 50 62 ; Branch if overflow clear to $50, $62 [Flow: branch]
	cpy #$5852.w		; C0 52 58 ; Compare #$5852.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5268.w		; C0 68 52 ; Compare #$5268.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0E81.l,X		; FF 81 0E FF ; Subtract with carry (long,X) $FF0E81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A000E3.l,X		; FF E3 00 A0 ; Subtract with carry (long,X) $A000E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($3E.b),Y		; 91 3E ; Store accumulator ($3E.b),Y [Reads: Accumulator, Direct Page, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $A5		; F0 A5 ; Branch if equal to $F0, $A5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy $EC76.w,X		; BC 76 EC ; Load Y register $EC76.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy $A077.w,X		; BC 77 A0 ; Load Y register $A077.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpx $D03B.w		; EC 3B D0 ; Compare $D03B.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $B43B.w		; EC 3B B4 ; Compare $B43B.w with X register [Reads: X Index] [Flags: ZNC]
	sta ($FD.b,S),Y		; 93 FD ; Store accumulator (stack relative indirect indexed) ($FD.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $DD.b		; A4 DD ; Load $DD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp ($A6.b)		; D2 A6 ; Compare accumulator (indirect) ($A6.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $39FF.w,X		; FD FF 39 ; Subtract with carry $39FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $A0E7.w,Y		; 79 E7 A0 ; Add $A0E7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda ($9F.b)		; B2 9F ; Load accumulator (indirect) ($9F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$B3.b],Y		; B7 B3 ; Load accumulator (long indexed) [$B3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9CB4CB.l,X		; 9F CB B4 9C ; Store accumulator (long,X) $9CB4CB.l,X [Reads: Accumulator, X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta $BBE0.w		; 8D E0 BB ; Store accumulator to $BBE0.w [Reads: Accumulator]
	stx $BC94.w		; 8E 94 BC ; Store X register to $BC94.w [Reads: X Index]
	and $BCE4.w,X		; 3D E4 BC ; AND accumulator with memory $BCE4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BDA9.w,X		; 3D A9 BD ; AND accumulator with memory $BDA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFBDBD.l,X		; FF BD BD FF ; Subtract with carry (long,X) $FFBDBD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($BD.b),Y		; D1 BD ; Compare accumulator ($BD.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $4CD594.l,X		; FF 94 D5 4C ; Subtract with carry (long,X) $4CD594.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pei ($D5.b)		; D4 D5 ; Push effective indirect address ($D5.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jmp $D79B.w		; 4C 9B D7 ; Jump to $D79B.w [Flow: jump]
	sbc $FFFF.w,X		; FD FF FF ; Subtract with carry $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $10E1FF.l,X		; FF FF E1 10 ; Subtract with carry (long,X) $10E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	and $61AB.w,Y		; 39 AB 61 ; AND accumulator with memory $61AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $90		; B0 90 ; Branch if carry set to $B0, $90 [Flow: branch]
	ora $10E4B0.l		; 0F B0 E4 10 ; OR accumulator with memory (long) $10E4B0.l [Writes: Accumulator] [Flags: ZN]
	lda $62AB.w,Y		; B9 AB 62 ; Load $62AB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3989.w,X		; FD 89 39 ; Subtract with carry $3989.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $90, $3A		; 90 3A ; Branch if carry clear to $90, $3A [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx $903B.w		; EC 3B 90 ; Compare $903B.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $513B.w		; EC 3B 51 ; Compare $513B.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $C899.w,X		; DD 99 C8 ; Compare accumulator $C899.w,X [Reads: X Index] [Flags: ZNC]
	cmp $E35B.w,X		; DD 5B E3 ; Compare accumulator $E35B.w,X [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda $E3.b,S		; A3 E3 ; Load accumulator (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($A0.b),Y		; 91 A0 ; Store accumulator ($A0.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $A1.b		; E5 A1 ; Subtract $A1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $91.b,X		; B4 91 ; Load Y register $91.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$F5B4.w		; A2 B4 F5 ; Load #$F5B4.w into X register [Writes: X Index] [Flags: ZN]
	lda $CA.b,S		; A3 CA ; Load accumulator (stack relative) $CA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $9078FF.l,X		; FF FF 78 90 ; Subtract with carry (long,X) $9078FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF9090.l,X		; FF 90 90 FF ; Subtract with carry (long,X) $FF9090.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b),Y		; 71 12 ; Add with carry ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10E1FF.l,X		; FF FF E1 10 ; Subtract with carry (long,X) $10E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00A1.w,X		; FD A1 00 ; Subtract with carry $00A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $81A6.w,X		; FD A6 81 ; Subtract with carry $81A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0221.w,X		; FE 21 02 ; Increment memory $0221.w,X [Reads: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $8326.w,X		; FE 26 83 ; Increment memory $8326.w,X [Reads: X Index] [Flags: ZN]
	sbc $0029.w,X		; FD 29 00 ; Subtract with carry $0029.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $812E.w,X		; FD 2E 81 ; Subtract with carry $812E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $02A9.w,X		; FE A9 02 ; Increment memory $02A9.w,X [Reads: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $83AE.w,X		; FE AE 83 ; Increment memory $83AE.w,X [Reads: X Index] [Flags: ZN]
	sbc $3889.w,X		; FD 89 38 ; Subtract with carry $3889.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $F922.w,X		; 7D 22 F9 ; Add $F922.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CA89.w,Y		; F9 89 CA ; Subtract with carry $CA89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DA61.w,Y		; F9 61 DA ; Subtract with carry $DA61.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DA99.w,Y		; F9 99 DA ; Subtract with carry $DA99.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $337B.w,Y		; F9 7B 33 ; Subtract with carry $337B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $33.b,S		; 83 33 ; Store accumulator (stack relative) $33.b,S [Reads: Accumulator, Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $3B.b,S		; 83 3B ; Store accumulator (stack relative) $3B.b,S [Reads: Accumulator, Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $43.b,S		; 83 43 ; Store accumulator (stack relative) $43.b,S [Reads: Accumulator, Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpx #$A05E.w		; E0 5E A0 ; Compare #$A05E.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$0B5E.w		; E0 5E 0B ; Compare #$0B5E.w with X register [Reads: X Index] [Flags: ZNC]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$C013.w		; 49 13 C0 ; Exclusive OR #$C013.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$C052.w		; 49 52 C0 ; Exclusive OR #$C052.w with accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $C013.w,Y		; D9 13 C0 ; Compare accumulator $C013.w,Y [Reads: Y Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C052.w,Y		; D9 52 C0 ; Compare accumulator $C052.w,Y [Reads: Y Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $70, $2E		; 70 2E ; Branch if overflow set to $70, $2E [Flow: branch]
	sbc $0CE0FF.l,X		; FF FF E0 0C ; Subtract with carry (long,X) $0CE0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $00A1.w,X		; FE A1 00 ; Increment memory $00A1.w,X [Reads: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: ZN]
	sbc $CA0221.l,X		; FF 21 02 CA ; Subtract with carry (long,X) $CA0221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FE8326.l,X		; FF 26 83 FE ; Subtract with carry (long,X) $FE8326.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit #$A200.w		; 89 00 A2 ; Test bits #$A200.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $818E.w,X		; FE 8E 81 ; Increment memory $818E.w,X [Reads: X Index] [Flags: ZN]
	sbc $D20249.l,X		; FF 49 02 D2 ; Subtract with carry (long,X) $D20249.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FC834E.l,X		; FF 4E 83 FC ; Subtract with carry (long,X) $FC834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $81.b		; 24 81 ; Test bits $81.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $024B.w,Y		; 19 4B 02 ; OR accumulator with memory $024B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $8544.w,X		; FD 44 85 ; Subtract with carry $8544.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($5B.b)		; 52 5B ; Exclusive OR accumulator with memory (indirect) ($5B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tsb $38.b		; 04 38 ; Test and set bits $38.b [Reads: Accumulator] [Flags: Z]
	lda ($01.b,S),Y		; B3 01 ; Load accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($00AB.w,X)		; FC AB 00 ; Jump to subroutine indirect indexed ($00AB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and #$61C1.w		; 29 C1 61 ; Logical AND #$61C1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr ($81AE.w,X)		; FC AE 81 ; Jump to subroutine indirect indexed ($81AE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $C825.w,X		; 1D 25 C8 ; OR accumulator with memory $C825.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3F23.w,Y		; 19 23 3F ; OR accumulator with memory $3F23.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7927.w,Y		; 19 27 79 ; OR accumulator with memory $7927.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $4047.w,Y		; 19 47 40 ; OR accumulator with memory $4047.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $7A27.w,X		; 3D 27 7A ; AND accumulator with memory $7A27.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cpy #$910B.w		; C0 0B 91 ; Compare #$910B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5B4A.w		; C0 4A 5B ; Compare #$5B4A.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$C0B3.w		; 09 B3 C0 ; Logical OR #$C0B3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$00F0.w		; 09 F0 00 ; Logical OR #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $F922.w,Y		; B9 22 F9 ; Load $F922.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($32.b,X)		; C1 32 ; Compare accumulator ($32.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $42B9.w,Y		; F9 B9 42 ; Subtract with carry $42B9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $52C1.w,Y		; F9 C1 52 ; Subtract with carry $52C1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $B1B0.w,Y		; F9 B0 B1 ; Subtract with carry $B1B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0088.w,X		; DD 88 00 ; Compare accumulator $0088.w,X [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $11.b,S		; A3 11 ; Load accumulator (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$6000.w		; E0 00 60 ; Compare #$6000.w with X register [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $2E		; 80 2E ; Branch always to $80, $2E [Flow: branch]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $A5		; 70 A5 ; Branch if overflow set to $70, $A5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc $1C3B.w		; EE 3B 1C ; Increment $1C3B.w [Flags: ZN]
	sta ($4F.b),Y		; 91 4F ; Store accumulator ($4F.b),Y [Reads: Accumulator, Direct Page, Y Index]
	jsr ($69E9.w,X)		; FC E9 69 ; Jump to subroutine indirect indexed ($69E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $6129.w,X		; FD 29 61 ; Subtract with carry $6129.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6149.w,X		; FD 49 61 ; Subtract with carry $6149.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E139.w,X		; FD 39 E1 ; Subtract with carry $E139.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($685B.w,X)		; FC 5B 68 ; Jump to subroutine indirect indexed ($685B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $687B.w,X		; FD 7B 68 ; Subtract with carry $687B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	lda ($DD.b)		; B2 DD ; Load accumulator (indirect) ($DD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($E7CB.w,X)		; FC CB E7 ; Jump to subroutine indirect indexed ($E7CB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E72B.w,X		; FD 2B E7 ; Subtract with carry $E72B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $CD.b		; 14 CD ; Test and reset bits $CD.b [Reads: Accumulator] [Flags: Z]
	cmp $27.b		; C5 27 ; Compare $27.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jmp.w [$5CC5]		; DC C5 5C ; Jump long indirect [$5CC5] [Flow: jump]
	cmp $14C5.w		; CD C5 14 ; Compare $14C5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$2434.w		; C9 34 24 ; Compare #$2434.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpy $2A71.w		; CC 71 2A ; Compare $2A71.w with Y register [Reads: Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit $58.b,X		; 34 58 ; Test bits $58.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $5871.w		; CC 71 58 ; Compare $5871.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp #$2B34.w		; C9 34 2B ; Compare #$2B34.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $DB55.w,X		; FD 55 DB ; Subtract with carry $DB55.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E75F.w,X		; FD 5F E7 ; Subtract with carry $E75F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $004A.w,X		; FE 4A 00 ; Increment memory $004A.w,X [Reads: X Index] [Flags: ZN]
	ldx #$01A0.w		; A2 A0 01 ; Load #$01A0.w into X register [Writes: X Index] [Flags: ZN]
	sbc $91028A.l,X		; FF 8A 02 91 ; Subtract with carry (long,X) $91028A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($61.b,S),Y		; B3 61 ; Load accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $814E.w,X		; FE 4E 81 ; Increment memory $814E.w,X [Reads: X Index] [Flags: ZN]
	sbc $E1838E.l,X		; FF 8E 83 E1 ; Subtract with carry (long,X) $E1838E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,S),Y		; B3 62 ; Load accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$4FA1.w		; A0 A1 4F ; Load #$4FA1.w into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($4F.b,X)		; A1 4F ; Load accumulator ($4F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $3DB0.w		; 9C B0 3D ; Store zero to $3DB0.w
	jmp.w [$3DB0]		; DC B0 3D ; Jump long indirect [$3DB0] [Flow: jump]
	ldy #$B2C7.w		; A0 C7 B2 ; Load #$B2C7.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $9FB3C3.l,X		; 9F C3 B3 9F ; Store accumulator (long,X) $9FB3C3.l,X [Reads: Accumulator, X Index]
	cmp [$B4.b],Y		; D7 B4 ; Compare accumulator (long indexed) [$B4.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	stz $8DC7.w		; 9C C7 8D ; Store zero to $8DC7.w
	cpx #$8EC7.w		; E0 C7 8E ; Compare #$8EC7.w with X register [Reads: X Index] [Flags: ZNC]
	inc $278E.w,X		; FE 8E 27 ; Increment memory $278E.w,X [Reads: X Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sbc ($91.b,S),Y		; F3 91 ; Subtract with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($90.b,S),Y		; 93 90 ; Store accumulator (stack relative indirect indexed) ($90.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cpy #$90D1.w		; C0 D1 90 ; Compare #$90D1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 01FFFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ENDS
