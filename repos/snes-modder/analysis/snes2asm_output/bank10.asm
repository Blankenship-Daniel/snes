.BANK 10 SLOT 0
.ORG $0000

.SECTION "Bank10" FORCE

	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $9A02AA.l,X		; FF AA 02 9A ; Subtract with carry (long,X) $9A02AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	inc $002A.w,X		; FE 2A 00 ; Increment memory $002A.w,X [Reads: X Index] [Flags: ZN]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: ZN]
	rol $A1B4.w,X		; 3E B4 A1 ; Rotate left $A1B4.w,X [Reads: X Index] [Flags: ZNC]
	eor $295AFF.l		; 4F FF 5A 29 ; Exclusive OR accumulator with memory (long) $295AFF.l [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $973B.w		; EE 3B 97 ; Increment $973B.w [Flags: ZN]
	lda $B797FA.l		; AF FA 97 B7 ; Load long $B797FA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta [$BF.b],Y		; 97 BF ; Store accumulator (long indexed) [$BF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $E87A.w,X		; FE 7A E8 ; Increment memory $E87A.w,X [Reads: X Index] [Flags: ZN]
	sbc ($DA.b,X)		; E1 DA ; Subtract with carry ($DA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7DFE.w,Y		; F9 FE 7D ; Subtract with carry $7DFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $CD.b,S		; A3 CD ; Load accumulator (stack relative) $CD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$DD.b		; C0 DD ; Compare #$DD.b with Y register [Reads: Y Index] [Flags: ZNC]
	pei ($B8.b)		; D4 B8 ; Push effective indirect address ($B8.b) [Reads: Direct Page] [Writes: Stack Pointer]
	bit $C488.w,X		; 3C 88 C4 ; Test bits $C488.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ror $EC.b,X		; 76 EC ; Rotate right $EC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cpy $77.b		; C4 77 ; Compare $77.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $10E5FF.l,X		; FF FF E5 10 ; Subtract with carry (long,X) $10E5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0082.w,X)		; FC 82 00 ; Jump to subroutine indirect indexed ($0082.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($23.b,S),Y		; 33 23 ; AND accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($AA.b,X)		; 01 AA ; Logical OR ($AA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $FF01.w		; 20 01 FF ; Jump to subroutine at $FF01.w [Writes: Stack Pointer] [Flow: call]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	and ($33.b,X)		; 21 33 ; Logical AND ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $81.b		; 86 81 ; Store X register to $81.b [Reads: X Index]
	sbc $8346.w,X		; FD 46 83 ; Subtract with carry $8346.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $61		; 50 61 ; Branch if overflow clear to $50, $61 [Flow: branch]
	.db $62, $FD, $45		; 62 FD 45 ; Push effective relative address $62, $FD, $45 [Writes: Stack Pointer]
	ora [$62.b]		; 07 62 ; OR accumulator with memory (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $05A5.w,X		; FE A5 05 ; Increment memory $05A5.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: ZN]
	jsr ($C8B2.w,X)		; FC B2 C8 ; Jump to subroutine indirect indexed ($C8B2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $BC032F.l,X		; 3F 2F 03 BC ; AND accumulator with memory (long,X) $BC032F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $72FF03.l		; 2F 03 FF 72 ; AND accumulator with memory (long) $72FF03.l [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jmp.w [$643F]		; DC 3F 64 ; Jump long indirect [$643F] [Flow: jump]
	sbc $C4CB75.l,X		; FF 75 CB C4 ; Subtract with carry (long,X) $C4CB75.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $FE04.w,X		; 5E 04 FE ; Logical shift right $FE04.w,X [Reads: X Index] [Flags: ZNC]
	cmp $C9.b,X		; D5 C9 ; Compare accumulator $C9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $54.b,X		; B4 54 ; Load Y register $54.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	pei ($4D.b)		; D4 4D ; Push effective indirect address ($4D.b) [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $47.b,X		; 56 47 ; Logical shift right $47.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	trb $4F.b		; 14 4F ; Test and reset bits $4F.b [Reads: Accumulator] [Flags: Z]
	mvp $64,$54		; 44 54 64 ; Move block positive $64,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $CB15.w,X		; FD 15 CB ; Subtract with carry $CB15.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $045C.w,X		; 3C 5C 04 ; Test bits $045C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsr ($C9B5.w,X)		; FC B5 C9 ; Jump to subroutine indirect indexed ($C9B5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $633F.w		; 2C 3F 63 ; Test bits $633F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsr ($0069.w,X)		; FC 69 00 ; Jump to subroutine indirect indexed ($0069.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E20289.l,X		; FF 89 02 E2 ; Subtract with carry (long,X) $E20289.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$62.b		; A0 62 ; Load #$62.b into Y register [Writes: Y Index] [Flags: ZN]
	sbc $9A038E.l,X		; FF 8E 03 9A ; Subtract with carry (long,X) $9A038E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($02.b,X)		; E1 02 ; Subtract with carry ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $012E.w,X		; FE 2E 01 ; Increment memory $012E.w,X [Reads: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($61.b)		; D2 61 ; Compare accumulator (indirect) ($61.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $052C.w,X		; FE 2C 05 ; Increment memory $052C.w,X [Reads: X Index] [Flags: ZN]
	adc #$C0.b		; 69 C0 ; Add #$C0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($5807.w)		; 6C 07 58 ; Jump indirect to ($5807.w) [Flow: jump]
	cmp ($62.b,S),Y		; D3 62 ; Compare accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc $836E.w,X		; FD 6E 83 ; Subtract with carry $836E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($C899.w,X)		; FC 99 C8 ; Jump to subroutine indirect indexed ($C899.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$9F.b],Y		; 37 9F ; AND accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $B4.b,S		; 03 B4 ; OR accumulator with stack relative $B4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $59FF03.l,X		; 9F 03 FF 59 ; Store accumulator (long,X) $59FF03.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $AC.b,X		; D5 AC ; Compare accumulator $AC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	eor $A54B.w,X		; 5D 4B A5 ; Exclusive OR accumulator with memory $A54B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $04.b,X		; D5 04 ; Compare accumulator $04.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $495D.w,X		; FE 5D 49 ; Increment memory $495D.w,X [Reads: X Index] [Flags: ZN]
	sty $C5.b,X		; 94 C5 ; Store Y register $C5.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $B65D.w		; 4D 5D B6 ; Exclusive OR $B65D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $64C54C.l		; 4F 4C C5 64 ; Exclusive OR accumulator with memory (long) $64C54C.l [Writes: Accumulator] [Flags: ZN]
	sbc $0B3D.w,X		; FD 3D 0B ; Subtract with carry $0B3D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $D2.b,X		; 34 D2 ; Test bits $D2.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsb $25.b		; 04 25 ; Test and set bits $25.b [Reads: Accumulator] [Flags: Z]
	ldy $FC63.w		; AC 63 FC ; Load $FC63.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $C109.w,X		; 9D 09 C1 ; Store accumulator to $C109.w,X [Reads: Accumulator, X Index]
	and $C1C8.w,X		; 3D C8 C1 ; AND accumulator with memory $C1C8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $C13F.w,Y		; 39 3F C1 ; AND accumulator with memory $C13F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $5DC179.l,X		; 3F 79 C1 5D ; AND accumulator with memory (long,X) $5DC179.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $7A3F.w,X		; DD 3F 7A ; Compare accumulator $7A3F.w,X [Reads: X Index] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor $56.b,X		; 55 56 ; Exclusive OR accumulator with memory $56.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $566C.w		; 2C 6C 56 ; Test bits $566C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	mvp $56,$6C		; 44 6C 56 ; Move block positive $56,$6C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $5594.w		; 2C 94 55 ; Test bits $5594.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	mvp $55,$94		; 44 94 55 ; Move block positive $55,$94 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ldy $5594.w,X		; BC 94 55 ; Load Y register $5594.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $B0, $A8		; B0 A8 ; Branch if carry set to $B0, $A8 [Flow: branch]
	jmp.w [$C7CF]		; DC CF C7 ; Jump long indirect [$C7CF] [Flow: jump]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $C1FACF.l		; CF CF FA C1 ; Compare accumulator (long) $C1FACF.l [Reads: Accumulator] [Flags: ZNC]
	lda ($F9.b)		; B2 F9 ; Load accumulator (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($60C1.w,X)		; FC C1 60 ; Jump to subroutine indirect indexed ($60C1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($60A1.w,X)		; FC A1 60 ; Jump to subroutine indirect indexed ($60A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $F9D3.w,Y		; 39 D3 F9 ; AND accumulator with memory $F9D3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $E1.b		; 24 E1 ; Test bits $E1.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $22E148.l		; 22 48 E1 22 ; Jump to subroutine long $22E148.l [Writes: Stack Pointer] [Flow: call]
	adc #$D2.b		; 69 D2 ; Add #$D2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy #$8B.b		; C0 8B ; Compare #$8B.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($90.b,S),Y		; F3 90 ; Subtract with carry (stack relative indirect indexed) ($90.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc $61.b,S		; 63 61 ; Add with carry (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$A0.b		; C0 A0 ; Compare #$A0.b with Y register [Reads: Y Index] [Flags: ZNC]
	adc $60.b,S		; 63 60 ; Add with carry (stack relative) $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($61.b,X)		; 01 61 ; Logical OR ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $610290.l,X		; FF 90 02 61 ; Subtract with carry (long,X) $610290.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $190451.l,X		; FF 51 04 19 ; Subtract with carry (long,X) $190451.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $0D.b		; 84 0D ; Store Y register to $0D.b [Reads: Y Index]
	eor ($61.b,X)		; 41 61 ; Exclusive OR accumulator with memory ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $FD81.w		; 6E 81 FD ; Rotate right $FD81.w [Flags: ZNC]
	ror $5883.w		; 6E 83 58 ; Rotate right $5883.w [Flags: ZNC]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $62, $68, $8A		; 62 68 8A ; Push effective relative address $62, $68, $8A [Writes: Stack Pointer]
	.db $62, $24, $85		; 62 24 85 ; Push effective relative address $62, $24, $85 [Writes: Stack Pointer]
	ora $8A25.w,Y		; 19 25 8A ; OR accumulator with memory $8A25.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $3409.w		; 9C 09 34 ; Store zero to $3409.w
	rep #$04		; C2 04 ; Reset processor status bits #$04 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $0B3C.w,X		; FD 3C 0B ; Subtract with carry $0B3C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $1CA6.w		; 4C A6 1C ; Jump to $1CA6.w [Flow: jump]
	jmp $64AA.w		; 4C AA 64 ; Jump to $64AA.w [Flow: jump]
	jmp $40647B.l		; 5C 7B 64 40 ; Jump long to $40647B.l [Flow: jump]
	adc $76FD03.l		; 6F 03 FD 76 ; Add with carry (long) $76FD03.l [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $8129.w,X		; FE 29 81 ; Increment memory $8129.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$83.b		; A9 83 ; Load #$83.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $81.b,X		; 94 81 ; Store Y register $81.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp #$A5.b		; C9 A5 ; Compare #$A5.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	stx $DC04.w		; 8E 04 DC ; Store X register to $DC04.w [Reads: X Index]
	sta ($64.b,X)		; 81 64 ; Store accumulator ($64.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $FECB78.l,X		; FF 78 CB FE ; Subtract with carry (long,X) $FECB78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$08.b],Y		; 57 08 ; Exclusive OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$0A.b],Y		; 77 0A ; Add with carry (long indexed) [$0A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $94DD2A.l		; AF 2A DD 94 ; Load long $94DD2A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ror $D422.w		; 6E 22 D4 ; Rotate right $D422.w [Flags: ZNC]
	ror $2422.w		; 6E 22 24 ; Rotate right $2422.w [Flags: ZNC]
	cmp ($22.b),Y		; D1 22 ; Compare accumulator ($22.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($22.b),Y		; D1 22 ; Compare accumulator ($22.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $F9.b,S		; C3 F9 ; Compare accumulator (stack relative) $F9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $A061.w,Y		; 19 61 A0 ; OR accumulator with memory $A061.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $C0		; 50 C0 ; Branch if overflow clear to $50, $C0 [Flow: branch]
	eor $C050.w,Y		; 59 50 C0 ; Exclusive OR accumulator with memory $C050.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($A3A4.w)		; 6C A4 A3 ; Jump indirect to ($A3A4.w) [Flow: jump]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpy #$68.b		; C0 68 ; Compare #$68.b with Y register [Reads: Y Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$8B.b		; C0 8B ; Compare #$8B.b with Y register [Reads: Y Index] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpy #$CA.b		; C0 CA ; Compare #$CA.b with Y register [Reads: Y Index] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpy #$8B.b		; C0 8B ; Compare #$8B.b with Y register [Reads: Y Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$CA.b		; C0 CA ; Compare #$CA.b with Y register [Reads: Y Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $01756D.l,X		; FF 6D 75 01 ; Subtract with carry (long,X) $01756D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0285.w		; 6D 85 02 ; Add $0285.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $8628FF.l,X		; FF FF 28 86 ; Subtract with carry (long,X) $8628FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $9954.w		; AC 54 99 ; Load $9954.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$41.b		; A9 41 ; Load #$41.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $5CC6.w		; 6D C6 5C ; Add $5CC6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $2FC6.w		; 6D C6 2F ; Add $2FC6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $26.b		; C6 26 ; Decrement $26.b [Reads: Direct Page] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	dec $4C.b		; C6 4C ; Decrement $4C.b [Reads: Direct Page] [Flags: ZN]
	lda #$C6.b		; A9 C6 ; Load #$C6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $C0.b		; 26 C0 ; Rotate left $C0.b [Reads: Direct Page] [Flags: ZNC]
	dec $4C.b		; C6 4C ; Decrement $4C.b [Reads: Direct Page] [Flags: ZN]
	cpy #$C6.b		; C0 C6 ; Compare #$C6.b with Y register [Reads: Y Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc $C6.b,X		; 75 C6 ; Add $C6.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $D8.b		; C6 D8 ; Decrement $D8.b [Reads: Direct Page] [Flags: ZN]
	adc $C6.b,X		; 75 C6 ; Add $C6.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $6140A2.l,X		; FF A2 40 61 ; Subtract with carry (long,X) $6140A2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FFFF.w		; 0E FF FF ; Arithmetic shift left $FFFF.w [Flags: ZNC]
	eor ($00.b),Y		; 51 00 ; Exclusive OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $C208.w		; 0E 08 C2 ; Arithmetic shift left $C208.w [Flags: ZNC]
	adc ($68.b,X)		; 61 68 ; Add with carry ($68.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $62, $68, $A2		; 62 68 A2 ; Push effective relative address $62, $68, $A2 [Writes: Stack Pointer]
	.db $62, $25, $B4		; 62 25 B4 ; Push effective relative address $62, $25, $B4 [Writes: Stack Pointer]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	eor $14C8.w,Y		; 59 C8 14 ; Exclusive OR accumulator with memory $14C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $2563.w		; AC 63 25 ; Load $2563.w into Y register [Writes: Y Index] [Flags: ZN]
	stz $FC03.w,X		; 9E 03 FC ; Store zero to $FC03.w,X [Reads: X Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor #$FD.b		; 49 FD ; Exclusive OR #$FD.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $C74C.w		; 4D 4C C7 ; Exclusive OR $C74C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and $FDC9.w,X		; 3D C9 FD ; AND accumulator with memory $FDC9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $5DCA.w,Y		; 79 CA 5D ; Add $5DCA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FD64.w		; AD 64 FD ; Load $FD64.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $FECB.w,X		; 7D CB FE ; Add $FECB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $8166.w,X		; FE 66 81 ; Increment memory $8166.w,X [Reads: X Index] [Flags: ZN]
	sbc $DA0261.l,X		; FF 61 02 DA ; Subtract with carry (long,X) $DA0261.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FE8366.l,X		; FF 66 83 FE ; Subtract with carry (long,X) $FE8366.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($C8.b),Y		; 91 C8 ; Store accumulator ($C8.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $2D.b		; A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta $C9.b,X		; 95 C9 ; Store accumulator to $C9.b,X [Reads: Accumulator, X Index]
	ldy $1E.b,X		; B4 1E ; Load Y register $1E.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($CA.b),Y		; 31 CA ; AND accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $642D.w		; CD 2D 64 ; Compare $642D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $B4CB35.l,X		; FF 35 CB B4 ; Subtract with carry (long,X) $B4CB35.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $8904.w,X		; 5E 04 89 ; Logical shift right $8904.w,X [Reads: X Index] [Flags: ZNC]
	ldy $0D.b,X		; B4 0D ; Load Y register $0D.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	bit #$C0.b		; 89 C0 ; Test bits #$C0.b with accumulator [Reads: Accumulator] [Flags: Z]
	asl $90D1.w		; 0E D1 90 ; Arithmetic shift left $90D1.w [Flags: ZNC]
	ora $10E4D1.l		; 0F D1 E4 10 ; OR accumulator with memory (long) $10E4D1.l [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc ($E8.b,X)		; 61 E8 ; Add with carry ($E8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $62, $94, $B5		; 62 94 B5 ; Push effective relative address $62, $94, $B5 [Writes: Stack Pointer]
	ora $C194.w,Y		; 19 94 C1 ; OR accumulator with memory $C194.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $9F		; B0 9F ; Branch if carry set to $B0, $9F [Flow: branch]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $D01B.w,X		; 9D 1B D0 ; Store accumulator to $D01B.w,X [Reads: Accumulator, X Index]
	cmp $B01C.w,Y		; D9 1C B0 ; Compare accumulator $B01C.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $BA9404.l,X		; DF 04 94 BA ; Compare accumulator (long,X) $BA9404.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	adc $DC.b,S		; 63 DC ; Add with carry (stack relative) $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	stz $14.b		; 64 14 ; Store zero to $14.b
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor #$C6.b		; 49 C6 ; Exclusive OR #$C6.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda [$F9.b],Y		; B7 F9 ; Load accumulator (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$D5.b		; 09 D5 ; Logical OR #$D5.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($88.b,X)		; A1 88 ; Load accumulator ($88.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit #$91.b		; 89 91 ; Test bits #$91.b with accumulator [Reads: Accumulator] [Flags: Z]
	ldy #$89.b		; A0 89 ; Load #$89.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp $A1.b,X		; D5 A1 ; Compare accumulator $A1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $91.b,X		; D5 91 ; Compare accumulator $91.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldx #$D5.b		; A2 D5 ; Load #$D5.b into X register [Writes: X Index] [Flags: ZN]
	sbc $A3.b,X		; F5 A3 ; Subtract $A3.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C2FEFF.l,X		; FF FF FE C2 ; Subtract with carry (long,X) $C2FEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FABBB3.l,X		; BF B3 BB FA ; Load long $FABBB3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc $01B5.w		; 6D B5 01 ; Add $01B5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $02C5.w		; 6D C5 02 ; Add $02C5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($6E.b),Y		; B1 6E ; Load accumulator ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($C1.b,X)		; 61 C1 ; Add with carry ($C1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $FF62.w		; 6E 62 FF ; Rotate right $FF62.w [Flags: ZNC]
	sbc $C6A11B.l,X		; FF 1B A1 C6 ; Subtract with carry (long,X) $C6A11B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $C6A3.w		; 4D A3 C6 ; Exclusive OR $C6A3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C6DC.w		; 4D DC C6 ; Exclusive OR $C6DC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $BB.b,X		; 94 BB ; Store Y register $BB.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ldy $CF94.w		; AC 94 CF ; Load $CF94.w into Y register [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $D0, $A3		; D0 A3 ; Branch if not equal to $D0, $A3 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $D0, $CF		; D0 CF ; Branch if not equal to $D0, $CF [Flow: branch]
	lda #$97.b		; A9 97 ; Load #$97.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $CDC6.w,X		; BC C6 CD ; Load Y register $CDC6.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy $B1C6.w,X		; BC C6 B1 ; Load Y register $B1C6.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $B1C6.w,X		; 9D C6 B1 ; Store accumulator to $B1C6.w,X [Reads: Accumulator, X Index]
	cmp $AAC6.w		; CD C6 AA ; Compare $AAC6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $C6.b,S		; 23 C6 ; AND accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp $FFF0C6.l		; 5C C6 F0 FF ; Jump long to $FFF0C6.l [Flow: jump]
	lda ($4A.b)		; B2 4A ; Load accumulator (indirect) ($4A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0451FF.l,X		; FF FF 51 04 ; Subtract with carry (long,X) $0451FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0061.w,X)		; FC 61 00 ; Jump to subroutine indirect indexed ($0061.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $6122.w,Y		; 19 22 61 ; OR accumulator with memory $6122.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($0165.w,X)		; FC 65 01 ; Jump to subroutine indirect indexed ($0165.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($05A5.w,X)		; FC A5 05 ; Jump to subroutine indirect indexed ($05A5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($84AA.w,X)		; FC AA 84 ; Jump to subroutine indirect indexed ($84AA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($806A.w,X)		; FC 6A 80 ; Jump to subroutine indirect indexed ($806A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $61BA.w,Y		; 19 BA 61 ; OR accumulator with memory $61BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($C891.w,X)		; FC 91 C8 ; Jump to subroutine indirect indexed ($C891.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sty $49.b,X		; 94 49 ; Store Y register $49.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	jsr ($4DD4.w,X)		; FC D4 4D ; Jump to subroutine indirect indexed ($4DD4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $55.b,X		; 34 55 ; Test bits $55.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	dec $49.b,X		; D6 49 ; Decrement memory $49.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	mvp $04,$66		; 44 66 04 ; Move block positive $04,$66 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $4B76.w,X		; FD 76 4B ; Subtract with carry $4B76.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $642E.w,X		; 5D 2E 64 ; Exclusive OR accumulator with memory $642E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $CA71.w,X		; FD 71 CA ; Subtract with carry $CA71.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $1C.b,X		; 35 1C ; Logical AND $1C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $4448.w,Y		; D9 48 44 ; Compare accumulator $4448.w,Y [Reads: Y Index] [Flags: ZNC]
	stx $03.b,Y		; 96 03 ; Store X register $03.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sbc $4A79.w,X		; FD 79 4A ; Subtract with carry $4A79.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $A5.b,X		; 34 A5 ; Test bits $A5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp $9BFC.w		; 4C FC 9B ; Jump to $9BFC.w [Flow: jump]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $C6.b		; 24 C6 ; Test bits $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta $35C9.w,X		; 9D C9 35 ; Store accumulator to $35C9.w,X [Reads: Accumulator, X Index]
	jmp.w [$FD04]		; DC 04 FD ; Jump long indirect [$FD04] [Flow: jump]
	adc $5DCB.w,X		; 7D CB 5D ; Add $5DCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $64.b		; A6 64 ; Load $64.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $0026.w,X		; FE 26 00 ; Increment memory $0026.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $01, $FF		; 62 01 FF ; Push effective relative address $62, $01, $FF [Writes: Stack Pointer]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $012A.w,X		; FE 2A 01 ; Increment memory $012A.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	inc $05AA.w,X		; FE AA 05 ; Increment memory $05AA.w,X [Reads: X Index] [Flags: ZN]
	lda #$B3.b		; A9 B3 ; Load #$B3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $D881.w		; AE 81 D8 ; Load $D881.w into X register [Writes: X Index] [Flags: ZN]
	inc $10.b		; E6 10 ; Increment $10.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $62, $FE, $86		; 62 FE 86 ; Push effective relative address $62, $FE, $86 [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy #$7E.b		; A0 7E ; Load #$7E.b into Y register [Writes: Y Index] [Flags: ZN]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	bit #$49.b		; 89 49 ; Test bits #$49.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $B0, $94		; B0 94 ; Branch if carry set to $B0, $94 [Flow: branch]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	cmp $B44D.w,Y		; D9 4D B4 ; Compare accumulator $B44D.w,Y [Reads: Y Index] [Flags: ZNC]
	lda $63.b		; A5 63 ; Load $63.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $09DB.w,X		; FE DB 09 ; Increment memory $09DB.w,X [Reads: X Index] [Flags: ZN]
	cpy $B2.b		; C4 B2 ; Compare $B2.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	tsb $B1.b		; 04 B1 ; Test and set bits $B1.b [Reads: Accumulator] [Flags: Z]
	adc $FF03.w		; 6D 03 FF ; Add $FF03.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $CA.b,X		; 76 CA ; Rotate right $CA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $647E.w,X		; DD 7E 64 ; Compare accumulator $647E.w,X [Reads: X Index] [Flags: ZNC]
	sbc $340B7B.l,X		; FF 7B 0B 34 ; Subtract with carry (long,X) $340B7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $22.b,X		; 75 22 ; Add $22.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $91.b,X		; 34 91 ; Test bits $91.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsl $227558.l		; 22 58 75 22 ; Jump to subroutine long $227558.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta ($22.b),Y		; [PATTERN: Memory clearing operation] 91 22 ; Store accumulator ($22.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy $C1.b,X		; B4 C1 ; Load Y register $C1.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	jsl $22C1D8.l		; 22 D8 C1 22 ; Jump to subroutine long $22C1D8.l [Writes: Stack Pointer] [Flow: call]
	stz $696C.w		; 9C 6C 69 ; Store zero to $696C.w
	stz $698B.w		; 9C 8B 69 ; Store zero to $698B.w
	and ($29.b)		; 32 29 ; AND accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($A1.b,X)		; 41 A1 ; Exclusive OR accumulator with memory ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($C1.b)		; 32 C1 ; AND accumulator with memory (indirect) ($C1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($7D.b)		; B2 7D ; Load accumulator (indirect) ($7D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($95.b,X)		; C1 95 ; Compare accumulator ($95.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($29.b)		; 32 29 ; AND accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $792D31.l,X		; 3F 31 2D 79 ; AND accumulator with memory (long,X) $792D31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $46		; 30 46 ; Branch if minus to $30, $46 [Flow: branch]
	mvp $4A,$41		; 44 41 4A ; Move block positive $4A,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $6541.w,Y		; 79 41 65 ; Add $6541.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $417A2D.l,X		; 5F 2D 7A 41 ; Exclusive OR accumulator with memory (long,X) $417A2D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($3F.b,X)		; A1 3F ; Load accumulator ($3F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($A6.b,X)		; 41 A6 ; Exclusive OR accumulator with memory ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $C230.w,Y		; 79 30 C2 ; Add $C230.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $31.b		; 46 31 ; Logical shift right $31.b [Reads: Direct Page] [Flags: ZNC]
	cmp $79.b		; C5 79 ; Compare $79.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($DD.b)		; 32 DD ; AND accumulator with memory (indirect) ($DD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $AE7AA5.l,X		; 5F A5 7A AE ; Exclusive OR accumulator with memory (long,X) $AE7AA5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	and $797EAD.l,X		; 3F AD 7E 79 ; AND accumulator with memory (long,X) $797EAD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $449B.w		; AC 9B 44 ; Load $449B.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp ($9C.b,X)		; C1 9C ; Compare accumulator ($9C.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	adc $B1C1.w,Y		; 79 C1 B1 ; Add $B1C1.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $497A7C.l,X		; DF 7C 7A 49 ; Compare accumulator (long,X) $497A7C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	adc [$F9.b]		; 67 F9 ; Add with carry (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$B3.b		; C9 B3 ; Compare #$B3.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $29FD.w,Y		; F9 FD 29 ; Subtract with carry $29FD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($08.b)		; 72 08 ; Add with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C0.b,S		; 63 C0 ; Add with carry (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $50, $C0		; 50 C0 ; Branch if overflow clear to $50, $C0 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $50, $C0		; 50 C0 ; Branch if overflow clear to $50, $C0 [Flow: branch]
	bit #$B3.b		; 89 B3 ; Test bits #$B3.b with accumulator [Reads: Accumulator] [Flags: Z]
	cpy #$89.b		; C0 89 ; Compare #$89.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	jmp.w [$A3F7]		; DC F7 A3 ; Jump long indirect [$A3F7] [Flow: jump]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($00.b)		; 72 00 ; Add with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E6FF.l,X		; FF FF E6 00 ; Subtract with carry (long,X) $00E6FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $8000.w,X		; FE 00 80 ; Increment memory $8000.w,X [Reads: X Index] [Flags: ZN]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$82.b		; C0 82 ; Compare #$82.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $82, $1B, $61		; 82 1B 61 ; Branch always long to $82, $1B, $61 [Flow: branch]
	inc $0107.w,X		; FE 07 01 ; Increment memory $0107.w,X [Reads: X Index] [Flags: ZN]
	sbc $9303C7.l,X		; FF C7 03 93 ; Subtract with carry (long,X) $9303C7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $02		; 70 02 ; Branch if overflow set to $70, $02 [Flow: branch]
	sbc ($1B.b)		; F2 1B ; Subtract with carry (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $C6, $17		; 62 C6 17 ; Push effective relative address $62, $C6, $17 [Writes: Stack Pointer]
	cpy $8F.b		; C4 8F ; Compare $8F.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor $C4.b,X		; 55 C4 ; Exclusive OR accumulator with memory $C4.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $55.b		; C6 55 ; Decrement $55.b [Reads: Direct Page] [Flags: ZN]
	cpy $8F.b		; C4 8F ; Compare $8F.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora [$C4.b],Y		; 17 C4 ; OR accumulator with memory (long indexed) [$C4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($09.b,S),Y		; 93 09 ; Store accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $FF09D3.l,X		; FF D3 09 FF ; Subtract with carry (long,X) $FF09D3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($09.b)		; B2 09 ; Load accumulator (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $761E80.l,X		; FF 80 1E 76 ; Subtract with carry (long,X) $761E80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $771E.w		; F4 1E 77 ; Push absolute address $771E.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lda $E135.w		; AD 35 E1 ; Load $E135.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $35.b		; C4 35 ; Compare $35.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sbc ($B8.b,X)		; E1 B8 ; Subtract with carry ($B8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b,X		; 36 FF ; Rotate left $FF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $A0FA.w,X		; FE FA A0 ; Increment memory $A0FA.w,X [Reads: X Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$CA.b		; C0 CA ; Compare #$CA.b with Y register [Reads: Y Index] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E1FFFF.l,X		; FF FF FF E1 ; Subtract with carry (long,X) $E1FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsl $A9FC61.l		; 22 61 FC A9 ; Jump to subroutine long $A9FC61.l [Writes: Stack Pointer] [Flow: call]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	and ($02.b,X)		; 21 02 ; Logical AND ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($0069.w,X)		; FC 69 00 ; Jump to subroutine indirect indexed ($0069.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $2A		; 62 FD 2A ; Push effective relative address $62, $FD, $2A [Writes: Stack Pointer]
	stx $58.b		; 86 58 ; Store X register to $58.b [Reads: X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $82, $FE, $2A		; 82 FE 2A ; Branch always long to $82, $FE, $2A [Flow: branch]
	.db $80, $98		; 80 98 ; Branch always to $80, $98 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sty $A9.b		; 84 A9 ; Store Y register to $A9.b [Reads: Y Index]
	sta ($61.b,X)		; 81 61 ; Store accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page]
	inc $05A7.w,X		; FE A7 05 ; Increment memory $05A7.w,X [Reads: X Index] [Flags: ZN]
	.db $90, $73		; 90 73 ; Branch if carry clear to $90, $73 [Flow: branch]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $10.b,S		; 83 10 ; Store accumulator (stack relative) $10.b,S [Reads: Accumulator, Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($10.b,S),Y		; F3 10 ; Subtract with carry (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $FF, $C7		; 62 FF C7 ; Push effective relative address $62, $FF, $C7 [Writes: Stack Pointer]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($02.b,S),Y		; 73 02 ; Add with carry (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CA0727.l,X		; FF 27 07 CA ; Subtract with carry (long,X) $CA0727.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $62, $FF		; 82 62 FF ; Branch always long to $82, $62, $FF [Flow: branch]
	and $9903.w		; 2D 03 99 ; Logical AND $9903.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($02.b)		; D2 02 ; Compare accumulator (indirect) ($02.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $012D.w,X		; FE 2D 01 ; Increment memory $012D.w,X [Reads: X Index] [Flags: ZN]
	sta ($13.b,S),Y		; 93 13 ; Store accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cpy $D1.b		; C4 D1 ; Compare $D1.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora ($C4.b,S),Y		; 13 C4 ; OR accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $51		; 90 51 ; Branch if carry clear to $90, $51 [Flow: branch]
	cpy $E0.b		; C4 E0 ; Compare $E0.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor ($C4.b),Y		; 51 C4 ; Exclusive OR accumulator with memory ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $4892.w,X		; FE 92 48 ; Increment memory $4892.w,X [Reads: X Index] [Flags: ZN]
	ldy $26.b,X		; B4 26 ; Load Y register $26.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($4A.b)		; 32 4A ; AND accumulator with memory (indirect) ($4A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $36.b		; A4 36 ; Load $36.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sty $C9.b,X		; 94 C9 ; Store Y register $C9.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ldy $4E.b,X		; B4 4E ; Load Y register $4E.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	bit $CB.b,X		; 34 CB ; Test bits $CB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $6436.w		; CC 36 64 ; Compare $6436.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $18C3.w,X		; FE C3 18 ; Increment memory $18C3.w,X [Reads: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($07.b),Y		; 31 07 ; AND accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $B01A23.l,X		; FF 23 1A B0 ; Subtract with carry (long,X) $B01A23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FE67.w,Y		; 39 67 FE ; AND accumulator with memory $FE67.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $99.b		; C4 99 ; Compare $99.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor #$08.b		; 49 08 ; Exclusive OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $C89B24.l,X		; FF 24 9B C8 ; Subtract with carry (long,X) $C89B24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $B868.w,Y		; 39 68 B8 ; AND accumulator with memory $B868.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
.ACCU 16
	rep #$A3		; C2 A3
	jsr $A322.w		; 20 22 A3 ; Jump to subroutine at $A322.w [Writes: Stack Pointer] [Flow: call]
	jsr $A369.w		; 20 69 A3 ; Jump to subroutine at $A369.w [Writes: Stack Pointer] [Flow: call]
	jmp $20DF22.l		; 5C 22 DF 20 ; Jump long to $20DF22.l [Flow: jump]
	adc #$143F.w		; 69 3F 14 ; Add #$143F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $0008.w,Y		; F9 08 00 ; Subtract with carry $0008.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C013.w,Y		; 59 13 C0 ; Exclusive OR accumulator with memory $C013.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C053.w,Y		; 59 53 C0 ; Exclusive OR accumulator with memory $C053.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C089.w,Y		; 59 89 C0 ; Exclusive OR accumulator with memory $C089.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$C081.w		; 89 81 C0 ; Test bits #$C081.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$00A0.w		; 89 A0 00 ; Test bits #$00A0.w with accumulator [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C083.w,Y		; D9 83 C0 ; Compare accumulator $C083.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $C0C1.w,Y		; D9 C1 C0 ; Compare accumulator $C0C1.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $820A61.l,X		; FF 61 0A 82 ; Subtract with carry (long,X) $820A61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080051.l,X		; FF 51 00 08 ; Subtract with carry (long,X) $080051.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($0D.b,S),Y		; B3 0D ; Load accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $61.b,Y		; B6 61 ; Load X register $61.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	mvn $0F,$93		; 54 93 0F ; Move block negative $0F,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ldx $62.b,Y		; B6 62 ; Load X register $62.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	trb $B0.b		; 14 B0 ; Test and reset bits $B0.b [Reads: Accumulator] [Flags: Z]
	ora $9C2D.w,Y		; 19 2D 9C ; OR accumulator with memory $9C2D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $54.b,S		; 03 54 ; OR accumulator with stack relative $54.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $151B.w		; 9C 1B 15 ; Store zero to $151B.w
	ldy $63.b,X		; B4 63 ; Load Y register $63.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr ($C95D.w,X)		; FC 5D C9 ; Jump to subroutine indirect indexed ($C95D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $DE.b		; 25 DE ; Logical AND $DE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	adc $5DCB.w,X		; 7D CB 5D ; Add $5DCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $64.b,X		; B4 64 ; Load Y register $64.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	inc $002A.w,X		; FE 2A 00 ; Increment memory $002A.w,X [Reads: X Index] [Flags: ZN]
	sta $01A3.w,Y		; 99 A3 01 ; Store accumulator to $01A3.w,Y [Reads: Accumulator, Y Index]
	sbc $D1024A.l,X		; FF 4A 02 D1 ; Subtract with carry (long,X) $D1024A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,S),Y		; B3 62 ; Load accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FE834E.l,X		; FF 4E 83 FE ; Subtract with carry (long,X) $FE834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy $AF.b		; A4 AF ; Load $AF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sty $BD.b,X		; 94 BD ; Store Y register $BD.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jmp $CFA4C9.l		; 5C C9 A4 CF ; Jump long to $CFA4C9.l [Flow: jump]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	trb $C4CB.w		; 1C CB C4 ; Test and reset bits $C4CB.w [Reads: Accumulator] [Flags: Z]
	lda $9464.w,X		; BD 64 94 ; Load $9464.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $C422.w,X		; DD 22 C4 ; Compare accumulator $C422.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$A822]		; DC 22 A8 ; Jump long indirect [$A822] [Flow: jump]
	cmp $9009F9.l		; CF F9 09 90 ; Compare accumulator (long) $9009F9.l [Reads: Accumulator] [Flags: ZNC]
	ldy #$59.b		; A0 59 ; Load #$59.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $A2		; 90 A2 ; Branch if carry clear to $90, $A2 [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	sbc ($A3.b,X)		; E1 A3 ; Subtract with carry ($A3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$E1.b		; C0 E1 ; Compare #$E1.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $ACFCFF.l,X		; FF FF FC AC ; Subtract with carry (long,X) $ACFCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FD.b		; 24 FD ; Test bits $FD.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $3124.w		; 2C 24 31 ; Test bits $3124.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $B0, $C8		; B0 C8 ; Branch if carry set to $B0, $C8 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	clv		; B8 ; Clear overflow flag [Flags: V]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($AD.b),Y		; 31 AD ; AND accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $79B230.l,X		; 3F 30 B2 79 ; AND accumulator with memory (long,X) $79B230.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $BC		; 30 BC ; Branch if minus to $30, $BC [Flow: branch]
	mvp $C0,$38		; 44 38 C0 ; Move block positive $C0,$38 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $C538.w,Y		; 79 38 C5 ; Add $C538.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	mvp $7A,$C0		; 44 C0 7A ; Move block positive $7A,$C0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $43,$BC		; 44 BC 43 ; Move block positive $43,$BC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jmp $7AB2.w		; 4C B2 7A ; Jump to $7AB2.w [Flow: jump]
	adc $01B5.w		; 6D B5 01 ; Add $01B5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $02C5.w		; 6D C5 02 ; Add $02C5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $EE		; 30 EE ; Branch if minus to $30, $EE [Flow: branch]
	adc ($40.b,X)		; 61 40 ; Add with carry ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF62.w		; EE 62 FF ; Increment $FF62.w [Flags: ZN]
	sbc $ACB714.l,X		; FF 14 B7 AC ; Subtract with carry (long,X) $ACB714.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $9F		; 50 9F ; Branch if overflow clear to $50, $9F [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($9F.b),Y		; 31 9F ; AND accumulator with memory ($9F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	dec $97.b		; C6 97 ; Decrement $97.b [Reads: Direct Page] [Flags: ZN]
	lda $97C6.w		; AD C6 97 ; Load $97C6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $8148B2.l,X		; FF B2 48 81 ; Subtract with carry (long,X) $8148B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $4091.w		; 0E 91 40 ; Arithmetic shift left $4091.w [Flags: ZNC]
	sta ($16.b),Y		; 91 16 ; Store accumulator ($16.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sbc $04E5FF.l,X		; FF FF E5 04 ; Subtract with carry (long,X) $04E5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0081.w,X)		; FC 81 00 ; Jump to subroutine indirect indexed ($0081.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$0D94.w		; 09 94 0D ; Logical OR #$0D94.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0EA8.w		; 09 A8 0E ; Logical OR #$0EA8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$6198.w		; 09 98 61 ; Logical OR #$6198.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($31.b,X)		; 61 31 ; Add with carry ($31.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $036D.w,X		; FD 6D 03 ; Subtract with carry $036D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $629B.w,Y		; 59 9B 62 ; Exclusive OR accumulator with memory $629B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0261.w,X		; FD 61 02 ; Subtract with carry $0261.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $031D.w,X		; 3C 1D 03 ; Test bits $031D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $CA31.w,X		; FD 31 CA ; Subtract with carry $CA31.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $94.b,X		; 15 94 ; OR accumulator with memory $94.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A914.w,Y		; 19 14 A9 ; OR accumulator with memory $A914.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $9B.b		; 14 9B ; Test and reset bits $9B.b [Reads: Accumulator] [Flags: Z]
	adc $2E.b,S		; 63 2E ; Add with carry (stack relative) $2E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $C7		; 30 C7 ; Branch if minus to $30, $C7 [Flow: branch]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	bit $4F4B.w,X		; 3C 4B 4F ; Test bits $4F4B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $AE4C64.l		; 2F 64 4C AE ; AND accumulator with memory (long) $AE4C64.l [Writes: Accumulator] [Flags: ZN]
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	and $3CC8.w,Y		; 39 C8 3C ; AND accumulator with memory $3CC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($C8.b,X)		; 61 C8 ; Add with carry ($C8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sta $34C8.w,Y		; 99 C8 34 ; Store accumulator to $34C8.w,Y [Reads: Accumulator, Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $799D35.l,X		; 3F 35 9D 79 ; AND accumulator with memory (long,X) $799D35.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $B7.b,X		; 34 B7 ; Test bits $B7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor #$7A9D.w		; 49 9D 7A ; Exclusive OR #$7A9D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $3F61.w,X		; 3C 61 3F ; Test bits $3F61.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $7965.w,X		; 3D 65 79 ; AND accumulator with memory $7965.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $407D.w,X		; 3C 7D 40 ; Test bits $407D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	eor #$7A65.w		; 49 65 7A ; Exclusive OR #$7A65.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $3F39.w,X		; 3C 39 3F ; Test bits $3F39.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $793D.w,X		; 3D 3D 79 ; AND accumulator with memory $793D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $4055.w,X		; 3C 55 40 ; Test bits $4055.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	eor #$7A3D.w		; 49 3D 7A ; Exclusive OR #$7A3D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($A0.b,X)		; 81 A0 ; Store accumulator ($A0.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora #$A1BD.w		; 09 BD A1 ; Logical OR #$A1BD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$C0E1.w		; 49 E1 C0 ; Exclusive OR #$C0E1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	.db $30, $16		; 30 16 ; Branch if minus to $30, $16 [Flow: branch]
	sbc $1451FF.l,X		; FF FF 51 14 ; Subtract with carry (long,X) $1451FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($00A1.w,X)		; FC A1 00 ; Jump to subroutine indirect indexed ($00A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($81A6.w,X)		; FC A6 81 ; Jump to subroutine indirect indexed ($81A6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0221.w,X		; FD 21 02 ; Subtract with carry $0221.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $8326.w,X		; FD 26 83 ; Subtract with carry $8326.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0069.w,X)		; FC 69 00 ; Jump to subroutine indirect indexed ($0069.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl $A319.w		; 0E 19 A3 ; Arithmetic shift left $A319.w [Flags: ZNC]
	adc ($C1.b,X)		; 61 C1 ; Add with carry ($C1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	cmp $62BA.w,Y		; D9 BA 62 ; Compare accumulator $62BA.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $89836E.l,X		; FF 6E 83 89 ; Subtract with carry (long,X) $89836E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $FD03.w,X		; 9E 03 FD ; Store zero to $FD03.w,X [Reads: X Index]
	sbc $C0C8.w,Y		; F9 C8 C0 ; Subtract with carry $C0C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $CC1B.w,X		; 9D 1B CC ; Store accumulator to $CC1B.w,X [Reads: Accumulator, X Index]
	lda $FF64.w,Y		; B9 64 FF ; Load $FF64.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $AC4B.w,X		; 3C 4B AC ; Test bits $AC4B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp [$04.b]		; C7 04 ; Compare accumulator (long) [$04.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $4F7C.w,X		; FE 7C 4F ; Increment memory $4F7C.w,X [Reads: X Index] [Flags: ZN]
	stz $64D4.w		; 9C D4 64 ; Store zero to $64D4.w
	inc $CB7D.w,X		; FE 7D CB ; Increment memory $CB7D.w,X [Reads: X Index] [Flags: ZN]
	lsr $DC.b,X		; 56 DC ; Logical shift right $DC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	ora $44C9.w,X		; 1D C9 44 ; OR accumulator with memory $44C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $63.b		; C6 63 ; Decrement $63.b [Reads: Direct Page] [Flags: ZN]
	sbc $481B.w,X		; FD 1B 48 ; Subtract with carry $481B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $B4.b,X		; 55 B4 ; Exclusive OR accumulator with memory $B4.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jmp $AC7C.w		; 4C 7C AC ; Jump to $AC7C.w [Flow: jump]
	adc $3D.b,S		; 63 3D ; Add with carry (stack relative) $3D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jsl $3B3BF9.l		; 22 F9 3B 3B ; Jump to subroutine long $3B3BF9.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor $3B.b,S		; 43 3B ; Exclusive OR accumulator with stack relative $3B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor $4B.b,S		; 43 4B ; Exclusive OR accumulator with stack relative $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit $A9.b,X		; 34 A9 ; Test bits $A9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp $B044.w,X		; DD 44 B0 ; Compare accumulator $B044.w,X [Reads: X Index] [Flags: ZNC]
	jsl $F99E51.l		; 22 51 9E F9 ; Jump to subroutine long $F99E51.l [Writes: Stack Pointer] [Flow: call]
	adc ($9E.b,X)		; 61 9E ; Add with carry ($9E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9E71.w,Y		; F9 71 9E ; Subtract with carry $9E71.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C23D.w,Y		; F9 3D C2 ; Subtract with carry $C23D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9F5B.w,Y		; F9 5B 9F ; Subtract with carry $9F5B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $9C78FA.l,X		; 9F FA 78 9C ; Store accumulator (long,X) $9C78FA.l,X [Reads: Accumulator, X Index]
	adc #$DC40.w		; 69 40 DC ; Add #$DC40.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$C7B8.w		; 69 B8 C7 ; Add #$C7B8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $DBD3.w,Y		; F9 D3 DB ; Subtract with carry $DBD3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp ($E3.b,S),Y		; D3 E3 ; Compare accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $22.b,X		; D5 22 ; Compare accumulator $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $69D6.w		; AC D6 69 ; Load $69D6.w into Y register [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $C013.w,Y		; 59 13 C0 ; Exclusive OR accumulator with memory $C013.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C052.w,Y		; 59 52 C0 ; Exclusive OR accumulator with memory $C052.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $91C5A1.l,X		; DF A1 C5 91 ; Compare accumulator (long,X) $91C5A1.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ldx #$E8.b		; A2 E8 ; Load #$E8.b into X register [Writes: X Index] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $C859FF.l,X		; FF FF 59 C8 ; Subtract with carry (long,X) $C859FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $C7.b,X		; 55 C7 ; Exclusive OR accumulator with memory $C7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $79CB54.l,X		; 3F 54 CB 79 ; AND accumulator with memory (long,X) $79CB54.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $DB.b,X		; 55 DB ; Exclusive OR accumulator with memory $DB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sei		; 78 ; Set interrupt disable flag [Flags: I]
	wai		; CB ; Wait for interrupt
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sty $C8AE.w		; 8C AE C8 ; Store Y register to $C8AE.w [Reads: Y Index]
	sty $3FAD.w		; 8C AD 3F ; Store Y register to $3FAD.w [Reads: Y Index]
	stx $79B1.w		; 8E B1 79 ; Store X register to $79B1.w [Reads: X Index]
	sty $40D9.w		; 8C D9 40 ; Store Y register to $40D9.w [Reads: Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($7A.b),Y		; B1 7A ; Load accumulator ($7A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $A2C0FF.l,X		; FF FF C0 A2 ; Subtract with carry (long,X) $A2C0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	dec $83.b		; C6 83 ; Decrement $83.b [Reads: Direct Page] [Flags: ZN]
	ldx #$C6.b		; A2 C6 ; Load #$C6.b into X register [Writes: X Index] [Flags: ZN]
	bit #$C6C9.w		; 89 C9 C6 ; Test bits #$C6C9.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda $C6B8.w,X		; BD B8 C6 ; Load $C6B8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $C6C0.w,X		; BD C0 C6 ; Load $C6C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $0E81.w		; 2E 81 0E ; Rotate left $0E81.w [Flags: ZNC]
	sbc $00E0FF.l,X		; FF FF E0 00 ; Subtract with carry (long,X) $00E0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0125.w,X)		; FC 25 01 ; Jump to subroutine indirect indexed ($0125.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($05A5.w,X)		; FC A5 05 ; Jump to subroutine indirect indexed ($05A5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($81A6.w,X)		; FC A6 81 ; Jump to subroutine indirect indexed ($81A6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8326.w,X		; FD 26 83 ; Subtract with carry $8326.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0725.w,X		; FD 25 07 ; Subtract with carry $0725.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $03A5.w,X		; FD A5 03 ; Subtract with carry $03A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0125.w,X		; FE 25 01 ; Increment memory $0125.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $05A5.w,X		; FE A5 05 ; Increment memory $05A5.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: ZN]
	sbc $C88326.l,X		; FF 26 83 C8 ; Subtract with carry (long,X) $C88326.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D80725.l,X		; FF 25 07 D8 ; Subtract with carry (long,X) $D80725.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FC03A5.l,X		; FF A5 03 FC ; Subtract with carry (long,X) $FC03A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$2A00.w		; A9 00 2A ; Load #$2A00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($81AE.w,X)		; FC AE 81 ; Jump to subroutine indirect indexed ($81AE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0229.w,X		; FD 29 02 ; Subtract with carry $0229.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$62.b		; A2 62 ; Load #$62.b into X register [Writes: X Index] [Flags: ZN]
	sbc $062B.w,X		; FD 2B 06 ; Subtract with carry $062B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $02AB.w,X		; FD AB 02 ; Subtract with carry $02AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $83AC.w,X		; FD AC 83 ; Subtract with carry $83AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4887.w		; 2C 87 48 ; Test bits $4887.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $2E		; 62 FD 2E ; Push effective relative address $62, $FD, $2E [Writes: Stack Pointer]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $04AB.w,X		; FE AB 04 ; Increment memory $04AB.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$61.b		; A2 61 ; Load #$61.b into X register [Writes: X Index] [Flags: ZN]
	inc $00A9.w,X		; FE A9 00 ; Increment memory $00A9.w,X [Reads: X Index] [Flags: ZN]
	sbc $C80229.l,X		; FF 29 02 C8 ; Subtract with carry (long,X) $C80229.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$62.b		; A2 62 ; Load #$62.b into X register [Writes: X Index] [Flags: ZN]
	sbc $D8062B.l,X		; FF 2B 06 D8 ; Subtract with carry (long,X) $D8062B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF02AB.l,X		; FF AB 02 FF ; Subtract with carry (long,X) $FF02AB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $D883.w		; AC 83 D8 ; Load $D883.w into Y register [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $C887.w		; 2C 87 C8 ; Test bits $C887.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $2E		; 62 FF 2E ; Push effective relative address $62, $FF, $2E [Writes: Stack Pointer]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	ldx $A881.w		; AE 81 A8 ; Load $A881.w into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $9885.w		; AC 85 98 ; Load $9885.w into Y register [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $2A81.w		; 2C 81 2A ; Test bits $2A81.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($C8.b,X)		; 21 C8 ; Logical AND ($C8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $23.b		; 26 23 ; Rotate left $23.b [Reads: Direct Page] [Flags: ZNC]
	and $792625.l,X		; 3F 25 26 79 ; AND accumulator with memory (long,X) $792625.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $43.b		; 26 43 ; Rotate left $43.b [Reads: Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $7A26.w,Y		; 59 26 7A ; Exclusive OR accumulator with memory $7A26.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($C8.b,X)		; 21 C8 ; Logical AND ($C8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx $23.b		; A6 23 ; Load $23.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	and $7926A5.l,X		; 3F A5 26 79 ; AND accumulator with memory (long,X) $7926A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $43.b		; A6 43 ; Load $43.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $7A26.w,Y		; D9 26 7A ; Compare accumulator $7A26.w,Y [Reads: Y Index] [Flags: ZNC]
	inc $A453.w,X		; FE 53 A4 ; Increment memory $A453.w,X [Reads: X Index] [Flags: ZN]
	sbc $EEA473.l,X		; FF 73 A4 EE ; Subtract with carry (long,X) $EEA473.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $DBFE.w,Y		; BE FE DB ; Load X register $DBFE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $C3.b,S		; E3 C3 ; Subtract stack-relative $C3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora #$C061.w		; 09 61 C0 ; Logical OR #$C061.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C061.w,Y		; 59 61 C0 ; Exclusive OR accumulator with memory $C061.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$C093.w		; 09 93 C0 ; Logical OR #$C093.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$C0D2.w		; 09 D2 C0 ; Logical OR #$C0D2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C091.w,Y		; 59 91 C0 ; Exclusive OR accumulator with memory $C091.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C0D9.w,Y		; 59 D9 C0 ; Exclusive OR accumulator with memory $C0D9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$C061.w		; 89 61 C0 ; Test bits #$C061.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $C061.w,Y		; D9 61 C0 ; Compare accumulator $C061.w,Y [Reads: Y Index] [Flags: ZNC]
	bit #$C091.w		; 89 91 C0 ; Test bits #$C091.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $C091.w,Y		; D9 91 C0 ; Compare accumulator $C091.w,Y [Reads: Y Index] [Flags: ZNC]
	bit #$C0D9.w		; 89 D9 C0 ; Test bits #$C0D9.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $C0D9.w,Y		; D9 D9 C0 ; Compare accumulator $C0D9.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $2E80.w		; 2E 80 2E ; Rotate left $2E80.w [Flags: ZNC]
	.db $82, $2E, $81		; 82 2E 81 ; Branch always long to $82, $2E, $81 [Flow: branch]
	rol $0E61.w		; 2E 61 0E ; Rotate left $0E61.w [Flags: ZNC]
	sbc $1CE0FF.l,X		; FF FF E0 1C ; Subtract with carry (long,X) $1CE0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $C2.b,S		; 23 C2 ; AND accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $C2.b,S		; 23 C2 ; AND accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $C2.b,S		; 23 C2 ; AND accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $C2.b,S		; 23 C2 ; AND accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $C2.b,S		; 63 C2 ; Add with carry (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	adc $C2.b,S		; 63 C2 ; Add with carry (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc $C2.b,S		; 63 C2 ; Add with carry (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc $C2.b,S		; 63 C2 ; Add with carry (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C2.b,S		; A3 C2 ; Load accumulator (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	lda $C2.b,S		; A3 C2 ; Load accumulator (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $C2.b,S		; A3 C2 ; Load accumulator (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda $C2.b,S		; A3 C2 ; Load accumulator (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
.INDEX 16
	rep #$5B		; C2 5B
	cld		; D8 ; Clear decimal flag [Flags: D]
.INDEX 16
	rep #$9B		; C2 9B
	cld		; D8 ; Clear decimal flag [Flags: D]
.INDEX 16
	rep #$D8		; C2 D8
	cld		; D8 ; Clear decimal flag [Flags: D]
.INDEX 16
	rep #$17		; C2 17
	ora $1F5727.l,X		; 1F 27 57 1F ; Logical OR long $1F5727.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$97.b]		; 27 97 ; AND accumulator with memory (long) [$97.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1FD427.l,X		; 1F 27 D4 1F ; Logical OR long $1FD427.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$17.b]		; 27 17 ; AND accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $6A.b,S		; 23 6A ; AND accumulator with stack relative $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$63.b],Y		; 17 63 ; OR accumulator with memory (long indexed) [$63.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$A3.b],Y		; 17 A3 ; OR accumulator with memory (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $E1.b		; 14 E1 ; Test and reset bits $E1.b [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$EB.b],Y		; 17 EB ; OR accumulator with memory (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	eor [$EB.b],Y		; 57 EB ; Exclusive OR accumulator with memory (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta [$EB.b],Y		; 97 EB ; Store accumulator (long indexed) [$EB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pei ($EB.b)		; D4 EB ; Push effective indirect address ($EB.b) [Reads: Direct Page] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $6B.b,S		; 23 6B ; AND accumulator with stack relative $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $6B.b,S		; A3 6B ; Load accumulator (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc ($6B.b,X)		; E1 6B ; Subtract with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($C4.b,X)		; 21 C4 ; Logical AND ($C4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $B8.b		; C4 B8 ; Compare $B8.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	cpy $32.b		; C4 32 ; Compare $32.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy $80.b		; C4 80 ; Compare $80.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $42, $C4		; 42 C4 ; Reserved instruction
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($C4.b)		; 72 C4 ; Add with carry (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $6B		; 50 6B ; Branch if overflow clear to $50, $6B [Flow: branch]
	cpy $81.b		; C4 81 ; Compare $81.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sta ($C4.b),Y		; 91 C4 ; Store accumulator ($C4.b),Y [Reads: Accumulator, Direct Page, Y Index]
	adc #$C4C8.w		; 69 C8 C4 ; Add #$C4C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$1DC9.w		; 69 C9 1D ; Add #$1DC9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$12B8.w		; 69 B8 12 ; Add #$12B8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($B4.b,X)		; 01 B4 ; Logical OR ($B4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	adc #$B3B6.w		; 69 B6 B3 ; Add #$B3B6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$7AC9.w		; 69 C9 7A ; Add #$7AC9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	nop		; EA ; No operation
	cop $B8.b		; 02 B8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sty $C8.b,X		; 94 C8 ; Store Y register $C8.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	eor #$B894.w		; 49 94 B8 ; Exclusive OR #$B894.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C394.w,Y		; 59 94 C3 ; Exclusive OR accumulator with memory $C394.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and ($43.b,S),Y		; 33 43 ; AND accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	adc ($FA.b,S),Y		; 73 FA ; Add with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit #$F942.w		; 89 42 F9 ; Test bits #$F942.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor ($6A.b),Y		; 51 6A ; Exclusive OR accumulator with memory ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $9259.w,Y		; F9 59 92 ; Subtract with carry $9259.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CA69.w,Y		; F9 69 CA ; Subtract with carry $CA69.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6383.w,Y		; F9 83 63 ; Subtract with carry $6383.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $50, $78		; 50 78 ; Branch if overflow clear to $50, $78 [Flow: branch]
	cmp $938B.w,X		; DD 8B 93 ; Compare accumulator $938B.w,X [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $A3.b,S		; 83 A3 ; Store accumulator (stack relative) $A3.b,S [Reads: Accumulator, Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $D3.b,S		; 83 D3 ; Store accumulator (stack relative) $D3.b,S [Reads: Accumulator, Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $812E.w		; 20 2E 81 ; Jump to subroutine at $812E.w [Writes: Stack Pointer] [Flow: call]
	asl $FFFF.w		; 0E FF FF ; Arithmetic shift left $FFFF.w [Flags: ZNC]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $1BF994.l,X		; 3F 94 F9 1B ; AND accumulator with memory (long,X) $1BF994.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $E2.b,S		; A3 E2 ; Load accumulator (stack relative) $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $E2.b,S		; A3 E2 ; Load accumulator (stack relative) $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
.INDEX 8
	sep #$58		; E2 58
	cld		; D8 ; Clear decimal flag [Flags: D]
.INDEX 8
	sep #$1A		; E2 1A
	ldy #$F9.b		; A0 F9 ; Load #$F9.b into Y register [Writes: Y Index] [Flags: ZN]
	rol $A0.b,X		; 36 A0 ; Rotate left $A0.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $A052.w,Y		; F9 52 A0 ; Subtract with carry $A052.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C81A.w,Y		; F9 1A C8 ; Subtract with carry $C81A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C852.w,Y		; F9 52 C8 ; Subtract with carry $C852.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1CE2FF.l,X		; FF FF E2 1C ; Subtract with carry (long,X) $1CE2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($00E1.w,X)		; FC E1 00 ; Jump to subroutine indirect indexed ($00E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $6198.w,Y		; 39 98 61 ; AND accumulator with memory $6198.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($41EB.w,X)		; FC EB 41 ; Jump to subroutine indirect indexed ($41EB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $02.b,X		; B5 02 ; Load $02.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($C1.b),Y		; 51 C1 ; Exclusive OR accumulator with memory ($C1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $FD.b		; 45 FD ; Exclusive OR $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $FE81.w		; 4E 81 FE ; Logical shift right $FE81.w [Flags: ZNC]
	sbc ($02.b,X)		; E1 02 ; Subtract with carry ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $6298.w,Y		; B9 98 62 ; Load $6298.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $43EB.w,X		; FE EB 43 ; Increment memory $43EB.w,X [Reads: X Index] [Flags: ZN]
	.db $B0, $B5		; B0 B5 ; Branch if carry set to $B0, $B5 [Flow: branch]
	cop $A1.b		; 02 A1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($62.b,X)		; C1 62 ; Compare accumulator ($62.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	inc $478B.w,X		; FE 8B 47 ; Increment memory $478B.w,X [Reads: X Index] [Flags: ZN]
	inc $838E.w,X		; FE 8E 83 ; Increment memory $838E.w,X [Reads: X Index] [Flags: ZN]
	sbc $C811.w,X		; FD 11 C8 ; Subtract with carry $C811.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $1E.b,X		; 56 1E ; Logical shift right $1E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($CA.b),Y		; B1 CA ; Load accumulator ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$2F.b]		; 47 2F ; Exclusive OR accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit #$A854.w		; 89 54 A8 ; Test bits #$A854.w with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $5D.b		; 04 5D ; Test and set bits $5D.b [Reads: Accumulator] [Flags: Z]
	ldy $63.b,X		; B4 63 ; Load Y register $63.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc $8D7A.w,X		; FD 7A 8D ; Subtract with carry $8D7A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C97D.w,X		; FD 7D C9 ; Subtract with carry $C97D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $04DC.w		; 6D DC 04 ; Add $04DC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $FE642F.l		; AF 2F 64 FE ; Load long $FE642F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ldy $A8.b		; A4 A8 ; Load $A8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $95.b		; 04 95 ; Test and set bits $95.b [Reads: Accumulator] [Flags: Z]
	ldy $64.b,X		; B4 64 ; Load Y register $64.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	inc $8F5A.w,X		; FE 5A 8F ; Increment memory $8F5A.w,X [Reads: X Index] [Flags: ZN]
	inc $CB5D.w,X		; FE 5D CB ; Increment memory $CB5D.w,X [Reads: X Index] [Flags: ZN]
	sbc $3C41.w,X		; FD 41 3C ; Subtract with carry $3C41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jmp $6370.w		; 4C 70 63 ; Jump to $6370.w [Flow: jump]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp.w [$5777]		; DC 77 57 ; Jump long indirect [$5777] [Flow: jump]
	adc ($76.b),Y		; 71 76 ; Add with carry ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $71.b,S		; A3 71 ; Load accumulator (stack relative) $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor [$71.b],Y		; 57 71 ; Exclusive OR accumulator with memory (long indexed) [$71.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $71.b,S		; A3 71 ; Load accumulator (stack relative) $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($2A.b),Y		; 71 2A ; Add with carry ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4064.w,Y		; F9 64 40 ; Subtract with carry $4064.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $4094.w,X		; 3D 94 40 ; AND accumulator with memory $4094.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $4738.w,X		; 3D 38 47 ; AND accumulator with memory $4738.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($44.b,X)		; 81 44 ; Store accumulator ($44.b,X) [Reads: Accumulator, X Index, Direct Page]
	eor [$83.b]		; 47 83 ; Exclusive OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $8247.w,X		; BC 47 82 ; Load Y register $8247.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $B0, $47		; B0 47 ; Branch if carry set to $B0, $47 [Flow: branch]
	sty $FD.b		; 84 FD ; Store Y register to $FD.b [Reads: Y Index]
	ror $7E.b		; 66 7E ; Rotate right $7E.b [Reads: Direct Page] [Flags: ZNC]
	sbc $BE67.w,X		; FD 67 BE ; Subtract with carry $BE67.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE68.w,X		; FD 68 FE ; Subtract with carry $FE68.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $7E46.w,X		; FE 46 7E ; Increment memory $7E46.w,X [Reads: X Index] [Flags: ZN]
	inc $BE47.w,X		; FE 47 BE ; Increment memory $BE47.w,X [Reads: X Index] [Flags: ZN]
	inc $FE48.w,X		; FE 48 FE ; Increment memory $FE48.w,X [Reads: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($C6.b),Y		; 31 C6 ; AND accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$38.b		; C0 38 ; Compare #$38.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $F3		; B0 F3 ; Branch if carry set to $B0, $F3 [Flow: branch]
	brk $B1.b		; 00 B1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $C0.b		; C6 C0 ; Decrement $C0.b [Reads: Direct Page] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A1.b,X		; 16 A1 ; Arithmetic shift left $A1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $A1.b		; 02 A1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FC1077.l,X		; FF 77 10 FC ; Subtract with carry (long,X) $FC1077.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	and ($21.b)		; 32 21 ; AND accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $81.b		; C6 81 ; Decrement $81.b [Reads: Direct Page] [Flags: ZN]
	sbc $D60251.l,X		; FF 51 02 D6 ; Subtract with carry (long,X) $D60251.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FC8356.l,X		; FF 56 83 FC ; Subtract with carry (long,X) $FC8356.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($C8.b),Y		; F1 C8 ; Subtract with carry ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF031F.l		; 4F 1F 03 FF ; Exclusive OR accumulator with memory (long) $FF031F.l [Writes: Accumulator] [Flags: ZN]
	and ($CA.b,X)		; 21 CA ; Logical AND ($CA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $632D.w,X		; 3D 2D 63 ; AND accumulator with memory $632D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($C9F5.w,X)		; FC F5 C9 ; Jump to subroutine indirect indexed ($C9F5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $C9045F.l		; 4F 5F 04 C9 ; Exclusive OR accumulator with memory (long) $C9045F.l [Writes: Accumulator] [Flags: ZN]
	and $FF64.w		; 2D 64 FF ; Logical AND $FF64.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $CB.b		; 25 CB ; Logical AND $CB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0059.w,X		; FD 59 00 ; Subtract with carry $0059.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvn $61,$A1		; 54 A1 61 ; Move block negative $61,$A1 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sty $FC.b		; 84 FC ; Store Y register to $FC.b [Reads: Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $80, $31		; 80 31 ; Branch always to $80, $31 [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $FE81.w		; CE 81 FE ; Decrement $FE81.w [Flags: ZN]
	adc $9C02.w,Y		; 79 02 9C ; Add $9C02.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	stx $FF.b		; 86 FF ; Store X register to $FF.b [Reads: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $82, $C1, $BA		; 82 C1 BA ; Branch always long to $82, $C1, $BA [Flow: branch]
	.db $62, $FF, $0E		; 62 FF 0E ; Push effective relative address $62, $FF, $0E [Writes: Stack Pointer]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Accumulator, Stack Pointer]
	bit #$70C8.w		; 89 C8 70 ; Test bits #$70C8.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta $49FE03.l,X		; 9F 03 FE 49 ; Store accumulator (long,X) $49FE03.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $4C63.w		; AC 63 4C ; Load $4C63.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $03.b,Y		; B6 03 ; Load X register $03.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	jsr ($48FB.w,X)		; FC FB 48 ; Jump to subroutine indirect indexed ($48FB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $4C8B.w,X		; FD 8B 4C ; Subtract with carry $4C8B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $63C6.w,X		; 3C C6 63 ; Test bits $63C6.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsr ($C9FD.w,X)		; FC FD C9 ; Jump to subroutine indirect indexed ($C9FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $FE04DC.l		; 4F DC 04 FE ; Exclusive OR accumulator with memory (long) $FE04DC.l [Writes: Accumulator] [Flags: ZN]
	cmp $90CB.w,X		; DD CB 90 ; Compare accumulator $90CB.w,X [Reads: X Index] [Flags: ZNC]
	ldy $FE64.w		; AC 64 FE ; Load $FE64.w into Y register [Writes: Y Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $B6A0.w		; 4E A0 B6 ; Logical shift right $B6A0.w [Flags: ZNC]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $C6.b,X		; B4 C6 ; Load Y register $C6.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $08.b		; 64 08 ; Store zero to $08.b
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$11.b		; C0 11 ; Compare #$11.b with Y register [Reads: Y Index] [Flags: ZNC]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$89.b],Y		; 17 89 ; OR accumulator with memory (long indexed) [$89.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$11.b		; C0 11 ; Compare #$11.b with Y register [Reads: Y Index] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpy #$11.b		; C0 11 ; Compare #$11.b with Y register [Reads: Y Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$E4.b		; C0 E4 ; Compare #$E4.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $6000.w		; EC 00 60 ; Compare $6000.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $D1C089.l		; AF 89 C0 D1 ; Load long $D1C089.l into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpy #$D1.b		; C0 D1 ; Compare #$D1.b with Y register [Reads: Y Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FBE1FE.l,X		; FF FE E1 FB ; Subtract with carry (long,X) $FBE1FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $33.b,S		; A3 33 ; Load accumulator (stack relative) $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $43.b,S		; A3 43 ; Load accumulator (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($6E.b),Y		; 71 6E ; Add with carry ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($81.b,X)		; 61 81 ; Add with carry ($81.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $7062.w		; 6E 62 70 ; Rotate right $7062.w [Flags: ZNC]
	inc $8061.w		; EE 61 80 ; Increment $8061.w [Flags: ZN]
	inc $FF62.w		; EE 62 FF ; Increment $FF62.w [Flags: ZN]
	sbc $C61F3F.l,X		; FF 3F 1F C6 ; Subtract with carry (long,X) $C61F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $B9C61F.l,X		; 7F 1F C6 B9 ; Add long $B9C61F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $5C3FC6.l,X		; 1F C6 3F 5C ; Logical OR long $5C3FC6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $7F.b		; C6 7F ; Decrement $7F.b [Reads: Direct Page] [Flags: ZN]
	jmp $5CB9C6.l		; 5C C6 B9 5C ; Jump long to $5CB9C6.l [Flow: jump]
	dec $63.b		; C6 63 ; Decrement $63.b [Reads: Direct Page] [Flags: ZN]
	sta $B63EC6.l,X		; 9F C6 3E B6 ; Store accumulator (long,X) $B63EC6.l,X [Reads: Accumulator, X Index]
	dec $3F.b		; C6 3F ; Decrement $3F.b [Reads: Direct Page] [Flags: ZN]
	jmp.w [$7FC6]		; DC C6 7F ; Jump long indirect [$7FC6] [Flow: jump]
	jmp.w [$96C6]		; DC C6 96 ; Jump long indirect [$96C6] [Flow: jump]
	ldx $C6.b,Y		; B6 C6 ; Load X register $C6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldy $DC.b,X		; B4 DC ; Load Y register $DC.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $A044A1.l,X		; FF A1 44 A0 ; Subtract with carry (long,X) $A044A1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda ($16.b,X)		; A1 16 ; Load accumulator ($16.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $04E1FF.l,X		; FF FF E1 04 ; Subtract with carry (long,X) $04E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $00A1.w,X		; FE A1 00 ; Increment memory $00A1.w,X [Reads: X Index] [Flags: ZN]
	sbc $C80221.l,X		; FF 21 02 C8 ; Subtract with carry (long,X) $C80221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $22FF62.l		; 22 62 FF 22 ; Jump to subroutine long $22FF62.l [Writes: Stack Pointer] [Flow: call]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: ZN]
	ldx #$C2.b		; A2 C2 ; Load #$C2.b into X register [Writes: X Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rol $A801.w		; 2E 01 A8 ; Rotate left $A801.w [Flags: ZNC]
	jsl $A2FE61.l		; 22 61 FE A2 ; Jump to subroutine long $A2FE61.l [Writes: Stack Pointer] [Flow: call]
	cpy $98.b		; C4 98 ; Compare $98.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	rol $FE01.w		; 2E 01 FE ; Rotate left $FE01.w [Flags: ZNC]
	jsl $24FEC0.l		; 22 C0 FE 24 ; Jump to subroutine long $24FEC0.l [Writes: Stack Pointer] [Flow: call]
	cmp ($98.b,X)		; C1 98 ; Compare accumulator ($98.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	lsr $FE02.w		; 4E 02 FE ; Logical shift right $FE02.w [Flags: ZNC]
	ldy $C5.b		; A4 C5 ; Load $C5.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr $FE61.w,X		; 5E 61 FE ; Logical shift right $FE61.w,X [Reads: X Index] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpy $98.b		; C4 98 ; Compare $98.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ldx $FE01.w		; AE 01 FE ; Load $FE01.w into X register [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$FE.b		; C0 FE ; Compare #$FE.b with Y register [Reads: Y Index] [Flags: ZNC]
	bit $98C1.w		; 2C C1 98 ; Test bits $98C1.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec $FE02.w		; CE 02 FE ; Decrement $FE02.w [Flags: ZN]
	ldy $A8C5.w		; AC C5 A8 ; Load $A8C5.w into Y register [Writes: Y Index] [Flags: ZN]
	dec $FE61.w,X		; DE 61 FE ; Decrement memory $FE61.w,X [Reads: X Index] [Flags: ZN]
	ldx $FF81.w		; AE 81 FF ; Load $FF81.w into X register [Writes: X Index] [Flags: ZN]
	bit $C8C7.w		; 2C C7 C8 ; Test bits $C8C7.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec $FF62.w,X		; DE 62 FF ; Decrement memory $FF62.w,X [Reads: X Index] [Flags: ZN]
	rol $D883.w		; 2E 83 D8 ; Rotate left $D883.w [Flags: ZNC]
	dec $FF02.w		; CE 02 FF ; Decrement $FF02.w [Flags: ZN]
	ldy $23C3.w		; AC C3 23 ; Load $23C3.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $7F33FA.l,X		; 7F FA 33 7F ; Add long $7F33FA.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and ($8E.b,X)		; 21 8E ; Logical AND ($8E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $8E31.w,Y		; F9 31 8E ; Subtract with carry $8E31.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8E41.w,Y		; F9 41 8E ; Subtract with carry $8E41.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9F23.w,Y		; F9 23 9F ; Subtract with carry $9F23.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and ($9F.b,S),Y		; 33 9F ; AND accumulator (stack relative indirect indexed) ($9F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor $9F.b,S		; 43 9F ; Exclusive OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cpy $30.b		; C4 30 ; Compare $30.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	lsr $39B4.w,X		; 5E B4 39 ; Logical shift right $39B4.w,X [Reads: X Index] [Flags: ZNC]
	lsr $E1FE.w,X		; 5E FE E1 ; Logical shift right $E1FE.w,X [Reads: X Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy $7F60.w		; AC 60 7F ; Load $7F60.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $7F98.w		; AC 98 7F ; Load $7F98.w into Y register [Writes: Y Index] [Flags: ZN]
	cpx $804A.w		; EC 4A 80 ; Compare $804A.w with X register [Reads: X Index] [Flags: ZNC]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $56,$C7		; 54 C7 56 ; Move block negative $56,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $FD62.w,X		; 5E 62 FD ; Logical shift right $FD62.w,X [Reads: X Index] [Flags: ZNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dec $64.b		; C6 64 ; Decrement $64.b [Reads: Direct Page] [Flags: ZN]
	lda $FD01.w		; AD 01 FD ; Load $FD01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$FD		; C2 FD
	ldy $C3.b		; A4 C3 ; Load $C3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	bit #$C00D.w		; 89 0D C0 ; Test bits #$C00D.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $C00D.w,Y		; D9 0D C0 ; Compare accumulator $C00D.w,Y [Reads: Y Index] [Flags: ZNC]
	adc $5F.b		; 65 5F ; Add $5F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$9C65.w		; C0 65 9C ; Compare #$9C65.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5F89.w		; C0 89 5F ; Compare #$5F89.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9C89.w		; C0 89 9C ; Compare #$9C89.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$DD89.w		; C0 89 DD ; Compare #$DD89.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$DDD9.w		; C0 D9 DD ; Compare #$DDD9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $28, $82		; 62 28 82 ; Push effective relative address $62, $28, $82 [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta ($1C.b,X)		; 81 1C ; Store accumulator ($1C.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $10E1FF.l,X		; FF FF E1 10 ; Subtract with carry (long,X) $10E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $AC.b,S		; 23 AC ; AND accumulator with stack relative $AC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $62, $AC, $C8		; 62 AC C8 ; Push effective relative address $62, $AC, $C8 [Writes: Stack Pointer]
	.db $50, $9C		; 50 9C ; Branch if overflow clear to $50, $9C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($CD.b,X)		; 21 CD ; Logical AND ($CD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $CC.b,S		; 43 CC ; Exclusive OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $CC		; 80 CC ; Branch always to $80, $CC [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc #$62A3.w		; E9 A3 62 ; Subtract #$62A3.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	eor $A7.b,S		; 43 A7 ; Exclusive OR accumulator with stack relative $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp ($E3.b,S),Y		; D3 E3 ; Compare accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor ($C7.b,S),Y		; 53 C7 ; XOR accumulator (stack relative indirect indexed) ($C7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda [$E3.b]		; A7 E3 ; Load accumulator (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FF876D.l,X		; FF 6D 87 FF ; Subtract with carry (long,X) $FF876D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF83.w		; AD 83 FF ; Load $FF83.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ror $2083.w		; 6E 83 20 ; Rotate right $2083.w [Flags: ZNC]
	lda ($79.b),Y		; B1 79 ; Load accumulator ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $5046AE.l		; 22 AE 46 50 ; Jump to subroutine long $5046AE.l [Writes: Stack Pointer] [Flow: call]
	ldx #$5079.w		; A2 79 50 ; Load #$5079.w into X register [Writes: X Index] [Flags: ZN]
	sta $5C3F.w,X		; [PATTERN: Memory clearing operation] 9D 3F 5C ; Store accumulator to $5C3F.w,X [Reads: Accumulator, X Index]
	ldx #$937A.w		; A2 7A 93 ; Load #$937A.w into X register [Writes: X Index] [Flags: ZN]
	ldx $9BC8.w		; AE C8 9B ; Load $9BC8.w into X register [Writes: X Index] [Flags: ZN]
	stz $D0C8.w		; 9C C8 D0 ; Store zero to $D0C8.w
	stz $D8C8.w,X		; 9E C8 D8 ; Store zero to $D8C8.w,X [Reads: X Index]
	sta $5FC8.w,X		; 9D C8 5F ; Store accumulator to $5FC8.w,X [Reads: Accumulator, X Index]
	lda $9842.w		; AD 42 98 ; Load $9842.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$9B79.w		; A2 79 9B ; Load #$9B79.w into X register [Writes: X Index] [Flags: ZN]
	sta $9ED83F.l,X		; 9F 3F D8 9E ; Store accumulator (long,X) $9ED83F.l,X [Reads: Accumulator, X Index]
	and $7AA1E9.l,X		; 3F E9 A1 7A ; AND accumulator with memory (long,X) $7AA1E9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy $43CE.w		; CC CE 43 ; Compare $43CE.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp.w [$7ABF]		; DC BF 7A ; Jump long indirect [$7ABF] [Flow: jump]
	jmp.w [$43B9]		; DC B9 43 ; Jump long indirect [$43B9] [Flow: jump]
	and $BB.b,S		; 23 BB ; AND accumulator with stack relative $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $BA,$62		; 44 62 BA ; Move block positive $BA,$62 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($90.b,X)		; 41 90 ; Exclusive OR accumulator with memory ($90.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $CF2379.l,X		; BF 79 23 CF ; Load long $CF2379.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $42CE62.l,X		; 3F 62 CE 42 ; AND accumulator with memory (long,X) $42CE62.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($D1.b,X)		; 21 D1 ; Logical AND ($D1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $E921.w,Y		; 79 21 E9 ; Add $E921.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	bit $7AE1.w,X		; 3C E1 7A ; Test bits $7AE1.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $7F43DF.l,X		; 3F DF 43 7F ; AND accumulator with memory (long,X) $7F43DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $DEBC43.l,X		; DF 43 BC DE ; Compare accumulator (long,X) $DEBC43.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	eor $CC.b,S		; 43 CC ; Exclusive OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($7A.b)		; D2 7A ; Compare accumulator (indirect) ($7A.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr ($0062.w,X)		; FC 62 00 ; Jump to subroutine indirect indexed ($0062.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $6133.w,Y		; 19 33 61 ; OR accumulator with memory $6133.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($8166.w,X)		; FC 66 81 ; Jump to subroutine indirect indexed ($8166.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($02C2.w,X)		; FC C2 02 ; Jump to subroutine indirect indexed ($02C2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $31		; 30 31 ; Branch if minus to $30, $31 [Flow: branch]
	.db $62, $FC, $C3		; 62 FC C3 ; Push effective relative address $62, $FC, $C3 [Writes: Stack Pointer]
	stx $42.b		; 86 42 ; Store X register to $42.b [Reads: X Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $84.b,S		; 63 84 ; Add with carry (stack relative) $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $0061.w,X		; FE 61 00 ; Increment memory $0061.w,X [Reads: X Index] [Flags: ZN]
	sbc $DA0261.l,X		; FF 61 02 DA ; Subtract with carry (long,X) $DA0261.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $438366.l,X		; FF 66 83 43 ; Subtract with carry (long,X) $438366.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$0A79.w		; C0 79 0A ; Compare #$0A79.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$100B.w		; C0 0B 10 ; Compare #$100B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$230A.w		; C0 0A 23 ; Compare #$230A.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($23.b)		; 12 23 ; OR accumulator with memory (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($11.b,S),Y		; F3 11 ; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $42.b,X		; 36 42 ; Rotate left $42.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $701C.w		; 20 1C 70 ; Jump to subroutine at $701C.w [Writes: Stack Pointer] [Flow: call]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1810E1.l,X		; FF E1 10 18 ; Subtract with carry (long,X) $1810E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $FC85.w		; CD 85 FC ; Compare $FC85.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $FE81.w		; CE 81 FE ; Decrement $FE81.w [Flags: ZN]
	adc $9E02.w,Y		; 79 02 9E ; Add $9E02.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $837E.w,X		; FE 7E 83 ; Increment memory $837E.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $BC		; 10 BC ; Branch if plus to $10, $BC [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($CC.b)		; 12 CC ; OR accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($AC.b)		; 12 AC ; OR accumulator with memory (indirect) ($AC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $BC		; 30 BC ; Branch if minus to $30, $BC [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $AC.b,S		; 43 AC ; Exclusive OR accumulator with stack relative $AC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $CC.b,S		; 43 CC ; Exclusive OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($DC.b,X)		; 41 DC ; Exclusive OR accumulator with memory ($DC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $BC		; 50 BC ; Branch if overflow clear to $50, $BC [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($BC.b)		; 72 BC ; Add with carry (indirect) ($BC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $CC		; 80 CC ; Branch always to $80, $CC [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $41BA.w		; 20 BA 41 ; Jump to subroutine at $41BA.w [Writes: Stack Pointer] [Flow: call]
	jsr $42CE.w		; 20 CE 42 ; Jump to subroutine at $42CE.w [Writes: Stack Pointer] [Flow: call]
	jsr $7ABF.w		; 20 BF 7A ; Jump to subroutine at $7ABF.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $BF		; 30 BF ; Branch if minus to $30, $BF [Flow: branch]
	adc $BE40.w,Y		; 79 40 BE ; Add $BE40.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($40.b,X)		; 41 40 ; Exclusive OR accumulator with memory ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $42, $40		; 42 40 ; Reserved instruction
	cmp ($7A.b,X)		; C1 7A ; Compare accumulator ($7A.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $50, $C1		; 50 C1 ; Branch if overflow clear to $50, $C1 [Flow: branch]
	adc $BE5C.w,Y		; 79 5C BE ; Add $BE5C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($5C.b,X)		; 41 5C ; Exclusive OR accumulator with memory ($5C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $42, $5C		; 42 5C ; Reserved instruction
	cmp ($7A.b,X)		; C1 7A ; Compare accumulator ($7A.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	jmp ($79C1.w)		; 6C C1 79 ; Jump indirect to ($79C1.w) [Flow: jump]
	jsr ($812D.w,X)		; FC 2D 81 ; Jump to subroutine indirect indexed ($812D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$61A3.w		; 09 A3 61 ; Logical OR #$61A3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$AF.b],Y		; 17 AF ; OR accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3FAD56.l,X		; 3F 56 AD 3F ; AND accumulator with memory (long,X) $3FAD56.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $B1		; 80 B1 ; Branch always to $80, $B1 [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta ($B9.b,X)		; 81 B9 ; Store accumulator ($B9.b,X) [Reads: Accumulator, X Index, Direct Page]
	eor $16.b		; 45 16 ; Exclusive OR $16.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	mvp $B1,$16		; 44 16 B1 ; Move block positive $B1,$16 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $DE3C.w,Y		; 79 3C DE ; Add $DE3C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $EA3D.w,Y		; 79 3D EA ; Add $EA3D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jmp $5E7ADE.l		; 5C DE 7A 5E ; Jump long to $5E7ADE.l [Flow: jump]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor $90.b,S		; 43 90 ; Exclusive OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($7A.b),Y		; D1 7A ; Compare accumulator ($7A.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $90, $CD		; 90 CD ; Branch if carry clear to $90, $CD [Flow: branch]
	eor $9C.b,S		; 43 9C ; Exclusive OR accumulator with stack relative $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $E8027A.l,X		; BF 7A 02 E8 ; Load long $E8027A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$93AF.w		; C0 AF 93 ; Compare #$93AF.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2AF.w		; C0 AF D2 ; Compare #$D2AF.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$93E1.w		; C0 E1 93 ; Compare #$93E1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2E1.w		; C0 E1 D2 ; Compare #$D2E1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $FA3E.w		; 2E 3E FA ; Rotate left $FA3E.w [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($1C.b),Y		; 71 1C ; Add with carry ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $FFFF00.l		; 22 00 FF FF ; Jump to subroutine long $FFFF00.l [Writes: Stack Pointer] [Flow: call]
	sbc ($1C.b,X)		; E1 1C ; Subtract with carry ($1C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00A1.w,X		; FD A1 00 ; Subtract with carry $00A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$6122.w		; 69 22 61 ; Add #$6122.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $04A5.w,X		; FD A5 04 ; Subtract with carry $04A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0025.w,X)		; FC 25 00 ; Jump to subroutine indirect indexed ($0025.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0128.w,X)		; FC 28 01 ; Jump to subroutine indirect indexed ($0128.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $82, $02, $FD		; 82 02 FD ; Branch always long to $82, $02, $FD [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($61.b,S),Y		; 93 61 ; Store accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $81AE.w,X		; FD AE 81 ; Subtract with carry $81AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $832E.w,X		; FE 2E 83 ; Increment memory $832E.w,X [Reads: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($62.b,S),Y		; 93 62 ; Store accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $82, $02, $FE		; 82 02 FE ; Branch always long to $82, $02, $FE [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $9A.b,S		; 03 9A ; OR accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FE02A5.l,X		; FF A5 02 FE ; Subtract with carry (long,X) $FE02A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $06.b		; 25 06 ; Logical AND $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp ($6A.b,X)		; C1 6A ; Compare accumulator ($6A.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $2289.w,Y		; F9 89 22 ; Subtract with carry $2289.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $FE, $21		; 62 FE 21 ; Push effective relative address $62, $FE, $21 [Writes: Stack Pointer]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$C013.w		; 49 13 C0 ; Exclusive OR #$C013.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor #$C093.w		; 49 93 C0 ; Exclusive OR #$C093.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$C0D2.w		; 49 D2 C0 ; Exclusive OR #$C0D2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $C013.w,Y		; D9 13 C0 ; Compare accumulator $C013.w,Y [Reads: Y Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $C093.w,Y		; D9 93 C0 ; Compare accumulator $C093.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $C0D2.w,Y		; D9 D2 C0 ; Compare accumulator $C0D2.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $3E2EFF.l,X		; FF FF 2E 3E ; Subtract with carry (long,X) $3E2EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $1C		; 10 1C ; Branch if plus to $10, $1C [Flow: branch]
	sbc $10E1FF.l,X		; FF FF E1 10 ; Subtract with carry (long,X) $10E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0231.w,X		; FE 31 02 ; Increment memory $0231.w,X [Reads: X Index] [Flags: ZN]
	inc $0632.w,X		; FE 32 06 ; Increment memory $0632.w,X [Reads: X Index] [Flags: ZN]
	inc $04F2.w,X		; FE F2 04 ; Increment memory $04F2.w,X [Reads: X Index] [Flags: ZN]
	inc $00F1.w,X		; FE F1 00 ; Increment memory $00F1.w,X [Reads: X Index] [Flags: ZN]
	sta $0120.w,X		; 9D 20 01 ; Store accumulator to $0120.w,X [Reads: Accumulator, X Index]
	sbc $0081.w,X		; FD 81 00 ; Subtract with carry $0081.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($20.b,X)		; 61 20 ; Add with carry ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	sbc $7303A4.l,X		; FF A4 03 73 ; Subtract with carry (long,X) $7303A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $02.b,S		; 43 02 ; Exclusive OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $7B3841.l,X		; FF 41 38 7B ; Subtract with carry (long,X) $7B3841.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($F9.b,S),Y		; 13 F9 ; OR accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($13.b,X)		; 41 13 ; Exclusive OR accumulator with memory ($13.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$520B.w		; C0 0B 52 ; Compare #$520B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$524B.w		; C0 4B 52 ; Compare #$524B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$528B.w		; C0 8B 52 ; Compare #$528B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$52CA.w		; C0 CA 52 ; Compare #$52CA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$109D.w		; C0 9D 10 ; Compare #$109D.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx $FA32.w		; AE 32 FA ; Load $FA32.w into X register [Writes: X Index] [Flags: ZN]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0061.w,X		; FD 61 00 ; Subtract with carry $0061.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $4469.w,X		; FD 69 44 ; Subtract with carry $4469.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sty $01.b,X		; 94 01 ; Store Y register $01.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	jsr ($4029.w,X)		; FC 29 40 ; Jump to subroutine indirect indexed ($4029.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($C12B.w,X)		; FC 2B C1 ; Jump to subroutine indirect indexed ($C12B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldy $FD02.w,X		; BC 02 FD ; Load Y register $FD02.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $59.b		; C5 59 ; Compare $59.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $FD61.w		; CC 61 FD ; Compare $FD61.w with Y register [Reads: Y Index] [Flags: ZNC]
	ror $FE81.w		; 6E 81 FE ; Rotate right $FE81.w [Flags: ZNC]
	adc ($02.b,X)		; 61 02 ; Add with carry ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $6222.w,Y		; 99 22 62 ; Store accumulator to $6222.w,Y [Reads: Accumulator, Y Index]
	inc $0665.w,X		; FE 65 06 ; Increment memory $0665.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $04E5.w,X		; FE E5 04 ; Increment memory $04E5.w,X [Reads: X Index] [Flags: ZN]
	lda $6122.w,Y		; B9 22 61 ; Load $6122.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $00E1.w,X		; FE E1 00 ; Increment memory $00E1.w,X [Reads: X Index] [Flags: ZN]
	sbc $AA83A7.l,X		; FF A7 83 AA ; Subtract with carry (long,X) $AA83A7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$87.b]		; 67 87 ; Add with carry (long) [$87.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $62, $FE, $6E		; 62 FE 6E ; Push effective relative address $62, $FE, $6E [Writes: Stack Pointer]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	eor ($39.b,X)		; 41 39 ; Exclusive OR accumulator with memory ($39.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda [$FA.b],Y		; B7 FA ; Load accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stx $0B00.w		; 8E 00 0B ; Store X register to $0B00.w [Reads: X Index]
	dec $48C0.w		; CE C0 48 ; Decrement $48C0.w [Flags: ZN]
	dec $A8C0.w		; CE C0 A8 ; Decrement $A8C0.w [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpy #$CAAB.w		; C0 AB CA ; Compare #$CAAB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$8BE8.w		; C0 E8 8B ; Compare #$8BE8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CAE8.w		; C0 E8 CA ; Compare #$CAE8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($18.b),Y		; 71 18 ; Add with carry ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C73FF.l,X		; FF FF 73 1C ; Subtract with carry (long,X) $1C73FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0409.w,X		; FD 09 04 ; Subtract with carry $0409.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0069.w,X)		; FC 69 00 ; Jump to subroutine indirect indexed ($0069.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $06C9.w,X		; FE C9 06 ; Increment memory $06C9.w,X [Reads: X Index] [Flags: ZN]
	cpy #$0193.w		; C0 93 01 ; Compare #$0193.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $DA0269.l,X		; FF 69 02 DA ; Subtract with carry (long,X) $DA0269.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $5C836E.l,X		; FF 6E 83 5C ; Subtract with carry (long,X) $5C836E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jsl $C093E8.l		; 22 E8 93 C0 ; Jump to subroutine long $C093E8.l [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $0041.w,X		; FD 41 00 ; Subtract with carry $0041.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0442.w,X		; FD 42 04 ; Subtract with carry $0442.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0002.w,X		; FD 02 00 ; Subtract with carry $0002.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $30.b,S		; 43 30 ; Exclusive OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($02.b,X)		; 81 02 ; Store accumulator ($02.b,X) [Reads: Accumulator, X Index, Direct Page]
	inc $0682.w,X		; FE 82 06 ; Increment memory $0682.w,X [Reads: X Index] [Flags: ZN]
	inc $02C2.w,X		; FE C2 02 ; Increment memory $02C2.w,X [Reads: X Index] [Flags: ZN]
	lda ($30.b,S),Y		; B3 30 ; Load accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $63, $1E		; 62 63 1E ; Push effective relative address $62, $63, $1E [Writes: Stack Pointer]
	jmp.w [$4879]		; DC 79 48 ; Jump long indirect [$4879] [Flow: jump]
	.db $70, $77		; 70 77 ; Branch if overflow set to $70, $77 [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc ($8B.b),Y		; 71 8B ; Add with carry ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc ($74.b),Y		; 71 74 ; Add with carry ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($88.b),Y		; 71 88 ; Add with carry ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($64.b),Y		; 71 64 ; Add with carry ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $94.b,X		; 75 94 ; Add $94.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $40.b,X		; 75 40 ; Add $40.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $B0.b		; 65 B0 ; Add $B0.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $40.b		; 66 40 ; Rotate right $40.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $73		; 42 73 ; Reserved instruction
	.db $B0, $42		; B0 42 ; Branch if carry set to $B0, $42 [Flow: branch]
	stz $FD.b,X		; 74 FD ; Store zero to $FD.b,X [Reads: X Index]
	bit #$70C8.w		; 89 C8 70 ; Test bits #$70C8.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta $49FE03.l,X		; 9F 03 FE 49 ; Store accumulator (long,X) $49FE03.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $CC8A.w,X		; FD 8A CC ; Subtract with carry $CC8A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $DAFC03.l		; AF 03 FC DA ; Load long $DAFC03.l into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $BE.b,X		; 34 BE ; Test bits $BE.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $61.b,S		; 63 61 ; Add with carry (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp $4AFE04.l,X		; DF 04 FE 4A ; Compare accumulator (long,X) $4AFE04.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	dec $AFA0.w		; CE A0 AF ; Decrement $AFA0.w [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $64BE.w,X		; BC BE 64 ; Load Y register $64BE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $5C.b,X		; 34 5C ; Test bits $5C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $3069.w,Y		; 99 69 30 ; Store accumulator to $3069.w,Y [Reads: Accumulator, Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $69A830.l		; 22 30 A8 69 ; Jump to subroutine long $69A830.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jsl $6999A0.l		; 22 A0 99 69 ; Jump to subroutine long $6999A0.l [Writes: Stack Pointer] [Flow: call]
	cpy #$22A8.w		; C0 A8 22 ; Compare #$22A8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $69A8.w		; CC A8 69 ; Compare $69A8.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($10.b),Y		; 31 10 ; AND accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$530A.w		; C0 0A 53 ; Compare #$530A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$223B.w		; C0 3B 22 ; Compare #$223B.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($10.b),Y		; B1 10 ; Load accumulator ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$13CA.w		; C0 CA 13 ; Compare #$13CA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$53CA.w		; C0 CA 53 ; Compare #$53CA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$22C3.w		; C0 C3 22 ; Compare #$22C3.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $F1E9.w,X		; FD E9 F1 ; Subtract with carry $F1E9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E4A2.w,X		; FD A2 E4 ; Subtract with carry $E4A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $E422.w,X		; FE 22 E4 ; Increment memory $E422.w,X [Reads: X Index] [Flags: ZN]
	sbc $D534FF.l,X		; FF FF 34 D5 ; Subtract with carry (long,X) $D534FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($41.b,X)		; 61 41 ; Add with carry ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$FC02]		; DC 02 FC ; Jump long indirect [$FC02] [Flow: jump]
	cmp $A1C1.w,X		; DD C1 A1 ; Compare accumulator $A1C1.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$FE02]		; DC 02 FE ; Jump long indirect [$FE02] [Flow: jump]
	sbc $BCC3.w,X		; FD C3 BC ; Subtract with carry $BCC3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $62.b,X		; D5 62 ; Compare accumulator $62.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $FADE.w,Y		; 79 DE FA ; Add $FADE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2402FF.l,X		; FF FF 02 24 ; Subtract with carry (long,X) $2402FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit $60.b		; 24 60 ; Test bits $60.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	adc #$D432.w		; 69 32 D4 ; Add #$D432.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $69D65C.l		; 22 5C D6 69 ; Jump to subroutine long $69D65C.l [Writes: Stack Pointer] [Flow: call]
	ldy #$69D6.w		; A0 D6 69 ; Load #$69D6.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $69C8.w		; CC C8 69 ; Compare $69C8.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx #$22D4.w		; A2 D4 22 ; Load #$22D4.w into X register [Writes: X Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($C6.b),Y		; B1 C6 ; Load accumulator ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $A3.b		; 66 A3 ; Rotate right $A3.b [Reads: Direct Page] [Flags: ZNC]
	dec $8C.b		; C6 8C ; Decrement $8C.b [Reads: Direct Page] [Flags: ZN]
	lda $C6.b,S		; A3 C6 ; Load accumulator (stack relative) $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($C6.b),Y		; B1 C6 ; Load accumulator ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	adc $C9.b,S		; 63 C9 ; Add with carry (stack relative) $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $100010.l,X		; FF 10 00 10 ; Subtract with carry (long,X) $100010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $FE0466.l,X		; FF 66 04 FE ; Subtract with carry (long,X) $FE0466.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($80.b,X)		; 61 80 ; Add with carry ($80.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($82.b,X)		; A1 82 ; Load accumulator ($82.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	adc ($9A.b,X)		; 61 9A ; Add with carry ($9A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $816E.w,X		; FE 6E 81 ; Increment memory $816E.w,X [Reads: X Index] [Flags: ZN]
	sbc $DB836E.l,X		; FF 6E 83 DB ; Subtract with carry (long,X) $DB836E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,S),Y		; 73 62 ; Add with carry (stack relative indirect indexed) ($62.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0766.l,X		; FF 66 07 FF ; Subtract with carry (long,X) $FF0766.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $03.b		; A6 03 ; Load $03.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $4892.w,X		; FE 92 48 ; Increment memory $4892.w,X [Reads: X Index] [Flags: ZN]
	lda $24.b,X		; B5 24 ; Load $24.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($4A.b)		; 72 4A ; Add with carry (indirect) ($4A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$6437]		; DC 37 64 ; Jump long indirect [$6437] [Flow: jump]
	sbc $FF4B75.l,X		; FF 75 4B FF ; Subtract with carry (long,X) $FF4B75.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $4F.b,X		; 35 4F ; Logical AND $4F.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $FF6466.l		; CF 66 64 FF ; Compare accumulator (long) $FF6466.l [Reads: Accumulator] [Flags: ZNC]
	and $B4CB.w,X		; 3D CB B4 ; AND accumulator with memory $B4CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $FE04.w,X		; DE 04 FE ; Decrement memory $FE04.w,X [Reads: X Index] [Flags: ZN]
	sta $A7C9.w,X		; 9D C9 A7 ; Store accumulator to $A7C9.w,X [Reads: Accumulator, X Index]
	and [$63.b],Y		; 37 63 ; AND accumulator with memory (long indexed) [$63.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $8B.b,S		; 63 8B ; Add with carry (stack relative) $8B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$551C.w		; C0 1C 55 ; Compare #$551C.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $803C.w		; EC 3C 80 ; Compare $803C.w with X register [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	adc ($C0.b,S),Y		; 73 C0 ; Add with carry (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda ($C0.b,S),Y		; B3 C0 ; Load accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $0136.w		; EC 36 01 ; Compare $0136.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $0246.w		; EC 46 02 ; Compare $0246.w with X register [Reads: X Index] [Flags: ZNC]
	.db $B0, $EE		; B0 EE ; Branch if carry set to $B0, $EE [Flow: branch]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $C362.w		; EE 62 C3 ; Increment $C362.w [Flags: ZN]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit $BC38.w		; 2C 38 BC ; Test bits $BC38.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $B933.w,X		; 3D 33 B9 ; AND accumulator with memory $B933.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $C434.w,X		; 3D 34 C4 ; AND accumulator with memory $C434.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $BA.b,X		; 34 BA ; Test bits $BA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jmp $C770.w		; 4C 70 C7 ; Jump to $C770.w [Flow: jump]
	eor $99C771.l		; 4F 71 C7 99 ; Exclusive OR accumulator with memory (long) $99C771.l [Writes: Accumulator] [Flags: ZN]
	adc ($BB.b),Y		; 71 BB ; Add with carry ($BB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $71.b,S		; 43 71 ; Exclusive OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta $CCB871.l		; 8F 71 B8 CC ; Store accumulator (long) $CCB871.l [Reads: Accumulator]
	adc ($FF.b),Y		; 71 FF ; Add with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C627A7.l,X		; FF A7 27 C6 ; Subtract with carry (long,X) $C627A7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$C627]		; DC 27 C6 ; Jump long indirect [$C627] [Flow: jump]
	ldx $67.b		; A6 67 ; Load $67.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $A6.b		; C6 A6 ; Decrement $A6.b [Reads: Direct Page] [Flags: ZN]
	lda [$C6.b]		; A7 C6 ; Load accumulator (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $DC.b		; A6 DC ; Load $DC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $CC.b		; C6 CC ; Decrement $CC.b [Reads: Direct Page] [Flags: ZN]
	adc [$C6.b]		; 67 C6 ; Add with carry (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $C6A7.w		; CC A7 C6 ; Compare $C6A7.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $C6DC.w		; CC DC C6 ; Compare $C6DC.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($46.b,S),Y		; 93 46 ; Store accumulator (stack relative indirect indexed) ($46.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda ($40.b),Y		; B1 40 ; Load accumulator ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1066FF.l,X		; FF FF 66 10 ; Subtract with carry (long,X) $1066FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($C021.w,X)		; FC 21 C0 ; Jump to subroutine indirect indexed ($C021.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1F9201.l,X		; 1F 01 92 1F ; Logical OR long $1F9201.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($C2.b,X)		; A1 C2 ; Load accumulator ($C2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($C125.w,X)		; FC 25 C1 ; Jump to subroutine indirect indexed ($C125.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $5F9202.l,X		; 5F 02 92 5F ; Exclusive OR accumulator with memory (long,X) $5F9202.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $C3.b		; A5 C3 ; Load $C3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($8852.w,X)		; FC 52 88 ; Jump to subroutine indirect indexed ($8852.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$2B.b]		; 27 2B ; AND accumulator with memory (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($8A.b)		; 72 8A ; Add with carry (indirect) ($8A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$643A]		; DC 3A 64 ; Jump long indirect [$643A] [Flow: jump]
	sbc $140B75.l,X		; FF 75 0B 14 ; Subtract with carry (long,X) $140B75.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $09.b,X		; 55 09 ; Exclusive OR accumulator with memory $09.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$53.b]		; 27 53 ; AND accumulator with memory (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	eor ($04.b)		; 52 04 ; Exclusive OR accumulator with memory (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $2A.b		; A5 2A ; Load $2A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $68.b,S		; 03 68 ; OR accumulator with stack relative $68.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $003A.w,X		; 1D 3A 00 ; OR accumulator with memory $003A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	sbc $3604FF.l,X		; FF FF 04 36 ; Subtract with carry (long,X) $3604FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: ZNC]
	cpx $0136.w		; EC 36 01 ; Compare $0136.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $0246.w		; EC 46 02 ; Compare $0246.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $BBE2.w,X		; FD E2 BB ; Subtract with carry $BBE2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $3334.w,Y		; 59 34 33 ; Exclusive OR accumulator with memory $3334.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $71.b,X		; 34 71 ; Test bits $71.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor $A43442.l,X		; 5F 42 34 A4 ; Exclusive OR accumulator with memory (long,X) $A43442.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $71.b,X		; 34 71 ; Test bits $71.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $2A17FF.l,X		; FF FF 17 2A ; Subtract with carry (long,X) $2A17FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $97.b		; C6 97 ; Decrement $97.b [Reads: Direct Page] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: ZN]
	.db $50, $C6		; 50 C6 ; Branch if overflow clear to $50, $C6 [Flow: branch]
	eor [$50.b],Y		; 57 50 ; Exclusive OR accumulator with memory (long indexed) [$50.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $97.b		; C6 97 ; Decrement $97.b [Reads: Direct Page] [Flags: ZN]
	.db $50, $C6		; 50 C6 ; Branch if overflow clear to $50, $C6 [Flow: branch]
	cmp $C650.w		; CD 50 C6 ; Compare $C650.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	and ($46.b)		; 32 46 ; AND accumulator with memory (indirect) ($46.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($46.b,S),Y		; 93 46 ; Store accumulator (stack relative indirect indexed) ($46.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $1C62FF.l,X		; FF FF 62 1C ; Subtract with carry (long,X) $1C62FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0126.w,X)		; FC 26 01 ; Jump to subroutine indirect indexed ($0126.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0566.w,X)		; FC 66 05 ; Jump to subroutine indirect indexed ($0566.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($61.b,S),Y		; 73 61 ; Add with carry (stack relative indirect indexed) ($61.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $02A1.w,X		; FD A1 02 ; Subtract with carry $02A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc #$629A.w		; 69 9A 62 ; Add #$629A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $86AC.w,X		; FD AC 86 ; Subtract with carry $86AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $8882.w		; 2C 82 88 ; Test bits $8882.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FE, $2E		; 62 FE 2E ; Push effective relative address $62, $FE, $2E [Writes: Stack Pointer]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	eor ($88.b)		; 52 88 ; Exclusive OR accumulator with memory (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $28.b		; 25 28 ; Logical AND $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($8A.b)		; 32 8A ; AND accumulator with memory (indirect) ($8A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $3B.b		; 14 3B ; Test and reset bits $3B.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $49.b,X		; 55 49 ; Exclusive OR accumulator with memory $49.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($4D95.w,X)		; FC 95 4D ; Jump to subroutine indirect indexed ($4D95.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$66.b]		; 27 66 ; AND accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta $34C9.w,X		; 9D C9 34 ; Store accumulator to $34C9.w,X [Reads: Accumulator, X Index]
	dec $4F04.w,X		; [PATTERN: Memory clearing operation] DE 04 4F ; Decrement memory $4F04.w,X [Reads: X Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	clv		; B8 ; Clear overflow flag [Flags: V]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	and $15CB.w,X		; 3D CB 15 ; AND accumulator with memory $15CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	jmp $5C6926.l		; 5C 26 69 5C ; Jump long to $5C6926.l [Flow: jump]
	dec $69.b,X		; D6 69 ; Decrement memory $69.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	tsb $7F3C.w		; 0C 3C 7F ; Test and set bits $7F3C.w [Reads: Accumulator] [Flags: Z]
	ora [$1F.b],Y		; 17 1F ; OR accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta [$D7.b]		; 87 D7 ; Store accumulator (long) [$D7.b] [Reads: Accumulator, Direct Page]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr ($B1E2.w,X)		; FC E2 B1 ; Jump to subroutine indirect indexed ($B1E2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($C0.b,S),Y		; 73 C0 ; Add with carry (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($C0.b,S),Y		; B3 C0 ; Load accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpy #$8BBB.w		; C0 BB 8B ; Compare #$8BBB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CA9B.w		; C0 9B CA ; Compare #$CA9B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CAD9.w		; C0 D9 CA ; Compare #$CAD9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($25.b,S),Y		; 33 25 ; AND accumulator (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $2434.w,X		; 3D 34 24 ; AND accumulator with memory $2434.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $3A.b,X		; 34 3A ; Test bits $3A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jmp $3B70.w		; 4C 70 3B ; Jump to $3B70.w [Flow: jump]
	eor $993B71.l		; 4F 71 3B 99 ; Exclusive OR accumulator with memory (long) $993B71.l [Writes: Accumulator] [Flags: ZN]
	adc ($47.b),Y		; 71 47 ; Add with carry ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $71.b,S		; 43 71 ; Exclusive OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$8F.b]		; 47 8F ; Exclusive OR accumulator with memory (long) [$8F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($44.b),Y		; 71 44 ; Add with carry ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $0471.w		; CC 71 04 ; Compare $0471.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $46.b		; 04 46 ; Test and set bits $46.b [Reads: Accumulator] [Flags: Z]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $4061.w		; EE 61 40 ; Increment $4061.w [Flags: ZN]
	inc $FF62.w		; EE 62 FF ; Increment $FF62.w [Flags: ZN]
	sbc $C62E1B.l,X		; FF 1B 2E C6 ; Subtract with carry (long,X) $C62E1B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $C6		; 50 C6 ; Branch if overflow clear to $50, $C6 [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $C6.b,S		; 63 C6 ; Add with carry (stack relative) $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $C6.b,S		; A3 C6 ; Load accumulator (stack relative) $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $2E.b		; 14 2E ; Test and reset bits $2E.b [Reads: Accumulator] [Flags: Z]
	dec $2A.b		; C6 2A ; Decrement $2A.b [Reads: Direct Page] [Flags: ZN]
	jmp.w [$F0C6]		; DC C6 F0 ; Jump long indirect [$F0C6] [Flow: jump]
	sbc $914632.l,X		; FF 32 46 91 ; Subtract with carry (long,X) $914632.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0462FF.l,X		; FF FF 62 04 ; Subtract with carry (long,X) $0462FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0021.w,X		; FE 21 00 ; Increment memory $0021.w,X [Reads: X Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF81.w		; 2E 81 FF ; Rotate left $FF81.w [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$D9.b]		; 07 D9 ; OR accumulator with memory (long) [$D9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($62.b,S),Y		; B3 62 ; Load accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $CC836E.l,X		; FF 6E 83 CC ; Subtract with carry (long,X) $CC836E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF64.w		; 2D 64 FF ; Logical AND $FF64.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $16.b,S		; 23 16 ; AND accumulator with stack relative $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FECA31.l,X		; FF 31 CA FE ; Subtract with carry (long,X) $FECA31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($C8.b),Y		; 91 C8 ; Store accumulator ($C8.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy $2D.b		; A4 2D ; Load $2D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $14.b,S		; A3 14 ; Load accumulator (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $1E.b,X		; B4 1E ; Load Y register $1E.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $A6.b,S		; 03 A6 ; OR accumulator with stack relative $A6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $FE63.w,X		; 5D 63 FE ; Exclusive OR accumulator with memory $FE63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $D5.b		; A5 D5 ; Load $D5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $899A.w,X		; FE 9A 89 ; Increment memory $899A.w,X [Reads: X Index] [Flags: ZN]
	cpy $645D.w		; CC 5D 64 ; Compare $645D.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFD725.l,X		; FF 25 D7 FF ; Subtract with carry (long,X) $FFD725.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $8E.b,X		; 36 8E ; Rotate left $8E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $DC8A76.l,X		; FF 76 8A DC ; Subtract with carry (long,X) $DC8A76.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	adc $FF4B.w,Y		; 79 4B FF ; Add $FF4B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $CC4F.w,Y		; 39 4F CC ; AND accumulator with memory $CC4F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $64.b		; A4 64 ; Load $64.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc $B48B3A.l,X		; FF 3A 8B B4 ; Subtract with carry (long,X) $B48B3A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $A4.b		; 04 A4 ; Test and set bits $A4.b [Reads: Accumulator] [Flags: Z]
	bit $A42F.w,X		; 3C 2F A4 ; Test bits $A42F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	mvn $A3,$30		; 54 30 A3 ; Move block negative $A3,$30 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $2254A3.l		; 22 A3 54 22 ; Jump to subroutine long $2254A3.l [Writes: Stack Pointer] [Flow: call]
	cmp $691E.w,X		; DD 1E 69 ; Compare accumulator $691E.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$6955]		; DC 55 69 ; Jump long indirect [$6955] [Flow: jump]
	jmp.w [$2264]		; DC 64 22 ; Jump long indirect [$2264] [Flow: jump]
	lda ($1E.b,X)		; A1 1E ; Load accumulator ($1E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$57A0.w		; 69 A0 57 ; Add #$57A0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$22B8.w		; A0 B8 22 ; Load #$22B8.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $22B8.w		; CC B8 22 ; Compare $22B8.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit #$763C.w		; 89 3C 76 ; Test bits #$763C.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $B0, $E9		; B0 E9 ; Branch if carry set to $B0, $E9 [Flow: branch]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: ZNC]
	cmp $FFA0.w		; CD A0 FF ; Compare $FFA0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $B8A0.w		; 2D A0 B8 ; Logical AND $B8A0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $B3E8.w,Y		; F9 E8 B3 ; Subtract with carry $B3E8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$F2E8.w		; C0 E8 F2 ; Compare #$F2E8.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $613CA9.l,X		; FF A9 3C 61 ; Subtract with carry (long,X) $613CA9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$623C.w		; C9 3C 62 ; Compare #$623C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $702D.w,Y		; B9 2D 70 ; Load $702D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $337D.w,X		; BC 7D 33 ; Load Y register $337D.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	and $79B871.l		; 2F 71 B8 79 ; AND accumulator with memory (long) $79B871.l [Writes: Accumulator] [Flags: ZN]
	adc ($C7.b),Y		; 71 C7 ; Add with carry ($C7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $70C471.l		; 2F 71 C4 70 ; AND accumulator with memory (long) $70C471.l [Writes: Accumulator] [Flags: ZN]
	adc ($C8.b),Y		; 71 C8 ; Add with carry ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $BD34.w,X		; 7D 34 BD ; Add $BD34.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $B0.b,X		; 34 B0 ; Test bits $B0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora [$61.b]		; 07 61 ; OR accumulator with memory (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$6207.w		; C0 07 62 ; Compare #$6207.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $0176.w		; EC 76 01 ; Compare $0176.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $0286.w		; EC 86 02 ; Compare $0286.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $1DAAFF.l,X		; FF FF AA 1D ; Subtract with carry (long,X) $1DAAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $AA.b		; C6 AA ; Decrement $AA.b [Reads: Direct Page] [Flags: ZN]
	eor $6ED8C6.l,X		; 5F C6 D8 6E ; Exclusive OR accumulator with memory (long,X) $6ED8C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $D8.b		; C6 D8 ; Decrement $D8.b [Reads: Direct Page] [Flags: ZN]
	.db $90, $C6		; 90 C6 ; Branch if carry clear to $90, $C6 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $C6.b,X		; 95 C6 ; Store accumulator to $C6.b,X [Reads: Accumulator, X Index]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $50, $40		; 50 40 ; Branch if overflow clear to $50, $40 [Flow: branch]
	lda $40.b,S		; A3 40 ; Load accumulator (stack relative) $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $16.b,S		; A3 16 ; Load accumulator (stack relative) $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $1C62FF.l,X		; FF FF 62 1C ; Subtract with carry (long,X) $1C62FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $98.b,S		; 23 98 ; AND accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda $98.b,S		; A3 98 ; Load accumulator (stack relative) $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	ora #$0D34.w		; 09 34 0D ; Logical OR #$0D34.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0E88.w		; 09 88 0E ; Logical OR #$0E88.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $B2		; 30 B2 ; Branch if minus to $30, $B2 [Flow: branch]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $41.b		; 05 41 ; Logical OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($61.b,X)		; C1 61 ; Compare accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $810E.w,X		; FD 0E 81 ; Subtract with carry $810E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $83CE.w,X		; FE CE 83 ; Increment memory $83CE.w,X [Reads: X Index] [Flags: ZN]
	lda ($C1.b),Y		; B1 C1 ; Load accumulator ($C1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $FE, $CB		; 62 FE CB ; Push effective relative address $62, $FE, $CB [Writes: Stack Pointer]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($AC.b),Y		; D1 AC ; Compare accumulator ($AC.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $10, $D1		; 10 D1 ; Branch if plus to $10, $D1 [Flow: branch]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	adc ($EB.b,X)		; 61 EB ; Add with carry ($EB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $62, $FC, $55		; 62 FC 55 ; Push effective relative address $62, $FC, $55 [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $52.b		; 24 52 ; Test bits $52.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0C.b,X		; F5 0C ; Subtract $0C.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $633A.w,X		; 3C 3A 63 ; Test bits $633A.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsr ($C8F2.w,X)		; FC F2 C8 ; Jump to subroutine indirect indexed ($C8F2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $B4032C.l		; 4F 2C 03 B4 ; Exclusive OR accumulator with memory (long) $B4032C.l [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	cmp ($CA.b)		; D2 CA ; Compare accumulator (indirect) ($CA.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $0ED5.w,X		; FE D5 0E ; Increment memory $0ED5.w,X [Reads: X Index] [Flags: ZN]
	cpy $52.b		; C4 52 ; Compare $52.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $0A.b,X		; 75 0A ; Add $0A.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $89.b		; 14 89 ; Test and reset bits $89.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $62.b,X		; 15 62 ; OR accumulator with memory $62.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $30.b,S		; 63 30 ; Add with carry (stack relative) $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda [$04.b]		; A7 04 ; Load accumulator (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $4D3A.w,X		; FD 3A 4D ; Subtract with carry $4D3A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $63B4.w		; 4D B4 63 ; Exclusive OR $63B4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $C93D.w,X		; FD 3D C9 ; Subtract with carry $C93D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $04DC.w,X		; 5E DC 04 ; Logical shift right $04DC.w,X [Reads: X Index] [Flags: ZNC]
	inc $CB9D.w,X		; FE 9D CB ; Increment memory $CB9D.w,X [Reads: X Index] [Flags: ZN]
	lda $B4.b		; A5 B4 ; Load $B4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda [$04.b]		; A7 04 ; Load accumulator (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $4F9A.w,X		; FE 9A 4F ; Increment memory $4F9A.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $A1		; D0 A1 ; Branch if not equal to $D0, $A1 [Flow: branch]
	trb $62DD.w		; 1C DD 62 ; Test and reset bits $62DD.w [Reads: Accumulator] [Flags: Z]
	stz $14.b		; 64 14 ; Store zero to $14.b
	eor $3922.w		; 4D 22 39 ; Exclusive OR $3922.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$2839.w		; 69 39 28 ; Add #$2839.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $222868.l		; 22 68 28 22 ; Jump to subroutine long $222868.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	jsl $2228A9.l		; 22 A9 28 22 ; Jump to subroutine long $2228A9.l [Writes: Stack Pointer] [Flow: call]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc #$4DD8.w		; 69 D8 4D ; Add #$4DD8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $32A5FC.l		; 22 FC A5 32 ; Jump to subroutine long $32A5FC.l [Writes: Stack Pointer] [Flow: call]
	sbc $F2E2.w,X		; FD E2 F2 ; Subtract with carry $F2E2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $583225.l,X		; FF 25 32 58 ; Subtract with carry (long,X) $583225.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $303B.w		; EE 3B 30 ; Increment $303B.w [Flags: ZN]
	ora ($05.b)		; 12 05 ; OR accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($05.b)		; 12 05 ; OR accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($3A.b),Y		; 11 3A ; OR accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora ($F9.b,S),Y		; 13 F9 ; OR accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $9F		; 70 9F ; Branch if overflow set to $70, $9F [Flow: branch]
	.db $70, $80		; 70 80 ; Branch if overflow set to $70, $80 [Flow: branch]
	sta $9C7170.l,X		; 9F 70 71 9C ; Store accumulator (long,X) $9C7170.l,X [Reads: Accumulator, X Index]
	bit $72.b,X		; 34 72 ; Test bits $72.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda $71.b,S		; A3 71 ; Load accumulator (stack relative) $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $71A3.w		; 8E A3 71 ; Store X register to $71A3.w [Reads: X Index]
	sbc $20AA.w,X		; FD AA 20 ; Subtract with carry $20AA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $20AB.w,X		; FD AB 20 ; Subtract with carry $20AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $20AC.w,X		; FD AC 20 ; Subtract with carry $20AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $20AD.w,X		; FD AD 20 ; Subtract with carry $20AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $204A.w,X		; FE 4A 20 ; Increment memory $204A.w,X [Reads: X Index] [Flags: ZN]
	inc $204B.w,X		; FE 4B 20 ; Increment memory $204B.w,X [Reads: X Index] [Flags: ZN]
	inc $204C.w,X		; FE 4C 20 ; Increment memory $204C.w,X [Reads: X Index] [Flags: ZN]
	inc $204D.w,X		; FE 4D 20 ; Increment memory $204D.w,X [Reads: X Index] [Flags: ZN]
	eor $333D.w		; 4D 3D 33 ; Exclusive OR $333D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $334D.w		; 4D 4D 33 ; Exclusive OR $334D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $335D.w		; 4D 5D 33 ; Exclusive OR $335D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $62.b		; 26 62 ; Rotate left $62.b [Reads: Direct Page] [Flags: ZNC]
	and ($26.b,S),Y		; 33 26 ; AND accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($33.b)		; 72 33 ; Add with carry (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $82.b		; 26 82 ; Rotate left $82.b [Reads: Direct Page] [Flags: ZNC]
	and ($26.b,S),Y		; 33 26 ; AND accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($A4.b,S),Y		; 33 A4 ; AND accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $CC70.w,X		; 3E 70 CC ; Rotate left $CC70.w,X [Reads: X Index] [Flags: ZNC]
	.db $62, $70, $CC		; 62 70 CC ; Push effective relative address $62, $70, $CC [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $70, $27		; 70 27 ; Branch if overflow set to $70, $27 [Flow: branch]
	sta [$34.b],Y		; 97 34 ; Store accumulator (long indexed) [$34.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc ($97.b,S),Y		; 73 97 ; Add with carry (stack relative indirect indexed) ($97.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $BD.b,X		; 34 BD ; Test bits $BD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sty $34.b,X		; 94 34 ; Store Y register $34.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sbc $9CA3.w,X		; FD A3 9C ; Subtract with carry $9CA3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $9C23.w,X		; FE 23 9C ; Increment memory $9C23.w,X [Reads: X Index] [Flags: ZN]
	sbc $9C65.w,X		; FD 65 9C ; Subtract with carry $9C65.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $9C65.w,X		; FE 65 9C ; Increment memory $9C65.w,X [Reads: X Index] [Flags: ZN]
	.db $30, $70		; 30 70 ; Branch if minus to $30, $70 [Flow: branch]
	and $7040.w,Y		; 39 40 70 ; AND accumulator with memory $7040.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $7050.w,Y		; 39 50 70 ; AND accumulator with memory $7050.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $70A8.w,Y		; 39 A8 70 ; AND accumulator with memory $70A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $70B8.w,Y		; 39 B8 70 ; AND accumulator with memory $70B8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $70C8.w,Y		; 39 C8 70 ; AND accumulator with memory $70C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $8170.w,Y		; 39 70 81 ; AND accumulator with memory $8170.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1109.w,X		; 3D 09 11 ; AND accumulator with memory $1109.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$9D09.w		; A0 09 9D ; Load #$9D09.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($03.b,X)		; A1 03 ; Load accumulator ($03.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpy #$BDD5.w		; C0 D5 BD ; Compare #$BDD5.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $D5.b,S		; A3 D5 ; Load accumulator (stack relative) $D5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($A2.b),Y		; 11 A2 ; OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $42, $02		; 42 02 ; Reserved instruction
	.db $42, $16		; 42 16 ; Reserved instruction
	lda $02.b,S		; A3 02 ; Load accumulator (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $16.b,S		; A3 16 ; Load accumulator (stack relative) $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($02.b,X)		; A1 02 ; Load accumulator ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($12.b,X)		; A1 12 ; Load accumulator ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1C62FF.l,X		; FF FF 62 1C ; Subtract with carry (long,X) $1C62FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0061.w,X)		; FC 61 00 ; Jump to subroutine indirect indexed ($0061.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $6123.w,Y		; 19 23 61 ; OR accumulator with memory $6123.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($8465.w,X)		; FC 65 84 ; Jump to subroutine indirect indexed ($8465.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($8025.w,X)		; FC 25 80 ; Jump to subroutine indirect indexed ($8025.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($012A.w,X)		; FC 2A 01 ; Jump to subroutine indirect indexed ($012A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($056A.w,X)		; FC 6A 05 ; Jump to subroutine indirect indexed ($056A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $61B3.w,Y		; 19 B3 61 ; OR accumulator with memory $61B3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $83CE.w,X		; FD CE 83 ; Subtract with carry $83CE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($C1.b),Y		; 71 C1 ; Add with carry ($C1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $FD, $CB		; 62 FD CB ; Push effective relative address $62, $FD, $CB [Writes: Stack Pointer]
	eor [$81.b]		; 47 81 ; Exclusive OR accumulator with memory (long) [$81.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $02.b,X		; B5 02 ; Load $02.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$6298.w		; A9 98 62 ; Load #$6298.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $43AB.w,X		; FE AB 43 ; Increment memory $43AB.w,X [Reads: X Index] [Flags: ZN]
	inc $02A1.w,X		; FE A1 02 ; Increment memory $02A1.w,X [Reads: X Index] [Flags: ZN]
	jsr ($C891.w,X)		; FC 91 C8 ; Jump to subroutine indirect indexed ($C891.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $1E.b,X		; 34 1E ; Test bits $1E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($CA.b),Y		; 31 CA ; AND accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $4F39.w,X		; FD 39 4F ; Subtract with carry $4F39.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $AA.b,X		; 34 AA ; Test bits $AA.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	ldy $63.b		; A4 63 ; Load $63.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr ($899A.w,X)		; FC 9A 89 ; Jump to subroutine indirect indexed ($899A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($4D99.w,X)		; FC 99 4D ; Jump to subroutine indirect indexed ($4D99.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($4959.w,X)		; FC 59 49 ; Jump to subroutine indirect indexed ($4959.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	trb $77.b		; 14 77 ; Test and reset bits $77.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lsr $48.b,X		; 56 48 ; Logical shift right $48.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr ($4C96.w,X)		; FC 96 4C ; Jump to subroutine indirect indexed ($4C96.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $2E.b		; 25 2E ; Logical AND $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	bit $0E.b,X		; 34 0E ; Test bits $0E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jmp ($2E4C.w)		; 6C 4C 2E ; Jump indirect to ($2E4C.w) [Flow: jump]
	stz $4C.b		; 64 4C ; Store zero to $4C.b
	ldy $64.b		; A4 64 ; Load $64.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc $8B3A.w,X		; FD 3A 8B ; Subtract with carry $8B3A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $033C.w,Y		; 79 3C 03 ; Add $033C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $12E4.w,X		; FD E4 12 ; Subtract with carry $12E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0498.w,Y		; 79 98 04 ; Add $0498.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $53E9.w,X		; FD E9 53 ; Subtract with carry $53E9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $CA73.w,X		; FE 73 CA ; Increment memory $CA73.w,X [Reads: X Index] [Flags: ZN]
	stz $644D.w,X		; 9E 4D 64 ; Store zero to $644D.w,X [Reads: X Index]
	inc $8B79.w,X		; FE 79 8B ; Increment memory $8B79.w,X [Reads: X Index] [Flags: ZN]
	adc ($3D.b,S),Y		; 73 3D ; Add with carry (stack relative indirect indexed) ($3D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $1F5F.w		; 6D 5F 1F ; Add $1F5F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $4C69AC.l		; 5C AC 69 4C ; Jump long to $4C69AC.l [Flow: jump]
	lda $2422.w,Y		; B9 22 24 ; Load $2422.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jsl $8A3A71.l		; 22 71 3A 8A ; Jump to subroutine long $8A3A71.l [Writes: Stack Pointer] [Flow: call]
	.db $70, $3A		; 70 3A ; Branch if overflow set to $70, $3A [Flow: branch]
	jsl $223998.l		; 22 98 39 22 ; Jump to subroutine long $223998.l [Writes: Stack Pointer] [Flow: call]
	.db $70, $AA		; 70 AA ; Branch if overflow set to $70, $AA [Flow: branch]
	jsl $22A998.l		; 22 98 A9 22 ; Jump to subroutine long $22A998.l [Writes: Stack Pointer] [Flow: call]
	inc $F123.w,X		; FE 23 F1 ; Increment memory $F123.w,X [Reads: X Index] [Flags: ZN]
	ldy $773F.w		; AC 3F 77 ; Load $773F.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $30, $E9		; 30 E9 ; Branch if minus to $30, $E9 [Flow: branch]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	cmp $FDA0.w		; CD A0 FD ; Compare $FDA0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $A3A0.w		; 2D A0 A3 ; Logical AND $A3A0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $13BBFA.l		; AF FA BB 13 ; Load long $13BBFA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$53BB.w		; C0 BB 53 ; Compare #$53BB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$93BB.w		; C0 BB 93 ; Compare #$93BB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2BB.w		; C0 BB D2 ; Compare #$D2BB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C683.w		; C0 83 C6 ; Compare #$C683.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$F381.w		; C0 81 F3 ; Compare #$F381.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($C0.b,S),Y		; B3 C0 ; Load accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $435CFF.l,X		; FF FF 5C 43 ; Subtract with carry (long,X) $435CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($01.b,X)		; 41 01 ; Exclusive OR accumulator with memory ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $700297.l		; 5C 97 02 70 ; Jump long to $700297.l [Flow: jump]
	sta $02.b,X		; 95 02 ; Store accumulator to $02.b,X [Reads: Accumulator, X Index]
	and $702D.w,Y		; 39 2D 70 ; AND accumulator with memory $702D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($24.b,S),Y		; 33 24 ; AND accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $2534.w,X		; 7E 34 25 ; Rotate right $2534.w,X [Reads: X Index] [Flags: ZNC]
	bit #$3B34.w		; 89 34 3B ; Test bits #$3B34.w with accumulator [Reads: Accumulator] [Flags: Z]
	and $2F4771.l		; 2F 71 47 2F ; AND accumulator with memory (long) $2F4771.l [Writes: Accumulator] [Flags: ZN]
	adc ($44.b),Y		; 71 44 ; Add with carry ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc ($38.b),Y		; 71 38 ; Add with carry ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($0471.w)		; 6C 71 04 ; Jump indirect to ($0471.w) [Flow: jump]
	ror $01.b,X		; 76 01 ; Rotate right $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $86.b		; 04 86 ; Test and set bits $86.b [Reads: Accumulator] [Flags: Z]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$61.b]		; 07 61 ; OR accumulator with memory (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora [$62.b]		; 07 62 ; OR accumulator with memory (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $1F2AFF.l,X		; FF FF 2A 1F ; Subtract with carry (long,X) $1F2AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $2A.b		; C6 2A ; Decrement $2A.b [Reads: Direct Page] [Flags: ZN]
	eor $6715C6.l,X		; 5F C6 15 67 ; Exclusive OR accumulator with memory (long,X) $6715C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $2A.b		; C6 2A ; Decrement $2A.b [Reads: Direct Page] [Flags: ZN]
	sta $C6.b,X		; 95 C6 ; Store accumulator to $C6.b,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	and $767AC6.l,X		; 3F C6 7A 76 ; AND accumulator with memory (long,X) $767AC6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $424042.l,X		; FF 42 40 42 ; Subtract with carry (long,X) $424042.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $30.b,X		; 16 30 ; Arithmetic shift left $30.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($3A.b)		; 92 3A ; Store accumulator (indirect) ($3A.b) [Reads: Accumulator, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror $FF.b		; 66 FF ; Rotate right $FF.b [Reads: Direct Page] [Flags: ZNC]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF1881.l,X		; FF 81 18 FF ; Subtract with carry (long,X) $FF1881.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE0CE1.l,X		; FF E1 0C FE ; Subtract with carry (long,X) $FE0CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $84A3.w,X		; FE A3 84 ; Increment memory $84A3.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $C80221.l,X		; FF 21 02 C8 ; Subtract with carry (long,X) $C80221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $D88623.l,X		; FF 23 86 D8 ; Subtract with carry (long,X) $D88623.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $82.b,S		; A3 82 ; Load accumulator (stack relative) $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta [$47.b],Y		; 97 47 ; Store accumulator (long indexed) [$47.b],Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta [$57.b],Y		; 97 57 ; Store accumulator (long indexed) [$57.b],Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta [$67.b],Y		; 97 67 ; Store accumulator (long indexed) [$67.b],Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc [$57.b]		; E7 57 ; Subtract with carry (long) [$57.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc [$67.b]		; E7 67 ; Subtract with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc [$47.b]		; E7 47 ; Subtract with carry (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	.db $B0, $91		; B0 91 ; Branch if carry set to $B0, $91 [Flow: branch]
	sbc $06EB98.l,X		; FF 98 EB 06 ; Subtract with carry (long,X) $06EB98.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit #$C00A.w		; 89 0A C0 ; Test bits #$C00A.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $C00A.w,Y		; D9 0A C0 ; Compare accumulator $C00A.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $8018.w		; 20 18 80 ; Jump to subroutine at $8018.w [Writes: Stack Pointer] [Flow: call]
	rol $83.b,X		; 36 83 ; Rotate left $83.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1C18E1.l,X		; FF E1 18 1C ; Subtract with carry (long,X) $1C18E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $51		; 90 51 ; Branch if carry clear to $90, $51 [Flow: branch]
	bit $5190.w		; 2C 90 51 ; Test bits $5190.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	mvp $51,$90		; 44 90 51 ; Move block positive $51,$90 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $51,$90		; 54 90 51 ; Move block negative $51,$90 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	trb $52EC.w		; 1C EC 52 ; Test and reset bits $52EC.w [Reads: Accumulator] [Flags: Z]
	bit $52EC.w		; 2C EC 52 ; Test bits $52EC.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	mvp $52,$EC		; 44 EC 52 ; Move block positive $52,$EC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $52,$EC		; 54 EC 52 ; Move block negative $52,$EC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $0885.w		; [PATTERN: Memory clearing operation] 9C 85 08 ; Store zero to $0885.w
	ldy $0885.w		; AC 85 08 ; Load $0885.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $0885.w		; CC 85 08 ; Compare $0885.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp.w [$6C85]		; DC 85 6C ; Jump long indirect [$6C85] [Flow: jump]
	stz $6C86.w		; 9C 86 6C ; Store zero to $6C86.w
	ldy $6C86.w		; AC 86 6C ; Load $6C86.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $6C86.w		; CC 86 6C ; Compare $6C86.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp.w [$2886]		; DC 86 28 ; Jump long indirect [$2886] [Flow: jump]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sbc $A853.w,X		; FD 53 A8 ; Subtract with carry $A853.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $D82B.w,X		; FE 2B D8 ; Increment memory $D82B.w,X [Reads: X Index] [Flags: ZN]
	inc $D853.w,X		; FE 53 D8 ; Increment memory $D853.w,X [Reads: X Index] [Flags: ZN]
	inc $2BFE.w,X		; FE FE 2B ; Increment memory $2BFE.w,X [Reads: X Index] [Flags: ZN]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $04AB.w,X		; FE AB 04 ; Increment memory $04AB.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$FE61.w		; A2 61 FE ; Load #$FE61.w into X register [Writes: X Index] [Flags: ZN]
	lda #$FE00.w		; A9 00 FE ; Load #$FE00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $9881.w		; 2C 81 98 ; Test bits $9881.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $A885.w		; AC 85 A8 ; Load $A885.w into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $A381.w		; AE 81 A3 ; Load $A381.w into X register [Writes: X Index] [Flags: ZN]
	cpy #$C3FE.w		; C0 FE C3 ; Compare #$C3FE.w with Y register [Reads: Y Index] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $C0C3.w,X		; FE C3 C0 ; Increment memory $C0C3.w,X [Reads: X Index] [Flags: ZN]
	inc $A3BB.w,X		; FE BB A3 ; Increment memory $A3BB.w,X [Reads: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpy #$FDD8.w		; C0 D8 FD ; Compare #$FDD8.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit #$C091.w		; 89 91 C0 ; Test bits #$C091.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$C0D9.w		; 89 D9 C0 ; Test bits #$C0D9.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $188218.l		; 22 18 82 18 ; Jump to subroutine long $188218.l [Writes: Stack Pointer] [Flow: call]
	sta $18.b,S		; 83 18 ; Store accumulator (stack relative) $18.b,S [Reads: Accumulator, Stack Pointer]
	sbc $18E1FF.l,X		; FF FF E1 18 ; Subtract with carry (long,X) $18E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($39E9.w,X)		; FC E9 39 ; Jump to subroutine indirect indexed ($39E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	jsr $38A8.w		; 20 A8 38 ; Jump to subroutine at $38A8.w [Writes: Stack Pointer] [Flow: call]
	jsr $38D4.w		; 20 D4 38 ; Jump to subroutine at $38D4.w [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pei ($38.b)		; D4 38 ; Push effective indirect address ($38.b) [Reads: Direct Page] [Writes: Stack Pointer]
	and ($BB.b,S),Y		; 33 BB ; AND accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and ($CB.b,S),Y		; 33 CB ; AND accumulator (stack relative indirect indexed) ($CB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $FFFF18.l		; 22 18 FF FF ; Jump to subroutine long $FFFF18.l [Writes: Stack Pointer] [Flow: call]
	sbc ($14.b,X)		; E1 14 ; Subtract with carry ($14.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($38E9.w,X)		; FC E9 38 ; Jump to subroutine indirect indexed ($38E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($00A9.w,X)		; FC A9 00 ; Jump to subroutine indirect indexed ($00A9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($81AA.w,X)		; FC AA 81 ; Jump to subroutine indirect indexed ($81AA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $49.b		; 85 49 ; Store accumulator to $49.b [Reads: Accumulator]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $FE81.w		; 2E 81 FE ; Rotate left $FE81.w [Flags: ZNC]
	ldx $A983.w		; AE 83 A9 ; Load $A983.w into X register [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	.db $62, $FE, $AA		; 62 FE AA ; Push effective relative address $62, $FE, $AA [Writes: Stack Pointer]
	sta [$B8.b]		; 87 B8 ; Store accumulator (long) [$B8.b] [Reads: Accumulator, Direct Page]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Accumulator, Stack Pointer]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FE0229.l,X		; FF 29 02 FE ; Subtract with carry (long,X) $FE0229.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $9AC0.w		; 20 C0 9A ; Jump to subroutine at $9AC0.w [Writes: Stack Pointer] [Flow: call]
	asl $FF01.w		; 0E 01 FF ; Arithmetic shift left $FF01.w [Flags: ZNC]
	ldy #$A3C2.w		; A0 C2 A3 ; Load #$A3C2.w into Y register [Writes: Y Index] [Flags: ZN]
	rol $E2.b		; 26 E2 ; Rotate left $E2.b [Reads: Direct Page] [Flags: ZNC]
	inc $8851.w,X		; FE 51 88 ; Increment memory $8851.w,X [Reads: X Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($8A.b),Y		; 71 8A ; Add with carry ($8A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $28.b,X		; 95 28 ; Store accumulator to $28.b,X [Reads: Accumulator, X Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $09.b,X		; 55 09 ; Exclusive OR accumulator with memory $09.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $52.b		; A5 52 ; Load $52.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $DD.b		; 04 DD ; Test and set bits $DD.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	adc $0B.b,X		; 75 0B ; Add $0B.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($A3.b,S),Y		; 53 A3 ; XOR accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $60.b,X		; 94 60 ; Store Y register $60.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	jsl $2260DC.l		; 22 DC 60 22 ; Jump to subroutine long $2260DC.l [Writes: Stack Pointer] [Flow: call]
	lda $53.b		; A5 53 ; Load $53.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $53CD.w,Y		; F9 CD 53 ; Subtract with carry $53CD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $910B.w,Y		; F9 0B 91 ; Subtract with carry $910B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($91.b,S),Y		; 13 91 ; OR accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($C0.b)		; 92 C0 ; Store accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$92D9.w		; C0 D9 92 ; Compare #$92D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$BBBB.w		; C0 BB BB ; Compare #$BBBB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$2CAA.w		; C0 AA 2C ; Compare #$2CAA.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $2CC6.w,Y		; F9 C6 2C ; Subtract with carry $2CC6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $1C71.w		; 20 71 1C ; Jump to subroutine at $1C71.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sbc $0851FF.l,X		; FF FF 51 08 ; Subtract with carry (long,X) $0851FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0061.w,X)		; FC 61 00 ; Jump to subroutine indirect indexed ($0061.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $63FC61.l		; 22 61 FC 63 ; Jump to subroutine long $63FC61.l [Writes: Stack Pointer] [Flow: call]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0221.w,X		; FD 21 02 ; Subtract with carry $0221.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0622.w,X		; FD 22 06 ; Subtract with carry $0622.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsl $A2FD01.l		; 22 01 FD A2 ; Jump to subroutine long $A2FD01.l [Writes: Stack Pointer] [Flow: call]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $229A00.l		; 22 00 9A 22 ; Jump to subroutine long $229A00.l [Writes: Stack Pointer] [Flow: call]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx #$FE02.w		; A2 02 FE ; Load #$FE02.w into X register [Writes: X Index] [Flags: ZN]
	bit $98C1.w		; 2C C1 98 ; Test bits $98C1.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cmp $A002.w		; CD 02 A0 ; Compare $A002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $FEC5.w		; 8C C5 FE ; Store Y register to $FEC5.w [Reads: Y Index]
	stx $FF81.w		; 8E 81 FF ; Store X register to $FF81.w [Reads: X Index]
	lsr $D083.w		; 4E 83 D0 ; Logical shift right $D083.w [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $4C		; 62 FF 4C ; Push effective relative address $62, $FF, $4C [Writes: Stack Pointer]
	cmp [$E0.b]		; C7 E0 ; Compare accumulator (long) [$E0.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $FF02.w		; CD 02 FF ; Compare $FF02.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $20C3.w		; AC C3 20 ; Load $20C3.w into Y register [Writes: Y Index] [Flags: ZN]
	rol $FC03.w,X		; 3E 03 FC ; Rotate left $FC03.w,X [Reads: X Index] [Flags: ZNC]
	eor ($C8.b,S),Y		; 53 C8 ; XOR accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $4D.b		; 14 4D ; Test and reset bits $4D.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $C9.b,X		; 55 C9 ; Exclusive OR accumulator with memory $C9.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $5D.b		; 24 5D ; Test bits $5D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $4C.b		; 04 4C ; Test and set bits $4C.b [Reads: Accumulator] [Flags: Z]
	eor $FD04.w,X		; 5D 04 FD ; Exclusive OR accumulator with memory $FD04.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $CB.b,X		; 75 CB ; Add $CB.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $50643F.l		; 5C 3F 64 50 ; Jump long to $50643F.l [Flow: jump]
	and $FD03.w		; 2D 03 FD ; Logical AND $FD03.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b)		; 72 CA ; Add with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $39.b,X		; 36 39 ; Rotate left $39.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc #$2C4F.w		; 69 4F 2C ; Add #$2C4F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$2635.w		; 69 35 26 ; Add #$2635.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $BA22.w,Y		; F9 22 BA ; Subtract with carry $BA22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFB232.l,X		; FF 32 B2 FF ; Subtract with carry (long,X) $FFB232.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($BA.b)		; 52 BA ; Exclusive OR accumulator with memory (indirect) ($BA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFD23A.l,X		; FF 3A D2 FF ; Subtract with carry (long,X) $FFD23A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $DA		; 42 DA ; Reserved instruction
	sbc $3A1030.l,X		; FF 30 10 3A ; Subtract with carry (long,X) $3A1030.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta ($3A.b),Y		; 91 3A ; Store accumulator ($3A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $65.b,X		; 76 65 ; Rotate right $65.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	adc [$66.b],Y		; 77 66 ; Add with carry (long indexed) [$66.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$9F.b],Y		; 17 9F ; OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc [$9F.b]		; 67 9F ; Add with carry (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora [$E7.b],Y		; 17 E7 ; OR accumulator with memory (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and $FEFAC3.l,X		; 3F C3 FA FE ; AND accumulator with memory (long,X) $FEFAC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($C8.b)		; 52 C8 ; Exclusive OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b)		; 72 CA ; Add with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $3D.b,X		; 94 3D ; Store Y register $3D.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	mvn $FF,$C9		; 54 C9 FF ; Move block negative $FF,$C9 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stz $CB.b,X		; 74 CB ; Store zero to $CB.b,X [Reads: X Index]
	jmp.w [$643D]		; DC 3D 64 ; Jump long indirect [$643D] [Flow: jump]
	ldy $4C.b		; A4 4C ; Load $4C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	ldy $CD.b,X		; B4 CD ; Load Y register $CD.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc $D4CF14.l,X		; FF 14 CF D4 ; Subtract with carry (long,X) $D4CF14.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $AC04.w		; 4C 04 AC ; Jump to $AC04.w [Flow: jump]
	.db $80, $63		; 80 63 ; Branch always to $80, $63 [Flow: branch]
	cpy $80.b		; C4 80 ; Compare $80.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	stz $AD.b		; 64 AD ; Store zero to $AD.b
	ldy $FE63.w		; AC 63 FE ; Load $FE63.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $BC09.w,X		; BD 09 BC ; Load $BC09.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	cmp $AC.b		; C5 AC ; Compare $AC.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	ora $970B.w,X		; 1D 0B 97 ; OR accumulator with memory $970B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5DD822.l,X		; 5F 22 D8 5D ; Exclusive OR accumulator with memory (long,X) $5DD822.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $22A8AA.l		; 22 AA A8 22 ; Jump to subroutine long $22A8AA.l [Writes: Stack Pointer] [Flow: call]
	lda #$69AA.w		; A9 AA 69 ; Load #$69AA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $AA.b,X		; D5 AA ; Compare accumulator $AA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc #$E0B0.w		; 69 B0 E0 ; Add #$E0B0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$FC38.w		; E0 38 FC ; Compare #$FC38.w with X register [Reads: X Index] [Flags: ZNC]
	sta ($F1.b,S),Y		; 93 F1 ; Store accumulator (stack relative indirect indexed) ($F1.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp ($F9.b,S),Y		; D3 F9 ; Compare accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C010.w,Y		; 59 10 C0 ; Exclusive OR accumulator with memory $C010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	sta ($DD.b,X)		; 81 DD ; Store accumulator ($DD.b,X) [Reads: Accumulator, X Index, Direct Page]
	cpy #$DDE1.w		; C0 E1 DD ; Compare #$DDE1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	and $FD01.w,X		; 3D 01 FD ; AND accumulator with memory $FD01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $C002.w,X		; FD 02 C0 ; Subtract with carry $C002.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $5F.b,X		; 34 5F ; Test bits $5F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $AC.b		; 02 AC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $AD61.w,X		; 5D 61 AD ; Exclusive OR accumulator with memory $AD61.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($C4.b,X)		; 61 C4 ; Add with carry ($C4.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $C562.w,X		; 5D 62 C5 ; Exclusive OR accumulator with memory $C562.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $AC, $89		; 62 AC 89 ; Push effective relative address $62, $AC, $89 [Writes: Stack Pointer]
	adc ($AD.b,X)		; 61 AD ; Add with carry ($AD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $C461.w		; 8C 61 C4 ; Store Y register to $C461.w [Reads: Y Index]
	bit #$C562.w		; 89 62 C5 ; Test bits #$C562.w with accumulator [Reads: Accumulator] [Flags: Z]
	sty $FE62.w		; 8C 62 FE ; Store Y register to $FE62.w [Reads: Y Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pea $356D.w		; F4 6D 35 ; Push absolute address $356D.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $02.b		; 45 02 ; Exclusive OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $0136.w		; EC 36 01 ; Compare $0136.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $0246.w		; EC 46 02 ; Compare $0246.w with X register [Reads: X Index] [Flags: ZNC]
	lda $FFF930.l,X		; BF 30 F9 FF ; Load long $FFF930.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $C63E15.l,X		; FF 15 3E C6 ; Subtract with carry (long,X) $C63E15.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $2F		; 50 2F ; Branch if overflow clear to $50, $2F [Flow: branch]
	dec $5C.b		; C6 5C ; Decrement $5C.b [Reads: Direct Page] [Flags: ZN]
	and $2E97C6.l		; 2F C6 97 2E ; AND accumulator with memory (long) $2E97C6.l [Writes: Accumulator] [Flags: ZN]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: ZN]
	rol $AAC6.w		; 2E C6 AA ; Rotate left $AAC6.w [Flags: ZNC]
	jmp ($AAC6.w,X)		; 7C C6 AA ; Jump indirect indexed to ($AAC6.w,X) [Reads: X Index] [Flow: jump]
	jmp ($A822.w,X)		; 7C 22 A8 ; Jump indirect indexed to ($A822.w,X) [Reads: X Index] [Flow: jump]
	jmp ($AA69.w,X)		; 7C 69 AA ; Jump indirect indexed to ($AA69.w,X) [Reads: X Index] [Flow: jump]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsl $697CD4.l		; 22 D4 7C 69 ; Jump to subroutine long $697CD4.l [Writes: Stack Pointer] [Flow: call]
	lda $C6AE.w		; AD AE C6 ; Load $C6AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $AE.b		; C4 AE ; Compare $AE.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $603882.l,X		; FF 82 38 60 ; Subtract with carry (long,X) $603882.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $81.b,X		; 36 81 ; Rotate left $81.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $4092.w		; 1C 92 40 ; Test and reset bits $4092.w [Reads: Accumulator] [Flags: Z]
	sta ($40.b,S),Y		; 93 40 ; Store accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C61FF.l,X		; FF FF 61 1C ; Subtract with carry (long,X) $1C61FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$0D34.w		; 09 34 0D ; Logical OR #$0D34.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($18.b,X)		; 81 18 ; Store accumulator ($18.b,X) [Reads: Accumulator, X Index, Direct Page]
	lda #$FC02.w		; A9 02 FC ; Load #$FC02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $FC.b		; 85 FC ; Store accumulator to $FC.b [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($31.b,X)		; 81 31 ; Store accumulator ($31.b,X) [Reads: Accumulator, X Index, Direct Page]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta $69.b		; 85 69 ; Store accumulator to $69.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $FE81.w		; AE 81 FE ; Load $FE81.w into X register [Writes: X Index] [Flags: ZN]
	rol $8983.w		; 2E 83 89 ; Rotate left $8983.w [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $62, $FE, $2B		; 62 FE 2B ; Push effective relative address $62, $FE, $2B [Writes: Stack Pointer]
	sta [$99.b]		; 87 99 ; Store accumulator (long) [$99.b] [Reads: Accumulator, Direct Page]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta $E0.b,S		; 83 E0 ; Store accumulator (stack relative) $E0.b,S [Reads: Accumulator, Stack Pointer]
	lda #$FF02.w		; A9 02 FF ; Load #$FF02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $D1.b,S		; 83 D1 ; Store accumulator (stack relative) $D1.b,S [Reads: Accumulator, Stack Pointer]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $62, $14, $35		; 62 14 35 ; Push effective relative address $62, $14, $35 [Writes: Stack Pointer]
	ora $3915.w,Y		; 19 15 39 ; OR accumulator with memory $3915.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lsr $89.b,X		; 56 89 ; Logical shift right $89.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $6A.b		; 24 6A ; Test bits $6A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	inc $8D.b,X		; F6 8D ; Increment memory $8D.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	bit $637B.w,X		; 3C 7B 63 ; Test bits $637B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cpy $6A.b		; C4 6A ; Compare $6A.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ror $8B.b,X		; 76 8B ; Rotate right $8B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $8FD6.w,X		; FE D6 8F ; Increment memory $8FD6.w,X [Reads: X Index] [Flags: ZN]
	ldy $7B.b,X		; B4 7B ; Load Y register $7B.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	cmp $D08B.w,Y		; D9 8B D0 ; Compare accumulator $D08B.w,Y [Reads: Y Index] [Flags: ZNC]
	ora $DD1B.w,X		; 1D 1B DD ; OR accumulator with memory $DD1B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3164.w,Y		; 39 64 31 ; AND accumulator with memory $3164.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $FD03.w		; 1C 03 FD ; Test and reset bits $FD03.w [Reads: Accumulator] [Flags: Z]
	adc ($CA.b,X)		; 61 CA ; Add with carry ($CA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CE62.w,X		; FD 62 CE ; Subtract with carry $CE62.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $28.b,X		; 74 28 ; Store zero to $28.b,X [Reads: X Index]
	adc #$2888.w		; 69 88 28 ; Add #$2888.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$2D69.w		; 69 69 2D ; Add #$2D69.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $62, $CC, $A9		; 62 CC A9 ; Push effective relative address $62, $CC, $A9 [Writes: Stack Pointer]
	trb $FE03.w		; 1C 03 FE ; Test and reset bits $FE03.w [Reads: Accumulator] [Flags: Z]
	adc ($C8.b,X)		; 61 C8 ; Add with carry ($C8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($89F9.w,X)		; FC F9 89 ; Jump to subroutine indirect indexed ($89F9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $680498.l		; 4F 98 04 68 ; Exclusive OR accumulator with memory (long) $680498.l [Writes: Accumulator] [Flags: ZN]
	ora ($3A.b),Y		; 11 3A ; OR accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	trb $9469.w		; 1C 69 94 ; Test and reset bits $9469.w [Reads: Accumulator] [Flags: Z]
	trb $FD69.w		; 1C 69 FD ; Test and reset bits $FD69.w [Reads: Accumulator] [Flags: Z]
.ACCU 8
.INDEX 8
	sep #$F1		; E2 F1
	ora $7A.b,X		; 15 7A ; OR accumulator with memory $7A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $69793A.l		; 22 3A 79 69 ; Jump to subroutine long $69793A.l [Writes: Stack Pointer] [Flow: call]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$5F.b		; A9 5F ; Load #$5F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	dec $79.b		; C6 79 ; Decrement $79.b [Reads: Direct Page] [Flags: ZN]
	adc #$C5.b		; 69 C5 ; Add #$C5.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsl $FAA3DB.l		; 22 DB A3 FA ; Jump to subroutine long $FAA3DB.l [Writes: Stack Pointer] [Flow: call]
	wai		; CB ; Wait for interrupt
	ror $E3FE.w,X		; 7E FE E3 ; Rotate right $E3FE.w,X [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cpx #$A0.b		; E0 A0 ; Compare #$A0.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $650C.w,X		; FD 0C 65 ; Subtract with carry $650C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $8065EC.l,X		; 7F EC 65 80 ; Add long $8065EC.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ror $1BFE.w,X		; 7E FE 1B ; Rotate right $1BFE.w,X [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and $A3.b,S		; 23 A3 ; AND accumulator with stack relative $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy #$FD.b		; A0 FD ; Load #$FD.b into Y register [Writes: Y Index] [Flags: ZN]
	ora #$11.b		; 09 11 ; Logical OR #$11.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$D5.b		; A0 D5 ; Load #$D5.b into Y register [Writes: Y Index] [Flags: ZN]
	ora ($A2.b),Y		; 11 A2 ; OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($BB.b,X)		; 01 BB ; Logical OR ($BB.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$61.b		; C0 61 ; Compare #$61.b with Y register [Reads: Y Index] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$D9.b		; C0 D9 ; Compare #$D9.b with Y register [Reads: Y Index] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$E1.b		; C0 E1 ; Compare #$E1.b with Y register [Reads: Y Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $C15A61.l,X		; FF 61 5A C1 ; Subtract with carry (long,X) $C15A61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $82		; 70 82 ; Branch if overflow set to $70, $82 [Flow: branch]
	and ($79.b,X)		; 21 79 ; Logical AND ($79.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $36.b		; 04 36 ; Test and set bits $36.b [Reads: Accumulator] [Flags: Z]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: ZNC]
	cpx $0136.w		; EC 36 01 ; Compare $0136.w with X register [Reads: X Index] [Flags: ZNC]
	cpx $0246.w		; EC 46 02 ; Compare $0246.w with X register [Reads: X Index] [Flags: ZNC]
	and $5F.b,S		; 23 5F ; AND accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and $67.b,S		; 23 67 ; AND accumulator with stack relative $67.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor $67DBFA.l,X		; 5F FA DB 67 ; Exclusive OR accumulator with memory (long,X) $67DBFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $FC.b,S		; [PATTERN: Memory clearing operation] 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $43.b,S		; A3 43 ; Load accumulator (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($A3FD.w,X)		; FC FD A3 ; Jump to subroutine indirect indexed ($A3FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $23FE.w		; 9C FE 23 ; Store zero to $23FE.w
	stz $FFFF.w		; 9C FF FF ; Store zero to $FFFF.w
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $AC.b,X		; 36 AC ; Rotate left $AC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($1F.b)		; 32 1F ; AND accumulator with memory (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $58.b		; C6 58 ; Decrement $58.b [Reads: Direct Page] [Flags: ZN]
	ora $3B17C6.l,X		; 1F C6 17 3B ; Logical OR long $3B17C6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $6B.b		; C6 6B ; Decrement $6B.b [Reads: Direct Page] [Flags: ZN]
	and ($C6.b,S),Y		; 33 C6 ; AND accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $1FC0C6.l,X		; 1F C6 C0 1F ; Logical OR long $1FC0C6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $AF.b		; C6 AF ; Decrement $AF.b [Reads: Direct Page] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $3F.b		; C6 3F ; Decrement $3F.b [Reads: Direct Page] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dec $7F.b		; C6 7F ; Decrement $7F.b [Reads: Direct Page] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: ZN]
	eor $95C6.w,X		; 5D C6 95 ; Exclusive OR accumulator with memory $95C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $F0C6.w,X		; 5D C6 F0 ; Exclusive OR accumulator with memory $F0C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $731812.l,X		; FF 12 18 73 ; Subtract with carry (long,X) $731812.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	and ($40.b)		; 32 40 ; AND accumulator with memory (indirect) ($40.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($40.b,S),Y		; 93 40 ; Store accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C51FF.l,X		; FF FF 51 0C ; Subtract with carry (long,X) $0C51FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($C12C.w,X)		; FC 2C C1 ; Jump to subroutine indirect indexed ($C12C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $DA2C02.l		; CF 02 2C DA ; Compare accumulator (long) $DA2C02.l [Reads: Accumulator] [Flags: ZNC]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $FCC5.w,X		; BC C5 FC ; Load Y register $FCC5.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $FD81.w,Y		; BE 81 FD ; Load X register $FD81.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	asl $4483.w,X		; 1E 83 44 ; Arithmetic shift left $4483.w,X [Reads: X Index] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $50, $CF		; 62 50 CF ; Push effective relative address $62, $50, $CF [Writes: Stack Pointer]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $FDC7.w		; 1C C7 FD ; Test and reset bits $FDC7.w [Reads: Accumulator] [Flags: Z]
	ldy $FCC3.w		; AC C3 FC ; Load $FCC3.w into Y register [Writes: Y Index] [Flags: ZN]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $15642C.l		; 5C 2C 64 15 ; Jump long to $15642C.l [Flow: jump]
	bit $1463.w		; 2C 63 14 ; Test bits $1463.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ldx $FC63.w		; AE 63 FC ; Load $FC63.w into X register [Writes: X Index] [Flags: ZN]
	jmp $C12509.l		; 5C 09 25 C1 ; Jump long to $C12509.l [Flow: jump]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($01.b,X)		; A1 01 ; Load accumulator ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $048A.w,X		; FE 8A 04 ; Increment memory $048A.w,X [Reads: X Index] [Flags: ZN]
	inc $0089.w,X		; FE 89 00 ; Increment memory $0089.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF832E.l,X		; FF 2E 83 FF ; Subtract with carry (long,X) $FF832E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $D887.w		; 2D 87 D8 ; Logical AND $D887.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $AC83.w		; AD 83 AC ; Load $AC83.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $CFAC03.l		; AF 03 AC CF ; Load long $CFAC03.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $3A.b		; 04 3A ; Test and set bits $3A.b [Reads: Accumulator] [Flags: Z]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $6935.w,Y		; 39 35 69 ; AND accumulator with memory $6935.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $7F65.w		; 0C 65 7F ; Test and set bits $7F65.w [Reads: Accumulator] [Flags: Z]
	jmp ($804E.w)		; 6C 4E 80 ; Jump indirect to ($804E.w) [Flow: jump]
	.db $B0, $92		; B0 92 ; Branch if carry set to $B0, $92 [Flow: branch]
	ora $15.b		; 05 15 ; Logical OR $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $22.b,X		; 56 22 ; Logical shift right $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$A9.b],Y		; 17 A9 ; OR accumulator with memory (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $69AA55.l		; 22 55 AA 69 ; Jump to subroutine long $69AA55.l [Writes: Stack Pointer] [Flow: call]
	mvn $22,$CE		; 54 CE 22 ; Move block negative $22,$CE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $22.b		; 46 22 ; Logical shift right $22.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $694648.l		; 22 48 46 69 ; Jump to subroutine long $694648.l [Writes: Stack Pointer] [Flow: call]
	jmp $246946.l		; 5C 46 69 24 ; Jump long to $246946.l [Flow: jump]
	ror $22.b		; 66 22 ; Rotate right $22.b [Reads: Direct Page] [Flags: ZNC]
	bit $66.b		; 24 66 ; Test bits $66.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc #$24.b		; 69 24 ; Add #$24.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsl $696638.l		; 22 38 66 69 ; Jump to subroutine long $696638.l [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $22.b		; 66 22 ; Rotate right $22.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $69.b		; 66 69 ; Rotate right $69.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsl $69665C.l		; 22 5C 66 69 ; Jump to subroutine long $69665C.l [Writes: Stack Pointer] [Flow: call]
	bit $86.b		; 24 86 ; Test bits $86.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $698624.l		; 22 24 86 69 ; Jump to subroutine long $698624.l [Writes: Stack Pointer] [Flow: call]
	bit $9A.b		; 24 9A ; Test bits $9A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $698638.l		; 22 38 86 69 ; Jump to subroutine long $698638.l [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stx $22.b		; 86 22 ; Store X register to $22.b [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stx $69.b		; 86 69 ; Store X register to $69.b [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	jsl $69865C.l		; 22 5C 86 69 ; Jump to subroutine long $69865C.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $F9.b,S		; C3 F9 ; Compare accumulator (stack relative) $F9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $B0, $CF		; B0 CF ; Branch if carry set to $B0, $CF [Flow: branch]
	sbc $B4CC.w,Y		; F9 CC B4 ; Subtract with carry $B4CC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $F9BA.w,Y		; D9 BA F9 ; Compare accumulator $F9BA.w,Y [Reads: Y Index] [Flags: ZNC]
	cpy $69AC.w		; CC AC 69 ; Compare $69AC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $69CC.w		; CC CC 69 ; Compare $69CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldy $8C.b,X		; B4 8C ; Load Y register $8C.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldy $A869.w		; AC 69 A8 ; Load $A869.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $AB69.w		; CC 69 AB ; Compare $AB69.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $2FD3FA.l		; 2F FA D3 2F ; AND accumulator with memory (long) $2FD3FA.l [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	eor [$FA.b],Y		; 57 FA ; Exclusive OR accumulator with memory (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($57.b,S),Y		; D3 57 ; Compare accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $09FA43.l,X		; BF 43 FA 09 ; Load long $09FA43.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $25C0.w,X		; DD C0 25 ; Compare accumulator $25C0.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$5560]		; DC 60 55 ; Jump long indirect [$5560] [Flow: jump]
	cmp $71C0.w,X		; DD C0 71 ; Compare accumulator $71C0.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$8160]		; DC 60 81 ; Jump long indirect [$8160] [Flow: jump]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	cmp $C0E8.w,Y		; D9 E8 C0 ; Compare accumulator $C0E8.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $5716FF.l,X		; FF FF 16 57 ; Subtract with carry (long,X) $5716FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($5F.b,X)		; 61 5F ; Add with carry ($5F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$62.b],Y		; 37 62 ; AND accumulator with memory (long indexed) [$62.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $FD62AF.l		; 5C AF 62 FD ; Jump long to $FD62AF.l [Flow: jump]
	jmp ($5403.w,X)		; 7C 03 54 ; Jump indirect indexed to ($5403.w,X) [Reads: X Index] [Flow: jump]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	inc $C05A.w,X		; FE 5A C0 ; Increment memory $C05A.w,X [Reads: X Index] [Flags: ZN]
	sty $BE.b,X		; 94 BE ; Store Y register $BE.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $3604C1.l		; 5C C1 04 36 ; Jump long to $3604C1.l [Flow: jump]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: ZNC]
	ldy $AD.b		; A4 AD ; Load $AD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $CC02.w		; CD 02 CC ; Compare $CC02.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $FF01.w		; AE 01 FF ; Load $FF01.w into X register [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.INDEX 16
	rep #$DC		; C2 DC
	ldx $FF62.w,Y		; BE 62 FF ; Load X register $FF62.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jmp ($CCC3.w,X)		; 7C C3 CC ; Jump indirect indexed to ($CCC3.w,X) [Reads: X Index] [Flow: jump]
	dec $DB02.w		; CE 02 DB ; Decrement $DB02.w [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $1E15FF.l,X		; FF FF 15 1E ; Subtract with carry (long,X) $1E15FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $15.b		; C6 15 ; Decrement $15.b [Reads: Direct Page] [Flags: ZN]
	mvp $28,$C6		; 44 C6 28 ; Move block positive $28,$C6 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $C6.b,X		; 35 C6 ; Logical AND $C6.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2FC61C.l		; 2F 1C C6 2F ; AND accumulator with memory (long) $2FC61C.l [Writes: Accumulator] [Flags: ZN]
	bit $C6.b		; 24 C6 ; Test bits $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jmp $C648.w		; 4C 48 C6 ; Jump to $C648.w [Flow: jump]
	jmp $C668.w		; 4C 68 C6 ; Jump to $C668.w [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	dec $28.b		; C6 28 ; Decrement $28.b [Reads: Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $4C.b		; C6 4C ; Decrement $4C.b [Reads: Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: ZN]
	lda $ADC6.w		; AD C6 AD ; Load $ADC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($C6.b),Y		; B1 C6 ; Load accumulator ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $C6C8.w		; AD C8 C6 ; Load $C6C8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	and ($40.b)		; 32 40 ; AND accumulator with memory (indirect) ($40.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $00, $82		; 62 00 82 ; Push effective relative address $62, $00, $82 [Writes: Stack Pointer]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE04E1.l,X		; FF E1 04 FE ; Subtract with carry (long,X) $FE04E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($23.b,S),Y		; 93 23 ; Store accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($92.b,X)		; 61 92 ; Add with carry ($92.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $9181.w		; 4E 81 91 ; Logical shift right $9181.w [Flags: ZNC]
	rol $65.b,X		; 36 65 ; Rotate left $65.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc #$36.b		; E9 36 ; Subtract #$36.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ror $A8.b		; 66 A8 ; Rotate right $A8.b [Reads: Direct Page] [Flags: ZNC]
	and ($C1.b),Y		; 31 C1 ; AND accumulator with memory ($C1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $52.b,X		; B4 52 ; Load Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	and ($A9.b,X)		; 21 A9 ; Logical AND ($A9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $886A.w,Y		; D9 6A 88 ; Compare accumulator $886A.w,Y [Reads: Y Index] [Flags: ZNC]
	lda ($A4.b),Y		; B1 A4 ; Load accumulator ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C0B0.w,X		; 5D B0 C0 ; Exclusive OR accumulator with memory $C0B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $C0		; D0 C0 ; Branch if not equal to $D0, $C0 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($83.b,S),Y		; B3 83 ; Load accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp ($83.b,S),Y		; D3 83 ; Compare accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $6B.b,S		; C3 6B ; Compare accumulator (stack relative) $6B.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp ($42.b,X)		; C1 42 ; Compare accumulator ($42.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $0088.w,Y		; F9 88 00 ; Subtract with carry $0088.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $631E.w		; 20 1E 63 ; Jump to subroutine at $631E.w [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD1C51.l,X		; FF 51 1C FD ; Subtract with carry (long,X) $FD1C51.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b),Y		; 51 00 ; Exclusive OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $61,$21		; 54 21 61 ; Move block negative $61,$21 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $01.b		; 24 01 ; Test bits $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc $4452.w,X		; FD 52 44 ; Subtract with carry $4452.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($4022.w,X)		; FC 22 40 ; Jump to subroutine indirect indexed ($4022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($812A.w,X)		; FC 2A 81 ; Jump to subroutine indirect indexed ($812A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $02AA.w,Y		; 19 AA 02 ; OR accumulator with memory $02AA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $851A.w,X		; FD 1A 85 ; Subtract with carry $851A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $BA.b		; 45 BA ; Exclusive OR $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $FE81.w,X		; 1E 81 FE ; Arithmetic shift left $FE81.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ldy $21.b,X		; B4 21 ; Load Y register $21.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $62, $C1, $25		; 62 C1 25 ; Push effective relative address $62, $C1, $25 [Writes: Stack Pointer]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp ($46.b)		; D2 46 ; Compare accumulator (indirect) ($46.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FF42A2.l,X		; FF A2 42 FF ; Subtract with carry (long,X) $FF42A2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $83.b		; A6 83 ; Load $83.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda ($6B.b),Y		; B1 6B ; Load accumulator ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $87.b,Y		; 96 87 ; Store X register $87.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldy $79.b		; A4 79 ; Load $79.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $62, $B1, $83		; 62 B1 83 ; Push effective relative address $62, $B1, $83 [Writes: Stack Pointer]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $D0.b,S		; 83 D0 ; Store accumulator (stack relative) $D0.b,S [Reads: Accumulator, Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta [$C5.b]		; 87 C5 ; Store accumulator (long) [$C5.b] [Reads: Accumulator, Direct Page]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	.db $62, $FF, $1E		; 62 FF 1E ; Push effective relative address $62, $FF, $1E [Writes: Stack Pointer]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Accumulator, Stack Pointer]
	asl $87.b		; 06 87 ; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZNC]
	.db $50, $6B		; 50 6B ; Branch if overflow clear to $50, $6B [Flow: branch]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $85.b,Y		; 96 85 ; Store X register $85.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $FD, $09		; 62 FD 09 ; Push effective relative address $62, $FD, $09 [Writes: Stack Pointer]
	asl $50.b		; 06 50 ; Arithmetic shift left $50.b [Reads: Direct Page] [Flags: ZNC]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $0499.w,X		; FD 99 04 ; Subtract with carry $0499.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $7B.b		; 64 7B ; Store zero to $7B.b
	adc ($27.b,X)		; 61 27 ; Add with carry ($27.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($0A.b,S),Y		; 33 0A ; AND accumulator (stack relative indirect indexed) ($0A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $6441.w		; CC 41 64 ; Compare $6441.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda #$4C.b		; A9 4C ; Load #$4C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	bit $CB.b,X		; 34 CB ; Test bits $CB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $CF64.w,X		; FE 64 CF ; Increment memory $CF64.w,X [Reads: X Index] [Flags: ZN]
	sta $646D.w,Y		; 99 6D 64 ; Store accumulator to $646D.w,Y [Reads: Accumulator, Y Index]
	inc $CE6A.w,X		; FE 6A CE ; Increment memory $CE6A.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $FE03.w		; AD 03 FE ; Load $FE03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $FE64.w,X		; BD 64 FE ; Load $FE64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $628B.w		; EC 8B 62 ; Compare $628B.w with X register [Reads: X Index] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $FD63.w,X		; BD 63 FD ; Load $FD63.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $FD89.w		; 4C 89 FD ; Jump to $FD89.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $FD03.w		; AD 03 FD ; Load $FD03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy $6D71.w		; CC 71 6D ; Compare $6D71.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cpy $CD.b		; C4 CD ; Compare $CD.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	pei ($CF.b)		; D4 CF ; Push effective indirect address ($CF.b) [Reads: Direct Page] [Writes: Stack Pointer]
	bit $6F.b,X		; 34 6F ; Test bits $6F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $FC.b		; 64 FC ; Store zero to $FC.b
	cld		; D8 ; Clear decimal flag [Flags: D]
	wai		; CB ; Wait for interrupt
	bit $8D.b		; 24 8D ; Test bits $8D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $2E8063.l		; 6F 63 80 2E ; Add with carry (long) $2E8063.l [Writes: Accumulator] [Flags: ZVNC]
	jsl $693022.l		; 22 22 30 69 ; Jump to subroutine long $693022.l [Writes: Stack Pointer] [Flow: call]
	and $5F.b,S		; 23 5F ; AND accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $225CB2.l,X		; 5F B2 5C 22 ; Exclusive OR accumulator with memory (long,X) $225CB2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $6930.w,X		; DE 30 69 ; Decrement memory $6930.w,X [Reads: X Index] [Flags: ZN]
	adc ($6A.b)		; 72 6A ; Add with carry (indirect) ($6A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $226816.l		; 22 16 68 22 ; Jump to subroutine long $226816.l [Writes: Stack Pointer] [Flow: call]
	trb $9C.b		; 14 9C ; Test and reset bits $9C.b [Reads: Accumulator] [Flags: Z]
	jsl $229C34.l		; 22 34 9C 22 ; Jump to subroutine long $229C34.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	jsl $229F72.l		; 22 72 9F 22 ; Jump to subroutine long $229F72.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta $7269.w		; 8D 69 72 ; Store accumulator to $7269.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $22A8B8.l		; 22 B8 A8 22 ; Jump to subroutine long $22A8B8.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $DA		; 80 DA ; Branch always to $80, $DA [Flow: branch]
	jsl $FEDA53.l		; 22 53 DA FE ; Jump to subroutine long $FEDA53.l [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	inc $3180.w,X		; FE 80 31 ; Increment memory $3180.w,X [Reads: X Index] [Flags: ZN]
	eor ($80.b),Y		; 51 80 ; Exclusive OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $FD52.w		; CD 52 FD ; Compare $FD52.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta $31.b,S		; 83 31 ; Store accumulator (stack relative) $31.b,S [Reads: Accumulator, Stack Pointer]
	inc $31A3.w,X		; FE A3 31 ; Increment memory $31A3.w,X [Reads: X Index] [Flags: ZN]
	bit $8F.b		; 24 8F ; Test bits $8F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc $CB60.w,Y		; F9 60 CB ; Subtract with carry $CB60.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CBA8.w,Y		; F9 A8 CB ; Subtract with carry $CBA8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $93BB.w,Y		; F9 BB 93 ; Subtract with carry $93BB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $93.b,S		; C3 93 ; Compare accumulator (stack relative) $93.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp ($93.b,S),Y		; D3 93 ; Compare accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta ($FA.b,S),Y		; 93 FA ; Store accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $050B.w,Y		; F9 0B 05 ; Subtract with carry $050B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$0544.w		; C0 44 05 ; Compare #$0544.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$05C6.w		; C0 C6 05 ; Compare #$05C6.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$0FF0.w		; C0 F0 0F ; Compare #$0FF0.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $79.b,Y		; B6 79 ; Load X register $79.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy #$7B5C.w		; C0 5C 7B ; Compare #$7B5C.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $8A		; 50 8A ; Branch if overflow clear to $50, $8A [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$BBD5.w		; C0 D5 BB ; Compare #$BBD5.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$B8F2.w		; C0 F2 B8 ; Compare #$B8F2.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $3E15FF.l,X		; FF FF 15 3E ; Subtract with carry (long,X) $3E15FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $5E.b,X		; [PATTERN: Memory clearing operation] 34 5E ; Test bits $5E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $62, $70, $5E		; 62 70 5E ; Push effective relative address $62, $70, $5E [Writes: Stack Pointer]
	adc ($70.b,X)		; 61 70 ; Add with carry ($70.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $9861.w,X		; 9E 61 98 ; Store zero to $9861.w,X [Reads: X Index]
	stz $9862.w,X		; 9E 62 98 ; Store zero to $9862.w,X [Reads: X Index]
	lsr $8062.w,X		; 5E 62 80 ; Logical shift right $8062.w,X [Reads: X Index] [Flags: ZNC]
	and ($51.b),Y		; 31 51 ; AND accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $CD		; 80 CD ; Branch always to $80, $CD [Flow: branch]
	eor ($7C.b)		; 52 7C ; Exclusive OR accumulator with memory (indirect) ($7C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($88.b)		; 52 88 ; Exclusive OR accumulator with memory (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($8878.w,X)		; 7C 78 88 ; Jump indirect indexed to ($8878.w,X) [Reads: X Index] [Flow: jump]
	sta $52.b,X		; 95 52 ; Store accumulator to $52.b,X [Reads: Accumulator, X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $8F.b,X		; 94 8F ; Store Y register $8F.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jmp ($889D.w,X)		; 7C 9D 88 ; Jump indirect indexed to ($889D.w,X) [Reads: X Index] [Flow: jump]
	sbc $3527FF.l,X		; FF FF 27 35 ; Subtract with carry (long,X) $3527FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $27.b		; C6 27 ; Decrement $27.b [Reads: Direct Page] [Flags: ZN]
	jmp $67C6.w		; 4C C6 67 ; Jump to $67C6.w [Flow: jump]
	and $C6.b,X		; 35 C6 ; Logical AND $C6.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$4C.b]		; 67 4C ; Add with carry (long) [$4C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $9F.b		; C6 9F ; Decrement $9F.b [Reads: Direct Page] [Flags: ZN]
	and $C6.b,X		; 35 C6 ; Logical AND $C6.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $16C64C.l,X		; 9F 4C C6 16 ; Store accumulator (long,X) $16C64C.l,X [Reads: Accumulator, X Index]
	ror $76C6.w		; 6E C6 76 ; Rotate right $76C6.w [Flags: ZNC]
	ror $53C6.w		; 6E C6 53 ; Rotate right $53C6.w [Flags: ZNC]
	lda ($C6.b),Y		; B1 C6 ; Load accumulator ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($C4.b,S),Y		; 53 C4 ; XOR accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $8B.b		; C6 8B ; Decrement $8B.b [Reads: Direct Page] [Flags: ZN]
	lda ($C6.b),Y		; B1 C6 ; Load accumulator ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ror $AC.b,X		; 76 AC ; Rotate right $AC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $101C63.l,X		; FF 63 1C 10 ; Subtract with carry (long,X) $101C63.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC00E1.l,X		; FF E1 00 FC ; Subtract with carry (long,X) $FC00E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $87, $31		; 82 87 31 ; Branch always long to $82, $87, $31 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $85		; 42 85 ; Reserved instruction
	jsr $623B.w		; 20 3B 62 ; Jump to subroutine at $623B.w [Writes: Stack Pointer] [Flow: call]
	jsr ($0685.w,X)		; FC 85 06 ; Jump to subroutine indirect indexed ($0685.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($50.b),Y		; 31 50 ; AND accumulator with memory ($50.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $04.b		; 45 04 ; Exclusive OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $3B		; 50 3B ; Branch if overflow clear to $50, $3B [Flow: branch]
	adc ($60.b,X)		; 61 60 ; Add with carry ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $FD		; 50 FD ; Branch if overflow clear to $50, $FD [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($43.b,S),Y		; B3 43 ; Load accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $BFFA23.l,X		; BF 23 FA BF ; Load long $BFFA23.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	wai		; CB ; Wait for interrupt
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $33.b,S		; E3 33 ; Subtract stack-relative $33.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $53.b,S		; E3 53 ; Subtract stack-relative $53.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$4831.w		; C0 31 48 ; Compare #$4831.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FA162A.l,X		; FF 2A 16 FA ; Subtract with carry (long,X) $FA162A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $1C.b		; 02 1C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $38, $FF		; 62 38 FF ; Push effective relative address $62, $38, $FF [Writes: Stack Pointer]
	sbc $FC10E1.l,X		; FF E1 10 FC ; Subtract with carry (long,X) $FC10E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$A3.b		; 29 A3 ; Logical AND #$A3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $3881.w		; AD 81 38 ; Load $3881.w into accumulator [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FD85.w,X		; 3D 85 FD ; AND accumulator with memory $FD85.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $FD81.w,X		; 3E 81 FD ; Rotate left $FD81.w,X [Reads: X Index] [Flags: ZNC]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$FD62.w		; A2 62 FD ; Load #$FD62.w into X register [Writes: X Index] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	asl $58.b		; 06 58 ; Arithmetic shift left $58.b [Reads: Direct Page] [Flags: ZNC]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $04AB.w,X		; FD AB 04 ; Subtract with carry $04AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ldx #$FD61.w		; A2 61 FD ; Load #$FD61.w into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0229.w,X		; FE 29 02 ; Increment memory $0229.w,X [Reads: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx #$FE62.w		; A2 62 FE ; Load #$FE62.w into X register [Writes: X Index] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: ZNC]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $04AB.w,X		; FE AB 04 ; Increment memory $04AB.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$FE61.w		; A2 61 FE ; Load #$FE61.w into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $C90229.l,X		; FF 29 02 C9 ; Subtract with carry (long,X) $C90229.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $B0832D.l,X		; FF 2D 83 B0 ; Subtract with carry (long,X) $B0832D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FE87.w,X		; 9D 87 FE ; Store accumulator to $FE87.w,X [Reads: Accumulator, X Index]
	stz $FC83.w,X		; 9E 83 FC ; Store zero to $FC83.w,X [Reads: X Index]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $1C.b		; 26 1C ; Rotate left $1C.b [Reads: Direct Page] [Flags: ZNC]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3463.w		; 2D 63 34 ; Logical AND $3463.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6C691E.l		; 6F 1E 69 6C ; Add with carry (long) $6C691E.l [Writes: Accumulator] [Flags: ZVNC]
	eor $9369.w,Y		; 59 69 93 ; Exclusive OR accumulator with memory $9369.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $9069.w,X		; 1E 69 90 ; Arithmetic shift left $9069.w,X [Reads: X Index] [Flags: ZNC]
	eor $9669.w,Y		; 59 69 96 ; Exclusive OR accumulator with memory $9669.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $FF03.w		; 1C 03 FF ; Test and reset bits $FF03.w [Reads: Accumulator] [Flags: Z]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $642D.w,X		; DD 2D 64 ; Compare accumulator $642D.w,X [Reads: X Index] [Flags: ZNC]
	sbc $96CB75.l,X		; FF 75 CB 96 ; Subtract with carry (long,X) $96CB75.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $5C2604.l		; 5C 04 26 5C ; Jump long to $5C2604.l [Flow: jump]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	eor $C9.b,X		; 55 C9 ; Exclusive OR accumulator with memory $C9.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rep #$4D		; C2 4D ; Reset processor status bits #$4D [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	rol $97C2.w		; 2E C2 97 ; Rotate left $97C2.w [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rep #$C8		; C2 C8 ; Reset processor status bits #$C8 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 16
	rep #$26		; C2 26
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $82, $98, $21		; 82 98 21 ; Branch always long to $82, $98, $21 [Flow: branch]
	.db $30, $67		; 30 67 ; Branch if minus to $30, $67 [Flow: branch]
	rol $58.b		; 26 58 ; Rotate left $58.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($9985.w,X)		; FC 85 99 ; Jump to subroutine indirect indexed ($9985.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stx $28.b,Y		; 96 28 ; Store X register $28.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $9A, $D9		; 62 9A D9 ; Push effective relative address $62, $9A, $D9 [Writes: Stack Pointer]
	.db $30, $68		; 30 68 ; Branch if minus to $30, $68 [Flow: branch]
	stx $58.b,Y		; 96 58 ; Store X register $58.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $389B65.l,X		; FF 65 9B 38 ; Subtract with carry (long,X) $389B65.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $B8.b		; 02 B8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $34.b		; 02 34 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$29.b],Y		; 57 29 ; Exclusive OR accumulator with memory (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $56.b,X		; 34 56 ; Test bits $56.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc #$5648.w		; 69 48 56 ; Add #$5648.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$57B4.w		; 69 B4 57 ; Add #$57B4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$56B4.w		; 29 B4 56 ; Logical AND #$56B4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$56C8.w		; 69 C8 56 ; Add #$56C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$58B8.w		; 69 B8 58 ; Add #$58B8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpy $78.b		; C4 78 ; Compare $78.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $BE5B.w,X		; FD 5B BE ; Subtract with carry $BE5B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $BE9B.w,X		; FE 9B BE ; Increment memory $BE9B.w,X [Reads: X Index] [Flags: ZN]
	inc $B33F.w,X		; FE 3F B3 ; Increment memory $B33F.w,X [Reads: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $FCFAB3.l,X		; BF B3 FA FC ; Load long $FCFAB3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $0972.w,Y		; 39 72 09 ; AND accumulator with memory $0972.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora #$C0D2.w		; 09 D2 C0 ; Logical OR #$C0D2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $C0E8.w,X		; 1E E8 C0 ; Arithmetic shift left $C0E8.w,X [Reads: X Index] [Flags: ZNC]
	ldx $E8.b,Y		; B6 E8 ; Load X register $E8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$93D9.w		; C0 D9 93 ; Compare #$93D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2D9.w		; C0 D9 D2 ; Compare #$D2D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9158.w		; C0 58 91 ; Compare #$9158.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9198.w		; C0 98 91 ; Compare #$9198.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $18		; 70 18 ; Branch if overflow set to $70, $18 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1CE4FF.l,X		; FF FF E4 1C ; Subtract with carry (long,X) $1CE4FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$37.b],Y		; 57 37 ; Exclusive OR accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $223598.l		; 22 98 35 22 ; Jump to subroutine long $223598.l [Writes: Stack Pointer] [Flow: call]
	ror $6E.b		; 66 6E ; Rotate right $6E.b [Reads: Direct Page] [Flags: ZNC]
	jsl $224998.l		; 22 98 49 22 ; Jump to subroutine long $224998.l [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $42, $FC		; 42 FC ; Reserved instruction
	mvn $22,$49		; 54 49 22 ; Move block negative $22,$49 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $4A.b		; 65 4A ; Add $4A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$4A99.w		; 69 99 4A ; Add #$4A99.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$42A2.w		; 69 A2 42 ; Add #$42A2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr ($3654.w,X)		; FC 54 36 ; Jump to subroutine indirect indexed ($3654.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc #$36A8.w		; 69 A8 36 ; Add #$36A8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$4D54.w		; 69 54 4D ; Add #$4D54.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora [$9C.b]		; 07 9C ; OR accumulator with memory (long) [$9C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $6507.w		; 4D 07 65 ; Exclusive OR $6507.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($07.b)		; 72 07 ; Add with carry (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $7B.b,S		; 03 7B ; OR accumulator with stack relative $7B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rep #$43		; C2 43 ; Reset processor status bits #$43 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rep #$83		; C2 83 ; Reset processor status bits #$83 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rep #$03		; C2 03 ; Reset processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $C2.b,S		; 03 C2 ; OR accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $03.b,X		; 35 03 ; Logical AND $03.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$57		; C2 57
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$24.b],Y		; 57 24 ; Exclusive OR accumulator with memory (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$97		; C2 97
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$24.b],Y		; 97 24 ; Store accumulator (long indexed) [$24.b],Y [Reads: Accumulator, Direct Page, Y Index]
.INDEX 16
	rep #$D2		; C2 D2
	ora $C2.b,S		; 03 C2 ; OR accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $9FC237.l		; AF 37 C2 9F ; Load long $9FC237.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $C2.b,X		; 56 C2 ; Logical shift right $C2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp ($43.b)		; D2 43 ; Compare accumulator (indirect) ($43.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rep #$03		; C2 03 ; Reset processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	eor $C2.b,S		; 43 C2 ; Exclusive OR accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $43.b,X		; 35 43 ; Logical AND $43.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
.INDEX 16
	rep #$54		; C2 54
	lsr $C2.b,X		; 56 C2 ; Logical shift right $C2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $1051FF.l,X		; FF FF 51 10 ; Subtract with carry (long,X) $1051FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C061.w,X		; FD 61 C0 ; Subtract with carry $C061.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$011E.w		; 69 1E 01 ; Add #$011E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	inc $C261.w,X		; FE 61 C2 ; Increment memory $C261.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	bit $5A62.w		; 2C 62 5A ; Test bits $5A62.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $FD61.w		; 2C 61 FD ; Test bits $FD61.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ror $81.b		; 66 81 ; Rotate right $81.b [Reads: Direct Page] [Flags: ZNC]
	inc $8366.w,X		; FE 66 83 ; Increment memory $8366.w,X [Reads: X Index] [Flags: ZN]
	sbc $F8E1.w,X		; FD E1 F8 ; Subtract with carry $F8E1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $9C7F44.l		; 5C 44 7F 9C ; Jump long to $9C7F44.l [Flow: jump]
	mvp $79,$80		; 44 80 79 ; Move block positive $79,$80 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $4480.w,Y		; F9 80 44 ; Subtract with carry $4480.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	inc $0269.w,X		; FE 69 02 ; Increment memory $0269.w,X [Reads: X Index] [Flags: ZN]
	inc $066A.w,X		; FE 6A 06 ; Increment memory $066A.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($01.b,X)		; A1 01 ; Load accumulator ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $04CA.w,X		; FE CA 04 ; Increment memory $04CA.w,X [Reads: X Index] [Flags: ZN]
	lda ($03.b,S),Y		; B3 03 ; Load accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($B1.b,X)		; 61 B1 ; Add with carry ($B1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $FC61.w,Y		; 79 61 FC ; Add $FC61.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and [$AF.b]		; 27 AF ; AND accumulator with memory (long) [$AF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A4.b,S		; 03 A4 ; OR accumulator with stack relative $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $BF03.w		; AE 03 BF ; Load $BF03.w into X register [Writes: X Index] [Flags: ZN]
	ora $63.b,S		; 03 63 ; OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $6381.w,X		; BD 81 63 ; Load $6381.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $CCFA.w,X		; FE FA CC ; Increment memory $CCFA.w,X [Reads: X Index] [Flags: ZN]
	trb $BD.b		; 14 BD ; Test and reset bits $BD.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jmp $CB2489.l		; 5C 89 24 CB ; Jump long to $CB2489.l [Flow: jump]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	tsb $408D.w		; 0C 8D 40 ; Test and set bits $408D.w [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	asl $30CC.w		; 0E CC 30 ; Arithmetic shift left $30CC.w [Flags: ZNC]
	sbc $1803.w		; ED 03 18 ; Subtract $1803.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc ($C4.b,X)		; E1 C4 ; Subtract with carry ($C4.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $F8.b		; 24 F8 ; Test bits $F8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $08C8.w,X		; 9E C8 08 ; Store zero to $08C8.w,X [Reads: X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc ($14.b,X)		; 61 14 ; Add with carry ($14.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $22E821.l		; 22 21 E8 22 ; Jump to subroutine long $22E821.l [Writes: Stack Pointer] [Flow: call]
	jsr $69EA.w		; 20 EA 69 ; Jump to subroutine at $69EA.w [Writes: Stack Pointer] [Flow: call]
	trb $A8.b		; 14 A8 ; Test and reset bits $A8.b [Reads: Accumulator] [Flags: Z]
	jsl $22AA84.l		; 22 84 AA 22 ; Jump to subroutine long $22AA84.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$E0		; C2 E0
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $B007.w		; CE 07 B0 ; Decrement $B007.w [Flags: ZN]
	sbc ($62.b)		; F2 62 ; Subtract with carry (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda ($D5.b)		; B2 D5 ; Load accumulator (indirect) ($D5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $A4.b		; 04 A4 ; Test and set bits $A4.b [Reads: Accumulator] [Flags: Z]
	sbc $64.b,S		; E3 64 ; Subtract stack-relative $64.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc $4F9D.w,X		; FE 9D 4F ; Increment memory $4F9D.w,X [Reads: X Index] [Flags: ZN]
	sbc $F18A.w,X		; FD 8A F1 ; Subtract with carry $F18A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tsb $91C0.w		; 0C C0 91 ; Test and set bits $91C0.w [Reads: Accumulator] [Flags: Z]
	tsb $ABC0.w		; 0C C0 AB ; Test and set bits $ABC0.w [Reads: Accumulator] [Flags: Z]
	trb $A860.w		; 1C 60 A8 ; Test and reset bits $A860.w [Reads: Accumulator] [Flags: Z]
	sta ($60.b)		; 92 60 ; Store accumulator (indirect) ($60.b) [Reads: Accumulator, Direct Page]
	cmp ($F3.b,X)		; C1 F3 ; Compare accumulator ($F3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6703CB.l,X		; FF CB 03 67 ; Subtract with carry (long,X) $6703CB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$6782.w		; C9 82 67 ; Compare #$6782.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit #$07BB.w		; 89 BB 07 ; Test bits #$07BB.w with accumulator [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cmp ($08.b)		; D2 08 ; Compare accumulator (indirect) ($08.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit #$C2D2.w		; 89 D2 C2 ; Test bits #$C2D2.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda ($D8.b,X)		; A1 D8 ; Load accumulator ($D8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda ($D1.b,X)		; A1 D1 ; Load accumulator ($D1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sty $B8.b		; 84 B8 ; Store Y register to $B8.b [Reads: Y Index]
	adc #$EE61.w		; 69 61 EE ; Add #$EE61.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $C2F062.l		; 22 62 F0 C2 ; Jump to subroutine long $C2F062.l [Writes: Stack Pointer] [Flow: call]
	adc ($F0.b,X)		; 61 F0 ; Add with carry ($F0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$60.b]		; 07 60 ; OR accumulator with memory (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $3869.w		; ED 69 38 ; Subtract $3869.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora [$4C.b]		; 07 4C ; OR accumulator with memory (long) [$4C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FC69.w		; ED 69 FC ; Subtract $FC69.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $03D298.l		; CF 98 D2 03 ; Compare accumulator (long) $03D298.l [Reads: Accumulator] [Flags: ZNC]
.INDEX 16
	rep #$D2		; C2 D2
	eor $C2.b,S		; 43 C2 ; Exclusive OR accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($83.b)		; D2 83 ; Compare accumulator (indirect) ($83.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpy #$8BC2.w		; C0 C2 8B ; Compare #$8BC2.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFC2.w		; C0 C2 FF ; Compare #$FFC2.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $D7B217.l,X		; FF 17 B2 D7 ; Subtract with carry (long,X) $D7B217.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$B3.b]		; 47 B3 ; Exclusive OR accumulator with memory (long) [$B3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $2B.b		; C6 2B ; Decrement $2B.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $C6		; F0 C6 ; Branch if equal to $F0, $C6 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $C6		; F0 C6 ; Branch if equal to $F0, $C6 [Flow: branch]
	sta [$B2.b]		; 87 B2 ; Store accumulator (long) [$B2.b] [Reads: Accumulator, Direct Page]
	dec $82.b		; C6 82 ; Decrement $82.b [Reads: Direct Page] [Flags: ZN]
	cmp $C6.b,S		; C3 C6 ; Compare accumulator (stack relative) $C6.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $03.b,S		; C3 03 ; Compare accumulator (stack relative) $03.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	dec $C3.b		; C6 C3 ; Decrement $C3.b [Reads: Direct Page] [Flags: ZN]
	eor $C6.b,S		; 43 C6 ; Exclusive OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $83.b,S		; C3 83 ; Compare accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	dec $C3.b		; C6 C3 ; Decrement $C3.b [Reads: Direct Page] [Flags: ZN]
	cmp ($C6.b,X)		; C1 C6 ; Compare accumulator ($C6.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $70, $1C		; 70 1C ; Branch if overflow set to $70, $1C [Flow: branch]
	sbc $1C51FF.l,X		; FF FF 51 1C ; Subtract with carry (long,X) $1C51FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $09.b		; C4 09 ; Compare $09.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($8422.w,X)		; FC 22 84 ; Jump to subroutine indirect indexed ($8422.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($4C94.w,X)		; FC 94 4C ; Jump to subroutine indirect indexed ($4C94.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $41.b		; 00 41 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $05.b		; 24 05 ; Test bits $05.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr ($4854.w,X)		; FC 54 48 ; Jump to subroutine indirect indexed ($4854.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($842A.w,X)		; FC 2A 84 ; Jump to subroutine indirect indexed ($842A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$63.b],Y		; 57 63 ; Exclusive OR accumulator with memory (long indexed) [$63.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $23.b		; C4 23 ; Compare $23.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora ($69.b,X)		; 01 69 ; Logical OR ($69.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $40.b		; 14 40 ; Test and reset bits $40.b [Reads: Accumulator] [Flags: Z]
	jsl $00EC00.l		; 22 00 EC 00 ; Jump to subroutine long $00EC00.l [Writes: Stack Pointer] [Flow: call]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $03.b,Y		; B6 03 ; Load X register $03.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora $DF.b,S		; 03 DF ; OR accumulator with stack relative $DF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $DF7A.w		; 4C 7A DF ; Jump to $DF7A.w [Flow: jump]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $FF62.w,Y		; D9 62 FF ; Compare accumulator $FF62.w,Y [Reads: Y Index] [Flags: ZNC]
	eor $02.b		; 45 02 ; Exclusive OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $D3C34D.l,X		; FF 4D C3 D3 ; Subtract with carry (long,X) $D3C34D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$0152.w		; C0 52 01 ; Compare #$0152.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $06C5.w,X		; FE C5 06 ; Increment memory $06C5.w,X [Reads: X Index] [Flags: ZN]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $A6, $03		; 62 A6 03 ; Push effective relative address $62, $A6, $03 [Writes: Stack Pointer]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	sta $CE.b,X		; 95 CE ; Store accumulator to $CE.b,X [Reads: Accumulator, X Index]
	ldy $5D.b,X		; B4 5D ; Load Y register $5D.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $CA.b,X		; 15 CA ; OR accumulator with memory $CA.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$6C.b]		; C7 6C ; Compare accumulator (long) [$6C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stz $82.b		; 64 82 ; Store zero to $82.b
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	sbc $030B1D.l,X		; FF 1D 0B 03 ; Subtract with carry (long,X) $030B1D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($04.b,S),Y		; D3 04 ; Compare accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cpx #$6000.w		; E0 00 60 ; Compare #$6000.w with X register [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $E3		; 10 E3 ; Branch if plus to $10, $E3 [Flow: branch]
	lsr $C1.b,X		; 56 C1 ; Logical shift right $C1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($40.b,X)		; C1 40 ; Compare accumulator ($40.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $30, $13		; 30 13 ; Branch if minus to $30, $13 [Flow: branch]
.ACCU 16
	rep #$21		; C2 21
	eor ($C2.b,S),Y		; 53 C2 ; XOR accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $68		; 42 68 ; Reserved instruction
	rep #$80		; C2 80 ; Reset processor status bits #$80 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rep #$42		; C2 42 ; Reset processor status bits #$42 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$C292.w		; 29 92 C2 ; Logical AND #$C292.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($9E.b)		; 72 9E ; Add with carry (indirect) ($9E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $4B.b,S		; C3 4B ; Compare accumulator (stack relative) $4B.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $B0, $C2		; B0 C2 ; Branch if carry set to $B0, $C2 [Flow: branch]
	adc $01.b,S		; 63 01 ; Add with carry (stack relative) $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 16
	rep #$90		; C2 90
	ora ($C2.b,S),Y		; 13 C2 ; OR accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $70.b,S		; 83 70 ; Store accumulator (stack relative) $70.b,S [Reads: Accumulator, Stack Pointer]
	rep #$83		; C2 83 ; Reset processor status bits #$83 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	stz $C2.b,X		; 74 C2 ; Store zero to $C2.b,X [Reads: X Index]
	ldy $87.b,X		; B4 87 ; Load Y register $87.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$B4		; C2 B4
	ldy $90C2.w,X		; BC C2 90 ; Load Y register $90C2.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	eor ($C2.b)		; 52 C2 ; Exclusive OR accumulator with memory (indirect) ($C2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$32		; C2 32
	ora ($67.b,X)		; 01 67 ; Logical OR ($67.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($50.b)		; 32 50 ; AND accumulator with memory (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $50, $07		; 50 07 ; Branch if overflow clear to $50, $07 [Flow: branch]
	jsr ($1885.w,X)		; FC 85 18 ; Jump to subroutine indirect indexed ($1885.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $58.b,S		; 23 58 ; AND accumulator with stack relative $58.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$A3.b]		; 67 A3 ; Add with carry (long) [$A3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$FA69.w		; A0 69 FA ; Load #$FA69.w into Y register [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $9A.b		; 06 9A ; Arithmetic shift left $9A.b [Reads: Direct Page] [Flags: ZNC]
.ACCU 16
.INDEX 16
	rep #$73		; C2 73
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sbc $B0DB0C.l,X		; FF 0C DB B0 ; Subtract with carry (long,X) $B0DB0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $6108.w		; CD 08 61 ; Compare $6108.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $6900.w		; 4D 00 69 ; Exclusive OR $6900.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	adc #$388C.w		; 69 8C 38 ; Add #$388C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$6141.w		; 69 41 61 ; Add #$6141.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora [$80.b]		; 07 80 ; OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($07.b,X)		; 61 07 ; Add with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $079C.w		; 6D 9C 07 ; Add $079C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6963.w		; 6E 63 69 ; Rotate right $6963.w [Flags: ZNC]
	adc $6962.w,X		; 7D 62 69 ; Add $6962.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta ($FA.b,S),Y		; 93 FA ; Store accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc [$2B.b]		; 67 2B ; Add with carry (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc [$53.b]		; 67 53 ; Add with carry (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $DD63.w,X		; FD 63 DD ; Subtract with carry $DD63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DDC3.w,X		; FD C3 DD ; Subtract with carry $DDC3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $C1		; B0 C1 ; Branch if carry set to $B0, $C1 [Flow: branch]
	adc #$C221.w		; 69 21 C2 ; Add #$C221.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor $6986B0.l,X		; 5F B0 86 69 ; Exclusive OR accumulator with memory (long,X) $6986B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $032BFF.l,X		; FF FF 2B 03 ; Subtract with carry (long,X) $032BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $6B.b		; C6 6B ; Decrement $6B.b [Reads: Direct Page] [Flags: ZN]
	ora $C6.b,S		; 03 C6 ; OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	eor $C6.b,S		; 43 C6 ; Exclusive OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec $1B.b		; C6 1B ; Decrement $1B.b [Reads: Direct Page] [Flags: ZN]
	sta $C6.b,S		; 83 C6 ; Store accumulator (stack relative) $C6.b,S [Reads: Accumulator, Stack Pointer]
	ora $B9.b,S		; 03 B9 ; OR accumulator with stack relative $B9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $6B.b		; C6 6B ; Decrement $6B.b [Reads: Direct Page] [Flags: ZN]
	eor $C6.b,S		; 43 C6 ; Exclusive OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sta $C6.b,S		; 83 C6 ; Store accumulator (stack relative) $C6.b,S [Reads: Accumulator, Stack Pointer]
	sta $C683.w,Y		; 99 83 C6 ; Store accumulator to $C683.w,Y [Reads: Accumulator, Y Index]
	eor $BD.b,S		; 43 BD ; Exclusive OR accumulator with stack relative $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $83.b		; C6 83 ; Decrement $83.b [Reads: Direct Page] [Flags: ZN]
	lda $03C6.w,X		; BD C6 03 ; Load $03C6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy $A0C6.w		; CC C6 A0 ; Compare $A0C6.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $C6.b,S		; 03 C6 ; OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy #$C643.w		; A0 43 C6 ; Load #$C643.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($63.b),Y		; B1 63 ; Load accumulator ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $B1.b		; C6 B1 ; Decrement $B1.b [Reads: Direct Page] [Flags: ZN]
	sta $FFF0C6.l,X		; 9F C6 F0 FF ; Store accumulator (long,X) $FFF0C6.l,X [Reads: Accumulator, X Index]
	sbc $1C51FF.l,X		; FF FF 51 1C ; Subtract with carry (long,X) $1C51FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0061.w,X)		; FC 61 00 ; Jump to subroutine indirect indexed ($0061.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($2B.b,X)		; 81 2B ; Store accumulator ($2B.b,X) [Reads: Accumulator, X Index, Direct Page]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $B1.b		; 85 B1 ; Store accumulator to $B1.b [Reads: Accumulator]
	lda $FE61.w,Y		; B9 61 FE ; Load $FE61.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E1C1.w		; CD C1 E1 ; Compare $E1C1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpy #$C2C4.w		; C0 C4 C2 ; Compare #$C2C4.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp.w [$FD02]		; DC 02 FD ; Jump long indirect [$FD02] [Flow: jump]
	adc ($02.b,X)		; 61 02 ; Add with carry ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $8663.w,X		; FD 63 86 ; Subtract with carry $8663.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $84.b,S		; E3 84 ; Subtract stack-relative $84.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $80E2.w,X		; FD E2 80 ; Subtract with carry $80E2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($E1.b,X)		; 01 E1 ; Logical OR ($E1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	cpy $F8.b		; C4 F8 ; Compare $F8.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor ($02.b,X)		; 41 02 ; Exclusive OR accumulator with memory ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF07A4.l,X		; FF A4 07 FF ; Subtract with carry (long,X) $FF07A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $F8.b		; 86 F8 ; Store X register to $F8.b [Reads: X Index]
	lda #$FC01.w		; A9 01 FC ; Load #$FC01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($C8.b),Y		; 91 C8 ; Store accumulator ($C8.b),Y [Reads: Accumulator, Direct Page, Y Index]
	bit $1E.b,X		; 34 1E ; Test bits $1E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($CA.b),Y		; 31 CA ; AND accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $642E.w		; 4C 2E 64 ; Jump to $642E.w [Flow: jump]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	eor $03.b		; 45 03 ; Exclusive OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $4E34.w,X		; FD 34 4E ; Subtract with carry $4E34.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $9074.w,X		; FE 74 90 ; Increment memory $9074.w,X [Reads: X Index] [Flags: ZN]
	cpy #$0347.w		; C0 47 03 ; Compare #$0347.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FF9204.l,X		; FF 04 92 FF ; Subtract with carry (long,X) $FF9204.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $4A.b,X		; 74 4A ; Store zero to $4A.b,X [Reads: X Index]
	dec $6457.w,X		; DE 57 64 ; Decrement memory $6457.w,X [Reads: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldx $03.b,Y		; B6 03 ; Load X register $03.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc $C94E7B.l,X		; FF 7B 4E C9 ; Subtract with carry (long,X) $C94E7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($04.b)		; D2 04 ; Compare accumulator (indirect) ($04.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $8DF8.w,X		; FE F8 8D ; Increment memory $8DF8.w,X [Reads: X Index] [Flags: ZN]
	inc $8F78.w,X		; FE 78 8F ; Increment memory $8F78.w,X [Reads: X Index] [Flags: ZN]
	sbc $8D38.w,X		; FD 38 8D ; Subtract with carry $8D38.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $2F.b		; 26 2F ; Rotate left $2F.b [Reads: Direct Page] [Flags: ZNC]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$8A34.w		; 89 34 8A ; Test bits #$8A34.w with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $BA.b		; 04 BA ; Test and set bits $BA.b [Reads: Accumulator] [Flags: Z]
	mvp $AA,$6D		; 44 6D AA ; Move block positive $AA,$6D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $BD,$6C		; 44 6C BD ; Move block positive $BD,$6C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C09.w,X		; FD 09 1C ; Subtract with carry $1C09.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($7F.b,X)		; 41 7F ; Exclusive OR accumulator with memory ($7F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $8061.w		; EC 61 80 ; Compare $8061.w with X register [Reads: X Index] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $22		; 42 22 ; Reserved instruction
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $2240DC.l		; 22 DC 40 22 ; Jump to subroutine long $2240DC.l [Writes: Stack Pointer] [Flow: call]
	bit $99.b		; 24 99 ; Test bits $99.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $C00A68.l		; 22 68 0A C0 ; Jump to subroutine long $C00A68.l [Writes: Stack Pointer] [Flow: call]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$BBC0.w		; 09 C0 BB ; Logical OR #$BBC0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$08C0.w		; 09 C0 08 ; Logical OR #$08C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$BB5B.w		; C0 5B BB ; Compare #$BB5B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$BB91.w		; C0 91 BB ; Compare #$BB91.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$ECB3.w		; C0 B3 EC ; Compare #$ECB3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$ECF0.w		; C0 F0 EC ; Compare #$ECF0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$24FE.w		; C0 FE 24 ; Compare #$24FE.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($38.b),Y		; 71 38 ; Add with carry ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc $964E.w,Y		; F9 4E 96 ; Subtract with carry $964E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $048848.l		; 2F 48 88 04 ; AND accumulator with memory (long) $048848.l [Writes: Accumulator] [Flags: ZN]
	sbc $704CFF.l,X		; FF FF 4C 70 ; Subtract with carry (long,X) $704CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stz $5B.b		; 64 5B ; Store zero to $5B.b
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jmp ($8857.w,X)		; 7C 57 88 ; Jump indirect indexed to ($8857.w,X) [Reads: X Index] [Flow: jump]
	sbc $5DF8.w,X		; FD F8 5D ; Subtract with carry $5DF8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora ($AC.b,X)		; 01 AC ; Logical OR ($AC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$61.b]		; 07 61 ; OR accumulator with memory (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora [$62.b]		; 07 62 ; OR accumulator with memory (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $6199.w		; 4C 99 61 ; Jump to $6199.w [Flow: jump]
	sbc $C139.w,X		; FD 39 C1 ; Subtract with carry $C139.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $029C.w,X		; 5E 9C 02 ; Logical shift right $029C.w,X [Reads: X Index] [Flags: ZNC]
	stz $6299.w		; 9C 99 62 ; Store zero to $6299.w
	inc $C379.w,X		; FE 79 C3 ; Increment memory $C379.w,X [Reads: X Index] [Flags: ZN]
	sbc $40B8FF.l,X		; FF FF B8 40 ; Subtract with carry (long,X) $40B8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $8A40.w		; AC 40 8A ; Load $8A40.w into Y register [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	eor $C61F26.l,X		; 5F 26 1F C6 ; Exclusive OR accumulator with memory (long,X) $C61F26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$5E.b]		; 27 5E ; AND accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $4C.b		; C6 4C ; Decrement $4C.b [Reads: Direct Page] [Flags: ZN]
	ora $8427C6.l,X		; 1F C6 27 84 ; Logical OR long $8427C6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $5F.b		; C6 5F ; Decrement $5F.b [Reads: Direct Page] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec $98.b		; C6 98 ; Decrement $98.b [Reads: Direct Page] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec $67.b		; C6 67 ; Decrement $67.b [Reads: Direct Page] [Flags: ZN]
	sty $C6.b		; 84 C6 ; Store Y register to $C6.b [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $C6.b		; 84 C6 ; Store Y register to $C6.b [Reads: Y Index]
	cmp ($4B.b,X)		; C1 4B ; Compare accumulator ($4B.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	dec $DC.b		; C6 DC ; Decrement $DC.b [Reads: Direct Page] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec $C1.b		; C6 C1 ; Decrement $C1.b [Reads: Direct Page] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	dec $DC.b		; C6 DC ; Decrement $DC.b [Reads: Direct Page] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	dec $C3.b		; C6 C3 ; Decrement $C3.b [Reads: Direct Page] [Flags: ZN]
	lda $C6.b,X		; B5 C6 ; Load $C6.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $D0.b,S		; C3 D0 ; Compare accumulator (stack relative) $D0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $FF4030.l,X		; FF 30 40 FF ; Subtract with carry (long,X) $FF4030.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0051.l,X		; FF 51 00 FC ; Subtract with carry (long,X) $FC0051.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	jsr ($04C2.w,X)		; FC C2 04 ; Jump to subroutine indirect indexed ($04C2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($0072.w,X)		; FC 72 00 ; Jump to subroutine indirect indexed ($0072.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $6131.w,X		; 1D 31 61 ; OR accumulator with memory $6131.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($8175.w,X)		; FC 75 81 ; Jump to subroutine indirect indexed ($8175.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($81A6.w,X)		; FC A6 81 ; Jump to subroutine indirect indexed ($81A6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($85A5.w,X)		; FC A5 85 ; Jump to subroutine indirect indexed ($85A5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8326.w,X		; FD 26 83 ; Subtract with carry $8326.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8725.w,X		; FD 25 87 ; Subtract with carry $8725.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $83.b		; A5 83 ; Load $83.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($C8F1.w,X)		; FC F1 C8 ; Jump to subroutine indirect indexed ($C8F1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CCF2.w,X)		; FC F2 CC ; Jump to subroutine indirect indexed ($CCF2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $2C.b,X		; 34 2C ; Test bits $2C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$28C8.w		; A2 C8 28 ; Load #$28C8.w into X register [Writes: X Index] [Flags: ZN]
	and $FC63.w,X		; 3D 63 FC ; AND accumulator with memory $FC63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $C9.b		; A4 C9 ; Load $C9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	and $044C.w,Y		; 39 4C 04 ; AND accumulator with memory $044C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $CB74.w,X		; FD 74 CB ; Subtract with carry $CB74.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $FD642F.l		; 5C 2F 64 FD ; Jump long to $FD642F.l [Flow: jump]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $031D.w		; 4C 1D 03 ; Jump to $031D.w [Flow: jump]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$2308.w		; C0 08 23 ; Compare #$2308.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$2116.w		; C0 16 21 ; Compare #$2116.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	eor $A9FCF9.l		; 4F F9 FC A9 ; Exclusive OR accumulator with memory (long) $A9FCF9.l [Writes: Accumulator] [Flags: ZN]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$FD02.w		; 29 02 FD ; Logical AND #$FD02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $58.b		; 06 58 ; Arithmetic shift left $58.b [Reads: Direct Page] [Flags: ZNC]
	ldx #$FD01.w		; A2 01 FD ; Load #$FD01.w into X register [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	ldx #$FC01.w		; A2 01 FC ; Load #$FC01.w into X register [Writes: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $C0.b,S		; 63 C0 ; Add with carry (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cpy #$9018.w		; C0 18 90 ; Compare #$9018.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$6859.w		; C0 59 68 ; Compare #$6859.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9059.w		; C0 59 90 ; Compare #$9059.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5AFC.w		; C0 FC 5A ; Compare #$5AFC.w with Y register [Reads: Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $AE.b		; 25 AE ; Logical AND $AE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $BF.b		; 14 BF ; Test and reset bits $BF.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $25C9.w,X		; 5D C9 25 ; Exclusive OR accumulator with memory $25C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $FD04.w,X		; DE 04 FD ; Decrement memory $FD04.w,X [Reads: X Index] [Flags: ZN]
	adc $5CCB.w,X		; 7D CB 5C ; Add $5CCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $EAFC64.l,X		; BF 64 FC EA ; Load long $EAFC64.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($FE.b),Y		; F1 FE ; Subtract with carry ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $A5C8.w,Y		; 59 C8 A5 ; Exclusive OR accumulator with memory $A5C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $FF03.w,X		; 9E 03 FF ; Store zero to $FF03.w,X [Reads: X Index]
	adc $DDCA.w,Y		; 79 CA DD ; Add $DDCA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $A5CB.w,X		; 7D CB A5 ; Add $A5CB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $FE04.w,X		; DE 04 FE ; Decrement memory $FE04.w,X [Reads: X Index] [Flags: ZN]
	eor $95C9.w,X		; 5D C9 95 ; Exclusive OR accumulator with memory $95C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $FF63.w		; AD 63 FF ; Load $FF63.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $FB31FD.l,X		; FF FD 31 FB ; Subtract with carry (long,X) $FB31FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$38AC.w		; A0 AC 38 ; Load #$38AC.w into Y register [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $D0, $A8		; D0 A8 ; Branch if not equal to $D0, $A8 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ldy $B438.w		; AC 38 B4 ; Load $B438.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $D838.w,X		; BD 38 D8 ; Load $D838.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pei ($38.b)		; D4 38 ; Push effective indirect address ($38.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldy #$38D4.w		; A0 D4 38 ; Load #$38D4.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $F9C2.w,X		; BD C2 F9 ; Load $F9C2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $01B5.w		; 6D B5 01 ; Add $01B5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $02C5.w		; 6D C5 02 ; Add $02C5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $EE		; 30 EE ; Branch if minus to $30, $EE [Flow: branch]
	adc ($40.b,X)		; 61 40 ; Add with carry ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF62.w		; EE 62 FF ; Increment $FF62.w [Flags: ZN]
	sbc $C61F3E.l,X		; FF 3E 1F C6 ; Subtract with carry (long,X) $C61F3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$C62E.w		; 29 2E C6 ; Logical AND #$C62E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$AF.b],Y		; 17 AF ; OR accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: ZN]
	lda $9F97C6.l		; AF C6 97 9F ; Load long $9F97C6.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec $97.b		; C6 97 ; Decrement $97.b [Reads: Direct Page] [Flags: ZN]
	jmp.w [$CDC6]		; DC C6 CD ; Jump long indirect [$CDC6] [Flow: jump]
	sta $DCCDC6.l,X		; 9F C6 CD DC ; Store accumulator (long,X) $DCCDC6.l,X [Reads: Accumulator, X Index]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $911C60.l,X		; FF 60 1C 91 ; Subtract with carry (long,X) $911C60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $44,$B2		; 44 B2 44 ; Move block positive $44,$B2 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3831.w,X		; FD 31 38 ; Subtract with carry $3831.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($3991.w,X)		; FC 91 39 ; Jump to subroutine indirect indexed ($3991.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0051.w,X)		; FC 51 00 ; Jump to subroutine indirect indexed ($0051.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0271.w,X		; FD 71 02 ; Subtract with carry $0271.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $22.b		; 14 22 ; Test and reset bits $22.b [Reads: Accumulator] [Flags: Z]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($01.b,S),Y		; 53 01 ; XOR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $33.b		; 25 33 ; Logical AND $33.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($03.b,S),Y		; 73 03 ; Add with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $386222.l		; 5C 22 62 38 ; Jump long to $386222.l [Flow: jump]
	trb $55.b		; 14 55 ; Test and reset bits $55.b [Reads: Accumulator] [Flags: Z]
	tsb $13.b		; 04 13 ; Test and set bits $13.b [Reads: Accumulator] [Flags: Z]
	cpy #$136C.w		; C0 6C 13 ; Compare #$136C.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$430B.w		; C0 0B 43 ; Compare #$430B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$434A.w		; C0 4A 43 ; Compare #$434A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10E1FF.l,X		; FF FF E1 10 ; Subtract with carry (long,X) $10E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0051.w,X)		; FC 51 00 ; Jump to subroutine indirect indexed ($0051.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $21.b,X		; 16 21 ; Arithmetic shift left $21.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $81.b,X		; 56 81 ; Logical shift right $81.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr ($02D1.w,X)		; FC D1 02 ; Jump to subroutine indirect indexed ($02D1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $23.b,X		; 34 23 ; Test bits $23.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $62, $FC, $D3		; 62 FC D3 ; Push effective relative address $62, $FC, $D3 [Writes: Stack Pointer]
	stx $44.b		; 86 44 ; Store X register to $44.b [Reads: X Index]
	and $FD01.w,Y		; 39 01 FD ; AND accumulator with memory $FD01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($84.b,S),Y		; 33 84 ; AND accumulator (stack relative indirect indexed) ($84.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $6123.w		; 4C 23 61 ; Jump to $6123.w [Flow: jump]
	sbc $0031.w,X		; FD 31 00 ; Subtract with carry $0031.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $02F1.w,X		; FD F1 02 ; Subtract with carry $02F1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($6223.w,X)		; 7C 23 62 ; Jump indirect indexed to ($6223.w,X) [Reads: X Index] [Flow: jump]
	sbc $86F3.w,X		; FD F3 86 ; Subtract with carry $86F3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $0139.w		; 8C 39 01 ; Store Y register to $0139.w [Reads: Y Index]
	inc $8453.w,X		; FE 53 84 ; Increment memory $8453.w,X [Reads: X Index] [Flags: ZN]
	sty $23.b,X		; 94 23 ; Store Y register $23.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b),Y		; 51 00 ; Exclusive OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $C40211.l,X		; FF 11 02 C4 ; Subtract with carry (long,X) $C40211.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $D48613.l,X		; FF 13 86 D4 ; Subtract with carry (long,X) $D48613.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF01.w,Y		; 39 01 FF ; AND accumulator with memory $FF01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $82.b,S		; 63 82 ; Add with carry (stack relative) $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp $6248.w,Y		; D9 48 62 ; Compare accumulator $6248.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $288366.l,X		; FF 66 83 28 ; Subtract with carry (long,X) $288366.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $504056.l		; 6F 56 40 50 ; Add with carry (long) $504056.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $2363.w,X		; DD 63 23 ; Compare accumulator $2363.w,X [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $236B.w,Y		; F9 6B 23 ; Subtract with carry $236B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc ($23.b,S),Y		; 73 23 ; Add with carry (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr ($3891.w,X)		; FC 91 38 ; Jump to subroutine indirect indexed ($3891.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $224070.l		; 22 70 40 22 ; Jump to subroutine long $224070.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $7022.w,X		; 3C 22 70 ; Test bits $7022.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $A022.w,X		; 3C 22 A0 ; Test bits $A022.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $2240B8.l		; 22 B8 40 22 ; Jump to subroutine long $2240B8.l [Writes: Stack Pointer] [Flow: call]
	ldy #$223C.w		; A0 3C 22 ; Load #$223C.w into Y register [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $B022.w,X		; 3C 22 B0 ; Test bits $B022.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $1304.w,Y		; F9 04 13 ; Subtract with carry $1304.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$4A04.w		; C0 04 4A ; Compare #$4A04.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$1145.w		; C0 45 11 ; Compare #$1145.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $6011.w		; 8D 11 60 ; Store accumulator to $6011.w [Reads: Accumulator]
	cmp $0A.b,X		; D5 0A ; Compare accumulator $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cpy #$3BE8.w		; C0 E8 3B ; Compare #$3BE8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$11F1.w		; C0 F1 11 ; Compare #$11F1.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $314FFF.l,X		; FF FF 4F 31 ; Subtract with carry (long,X) $314FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3197.w,Y		; F9 97 31 ; Subtract with carry $3197.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $1CE5FF.l,X		; FF FF E5 1C ; Subtract with carry (long,X) $1CE5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $0909.w		; 2E 09 09 ; Rotate left $0909.w [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $FC6193.l		; 22 93 61 FC ; Jump to subroutine long $FC6193.l [Writes: Stack Pointer] [Flow: call]
	stx $9381.w		; 8E 81 93 ; Store X register to $9381.w [Reads: X Index]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	sbc $C842A6.l,X		; FF A6 42 C8 ; Subtract with carry (long,X) $C842A6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $62, $FF, $26		; 62 FF 26 ; Push effective relative address $62, $FF, $26 [Writes: Stack Pointer]
	lsr $D8.b		; 46 D8 ; Logical shift right $D8.b [Reads: Direct Page] [Flags: ZNC]
	ror $01.b		; 66 01 ; Rotate right $01.b [Reads: Direct Page] [Flags: ZNC]
	sbc $D843A9.l,X		; FF A9 43 D8 ; Subtract with carry (long,X) $D843A9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $02.b,Y		; 96 02 ; Store X register $02.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sbc $C84729.l,X		; FF 29 47 C8 ; Subtract with carry (long,X) $C84729.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$62.b]		; A7 62 ; Load accumulator (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $D8862B.l,X		; FF 2B 86 D8 ; Subtract with carry (long,X) $D8862B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $82, $FD, $4E		; 82 FD 4E ; Branch always long to $82, $FD, $4E [Flow: branch]
	sta $51.b,S		; 83 51 ; Store accumulator (stack relative) $51.b,S [Reads: Accumulator, Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	.db $62, $FD, $4A		; 62 FD 4A ; Push effective relative address $62, $FD, $4A [Writes: Stack Pointer]
	sta [$60.b]		; 87 60 ; Store accumulator (long) [$60.b] [Reads: Accumulator, Direct Page]
	lda #$6802.w		; A9 02 68 ; Load #$6802.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	cop $98.b		; 02 98 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy #$1AC4.w		; A0 C4 1A ; Load #$1AC4.w into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($61.b),Y		; D1 61 ; Compare accumulator ($61.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	inc $056C.w,X		; FE 6C 05 ; Increment memory $056C.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	ora $310A.w,Y		; 19 0A 31 ; OR accumulator with memory $310A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($15.b,X)		; 61 15 ; Add with carry ($15.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $30.b,X		; 16 30 ; Arithmetic shift left $30.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $2D.b,S		; 63 2D ; Add with carry (stack relative) $2D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta ($63.b,S),Y		; 93 63 ; Store accumulator (stack relative indirect indexed) ($63.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	jsr ($C9BC.w,X)		; FC BC C9 ; Jump to subroutine indirect indexed ($C9BC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $04CC.w,X		; 3C CC 04 ; Test bits $04CC.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $CB1C.w,X		; FD 1C CB ; Subtract with carry $CB1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $64,$AF		; 44 AF 64 ; Move block positive $64,$AF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $50, $9E		; 50 9E ; Branch if overflow clear to $50, $9E [Flow: branch]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	ora $68CF.w,Y		; 19 CF 68 ; OR accumulator with memory $68CF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $811A.w		; 9C 1A 81 ; Store zero to $811A.w
	ldy $04.b,X		; B4 04 ; Load Y register $04.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $C2.b		; A4 C2 ; Load $C2.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $B9.b,S		; 63 B9 ; Add with carry (stack relative) $B9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$FF04]		; DC 04 FF ; Jump long indirect [$FF04] [Flow: jump]
	adc $DCCB.w,X		; 7D CB DC ; Add $DCCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pei ($64.b)		; D4 64 ; Push effective indirect address ($64.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $CC4A7C.l,X		; FF 7C 4A CC ; Subtract with carry (long,X) $CC4A7C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $03.b		; C5 03 ; Compare $03.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $4D9B.w,X		; FE 9B 4D ; Increment memory $4D9B.w,X [Reads: X Index] [Flags: ZN]
	lda $6499.w,X		; BD 99 64 ; Load $6499.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $4EFC.w,X		; FE FC 4E ; Increment memory $4EFC.w,X [Reads: X Index] [Flags: ZN]
	cpy $0489.w		; CC 89 04 ; Compare $0489.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $CC0A77.l,X		; FF 77 0A CC ; Subtract with carry (long,X) $CC0A77.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($03.b),Y		; 71 03 ; Add with carry ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($1D.b)		; 92 1D ; Store accumulator (indirect) ($1D.b) [Reads: Accumulator, Direct Page]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $645A.w,X		; BC 5A 64 ; Load Y register $645A.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	inc $0EF7.w,X		; FE F7 0E ; Increment memory $0EF7.w,X [Reads: X Index] [Flags: ZN]
	jmp.w [$6480]		; DC 80 64 ; Jump long indirect [$6480] [Flow: jump]
	sbc $FE8B78.l,X		; FF 78 8B FE ; Subtract with carry (long,X) $FE8B78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $031C2B.l		; 8F 2B 1C 03 ; Store accumulator (long) $031C2B.l [Reads: Accumulator]
	jsr ($07C4.w,X)		; FC C4 07 ; Jump to subroutine indirect indexed ($07C4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $5A		; 30 5A ; Branch if minus to $30, $5A [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $30, $53		; 30 53 ; Branch if minus to $30, $53 [Flow: branch]
	.db $62, $50, $79		; 62 50 79 ; Push effective relative address $62, $50, $79 [Writes: Stack Pointer]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc [$84.b]		; 67 84 ; Add with carry (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $80.b		; 65 80 ; Add $80.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phy		; [PATTERN: Memory clearing operation] 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $64.b,X		; 74 64 ; Store zero to $64.b,X [Reads: X Index]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $1B.b		; 64 1B ; Store zero to $1B.b
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $FE, $29		; 62 FE 29 ; Push effective relative address $62, $FE, $29 [Writes: Stack Pointer]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: ZNC]
	sta ($01.b),Y		; 91 01 ; Store accumulator ($01.b),Y [Reads: Accumulator, Direct Page, Y Index]
	.db $42, $41		; 42 41 ; Reserved instruction
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($0A.b,X)		; 41 0A ; Exclusive OR accumulator with memory ($0A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($6D.b,X)		; A1 6D ; Load accumulator ($6D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit #$2504.w		; 89 04 25 ; Test bits #$2504.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor $251B.w,Y		; 59 1B 25 ; Exclusive OR accumulator with memory $251B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	stz $36.b		; 64 36 ; Store zero to $36.b
	and $04.b,X		; 35 04 ; Logical AND $04.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($4F93.w,X)		; FC 93 4F ; Jump to subroutine indirect indexed ($4F93.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $50, $86		; 50 86 ; Branch if overflow clear to $50, $86 [Flow: branch]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $7564.w		; 4C 64 75 ; Jump to $7564.w [Flow: jump]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stx $48.b,Y		; 96 48 ; Store X register $48.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc $6478.w,X		; 7D 78 64 ; Add $6478.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CEF9.w,X		; FD F9 CE ; Subtract with carry $CEF9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $039F.w		; 8C 9F 03 ; Store Y register to $039F.w [Reads: Y Index]
	stx $34.b		; 86 34 ; Store X register to $34.b [Reads: X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $636D.w		; AD 6D 63 ; Load $636D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $CCB9.w,X		; FE B9 CC ; Increment memory $CCB9.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ldy $D0.b		; A4 D0 ; Load $D0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $A4		; D0 A4 ; Branch if not equal to $D0, $A4 [Flow: branch]
	sbc $2C3262.l,X		; FF 62 32 2C ; Subtract with carry (long,X) $2C3262.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$4422]		; DC 22 44 ; Jump long indirect [$4422] [Flow: jump]
	jmp.w [$0822]		; DC 22 08 ; Jump long indirect [$0822] [Flow: jump]
	ora ($A0.b,S),Y		; 13 A0 ; OR accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $01A1.w,X		; 7D A1 01 ; Add $01A1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora ($D2.b,X)		; 01 D2 ; Logical OR ($D2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$BD68.w		; C0 68 BD ; Compare #$BD68.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $6844A1.l,X		; DF A1 44 68 ; Compare accumulator (long,X) $6844A1.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ldx #$5840.w		; A2 40 58 ; Load #$5840.w into X register [Writes: X Index] [Flags: ZN]
	cpy #$5851.w		; C0 51 58 ; Compare #$5851.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $42, $50		; 42 50 ; Reserved instruction
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $90,$A1		; 54 A1 90 ; Move block negative $90,$A1 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($7C.b,X)		; A1 7C ; Load accumulator ($7C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldx #$6488.w		; A2 88 64 ; Load #$6488.w into X register [Writes: X Index] [Flags: ZN]
	ldx #$517C.w		; A2 7C 51 ; Load #$517C.w into X register [Writes: X Index] [Flags: ZN]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	sta [$11.b],Y		; 97 11 ; Store accumulator (long indexed) [$11.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ldx #$13D9.w		; A2 D9 13 ; Load #$13D9.w into X register [Writes: X Index] [Flags: ZN]
	cpy #$45D9.w		; C0 D9 45 ; Compare #$45D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A4D9.w		; C0 D9 A4 ; Compare #$A4D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$B0D9.w		; C0 D9 B0 ; Compare #$B0D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF142B.l,X		; FF 2B 14 FF ; Subtract with carry (long,X) $FF142B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $02.b,S		; A3 02 ; Load accumulator (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $1CE5FF.l,X		; FF FF E5 1C ; Subtract with carry (long,X) $1CE5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($4026.w,X)		; FC 26 40 ; Jump to subroutine indirect indexed ($4026.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $FC6121.l		; 22 21 61 FC ; Jump to subroutine long $FC6121.l [Writes: Stack Pointer] [Flow: call]
	stx $44.b		; 86 44 ; Store X register to $44.b [Reads: X Index]
	jsr ($0081.w,X)		; FC 81 00 ; Jump to subroutine indirect indexed ($0081.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0241.w,X		; FD 41 02 ; Subtract with carry $0241.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($21.b)		; 52 21 ; Exclusive OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $FD, $46		; 62 FD 46 ; Push effective relative address $62, $FD, $46 [Writes: Stack Pointer]
	stx $60.b		; 86 60 ; Store X register to $60.b [Reads: X Index]
	adc #$6801.w		; 69 01 68 ; Add #$6801.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $09.b		; 66 09 ; Rotate right $09.b [Reads: Direct Page] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $00A1.w,X		; FD A1 00 ; Subtract with carry $00A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($02.b,X)		; 41 02 ; Exclusive OR accumulator with memory ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	.db $62, $B0, $41		; 62 B0 41 ; Push effective relative address $62, $B0, $41 [Writes: Stack Pointer]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx $04.b		; E4 04 ; Compare $04.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $6120.w,Y		; B9 20 61 ; Load $6120.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $00E1.w,X		; FE E1 00 ; Increment memory $00E1.w,X [Reads: X Index] [Flags: ZN]
	jsr ($4129.w,X)		; FC 29 41 ; Jump to subroutine indirect indexed ($4129.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $02.b,X		; 95 02 ; Store accumulator to $02.b,X [Reads: Accumulator, X Index]
	jsr ($4589.w,X)		; FC 89 45 ; Jump to subroutine indirect indexed ($4589.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FC61A5.l		; 22 A5 61 FC ; Jump to subroutine long $FC61A5.l [Writes: Stack Pointer] [Flow: call]
	stx $FD81.w		; 8E 81 FD ; Store X register to $FD81.w [Reads: X Index]
	lsr $5883.w		; 4E 83 58 ; Logical shift right $5883.w [Flags: ZNC]
	ldy $510C.w		; AC 0C 51 ; Load $510C.w into Y register [Writes: Y Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	.db $62, $70, $99		; 62 70 99 ; Push effective relative address $62, $70, $99 [Writes: Stack Pointer]
	cop $79.b		; 02 79 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ldy #$0273.w		; A0 73 02 ; Load #$0273.w into Y register [Writes: Y Index] [Flags: ZN]
	inc $05E7.w,X		; FE E7 05 ; Increment memory $05E7.w,X [Reads: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $61.b,S		; 83 61 ; Store accumulator (stack relative) $61.b,S [Reads: Accumulator, Stack Pointer]
	inc $84E9.w,X		; FE E9 84 ; Increment memory $84E9.w,X [Reads: X Index] [Flags: ZN]
	.db $B0, $99		; B0 99 ; Branch if carry set to $B0, $99 [Flow: branch]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit #$A280.w		; 89 80 A2 ; Test bits #$A280.w with accumulator [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $FF81.w		; 8E 81 FF ; Store X register to $FF81.w [Reads: X Index]
	lsr $D083.w		; 4E 83 D0 ; Logical shift right $D083.w [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $4C		; 62 FF 4C ; Push effective relative address $62, $FF, $4C [Writes: Stack Pointer]
	sta [$E0.b]		; 87 E0 ; Store accumulator (long) [$E0.b] [Reads: Accumulator, Direct Page]
	cmp #$FF02.w		; C9 02 FF ; Compare #$FF02.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $2E83.w		; AC 83 2E ; Load $2E83.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $FC63.w		; 2C 63 FC ; Test bits $FC63.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	lda [$0C.b],Y		; B7 0C ; Load accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($C8B1.w,X)		; FC B1 C8 ; Jump to subroutine indirect indexed ($C8B1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $031C.w,X		; 3C 1C 03 ; Test bits $031C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $CA11.w,X		; FD 11 CA ; Subtract with carry $CA11.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $2C.b		; 46 2C ; Logical shift right $2C.b [Reads: Direct Page] [Flags: ZNC]
	stz $50.b		; [PATTERN: Memory clearing operation] 64 50 ; Store zero to $50.b
	ror $03.b,X		; 76 03 ; Rotate right $03.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $4E17.w,X		; FD 17 4E ; Subtract with carry $4E17.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$1971.w		; 69 71 19 ; Add #$1971.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stz $2A.b,X		; 74 2A ; Store zero to $2A.b,X [Reads: X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sty $49.b		; 84 49 ; Store Y register to $49.b [Reads: Y Index]
	adc $74.b,S		; 63 74 ; Add with carry (stack relative) $74.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and #$FD63.w		; 29 63 FD ; Logical AND #$FD63.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($C8.b),Y		; D1 C8 ; Compare accumulator ($C8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sty $28.b		; 84 28 ; Store Y register to $28.b [Reads: Y Index]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	ora ($CA.b),Y		; 11 CA ; OR accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $4E		; B0 4E ; Branch if carry set to $B0, $4E [Flow: branch]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $CC.b		; 14 CC ; Test and reset bits $CC.b [Reads: Accumulator] [Flags: Z]
	cpy $2F.b		; C4 2F ; Compare $2F.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	adc $FF.b,S		; 63 FF ; Add with carry (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pei ($1C.b)		; D4 1C ; Push effective indirect address ($1C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $DC642F.l,X		; DF 2F 64 DC ; Compare accumulator (long,X) $DC642F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	pei ($BC.b)		; D4 BC ; Push effective indirect address ($BC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $64CDC4.l		; CF C4 CD 64 ; Compare accumulator (long) $64CDC4.l [Reads: Accumulator] [Flags: ZNC]
	sbc $BCCB1D.l,X		; FF 1D CB BC ; Subtract with carry (long,X) $BCCB1D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$FE04]		; DC 04 FE ; Jump long indirect [$FE04] [Flow: jump]
	lda $ADC9.w,X		; BD C9 AD ; Load $ADC9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $63.b,X		; B4 63 ; Load Y register $63.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	inc $48BA.w,X		; FE BA 48 ; Increment memory $48BA.w,X [Reads: X Index] [Flags: ZN]
	ldy $03A4.w,X		; BC A4 03 ; Load Y register $03A4.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sbc $C54C1A.l,X		; FF 1A 4C C5 ; Subtract with carry (long,X) $C54C1A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,X		; 75 63 ; Add $63.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda ($64.b,X)		; A1 64 ; Load accumulator ($64.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	asl $4D.b,X		; 16 4D ; Arithmetic shift left $4D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $1C88.w,Y		; 79 88 1C ; Add $1C88.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $8C		; 70 8C ; Branch if overflow set to $70, $8C [Flow: branch]
	tsb $45.b		; 04 45 ; Test and set bits $45.b [Reads: Accumulator] [Flags: Z]
	lda $1C.b,X		; B5 1C ; Load $1C.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $B8.b		; 45 B8 ; Exclusive OR $B8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	ora $2ECB.w,X		; 1D CB 2E ; OR accumulator with memory $2ECB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $3CC9.w,X		; BD C9 3C ; Load $3CC9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$FC04]		; DC 04 FC ; Jump long indirect [$FC04] [Flow: jump]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $8824.w		; 8D 24 88 ; Store accumulator to $8824.w [Reads: Accumulator]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	.db $80, $63		; 80 63 ; Branch always to $80, $63 [Flow: branch]
	jsr ($0857.w,X)		; FC 57 08 ; Jump to subroutine indirect indexed ($0857.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $70.b		; 24 70 ; Test bits $70.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit #$2B83.w		; 89 83 2B ; Test bits #$2B83.w with accumulator [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	ldy $62.b		; A4 62 ; Load $62.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($60.b,S),Y		; 13 60 ; OR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	bit $68A1.w,X		; 3C A1 68 ; Test bits $68A1.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	mvn $68,$A0		; 54 A0 68 ; Move block negative $68,$A0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $A000.w		; 4E 00 A0 ; Logical shift right $A000.w [Flags: ZNC]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($12.b),Y		; B1 12 ; Load accumulator ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$A22C.w		; A0 2C A2 ; Load #$A22C.w into Y register [Writes: Y Index] [Flags: ZN]
	stz $B4.b		; 64 B4 ; Store zero to $B4.b
	lda $7D.b,S		; A3 7D ; Load accumulator (stack relative) $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b		; A5 A3 ; Load $A3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $BB.b,S		; 63 BB ; Add with carry (stack relative) $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$A872.w		; C0 72 A8 ; Compare #$A872.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$83A0.w		; C0 A0 83 ; Compare #$83A0.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cpx #$C0D9.w		; E0 D9 C0 ; Compare #$C0D9.w with X register [Reads: X Index] [Flags: ZNC]
	sbc ($D8.b),Y		; F1 D8 ; Subtract with carry ($D8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$4501.w		; C0 01 45 ; Compare #$4501.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A701.w		; C0 01 A7 ; Compare #$A701.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D901.w		; C0 01 D9 ; Compare #$D901.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($10.b),Y		; B1 10 ; Load accumulator ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $02		; 42 02 ; Reserved instruction
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$3E91.w		; A0 91 3E ; Load #$3E91.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$4BF1.w		; A0 F1 4B ; Load #$4BF1.w into Y register [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $A5		; F0 A5 ; Branch if equal to $F0, $A5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy $FF76.w,X		; BC 76 FF ; Load Y register $FF76.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora $FFE8.w,Y		; 19 E8 FF ; OR accumulator with memory $FFE8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $94E8.w,Y		; 79 E8 94 ; Add $94E8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$94B2.w		; A2 B2 94 ; Load #$94B2.w into X register [Writes: X Index] [Flags: ZN]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $C2.b,X		; 94 C2 ; Store Y register $C2.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	lda ($94.b)		; B2 94 ; Load accumulator (indirect) ($94.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($B2.b)		; D2 B2 ; Compare accumulator (indirect) ($B2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stx $9D.b,Y		; 96 9D ; Store X register $9D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lda ($96.b,S),Y		; B3 96 ; Load accumulator (stack relative indirect indexed) ($96.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $97B4.w,X		; DD B4 97 ; Compare accumulator $97B4.w,X [Reads: X Index] [Flags: ZNC]
	ldx #$C38D.w		; A2 8D C3 ; Load #$C38D.w into X register [Writes: X Index] [Flags: ZN]
	ldx #$9C8E.w		; A2 8E 9C ; Load #$9C8E.w into X register [Writes: X Index] [Flags: ZN]
	lda $9D3C.w		; AD 3C 9D ; Load $9D3C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $DD.b,X		; B4 DD ; Load Y register $DD.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$FDB6.w		; A2 B6 FD ; Load #$FDB6.w into X register [Writes: X Index] [Flags: ZN]
	ldy $FD93.w		; AC 93 FD ; Load $FD93.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $3E91.w		; 20 91 3E ; Jump to subroutine at $3E91.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $A5		; 70 A5 ; Branch if overflow set to $70, $A5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($D0.b,X)		; 21 D0 ; Logical AND ($D0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $8EFC.w,X		; DD FC 8E ; Compare accumulator $8EFC.w,X [Reads: X Index] [Flags: ZNC]
	and [$FC.b]		; 27 FC ; AND accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $4927.w		; CE 27 49 ; Decrement $4927.w [Flags: ZN]
	lda $C5.b,S		; A3 C5 ; Load accumulator (stack relative) $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$C5D8.w		; 49 D8 C5 ; Exclusive OR #$C5D8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx #$5371.w		; A2 71 53 ; Load #$5371.w into X register [Writes: X Index] [Flags: ZN]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $A3.b,S		; 63 A3 ; Add with carry (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr ($29E9.w,X)		; FC E9 29 ; Jump to subroutine indirect indexed ($29E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpx $FC3B.w		; EC 3B FC ; Compare $FC3B.w with X register [Reads: X Index] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($FC.b,X)		; 21 FC ; Logical AND ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda ($FC.b,X)		; A1 FC ; Load accumulator ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($2B.b,X)		; 21 2B ; Logical AND ($2B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx #$26FD.w		; A2 FD 26 ; Load #$26FD.w into X register [Writes: X Index] [Flags: ZN]
	cmp ($FD.b)		; D2 FD ; Compare accumulator (indirect) ($FD.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor ($AB.b),Y		; 51 AB ; Exclusive OR accumulator with memory ($AB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $BF51.w,X		; FD 51 BF ; Subtract with carry $BF51.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF.w,X		; FD FF FF ; Subtract with carry $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $006100.l		; 22 00 61 00 ; Jump to subroutine long $006100.l [Writes: Stack Pointer] [Flow: call]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$3E91.w		; A0 91 3E ; Load #$3E91.w into Y register [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$A078.w		; C0 78 A0 ; Compare #$A078.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $B43B.w		; EC 3B B4 ; Compare $B43B.w with X register [Reads: X Index] [Flags: ZNC]
	sta ($4F.b),Y		; 91 4F ; Store accumulator ($4F.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy #$B2AF.w		; A0 AF B2 ; Load #$B2AF.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$B2BF.w		; A0 BF B2 ; Load #$B2BF.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$B2CF.w		; A0 CF B2 ; Load #$B2CF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $A9.b,S		; A3 A9 ; Load accumulator (stack relative) $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($A3.b,S),Y		; B3 A3 ; Load accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A2B4.w,X		; DD B4 A2 ; Compare accumulator $A2B4.w,X [Reads: X Index] [Flags: ZNC]
	lda $AFDE8D.l		; AF 8D DE AF ; Load long $AFDE8D.l into accumulator [Writes: Accumulator] [Flags: ZN]
	stx $B0BC.w		; 8E BC B0 ; Store X register to $B0BC.w [Reads: X Index]
	bit $B8B5.w,X		; 3C B5 B8 ; Test bits $B8B5.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $79FF.w,X		; DD FF 79 ; Compare accumulator $79FF.w,X [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Accumulator, Stack Pointer]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E3FF.l,X		; FF FF E3 00 ; Subtract with carry (long,X) $00E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $3E91.w		; 20 91 3E ; Jump to subroutine at $3E91.w [Writes: Stack Pointer] [Flow: call]
	jsr $4BF0.w		; 20 F0 4B ; Jump to subroutine at $4BF0.w [Writes: Stack Pointer] [Flow: call]
	mvn $3B,$EC		; 54 EC 3B ; Move block negative $3B,$EC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $70, $C0		; 70 C0 ; Branch if overflow set to $70, $C0 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $B2AF.w		; 20 AF B2 ; Jump to subroutine at $B2AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2BF.w		; 20 BF B2 ; Jump to subroutine at $B2BF.w [Writes: Stack Pointer] [Flow: call]
	jsr $B2CF.w		; 20 CF B2 ; Jump to subroutine at $B2CF.w [Writes: Stack Pointer] [Flow: call]
	and $A9.b,S		; 23 A9 ; AND accumulator with stack relative $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($23.b,S),Y		; B3 23 ; Load accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $22B4.w,X		; DD B4 22 ; Compare accumulator $22B4.w,X [Reads: X Index] [Flags: ZNC]
	lda $AF5E8D.l		; AF 8D 5E AF ; Load long $AF5E8D.l into accumulator [Writes: Accumulator] [Flags: ZN]
	stx $B134.w		; 8E 34 B1 ; Store X register to $B134.w [Reads: X Index]
	bit $B835.w,X		; 3C 35 B8 ; Test bits $B835.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $BA3A.w,X		; DD 3A BA ; Compare accumulator $BA3A.w,X [Reads: X Index] [Flags: ZNC]
	sbc $9334.w,X		; FD 34 93 ; Subtract with carry $9334.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $59FC.w,X		; FD FC 59 ; Subtract with carry $59FC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $006128.l		; 22 28 61 00 ; Jump to subroutine long $006128.l [Writes: Stack Pointer] [Flow: call]
	adc ($12.b,X)		; 61 12 ; Add with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8122.w,X)		; FC 22 81 ; Jump to subroutine indirect indexed ($8122.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rep #$85		; C2 85 ; Reset processor status bits #$85 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and ($3B.b)		; 32 3B ; AND accumulator with memory (indirect) ($3B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$4201.w		; C9 01 42 ; Compare #$4201.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta ($02.b,S),Y		; 93 02 ; Store accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	inc $0569.w,X		; FE 69 05 ; Increment memory $0569.w,X [Reads: X Index] [Flags: ZN]
	sta $61A0.w,Y		; 99 A0 61 ; Store accumulator to $61A0.w,Y [Reads: Accumulator, Y Index]
	inc $046C.w,X		; FE 6C 04 ; Increment memory $046C.w,X [Reads: X Index] [Flags: ZN]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	ora $01C269.l		; 0F 69 C2 01 ; OR accumulator with memory (long) $01C269.l [Writes: Accumulator] [Flags: ZN]
	ora $01AB.w,Y		; 19 AB 01 ; OR accumulator with memory $01AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	jsr ($802A.w,X)		; FC 2A 80 ; Jump to subroutine indirect indexed ($802A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $2161.w,Y		; B9 61 21 ; Load $2161.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $50.b		; 02 50 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl $AEFE.w		; 0E FE AE ; Arithmetic shift left $AEFE.w [Flags: ZNC]
	sta $AA.b,S		; 83 AA ; Store accumulator (stack relative) $AA.b,S [Reads: Accumulator, Stack Pointer]
	sta ($62.b,S),Y		; 93 62 ; Store accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	inc $02A8.w,X		; FE A8 02 ; Increment memory $02A8.w,X [Reads: X Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $82, $01, $FD		; 82 01 FD ; Branch always long to $82, $01, $FD [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl $4A.b		; 06 4A ; Arithmetic shift left $4A.b [Reads: Direct Page] [Flags: ZNC]
	and $FD62.w,Y		; 39 62 FD ; AND accumulator with memory $FD62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $295A87.l		; 22 87 5A 29 ; Jump to subroutine long $295A87.l [Writes: Stack Pointer] [Flow: call]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $83, $A0		; 82 83 A0 ; Branch always long to $82, $83, $A0 [Flow: branch]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $0281.w,X		; FE 81 02 ; Increment memory $0281.w,X [Reads: X Index] [Flags: ZN]
	sbc $80A4.w,X		; FD A4 80 ; Subtract with carry $80A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	eor #$FF01.w		; 49 01 FF ; Exclusive OR #$FF01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $84.b		; 04 84 ; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	cpy #$613A.w		; C0 3A 61 ; Compare #$613A.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $D08002.l,X		; FF 02 80 D0 ; Subtract with carry (long,X) $D08002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF01.w		; 29 01 FF ; Logical AND #$FF01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $82, $D8		; 62 82 D8 ; Push effective relative address $62, $82, $D8 [Writes: Stack Pointer]
	and $FF62.w,Y		; 39 62 FF ; AND accumulator with memory $FF62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $06.b		; 64 06 ; Store zero to $06.b
	sbc $FF02A4.l,X		; FF A4 02 FF ; Subtract with carry (long,X) $FF02A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$D803.w		; A9 03 D8 ; Load #$D803.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($02.b)		; 92 02 ; Store accumulator (indirect) ($02.b) [Reads: Accumulator, Direct Page]
	sbc $C90129.l,X		; FF 29 01 C9 ; Subtract with carry (long,X) $C90129.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $61		; 70 61 ; Branch if overflow set to $70, $61 [Flow: branch]
	sbc $7A0526.l,X		; FF 26 05 7A ; Subtract with carry (long,X) $7A0526.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $02, $FD		; 62 02 FD ; Push effective relative address $62, $02, $FD [Writes: Stack Pointer]
	ldx $01.b		; A6 01 ; Load $01.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor $FC61.w,Y		; 59 61 FC ; Exclusive OR accumulator with memory $FC61.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($38.b,X)		; 81 38 ; Store accumulator ($38.b,X) [Reads: Accumulator, X Index, Direct Page]
	inc $3841.w,X		; FE 41 38 ; Increment memory $3841.w,X [Reads: X Index] [Flags: ZN]
	sbc $B8E4.w,X		; FD E4 B8 ; Subtract with carry $B8E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($B86A.w,X)		; FC 6A B8 ; Jump to subroutine indirect indexed ($B86A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $4E.b		; E5 4E ; Subtract $4E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $5EE5.w,Y		; F9 E5 5E ; Subtract with carry $5EE5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6FE7.w,Y		; F9 E7 6F ; Subtract with carry $6FE7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cop $3B.b		; 02 3B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$7A02.w		; C0 02 7A ; Compare #$7A02.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C508.w		; C0 08 C5 ; Compare #$C508.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($0B.b,X)		; A1 0B ; Load accumulator ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $49C0.w,Y		; D9 C0 49 ; Compare accumulator $49C0.w,Y [Reads: Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $DF		; 50 DF ; Branch if overflow clear to $50, $DF [Flow: branch]
	lda ($54.b,X)		; A1 54 ; Load accumulator ($54.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$6AA2.w		; A9 A2 6A ; Load #$6AA2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($C0.b,X)		; A1 C0 ; Load accumulator ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($A3.b),Y		; 31 A3 ; AND accumulator with memory ($A3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $B3.b		; 00 B3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$E8C0.w		; 09 C0 E8 ; Logical OR #$E8C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($C0.b)		; 12 C0 ; OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	cpy #$3873.w		; C0 73 38 ; Compare #$3873.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$3A68.w		; C0 68 3A ; Compare #$3A68.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$705B.w		; C0 5B 70 ; Compare #$705B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$709A.w		; C0 9A 70 ; Compare #$709A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$81B8.w		; C0 B8 81 ; Compare #$81B8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A3BB.w		; C0 BB A3 ; Compare #$A3BB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D9BB.w		; C0 BB D9 ; Compare #$D9BB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0E.b),Y		; 71 0E ; Add with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C81FF.l,X		; FF FF 81 1C ; Subtract with carry (long,X) $1C81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8122.w,X)		; FC 22 81 ; Jump to subroutine indirect indexed ($8122.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rep #$85		; C2 85 ; Reset processor status bits #$85 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and ($3A.b,S),Y		; 33 3A ; AND accumulator (stack relative indirect indexed) ($3A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sty $18.b		; 84 18 ; Store Y register to $18.b [Reads: Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $80, $FC		; 80 FC ; Branch always to $80, $FC [Flow: branch]
	bit $1901.w		; 2C 01 19 ; Test bits $1901.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rep #$02		; C2 02 ; Reset processor status bits #$02 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $032C.w,X		; FD 2C 03 ; Subtract with carry $032C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $62, $48, $B2		; 62 48 B2 ; Push effective relative address $62, $48, $B2 [Writes: Stack Pointer]
	.db $62, $FD, $22		; 62 FD 22 ; Push effective relative address $62, $FD, $22 [Writes: Stack Pointer]
	sta [$58.b]		; 87 58 ; Store accumulator (long) [$58.b] [Reads: Accumulator, Direct Page]
	and #$FD02.w		; 29 02 FD ; Logical AND #$FD02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $82, $83, $60		; 82 83 60 ; Branch always long to $82, $83, $60 [Flow: branch]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0281.w,X		; FD 81 02 ; Subtract with carry $0281.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0001.w,X		; FE 01 00 ; Increment memory $0001.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $21		; 80 21 ; Branch always to $80, $21 [Flow: branch]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cop $81.b		; 02 81 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $2B		; 90 2B ; Branch if carry clear to $90, $2B [Flow: branch]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$A985.w		; A2 85 A9 ; Load #$A985.w into X register [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $38AA.w		; 0E AA 38 ; Arithmetic shift left $38AA.w [Flags: ZNC]
	adc ($D8.b,X)		; 61 D8 ; Add with carry ($D8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$FD83.w		; A9 83 FD ; Load #$FD83.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $80.b		; A4 80 ; Load $80.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $82.b		; 24 82 ; Test bits $82.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($0E.b)		; 72 0E ; Add with carry (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$6159.w		; 69 59 61 ; Add #$6159.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$61C1.w		; A9 C1 61 ; Load #$61C1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $81AE.w,X		; FE AE 81 ; Increment memory $81AE.w,X [Reads: X Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc ($0F.b)		; 72 0F ; Add with carry (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit #$6259.w		; 89 59 62 ; Test bits #$6259.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp #$62C1.w		; C9 C1 62 ; Compare #$62C1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $FC832E.l,X		; FF 2E 83 FC ; Subtract with carry (long,X) $FC832E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($39.b,X)		; 81 39 ; Store accumulator ($39.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsr ($B96A.w,X)		; FC 6A B9 ; Jump to subroutine indirect indexed ($B96A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $B9E4.w,X		; FD E4 B9 ; Subtract with carry $B9E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $3941.w,X		; FE 41 39 ; Increment memory $3941.w,X [Reads: X Index] [Flags: ZN]
	mvn $A4,$1C		; 54 1C A4 ; Move block negative $A4,$1C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $A440.w,X		; 3C 40 A4 ; Test bits $A440.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cpy $A438.w		; CC 38 A4 ; Compare $A438.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy $54.b,X		; B4 54 ; Load Y register $54.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $D8.b		; A4 D8 ; Load $D8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	cmp $23.b,S		; C3 23 ; Compare accumulator (stack relative) $23.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cop $3B.b		; 02 3B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$7A02.w		; C0 02 7A ; Compare #$7A02.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D20B.w		; C0 0B D2 ; Compare #$D20B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D24B.w		; C0 4B D2 ; Compare #$D24B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$876A.w		; C0 6A 87 ; Compare #$876A.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($6B.b,X)		; A1 6B ; Load accumulator ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $12		; 70 12 ; Branch if overflow set to $70, $12 [Flow: branch]
	cpy #$385B.w		; C0 5B 38 ; Compare #$385B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4A58.w		; C0 58 4A ; Compare #$4A58.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$7A98.w		; C0 98 7A ; Compare #$7A98.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $ACA2.w,X		; 7D A2 AC ; Add $ACA2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($A1.b,X)		; 81 A1 ; Store accumulator ($A1.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $B0, $95		; B0 95 ; Branch if carry set to $B0, $95 [Flow: branch]
	ldx #$99C4.w		; A2 C4 99 ; Load #$99C4.w into X register [Writes: X Index] [Flags: ZN]
	lda ($C8.b,X)		; A1 C8 ; Load accumulator ($C8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $D9A2.w		; AC A2 D9 ; Load $D9A2.w into Y register [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpy #$E8D9.w		; C0 D9 E8 ; Compare #$E8D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0081.w,X)		; FC 81 00 ; Jump to subroutine indirect indexed ($0081.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$0D44.w		; 09 44 0D ; Logical OR #$0D44.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $6122.w		; 20 22 61 ; Jump to subroutine at $6122.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $4909.w		; 0E 09 49 ; Arithmetic shift left $4909.w [Flags: ZNC]
	adc ($20.b,X)		; 61 20 ; Add with carry ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$85.b]		; E7 85 ; Subtract with carry (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FE81.w		; EE 81 FE ; Increment $FE81.w [Flags: ZN]
	ror $9883.w		; 6E 83 98 ; Rotate right $9883.w [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FE, $6C		; 62 FE 6C ; Push effective relative address $62, $FE, $6C [Writes: Stack Pointer]
	sta [$AA.b]		; 87 AA ; Store accumulator (long) [$AA.b] [Reads: Accumulator, Direct Page]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $FF83.w		; AC 83 FF ; Load $FF83.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $82, $AA, $A8		; 82 AA A8 ; Branch always long to $82, $AA, $A8 [Flow: branch]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stx $99.b		; 86 99 ; Store X register to $99.b [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $62, $FE, $67		; 62 FE 67 ; Push effective relative address $62, $FE, $67 [Writes: Stack Pointer]
	.db $82, $71, $79		; 82 71 79 ; Branch always long to $82, $71, $79 [Flow: branch]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $50, $0F		; 50 0F ; Branch if overflow clear to $50, $0F [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr $FD62.w		; 20 62 FD ; Jump to subroutine at $FD62.w [Writes: Stack Pointer] [Flow: call]
	and ($02.b,X)		; 21 02 ; Logical AND ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stz $24.b,X		; 74 24 ; Store zero to $24.b,X [Reads: X Index]
	ora $3874.w		; 0D 74 38 ; Logical OR $3874.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $2875.w		; 0E 75 28 ; Arithmetic shift left $2875.w [Flags: ZNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($02.b,X)		; 61 02 ; Add with carry ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $6222.w,Y		; D9 22 62 ; Compare accumulator $6222.w,Y [Reads: Y Index] [Flags: ZNC]
	stx $0252.w		; 8E 52 02 ; Store X register to $0252.w [Reads: X Index]
	sbc $FD0365.l,X		; FF 65 03 FD ; Subtract with carry (long,X) $FD0365.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $55C8.w,Y		; 19 C8 55 ; OR accumulator with memory $55C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $FE03.w,X		; 9E 03 FE ; Store zero to $FE03.w,X [Reads: X Index]
	and $44CA.w,Y		; 39 CA 44 ; AND accumulator with memory $44CA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $45.b,S		; 63 45 ; Add with carry (stack relative) $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $FD63.w		; AD 63 FD ; Load $FD63.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $55C9.w,X		; 1D C9 55 ; OR accumulator with memory $55C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $8D04.w,X		; DE 04 8D ; Decrement memory $8D04.w,X [Reads: X Index] [Flags: ZN]
	lda $FE64.w		; AD 64 FE ; Load $FE64.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $FDCB.w,X		; 3D CB FD ; AND accumulator with memory $FDCB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit #$B3F2.w		; 89 F2 B3 ; Test bits #$B3F2.w with accumulator [Reads: Accumulator] [Flags: Z]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	mvp $22,$99		; 44 99 22 ; Move block positive $22,$99 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $80, $9B		; 80 9B ; Branch always to $80, $9B [Flow: branch]
	jsl $DD4828.l		; 22 28 48 DD ; Jump to subroutine long $DD4828.l [Writes: Stack Pointer] [Flow: call]
	sta $DD38.w,Y		; 99 38 DD ; Store accumulator to $DD38.w,Y [Reads: Accumulator, Y Index]
	jsr ($38E1.w,X)		; FC E1 38 ; Jump to subroutine indirect indexed ($38E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $38E1.w,X		; FE E1 38 ; Increment memory $38E1.w,X [Reads: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($A0.b),Y		; 31 A0 ; AND accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$7508.w		; C0 08 75 ; Compare #$7508.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($0A.b,X)		; A1 0A ; Load accumulator ($0A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpy #$CA0A.w		; C0 0A CA ; Compare #$CA0A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D9AB.w		; C0 AB D9 ; Compare #$D9AB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D9E8.w		; C0 E8 D9 ; Compare #$D9E8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$1358.w		; C0 58 13 ; Compare #$1358.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$1364.w		; C0 64 13 ; Compare #$1364.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5059.w		; C0 59 50 ; Compare #$5059.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$1174.w		; C0 74 11 ; Compare #$1174.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$4D74.w		; A0 74 4D ; Load #$4D74.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($5C.b,X)		; A1 5C ; Load accumulator ($5C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($A2.b,X)		; 61 A2 ; Add with carry ($A2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($60.b,S),Y		; 73 60 ; Add with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$6873.w		; C0 73 68 ; Compare #$6873.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$63AB.w		; C0 AB 63 ; Compare #$63AB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A2AA.w		; C0 AA A2 ; Compare #$A2AA.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	lda ($10.b,X)		; A1 10 ; Load accumulator ($10.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $1C81FF.l,X		; FF FF 81 1C ; Subtract with carry (long,X) $1C81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0091.w,X)		; FC 91 00 ; Jump to subroutine indirect indexed ($0091.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $C4.b,X		; 94 C4 ; Store Y register $C4.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	trb $4E.b		; 14 4E ; Test and reset bits $4E.b [Reads: Accumulator] [Flags: Z]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $C0.b		; 24 C0 ; Test bits $C0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $080E.w		; 6E 0E 08 ; Rotate right $080E.w [Flags: ZNC]
	ror $2861.w		; 6E 61 28 ; Rotate right $2861.w [Flags: ZNC]
	sta $8F4002.l		; 8F 02 40 8F ; Store accumulator (long) $8F4002.l [Reads: Accumulator]
	asl $B055.w		; 0E 55 B0 ; Arithmetic shift left $B055.w [Flags: ZNC]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $CF64C1.l		; 5C C1 64 CF ; Jump long to $CF64C1.l [Flow: jump]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($7EC3.w,X)		; FC C3 7E ; Jump to subroutine indirect indexed ($7EC3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $62.b		; 85 62 ; Store accumulator to $62.b [Reads: Accumulator]
	sbc $42F7.w,X		; FD F7 42 ; Subtract with carry $42F7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($0176.w)		; 6C 76 01 ; Jump indirect to ($0176.w) [Flow: jump]
	sbc $4677.w,X		; FD 77 46 ; Subtract with carry $4677.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $5C1059.l		; 5C 59 10 5C ; Jump long to $5C1059.l [Flow: jump]
	eor $437862.l,X		; 5F 62 78 43 ; Exclusive OR accumulator with memory (long,X) $437862.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $90,$03		; 44 03 90 ; Move block positive $90,$03 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $FE62.w,Y		; 39 62 FE ; AND accumulator with memory $FE62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $82		; 42 82 ; Reserved instruction
	adc ($2A.b,X)		; 61 2A ; Add with carry ($2A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $86		; 42 86 ; Reserved instruction
	.db $50, $21		; 50 21 ; Branch if overflow clear to $50, $21 [Flow: branch]
	.db $62, $FD, $41		; 62 FD 41 ; Push effective relative address $62, $FD, $41 [Writes: Stack Pointer]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$0E20.w		; A9 20 0E ; Load #$0E20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $ACA961.l		; 22 61 A9 AC ; Jump to subroutine long $ACA961.l [Writes: Stack Pointer] [Flow: call]
	ora $4AC2.w		; 0D C2 4A ; Logical OR $4AC2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($A9.b,X)		; 61 A9 ; Add with carry ($A9.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda ($61.b,S),Y		; B3 61 ; Load accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $81AE.w,X		; FE AE 81 ; Increment memory $81AE.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	.db $10, $D0		; 10 D0 ; Branch if plus to $10, $D0 [Flow: branch]
	ora ($0F.b)		; 12 0F ; OR accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $33.b,S		; E3 33 ; Subtract stack-relative $33.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $62, $E1, $AA		; 62 E1 AA ; Push effective relative address $62, $E1, $AA [Writes: Stack Pointer]
	.db $62, $31, $70		; 62 31 70 ; Push effective relative address $62, $31, $70 [Writes: Stack Pointer]
	cmp $9168.w,X		; DD 68 91 ; Compare accumulator $9168.w,X [Reads: X Index] [Flags: ZNC]
	cmp $E1FC.w,X		; DD FC E1 ; Compare accumulator $E1FC.w,X [Reads: X Index] [Flags: ZNC]
	and $E1FE.w,Y		; 39 FE E1 ; AND accumulator with memory $E1FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $5820.w,Y		; 39 20 58 ; AND accumulator with memory $5820.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	eor $2027.w,Y		; 59 27 20 ; Exclusive OR accumulator with memory $2027.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $2C6A.w,X		; 5D 6A 2C ; Exclusive OR accumulator with memory $2C6A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $206B.w,X		; 5D 6B 20 ; Exclusive OR accumulator with memory $206B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $28.b		; 65 28 ; Add $28.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $C236.w,X		; 3C 36 C2 ; Test bits $C236.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $2735.w,X		; 3C 35 27 ; Test bits $2735.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $2865.w,X		; 3C 65 28 ; Test bits $2865.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rol $6A3A.w,X		; 3E 3A 6A ; Rotate left $6A3A.w,X [Reads: X Index] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $34.b		; 84 34 ; Store Y register to $34.b [Reads: Y Index]
.INDEX 16
	rep #$50		; C2 50
	.db $80, $C2		; 80 C2 ; Branch always to $80, $C2 [Flow: branch]
	adc ($B1.b,X)		; 61 B1 ; Add with carry ($B1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
.INDEX 16
	rep #$B4		; C2 B4
	clv		; B8 ; Clear overflow flag [Flags: V]
.INDEX 16
	rep #$D4		; C2 D4
	clv		; B8 ; Clear overflow flag [Flags: V]
	rep #$84		; C2 84 ; Reset processor status bits #$84 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and $27.b,X		; 35 27 ; Logical AND $27.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $41.b		; 84 41 ; Store Y register to $41.b [Reads: Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sty $39.b		; 84 39 ; Store Y register to $39.b [Reads: Y Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $39		; 90 39 ; Branch if carry clear to $90, $39 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $81		; 50 81 ; Branch if overflow clear to $50, $81 [Flow: branch]
	and [$50.b]		; 27 50 ; AND accumulator with memory (long) [$50.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $5028.w		; 8D 28 50 ; Store accumulator to $5028.w [Reads: Accumulator]
	sta $6A.b		; 85 6A ; Store accumulator to $6A.b [Reads: Accumulator]
	jmp $616B85.l		; 5C 85 6B 61 ; Jump long to $616B85.l [Flow: jump]
	lda ($27.b),Y		; B1 27 ; Load accumulator ($27.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($CD.b,X)		; 61 CD ; Add with carry ($CD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($B5.b,X)		; 61 B5 ; Add with carry ($B5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $6BB5.w,X		; 7D B5 6B ; Add $6BB5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $BA.b,X		; B4 BA ; Load Y register $BA.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	and [$B4.b]		; 27 B4 ; AND accumulator with memory (long) [$B4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $28.b		; C6 28 ; Decrement $28.b [Reads: Direct Page] [Flags: ZN]
	ldy $BD.b,X		; B4 BD ; Load Y register $BD.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy $BD.b		; C4 BD ; Compare $BD.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	and [$D0.b]		; 27 D0 ; AND accumulator with memory (long) [$D0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $28.b		; C6 28 ; Decrement $28.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $BD		; D0 BD ; Branch if not equal to $D0, $BD [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpx #$6BBD.w		; E0 BD 6B ; Compare #$6BBD.w with X register [Reads: X Index] [Flags: ZNC]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$8308.w		; C0 08 83 ; Compare #$8308.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($40.b,X)		; A1 40 ; Load accumulator ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$03A1.w		; A0 A1 03 ; Load #$03A1.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $DD03C0.l,X		; 9F C0 03 DD ; Store accumulator (long,X) $DD03C0.l,X [Reads: Accumulator, X Index]
	cpy #$B335.w		; C0 35 B3 ; Compare #$B335.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$DD43.w		; C0 43 DD ; Compare #$DD43.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$00F0.w		; C0 F0 00 ; Compare #$00F0.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pei ($13.b)		; D4 13 ; Push effective indirect address ($13.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldx #$F7D4.w		; A2 D4 F7 ; Load #$F7D4.w into X register [Writes: X Index] [Flags: ZN]
	lda $A8.b,S		; A3 A8 ; Load accumulator (stack relative) $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $A1.b,X		; 35 A1 ; Logical AND $A1.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta $63A0.w,Y		; 99 A0 63 ; Store accumulator to $63A0.w,Y [Reads: Accumulator, Y Index]
	ora #$81C0.w		; 09 C0 81 ; Logical OR #$81C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A0C0.w,X		; DD C0 A0 ; Compare accumulator $A0C0.w,X [Reads: X Index] [Flags: ZNC]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($A35C.w)		; 6C 5C A3 ; Jump indirect to ($A35C.w) [Flow: jump]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($C0.b),Y		; 51 C0 ; Exclusive OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($C060.w)		; 6C 60 C0 ; Jump indirect to ($C060.w) [Flow: jump]
	ror $006E.w		; 6E 6E 00 ; Rotate right $006E.w [Flags: ZNC]
	lda ($4B.b,X)		; A1 4B ; Load accumulator ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$778C.w		; C0 8C 77 ; Compare #$778C.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$88A1.w		; C0 A1 88 ; Compare #$88A1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$B68C.w		; C0 8C B6 ; Compare #$B68C.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$759B.w		; C0 9B 75 ; Compare #$759B.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $14E1FF.l,X		; FF FF E1 14 ; Subtract with carry (long,X) $14E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0125.w,X)		; FC 25 01 ; Jump to subroutine indirect indexed ($0125.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($0585.w,X)		; FC 85 05 ; Jump to subroutine indirect indexed ($0585.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr $6161.w		; 20 61 61 ; Jump to subroutine at $6161.w [Writes: Stack Pointer] [Flow: call]
	jsr ($8186.w,X)		; FC 86 81 ; Jump to subroutine indirect indexed ($8186.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8346.w,X		; FD 46 83 ; Subtract with carry $8346.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $61		; 50 61 ; Branch if overflow clear to $50, $61 [Flow: branch]
	.db $62, $FD, $45		; 62 FD 45 ; Push effective relative address $62, $FD, $45 [Writes: Stack Pointer]
	ora [$60.b]		; 07 60 ; OR accumulator with memory (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $03A5.w,X		; FD A5 03 ; Subtract with carry $03A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $00A1.w,X		; FE A1 00 ; Increment memory $00A1.w,X [Reads: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: ZN]
	sbc $CA0221.l,X		; FF 21 02 CA ; Subtract with carry (long,X) $CA0221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FC8326.l,X		; FF 26 83 FC ; Subtract with carry (long,X) $FC8326.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$2900.w		; A9 00 29 ; Load #$2900.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$FC61.w		; A2 61 FC ; Load #$FC61.w into X register [Writes: X Index] [Flags: ZN]
	lda $3A01.w		; AD 01 3A ; Load $3A01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($02.b,S),Y		; D3 02 ; Compare accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	.db $90, $D0		; 90 D0 ; Branch if carry clear to $90, $D0 [Flow: branch]
	asl $49FE.w		; 0E FE 49 ; Arithmetic shift left $49FE.w [Flags: ZNC]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $844B.w,X		; FE 4B 84 ; Increment memory $844B.w,X [Reads: X Index] [Flags: ZN]
	eor $01BB.w,Y		; 59 BB 01 ; Exclusive OR accumulator with memory $01BB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $862B.w,X		; FD 2B 86 ; Subtract with carry $862B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0229.w,X		; FD 29 02 ; Subtract with carry $0229.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $3D.b,X		; 34 3D ; Test bits $3D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $3D.b,X		; 34 3D ; Test bits $3D.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $3337.w		; 20 37 33 ; Jump to subroutine at $3337.w [Writes: Stack Pointer] [Flow: call]
	ora $1F3432.l,X		; 1F 32 34 1F ; Logical OR long $1F3432.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $34.b		; 46 34 ; Logical shift right $34.b [Reads: Direct Page] [Flags: ZNC]
	lda $F922.w,Y		; B9 22 F9 ; Load $F922.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($22.b,X)		; C1 22 ; Compare accumulator ($22.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $43BB.w,Y		; F9 BB 43 ; Subtract with carry $43BB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $A23869.l,X		; FF 69 38 A2 ; Subtract with carry (long,X) $A23869.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$CADD.w		; C0 DD CA ; Compare #$CADD.w with Y register [Reads: Y Index] [Flags: ZNC]
.INDEX 16
	rep #$DD		; C2 DD
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora ($61.b,X)		; 01 61 ; Logical OR ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$6161.w		; C0 61 61 ; Compare #$6161.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$1389.w		; C0 89 13 ; Compare #$1389.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5289.w		; C0 89 52 ; Compare #$5289.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$13D9.w		; C0 D9 13 ; Compare #$13D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$52D9.w		; C0 D9 52 ; Compare #$52D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9309.w		; C0 09 93 ; Compare #$9309.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D209.w		; C0 09 D2 ; Compare #$D209.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E12B.w		; C0 2B E1 ; Compare #$E12B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E162.w		; C0 62 E1 ; Compare #$E162.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E590.w		; C0 90 E5 ; Compare #$E590.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($5A.b,X)		; A1 5A ; Load accumulator ($5A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$9189.w		; C0 89 91 ; Compare #$9189.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $2E80.w		; 2E 80 2E ; Rotate left $2E80.w [Flags: ZNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $1481FF.l,X		; FF FF 81 14 ; Subtract with carry (long,X) $1481FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $66D8.w		; 0E D8 66 ; Arithmetic shift left $66D8.w [Flags: ZNC]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($E8.b,X)		; 61 E8 ; Add with carry ($E8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $62, $FC, $A9		; 62 FC A9 ; Push effective relative address $62, $FC, $A9 [Writes: Stack Pointer]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($81AB.w,X)		; FC AB 81 ; Jump to subroutine indirect indexed ($81AB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $02BA.w,Y		; 39 BA 02 ; AND accumulator with memory $02BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $85AB.w,X		; FD AB 85 ; Subtract with carry $85AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$61C8.w		; 69 C8 61 ; Add #$61C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $81AE.w,X		; FD AE 81 ; Subtract with carry $81AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $832E.w,X		; FE 2E 83 ; Increment memory $832E.w,X [Reads: X Index] [Flags: ZN]
	bit #$62C8.w		; 89 C8 62 ; Test bits #$62C8.w with accumulator [Reads: Accumulator] [Flags: Z]
	inc $872B.w,X		; FE 2B 87 ; Increment memory $872B.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	adc #$FE00.w		; 69 00 FE ; Add #$FE00.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $69.b		; 04 69 ; Test and set bits $69.b [Reads: Accumulator] [Flags: Z]
	ldx #$FD01.w		; A2 01 FD ; Load #$FD01.w into X register [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $FD.b		; 06 FD ; Arithmetic shift left $FD.b [Reads: Direct Page] [Flags: ZNC]
	adc #$FC02.w		; 69 02 FC ; Add #$FC02.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc #$FF38.w		; E9 38 FF ; Subtract #$FF38.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc #$A439.w		; 69 39 A4 ; Add #$A439.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($C3.b,X)		; A1 C3 ; Load accumulator ($C3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A4C2AC.l		; AF AC C2 A4 ; Load long $A4C2AC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $A527.w,X		; 9D 27 A5 ; Store accumulator to $A527.w,X [Reads: Accumulator, X Index]
	lda ($6A.b,X)		; A1 6A ; Load accumulator ($6A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$BB.b]		; A7 BB ; Load accumulator (long) [$BB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $B0, $A2		; B0 A2 ; Branch if carry set to $B0, $A2 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($AC.b,S),Y		; B3 AC ; Load accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B1E8.w		; 2D E8 B1 ; Logical AND $B1E8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $F922.w,Y		; 99 22 F9 ; Store accumulator to $F922.w,Y [Reads: Accumulator, Y Index]
	lda ($22.b),Y		; B1 22 ; Load accumulator ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $22C9.w,Y		; F9 C9 22 ; Subtract with carry $22C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $22E1.w,Y		; F9 E1 22 ; Subtract with carry $22E1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2AB9.w,Y		; F9 B9 2A ; Subtract with carry $2AB9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4398.w,Y		; F9 98 43 ; Subtract with carry $4398.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda ($38.b,S),Y		; B3 38 ; Load accumulator (stack relative indirect indexed) ($38.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $42D8.w,X		; DD D8 42 ; Compare accumulator $42D8.w,X [Reads: X Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $77DCA1.l,X		; 5F A1 DC 77 ; Exclusive OR accumulator with memory (long,X) $77DCA1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $09.b,S		; A3 09 ; Load accumulator (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$CA49.w		; C0 49 CA ; Compare #$CA49.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CA9B.w		; C0 9B CA ; Compare #$CA9B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CAD9.w		; C0 D9 CA ; Compare #$CAD9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$906A.w		; C0 6A 90 ; Compare #$906A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	adc ($0E.b),Y		; 71 0E ; Add with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1451FF.l,X		; FF FF 51 14 ; Subtract with carry (long,X) $1451FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0089.w,X)		; FC 89 00 ; Jump to subroutine indirect indexed ($0089.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($A0.b,X)		; 21 A0 ; Logical AND ($A0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $3101.w		; 8C 01 31 ; Store Y register to $3101.w [Reads: Y Index]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $056C.w,X		; FD 6C 05 ; Subtract with carry $056C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp ($61.b,S),Y		; D3 61 ; Compare accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc $816E.w,X		; FD 6E 81 ; Subtract with carry $816E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0269.w,X		; FE 69 02 ; Increment memory $0269.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $836E.w,X		; FE 6E 83 ; Increment memory $836E.w,X [Reads: X Index] [Flags: ZN]
	jsr ($C8B9.w,X)		; FC B9 C8 ; Jump to subroutine indirect indexed ($C8B9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol $039D.w,X		; 3E 9D 03 ; Rotate left $039D.w,X [Reads: X Index] [Flags: ZNC]
	inc $CA39.w,X		; FE 39 CA ; Increment memory $CA39.w,X [Reads: X Index] [Flags: ZN]
	bit $63AC.w		; 2C AC 63 ; Test bits $63AC.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsr ($49BB.w,X)		; FC BB 49 ; Jump to subroutine indirect indexed ($49BB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $04B4.w,X		; [PATTERN: Memory clearing operation] 3D B4 04 ; AND accumulator with memory $04B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $4D9B.w,X		; FD 9B 4D ; Subtract with carry $4D9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $C4.b		; 64 C4 ; Store zero to $C4.b
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $8C89.w		; 9C 89 8C ; Store zero to $8C89.w
	lda $3CFE64.l		; AF 64 FE 3C ; Load long $3CFE64.l into accumulator [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stz $CA.b,X		; 74 CA ; Store zero to $CA.b,X [Reads: X Index]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	wai		; CB ; Wait for interrupt
	sbc $D964.w,Y		; F9 64 D9 ; Subtract with carry $D964.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $22D988.l		; 22 88 D9 22 ; Jump to subroutine long $22D988.l [Writes: Stack Pointer] [Flow: call]
	ora ($93.b,X)		; 01 93 ; Logical OR ($93.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$D20B.w		; C0 0B D2 ; Compare #$D20B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D248.w		; C0 48 D2 ; Compare #$D248.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$93AB.w		; C0 AB 93 ; Compare #$93AB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2AB.w		; C0 AB D2 ; Compare #$D2AB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$93E8.w		; C0 E8 93 ; Compare #$93E8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2E8.w		; C0 E8 D2 ; Compare #$D2E8.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsr ($FBE9.w,X)		; FC E9 FB ; Jump to subroutine indirect indexed ($FBE9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $9D2FFF.l,X		; FF FF 2F 9D ; Subtract with carry (long,X) $9D2FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: ZN]
	ldy $C6.b,X		; B4 C6 ; Load Y register $C6.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ror $C69E.w		; 6E 9E C6 ; Rotate right $C69E.w [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $F0C6.w,Y		; B9 C6 F0 ; Load $F0C6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0E71.l,X		; FF 71 0E FF ; Subtract with carry (long,X) $FF0E71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE0481.l,X		; FF 81 04 FE ; Subtract with carry (long,X) $FE0481.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $84A3.w,X		; FE A3 84 ; Increment memory $84A3.w,X [Reads: X Index] [Flags: ZN]
	ldy #$0139.w		; A0 39 01 ; Load #$0139.w into Y register [Writes: Y Index] [Flags: ZN]
	sta ($6C.b),Y		; 91 6C ; Store accumulator ($6C.b),Y [Reads: Accumulator, Direct Page, Y Index]
	asl $4791.w		; 0E 91 47 ; Arithmetic shift left $4791.w [Flags: ZNC]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta [$61.b],Y		; 97 61 ; Store accumulator (long indexed) [$61.b],Y [Reads: Accumulator, Direct Page, Y Index]
	inc $81AE.w,X		; FE AE 81 ; Increment memory $81AE.w,X [Reads: X Index] [Flags: ZN]
	sbc $CB0221.l,X		; FF 21 02 CB ; Subtract with carry (long,X) $CB0221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $2E		; 62 FF 2E ; Push effective relative address $62, $FF, $2E [Writes: Stack Pointer]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $A448.w		; AD 48 A4 ; Load $A448.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $A7FA47.l,X		; 9F 47 FA A7 ; Store accumulator (long,X) $A7FA47.l,X [Reads: Accumulator, X Index]
	eor [$FA.b]		; 47 FA ; Exclusive OR accumulator with memory (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($73.b,S),Y		; B3 73 ; Load accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc ($FA.b,S),Y		; 73 FA ; Add with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $73.b,S		; C3 73 ; Compare accumulator (stack relative) $73.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldy $89.b		; A4 89 ; Load $89.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$0088.w		; C0 88 00 ; Compare #$0088.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $82		; 90 82 ; Branch if carry clear to $90, $82 [Flow: branch]
	lda ($89.b,X)		; A1 89 ; Load accumulator ($89.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$D989.w		; C0 89 D9 ; Compare #$D989.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$13D9.w		; C0 D9 13 ; Compare #$13D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$53D9.w		; C0 D9 53 ; Compare #$53D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$93D9.w		; C0 D9 93 ; Compare #$93D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2D9.w		; C0 D9 D2 ; Compare #$D2D9.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $00A1.w,X		; FE A1 00 ; Increment memory $00A1.w,X [Reads: X Index] [Flags: ZN]
	sta ($54.b),Y		; 91 54 ; Store accumulator ($54.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora $20A9.w		; 0D A9 20 ; Logical OR $20A9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($6A.b,X)		; 61 6A ; Add with carry ($6A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $0D.b		; C4 0D ; Compare $0D.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sta ($59.b)		; 92 59 ; Store accumulator (indirect) ($59.b) [Reads: Accumulator, Direct Page]
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $FE81.w		; AE 81 FE ; Load $FE81.w into X register [Writes: X Index] [Flags: ZN]
	rol $8883.w		; 2E 83 88 ; Rotate left $8883.w [Flags: ZNC]
	dec $10.b,X		; D6 10 ; Decrement memory $10.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $A8, $BA		; 62 A8 BA ; Push effective relative address $62, $A8, $BA [Writes: Stack Pointer]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $BA.b,S		; 83 BA ; Store accumulator (stack relative) $BA.b,S [Reads: Accumulator, Stack Pointer]
	stz $B810.w		; 9C 10 B8 ; Store zero to $B810.w
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F30.w		; C9 30 0F ; Compare #$0F30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc ($58.b,X)		; E1 58 ; Subtract with carry ($58.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $C9, $20		; 62 C9 20 ; Push effective relative address $62, $C9, $20 [Writes: Stack Pointer]
	.db $62, $FF, $21		; 62 FF 21 ; Push effective relative address $62, $FF, $21 [Writes: Stack Pointer]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $A460.w		; 9C 60 A4 ; Store zero to $A460.w
	pei ($60.b)		; D4 60 ; Push effective indirect address ($60.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $13.b		; A4 13 ; Load $13.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($13.b,S),Y		; 53 13 ; XOR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$1289.w		; C0 89 12 ; Compare #$1289.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4190.w		; C0 90 41 ; Compare #$4190.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$5313.w		; A0 13 53 ; Load #$5313.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$5353.w		; C0 53 53 ; Compare #$5353.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9313.w		; C0 13 93 ; Compare #$9313.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D213.w		; C0 13 D2 ; Compare #$D213.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A169.w		; C0 69 A1 ; Compare #$A169.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$9053.w		; A0 53 90 ; Load #$9053.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$A349.w		; C0 49 A3 ; Compare #$A349.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E149.w		; C0 49 E1 ; Compare #$E149.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D49C.w		; C0 9C D4 ; Compare #$D49C.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $9B.b,S		; A3 9B ; Load accumulator (stack relative) $9B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $AFC0.w,Y		; D9 C0 AF ; Compare accumulator $AFC0.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp #$CAC0.w		; C9 C0 CA ; Compare #$CAC0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C0.b,S		; A3 C0 ; Load accumulator (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $C0D9.w,Y		; D9 D9 C0 ; Compare accumulator $C0D9.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $A39D.w		; CD 9D A3 ; Compare $A39D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jmp.w [$A241]		; DC 41 A2 ; Jump long indirect [$A241] [Flow: jump]
	cmp $C012.w,Y		; D9 12 C0 ; Compare accumulator $C012.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc ($40.b,S),Y		; F3 40 ; Subtract with carry (stack relative indirect indexed) ($40.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($0E.b),Y		; 71 0E ; Add with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C81FF.l,X		; FF FF 81 1C ; Subtract with carry (long,X) $1C81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$0D34.w		; 09 34 0D ; Logical OR #$0D34.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc ($09.b,X)		; 61 09 ; Add with carry ($09.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$080E.w		; C0 0E 08 ; Compare #$080E.w with Y register [Reads: Y Index] [Flags: ZNC]
.ACCU 16
	rep #$61		; C2 61
	sbc $C8832E.l,X		; FF 2E 83 C8 ; Subtract with carry (long,X) $C8832E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($62.b,X)		; E1 62 ; Subtract with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $D3.b,X		; B4 D3 ; Load Y register $D3.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2002.w		; 2D 02 20 ; Logical AND $2002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0F.b,X		; B5 0F ; Load $0F.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2001D3.l,X		; 3F D3 01 20 ; AND accumulator with memory (long,X) $2001D3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($10.b,X)		; 41 10 ; Exclusive OR accumulator with memory ($10.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $47.b,S		; 23 47 ; AND accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $62, $20, $BD		; 62 20 BD ; Push effective relative address $62, $20, $BD [Writes: Stack Pointer]
	.db $62, $3F, $2B		; 62 3F 2B ; Push effective relative address $62, $3F, $2B [Writes: Stack Pointer]
	cop $D1.b		; 02 D1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	cmp ($A4.b),Y		; D1 A4 ; Compare accumulator ($A4.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $10, $EA		; 10 EA ; Branch if plus to $10, $EA [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $62, $B4, $2A		; 62 B4 2A ; Push effective relative address $62, $B4, $2A [Writes: Stack Pointer]
	cop $C4.b		; 02 C4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$C40E.w		; 29 0E C4 ; Logical AND #$C40E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $D20D.w		; 8D 0D D2 ; Store accumulator to $D20D.w [Reads: Accumulator]
	mvp $73,$61		; 44 61 73 ; Move block positive $73,$61 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cop $49.b		; 02 49 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	sbc $0025.w,X		; FD 25 00 ; Subtract with carry $0025.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$6162.w		; 49 62 61 ; Exclusive OR #$6162.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $02A5.w,X		; FE A5 02 ; Increment memory $02A5.w,X [Reads: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $83A6.w,X		; FE A6 83 ; Increment memory $83A6.w,X [Reads: X Index] [Flags: ZN]
	adc ($6B.b),Y		; 71 6B ; Add with carry ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $60.b		; 02 60 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0F.b,X		; 75 0F ; Add $0F.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8786.w,X		; FD 86 87 ; Subtract with carry $8786.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $6062.w,X		; [PATTERN: Memory clearing operation] 7D 62 60 ; Add $6062.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7E62.w,Y		; 79 62 7E ; Add $7E62.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($01.b),Y		; 91 01 ; Store accumulator ($01.b),Y [Reads: Accumulator, Direct Page, Y Index]
	stz $C25C.w		; 9C 5C C2 ; Store zero to $C25C.w
	stz $275D.w		; 9C 5D 27 ; Store zero to $275D.w
	stz $2869.w		; [PATTERN: Memory clearing operation] 9C 69 28 ; Store zero to $2869.w
	stz $6A61.w		; 9C 61 6A ; Store zero to $6A61.w
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora #$A011.w		; 09 11 A0 ; Logical OR #$A011.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$A1D5.w		; 09 D5 A1 ; Logical OR #$A1D5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $11.b,X		; D5 11 ; Compare accumulator $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldx #$B5D5.w		; A2 D5 B5 ; Load #$B5D5.w into X register [Writes: X Index] [Flags: ZN]
	lda $D9.b,S		; A3 D9 ; Load accumulator (stack relative) $D9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$C030.w		; C0 30 C0 ; Compare #$C030.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx #$B973.w		; A2 73 B9 ; Load #$B973.w into X register [Writes: X Index] [Flags: ZN]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$5BC0.w		; C0 C0 5B ; Compare #$5BC0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$49C0.w		; C0 C0 49 ; Compare #$49C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $A1.b,X		; 95 A1 ; Store accumulator to $A1.b,X [Reads: Accumulator, X Index]
	eor ($B1.b,X)		; 41 B1 ; Exclusive OR accumulator with memory ($B1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$BA60.w		; C0 60 BA ; Compare #$BA60.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $43,$A3		; 44 A3 43 ; Move block positive $43,$A3 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	cpy #$8330.w		; C0 30 83 ; Compare #$8330.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$38C0.w		; C0 C0 38 ; Compare #$38C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($C0.b,X)		; A1 C0 ; Load accumulator ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $A0		; 80 A0 ; Branch always to $80, $A0 [Flow: branch]
	cmp #$604B.w		; C9 4B 60 ; Compare #$604B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cpy #$3B4B.w		; C0 4B 3B ; Compare #$3B4B.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$4083.w		; C0 83 40 ; Compare #$4083.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$8070.w		; C0 70 80 ; Compare #$8070.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldx #$7972.w		; A2 72 79 ; Load #$7972.w into X register [Writes: X Index] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $1CE5FF.l,X		; FF FF E5 1C ; Subtract with carry (long,X) $1CE5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $C004.w,X		; FE 04 C0 ; Increment memory $C004.w,X [Reads: X Index] [Flags: ZN]
	sta ($BA.b,X)		; 81 BA ; Store accumulator ($BA.b,X) [Reads: Accumulator, X Index, Direct Page]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp ($E4.b),Y		; D1 E4 ; Compare accumulator ($E4.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	tsb $C180.w		; 0C 80 C1 ; Test and set bits $C180.w [Reads: Accumulator] [Flags: Z]
	adc ($83.b,X)		; 61 83 ; Add with carry ($83.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $E861.w,X		; 5D 61 E8 ; Exclusive OR accumulator with memory $E861.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$62		; C2 62
	sbc $92C2A4.l,X		; FF A4 C2 92 ; Subtract with carry (long,X) $92C2A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $37FE01.l		; 4F 01 FE 37 ; Exclusive OR accumulator with memory (long) $37FE01.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $9D0C17.l,X		; FF 17 0C 9D ; Subtract with carry (long,X) $9D0C17.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	sbc $C48815.l,X		; FF 15 88 C4 ; Subtract with carry (long,X) $C48815.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc $D4.b,S		; 63 D4 ; Add with carry (stack relative) $D4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $8A.b,X		; 75 8A ; Add $8A.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	trb $BB8C.w		; 1C 8C BB ; Test and reset bits $BB8C.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $DF		; B0 DF ; Branch if carry set to $B0, $DF [Flow: branch]
	tsb $8E.b		; 04 8E ; Test and set bits $8E.b [Reads: Accumulator] [Flags: Z]
	.db $80, $63		; 80 63 ; Branch always to $80, $63 [Flow: branch]
	cmp $8C6468.l,X		; DF 68 64 8C ; Compare accumulator (long,X) $8C6468.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	jmp ($C022.w)		; 6C 22 C0 ; Jump indirect to ($C022.w) [Flow: jump]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc #$A1B1.w		; 69 B1 A1 ; Add #$A1B1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $62B1.w,X		; DD B1 62 ; Compare accumulator $62B1.w,X [Reads: X Index] [Flags: ZNC]
	sbc $A1FC.w,Y		; F9 FC A1 ; Subtract with carry $A1FC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0B.b)		; 72 0B ; Add with carry (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor $13.b,S		; 43 13 ; Exclusive OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$5343.w		; C0 43 53 ; Compare #$5343.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9343.w		; C0 43 93 ; Compare #$9343.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D243.w		; C0 43 D2 ; Compare #$D243.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CF81.w		; C0 81 CF ; Compare #$CF81.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($D5.b,X)		; A1 D5 ; Load accumulator ($D5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $A3.b,X		; F5 A3 ; Subtract $A3.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b,S		; 83 0F ; Store accumulator (stack relative) $0F.b,S [Reads: Accumulator, Stack Pointer]
	cpy #$0FC3.w		; C0 C3 0F ; Compare #$0FC3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($10.b),Y		; B1 10 ; Load accumulator ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp [$0D.b],Y		; D7 0D ; Compare accumulator (long indexed) [$0D.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ror $0D83.w,X		; 7E 83 0D ; Rotate right $0D83.w,X [Reads: X Index] [Flags: ZNC]
	lda ($22.b),Y		; B1 22 ; Load accumulator ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc ($20.b,X)		; E1 20 ; Subtract with carry ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $E8.b		; C4 E8 ; Compare $E8.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $2810.w		; 4C 10 28 ; Jump to $2810.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $5381.w		; AE 81 53 ; Load $5381.w into X register [Writes: X Index] [Flags: ZN]
	sbc [$10.b]		; E7 10 ; Subtract with carry (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $93.b		; A5 93 ; Load $93.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	.db $50, $62		; 50 62 ; Branch if overflow clear to $50, $62 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ldy #$517A.w		; A0 7A 51 ; Load #$517A.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$130B.w		; A0 0B 13 ; Load #$130B.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$134B.w		; C0 4B 13 ; Compare #$134B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$1382.w		; C0 82 13 ; Compare #$1382.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$530B.w		; C0 0B 53 ; Compare #$530B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4B4A.w		; C0 4A 4B ; Compare #$4B4A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9309.w		; C0 09 93 ; Compare #$9309.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D209.w		; C0 09 D2 ; Compare #$D209.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$F757.w		; C0 57 F7 ; Compare #$F757.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $A6.b,S		; A3 A6 ; Load accumulator (stack relative) $A6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b		; A5 A3 ; Load $A3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $AB.b,S		; A3 AB ; Load accumulator (stack relative) $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$E8A3.w		; C0 A3 E8 ; Compare #$E8A3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$4DDC.w		; C0 DC 4D ; Compare #$4DDC.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $F0.b,S		; A3 F0 ; Load accumulator (stack relative) $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $C053.w,Y		; D9 53 C0 ; Compare accumulator $C053.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $C093.w,Y		; D9 93 C0 ; Compare accumulator $C093.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $C0D2.w,Y		; D9 D2 C0 ; Compare accumulator $C0D2.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C51FF.l,X		; FF FF 51 1C ; Subtract with carry (long,X) $1C51FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($8522.w,X)		; FC 22 85 ; Jump to subroutine indirect indexed ($8522.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($02.b,X)		; A1 02 ; Load accumulator ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $A6FD62.l		; 22 62 FD A6 ; Jump to subroutine long $A6FD62.l [Writes: Stack Pointer] [Flow: call]
	dec $FC.b		; C6 FC ; Decrement $FC.b [Reads: Direct Page] [Flags: ZN]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $032F.w,X		; 3C 2F 03 ; Test bits $032F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $CA72.w,X		; FD 72 CA ; Subtract with carry $CA72.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $633E.w		; 2D 3E 63 ; Logical AND $633E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $643E.w,X		; 5D 3E 64 ; Exclusive OR accumulator with memory $643E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($94C6.w,X)		; FC C6 94 ; Jump to subroutine indirect indexed ($94C6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $9666.w,X		; FD 66 96 ; Subtract with carry $9666.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $639E.w		; 2C 9E 63 ; Test bits $639E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsr ($0CBB.w,X)		; FC BB 0C ; Jump to subroutine indirect indexed ($0CBB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$0AC0.w		; 09 C0 0A ; Logical OR #$0AC0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($E4.b),Y		; 51 E4 ; Exclusive OR accumulator with memory ($E4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $BB08.w		; 0C 08 BB ; Test and set bits $BB08.w [Reads: Accumulator] [Flags: Z]
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$FD62.w		; A2 62 FD ; Load #$FD62.w into X register [Writes: X Index] [Flags: ZN]
	lda #$1447.w		; A9 47 14 ; Load #$1447.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($1A.b,X)		; C1 1A ; Compare accumulator ($1A.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $50, $D9		; 50 D9 ; Branch if overflow clear to $50, $D9 [Flow: branch]
	trb $DF30.w		; 1C 30 DF ; Test and reset bits $DF30.w [Reads: Accumulator] [Flags: Z]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $B0.b		; 24 B0 ; Test bits $B0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($63.b,X)		; C1 63 ; Compare accumulator ($63.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	jmp $5D64C8.l		; 5C C8 64 5D ; Jump long to $5D64C8.l [Flow: jump]
	sta $FC64.w,X		; 9D 64 FC ; Store accumulator to $FC64.w,X [Reads: Accumulator, X Index]
	cmp #$FDD5.w		; C9 D5 FD ; Compare #$FDD5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc #$2CD7.w		; 69 D7 2C ; Add #$2CD7.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $2F.b,X		; 76 2F ; Rotate right $2F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $3096.w		; 2C 96 30 ; Test bits $3096.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $AE.b		; 14 AE ; Test and reset bits $AE.b [Reads: Accumulator] [Flags: Z]
	jsl $699728.l		; 22 28 97 69 ; Jump to subroutine long $699728.l [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sta $22.b,X		; 95 22 ; Store accumulator to $22.b,X [Reads: Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	adc $2B22.w,Y		; 79 22 2B ; Add $2B22.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $632869.l,X		; 1F 69 28 63 ; Logical OR long $632869.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$2928.w		; 69 28 29 ; Add #$2928.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $222958.l		; 22 58 29 22 ; Jump to subroutine long $222958.l [Writes: Stack Pointer] [Flow: call]
	jsr ($38E1.w,X)		; FC E1 38 ; Jump to subroutine indirect indexed ($38E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F122.w,X		; FD 22 F1 ; Subtract with carry $F122.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$A1D5.w		; 09 D5 A1 ; Logical OR #$A1D5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $F5.b,X		; 55 F5 ; Exclusive OR accumulator with memory $F5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $78.b,S		; A3 78 ; Load accumulator (stack relative) $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $8801.w		; 6E 01 88 ; Rotate right $8801.w [Flags: ZNC]
	.db $62, $61, $FE		; 62 61 FE ; Push effective relative address $62, $61, $FE [Writes: Stack Pointer]
	rol $C4.b		; 26 C4 ; Rotate left $C4.b [Reads: Direct Page] [Flags: ZNC]
	inc $0025.w,X		; FE 25 00 ; Increment memory $0025.w,X [Reads: X Index] [Flags: ZN]
	sta $0153.w,Y		; 99 53 01 ; Store accumulator to $0153.w,Y [Reads: Accumulator, Y Index]
	sbc $D10245.l,X		; FF 45 02 D1 ; Subtract with carry (long,X) $D10245.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7A4349.l,X		; [PATTERN: Memory clearing operation] FF 49 43 7A ; Subtract with carry (long,X) $7A4349.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$02.b],Y		; 97 02 ; Store accumulator (long indexed) [$02.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ldx #$C862.w		; A2 62 C8 ; Load #$C862.w into X register [Writes: X Index] [Flags: ZN]
	stz $3F62.w,X		; 9E 62 3F ; Store zero to $3F62.w,X [Reads: X Index]
	stz $7966.w,X		; 9E 66 79 ; Store zero to $7966.w,X [Reads: X Index]
	stz $4092.w,X		; 9E 92 40 ; Store zero to $4092.w,X [Reads: X Index]
	dec $7A66.w		; CE 66 7A ; Decrement $7A66.w [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $8360.w		; 0C 60 83 ; Test and set bits $8360.w [Reads: Accumulator] [Flags: Z]
	tsb $8B60.w		; 0C 60 8B ; Test and set bits $8B60.w [Reads: Accumulator] [Flags: Z]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($53.b,X)		; E1 53 ; Subtract with carry ($53.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$91E1.w		; C0 E1 91 ; Compare #$91E1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A77B.w		; C0 7B A7 ; Compare #$A77B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A7BB.w		; C0 BB A7 ; Compare #$A7BB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D97B.w		; C0 7B D9 ; Compare #$D97B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D9BB.w		; C0 BB D9 ; Compare #$D9BB.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($75.b),Y		; 31 75 ; AND accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($59.b,X)		; 61 59 ; Add with carry ($59.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,X		; 75 62 ; Add $62.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $EE		; 30 EE ; Branch if minus to $30, $EE [Flow: branch]
	adc ($40.b,X)		; 61 40 ; Add with carry ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $3D62.w		; EE 62 3D ; Increment $3D62.w [Flags: ZN]
	eor #$40DD.w		; 49 DD 40 ; Exclusive OR #$40DD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($DD.b),Y		; B1 DD ; Load accumulator ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $332FFF.l,X		; FF FF 2F 33 ; Subtract with carry (long,X) $332FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: ZN]
	stz $C6.b		; 64 C6 ; Store zero to $C6.b
	and $17C69E.l		; 2F 9E C6 17 ; AND accumulator with memory (long) $17C69E.l [Writes: Accumulator] [Flags: ZN]
	lda ($C6.b),Y		; B1 C6 ; Load accumulator ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C6C0.w		; 4D C0 C6 ; Exclusive OR $C6C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($CD.b),Y		; 31 CD ; AND accumulator with memory ($CD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $14.b		; C6 14 ; Decrement $14.b [Reads: Direct Page] [Flags: ZN]
	cmp ($AB.b,S),Y		; D3 AB ; Compare accumulator (stack relative indirect indexed) ($AB.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	.db $50, $D3		; 50 D3 ; Branch if overflow clear to $50, $D3 [Flow: branch]
	lda #$7235.w		; A9 35 72 ; Load #$7235.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($35.b),Y		; 31 35 ; AND accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $F032.w,X		; 9E 32 F0 ; Store zero to $F032.w,X [Reads: X Index]
	sbc $FF0491.l,X		; FF 91 04 FF ; Subtract with carry (long,X) $FF0491.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC1C81.l,X		; FF 81 1C FC ; Subtract with carry (long,X) $FC1C81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	jsl $A3FC61.l		; 22 61 FC A3 ; Jump to subroutine long $A3FC61.l [Writes: Stack Pointer] [Flow: call]
	ora ($39.b,X)		; 01 39 ; Logical OR ($39.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($02.b,S),Y		; 33 02 ; AND accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $05C3.w,X		; FD C3 05 ; Subtract with carry $05C3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $41		; 70 41 ; Branch if overflow set to $70, $41 [Flow: branch]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy $84.b		; C4 84 ; Compare $84.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor ($48.b),Y		; 51 48 ; Exclusive OR accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($01.b,S),Y		; 73 01 ; Add with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0067.w,X)		; FC 67 00 ; Jump to subroutine indirect indexed ($0067.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($61.b,X)		; 81 61 ; Store accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $50, $E4		; 50 E4 ; Branch if overflow clear to $50, $E4 [Flow: branch]
	.db $10, $5A		; 10 5A ; Branch if plus to $10, $5A [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $62, $FD, $67		; 62 FD 67 ; Push effective relative address $62, $FD, $67 [Writes: Stack Pointer]
	sta [$69.b]		; 87 69 ; Store accumulator (long) [$69.b] [Reads: Accumulator, Direct Page]
	adc $FE02.w,Y		; 79 02 FE ; Add $FE02.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$83.b]		; 47 83 ; Exclusive OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($23.b)		; 92 23 ; Store accumulator (indirect) ($23.b) [Reads: Accumulator, Direct Page]
	.db $62, $FE, $41		; 62 FE 41 ; Push effective relative address $62, $FE, $41 [Writes: Stack Pointer]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $C280.w,Y		; 39 80 C2 ; AND accumulator with memory $C280.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $277E.w,Y		; 39 7E 27 ; AND accumulator with memory $277E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $2892.w,Y		; 39 92 28 ; AND accumulator with memory $2892.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sta $6A.b,S		; 83 6A ; Store accumulator (stack relative) $6A.b,S [Reads: Accumulator, Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $6B.b,S		; 83 6B ; Store accumulator (stack relative) $6B.b,S [Reads: Accumulator, Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpy #$4212.w		; C0 12 42 ; Compare #$4212.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$412A.w		; C0 2A 41 ; Compare #$412A.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A3.b,X		; F5 A3 ; Subtract $A3.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $48F9.w		; 4C F9 48 ; Jump to $48F9.w [Flow: jump]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $C6FD.w,X		; DD FD C6 ; Compare accumulator $C6FD.w,X [Reads: X Index] [Flags: ZNC]
	jsr $06FE.w		; 20 FE 06 ; Jump to subroutine at $06FE.w [Writes: Stack Pointer] [Flow: call]
	jsr $8B6B.w		; 20 6B 8B ; Jump to subroutine at $8B6B.w [Writes: Stack Pointer] [Flow: call]
	cpy #$CA6B.w		; C0 6B CA ; Compare #$CA6B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$13A3.w		; C0 A3 13 ; Compare #$13A3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$53A3.w		; C0 A3 53 ; Compare #$53A3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$93A3.w		; C0 A3 93 ; Compare #$93A3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2A3.w		; C0 A3 D2 ; Compare #$D2A3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1CE5FF.l,X		; FF FF E5 1C ; Subtract with carry (long,X) $1CE5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $CF.b,S		; 23 CF ; AND accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$7B76.w		; 09 76 7B ; Logical OR #$7B76.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$34B8.w		; 09 B8 34 ; Logical OR #$34B8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$23D0.w		; 09 D0 23 ; Logical OR #$23D0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp ($61.b,S),Y		; D3 61 ; Compare accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	jsr ($818E.w,X)		; FC 8E 81 ; Jump to subroutine indirect indexed ($818E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $838E.w,X		; FD 8E 83 ; Subtract with carry $838E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($62.b,X)		; E1 62 ; Subtract with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $078D.w,X		; FD 8D 07 ; Subtract with carry $078D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $D2		; 70 D2 ; Branch if overflow set to $70, $D2 [Flow: branch]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8003.w		; 0D 03 80 ; Logical OR $8003.w with accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$62		; C2 62
	inc $070B.w,X		; FE 0B 07 ; Increment memory $070B.w,X [Reads: X Index] [Flags: ZN]
	.db $90, $B2		; 90 B2 ; Branch if carry clear to $90, $B2 [Flow: branch]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$FE62.w		; A2 62 FE ; Load #$FE62.w into X register [Writes: X Index] [Flags: ZN]
	bit #$B007.w		; 89 07 B0 ; Test bits #$B007.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($02.b)		; 92 02 ; Store accumulator (indirect) ($02.b) [Reads: Accumulator, Direct Page]
	sbc $C00309.l,X		; FF 09 03 C0 ; Subtract with carry (long,X) $C00309.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $62, $FF		; 82 62 FF ; Branch always long to $82, $62, $FF [Flow: branch]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF03A7.l,X		; FF A7 03 FF ; Subtract with carry (long,X) $FF03A7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$D002.w		; A2 02 D0 ; Load #$D002.w into X register [Writes: X Index] [Flags: ZN]
	adc ($02.b,S),Y		; 73 02 ; Add with carry (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $8319CF.l		; 2F CF 19 83 ; AND accumulator with memory (long) $8319CF.l [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora $2DD0.w,Y		; 19 D0 2D ; OR accumulator with memory $2DD0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b)		; 72 CA ; Add with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $63D1.w		; 2C D1 63 ; Test bits $63D1.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsr ($C9BD.w,X)		; FC BD C9 ; Jump to subroutine indirect indexed ($C9BD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $04DE.w,X		; 3C DE 04 ; Test bits $04DE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $CB5D.w,X		; FD 5D CB ; Subtract with carry $CB5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvn $64,$D4		; 54 D4 64 ; Move block negative $64,$D4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $4F5C.w,X		; FD 5C 4F ; Subtract with carry $4F5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $C5.b		; 64 C5 ; Store zero to $C5.b
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	jmp.w [$744B]		; DC 4B 74 ; Jump long indirect [$744B] [Flow: jump]
	lda $64.b,X		; B5 64 ; Load $64.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $4FDA.w,X		; FD DA 4F ; Subtract with carry $4FDA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $A5.b		; 84 A5 ; Store Y register to $A5.b [Reads: Y Index]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sty $95.b,X		; 94 95 ; Store Y register $95.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor $0485A4.l		; 4F A4 85 04 ; Exclusive OR accumulator with memory (long) $0485A4.l [Writes: Accumulator] [Flags: ZN]
	inc $4BD8.w,X		; FE D8 4B ; Increment memory $4BD8.w,X [Reads: X Index] [Flags: ZN]
	ldy $75.b,X		; B4 75 ; Load Y register $75.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	dec $4F.b,X		; D6 4F ; Decrement memory $4F.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cpy $66.b		; C4 66 ; Compare $66.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ror $4B.b,X		; 76 4B ; Rotate right $4B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $643C.w,X		; DD 3C 64 ; Compare accumulator $643C.w,X [Reads: X Index] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $D0, $A4		; D0 A4 ; Branch if not equal to $D0, $A4 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $B0, $A4		; B0 A4 ; Branch if carry set to $B0, $A4 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $90, $A4		; 90 A4 ; Branch if carry clear to $90, $A4 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $70, $A4		; 70 A4 ; Branch if overflow set to $70, $A4 [Flow: branch]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	ldy $DB.b		; A4 DB ; Load $DB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda ($83.b,S),Y		; B3 83 ; Load accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta ($A3.b,S),Y		; 93 A3 ; Store accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc ($C3.b,S),Y		; 73 C3 ; Add with carry (stack relative indirect indexed) ($C3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and $83.b,S		; 23 83 ; AND accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy #$3373.w		; A0 73 33 ; Load #$3373.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$20BC.w		; A0 BC 20 ; Load #$20BC.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$1000.w		; A0 00 10 ; Load #$1000.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $2A7200.l		; 22 00 72 2A ; Jump to subroutine long $2A7200.l [Writes: Stack Pointer] [Flow: call]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $23		; 42 23 ; Reserved instruction
	cpy #$610B.w		; C0 0B 61 ; Compare #$610B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$6142.w		; C0 42 61 ; Compare #$6142.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$8301.w		; C0 01 83 ; Compare #$8301.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C301.w		; C0 01 C3 ; Compare #$C301.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E173.w		; C0 73 E1 ; Compare #$E173.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C393.w		; C0 93 C3 ; Compare #$C393.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E1D2.w		; C0 D2 E1 ; Compare #$E1D2.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A3B3.w		; C0 B3 A3 ; Compare #$A3B3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$83D2.w		; C0 D2 83 ; Compare #$83D2.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0F1.w		; C0 F1 C0 ; Compare #$C0F1.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FA162A.l,X		; FF 2A 16 FA ; Subtract with carry (long,X) $FA162A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($10.b),Y		; 91 10 ; Store accumulator ($10.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($02.b,S),Y		; 93 02 ; Store accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $1CE5FF.l,X		; FF FF E5 1C ; Subtract with carry (long,X) $1CE5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0022.w,X)		; FC 22 00 ; Jump to subroutine indirect indexed ($0022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $0120.w,Y		; 19 20 01 ; OR accumulator with memory $0120.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr $500B.w		; 20 0B 50 ; Jump to subroutine at $500B.w [Writes: Stack Pointer] [Flow: call]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $84.b,S		; A3 84 ; Load accumulator (stack relative) $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $00A1.w,X		; FD A1 00 ; Subtract with carry $00A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $02A1.w,X		; FE A1 02 ; Increment memory $02A1.w,X [Reads: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $86A7.w,X		; FE A7 86 ; Increment memory $86A7.w,X [Reads: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$82.b]		; 47 82 ; Exclusive OR accumulator with memory (long) [$82.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($88.b,S),Y		; D3 88 ; Compare accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	.db $62, $FF, $4E		; 62 FF 4E ; Push effective relative address $62, $FF, $4E [Writes: Stack Pointer]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Accumulator, Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($3A.b,X)		; 61 3A ; Add with carry ($3A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$85.b]		; E7 85 ; Subtract with carry (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($A1.b,X)		; 61 A1 ; Add with carry ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($61.b,X)		; C1 61 ; Compare accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	inc $818E.w,X		; FE 8E 81 ; Increment memory $818E.w,X [Reads: X Index] [Flags: ZN]
	jsr $032E.w		; 20 2E 03 ; Jump to subroutine at $032E.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $511B.w		; 2C 1B 51 ; Test bits $511B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	mvp $FD,$03		; 44 03 FD ; Move block positive $FD,$03 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pei ($4C.b)		; D4 4C ; Push effective indirect address ($4C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	stz $2E.b,X		; 74 2E ; Store zero to $2E.b,X [Reads: X Index]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($C8.b),Y		; D1 C8 ; Compare accumulator ($C8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sty $1E.b		; 84 1E ; Store Y register to $1E.b [Reads: Y Index]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $642E.w,X		; 9E 2E 64 ; Store zero to $642E.w,X [Reads: X Index]
	inc $4E78.w,X		; FE 78 4E ; Increment memory $4E78.w,X [Reads: X Index] [Flags: ZN]
	ldy $0386.w		; AC 86 03 ; Load $0386.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $C64A18.l,X		; FF 18 4A C6 ; Subtract with carry (long,X) $C64A18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $64.b,X		; 94 64 ; Store Y register $64.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sbc $14CB1D.l,X		; FF 1D CB 14 ; Subtract with carry (long,X) $14CB1D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $3B.b		; 14 3B ; Test and reset bits $3B.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor ($C8.b)		; 52 C8 ; Exclusive OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $8604.w		; 6D 04 86 ; Add $8604.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sty $7B.b		; 84 7B ; Store Y register to $7B.b [Reads: Y Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	asl $CD.b,X		; 16 CD ; Arithmetic shift left $CD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $63C3.w		; AC C3 63 ; Load $63C3.w into Y register [Writes: Y Index] [Flags: ZN]
	inc $C9BD.w,X		; FE BD C9 ; Increment memory $C9BD.w,X [Reads: X Index] [Flags: ZN]
	ldy $04DC.w,X		; BC DC 04 ; Load Y register $04DC.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	ldy $80.b		; A4 80 ; Load $80.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $88.b		; A4 88 ; Load $88.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta ($2B.b,S),Y		; 93 2B ; Store accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $90, $A4		; 90 A4 ; Branch if carry clear to $90, $A4 [Flow: branch]
	bit $A221.w,X		; 3C 21 A2 ; Test bits $A221.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$1151.w		; C0 51 11 ; Compare #$1151.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0B00.w,Y		; 19 00 0B ; OR accumulator with memory $0B00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpy #$CA0B.w		; C0 0B CA ; Compare #$CA0B.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$8B4A.w		; C0 4A 8B ; Compare #$8B4A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CA4A.w		; C0 4A CA ; Compare #$CA4A.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9D79.w		; C0 79 9D ; Compare #$9D79.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($72.b,X)		; A1 72 ; Load accumulator ($72.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$7BE1.w		; C0 E1 7B ; Compare #$7BE1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$BBE1.w		; C0 E1 BB ; Compare #$BBE1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$5F09.w		; C0 09 5F ; Compare #$5F09.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($FF.b,X)		; A1 FF ; Load accumulator ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF142B.l,X		; FF 2B 14 FF ; Subtract with carry (long,X) $FF142B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($10.b),Y		; B1 10 ; Load accumulator ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($02.b)		; 32 02 ; AND accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0451FF.l,X		; FF FF 51 04 ; Subtract with carry (long,X) $0451FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp ($080D.w,X)		; 7C 0D 08 ; Jump indirect indexed to ($080D.w,X) [Reads: X Index] [Flow: jump]
	.db $82, $61, $30		; 82 61 30 ; Branch always long to $82, $61, $30 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $385401.l,X		; 3F 01 54 38 ; AND accumulator with memory (long,X) $385401.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3160.w		; 0D 60 31 ; Logical OR $3160.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $02.b,S		; A3 02 ; Load accumulator (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $681061.l		; 5C 61 10 68 ; Jump long to $681061.l [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $62, $5C, $65		; 62 5C 65 ; Push effective relative address $62, $5C, $65 [Writes: Stack Pointer]
	ora $628268.l		; 0F 68 82 62 ; OR accumulator with memory (long) $628268.l [Writes: Accumulator] [Flags: ZN]
	jmp $236266.l		; 5C 66 62 23 ; Jump long to $236266.l [Flow: jump]
	lda $DB.b,S		; A3 DB ; Load accumulator (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($4859.w,X)		; FC 59 48 ; Jump to subroutine indirect indexed ($4859.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $96.b		; 25 96 ; Logical AND $96.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $154A.w,Y		; 79 4A 15 ; Add $154A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $63.b		; A6 63 ; Load $63.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr ($C95D.w,X)		; FC 5D C9 ; Jump to subroutine indirect indexed ($C95D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $DE.b		; 25 DE ; Logical AND $DE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	adc $5DCB.w,X		; 7D CB 5D ; Add $5DCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $64.b		; A6 64 ; Load $64.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	eor ($B8.b,X)		; 41 B8 ; Exclusive OR accumulator with memory ($B8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $9115.w,X		; DD 15 91 ; Compare accumulator $9115.w,X [Reads: X Index] [Flags: ZNC]
	jsl $229158.l		; 22 58 91 22 ; Jump to subroutine long $229158.l [Writes: Stack Pointer] [Flow: call]
	jsr ($20E8.w,X)		; FC E8 20 ; Jump to subroutine indirect indexed ($20E8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $2048.w,X		; FD 48 20 ; Subtract with carry $2048.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7209.w,X		; FD 09 72 ; Subtract with carry $7209.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $4B.b,S		; 43 4B ; Exclusive OR accumulator with stack relative $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $0023.w,X		; FE 23 00 ; Increment memory $0023.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	and ($01.b)		; 32 01 ; AND accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $8902A3.l,X		; FF A3 02 89 ; Subtract with carry (long,X) $8902A3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $8A88.w		; 0E 88 8A ; Arithmetic shift left $8A88.w [Flags: ZNC]
	adc ($B9.b,X)		; 61 B9 ; Add with carry ($B9.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	lda [$02.b]		; A7 02 ; Load accumulator (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$0171.w		; E0 71 01 ; Compare #$0171.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $D10047.l,X		; FF 47 00 D1 ; Subtract with carry (long,X) $D10047.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $61		; 80 61 ; Branch always to $80, $61 [Flow: branch]
	sbc $C0044A.l,X		; FF 4A 04 C0 ; Subtract with carry (long,X) $C0044A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$A001.w		; A2 01 A0 ; Load #$A001.w into X register [Writes: X Index] [Flags: ZN]
	.db $82, $0F, $A1		; 82 0F A1 ; Branch always long to $82, $0F, $A1 [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	.db $62, $FE, $84		; 62 FE 84 ; Push effective relative address $62, $FE, $84 [Writes: Stack Pointer]
	sta [$B1.b]		; 87 B1 ; Store accumulator (long) [$B1.b] [Reads: Accumulator, Direct Page]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FF,$85		; 44 85 FF ; Move block positive $FF,$85 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $81.b		; 45 81 ; Exclusive OR $81.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$0259.w		; E0 59 02 ; Compare #$0259.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $E383A5.l,X		; FF A5 83 E3 ; Subtract with carry (long,X) $E383A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$C013.w		; 09 13 C0 ; Logical OR #$C013.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$A059.w		; 09 59 A0 ; Logical OR #$A059.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0051.w		; 09 51 00 ; Logical OR #$0051.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $0E2660.l,X		; 3F 60 26 0E ; AND accumulator with memory (long,X) $0E2660.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$2554.w		; C0 54 25 ; Compare #$2554.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$114A.w		; A0 4A 11 ; Load #$114A.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$646C.w		; C0 6C 64 ; Compare #$646C.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$6070.w		; C0 70 60 ; Compare #$6070.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $70.b,S		; A3 70 ; Load accumulator (stack relative) $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $A2.b,X		; 74 A2 ; Store zero to $A2.b,X [Reads: X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($69.b),Y		; D1 69 ; Compare accumulator ($69.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $A2		; 90 A2 ; Branch if carry clear to $90, $A2 [Flow: branch]
	lda ($5A.b),Y		; B1 5A ; Load accumulator ($5A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$90C0.w		; C0 C0 90 ; Compare #$90C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$88B1.w		; C0 B1 88 ; Compare #$88B1.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $CA8BA1.l,X		; 9F A1 8B CA ; Store accumulator (long,X) $CA8BA1.l,X [Reads: Accumulator, X Index]
	cpy #$CACA.w		; C0 CA CA ; Compare #$CACA.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($10.b),Y		; 91 10 ; Store accumulator ($10.b),Y [Reads: Accumulator, Direct Page, Y Index]
	.db $62, $00, $73		; 62 00 73 ; Push effective relative address $62, $00, $73 [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $151CE1.l,X		; FF E1 1C 15 ; Subtract with carry (long,X) $151CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $01		; 70 01 ; Branch if overflow set to $70, $01 [Flow: branch]
	jsr ($0027.w,X)		; FC 27 00 ; Jump to subroutine indirect indexed ($0027.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $6D.b,X		; 35 6D ; Logical AND $6D.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1F51.w		; 0D 51 1F ; Logical OR $1F51.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $02A1.w,X		; FD A1 02 ; Subtract with carry $02A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $86A3.w,X		; FD A3 86 ; Subtract with carry $86A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $84.b,S		; 23 84 ; AND accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $0021.w,X		; FE 21 00 ; Increment memory $0021.w,X [Reads: X Index] [Flags: ZN]
	lda ($45.b,X)		; A1 45 ; Load accumulator ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $621FA1.l		; 0F A1 1F 62 ; OR accumulator with memory (long) $621FA1.l [Writes: Accumulator] [Flags: ZN]
	inc $0281.w,X		; FE 81 02 ; Increment memory $0281.w,X [Reads: X Index] [Flags: ZN]
	cmp $0170.w		; CD 70 01 ; Compare $0170.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $FF02A7.l,X		; FF A7 02 FF ; Subtract with carry (long,X) $FF02A7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta $A2.b,S		; 83 A2 ; Store accumulator (stack relative) $A2.b,S [Reads: Accumulator, Stack Pointer]
	ldy $D810.w,X		; BC 10 D8 ; Load Y register $D810.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $90.b		; 02 90 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rep #$02		; C2 02 ; Reset processor status bits #$02 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	inc $071C.w,X		; FE 1C 07 ; Increment memory $071C.w,X [Reads: X Index] [Flags: ZN]
	sty $D3.b		; 84 D3 ; Store Y register to $D3.b [Reads: Y Index]
	.db $62, $FE, $1E		; 62 FE 1E ; Push effective relative address $62, $FE, $1E [Writes: Stack Pointer]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Accumulator, Stack Pointer]
	ldx $6C81.w,Y		; BE 81 6C ; Load X register $6C81.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($61.b,S),Y		; D3 61 ; Compare accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rep #$02		; C2 02 ; Reset processor status bits #$02 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $05BC.w,X		; FD BC 05 ; Subtract with carry $05BC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8128.w,X)		; FC 28 81 ; Jump to subroutine indirect indexed ($8128.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $2A.b		; 02 2A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $7941.w		; 0E 41 79 ; Arithmetic shift left $7941.w [Flags: ZNC]
	.db $10, $41		; 10 41 ; Branch if plus to $10, $41 [Flow: branch]
	adc $400F.w,X		; 7D 0F 40 ; Add $400F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $6C62.w,X		; 7E 62 6C ; Rotate right $6C62.w,X [Reads: X Index] [Flags: ZNC]
	lda #$FD01.w		; A9 01 FD ; Load #$FD01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sty $74.b		; 84 74 ; Store Y register to $74.b [Reads: Y Index]
	sta ($61.b,S),Y		; 93 61 ; Store accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $00D8.w,X		; FD D8 00 ; Subtract with carry $00D8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0218.w,X		; FE 18 02 ; Increment memory $0218.w,X [Reads: X Index] [Flags: ZN]
	sty $93.b		; 84 93 ; Store Y register to $93.b [Reads: Y Index]
	.db $62, $FE, $1A		; 62 FE 1A ; Push effective relative address $62, $FE, $1A [Writes: Stack Pointer]
	stx $94.b		; 86 94 ; Store X register to $94.b [Reads: X Index]
	lda #$9C01.w		; A9 01 9C ; Load #$9C01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$0D.b]		; A7 0D ; Load accumulator (long) [$0D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $51.b,X		; 95 51 ; Store accumulator to $51.b,X [Reads: Accumulator, X Index]
	asl $7FB0.w		; 0E B0 7F ; Arithmetic shift left $7FB0.w [Flags: ZNC]
	adc ($6D.b,X)		; 61 6D ; Add with carry ($6D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $23.b,S		; 63 23 ; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $83.b,S		; E3 83 ; Subtract stack-relative $83.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $93.b,S		; 83 93 ; Store accumulator (stack relative) $93.b,S [Reads: Accumulator, Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $3460.w		; 0D 60 34 ; Logical OR $3460.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $A0.b,X		; 56 A0 ; Logical shift right $A0.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $51.b		; 06 51 ; Arithmetic shift left $51.b [Reads: Direct Page] [Flags: ZNC]
	cpy #$4F34.w		; C0 34 4F ; Compare #$4F34.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$9D2A.w		; C0 2A 9D ; Compare #$9D2A.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda ($0B.b,X)		; A1 0B ; Load accumulator ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $3EC0.w,Y		; D9 C0 3E ; Compare accumulator $3EC0.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $26C0.w,Y		; D9 C0 26 ; Compare accumulator $26C0.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$13B3.w		; C0 B3 13 ; Compare #$13B3.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$10F3.w		; C0 F3 10 ; Compare #$10F3.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $56.b,X		; B4 56 ; Load Y register $56.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$4CB1.w		; A2 B1 4C ; Load #$4CB1.w into X register [Writes: X Index] [Flags: ZN]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($C0.b),Y		; 51 C0 ; Exclusive OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$D2.b],Y		; 97 D2 ; Store accumulator (long indexed) [$D2.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cpy #$D2D5.w		; C0 D5 D2 ; Compare #$D2D5.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$CDA6.w		; C0 A6 CD ; Compare #$CDA6.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $D9.b,S		; A3 D9 ; Load accumulator (stack relative) $D9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$D8F1.w		; C0 F1 D8 ; Compare #$D8F1.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor ($7C.b),Y		; 51 7C ; Exclusive OR accumulator with memory ($7C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$7A54.w		; C0 54 7A ; Compare #$7A54.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $54.b,S		; A3 54 ; Load accumulator (stack relative) $54.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $94A2.w		; 8E A2 94 ; Store X register to $94A2.w [Reads: X Index]
	ror $A1.b		; 66 A1 ; Rotate right $A1.b [Reads: Direct Page] [Flags: ZNC]
	stz $A094.w		; 9C 94 A0 ; Store zero to $A094.w
	adc $61.b,X		; 75 61 ; Add $61.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$616E.w		; C0 6E 61 ; Compare #$616E.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $7A.b,X		; 95 7A ; Store accumulator to $7A.b,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $879800.l,X		; 7F 00 98 87 ; Add long $879800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FFFF00.l		; 8F 00 FF FF ; Store accumulator (long) $FFFF00.l [Reads: Accumulator]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($0E.b),Y		; 71 0E ; Add with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $C333.w,X		; 3D 33 C3 ; AND accumulator with memory $C333.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $50, $B8		; 50 B8 ; Branch if overflow clear to $50, $B8 [Flow: branch]
	and $B353.w,X		; 3D 53 B3 ; AND accumulator with memory $B353.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor ($AB.b,S),Y		; 53 AB ; XOR accumulator (stack relative indirect indexed) ($AB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor ($A3.b,S),Y		; 53 A3 ; XOR accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$DC9E.w		; A9 9E DC ; Load #$DC9E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$3DC8.w		; A0 C8 3D ; Load #$3DC8.w into Y register [Writes: Y Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $AABD.w,X		; 3D BD AA ; AND accumulator with memory $AABD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0089.w,X		; FE 89 00 ; Increment memory $0089.w,X [Reads: X Index] [Flags: ZN]
	ldx #$61A1.w		; A2 A1 61 ; Load #$61A1.w into X register [Writes: X Index] [Flags: ZN]
	inc $818E.w,X		; FE 8E 81 ; Increment memory $818E.w,X [Reads: X Index] [Flags: ZN]
	sbc $D20249.l,X		; FF 49 02 D2 ; Subtract with carry (long,X) $D20249.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $20834E.l,X		; FF 4E 83 20 ; Subtract with carry (long,X) $20834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($DD.b,S),Y		; B3 DD ; Load accumulator (stack relative indirect indexed) ($DD.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $B3		; 50 B3 ; Branch if overflow clear to $50, $B3 [Flow: branch]
	cmp $CB33.w,X		; DD 33 CB ; Compare accumulator $CB33.w,X [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	eor $CB.b,S		; 43 CB ; Exclusive OR accumulator with stack relative $CB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $B3F994.l,X		; BF 94 F9 B3 ; Load long $B3F994.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $DFC8.w		; AD C8 DF ; Load $DFC8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $C8.b		; C4 C8 ; Compare $C8.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $FAE3B3.l,X		; DF B3 E3 FA ; Compare accumulator (long,X) $FAE3B3.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sta ($93.b,X)		; 81 93 ; Store accumulator ($93.b,X) [Reads: Accumulator, X Index, Direct Page]
	cpy #$D281.w		; C0 81 D2 ; Compare #$D281.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$93E1.w		; C0 E1 93 ; Compare #$93E1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$D2E1.w		; C0 E1 D2 ; Compare #$D2E1.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($812C.w,X)		; FC 2C 81 ; Jump to subroutine indirect indexed ($812C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $2885.w		; AC 85 28 ; Load $2885.w into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $4883.w		; 2E 83 48 ; Rotate left $4883.w [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $2C		; 62 FD 2C ; Push effective relative address $62, $FD, $2C [Writes: Stack Pointer]
	sta [$58.b]		; 87 58 ; Store accumulator (long) [$58.b] [Reads: Accumulator, Direct Page]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $FC83.w		; AC 83 FC ; Load $FC83.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $FE81.w		; AE 81 FE ; Load $FE81.w into X register [Writes: X Index] [Flags: ZN]
	lda #$AA00.w		; A9 00 AA ; Load #$AA00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $81AE.w,X		; FE AE 81 ; Increment memory $81AE.w,X [Reads: X Index] [Flags: ZN]
	sbc $D883AC.l,X		; FF AC 83 D8 ; Subtract with carry (long,X) $D883AC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $C887.w		; 2C 87 C8 ; Test bits $C887.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $2E		; 62 FF 2E ; Push effective relative address $62, $FF, $2E [Writes: Stack Pointer]
	sta $31.b,S		; 83 31 ; Store accumulator (stack relative) $31.b,S [Reads: Accumulator, Stack Pointer]
	lda ($C8.b,X)		; A1 C8 ; Load accumulator ($C8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3FA3.w		; 2D A3 3F ; Logical AND $3FA3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $79A6.w		; 2D A6 79 ; Logical AND $79A6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $40C3.w		; 2D C3 40 ; Logical AND $40C3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($A6.b),Y		; 51 A6 ; Exclusive OR accumulator with memory ($A6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsr ($A46A.w,X)		; FC 6A A4 ; Jump to subroutine indirect indexed ($A46A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $A46A.w,X		; FD 6A A4 ; Subtract with carry $A46A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lsr $A9C8.w,X		; 5E C8 A9 ; Logical shift right $A9C8.w,X [Reads: X Index] [Flags: ZNC]
	bit #$C0E0.w		; 89 E0 C0 ; Test bits #$C0E0.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $9EB7.w,X		; 5E B7 9E ; Logical shift right $9EB7.w,X [Reads: X Index] [Flags: ZNC]
	adc #$DCB4.w		; 69 B4 DC ; Add #$DCB4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$9EB6.w		; 69 B6 9E ; Add #$9EB6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $699CEA.l		; 22 EA 9C 69 ; Jump to subroutine long $699CEA.l [Writes: Stack Pointer] [Flow: call]
	cmp #$22C9.w		; C9 C9 22 ; Compare #$22C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit #$C093.w		; 89 93 C0 ; Test bits #$C093.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$C0D2.w		; 89 D2 C0 ; Test bits #$C0D2.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $C0D9.w,Y		; D9 D9 C0 ; Compare accumulator $C0D9.w,Y [Reads: Y Index] [Flags: ZNC]
	ora #$C0D9.w		; 09 D9 C0 ; Logical OR #$C0D9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C0D9.w,Y		; 59 D9 C0 ; Exclusive OR accumulator with memory $C0D9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,X)		; 81 0E ; Store accumulator ($0E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0125.w,X)		; FC 25 01 ; Jump to subroutine indirect indexed ($0125.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0565.w,X)		; FC 65 05 ; Jump to subroutine indirect indexed ($0565.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8166.w,X)		; FC 66 81 ; Jump to subroutine indirect indexed ($8166.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8366.w,X		; FD 66 83 ; Subtract with carry $8366.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0765.w,X		; FD 65 07 ; Subtract with carry $0765.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03A5.w,X		; FD A5 03 ; Subtract with carry $03A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F92A.w,Y		; 19 2A F9 ; OR accumulator with memory $F92A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F922.w		; 29 22 F9 ; Logical AND #$F922.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($22.b),Y		; 51 22 ; Exclusive OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $2A61.w,Y		; F9 61 2A ; Subtract with carry $2A61.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4130.w,Y		; F9 30 41 ; Subtract with carry $4130.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $A728.w,X		; 3D 28 A7 ; AND accumulator with memory $A728.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rep #$48		; C2 48 ; Reset processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lda [$C2.b]		; A7 C2 ; Load accumulator (long) [$C2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lda ($27.b,X)		; A1 27 ; Load accumulator ($27.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda [$6A.b]		; A7 6A ; Load accumulator (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $28.b		; E5 28 ; Subtract $28.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$A7.b],Y		; 37 A7 ; AND accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($27.b,X)		; A1 27 ; Load accumulator ($27.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda [$6A.b]		; A7 6A ; Load accumulator (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $28.b		; E5 28 ; Subtract $28.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor [$A7.b],Y		; 57 A7 ; Exclusive OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $61.b,X		; 36 61 ; Rotate left $61.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $FFFF.w		; 0E FF FF ; Arithmetic shift left $FFFF.w [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00ADFF.l,X		; FF FF AD 00 ; Subtract with carry (long,X) $00ADFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($87.b,X)		; 81 87 ; Store accumulator ($87.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $B74B.w,Y		; B9 4B B7 ; Load $B74B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	eor ($B7.b,S),Y		; 53 B7 ; XOR accumulator (stack relative indirect indexed) ($B7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda [$D6.b],Y		; B7 D6 ; Load accumulator (long indexed) [$D6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $B8.b		; C5 B8 ; Compare $B8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $B964.w,Y		; B9 64 B9 ; Load $B964.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $1AF0.w		; 9C F0 1A ; Store zero to $1AF0.w
	jsl $0ABA30.l		; 22 30 BA 0A ; Jump to subroutine long $0ABA30.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$8510.w		; A9 10 85 ; Load #$8510.w into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $6D6C79.l,X		; 7F 79 6C 6D ; Add long $6D6C79.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $7C6F.w		; 6E 6F 7C ; Rotate right $7C6F.w [Flags: ZNC]
	adc $CF80.w,X		; 7D 80 CF ; Add $CF80.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $B8		; 10 B8 ; Branch if plus to $10, $B8 [Flow: branch]
	.db $30, $70		; 30 70 ; Branch if minus to $30, $70 [Flow: branch]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0E0700.l		; 0F 00 07 0E ; OR accumulator with memory (long) $0E0700.l [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$5020.w		; C0 20 50 ; Compare #$5020.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $800F0F.l		; 0F 0F 0F 80 ; OR accumulator with memory (long) $800F0F.l [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $F2.b		; A5 F2 ; Load $F2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F0.b		; 05 F0 ; Logical OR $F0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F0C0.w		; 29 C0 F0 ; Logical AND #$F0C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $EE.b		; 06 EE ; Arithmetic shift left $EE.b [Reads: Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	ldy #$AE07.w		; A0 07 AE ; Load #$AE07.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$AA07.w		; 29 07 AA ; Logical AND #$AA07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	stx $1AF0.w		; 8E F0 1A ; Store X register to $1AF0.w [Reads: X Index]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F00A.w		; 29 0A F0 ; Logical AND #$F00A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec $1AF0.w		; CE F0 1A ; Decrement $1AF0.w [Flags: ZN]
	lda #$8D20.w		; A9 20 8D ; Load #$8D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $F4A501.l		; 2F 01 A5 F4 ; AND accumulator with memory (long) $F4A501.l [Writes: Accumulator] [Flags: ZN]
	and #$F005.w		; 29 05 F0 ; Logical AND #$F005.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $1AF0.w		; EE F0 1A ; Increment $1AF0.w [Flags: ZN]
	lda #$8D20.w		; A9 20 8D ; Load #$8D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $F0AD01.l		; 2F 01 AD F0 ; AND accumulator with memory (long) $F0AD01.l [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$8D07.w		; 29 07 8D ; Logical AND #$8D07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F010.w		; 29 10 F0 ; Logical AND #$F010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $20.b		; 24 20 ; Test bits $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $1F90C3.l,X		; 9F C3 90 1F ; Store accumulator (long,X) $1F90C3.l,X [Reads: Accumulator, X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$8504.w		; E9 04 85 ; Subtract #$8504.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $0FA5.w		; 0E A5 0F ; Arithmetic shift left $0FA5.w [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$8504.w		; E9 04 85 ; Subtract #$8504.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $8500A9.l		; 0F A9 00 85 ; OR accumulator with memory (long) $8500A9.l [Writes: Accumulator] [Flags: ZN]
	ora $3EA9.w		; 0D A9 3E ; Logical OR $3EA9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$8502.w		; A9 02 85 ; Load #$8502.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldx #$2010.w		; A2 10 20 ; Load #$2010.w into X register [Writes: X Index] [Flags: ZN]
	trb $AFC5.w		; 1C C5 AF ; Test and reset bits $AFC5.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($7E.b,X)		; C1 7E ; Compare accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC109.l		; AF 09 C1 7E ; Load long $7EC109.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC10B.l		; AF 0B C1 7E ; Load long $7EC10B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$EC07.w		; A2 07 EC ; Load #$EC07.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	.db $D0, $4C		; D0 4C ; Branch if not equal to $D0, $4C [Flow: branch]
	lda $0AB763.l,X		; BF 63 B7 0A ; Load long $0AB763.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AB0.w,X		; 9D B0 1A ; Store accumulator to $1AB0.w,X [Reads: Accumulator, X Index]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0AB76B.l,X		; BF 6B B7 0A ; Load long $0AB76B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AC0.w,X		; 9D C0 1A ; Store accumulator to $1AC0.w,X [Reads: Accumulator, X Index]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0AB773.l,X		; BF 73 B7 0A ; Load long $0AB773.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AD0.w,X		; 9D D0 1A ; Store accumulator to $1AD0.w,X [Reads: Accumulator, X Index]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0AB77B.l,X		; BF 7B B7 0A ; Load long $0AB77B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AE0.w,X		; 9D E0 1A ; Store accumulator to $1AE0.w,X [Reads: Accumulator, X Index]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $90, $5F		; 90 5F ; Branch if carry clear to $90, $5F [Flow: branch]
	lda $0AB75B.l,X		; BF 5B B7 0A ; Load long $0AB75B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0906.w		; 29 06 09 ; Logical AND #$0906.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $85		; 30 85 ; Branch if minus to $30, $85 [Flow: branch]
	tsb $00A9.w		; 0C A9 00 ; Test and set bits $00A9.w [Reads: Accumulator] [Flags: Z]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $46		; 80 46 ; Branch always to $80, $46 [Flow: branch]
	lda $0AB763.l,X		; BF 63 B7 0A ; Load long $0AB763.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AB0.w,X		; 9D B0 1A ; Store accumulator to $1AB0.w,X [Reads: Accumulator, X Index]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0AB76B.l,X		; BF 6B B7 0A ; Load long $0AB76B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AC0.w,X		; 9D C0 1A ; Store accumulator to $1AC0.w,X [Reads: Accumulator, X Index]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0AB773.l,X		; BF 73 B7 0A ; Load long $0AB773.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AD0.w,X		; 9D D0 1A ; Store accumulator to $1AD0.w,X [Reads: Accumulator, X Index]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0AB77B.l,X		; BF 7B B7 0A ; Load long $0AB77B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1AE0.w,X		; 9D E0 1A ; Store accumulator to $1AE0.w,X [Reads: Accumulator, X Index]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda $0AB75B.l,X		; BF 5B B7 0A ; Load long $0AB75B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$8532.w		; A9 32 85 ; Load #$8532.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $00A9.w		; 0C A9 00 ; Test and set bits $00A9.w [Reads: Accumulator] [Flags: Z]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $B813.w		; 4C 13 B8 ; Jump to $B813.w [Flow: jump]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF2BB.l		; AF BB F2 7E ; Load long $7EF2BB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$8FDF.w		; 29 DF 8F ; Logical AND #$8FDF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc ($7E.b)		; F2 7E ; Subtract with carry (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $7EF2FB.l		; AF FB F2 7E ; Load long $7EF2FB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$8FDF.w		; 29 DF 8F ; Logical AND #$8FDF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc ($7E.b)		; F2 7E ; Subtract with carry (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $7EF216.l		; AF 16 F2 7E ; Load long $7EF216.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$8F7F.w		; 29 7F 8F ; Logical AND #$8F7F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $F2.b,X		; 16 F2 ; Arithmetic shift left $F2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $51AF.w,X		; 7E AF 51 ; Rotate right $51AF.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $7E		; F0 7E ; Branch if equal to $F0, $7E [Flow: branch]
	and #$8FFE.w		; 29 FE 8F ; Logical AND #$8FFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($F0.b),Y		; 51 F0 ; Exclusive OR accumulator with memory ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $3922.w,X		; 7E 22 39 ; Rotate right $3922.w,X [Reads: X Index] [Flags: ZNC]
	cpx $2202.w		; EC 02 22 ; Compare $2202.w with X register [Reads: X Index] [Flags: ZNC]
	cmp $02EC.w,X		; DD EC 02 ; Compare accumulator $02EC.w,X [Reads: X Index] [Flags: ZNC]
	ldy #$A558.w		; A0 58 A5 ; Load #$A558.w into Y register [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$C9BF.w		; 29 BF C9 ; Logical AND #$C9BF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$F005.w		; C9 05 F0 ; Compare #$F005.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $C9.b		; 06 C9 ; Arithmetic shift left $C9.b [Reads: Direct Page] [Flags: ZNC]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; [PATTERN: Memory clearing operation] 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $00D394.l		; 22 94 D3 00 ; Jump to subroutine long $00D394.l [Writes: Stack Pointer] [Flow: call]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	stz $0AB2.w		; 9C B2 0A ; Store zero to $0AB2.w
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	jsl $02B1F4.l		; 22 F4 B1 02 ; Jump to subroutine long $02B1F4.l [Writes: Stack Pointer] [Flow: call]
	lda #$8D10.w		; A9 10 8D ; Load #$8D10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $8AA601.l		; 2F 01 A6 8A ; AND accumulator with memory (long) $8AA601.l [Writes: Accumulator] [Flags: ZN]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$AA0F.w		; 29 0F AA ; Logical AND #$AA0F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $0130.w		; EC 30 01 ; Compare $0130.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$8EF3.w		; A2 F3 8E ; Load #$8EF3.w into X register [Writes: X Index] [Flags: ZN]
	bit $6B01.w		; 2C 01 6B ; Test bits $6B01.w with accumulator [Reads: Accumulator] [Flags: ZVN]
.ACCU 16
	rep #$20		; C2 20
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
	sep #$20		; E2 20
	jsl $02B1F0.l		; 22 F0 B1 02 ; Jump to subroutine long $02B1F0.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: ZN]
	lda $13.b		; [PATTERN: Memory clearing operation] A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda $7EC229.l		; AF 29 C2 7E ; Load long $7EC229.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	ldy #$A904.w		; A0 04 A9 ; Load #$A904.w into Y register [Writes: Y Index] [Flags: ZN]
	and [$22.b]		; 27 22 ; AND accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0995.w,X		; 1D 95 09 ; OR accumulator with memory $0995.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda $B9.b,S		; A3 B9 ; Load accumulator (stack relative) $B9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $30, $BA		; 30 BA ; Branch if minus to $30, $BA [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: ZN]
	dec $BB.b,X		; D6 BB ; Decrement memory $BB.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	mvn $6B,$BC		; 54 BC 6B ; Move block negative $6B,$BC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
	lda $9B.b		; A5 9B ; Load $9B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC229.l		; 8F 29 C2 7E ; Store accumulator (long) $7EC229.l [Reads: Accumulator]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC211.l		; 8F 11 C2 7E ; Store accumulator (long) $7EC211.l [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC200.l		; 8F 00 C2 7E ; Store accumulator (long) $7EC200.l [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC202.l		; 8F 02 C2 7E ; Store accumulator (long) $7EC202.l [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC204.l		; [PATTERN: Memory clearing operation] 8F 04 C2 7E ; Store accumulator (long) $7EC204.l [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC206.l		; 8F 06 C2 7E ; Store accumulator (long) $7EC206.l [Reads: Accumulator]
	stz $E0.b		; 64 E0 ; Store zero to $E0.b
	stz $E2.b		; 64 E2 ; Store zero to $E2.b
	stz $E4.b		; [PATTERN: Memory clearing operation] 64 E4 ; Store zero to $E4.b
	stz $E6.b		; 64 E6 ; Store zero to $E6.b
	stz $E8.b		; 64 E8 ; Store zero to $E8.b
	stz $EA.b		; 64 EA ; Store zero to $EA.b
	lda $99.b		; A5 99 ; Load $99.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC225.l		; 8F 25 C2 7E ; Store accumulator (long) $7EC225.l [Reads: Accumulator]
	lda #$01FC.w		; A9 FC 01 ; Load #$01FC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0100.w		; 8D 00 01 ; Store accumulator to $0100.w [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$B080.w		; E0 80 B0 ; Compare #$B080.w with X register [Reads: X Index] [Flags: ZNC]
	tsb $20A5.w		; 0C A5 20 ; Test and set bits $20A5.w [Reads: Accumulator] [Flags: Z]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$61.b		; A9 61 ; Load #$61.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BGMODE.w		; 8D 05 21 ; Store accumulator to BGMODE.w [Reads: Accumulator]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta M7SEL.w		; 8D 1A 21 ; Store accumulator to M7SEL.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $BDA5.w		; 20 A5 BD ; Jump to subroutine at $BDA5.w [Writes: Stack Pointer] [Flow: call]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	jsl $00E399.l		; 22 99 E3 00 ; Jump to subroutine long $00E399.l [Writes: Stack Pointer] [Flow: call]
	jsr $BC96.w		; 20 96 BC ; Jump to subroutine at $BC96.w [Writes: Stack Pointer] [Flow: call]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$00FE.w		; A2 FE 00 ; Load #$00FE.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$00FE.w		; A0 FE 00 ; Load #$00FE.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy #$01FE.w		; A0 FE 01 ; Load #$01FE.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $DB27.w,Y		; B9 27 DB ; Load $DB27.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	stz $13.b		; 64 13 ; Store zero to $13.b
	inc $0710.w		; EE 10 07 ; Increment $0710.w [Flags: ZN]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$03FE.w		; A2 FE 03 ; Load #$03FE.w into X register [Writes: X Index] [Flags: ZN]
	lda $0AD727.l,X		; BF 27 D7 0A ; Load long $0AD727.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1000.w,X		; 9D 00 10 ; Store accumulator to $1000.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	stz $0AAA.w		; 9C AA 0A ; Store zero to $0AAA.w
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: ZN]
	lda $13.b		; A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $1E00.w,X		; 1E 00 1E ; Arithmetic shift left $1E00.w,X [Reads: X Index] [Flags: ZNC]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFEFF.l,X		; FF FF FE FF ; Subtract with carry (long,X) $FFFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $CFFF20.l,X		; FF 20 FF CF ; Subtract with carry (long,X) $CFFF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $BDD6.w,X		; BD D6 BD ; Load $BDD6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $0636.w		; AD 36 06 ; Load $0636.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0636.w		; 8D 36 06 ; Store accumulator to $0636.w [Reads: Accumulator]
	lda $0ABAE2.l,X		; BF E2 BA 0A ; Load long $0ABAE2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta DMASRC6L.w		; 8D 62 43 ; Store accumulator to DMASRC6L.w [Reads: Accumulator]
	sta DMASRC7L.w		; 8D 72 43 ; Store accumulator to DMASRC7L.w [Reads: Accumulator]
	lda $0636.w		; AD 36 06 ; Load $0636.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dec $B2.b		; C6 B2 ; Decrement $B2.b [Reads: Direct Page] [Flags: ZN]
	jmp $BB91.w		; 4C 91 BB ; Jump to $BB91.w [Flow: jump]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $78		; F0 78 ; Branch if equal to $F0, $78 [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda $0636.w		; AD 36 06 ; Load $0636.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0636.w		; 8D 36 06 ; Store accumulator to $0636.w [Reads: Accumulator]
	lda $0ABAC4.l,X		; BF C4 BA 0A ; Load long $0ABAC4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0637.w		; 8D 37 06 ; Store accumulator to $0637.w [Reads: Accumulator]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC108.l		; AF 08 C1 7E ; Load long $7EC108.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0048.w		; E9 48 00 ; Subtract #$0048.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$FFFE.w		; 29 FE FF ; Logical AND #$FFFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $063A.w		; 8D 3A 06 ; Store accumulator to $063A.w [Reads: Accumulator]
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx $03.b		; A6 03 ; Load $03.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
.ACCU 16
	rep #$21		; C2 21
	lda #$00C8.w		; A9 C8 00 ; Load #$00C8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $063A.w		; 8D 3A 06 ; Store accumulator to $063A.w [Reads: Accumulator]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$FFFE.w		; 29 FE FF ; Logical AND #$FFFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0636.w		; AD 36 06 ; Load $0636.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0ABAD6.l,X		; DF D6 BA 0A ; Compare accumulator (long,X) $0ABAD6.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0ABAC6.l,X		; 7F C6 BA 0A ; Add long $0ABAC6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $063A.w		; 8D 3A 06 ; Store accumulator to $063A.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0ABAD6.l,X		; DF D6 BA 0A ; Compare accumulator (long,X) $0ABAD6.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0ABAC6.l,X		; 7F C6 BA 0A ; Add long $0ABAC6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $BF66.w		; 20 66 BF ; Jump to subroutine at $BF66.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	lda $7EC380.l,X		; BF 80 C3 7E ; Load long $7EC380.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	lda $7EC400.l,X		; BF 00 C4 7E ; Load long $7EC400.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC600.l,X		; 9F 00 C6 7E ; Store accumulator (long,X) $7EC600.l,X [Reads: Accumulator, X Index]
	lda $7EC480.l,X		; BF 80 C4 7E ; Load long $7EC480.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC680.l,X		; 9F 80 C6 7E ; Store accumulator (long,X) $7EC680.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $DA		; [PATTERN: Memory clearing operation] D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	lda $7EC225.l		; AF 25 C2 7E ; Load long $7EC225.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	stz $E4.b		; 64 E4 ; Store zero to $E4.b
	stz $EA.b		; 64 EA ; Store zero to $EA.b
	lda $7EC200.l		; AF 00 C2 7E ; Load long $7EC200.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $7EC202.l		; AF 02 C2 7E ; Load long $7EC202.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	lda $7EC204.l		; AF 04 C2 7E ; Load long $7EC204.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $7EC206.l		; AF 06 C2 7E ; Load long $7EC206.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	lda $7EC211.l		; AF 11 C2 7E ; Load long $7EC211.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda #$BDDD.w		; A9 DD BD ; Load #$BDDD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMASRC7L.w		; 8D 72 43 ; Store accumulator to DMASRC7L.w [Reads: Accumulator]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	stx DMASRC7B.w		; 8E 74 43 ; Store X register to DMASRC7B.w [Reads: X Index]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	stx DMALEN7B.w		; 8E 77 43 ; Store X register to DMALEN7B.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BGMODE.w		; [PATTERN: Memory clearing operation] 8D 05 21 ; Store accumulator to BGMODE.w [Reads: Accumulator]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	stz $0AB2.w		; [PATTERN: Memory clearing operation] 9C B2 0A ; Store zero to $0AB2.w
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; [PATTERN: Memory clearing operation] 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $1000.w		; 9C 00 10 ; Store zero to $1000.w
	stz $1001.w		; 9C 01 10 ; Store zero to $1001.w
	lda $7EC229.l		; AF 29 C2 7E ; Load long $7EC229.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$F3.b		; A9 F3 ; Load #$F3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda #$00C8.w		; A9 C8 00 ; Load #$00C8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $063A.w		; 8D 3A 06 ; Store accumulator to $063A.w [Reads: Accumulator]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0638.w		; 8D 38 06 ; Store accumulator to $0638.w [Reads: Accumulator]
	lda #$1B42.w		; A9 42 1B ; Load #$1B42.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMAP6.w		; [PATTERN: Memory clearing operation] 8D 60 43 ; Store accumulator to DMAP6.w [Reads: Accumulator]
	lda #$1E42.w		; A9 42 1E ; Load #$1E42.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMAP7.w		; 8D 70 43 ; Store accumulator to DMAP7.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $96.b		; 64 96 ; Store zero to $96.b
	stz $97.b		; 64 97 ; Store zero to $97.b
	stz $98.b		; [PATTERN: Memory clearing operation] 64 98 ; Store zero to $98.b
	stz $1E.b		; 64 1E ; Store zero to $1E.b
	stz $1F.b		; 64 1F ; Store zero to $1F.b
	stz M7B.w		; 9C 1C 21 ; Store zero to M7B.w
	stz M7B.w		; 9C 1C 21 ; Store zero to M7B.w
	stz M7C.w		; [PATTERN: Memory clearing operation] 9C 1D 21 ; Store zero to M7C.w
	stz M7C.w		; 9C 1D 21 ; Store zero to M7C.w
	stz M7X.w		; 9C 1F 21 ; Store zero to M7X.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta M7X.w		; 8D 1F 21 ; Store accumulator to M7X.w [Reads: Accumulator]
	stz M7Y.w		; 9C 20 21 ; Store zero to M7Y.w
	sta M7Y.w		; 8D 20 21 ; Store accumulator to M7Y.w [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $79		; F0 79 ; Branch if equal to $F0, $79 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $BD76.w		; 4C 76 BD ; Jump to $BD76.w [Flow: jump]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0635.w		; 8D 35 06 ; Store accumulator to $0635.w [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0637.w		; 8D 37 06 ; Store accumulator to $0637.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0636.w		; 8D 36 06 ; Store accumulator to $0636.w [Reads: Accumulator]
.ACCU 16
	rep #$21		; C2 21
	lda $7EC108.l		; AF 08 C1 7E ; Load long $7EC108.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0048.w		; E9 48 00 ; Subtract #$0048.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$FFFE.w		; 29 FE FF ; Logical AND #$FFFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0ABAC6.l		; 6F C6 BA 0A ; Add with carry (long) $0ABAC6.l [Writes: Accumulator] [Flags: ZVNC]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $063A.w		; 8D 3A 06 ; Store accumulator to $063A.w [Reads: Accumulator]
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx $03.b		; A6 03 ; Load $03.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$FFFE.w		; 29 FE FF ; Logical AND #$FFFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda #$BDD6.w		; A9 D6 BD ; Load #$BDD6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMASRC6L.w		; 8D 62 43 ; Store accumulator to DMASRC6L.w [Reads: Accumulator]
	sta DMASRC7L.w		; 8D 72 43 ; Store accumulator to DMASRC7L.w [Reads: Accumulator]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	stx DMASRC6B.w		; 8E 64 43 ; Store X register to DMASRC6B.w [Reads: X Index]
	stx DMASRC7B.w		; 8E 74 43 ; Store X register to DMASRC7B.w [Reads: X Index]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	.db $80, $39		; 80 39 ; Branch always to $80, $39 [Flow: branch]
.ACCU 16
	rep #$21		; C2 21
	lda #$BDDD.w		; A9 DD BD ; Load #$BDDD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMASRC6L.w		; 8D 62 43 ; Store accumulator to DMASRC6L.w [Reads: Accumulator]
	sta DMASRC7L.w		; 8D 72 43 ; Store accumulator to DMASRC7L.w [Reads: Accumulator]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	stx DMASRC6B.w		; 8E 64 43 ; Store X register to DMASRC6B.w [Reads: X Index]
	stx DMASRC7B.w		; 8E 74 43 ; Store X register to DMASRC7B.w [Reads: X Index]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	lda #$8D04.w		; A9 04 8D ; Load #$8D04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $06.b,X		; 35 06 ; Logical AND $06.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$8D21.w		; A9 21 8D ; Load #$8D21.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and [$06.b],Y		; 37 06 ; AND accumulator with memory (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $0636.w		; 9C 36 06 ; Store zero to $0636.w
.ACCU 16
	rep #$21		; C2 21
	lda #$BDCF.w		; A9 CF BD ; Load #$BDCF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMASRC6L.w		; 8D 62 43 ; Store accumulator to DMASRC6L.w [Reads: Accumulator]
	sta DMASRC7L.w		; 8D 72 43 ; Store accumulator to DMASRC7L.w [Reads: Accumulator]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	stx DMASRC6B.w		; 8E 64 43 ; Store X register to DMASRC6B.w [Reads: X Index]
	stx DMASRC7B.w		; 8E 74 43 ; Store X register to DMASRC7B.w [Reads: X Index]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	stx DMALEN6B.w		; 8E 67 43 ; Store X register to DMALEN6B.w [Reads: X Index]
	stx DMALEN7B.w		; 8E 77 43 ; Store X register to DMALEN7B.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$00EF.w		; A9 EF 00 ; Load #$00EF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz VMAIN.w		; 9C 15 21 ; Store zero to VMAIN.w
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	lda #$1808.w		; A9 08 18 ; Load #$1808.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMAP1.w		; 8D 10 43 ; Store accumulator to DMAP1.w [Reads: Accumulator]
	stz DMASRC1B.w		; 9C 14 43 ; Store zero to DMASRC1B.w
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMASRC1L.w		; 8D 12 43 ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMALEN1L.w		; 8D 15 43 ; Store accumulator to DMALEN1L.w [Reads: Accumulator]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	cmp $07F0.w,X		; DD F0 07 ; Compare accumulator $07F0.w,X [Reads: X Index] [Flags: ZNC]
	dec $F000.w,X		; DE 00 F0 ; Decrement memory $F000.w,X [Reads: X Index] [Flags: ZN]
	sbc [$DE.b]		; E7 DE ; Subtract with carry (long) [$DE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $C7		; F0 C7 ; Branch if equal to $F0, $C7 [Flow: branch]
	cmp $00F000.l,X		; DF 00 F0 00 ; Compare accumulator (long,X) $00F000.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F31.w		; 0D 31 0F ; Logical OR $0F31.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $E000.w		; 6D 00 E0 ; Add $E000.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora [$40.b]		; 07 40 ; OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $DC0F40.l		; 0F 40 0F DC ; OR accumulator with memory (long) $DC0F40.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	jsr $7006.w		; 20 06 70 ; Jump to subroutine at $7006.w [Writes: Stack Pointer] [Flow: call]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $20.b		; 06 20 ; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: ZNC]
	asl $20.b		; 06 20 ; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: ZNC]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0008D0.l,X		; FF D0 08 00 ; Subtract with carry (long,X) $0008D0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000082.l,X		; FF 82 00 00 ; Subtract with carry (long,X) $000082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $80FF00.l,X		; FF 00 FF 80 ; Subtract with carry (long,X) $80FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0000B0.l,X		; FF B0 00 00 ; Subtract with carry (long,X) $0000B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $08FF00.l,X		; FF 00 FF 08 ; Subtract with carry (long,X) $08FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000F11.l,X		; FF 11 0F 00 ; Subtract with carry (long,X) $000F11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $70FF00.l,X		; FF 00 FF 70 ; Subtract with carry (long,X) $70FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF00.w		; 0D 00 FF ; Logical OR $FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0000.w		; 6D 00 00 ; Add $0000.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0001D0.l,X		; FF D0 01 00 ; Subtract with carry (long,X) $0001D0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $70FF00.l,X		; FF 00 FF 70 ; Subtract with carry (long,X) $70FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000780.l,X		; FF 80 07 00 ; Subtract with carry (long,X) $000780.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A0FF00.l,X		; FF 00 FF A0 ; Subtract with carry (long,X) $A0FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $FF00.w		; 0C 00 FF ; Test and set bits $FF00.w [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$0D.b		; A0 0D ; Load #$0D.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0007.w,Y		; 59 07 00 ; Exclusive OR accumulator with memory $0007.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D0FF00.l,X		; FF 00 FF D0 ; Subtract with carry (long,X) $D0FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FF00.w		; 0E 00 FF ; Arithmetic shift left $FF00.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $62.b,X		; 34 62 ; Test bits $62.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($66.b)		; 32 66 ; AND accumulator with memory (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($66.b)		; 32 66 ; AND accumulator with memory (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($60.b)		; 32 60 ; AND accumulator with memory (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $60.b,X		; 34 60 ; Test bits $60.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $62.b,X		; 34 62 ; Test bits $62.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc #$78.b		; 69 78 ; Add #$78.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$34.b		; 69 34 ; Add #$34.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stz $F4.b,X		; 74 F4 ; Store zero to $F4.b,X [Reads: X Index]
	ldy $A5.b,X		; B4 A5 ; Load Y register $A5.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $1F		; 90 1F ; Branch if carry clear to $90, $1F [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$3E.b		; A9 3E ; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	lda $7EC108.l		; AF 08 C1 7E ; Load long $7EC108.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC109.l		; AF 09 C1 7E ; Load long $7EC109.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC10B.l		; AF 0B C1 7E ; Load long $7EC10B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $008A.w		; AD 8A 00 ; Load $008A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $55		; B0 55 ; Branch if carry set to $B0, $55 [Flow: branch]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $1AB0.w,X		; BD B0 1A ; Load $1AB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1AC0.w,X		; 1D C0 1A ; OR accumulator with memory $1AC0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1AD0.w,X		; 1D D0 1A ; OR accumulator with memory $1AD0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1AE0.w,X		; 1D E0 1A ; OR accumulator with memory $1AE0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $1AF0.w,X		; BD F0 1A ; Load $1AF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1AF0.w,X		; 9D F0 1A ; Store accumulator to $1AF0.w,X [Reads: Accumulator, X Index]
	lda $1AB0.w,X		; BD B0 1A ; Load $1AB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $1AC0.w,X		; BD C0 1A ; Load $1AC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $1AD0.w,X		; BD D0 1A ; Load $1AD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $1AE0.w,X		; BD E0 1A ; Load $1AE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $19		; 90 19 ; Branch if carry clear to $90, $19 [Flow: branch]
	lda #$6A.b		; A9 6A ; Load #$6A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF62.l,X		; BF 62 BF 0A ; Load long $0ABF62.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF2DB.l		; AF DB F2 7E ; Load long $7EF2DB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $0FFF.w		; 4D FF 0F ; Exclusive OR $0FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $C38A.w		; 4C 8A C3 ; Jump to $C38A.w [Flow: jump]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C5A9.w		; 20 A9 C5 ; Jump to subroutine at $C5A9.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $7A		; B0 7A ; Branch if carry set to $B0, $7A [Flow: branch]
	jsr $C5C6.w		; 20 C6 C5 ; Jump to subroutine at $C5C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $75		; B0 75 ; Branch if carry set to $B0, $75 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABDE5.l,X		; BF E5 BD 0A ; Load long $0ABDE5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0ABDE4.l,X		; BF E4 BD 0A ; Load long $0ABDE4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0ABDF7.l,X		; BF F7 BD 0A ; Load long $0ABDF7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	lda $0ABDF6.l,X		; BF F6 BD 0A ; Load long $0ABDF6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0ABEE1.l,X		; BF E1 BE 0A ; Load long $0ABEE1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsr $C589.w		; 20 89 C5 ; Jump to subroutine at $C589.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABEE1.l,X		; BF E1 BE 0A ; Load long $0ABEE1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0ABEE0.l,X		; BF E0 BE 0A ; Load long $0ABEE0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF5E.l,X		; BF 5E BF 0A ; Load long $0ABF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C5A9.w		; 20 A9 C5 ; Jump to subroutine at $C5A9.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $78		; B0 78 ; Branch if carry set to $B0, $78 [Flow: branch]
	jsr $C5C6.w		; 20 C6 C5 ; Jump to subroutine at $C5C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $73		; B0 73 ; Branch if carry set to $B0, $73 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABE09.l,X		; BF 09 BE 0A ; Load long $0ABE09.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $67		; 30 67 ; Branch if minus to $30, $67 [Flow: branch]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0ABE08.l,X		; BF 08 BE 0A ; Load long $0ABE08.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0ABE1B.l,X		; BF 1B BE 0A ; Load long $0ABE1B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	lda $0ABE1A.l,X		; BF 1A BE 0A ; Load long $0ABE1A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0ABEF3.l,X		; BF F3 BE 0A ; Load long $0ABEF3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	jsr $C589.w		; 20 89 C5 ; Jump to subroutine at $C589.w [Writes: Stack Pointer] [Flow: call]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABEF3.l,X		; BF F3 BE 0A ; Load long $0ABEF3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0ABEF2.l,X		; BF F2 BE 0A ; Load long $0ABEF2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF5E.l,X		; BF 5E BF 0A ; Load long $0ABF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$0D.b		; A2 0D ; Load #$0D.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C5A9.w		; 20 A9 C5 ; Jump to subroutine at $C5A9.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $7A		; B0 7A ; Branch if carry set to $B0, $7A [Flow: branch]
	jsr $C5C6.w		; 20 C6 C5 ; Jump to subroutine at $C5C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $75		; B0 75 ; Branch if carry set to $B0, $75 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABE2D.l,X		; BF 2D BE 0A ; Load long $0ABE2D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0ABE2C.l,X		; BF 2C BE 0A ; Load long $0ABE2C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0ABE3F.l,X		; BF 3F BE 0A ; Load long $0ABE3F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	lda $0ABE3E.l,X		; BF 3E BE 0A ; Load long $0ABE3E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0ABF05.l,X		; BF 05 BF 0A ; Load long $0ABF05.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsr $C589.w		; 20 89 C5 ; Jump to subroutine at $C589.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF05.l,X		; BF 05 BF 0A ; Load long $0ABF05.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0ABF04.l,X		; BF 04 BF 0A ; Load long $0ABF04.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF5E.l,X		; BF 5E BF 0A ; Load long $0ABF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C5C6.w		; 20 C6 C5 ; Jump to subroutine at $C5C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $75		; B0 75 ; Branch if carry set to $B0, $75 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABE51.l,X		; BF 51 BE 0A ; Load long $0ABE51.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0ABE50.l,X		; BF 50 BE 0A ; Load long $0ABE50.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0ABE63.l,X		; BF 63 BE 0A ; Load long $0ABE63.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	lda $0ABE62.l,X		; BF 62 BE 0A ; Load long $0ABE62.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0ABF17.l,X		; BF 17 BF 0A ; Load long $0ABF17.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsr $C589.w		; 20 89 C5 ; Jump to subroutine at $C589.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF17.l,X		; BF 17 BF 0A ; Load long $0ABF17.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0ABF16.l,X		; BF 16 BF 0A ; Load long $0ABF16.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF5E.l,X		; BF 5E BF 0A ; Load long $0ABF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C5C6.w		; 20 C6 C5 ; Jump to subroutine at $C5C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $75		; B0 75 ; Branch if carry set to $B0, $75 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABE75.l,X		; BF 75 BE 0A ; Load long $0ABE75.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0ABE74.l,X		; BF 74 BE 0A ; Load long $0ABE74.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0ABE87.l,X		; BF 87 BE 0A ; Load long $0ABE87.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	lda $0ABE86.l,X		; BF 86 BE 0A ; Load long $0ABE86.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0ABF29.l,X		; BF 29 BF 0A ; Load long $0ABF29.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsr $C589.w		; 20 89 C5 ; Jump to subroutine at $C589.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF29.l,X		; BF 29 BF 0A ; Load long $0ABF29.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0ABF28.l,X		; BF 28 BF 0A ; Load long $0ABF28.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF5E.l,X		; BF 5E BF 0A ; Load long $0ABF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C5C6.w		; 20 C6 C5 ; Jump to subroutine at $C5C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $75		; B0 75 ; Branch if carry set to $B0, $75 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABE99.l,X		; BF 99 BE 0A ; Load long $0ABE99.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0ABE98.l,X		; BF 98 BE 0A ; Load long $0ABE98.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0ABEAB.l,X		; BF AB BE 0A ; Load long $0ABEAB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	lda $0ABEAA.l,X		; BF AA BE 0A ; Load long $0ABEAA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0ABF3B.l,X		; BF 3B BF 0A ; Load long $0ABF3B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsr $C589.w		; 20 89 C5 ; Jump to subroutine at $C589.w [Writes: Stack Pointer] [Flow: call]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF3B.l,X		; BF 3B BF 0A ; Load long $0ABF3B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0ABF3A.l,X		; BF 3A BF 0A ; Load long $0ABF3A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF5E.l,X		; BF 5E BF 0A ; Load long $0ABF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C5C6.w		; 20 C6 C5 ; Jump to subroutine at $C5C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $75		; B0 75 ; Branch if carry set to $B0, $75 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABEBD.l,X		; BF BD BE 0A ; Load long $0ABEBD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	lda $0ABEBC.l,X		; BF BC BE 0A ; Load long $0ABEBC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0ABECF.l,X		; BF CF BE 0A ; Load long $0ABECF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	lda $0ABECE.l,X		; BF CE BE 0A ; Load long $0ABECE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $0ABF4D.l,X		; BF 4D BF 0A ; Load long $0ABF4D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsr $C589.w		; 20 89 C5 ; Jump to subroutine at $C589.w [Writes: Stack Pointer] [Flow: call]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C39F.w		; 20 9F C3 ; Jump to subroutine at $C39F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF4D.l,X		; BF 4D BF 0A ; Load long $0ABF4D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0ABF4C.l,X		; BF 4C BF 0A ; Load long $0ABF4C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABF5E.l,X		; BF 5E BF 0A ; Load long $0ABF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C51C.w		; 20 1C C5 ; Jump to subroutine at $C51C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC10B.l		; 8F 0B C1 7E ; Store accumulator (long) $7EC10B.l [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC109.l		; 8F 09 C1 7E ; Store accumulator (long) $7EC109.l [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0636.w		; AD 36 06 ; Load $0636.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $7D		; D0 7D ; Branch if not equal to $D0, $7D [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EC108.l		; AF 08 C1 7E ; Load long $7EC108.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $063A.w		; 6D 3A 06 ; Add $063A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00C0.w		; E9 C0 00 ; Subtract #$00C0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $0AC5DA.l,X		; BF DA C5 0A ; Load long $0AC5DA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	jsr $C580.w		; 20 80 C5 ; Jump to subroutine at $C580.w [Writes: Stack Pointer] [Flow: call]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda #$54.b		; A9 54 ; Load #$54.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E0.b		; E5 E0 ; Subtract $E0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	jmp $C50D.w		; 4C 0D C5 ; Jump to $C50D.w [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EC108.l		; AF 08 C1 7E ; Load long $7EC108.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $063A.w		; 6D 3A 06 ; Add $063A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $C511.w		; 4C 11 C5 ; Jump to $C511.w [Flow: jump]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	jsr $C580.w		; 20 80 C5 ; Jump to subroutine at $C580.w [Writes: Stack Pointer] [Flow: call]
.INDEX 16
	rep #$10		; C2 10
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx #$014D.w		; E0 4D 01 ; Compare #$014D.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $C511.w		; 4C 11 C5 ; Jump to $C511.w [Flow: jump]
	lda $0AC5DA.l,X		; BF DA C5 0A ; Load long $0AC5DA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$07F8.w		; E9 F8 07 ; Subtract #$07F8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
	sep #$20		; E2 20
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$E2.b		; C9 E2 ; Compare #$E2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda #$54.b		; A9 54 ; Load #$54.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $20E21A.l,X		; FF 1A E2 20 ; Subtract with carry (long,X) $20E21A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C56D.w		; 20 6D C5 ; Jump to subroutine at $C56D.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E0.b		; E5 E0 ; Subtract $E0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$FF80.w		; E9 80 FF ; Subtract #$FF80.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E0.b		; E5 E0 ; Subtract $E0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$81.b		; 69 81 ; Add #$81.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $6F6E.w,Y		; 79 6E 6F ; Add $6F6E.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $6C7C.w		; 6D 7C 6C ; Add $6C7C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $4A1AA5.l,X		; 7F A5 1A 4A ; Add long $4A1AA5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $0AC50D.l,X		; BF 0D C5 0A ; Load long $0AC50D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0A20.w,X		; 9E 20 0A ; Store zero to $0A20.w,X [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; 9D 03 08 ; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda RDMPYL.w		; AD 16 42 ; Load RDMPYL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0004.w		; E9 04 00 ; Subtract #$0004.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $7EC108.l		; AF 08 C1 7E ; Load long $7EC108.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0004.w		; E9 04 00 ; Subtract #$0004.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	cop $AF.b		; 02 AF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$F3.b]		; C7 F3 ; Compare accumulator (long) [$F3.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ror $03C9.w,X		; 7E C9 03 ; Rotate right $03C9.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0AC5A6.l,X		; 3F A6 C5 0A ; AND accumulator with memory (long,X) $0AC5A6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $0401.w		; 20 01 04 ; Jump to subroutine at $0401.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	cmp [$F3.b]		; C7 F3 ; Compare accumulator (long) [$F3.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ror $07C9.w,X		; 7E C9 07 ; Rotate right $07C9.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0AC5BF.l,X		; 3F BF C5 0A ; AND accumulator with memory (long,X) $0AC5BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E5		; F0 E5 ; Branch if equal to $F0, $E5 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: ZNC]
	dec $DCDD.w,X		; DE DD DC ; Decrement memory $DCDD.w,X [Reads: X Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp [$D6.b],Y		; D7 D6 ; Compare accumulator (long indexed) [$D6.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $D4.b,X		; D5 D4 ; Compare accumulator $D4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp ($D2.b,S),Y		; D3 D2 ; Compare accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($D0.b),Y		; D1 D0 ; Compare accumulator ($D0.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $CCCDCE.l		; CF CE CD CC ; Compare accumulator (long) $CCCDCE.l [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$C7.b		; C9 C7 ; Compare #$C7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $C5.b		; C6 C5 ; Decrement $C5.b [Reads: Direct Page] [Flags: ZN]
	cpy $C3.b		; C4 C3 ; Compare $C3.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	rep #$C1		; C2 C1 ; Reset processor status bits #$C1 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpy #$BF.b		; C0 BF ; Compare #$BF.b with Y register [Reads: Y Index] [Flags: ZNC]
	ldx $BCBD.w,Y		; BE BD BC ; Load X register $BCBD.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	lda $B7B8.w,Y		; B9 B8 B7 ; Load $B7B8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $B5.b,Y		; B6 B5 ; Load X register $B5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldy $B3.b,X		; B4 B3 ; Load Y register $B3.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($B1.b)		; B2 B1 ; Load accumulator (indirect) ($B1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	ldx $ACAD.w		; AE AD AC ; Load $ACAD.w into X register [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$A8.b		; A9 A8 ; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $9C9D9E.l,X		; 9F 9E 9D 9C ; Store accumulator (long,X) $9C9D9E.l,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $9798.w,Y		; 99 98 97 ; Store accumulator to $9798.w,Y [Reads: Accumulator, Y Index]
	stx $95.b,Y		; 96 95 ; Store X register $95.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $93.b,X		; 94 93 ; Store Y register $93.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($91.b)		; 92 91 ; Store accumulator (indirect) ($91.b) [Reads: Accumulator, Direct Page]
	.db $90, $8F		; 90 8F ; Branch if carry clear to $90, $8F [Flow: branch]
	stx $8C8D.w		; 8E 8D 8C ; Store X register to $8C8D.w [Reads: X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit #$88.b		; 89 88 ; Test bits #$88.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Accumulator, Direct Page]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sta $82.b,S		; 83 82 ; Store accumulator (stack relative) $82.b,S [Reads: Accumulator, Stack Pointer]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	ror $7C7D.w,X		; 7E 7D 7C ; Rotate right $7C7D.w,X [Reads: X Index] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	adc $7879.w,Y		; 79 79 78 ; Add $7879.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$76.b],Y		; 77 76 ; Add with carry (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $74.b,X		; 75 74 ; Add $74.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($72.b,S),Y		; 73 72 ; Add with carry (stack relative indirect indexed) ($72.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($71.b)		; 72 71 ; Add with carry (indirect) ($71.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $6F		; 70 6F ; Branch if overflow set to $70, $6F [Flow: branch]
	ror $6C6D.w		; 6E 6D 6C ; Rotate right $6C6D.w [Flags: ZNC]
	jmp ($6A6B.w)		; 6C 6B 6A ; Jump indirect to ($6A6B.w) [Flow: jump]
	adc #$68.b		; 69 68 ; Add #$68.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc [$67.b]		; 67 67 ; Add with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $65.b		; 66 65 ; Rotate right $65.b [Reads: Direct Page] [Flags: ZNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $5D5D5E.l,X		; 5F 5E 5D 5D ; Exclusive OR accumulator with memory (long,X) $5D5D5E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $595A5B.l		; 5C 5B 5A 59 ; Jump long to $595A5B.l [Flow: jump]
	eor $5758.w,Y		; 59 58 57 ; Exclusive OR accumulator with memory $5758.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $55.b,X		; 56 55 ; Logical shift right $55.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $54.b,X		; 55 54 ; Exclusive OR accumulator with memory $54.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $4F		; 50 4F ; Branch if overflow clear to $50, $4F [Flow: branch]
	lsr $4D4E.w		; 4E 4E 4D ; Logical shift right $4D4E.w [Flags: ZNC]
	jmp $4A4B.w		; 4C 4B 4A ; Jump to $4A4B.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	mvp $43,$44		; 44 44 43 ; Move block positive $43,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($40.b,X)		; 41 40 ; Exclusive OR accumulator with memory ($40.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3D3E3E.l,X		; 3F 3E 3E 3D ; AND accumulator with memory (long,X) $3D3E3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $3B3C.w,X		; 3C 3C 3B ; Test bits $3B3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $3839.w,Y		; 39 39 38 ; AND accumulator with memory $3839.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$36.b],Y		; 37 36 ; AND accumulator with memory (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $35.b,X		; 36 35 ; Rotate left $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $2F		; 30 2F ; Branch if minus to $30, $2F [Flow: branch]
	and $2D2D2E.l		; 2F 2E 2D 2D ; AND accumulator with memory (long) $2D2D2E.l [Writes: Accumulator] [Flags: ZN]
	bit $2B2B.w		; 2C 2B 2B ; Test bits $2B2B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$29.b		; 29 29 ; Logical AND #$29.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $202121.l		; 22 21 21 20 ; Jump to subroutine long $202121.l [Writes: Stack Pointer] [Flow: call]
	ora $1D1E1F.l,X		; 1F 1F 1E 1D ; Logical OR long $1D1E1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1C.w,X		; 1D 1C 1C ; OR accumulator with memory $1C1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $1818.w,Y		; 19 18 18 ; OR accumulator with memory $1818.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $14.b,X		; 15 14 ; OR accumulator with memory $14.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	ora $0D0E0E.l		; 0F 0E 0E 0D ; OR accumulator with memory (long) $0D0E0E.l [Writes: Accumulator] [Flags: ZN]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZNC]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FDFEFE.l,X		; FF FE FE FD ; Subtract with carry (long,X) $FDFEFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FBFC.w,X)		; FC FC FB ; Jump to subroutine indirect indexed ($FBFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $F8F9.w,Y		; F9 F9 F8 ; Subtract with carry $F8F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $F5.b,X		; F6 F5 ; Increment memory $F5.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	pea $F3F4.w		; F4 F4 F3 ; Push absolute address $F3F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EDEEEE.l		; EF EE EE ED ; Subtract with carry (long) $EDEEEE.l [Writes: Accumulator] [Flags: ZVNC]
	cpx $EAEB.w		; EC EB EA ; Compare $EAEB.w with X register [Reads: X Index] [Flags: ZNC]
	sbc #$E8.b		; E9 E8 ; Subtract #$E8.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc [$E6.b]		; E7 E6 ; Subtract with carry (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E4.b		; E5 E4 ; Subtract $E4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E2.b,S		; E3 E2 ; Subtract stack-relative $E2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($E0.b,X)		; E1 E0 ; Subtract with carry ($E0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0809.w		; 2C 09 08 ; Test bits $0809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0809.w		; 2C 09 08 ; Test bits $0809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C2D.w		; 2C 2D 2C ; Test bits $2C2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0809.w		; 2C 09 08 ; Test bits $0809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2B28.w		; 2C 28 2B ; Test bits $2B28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2829.w		; 2C 29 28 ; Test bits $2829.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0809.w		; 2C 09 08 ; Test bits $0809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol $2C2D.w		; 2E 2D 2C ; Rotate left $2C2D.w [Flags: ZNC]
	and $2D2C.w		; 2D 2C 2D ; Logical AND $2D2C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C28.w		; 2C 28 2C ; Test bits $2C28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $282828.l		; 2F 28 28 28 ; AND accumulator with memory (long) $282828.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $1B09.w		; 2C 09 1B ; Test bits $1B09.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $282828.l		; 2F 28 28 28 ; AND accumulator with memory (long) $282828.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $2828.w,Y		; 19 28 28 ; OR accumulator with memory $2828.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2829.w		; 2C 29 28 ; Test bits $2829.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $1B2F28.l		; 2F 28 2F 1B ; AND accumulator with memory (long) $1B2F28.l [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $082F28.l		; 2F 28 2F 08 ; AND accumulator with memory (long) $082F28.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $282E.w		; 2C 2E 28 ; Test bits $282E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $1B38.w		; 2C 38 1B ; Test bits $1B38.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $1F1D.w		; 1C 1D 1F ; Test and reset bits $1F1D.w [Reads: Accumulator] [Flags: Z]
	asl $1B1A.w,X		; 1E 1A 1B ; Arithmetic shift left $1B1A.w,X [Reads: X Index] [Flags: ZNC]
	trb $1A1D.w		; 1C 1D 1A ; Test and reset bits $1A1D.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $282F28.l		; 2F 28 2F 28 ; AND accumulator with memory (long) $282F28.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol $1E19.w		; 2E 19 1E ; Rotate left $1E19.w [Flags: ZNC]
	ora $1E1414.l,X		; 1F 14 14 1E ; Logical OR long $1E1414.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1E1F1E.l,X		; 1F 1E 1F 1E ; Logical OR long $1E1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $283B.w,X		; 3C 3B 28 ; Test bits $283B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol $260B.w		; 2E 0B 26 ; Rotate left $260B.w [Flags: ZNC]
	and [$14.b]		; 27 14 ; AND accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $24.b		; 26 24 ; Rotate left $24.b [Reads: Direct Page] [Flags: ZNC]
	and $56.b		; 25 56 ; Logical AND $56.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $5B.b,X		; 35 5B ; Logical AND $5B.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($74.b,S),Y		; 73 74 ; Add with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2B28.w		; 2C 28 2B ; Test bits $2B28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $1B2E.w		; 2C 2E 1B ; Test bits $1B2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol $37.b,X		; 36 37 ; Rotate left $37.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	bit $A7.b,X		; 34 A7 ; Test bits $A7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $5B.b		; 64 5B ; Store zero to $5B.b
	.db $90, $73		; 90 73 ; Branch if carry clear to $90, $73 [Flow: branch]
	adc ($52.b,S),Y		; 73 52 ; Add with carry (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $141F1B.l		; 2F 1B 1F 14 ; AND accumulator with memory (long) $141F1B.l [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $E4.b,X		; 34 E4 ; Test bits $E4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $82		; 90 82 ; Branch if carry clear to $90, $82 [Flow: branch]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Accumulator, Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$2C.b		; 29 2C ; Logical AND #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $A514.w,Y		; 19 14 A5 ; OR accumulator with memory $A514.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $DF.b,Y		; B6 DF ; Load X register $DF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	.db $82, $B2, $93		; 82 B2 93 ; Branch always long to $82, $B2, $93 [Flow: branch]
	dec $D6.b,X		; D6 D6 ; Decrement memory $D6.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $1B09.w		; 2C 09 1B ; Test bits $1B09.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $34.b,X		; 15 34 ; OR accumulator with memory $34.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$82.b]		; A7 82 ; Load accumulator (long) [$82.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($D6.b)		; B2 D6 ; Load accumulator (indirect) ($D6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($2B.b,S),Y		; 93 2B ; Store accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $1414.w,Y		; 19 14 14 ; OR accumulator with memory $1414.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	rol $05.b,X		; 36 05 ; Rotate left $05.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $B0.b,X		; 34 B0 ; Test bits $B0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $D6.b,X		; D6 D6 ; Decrement memory $D6.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $82, $83, $83		; 82 83 83 ; Branch always long to $82, $83, $83 [Flow: branch]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0B2B.w		; 2C 2B 0B ; Test bits $0B2B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $33.b,X		; 15 33 ; OR accumulator with memory $33.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $B2		; 90 B2 ; Branch if carry clear to $90, $B2 [Flow: branch]
	dec $93.b,X		; D6 93 ; Decrement memory $93.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $14141B.l		; 2F 1B 14 14 ; AND accumulator with memory (long) $14141B.l [Writes: Accumulator] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	ora $A6.b,X		; 15 A6 ; OR accumulator with memory $A6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $82.b,X		; 34 82 ; Test bits $82.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Accumulator, Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1B.b		; 29 1B ; Logical AND #$1B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $262726.l,X		; 1F 26 27 26 ; Logical OR long $262726.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp $25.b,X		; D5 25 ; Compare accumulator $25.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $B0.b,X		; 34 B0 ; Test bits $B0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta ($71.b,S),Y		; 93 71 ; Store accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($28.b,S),Y		; 93 28 ; Store accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $282C28.l		; 2F 28 2C 28 ; AND accumulator with memory (long) $282C28.l [Writes: Accumulator] [Flags: ZN]
	bit $1419.w		; 2C 19 14 ; Test bits $1419.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $33.b,X		; 15 33 ; OR accumulator with memory $33.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($33.b,X)		; 41 33 ; Exclusive OR accumulator with memory ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $303434.l,X		; BF 34 34 30 ; Load long $303434.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $81.b,S		; 23 81 ; AND accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $28.b,S		; 23 28 ; AND accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $281A1B.l		; 2F 1B 1A 28 ; AND accumulator with memory (long) $281A1B.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $15141B.l		; 2F 1B 14 15 ; AND accumulator with memory (long) $15141B.l [Writes: Accumulator] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $A6BD.w,X		; BC BD A6 ; Load Y register $A6BD.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda [$34.b]		; A7 34 ; Load accumulator (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($33.b,X)		; 41 33 ; Exclusive OR accumulator with memory ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	bit $C0.b,X		; 34 C0 ; Test bits $C0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $29.b,X		; 34 29 ; Test bits $29.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $280A.w,Y		; 19 0A 28 ; OR accumulator with memory $280A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $141F1B.l		; 2F 1B 1F 14 ; AND accumulator with memory (long) $141F1B.l [Writes: Accumulator] [Flags: ZN]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $05.b,X		; 36 05 ; Rotate left $05.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	cmp $D0.b,S		; C3 D0 ; Compare accumulator (stack relative) $D0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $2C28.w		; 2D 28 2C ; Logical AND $2C28.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $141F1B.l		; 2F 1B 1F 14 ; AND accumulator with memory (long) $141F1B.l [Writes: Accumulator] [Flags: ZN]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	and $25.b,S		; 23 25 ; AND accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $C0.b		; 25 C0 ; Logical AND $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $FB.b		; A6 FB ; Load $FB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $8B6E.w,X		; 3D 6E 8B ; AND accumulator with memory $8B6E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0809.w		; 2C 09 08 ; Test bits $0809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$1B.b		; 29 1B ; Logical AND #$1B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $2614A5.l,X		; 1F A5 14 26 ; Logical OR long $2614A5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $31.b		; 25 31 ; Logical AND $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $E4.b,Y		; B6 E4 ; Load X register $E4.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc $C0FE.w,X		; FD FE C0 ; Subtract with carry $C0FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ldx $FB.b		; A6 FB ; Load $FB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	eor $9B7E.w		; 4D 7E 9B ; Exclusive OR $9B7E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $1419.w		; 2C 19 14 ; Test bits $1419.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	ora $34.b,X		; 15 34 ; OR accumulator with memory $34.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($33.b,X)		; 41 33 ; Exclusive OR accumulator with memory ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($C0.b,S),Y		; 33 C0 ; AND accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	lda [$FB.b]		; A7 FB ; Load accumulator (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $CD22.w		; 20 22 CD ; Jump to subroutine at $CD22.w [Writes: Stack Pointer] [Flow: call]
	lda [$3E.b]		; A7 3E ; Load accumulator (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $34.b,X		; 15 34 ; OR accumulator with memory $34.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $89.b,X		; F6 89 ; Increment memory $89.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($F689.w)		; 6C 89 F6 ; Jump indirect to ($F689.w) [Flow: jump]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3E34.w		; CD 34 3E ; Compare $3E34.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C2D.w		; 2C 2D 2C ; Test bits $2C2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $2D2C.w		; 2D 2C 2D ; Logical AND $2D2C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $092E.w		; 2C 2E 09 ; Test bits $092E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $092E.w		; 2C 2E 09 ; Test bits $092E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C28.w		; 2C 28 2C ; Test bits $2C28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$2C.b		; 09 2C ; Logical OR #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2B28.w		; 2C 28 2B ; Test bits $2B28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $282828.l		; 2F 28 28 28 ; AND accumulator with memory (long) $282828.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1B.b		; 29 1B ; Logical AND #$1B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $2D2C.w		; 2D 2C 2D ; Logical AND $2D2C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $28280A.l,X		; 1F 0A 28 28 ; Logical OR long $28280A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $282828.l		; 2F 28 28 28 ; AND accumulator with memory (long) $282828.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $2C28.w		; 2D 28 2C ; Logical AND $2C28.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0A19.w		; 2C 19 0A ; Test bits $0A19.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $281A1B.l		; 2F 1B 1A 28 ; AND accumulator with memory (long) $281A1B.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol $0828.w		; 2E 28 08 ; Rotate left $0828.w [Flags: ZNC]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0A19.w		; 2C 19 0A ; Test bits $0A19.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $4298.w		; 2C 98 42 ; Test bits $4298.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2C.b		; 29 2C ; Logical AND #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($99.b)		; 72 99 ; Add with carry (indirect) ($99.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $73.b,S		; 63 73 ; Add with carry (stack relative) $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($74.b,S),Y		; 73 74 ; Add with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $7372.w		; 2C 72 73 ; Test bits $7372.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $28.b,X		; 74 28 ; Store zero to $28.b,X [Reads: X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	eor ($9A.b)		; 52 9A ; Exclusive OR accumulator with memory (indirect) ($9A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $A0		; 70 A0 ; Branch if overflow set to $70, $A0 [Flow: branch]
	adc ($91.b,S),Y		; 73 91 ; Add with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$90.b		; 09 90 ; Logical OR #$90.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($84.b,X)		; A1 84 ; Load accumulator ($84.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $90, $73		; 90 73 ; Branch if carry clear to $90, $73 [Flow: branch]
	adc ($91.b,S),Y		; 73 91 ; Add with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sty $82.b		; 84 82 ; Store Y register to $82.b [Reads: Y Index]
	sta $52.b,S		; 83 52 ; Store accumulator (stack relative) $52.b,S [Reads: Accumulator, Stack Pointer]
	eor ($83.b)		; 52 83 ; Exclusive OR accumulator with memory (indirect) ($83.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sty $B3.b		; 84 B3 ; Store Y register to $B3.b [Reads: Y Index]
	.db $90, $A1		; 90 A1 ; Branch if carry clear to $90, $A1 [Flow: branch]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $92.b,X		; 94 92 ; Store Y register $92.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($93.b)		; 72 93 ; Add with carry (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda ($A1.b,S),Y		; B3 A1 ; Load accumulator (stack relative indirect indexed) ($A1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $82, $84, $93		; 82 84 93 ; Branch always long to $82, $84, $93 [Flow: branch]
	ldx #$4A.b		; A2 4A ; Load #$4A.b into X register [Writes: X Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	dec $93.b,X		; D6 93 ; Decrement memory $93.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sty $92.b,X		; 94 92 ; Store Y register $92.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	.db $82, $93, $82		; 82 93 82 ; Branch always long to $82, $93, $82 [Flow: branch]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sty $B4.b		; 84 B4 ; Store Y register to $B4.b [Reads: Y Index]
	sty $06.b,X		; 94 06 ; Store Y register $06.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	mvn $4C,$35		; 54 35 4C ; Move block negative $4C,$35 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ldy $90.b,X		; B4 90 ; Load Y register $90.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($93.b)		; B2 93 ; Load accumulator (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($B3.b,S),Y		; 93 B3 ; Store accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda [$95.b],Y		; B7 95 ; Load accumulator (long indexed) [$95.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $3B,$48		; 54 48 3B ; Move block negative $3B,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta ($B3.b,S),Y		; 93 B3 ; Store accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($A1.b,S),Y		; 73 A1 ; Add with carry (stack relative indirect indexed) ($A1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $52.b,S		; 83 52 ; Store accumulator (stack relative) $52.b,S [Reads: Accumulator, Stack Pointer]
	.db $62, $90, $73		; 62 90 73 ; Push effective relative address $62, $90, $73 [Writes: Stack Pointer]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($9F.b),Y		; 91 9F ; Store accumulator ($9F.b),Y [Reads: Accumulator, Direct Page, Y Index]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	mvn $4A,$5C		; 54 5C 4A ; Move block negative $4A,$5C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0809.w		; 2C 09 08 ; Test bits $0809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $82, $83, $83		; 82 83 83 ; Branch always long to $82, $83, $83 [Flow: branch]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lsr $4A.b,X		; 56 4A ; Logical shift right $4A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $9393.w		; 2D 93 93 ; Logical AND $9393.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($A4.b,S),Y		; 93 A4 ; Store accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($A4.b,S),Y		; 93 A4 ; Store accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $93.b,X		; B4 93 ; Load Y register $93.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda [$11.b],Y		; B7 11 ; Load accumulator (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $58,$35		; 54 35 58 ; Move block negative $58,$35 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $4C.b,X		; 56 4C ; Logical shift right $4C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $242E.w		; 2C 2E 24 ; Test bits $242E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvn $3A,$39		; 54 39 3A ; Move block negative $3A,$39 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $2C28.w,Y		; 39 28 2C ; AND accumulator with memory $2C28.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $80B6.w		; 2C B6 80 ; Test bits $80B6.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $80, $B6		; 80 B6 ; Branch always to $80, $B6 [Flow: branch]
	jsr $9507.w		; 20 07 95 ; Jump to subroutine at $9507.w [Writes: Stack Pointer] [Flow: call]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $A7.b,X		; F6 A7 ; Increment memory $A7.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	mvp $41,$45		; 44 45 41 ; Move block positive $41,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and ($54.b),Y		; 31 54 ; AND accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $7A.b,S		; 43 7A ; Exclusive OR accumulator with stack relative $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $4A8E.w		; 8D 8E 4A ; Store accumulator to $4A8E.w [Reads: Accumulator]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $3F6E.w		; 8C 6E 3F ; Store Y register to $3F6E.w [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($54.b)		; 12 54 ; OR accumulator with memory (indirect) ($54.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$9D.b],Y		; 57 9D ; Exclusive OR accumulator with memory (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $C9C8.w,X		; 9D C8 C9 ; Store accumulator to $C9C8.w,X [Reads: Accumulator, X Index]
	and $4C.b,X		; 35 4C ; Logical AND $4C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	stz $4F7E.w		; 9C 7E 4F ; Store zero to $4F7E.w
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	mvn $57,$C7		; 54 C7 57 ; Move block negative $57,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $48.b,X		; 56 48 ; Logical shift right $48.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $89.b,X		; 35 89 ; Logical AND $89.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit #$5C.b		; 89 5C ; Test bits #$5C.b with accumulator [Reads: Accumulator] [Flags: Z]
	and $3B.b,X		; 35 3B ; Logical AND $3B.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lsr $CEA7.w,X		; 5E A7 CE ; Logical shift right $CEA7.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $EE,$C7		; 54 C7 EE ; Move block negative $EE,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $9D9D58.l		; EF 58 9D 9D ; Subtract with carry (long) $9D9D58.l [Writes: Accumulator] [Flags: ZVNC]
	sta $485C.w,X		; 9D 5C 48 ; Store accumulator to $485C.w,X [Reads: Accumulator, X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lsr $CE34.w,X		; 5E 34 CE ; Logical shift right $CE34.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	pea $5422.w		; F4 22 54 ; Push absolute address $5422.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cmp [$89.b]		; C7 89 ; Compare accumulator (long) [$89.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor #$56.b		; 49 56 ; Exclusive OR #$56.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$9D.b],Y		; 57 9D ; Exclusive OR accumulator with memory (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5C.b,X		; 56 5C ; Logical shift right $5C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp $284C35.l		; 5C 35 4C 28 ; Jump long to $284C35.l [Flow: jump]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0B2A.w		; 2C 2A 0B ; Test bits $0B2A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	bit $B6.b,X		; 34 B6 ; Test bits $B6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $3E.b,X		; 34 3E ; Test bits $3E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lsr $8888.w,X		; 5E 88 88 ; Logical shift right $8888.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora ($CD.b)		; 12 CD ; OR accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $3E.b,X		; 34 3E ; Test bits $3E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $150B2A.l		; 2F 2A 0B 15 ; AND accumulator with memory (long) $150B2A.l [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy $BCBD.w,X		; BC BD BC ; Load Y register $BCBD.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $10F6.w,X		; BD F6 10 ; Load $10F6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($BC.b)		; 12 BC ; OR accumulator with memory (indirect) ($BC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $1210.w,X		; BD 10 12 ; Load $1210.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $7D4E.w,X		; 5D 4E 7D ; Exclusive OR accumulator with memory $7D4E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $34251B.l		; 2F 1B 25 34 ; AND accumulator with memory (long) $34251B.l [Writes: Accumulator] [Flags: ZN]
	lda [$34.b]		; A7 34 ; Load accumulator (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $A7.b,X		; 34 A7 ; Test bits $A7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsr $3322.w		; 20 22 33 ; Jump to subroutine at $3322.w [Writes: Stack Pointer] [Flow: call]
	and ($10.b,S),Y		; 33 10 ; AND accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $01.b,X		; 16 01 ; Arithmetic shift left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $664B3C.l		; 2F 3C 4B 66 ; AND accumulator with memory (long) $664B3C.l [Writes: Accumulator] [Flags: ZN]
	cmp $CB0404.l		; CF 04 04 CB ; Compare accumulator (long) $CB0404.l [Reads: Accumulator] [Flags: ZNC]
	tsb $BB.b		; 04 BB ; Test and set bits $BB.b [Reads: Accumulator] [Flags: Z]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $DB.b		; 04 DB ; Test and set bits $DB.b [Reads: Accumulator] [Flags: Z]
	inc $21.b		; E6 21 ; Increment $21.b [Reads: Direct Page] [Flags: ZN]
	and ($60.b,X)		; 21 60 ; Logical AND ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$24.b		; 69 24 ; Add #$24.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $27.b		; 24 27 ; Test bits $27.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	cpy #$13.b		; C0 13 ; Compare #$13.b with Y register [Reads: Y Index] [Flags: ZNC]
	rol $24.b		; 26 24 ; Rotate left $24.b [Reads: Direct Page] [Flags: ZNC]
	bit $27.b		; 24 27 ; Test bits $27.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2B2D.w		; 2C 2D 2B ; Test bits $2B2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $55.b,X		; 35 55 ; Logical AND $55.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $33.b		; E4 33 ; Compare $33.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda [$13.b]		; A7 13 ; Load accumulator (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $3C2F.w		; 2C 2F 3C ; Test bits $3C2F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $55.b,X		; 35 55 ; Logical AND $55.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b,S		; 23 25 ; AND accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($F6.b,S),Y		; 33 F6 ; AND accumulator (stack relative indirect indexed) ($F6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$FB.b]		; A7 FB ; Load accumulator (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $2C.b,X		; 34 2C ; Test bits $2C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $0809.w		; 2E 09 08 ; Rotate left $0809.w [Flags: ZNC]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $354B3C.l		; 2F 3C 4B 35 ; AND accumulator with memory (long) $354B3C.l [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $D2.b,S		; A3 D2 ; Load accumulator (stack relative) $D2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($3623.w,X)		; 7C 23 36 ; Jump indirect indexed to ($3623.w,X) [Reads: X Index] [Flow: jump]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$15.b],Y		; 37 15 ; AND accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$41.b]		; A7 41 ; Load accumulator (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($28.b,S),Y		; 33 28 ; AND accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $3C09.w		; 2C 09 3C ; Test bits $3C09.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $57.b,X		; 35 57 ; Logical AND $57.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C59D.w,X		; 9D 9D C5 ; Store accumulator to $C59D.w,X [Reads: Accumulator, X Index]
	sta $569D.w,X		; 9D 9D 56 ; Store accumulator to $569D.w,X [Reads: Accumulator, X Index]
	eor $A6.b,X		; 55 A6 ; Exclusive OR accumulator with memory $A6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b,S		; 23 25 ; AND accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $34.b		; 25 34 ; Logical AND $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $28,$66		; 44 66 28 ; Move block positive $28,$66 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $355A.w		; 2C 5A 35 ; Test bits $355A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $C7.b,X		; 35 C7 ; Logical AND $C7.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $DE.b,X		; 35 DE ; Logical AND $DE.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $57DE.w		; CC DE 57 ; Compare $57DE.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp $456647.l		; 5C 47 66 45 ; Jump long to $456647.l [Flow: jump]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $C3		; D0 C3 ; Branch if not equal to $D0, $C3 [Flow: branch]
	bit $AF.b,X		; 34 AF ; Test bits $AF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc [$28.b]		; 67 28 ; Add with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $353A.w		; 2C 3A 35 ; Test bits $353A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cmp [$57.b]		; C7 57 ; Compare accumulator (long) [$57.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $9D78.w,X		; 9D 78 9D ; Store accumulator to $9D78.w,X [Reads: Accumulator, X Index]
	eor $5658.w,Y		; 59 58 56 ; Exclusive OR accumulator with memory $5658.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $7A.b,X		; 35 7A ; Logical AND $7A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($34A7.w,X)		; 7C A7 34 ; Jump indirect indexed to ($34A7.w,X) [Reads: X Index] [Flow: jump]
	lda ($AD.b),Y		; B1 AD ; Load accumulator ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $28.b,Y		; B6 28 ; Load X register $28.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $28282A.l		; 2F 2A 28 28 ; AND accumulator with memory (long) $28282A.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $C73A.w		; 2C 3A C7 ; Test bits $C73A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cmp [$86.b]		; C7 86 ; Compare accumulator (long) [$86.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jmp.w [$5957]		; DC 57 59 ; Jump long indirect [$5957] [Flow: jump]
	stx $58.b		; 86 58 ; Store X register to $58.b [Reads: X Index]
	lsr $35.b,X		; 56 35 ; Logical shift right $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $7A.b,X		; 35 7A ; Logical AND $7A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($AC.b,S),Y		; D3 AC ; Compare accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	lda $282828.l,X		; BF 28 28 28 ; Load long $282828.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$3C.b		; 29 3C ; Logical AND #$3C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stx $58.b		; 86 58 ; Store X register to $58.b [Reads: X Index]
	eor $8686.w,Y		; 59 86 86 ; Exclusive OR accumulator with memory $8686.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $5C.b		; 86 5C ; Store X register to $5C.b [Reads: X Index]
	eor [$56.b],Y		; 57 56 ; Exclusive OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$56.b],Y		; 57 56 ; Exclusive OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$65.b],Y		; 57 65 ; Exclusive OR accumulator with memory (long indexed) [$65.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $3C2D.w		; 2C 2D 3C ; Test bits $3C2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp [$59.b]		; C7 59 ; Compare accumulator (long) [$59.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	jmp $6564C7.l		; 5C C7 64 65 ; Jump long to $6564C7.l [Flow: jump]
	mvn $B6,$55		; 54 55 B6 ; Move block negative $B6,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $355A.w		; 2C 5A 35 ; Test bits $355A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cmp [$86.b]		; C7 86 ; Compare accumulator (long) [$86.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
.ACCU 16
.INDEX 16
	rep #$7F		; C2 7F
	adc $B665C1.l		; 6F C1 65 B6 ; Add with carry (long) $B665C1.l [Writes: Accumulator] [Flags: ZVNC]
	adc $28F5.w,Y		; 79 F5 28 ; Add $28F5.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$3A2C.w		; 29 2C 3A ; Logical AND #$3A2C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$66.b]		; C7 66 ; Compare accumulator (long) [$66.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor #$8686.w		; 49 86 86 ; Exclusive OR #$8686.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	jmp $554647.l		; 5C 47 46 55 ; Jump long to $554647.l [Flow: jump]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2808.w		; 29 08 28 ; Logical AND #$2808.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $3C09.w		; 2C 09 3C ; Test bits $3C09.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	eor [$66.b]		; 47 66 ; Exclusive OR accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $46.b		; 66 46 ; Rotate right $46.b [Reads: Direct Page] [Flags: ZNC]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$66.b]		; 47 66 ; Exclusive OR accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $28.b		; 66 28 ; Rotate right $28.b [Reads: Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	and $393A.w,Y		; 39 3A 39 ; AND accumulator with memory $393A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $483A.w,Y		; 39 3A 48 ; AND accumulator with memory $483A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	eor #$3A39.w		; 49 39 3A ; Exclusive OR #$3A39.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2828.w,Y		; 39 28 28 ; AND accumulator with memory $2828.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2D2C.w		; 2C 2C 2D ; Test bits $2D2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2C28.w		; 2C 28 2C ; Test bits $2C28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $3C2F.w,Y		; 39 2F 3C ; AND accumulator with memory $3C2F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $393A39.l		; 5C 39 3A 39 ; Jump long to $393A39.l [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $393A.w		; 2C 3A 39 ; Test bits $393A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C28.w		; 2C 28 2C ; Test bits $2C28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lsr $3B.b		; 46 3B ; Logical shift right $3B.b [Reads: Direct Page] [Flags: ZNC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2828.w		; 29 28 28 ; Logical AND #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $4A35.w,X		; 3C 35 4A ; Test bits $4A35.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $0809.w		; 2C 09 08 ; Test bits $0809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and #$2828.w		; 29 28 28 ; Logical AND #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $083B.w,X		; 3C 3B 08 ; Test bits $083B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and #$2828.w		; 29 28 28 ; Logical AND #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C2D.w		; 2C 2D 2C ; Test bits $2C2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$2828.w		; 09 28 28 ; Logical OR #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $393A.w		; 2C 3A 39 ; Test bits $393A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp $2C28.w		; 4C 28 2C ; Jump to $2C28.w [Flow: jump]
	ora #$2828.w		; 09 28 28 ; Logical OR #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2B28.w		; 2C 28 2B ; Test bits $2B28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$2908.w		; 09 08 29 ; Logical OR #$2908.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $393A.w		; 2C 3A 39 ; Test bits $393A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282E.w		; 2C 2E 28 ; Test bits $282E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lsr $CE34.w,X		; 5E 34 CE ; Logical shift right $CE34.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	jsr ($5CFC.w,X)		; FC FC 5C ; Jump to subroutine indirect indexed ($5CFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp [$9D.b]		; C7 9D ; Compare accumulator (long) [$9D.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor $5958.w,Y		; 59 58 59 ; Exclusive OR accumulator with memory $5958.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$5C58.w		; 89 58 5C ; Test bits #$5C58.w with accumulator [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $2828.w,Y		; 39 28 28 ; AND accumulator with memory $2828.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2828.w		; 29 28 28 ; Logical AND #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc $5F4E.w		; 6D 4E 5F ; Add $5F4E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $FC22.w		; 20 22 FC ; Jump to subroutine at $FC22.w [Writes: Stack Pointer] [Flow: call]
	jsr ($C75C.w,X)		; FC 5C C7 ; Jump to subroutine indirect indexed ($C75C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc [$56.b]		; 67 56 ; Add with carry (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit #$6757.w		; 89 57 67 ; Test bits #$6757.w with accumulator [Reads: Accumulator] [Flags: Z]
	adc [$5C.b]		; 67 5C ; Add with carry (long) [$5C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $2828.w,Y		; 39 28 28 ; AND accumulator with memory $2828.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $2808.w		; 2D 08 28 ; Logical AND $2808.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	eor ($01.b),Y		; 51 01 ; Exclusive OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($555C.w,X)		; FC 5C 55 ; Jump to subroutine indirect indexed ($555C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $6764.w,X		; 9E 64 67 ; Store zero to $6764.w,X [Reads: X Index]
	adc $FB.b		; 65 FB ; Add $FB.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda [$54.b]		; A7 54 ; Load accumulator (long) [$54.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($21.b,X)		; 61 21 ; Add with carry ($21.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($07.b,X)		; 21 07 ; Logical AND ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FC.b)		; 12 FC ; OR accumulator with memory (indirect) ($FC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($555C.w,X)		; FC 5C 55 ; Jump to subroutine indirect indexed ($555C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc [$7B.b],Y		; 77 7B ; Add with carry (long indexed) [$7B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($4A54.w,X)		; 7C 54 4A ; Jump indirect indexed to ($4A54.w,X) [Reads: X Index] [Flow: jump]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda [$C0.b]		; A7 C0 ; Load accumulator (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	jsr ($5CFC.w,X)		; FC FC 5C ; Jump to subroutine indirect indexed ($5CFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $64.b,X		; 55 64 ; Exclusive OR accumulator with memory $64.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$56.b]		; 67 56 ; Add with carry (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor [$67.b],Y		; 57 67 ; Exclusive OR accumulator with memory (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $54.b		; 65 54 ; Add $54.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jmp $2828.w		; 4C 28 28 ; Jump to $2828.w [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ldx $C0.b,Y		; B6 C0 ; Load X register $C0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $65.b		; 64 65 ; Store zero to $65.b
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	mvn $31,$55		; 54 55 31 ; Move block negative $31,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $58,$46		; 44 46 58 ; Move block positive $58,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $282828.l		; 2F 28 28 28 ; AND accumulator with memory (long) $282828.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ldx $F6.b,Y		; B6 F6 ; Load X register $F6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	cpy #$1610.w		; C0 10 16 ; Compare #$1610.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor $41.b,X		; 55 41 ; Exclusive OR accumulator with memory $41.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $56.b		; 64 56 ; Store zero to $56.b
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $283B.w,X		; 3C 3B 28 ; Test bits $283B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $282828.l		; 2F 28 28 28 ; AND accumulator with memory (long) $282828.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $20.b,S		; C3 20 ; Compare accumulator (stack relative) $20.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	and ($60.b,X)		; 21 60 ; Logical AND ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($AB.b,X)		; 61 AB ; Add with carry ($AB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ldx $7A68.w,Y		; BE 68 7A ; Load X register $7A68.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $5C.b,S		; 43 5C ; Exclusive OR accumulator with stack relative $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $4A.b,X		; 35 4A ; Logical AND $4A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$3B3C.w		; 29 3C 3B ; Logical AND #$3B3C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror $45.b		; 66 45 ; Rotate right $45.b [Reads: Direct Page] [Flags: ZNC]
	mvp $45,$66		; 44 66 45 ; Move block positive $45,$66 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $AE.b		; 64 AE ; Store zero to $AE.b
	ldx $68A9.w		; AE A9 68 ; Load $68A9.w into X register [Writes: X Index] [Flags: ZN]
	eor [$C6.b],Y		; 57 C6 ; Exclusive OR accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$56.b]		; 67 56 ; Add with carry (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lsr $35.b,X		; 56 35 ; Logical shift right $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $3C2F.w		; 4C 2F 3C ; Jump to $3C2F.w [Flow: jump]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp $2828.w		; 4C 28 28 ; Jump to $2828.w [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc [$65.b]		; 67 65 ; Add with carry (long) [$65.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $56.b		; 64 56 ; Store zero to $56.b
	adc $76.b,X		; 75 76 ; Add $76.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $01.b,Y		; 96 01 ; Store X register $01.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B8.b),Y		; 11 B8 ; OR accumulator with memory ($B8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($01.b,S),Y		; 53 01 ; XOR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $58.b,X		; 35 58 ; Logical AND $58.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $393A.w,Y		; 39 3A 39 ; AND accumulator with memory $393A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	and $2828.w,Y		; 39 28 28 ; AND accumulator with memory $2828.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $54.b,Y		; B6 54 ; Load X register $54.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	eor $10.b,X		; 55 10 ; Exclusive OR accumulator with memory $10.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	sta [$97.b]		; 87 97 ; Store accumulator (long) [$97.b] [Reads: Accumulator, Direct Page]
	ldx $9F8F.w,Y		; BE 8F 9F ; Load X register $9F8F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	asl $12.b		; 06 12 ; Arithmetic shift left $12.b [Reads: Direct Page] [Flags: ZNC]
	mvn $39,$35		; 54 35 39 ; Move block negative $39,$35 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $54B6B6.l,X		; BF B6 B6 54 ; Load long $54B6B6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $10.b,X		; 55 10 ; Exclusive OR accumulator with memory $10.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $BAC6.w,Y		; B9 C6 BA ; Load $BAC6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $12129F.l		; 8F 9F 12 12 ; Store accumulator (long) $12129F.l [Reads: Accumulator]
	mvn $3B,$35		; 54 35 3B ; Move block negative $3B,$35 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $54.b,Y		; B6 54 ; Load X register $54.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	eor [$AA.b]		; 47 AA ; Exclusive OR accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $96.b,X		; 16 96 ; Arithmetic shift left $96.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$8F.b],Y		; 17 8F ; OR accumulator with memory (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $542212.l,X		; 9F 12 22 54 ; Store accumulator (long,X) $542212.l,X [Reads: Accumulator, X Index]
	and $4C.b,X		; 35 4C ; Logical AND $4C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ldx $30.b,Y		; B6 30 ; Load X register $30.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	and ($54.b,S),Y		; 33 54 ; AND accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$F2.b],Y		; 57 F2 ; Exclusive OR accumulator with memory (long indexed) [$F2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A8.b),Y		; 11 A8 ; OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$0295.w		; A9 95 02 ; Load #$0295.w into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $28,$39		; 54 39 28 ; Move block negative $28,$39 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2908.w		; 29 08 29 ; Logical AND #$2908.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ldx $32.b,Y		; B6 32 ; Load X register $32.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	bit $64.b,X		; 34 64 ; Test bits $64.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc $10.b		; 65 10 ; Add $10.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $21.b		; 06 21 ; Arithmetic shift left $21.b [Reads: Direct Page] [Flags: ZNC]
	ora [$11.b]		; 07 11 ; OR accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b),Y		; 11 06 ; OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $283B54.l		; 22 54 3B 28 ; Jump to subroutine long $283B54.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C28.w		; 2C 28 2C ; Test bits $2C28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	bit $B6.b,X		; 34 B6 ; Test bits $B6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $34B634.l		; 22 34 B6 34 ; Jump to subroutine long $34B634.l [Writes: Stack Pointer] [Flow: call]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ldx $54.b,Y		; B6 54 ; Load X register $54.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	and $2828.w,Y		; 39 28 28 ; AND accumulator with memory $2828.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $46.b		; 66 46 ; Rotate right $46.b [Reads: Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $49.b		; 66 49 ; Rotate right $49.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$3A39.w		; 49 39 3A ; Exclusive OR #$3A39.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $353A.w,Y		; 39 3A 35 ; AND accumulator with memory $353A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $39.b,X		; 35 39 ; Logical AND $39.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2828.w		; 2D 28 28 ; Logical AND $2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $393A.w		; 2C 3A 39 ; Test bits $393A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $47.b,X		; 35 47 ; Logical AND $47.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $39.b		; 46 39 ; Logical shift right $39.b [Reads: Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $393A.w		; 2C 3A 39 ; Test bits $393A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $393A.w		; 2C 3A 39 ; Test bits $393A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2808.w		; 29 08 28 ; Logical AND #$2808.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $2C2D.w		; 2C 2D 2C ; Test bits $2C2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $39.b,X		; 35 39 ; Logical AND $39.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2908.w		; 2C 08 29 ; Test bits $2908.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C28.w		; 2C 28 2C ; Test bits $2C28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $2828.w,Y		; 39 28 28 ; AND accumulator with memory $2828.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$2908.w		; 09 08 29 ; Logical OR #$2908.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2828.w		; 29 28 28 ; Logical AND #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2828.w		; 29 28 28 ; Logical AND #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282A.w		; 2C 2A 28 ; Test bits $282A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2809.w		; 2C 09 28 ; Test bits $2809.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$2808.w		; 29 08 28 ; Logical AND #$2808.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$2828.w		; 09 28 28 ; Logical OR #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and #$0828.w		; 29 28 08 ; Logical AND #$0828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $092E.w		; 2C 2E 09 ; Test bits $092E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $282D.w		; 2C 2D 28 ; Test bits $282D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$2828.w		; 29 28 28 ; Logical AND #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$092C.w		; 09 2C 09 ; Logical OR #$092C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$2828.w		; 09 28 28 ; Logical OR #$2828.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D2E.w		; 2C 2E 2D ; Test bits $2D2E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $26.b		; 14 26 ; Test and reset bits $26.b [Reads: Accumulator] [Flags: Z]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lsr $35.b,X		; 56 35 ; Logical shift right $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	adc ($74.b,S),Y		; 73 74 ; Add with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc ($99.b)		; 72 99 ; Add with carry (indirect) ($99.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $73.b,S		; 63 73 ; Add with carry (stack relative) $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($74.b,S),Y		; 73 74 ; Add with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $7372.w		; 2C 72 73 ; Test bits $7372.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $36.b,X		; 74 36 ; Store zero to $36.b,X [Reads: X Index]
	and [$14.b],Y		; 37 14 ; AND accumulator with memory (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $34.b,X		; 15 34 ; OR accumulator with memory $34.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$64.b]		; A7 64 ; Load accumulator (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	.db $90, $73		; 90 73 ; Branch if carry clear to $90, $73 [Flow: branch]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($9A.b,S),Y		; 73 9A ; Add with carry (stack relative indirect indexed) ($9A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $A0		; 70 A0 ; Branch if overflow set to $70, $A0 [Flow: branch]
	adc ($91.b,S),Y		; 73 91 ; Add with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$7390.w		; 09 90 73 ; Logical OR #$7390.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($A1.b,S),Y		; 73 A1 ; Add with carry (stack relative indirect indexed) ($A1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $90.b		; 84 90 ; Store Y register to $90.b [Reads: Y Index]
	adc ($FF.b,S),Y		; 73 FF ; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($14.b),Y		; 91 14 ; Store accumulator ($14.b),Y [Reads: Accumulator, Direct Page, Y Index]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $E4.b,X		; 34 E4 ; Test bits $E4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $90, $82		; 90 82 ; Branch if carry clear to $90, $82 [Flow: branch]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	.db $82, $83, $83		; 82 83 83 ; Branch always long to $82, $83, $83 [Flow: branch]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sty $B3.b		; 84 B3 ; Store Y register to $B3.b [Reads: Y Index]
	.db $82, $83, $83		; 82 83 83 ; Branch always long to $82, $83, $83 [Flow: branch]
	sty $A5.b		; 84 A5 ; Store Y register to $A5.b [Reads: Y Index]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $DF.b,Y		; B6 DF ; Load X register $DF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	.db $82, $B2, $93		; 82 B2 93 ; Branch always long to $82, $B2, $93 [Flow: branch]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $92.b,X		; 94 92 ; Store Y register $92.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($93.b)		; 72 93 ; Add with carry (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda ($91.b,S),Y		; B3 91 ; Load accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $93.b,X		; B4 93 ; Load Y register $93.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	sta ($A2.b,S),Y		; 93 A2 ; Store accumulator (stack relative indirect indexed) ($A2.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	bit $A7.b,X		; 34 A7 ; Test bits $A7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $82, $B2, $93		; 82 B2 93 ; Branch always long to $82, $B2, $93 [Flow: branch]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b)		; 92 93 ; Store accumulator (indirect) ($93.b) [Reads: Accumulator, Direct Page]
	sty $82.b,X		; 94 82 ; Store Y register $82.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($82.b,S),Y		; 93 82 ; Store accumulator (stack relative indirect indexed) ($82.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sty $CA.b		; 84 CA ; Store Y register to $CA.b [Reads: Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $141414.l		; 8F 14 14 14 ; Store accumulator (long) $141414.l [Reads: Accumulator]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	rol $05.b,X		; 36 05 ; Rotate left $05.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $B0.b,X		; 34 B0 ; Test bits $B0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec $93.b,X		; D6 93 ; Decrement memory $93.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $82, $83, $83		; 82 83 83 ; Branch always long to $82, $83, $83 [Flow: branch]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($B3.b,S),Y		; 93 B3 ; Store accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ldy $90.b,X		; B4 90 ; Load Y register $90.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($93.b)		; B2 93 ; Load accumulator (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($B3.b,S),Y		; 93 B3 ; Store accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ldx $9511.w,Y		; BE 11 95 ; Load X register $9511.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvn $14,$A5		; 54 A5 14 ; Move block negative $14,$A5 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora $33.b,X		; 15 33 ; OR accumulator with memory $33.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $B2		; 90 B2 ; Branch if carry clear to $90, $B2 [Flow: branch]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($B3.b,S),Y		; 93 B3 ; Store accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($A1.b,S),Y		; 73 A1 ; Add with carry (stack relative indirect indexed) ($A1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($91.b,S),Y		; 73 91 ; Add with carry (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $542206.l,X		; 9F 06 22 54 ; Store accumulator (long,X) $542206.l,X [Reads: Accumulator, X Index]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	ora $A6.b,X		; 15 A6 ; OR accumulator with memory $A6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $82.b,X		; 34 82 ; Test bits $82.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sty $93.b		; 84 93 ; Store Y register to $93.b [Reads: Y Index]
	sty $CA.b,X		; 94 CA ; Store Y register $CA.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	.db $82, $83, $83		; 82 83 83 ; Branch always long to $82, $83, $83 [Flow: branch]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	lda #$0216.w		; A9 16 02 ; Load #$0216.w into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $27,$26		; 54 26 27 ; Move block negative $27,$26 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	rol $24.b		; 26 24 ; Rotate left $24.b [Reads: Direct Page] [Flags: ZNC]
	bit $D5.b		; 24 D5 ; Test bits $D5.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $34.b		; 25 34 ; Logical AND $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $B0, $93		; B0 93 ; Branch if carry set to $B0, $93 [Flow: branch]
	dec $93.b,X		; D6 93 ; Decrement memory $93.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($A4.b,S),Y		; 93 A4 ; Store accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($A4.b,S),Y		; 93 A4 ; Store accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $93.b,X		; B4 93 ; Load Y register $93.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda [$11.b],Y		; B7 11 ; Load accumulator (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $13,$15		; 54 15 13 ; Move block negative $13,$15 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $33.b,X		; 15 33 ; OR accumulator with memory $33.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($33.b,X)		; 41 33 ; Exclusive OR accumulator with memory ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $303434.l,X		; BF 34 34 30 ; Load long $303434.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cpy #$2423.w		; C0 23 24 ; Compare #$2423.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b],Y		; 17 06 ; OR accumulator with memory (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvn $13,$15		; 54 15 13 ; Move block negative $13,$15 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $BC.b,X		; 15 BC ; OR accumulator with memory $BC.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A7A6.w,X		; BD A6 A7 ; Load $A7A6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $41.b,X		; 34 41 ; Test bits $41.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($40.b,S),Y		; 33 40 ; AND accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $C0.b,X		; 34 C0 ; Test bits $C0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $B6.b,X		; 34 B6 ; Test bits $B6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ldx $20.b,Y		; B6 20 ; Load X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora [$95.b]		; 07 95 ; OR accumulator with memory (long) [$95.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $A7.b,X		; F6 A7 ; Increment memory $A7.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	mvp $34,$45		; 44 45 34 ; Move block positive $34,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($54.b,X)		; 41 54 ; Exclusive OR accumulator with memory ($54.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $05.b,X		; 36 05 ; Rotate left $05.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	cmp $D0.b,S		; C3 D0 ; Compare accumulator (stack relative) $D0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $7A.b,S		; 43 7A ; Exclusive OR accumulator with stack relative $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $158E.w		; 8D 8E 15 ; Store accumulator to $158E.w [Reads: Accumulator]
	and $25.b,S		; 23 25 ; AND accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $C0.b		; 25 C0 ; Logical AND $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $FB.b		; A6 FB ; Load $FB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc #$E9E9.w		; E9 E9 E9 ; Subtract #$E9E9.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($54.b)		; 12 54 ; OR accumulator with memory (indirect) ($54.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$9D.b],Y		; 57 9D ; Exclusive OR accumulator with memory (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $C9C8.w,X		; 9D C8 C9 ; Store accumulator to $C9C8.w,X [Reads: Accumulator, X Index]
	and $31.b		; 25 31 ; Logical AND $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $34.b,Y		; B6 34 ; Load X register $34.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ror $C06E.w		; 6E 6E C0 ; Rotate right $C06E.w [Flags: ZNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
	cmp $D7D9.w,Y		; D9 D9 D7 ; Compare accumulator $D7D9.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc [$DA.b]		; E7 DA ; Subtract with carry (long) [$DA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	pei ($12.b)		; D4 12 ; Push effective indirect address ($12.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	mvn $E2,$C7		; 54 C7 E2 ; Move block negative $E2,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
.ACCU 8
	sep #$E2		; E2 E2
.ACCU 8
.INDEX 8
	sep #$F1		; E2 F1
	bit #$54.b		; 89 54 ; Test bits #$54.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit $41.b,X		; 34 41 ; Test bits $41.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$10.b		; C0 10 ; Compare #$10.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($A6.b)		; 12 A6 ; OR accumulator with memory (indirect) ($A6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $10.b,X		; F6 10 ; Increment memory $10.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cpy $D9.b		; C4 D9 ; Compare $D9.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp [$D8.b],Y		; D7 D8 ; Compare accumulator (long indexed) [$D8.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cpx $DAE7.w		; EC E7 DA ; Compare $DAE7.w with X register [Reads: X Index] [Flags: ZNC]
	pei ($12.b)		; D4 12 ; Push effective indirect address ($12.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	mvn $E2,$C7		; 54 C7 E2 ; Move block negative $E2,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
.ACCU 8
	sep #$E2		; E2 E2
.ACCU 8
	sep #$E1		; E2 E1
	sbc ($54.b),Y		; F1 54 ; Subtract with carry ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $F6.b,X		; 34 F6 ; Test bits $F6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit #$6B.b		; 89 6B ; Test bits #$6B.b with accumulator [Reads: Accumulator] [Flags: Z]
	jmp ($F689.w)		; 6C 89 F6 ; Jump indirect to ($F689.w) [Flow: jump]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
	cmp [$EC.b],Y		; D7 EC ; Compare accumulator (long indexed) [$EC.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$D4.b]		; E7 D4 ; Subtract with carry (long) [$D4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F4.b,S),Y		; F3 F4 ; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $E2C754.l		; 22 54 C7 E2 ; Jump to subroutine long $E2C754.l [Writes: Stack Pointer] [Flow: call]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
	sep #$E1		; E2 E1
	sbc ($54.b),Y		; F1 54 ; Subtract with carry ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $B6.b,X		; 34 B6 ; Test bits $B6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $3E.b,X		; 34 3E ; Test bits $3E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lsr $8888.w,X		; 5E 88 88 ; Logical shift right $8888.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $10, $D1		; 10 D1 ; Branch if plus to $10, $D1 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpx $D8EC.w		; EC EC D8 ; Compare $D8EC.w with X register [Reads: X Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc $12.b		; E5 12 ; Subtract $12.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($5CFC.w,X)		; FC FC 5C ; Jump to subroutine indirect indexed ($5CFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp [$E0.b]		; C7 E0 ; Compare accumulator (long) [$E0.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc $E07D.w		; 6D 7D E0 ; Add $E07D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F1.b,X)		; E1 F1 ; Subtract with carry ($F1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvn $88,$88		; 54 88 88 ; Move block negative $88,$88 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $BD.b,S		; E3 BD ; Subtract stack-relative $BD.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $BD.b,S		; E3 BD ; Subtract stack-relative $BD.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc $10.b,X		; F6 10 ; Increment memory $10.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $1210.w,X		; BD 10 12 ; Load $1210.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $A7.b,X		; 34 A7 ; Test bits $A7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	lda [$34.b]		; A7 34 ; Load accumulator (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $FC22.w		; 20 22 FC ; Jump to subroutine at $FC22.w [Writes: Stack Pointer] [Flow: call]
	jsr ($C75C.w,X)		; FC 5C C7 ; Jump to subroutine indirect indexed ($C75C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$E1		; E2 E1
.ACCU 8
	sep #$E2		; E2 E2
	sbc ($89.b),Y		; F1 89 ; Subtract with carry ($89.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvn $A7,$34		; 54 34 A7 ; Move block negative $A7,$34 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lda [$20.b]		; A7 20 ; Load accumulator (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $103333.l		; 22 33 33 10 ; Jump to subroutine long $103333.l [Writes: Stack Pointer] [Flow: call]
	asl $01.b,X		; 16 01 ; Arithmetic shift left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($555C.w,X)		; FC 5C 55 ; Jump to subroutine indirect indexed ($555C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $F0, $89		; F0 89 ; Branch if equal to $F0, $89 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda [$54.b]		; A7 54 ; Load accumulator (long) [$54.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CB0404.l		; CF 04 04 CB ; Compare accumulator (long) $CB0404.l [Reads: Accumulator] [Flags: ZNC]
	tsb $BB.b		; 04 BB ; Test and set bits $BB.b [Reads: Accumulator] [Flags: Z]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $DB.b		; 04 DB ; Test and set bits $DB.b [Reads: Accumulator] [Flags: Z]
	inc $21.b		; E6 21 ; Increment $21.b [Reads: Direct Page] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($07.b,X)		; 21 07 ; Logical AND ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FC.b)		; 12 FC ; OR accumulator with memory (indirect) ($FC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($555C.w,X)		; FC 5C 55 ; Jump to subroutine indirect indexed ($555C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc [$7B.b],Y		; 77 7B ; Add with carry (long indexed) [$7B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($6954.w,X)		; 7C 54 69 ; Jump indirect indexed to ($6954.w,X) [Reads: X Index] [Flow: jump]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $C0.b		; 25 C0 ; Logical AND $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($26.b,S),Y		; 13 26 ; OR accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and [$15.b]		; 27 15 ; AND accumulator with memory (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$FB.b]		; A7 FB ; Load accumulator (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda [$C0.b]		; A7 C0 ; Load accumulator (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	jsr ($5CFC.w,X)		; FC FC 5C ; Jump to subroutine indirect indexed ($5CFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $64.b,X		; 55 64 ; Exclusive OR accumulator with memory $64.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$56.b]		; 67 56 ; Add with carry (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor [$67.b],Y		; 57 67 ; Exclusive OR accumulator with memory (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $54.b		; 65 54 ; Add $54.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $34.b,X		; 55 34 ; Exclusive OR accumulator with memory $34.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $13.b,X		; 34 13 ; Test bits $13.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $33.b,X		; 15 33 ; OR accumulator with memory $33.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($13.b,S),Y		; 33 13 ; AND accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $FB.b,X		; 15 FB ; OR accumulator with memory $FB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$13.b]		; A7 13 ; Load accumulator (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ldx $C0.b,Y		; B6 C0 ; Load X register $C0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $65.b		; 64 65 ; Store zero to $65.b
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	mvn $31,$55		; 54 55 31 ; Move block negative $31,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $55,$46		; 44 46 55 ; Move block positive $55,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b,S		; 23 25 ; AND accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($F6.b,S),Y		; 33 F6 ; AND accumulator (stack relative indirect indexed) ($F6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$FB.b]		; A7 FB ; Load accumulator (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $B6.b,X		; 34 B6 ; Test bits $B6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inc $C0.b,X		; F6 C0 ; Increment memory $C0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $01.b,Y		; 96 01 ; Store X register $01.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor $41.b,X		; 55 41 ; Exclusive OR accumulator with memory $41.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $56.b		; 64 56 ; Store zero to $56.b
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($3623.w,X)		; 7C 23 36 ; Jump indirect indexed to ($3623.w,X) [Reads: X Index] [Flow: jump]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$15.b],Y		; 37 15 ; AND accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$41.b]		; A7 41 ; Load accumulator (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($C3.b,S),Y		; 33 C3 ; AND accumulator (stack relative indirect indexed) ($C3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $2221.w		; 20 21 22 ; Jump to subroutine at $2221.w [Writes: Stack Pointer] [Flow: call]
	jsr $97AB.w		; 20 AB 97 ; Jump to subroutine at $97AB.w [Writes: Stack Pointer] [Flow: call]
	sta [$BE.b],Y		; 97 BE ; Store accumulator (long indexed) [$BE.b],Y [Reads: Accumulator, Direct Page, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $9D.b,S		; 43 9D ; Exclusive OR accumulator with stack relative $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $5556.w,X		; 9D 56 55 ; Store accumulator to $5556.w,X [Reads: Accumulator, X Index]
	ldx $23.b		; A6 23 ; Load $23.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	and $23.b		; 25 23 ; Logical AND $23.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $44.b,X		; 34 44 ; Test bits $44.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $45.b		; 66 45 ; Rotate right $45.b [Reads: Direct Page] [Flags: ZNC]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $AE.b		; 64 AE ; Store zero to $AE.b
	ldx $68A9.w		; AE A9 68 ; Load $68A9.w into X register [Writes: X Index] [Flags: ZN]
	eor [$C6.b],Y		; 57 C6 ; Exclusive OR accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$56.b]		; 67 56 ; Add with carry (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $DDDDDD.l,X		; 9F DD DD DD ; Store accumulator (long,X) $DDDDDD.l,X [Reads: Accumulator, X Index]
	ora ($8F.b),Y		; 11 8F ; OR accumulator with memory ($8F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$66.b]		; 47 66 ; Exclusive OR accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $D0.b		; 45 D0 ; Exclusive OR $D0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	cmp $34.b,S		; C3 34 ; Compare accumulator (stack relative) $34.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $656767.l		; AF 67 67 65 ; Load long $656767.l into accumulator [Writes: Accumulator] [Flags: ZN]
	stz $56.b		; 64 56 ; Store zero to $56.b
	adc $76.b,X		; 75 76 ; Add $76.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B8.b),Y		; 11 B8 ; OR accumulator with memory ($B8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($96.b,S),Y		; 53 96 ; XOR accumulator (stack relative indirect indexed) ($96.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $111111.l,X		; 9F 11 11 11 ; Store accumulator (long,X) $111111.l,X [Reads: Accumulator, X Index]
	ora ($A8.b),Y		; 11 A8 ; OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $35.b,X		; 56 35 ; Logical shift right $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $77.b,X		; 55 77 ; Exclusive OR accumulator with memory $77.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($34A7.w,X)		; 7C A7 34 ; Jump indirect indexed to ($34A7.w,X) [Reads: X Index] [Flow: jump]
	lda ($AD.b),Y		; B1 AD ; Load accumulator ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	mvn $10,$55		; 54 55 10 ; Move block negative $10,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8F.b),Y		; 11 8F ; OR accumulator with memory ($8F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $541206.l,X		; 9F 06 12 54 ; Store accumulator (long,X) $541206.l,X [Reads: Accumulator, X Index]
	sta $11EDED.l,X		; 9F ED ED 11 ; Store accumulator (long,X) $11EDED.l,X [Reads: Accumulator, X Index]
	sbc $A811.w		; ED 11 A8 ; Subtract $A811.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr $7A.b,X		; 56 7A ; Logical shift right $7A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $7A.b,S		; 43 7A ; Exclusive OR accumulator with stack relative $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($AC.b,S),Y		; D3 AC ; Compare accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	lda $B6B6BF.l,X		; BF BF B6 B6 ; Load long $B6B6BF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $10,$55		; 54 55 10 ; Move block negative $10,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$F8.b],Y		; F7 F8 ; Subtract with carry (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($8F.b),Y		; 11 8F ; OR accumulator with memory ($8F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $542212.l,X		; 9F 12 22 54 ; Store accumulator (long,X) $542212.l,X [Reads: Accumulator, X Index]
	sta $1111ED.l,X		; 9F ED 11 11 ; Store accumulator (long,X) $1111ED.l,X [Reads: Accumulator, X Index]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($54.b),Y		; 11 54 ; OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$56.b],Y		; 57 56 ; Exclusive OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$56.b],Y		; 57 56 ; Exclusive OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$65.b],Y		; 57 65 ; Exclusive OR accumulator with memory (long indexed) [$65.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $54.b,Y		; B6 54 ; Load X register $54.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	eor [$AA.b]		; 47 AA ; Exclusive OR accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $11FA.w,Y		; F9 FA 11 ; Subtract with carry $11FA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $34129F.l		; 8F 9F 12 34 ; Store accumulator (long) $34129F.l [Reads: Accumulator]
	mvn $11,$A9		; 54 A9 11 ; Move block negative $11,$A9 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($54.b),Y		; 11 54 ; OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $64.b,X		; 55 64 ; Exclusive OR accumulator with memory $64.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $54.b		; 65 54 ; Add $54.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $B6.b,X		; 55 B6 ; Exclusive OR accumulator with memory $B6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $30.b,Y		; B6 30 ; Load X register $30.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	and ($54.b,S),Y		; 33 54 ; AND accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$F2.b],Y		; 57 F2 ; Exclusive OR accumulator with memory (long indexed) [$F2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A8.b),Y		; 11 A8 ; OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$95.b		; A9 95 ; Load #$95.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1111.w		; ED 11 11 ; Subtract $1111.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $5411.w		; ED 11 54 ; Subtract $5411.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	adc $65C16F.l,X		; 7F 6F C1 65 ; Add long $65C16F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $79.b,Y		; B6 79 ; Load X register $79.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc $B6.b,X		; F5 B6 ; Subtract $B6.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $65.b		; 64 65 ; Store zero to $65.b
	jsr $1107.w		; 20 07 11 ; Jump to subroutine at $1107.w [Writes: Stack Pointer] [Flow: call]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $21.b		; 06 21 ; Arithmetic shift left $21.b [Reads: Direct Page] [Flags: ZNC]
	jsl $072154.l		; 22 54 21 07 ; Jump to subroutine long $072154.l [Writes: Stack Pointer] [Flow: call]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $54.b		; 06 54 ; Arithmetic shift left $54.b [Reads: Direct Page] [Flags: ZNC]
	and $47.b,X		; 35 47 ; Logical AND $47.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $55.b		; 46 55 ; Logical shift right $55.b [Reads: Direct Page] [Flags: ZNC]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	bit $B6.b,X		; 34 B6 ; Test bits $B6.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $21.b		; 06 21 ; Arithmetic shift left $21.b [Reads: Direct Page] [Flags: ZNC]
	jsl $54B634.l		; 22 34 B6 54 ; Jump to subroutine long $54B634.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora #$63.b		; 09 63 ; Logical OR #$63.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,X		; 15 03 ; OR accumulator with memory $03.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($95.b)		; 12 95 ; OR accumulator with memory (indirect) ($95.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$DF.b		; 29 DF ; Logical AND #$DF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sta ($21.b),Y		; 91 21 ; Store accumulator ($21.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and [$2E.b],Y		; 37 2E ; AND accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $6F377C.l,X		; 1F 7C 37 6F ; Logical OR long $6F377C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $7A73.w,Y		; 59 73 7A ; Exclusive OR accumulator with memory $7A73.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$9B.b],Y		; 77 9B ; Add with carry (long indexed) [$9B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $007F.w,X		; BD 7F 00 ; Load $007F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $11.b,Y		; B6 11 ; Load X register $11.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29955F.l,X		; FF 5F 95 29 ; Subtract with carry (long,X) $29955F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $6E.b,X		; 94 6E ; Store Y register $6E.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	dec $76.b,X		; D6 76 ; Decrement memory $76.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	and $7B7F.w,Y		; 39 7F 7B ; AND accumulator with memory $7B7F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $007FBD.l,X		; 7F BD 7F 00 ; Add long $007FBD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($74.b,X)		; 01 74 ; Logical OR ($74.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $67F9.w,X		; 1D F9 67 ; OR accumulator with memory $67F9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$1E.b		; E9 1E ; Subtract #$1E.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	stx $4433.w		; 8E 33 44 ; Store X register to $4433.w [Reads: X Index]
	adc ($6A.b,X)		; 61 6A ; Add with carry ($6A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $0A44.w,X		; 7E 44 0A ; Rotate right $0A44.w,X [Reads: X Index] [Flags: ZNC]
	ora $61447C.l,X		; 1F 7C 44 61 ; Logical OR long $61447C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $D23DCA.l		; 22 CA 3D D2 ; Jump to subroutine long $D23DCA.l [Writes: Stack Pointer] [Flow: call]
	lsr $7FDA.w,X		; 5E DA 7F ; Logical shift right $7FDA.w,X [Reads: X Index] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($CC.b,X)		; 01 CC ; Logical OR ($CC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	ora $2995.w,Y		; 19 95 29 ; OR accumulator with memory $2995.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rol $1963.w,X		; 3E 63 19 ; Rotate left $1963.w,X [Reads: X Index] [Flags: ZNC]
	sbc $15.b,S		; E3 15 ; Subtract stack-relative $15.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $25.b,X		; F5 25 ; Subtract $25.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$2E.b],Y		; 37 2E ; AND accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $15.b,S		; E3 15 ; Subtract stack-relative $15.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $336144.l		; 22 44 61 33 ; Jump to subroutine long $336144.l [Writes: Stack Pointer] [Flow: call]
	ror $5D99.w,X		; 7E 99 5D ; Rotate right $5D99.w,X [Reads: X Index] [Flags: ZNC]
	ora $0077.w,X		; 1D 77 00 ; OR accumulator with memory $0077.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $22EB.w		; 0C EB 22 ; Test and set bits $22EB.w [Reads: Accumulator] [Flags: Z]
	lda ($2F.b),Y		; B1 2F ; Load accumulator ($2F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $1D		; 70 1D ; Branch if overflow set to $70, $1D [Flow: branch]
	and [$2E.b],Y		; 37 2E ; AND accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $25.b,X		; F5 25 ; Subtract $25.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$3E.b],Y		; 77 3E ; Add with carry (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($6A.b,X)		; 61 6A ; Add with carry ($6A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $15E3.w,X		; 7E E3 15 ; Rotate right $15E3.w,X [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $5354.w		; 2E 54 53 ; Rotate left $5354.w [Flags: ZNC]
	sbc $16A67F.l,X		; FF 7F A6 16 ; Subtract with carry (long,X) $16A67F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $15.b		; C5 15 ; Compare $15.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ldx $16.b		; A6 16 ; Load $16.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sbc #$1E.b		; E9 1E ; Subtract #$1E.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	eor $F52F.w		; 4D 2F F5 ; Exclusive OR $F52F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $77.b		; 25 77 ; Logical AND $77.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $473A.w,X		; 3E 3A 47 ; Rotate left $473A.w,X [Reads: X Index] [Flags: ZNC]
	mvn $E3,$53		; 54 53 E3 ; Move block negative $E3,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $EB.b,X		; 15 EB ; OR accumulator with memory $EB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $1F2918.l		; 22 18 29 1F ; Jump to subroutine long $1F2918.l [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $7C1F3F.l,X		; 7F 3F 1F 7C ; Add long $7C1F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $15.b,S		; 63 15 ; Add with carry (stack relative) $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora $12.b,S		; 03 12 ; OR accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc #$1E.b		; E9 1E ; Subtract #$1E.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $2F		; B0 2F ; Branch if carry set to $B0, $2F [Flow: branch]
	.db $70, $1D		; 70 1D ; Branch if overflow set to $70, $1D [Flow: branch]
	and [$2E.b],Y		; 37 2E ; AND accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($E3.b,X)		; 61 E3 ; Add with carry ($E3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $EB.b,X		; 15 EB ; OR accumulator with memory $EB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $371D70.l		; 22 70 1D 37 ; Jump to subroutine long $371D70.l [Writes: Stack Pointer] [Flow: call]
	rol $4F3F.w		; 2E 3F 4F ; Rotate left $4F3F.w [Flags: ZNC]
	lda $007F.w,X		; BD 7F 00 ; Load $007F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $6A.b		; 25 6A ; Logical AND $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($D2.b),Y		; 31 D2 ; AND accumulator with memory ($D2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $7FFF.w,X		; 5E FF 7F ; Logical shift right $7FFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $15.b,S		; E3 15 ; Subtract stack-relative $15.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor [$18.b]		; 47 18 ; Exclusive OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1D.b		; 29 1D ; Logical AND #$1D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$8A.b		; 09 8A ; Logical OR #$8A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($CF.b),Y		; 11 CF ; OR accumulator with memory ($CF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $BF.b		; 25 BF ; Logical AND $BF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$71.b],Y		; 57 71 ; Exclusive OR accumulator with memory (long indexed) [$71.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2A18.w,Y		; 19 18 2A ; OR accumulator with memory $2A18.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $52D87C.l,X		; 1F 7C D8 52 ; Logical OR long $52D87C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1A5A.w,Y		; F9 5A 1A ; Subtract with carry $1A5A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $5C633B.l,X		; 5F 3B 63 5C ; Exclusive OR accumulator with memory (long,X) $5C633B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($3B45.w,X)		; FC 45 3B ; Jump to subroutine indirect indexed ($3B45.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $CE.b,S		; 63 CE ; Add with carry (stack relative) $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora $3694.w,X		; 1D 94 36 ; OR accumulator with memory $3694.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor [$CF.b]		; 47 CF ; Exclusive OR accumulator with memory (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $40.b		; 25 40 ; Logical AND $40.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $34EA.w,X		; 1D EA 34 ; OR accumulator with memory $34EA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $771B61.l		; 6F 61 1B 77 ; Add with carry (long) $771B61.l [Writes: Accumulator] [Flags: ZVNC]
	dec $26.b,X		; D6 26 ; Decrement memory $26.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	and $C60000.l		; 2F 00 00 C6 ; AND accumulator with memory (long) $C60000.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($25.b),Y		; 71 25 ; Add with carry ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc $32.b,S		; 63 32 ; Add with carry (stack relative) $32.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $3A.b,X		; 94 3A ; Store Y register $3A.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $2580.w,X		; 1D 80 25 ; OR accumulator with memory $2580.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $7C1F7C.l,X		; 1F 7C 1F 7C ; Logical OR long $7C1F7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$0C.b		; C0 0C ; Compare #$0C.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $351E.w		; CC 1E 35 ; Compare $351E.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($CE.b),Y		; 31 CE ; AND accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $4718.w,X		; 1D 18 47 ; OR accumulator with memory $4718.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $36.b,X		; 94 36 ; Store Y register $36.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	sbc [$14.b]		; E7 14 ; Subtract with carry (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($D021.w)		; 6C 21 D0 ; Jump indirect to ($D021.w) [Flow: jump]
	and $75.b		; 25 75 ; Logical AND $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc #$21.b		; 69 21 ; Add #$21.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $D62E.w		; 0E 2E D6 ; Arithmetic shift left $D62E.w [Flags: ZNC]
	and ($18.b,X)		; 21 18 ; Logical AND ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($19.b),Y		; 71 19 ; Add with carry ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($2A.b)		; 32 2A ; AND accumulator with memory (indirect) ($2A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $2580.w,X		; 1D 80 25 ; OR accumulator with memory $2580.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	eor $72FE.w,Y		; 59 FE 72 ; Exclusive OR accumulator with memory $72FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	and ($2A.b)		; 32 2A ; AND accumulator with memory (indirect) ($2A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $3A.b,X		; 94 3A ; Store Y register $3A.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	adc ($21.b),Y		; 71 21 ; Add with carry ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($F6.b)		; 32 F6 ; AND accumulator with memory (indirect) ($F6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$78.b		; 29 78 ; Logical AND #$78.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $DB		; 42 DB ; Reserved instruction
	lsr $1D40.w		; 4E 40 1D ; Logical shift right $1D40.w [Flags: ZNC]
	cmp $AB35.w		; CD 35 AB ; Compare $AB35.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $8E.b,X		; 15 8E ; OR accumulator with memory $8E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3254.w,Y		; 19 54 32 ; OR accumulator with memory $3254.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1ED473.l,X		; 1F 73 D4 1E ; Logical OR long $1ED473.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($CE.b,X)		; 01 CE ; Logical OR ($CE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($32.b,X)		; 21 32 ; Logical AND ($32.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $3A.b,X		; 94 3A ; Store Y register $3A.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	inc $29.b,X		; F6 29 ; Increment memory $29.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $42, $DB		; 42 DB ; Reserved instruction
	lsr $1D40.w		; 4E 40 1D ; Logical shift right $1D40.w [Flags: ZNC]
	adc ($19.b),Y		; 71 19 ; Add with carry ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($2A.b)		; 32 2A ; AND accumulator with memory (indirect) ($2A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($1049.w)		; 6C 49 10 ; Jump indirect to ($1049.w) [Flow: jump]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	eor $7C1F3B.l,X		; 5F 3B 1F 7C ; Exclusive OR accumulator with memory (long,X) $7C1F3B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$8A.b		; 09 8A ; Logical OR #$8A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($2E.b),Y		; 11 2E ; OR accumulator with memory ($2E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $5132F2.l		; 22 F2 32 51 ; Jump to subroutine long $5132F2.l [Writes: Stack Pointer] [Flow: call]
	ora $2A18.w,Y		; 19 18 2A ; OR accumulator with memory $2A18.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1971.w,X		; 1D 71 19 ; OR accumulator with memory $1971.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b)		; 32 2A ; AND accumulator with memory (indirect) ($2A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pei ($21.b)		; D4 21 ; Push effective indirect address ($21.b) [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $7B9D4B.l,X		; 1F 4B 9D 7B ; Logical OR long $7B9D4B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7C1F7C.l,X		; 1F 7C 1F 7C ; Logical OR long $7C1F7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $7C1F7C.l,X		; 1F 7C 1F 7C ; Logical OR long $7C1F7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($2E.b),Y		; 31 2E ; AND accumulator with memory ($2E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	adc #$21.b		; 69 21 ; Add #$21.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $F12E.w		; 0E 2E F1 ; Arithmetic shift left $F12E.w [Flags: ZNC]
	.db $42, $1F		; 42 1F ; Reserved instruction
	jmp ($7C1F.w,X)		; 7C 1F 7C ; Jump indirect indexed to ($7C1F.w,X) [Reads: X Index] [Flow: jump]
	ora $4A1D7C.l,X		; 1F 7C 1D 4A ; Logical OR long $4A1D7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $5A5F4E.l,X		; 3F 4E 5F 5A ; AND accumulator with memory (long,X) $5A5F4E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$01.b],Y		; 77 01 ; Add with carry (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $01.b,X		; 76 01 ; Rotate right $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $01.b,X		; 75 01 ; Add $01.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $01.b,X		; 75 01 ; Add $01.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $01.b,X		; 74 01 ; Store zero to $01.b,X [Reads: X Index]
	adc ($01.b,S),Y		; 73 01 ; Add with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($01.b,S),Y		; 73 01 ; Add with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($01.b)		; 72 01 ; Add with carry (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($01.b),Y		; 71 01 ; Add with carry ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($01.b),Y		; 71 01 ; Add with carry ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $01		; 70 01 ; Branch if overflow set to $70, $01 [Flow: branch]
	adc $016F01.l		; 6F 01 6F 01 ; Add with carry (long) $016F01.l [Writes: Accumulator] [Flags: ZVNC]
	ror $6D01.w		; 6E 01 6D ; Rotate right $6D01.w [Flags: ZNC]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($6C.b,X)		; 01 6C ; Logical OR ($6C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($69.b,X)		; 01 69 ; Logical OR ($69.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($69.b,X)		; 01 69 ; Logical OR ($69.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($68.b,X)		; 01 68 ; Logical OR ($68.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($67.b,X)		; 01 67 ; Logical OR ($67.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($67.b,X)		; 01 67 ; Logical OR ($67.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($66.b,X)		; 01 66 ; Logical OR ($66.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($65.b,X)		; 01 65 ; Logical OR ($65.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($65.b,X)		; 01 65 ; Logical OR ($65.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($64.b,X)		; 01 64 ; Logical OR ($64.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($62.b,X)		; 01 62 ; Logical OR ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($62.b,X)		; 01 62 ; Logical OR ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($61.b,X)		; 01 61 ; Logical OR ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5F.b,X)		; 01 5F ; Logical OR ($5F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5F.b,X)		; 01 5F ; Logical OR ($5F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5E.b,X)		; 01 5E ; Logical OR ($5E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5D.b,X)		; 01 5D ; Logical OR ($5D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5D.b,X)		; 01 5D ; Logical OR ($5D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5C.b,X)		; 01 5C ; Logical OR ($5C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5C.b,X)		; 01 5C ; Logical OR ($5C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5B.b,X)		; 01 5B ; Logical OR ($5B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5A.b,X)		; 01 5A ; Logical OR ($5A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5A.b,X)		; 01 5A ; Logical OR ($5A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($59.b,X)		; 01 59 ; Logical OR ($59.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($59.b,X)		; 01 59 ; Logical OR ($59.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($56.b,X)		; 01 56 ; Logical OR ($56.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($56.b,X)		; 01 56 ; Logical OR ($56.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($55.b,X)		; 01 55 ; Logical OR ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($55.b,X)		; 01 55 ; Logical OR ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($54.b,X)		; 01 54 ; Logical OR ($54.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($53.b,X)		; 01 53 ; Logical OR ($53.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($53.b,X)		; 01 53 ; Logical OR ($53.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($52.b,X)		; 01 52 ; Logical OR ($52.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($52.b,X)		; 01 52 ; Logical OR ($52.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($51.b,X)		; 01 51 ; Logical OR ($51.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($51.b,X)		; 01 51 ; Logical OR ($51.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4F.b,X)		; 01 4F ; Logical OR ($4F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4F.b,X)		; 01 4F ; Logical OR ($4F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4E.b,X)		; 01 4E ; Logical OR ($4E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4E.b,X)		; 01 4E ; Logical OR ($4E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4D.b,X)		; 01 4D ; Logical OR ($4D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4D.b,X)		; 01 4D ; Logical OR ($4D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4B.b,X)		; 01 4B ; Logical OR ($4B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4B.b,X)		; 01 4B ; Logical OR ($4B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4A.b,X)		; 01 4A ; Logical OR ($4A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4A.b,X)		; 01 4A ; Logical OR ($4A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($47.b,X)		; 01 47 ; Logical OR ($47.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($47.b,X)		; 01 47 ; Logical OR ($47.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($45.b,X)		; 01 45 ; Logical OR ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($45.b,X)		; 01 45 ; Logical OR ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3D.b,X)		; 01 3D ; Logical OR ($3D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3D.b,X)		; 01 3D ; Logical OR ($3D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3B.b,X)		; 01 3B ; Logical OR ($3B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3B.b,X)		; 01 3B ; Logical OR ($3B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($39.b,X)		; 01 39 ; Logical OR ($39.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($39.b,X)		; 01 39 ; Logical OR ($39.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($36.b,X)		; 01 36 ; Logical OR ($36.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($36.b,X)		; 01 36 ; Logical OR ($36.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($35.b,X)		; 01 35 ; Logical OR ($35.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($35.b,X)		; 01 35 ; Logical OR ($35.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($35.b,X)		; 01 35 ; Logical OR ($35.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2F.b,X)		; 01 2F ; Logical OR ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2F.b,X)		; 01 2F ; Logical OR ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2F.b,X)		; 01 2F ; Logical OR ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2D.b,X)		; 01 2D ; Logical OR ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2D.b,X)		; 01 2D ; Logical OR ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($29.b,X)		; 01 29 ; Logical OR ($29.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($29.b,X)		; 01 29 ; Logical OR ($29.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1D.b,X)		; 01 1D ; Logical OR ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1D.b,X)		; 01 1D ; Logical OR ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1D.b,X)		; 01 1D ; Logical OR ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($15.b,X)		; 01 15 ; Logical OR ($15.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($15.b,X)		; 01 15 ; Logical OR ($15.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7A.b		; 00 7A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7A.b		; 00 7A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7A.b		; 00 7A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00879C.l		; 22 9C 87 00 ; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	jmp $0ED9.w		; 4C D9 0E ; Jump to $0ED9.w [Flow: jump]
	jmp.w [$0AE0]		; DC E0 0A ; Jump long indirect [$0AE0] [Flow: jump]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $540E.w,Y		; D9 0E 54 ; Compare accumulator $540E.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc #$0A.b		; E9 0A ; Subtract #$0A.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc $EE.b,X		; F6 EE ; Increment memory $EE.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and [$DA.b],Y		; 37 DA ; AND accumulator with memory (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $EF19.w		; 0E 19 EF ; Arithmetic shift left $EF19.w [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0EDA.w,Y		; 79 DA 0E ; Add $0EDA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $E1.b		; A4 E1 ; Load $E1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc ($E1.b,S),Y		; F3 E1 ; Subtract with carry (stack relative indirect indexed) ($E1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $E3.b		; 84 E3 ; Store Y register to $E3.b [Reads: Y Index]
	and $E8.b,S		; 23 E8 ; AND accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $020D.w		; AD 0D 02 ; Load $020D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($E0D2.w,X)		; [PATTERN: Memory clearing operation] 7C D2 E0 ; Jump indirect indexed to ($E0D2.w,X) [Reads: X Index] [Flow: jump]
	lda $9B.b		; A5 9B ; Load $9B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	stz $9B.b		; 64 9B ; Store zero to $9B.b
	lda $0AA1.w		; AD A1 0A ; Load $0AA1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC20E.l		; 8F 0E C2 7E ; Store accumulator (long) $7EC20E.l [Reads: Accumulator]
	lda $0AA3.w		; AD A3 0A ; Load $0AA3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC20F.l		; 8F 0F C2 7E ; Store accumulator (long) $7EC20F.l [Reads: Accumulator]
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC210.l		; 8F 10 C2 7E ; Store accumulator (long) $7EC210.l [Reads: Accumulator]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC211.l		; 8F 11 C2 7E ; Store accumulator (long) $7EC211.l [Reads: Accumulator]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC212.l		; 8F 12 C2 7E ; Store accumulator (long) $7EC212.l [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	jsl $00833F.l		; 22 3F 83 00 ; Jump to subroutine long $00833F.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BEE3A.l		; 22 3A EE 1B ; Jump to subroutine long $1BEE3A.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEDDD.l		; 22 DD ED 1B ; Jump to subroutine long $1BEDDD.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB2.w		; 8D B2 0A ; Store accumulator to $0AB2.w [Reads: Accumulator]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	inc $020D.w		; EE 0D 02 ; Increment $020D.w [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($21.b)		; 32 21 ; AND accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,S),Y		; 33 21 ; AND accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($3A.b,X)		; 21 3A ; Logical AND ($3A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($7F.b,X)		; 21 7F ; Logical AND ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $A460.w		; 20 60 A4 ; Jump to subroutine at $A460.w [Writes: Stack Pointer] [Flow: call]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $21		; 42 21 ; Reserved instruction
	eor $21.b,S		; 43 21 ; Exclusive OR accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$21.b		; 49 21 ; Exclusive OR #$21.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($7F.b,X)		; 21 7F ; Logical AND ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2108.w		; 20 08 21 ; Jump to subroutine at $2108.w [Writes: Stack Pointer] [Flow: call]
	ora #$21.b		; 09 21 ; Logical OR #$21.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$21.b		; 09 21 ; Logical OR #$21.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($0B.b,X)		; 21 0B ; Logical AND ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($0C.b,X)		; 21 0C ; Logical AND ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($0D.b,X)		; 21 0D ; Logical AND ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($1D.b,X)		; 21 1D ; Logical AND ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($18.b,X)		; 21 18 ; Logical AND ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($19.b,X)		; 21 19 ; Logical AND ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($09.b,X)		; 21 09 ; Logical AND ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($1A.b,X)		; A1 1A ; Load accumulator ($1A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($1B.b,X)		; 21 1B ; Logical AND ($1B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($1C.b,X)		; 21 1C ; Logical AND ($1C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($18.b,X)		; 21 18 ; Logical AND ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($1D.b,X)		; 21 1D ; Logical AND ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($FF.b,X)		; A1 FF ; Load accumulator ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	sbc $0E0C06.l,X		; FF 06 0C 0E ; Subtract with carry (long,X) $0E0C06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $E196.w,X		; BC 96 E1 ; Load Y register $E196.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $2B		; 30 2B ; Branch if minus to $30, $2B [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1022.w		; 8D 22 10 ; Store accumulator to $1022.w [Reads: Accumulator]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $E176.w,Y		; B9 76 E1 ; Load $E176.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda $E186.w,Y		; B9 86 E1 ; Load $E186.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $E15A.w,X		; BD 5A E1 ; Load $E15A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda $E168.w,X		; BD 68 E1 ; Load $E168.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,X		; 9D 12 10 ; Store accumulator to $1012.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	inc $020D.w		; EE 0D 02 ; Increment $020D.w [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $12.b,S		; 23 12 ; AND accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $12.b,S		; 63 12 ; Add with carry (stack relative) $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $12.b,S		; A3 12 ; Load accumulator (stack relative) $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	and $13.b,S		; 23 13 ; AND accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda $11.b,S		; A3 11 ; Load accumulator (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $11.b,S		; 63 11 ; Add with carry (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and $11.b,S		; 23 11 ; AND accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $1000.w		; 9C 00 10 ; Store zero to $1000.w
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0300.w		; 29 00 03 ; Logical AND #$0300.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $41		; F0 41 ; Branch if equal to $F0, $41 [Flow: branch]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	ldx #$002A.w		; A2 2A 00 ; Load #$002A.w into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $EFDD.w,X		; BD DD EF ; Load $EFDD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1000.w,X		; 9D 00 10 ; Store accumulator to $1000.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$1123.w		; A9 23 11 ; Load #$1123.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0E40.w		; A9 40 0E ; Load #$0E40.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1004.w,X		; 9D 04 10 ; Store accumulator to $1004.w,X [Reads: Accumulator, X Index]
	lda #$1B2E.w		; A9 2E 1B ; Load #$1B2E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; [PATTERN: Memory clearing operation] 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $DE		; D0 DE ; Branch if not equal to $D0, $DE [Flow: branch]
	stx $1000.w		; 8E 00 10 ; Store X register to $1000.w [Reads: X Index]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0050.w		; C9 50 00 ; Compare #$0050.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0004.w		; E9 04 00 ; Subtract #$0004.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0005.w		; C9 05 00 ; Compare #$0005.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $1000.w		; AC 00 10 ; Load $1000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $E1E1.w,X		; BD E1 E1 ; Load $E1E1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$0E40.w		; A9 40 0E ; Load #$0E40.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $EFD1.w,X		; BD D1 EF ; Load $EFD1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0200.w		; 29 00 02 ; Logical AND #$0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0400.w		; 69 00 04 ; Add #$0400.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$1360.w		; C9 60 13 ; Compare #$1360.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $B7		; 90 B7 ; Branch if carry clear to $90, $B7 [Flow: branch]
	sty $1000.w		; 8C 00 10 ; Store Y register to $1000.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $E2F5.w		; 20 F5 E2 ; Jump to subroutine at $E2F5.w [Writes: Stack Pointer] [Flow: call]
.INDEX 16
	rep #$10		; C2 10
	ldy $1000.w		; AC 00 10 ; Load $1000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
.INDEX 8
	sep #$10		; E2 10
	inc $020D.w		; EE 0D 02 ; Increment $020D.w [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $0F.b		; 26 0F ; Rotate left $0F.b [Reads: Direct Page] [Flags: ZNC]
	and [$0F.b]		; 27 0F ; AND accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$4F.b]		; 27 4F ; AND accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $4F.b		; 26 4F ; Rotate left $4F.b [Reads: Direct Page] [Flags: ZNC]
	rol $8F.b		; 26 8F ; Rotate left $8F.b [Reads: Direct Page] [Flags: ZNC]
	and [$8F.b]		; 27 8F ; AND accumulator with memory (long) [$8F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$CF.b]		; 27 CF ; AND accumulator with memory (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $CF.b		; 26 CF ; Rotate left $CF.b [Reads: Direct Page] [Flags: ZNC]
.ACCU 16
	rep #$20		; C2 20
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0040.w		; E9 40 00 ; Subtract #$0040.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldy $1000.w		; AC 00 10 ; Load $1000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$0700.w		; A9 00 07 ; Load #$0700.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $E2E5.w,X		; BD E5 E2 ; Load $E2E5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0008.w		; E0 08 00 ; Compare #$0008.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $F1		; 90 F1 ; Branch if carry clear to $90, $F1 [Flow: branch]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cpx #$0010.w		; E0 10 00 ; Compare #$0010.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $EA		; D0 EA ; Branch if not equal to $D0, $EA [Flow: branch]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $D2		; 80 D2 ; Branch always to $80, $D2 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0040.w		; E9 40 00 ; Subtract #$0040.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	inc $0A.b		; E6 0A ; Increment $0A.b [Reads: Direct Page] [Flags: ZN]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $30, $BD		; 30 BD ; Branch if minus to $30, $BD [Flow: branch]
	sty $1000.w		; 8C 00 10 ; Store Y register to $1000.w [Reads: Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stz $0210.w		; [PATTERN: Memory clearing operation] 9C 10 02 ; Store zero to $0210.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	stz $04.b		; 64 04 ; Store zero to $04.b
	stz $06.b		; 64 06 ; Store zero to $06.b
	stz $08.b		; [PATTERN: Memory clearing operation] 64 08 ; Store zero to $08.b
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	stz $0211.w		; 9C 11 02 ; Store zero to $0211.w
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A4.b		; C5 A4 ; Compare $A4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $020E.w		; 8D 0E 02 ; Store accumulator to $020E.w [Reads: Accumulator]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $020E.w		; 8D 0E 02 ; Store accumulator to $020E.w [Reads: Accumulator]
	inc $0211.w		; EE 11 02 ; Increment $0211.w [Flags: ZN]
	inc $0211.w		; EE 11 02 ; Increment $0211.w [Flags: ZN]
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0050.w		; 29 50 00 ; Logical AND #$0050.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$EFFF.w		; A9 FF EF ; Load #$EFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$EFFF.w		; A9 FF EF ; Load #$EFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $E4F9.w		; 20 F9 E4 ; Jump to subroutine at $E4F9.w [Writes: Stack Pointer] [Flow: call]
	jsr $E449.w		; 20 49 E4 ; Jump to subroutine at $E449.w [Writes: Stack Pointer] [Flow: call]
	jsr $E579.w		; 20 79 E5 ; Jump to subroutine at $E579.w [Writes: Stack Pointer] [Flow: call]
	dec $020E.w		; CE 0E 02 ; Decrement $020E.w [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0300.w		; A9 00 03 ; Load #$0300.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0211.w		; AD 11 02 ; Load $0211.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0050.w		; 29 50 00 ; Logical AND #$0050.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$EFFF.w		; A9 FF EF ; Load #$EFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$EFFF.w		; A9 FF EF ; Load #$EFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $E4F9.w		; 20 F9 E4 ; Jump to subroutine at $E4F9.w [Writes: Stack Pointer] [Flow: call]
	jsr $E449.w		; 20 49 E4 ; Jump to subroutine at $E449.w [Writes: Stack Pointer] [Flow: call]
	jsr $E579.w		; 20 79 E5 ; Jump to subroutine at $E579.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $020E.w		; EE 0E 02 ; Increment $020E.w [Flags: ZN]
	stz $06.b		; 64 06 ; Store zero to $06.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	inc $020D.w		; EE 0D 02 ; Increment $020D.w [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $191F.w,Y		; 19 1F 19 ; OR accumulator with memory $191F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $199F19.l,X		; 5F 19 9F 19 ; Exclusive OR accumulator with memory (long,X) $199F19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $F800E2.l,X		; DF E2 00 F8 ; Compare accumulator (long,X) $F800E2.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $B8.b,S		; 03 B8 ; OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b,S		; 03 1A ; OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E49F1A.l,X		; 1F 1A 9F E4 ; Logical OR long $E49F1A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1B.b,S		; 03 1B ; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $225F1B.l,X		; 1F 1B 5F 22 ; Logical OR long $225F1B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($C2.b,X)		; 01 C2 ; Logical OR ($C2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $30, $64		; 30 64 ; Branch if minus to $30, $64 [Flow: branch]
	cop $A4.b		; 02 A4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B9.b		; 02 B9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($E4.b),Y		; 31 E4 ; AND accumulator with memory ($E4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00A9AA.l		; 0F AA A9 00 ; OR accumulator with memory (long) $00A9AA.l [Writes: Accumulator] [Flags: ZN]
	ora $00009F.l		; 0F 9F 00 00 ; OR accumulator with memory (long) $00009F.l [Writes: Accumulator] [Flags: ZN]
	adc $E429B9.l,X		; 7F B9 29 E4 ; Add long $E429B9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $00A0.w,Y		; D9 A0 00 ; Compare accumulator $00A0.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B9.b		; 02 B9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $18E4.w,X		; 3D E4 18 ; AND accumulator with memory $18E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00A9AA.l		; 0F AA A9 00 ; OR accumulator with memory (long) $00A9AA.l [Writes: Accumulator] [Flags: ZN]
	ora $00009F.l		; 0F 9F 00 00 ; OR accumulator with memory (long) $00009F.l [Writes: Accumulator] [Flags: ZN]
	adc $E439B9.l,X		; 7F B9 39 E4 ; Add long $E439B9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$C8C8]		; DC C8 C8 ; Jump long indirect [$C8C8] [Flow: jump]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	wai		; CB ; Wait for interrupt
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B9.b		; 02 B9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $E4.b		; 45 E4 ; Exclusive OR $E4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00A9AA.l		; 0F AA A9 00 ; OR accumulator with memory (long) $00A9AA.l [Writes: Accumulator] [Flags: ZN]
	ora $00009F.l		; 0F 9F 00 00 ; OR accumulator with memory (long) $00009F.l [Writes: Accumulator] [Flags: ZN]
	adc $E441B9.l,X		; 7F B9 41 E4 ; Add long $E441B9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$E2.b		; C9 E2 ; Compare #$E2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	asl $1F1F.w,X		; 1E 1F 1F ; Arithmetic shift left $1F1F.w,X [Reads: X Index] [Flags: ZNC]
	ora $211F20.l,X		; 1F 20 1F 21 ; Logical OR long $211F20.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $231F22.l,X		; 1F 22 1F 23 ; Logical OR long $231F22.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $251F24.l,X		; 1F 24 1F 25 ; Logical OR long $251F24.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A930C2.l,X		; 1F C2 30 A9 ; Logical OR long $A930C2.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $8500.w,X		; DE 00 85 ; Decrement memory $8500.w,X [Reads: X Index] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00A9AA.l		; 0F AA A9 00 ; OR accumulator with memory (long) $00A9AA.l [Writes: Accumulator] [Flags: ZN]
	ora $00009F.l		; 0F 9F 00 00 ; OR accumulator with memory (long) $00009F.l [Writes: Accumulator] [Flags: ZN]
	adc $00029F.l,X		; 7F 9F 02 00 ; Add long $00029F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $1800A5.l,X		; 7F A5 00 18 ; Add long $1800A5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $D003.w,X		; 9E 03 D0 ; Store zero to $D003.w,X [Reads: X Index]
	cmp $020EAD.l,X		; DF AD 0E 02 ; Compare accumulator (long,X) $020EAD.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $801F.w		; 1C 1F 80 ; Test and reset bits $801F.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E4E9.w,Y		; B9 E9 E4 ; Load $E4E9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$5E.b		; A9 5E ; Load #$5E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $2568AA.l		; 0F AA 68 25 ; OR accumulator with memory (long) $2568AA.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	asl $2902.w		; 0E 02 29 ; Arithmetic shift left $2902.w [Flags: ZNC]
	sbc $FF4900.l,X		; FF 00 49 FF ; Subtract with carry (long,X) $FF4900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E4E9.w,Y		; B9 E9 E4 ; Load $E4E9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9F0825.l,X		; 1F 25 08 9F ; Logical OR long $9F0825.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $6030E2.l,X		; 7F E2 30 60 ; Add long $6030E2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $01.b		; 24 01 ; Test bits $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldy $01.b		; A4 01 ; Load $01.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	bit $02.b		; 24 02 ; Test bits $02.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	bit $03.b		; 24 03 ; Test bits $03.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $E56F.w,X		; BD 6F E5 ; Load $E56F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$0FFF.w		; 29 FF 0F ; Logical AND #$0FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $E5BC.w		; 20 BC E5 ; Jump to subroutine at $E5BC.w [Writes: Stack Pointer] [Flow: call]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0005.w		; C9 05 00 ; Compare #$0005.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($5E.b,X)		; 01 5E ; Logical OR ($5E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $00.b,S		; [PATTERN: Memory clearing operation] 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $02.b		; 64 02 ; Store zero to $02.b
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $E59A.w,X		; 7D 9A E5 ; Add $E59A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $020E.w		; 6D 0E 02 ; Add $020E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $F605.w,X		; BD 05 F6 ; Load $F605.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $F5F5.w,Y		; B9 F5 F5 ; Load $F5F5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda ($0C.b),Y		; B1 0C ; Load accumulator ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0051.w		; A9 51 00 ; Load #$0051.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $CA.b		; A5 CA ; Load $CA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $80, $35		; 80 35 ; Branch always to $80, $35 [Flow: branch]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F605.w,X		; BD 05 F6 ; Load $F605.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda ($0C.b),Y		; B1 0C ; Load accumulator ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $F5		; 80 F5 ; Branch always to $80, $F5 [Flow: branch]
	cmp $CA.b		; C5 CA ; Compare $CA.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $EC		; 80 EC ; Branch always to $80, $EC [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $FBE4.w,X		; BD E4 FB ; Load $FBE4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda ($0C.b),Y		; B1 0C ; Load accumulator ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $F009.w,Y		; B9 09 F0 ; Load $F009.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$0B00.w		; C9 00 0B ; Compare #$0B00.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0008.w		; 29 08 00 ; Logical AND #$0008.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0400.w		; A9 00 04 ; Load #$0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$E3FF.w		; 29 FF E3 ; Logical AND #$E3FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0C00.w		; 09 00 0C ; Logical OR #$0C00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0008.w		; 29 08 00 ; Logical AND #$0008.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0B00.w		; A9 00 0B ; Load #$0B00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	lda $F00B.w,Y		; B9 0B F0 ; Load $F00B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$0B00.w		; C9 00 0B ; Compare #$0B00.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0400.w		; A9 00 04 ; Load #$0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$E3FF.w		; 29 FF E3 ; Logical AND #$E3FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0C00.w		; 09 00 0C ; Logical OR #$0C00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0B00.w		; A9 00 0B ; Load #$0B00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $7F0002.l,X		; 9F 02 00 7F ; Store accumulator (long,X) $7F0002.l,X [Reads: Accumulator, X Index]
	lda $F00D.w,Y		; B9 0D F0 ; Load $F00D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$0B00.w		; C9 00 0B ; Compare #$0B00.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0400.w		; A9 00 04 ; Load #$0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$E3FF.w		; 29 FF E3 ; Logical AND #$E3FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0C00.w		; 09 00 0C ; Logical OR #$0C00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0B00.w		; A9 00 0B ; Load #$0B00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $7F0040.l,X		; 9F 40 00 7F ; Store accumulator (long,X) $7F0040.l,X [Reads: Accumulator, X Index]
	lda $F00F.w,Y		; B9 0F F0 ; Load $F00F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$0B00.w		; C9 00 0B ; Compare #$0B00.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0400.w		; A9 00 04 ; Load #$0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$E3FF.w		; 29 FF E3 ; Logical AND #$E3FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0C00.w		; 09 00 0C ; Logical OR #$0C00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0B00.w		; A9 00 0B ; Load #$0B00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $7F0042.l,X		; 9F 42 00 7F ; Store accumulator (long,X) $7F0042.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0005.w		; C9 05 00 ; Compare #$0005.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $E5C0.w		; 4C C0 E5 ; Jump to $E5C0.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $007F00.l,X		; 1F 00 7F 00 ; Logical OR long $007F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	bit #$A700.w		; 89 00 A7 ; Test bits #$A700.w with accumulator [Reads: Accumulator] [Flags: Z]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	lda #$EB00.w		; A9 00 EB ; Load #$EB00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$180F.w		; 29 0F 18 ; Logical AND #$180F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $A4.b		; 65 A4 ; Add $A4.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; [PATTERN: Memory clearing operation] 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $E805.w		; AC 05 E8 ; Load $E805.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $E7F9.w,Y		; D9 F9 E7 ; Compare accumulator $E7F9.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda $E7FF.w,Y		; B9 FF E7 ; Load $E7FF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $F605.w,X		; BD 05 F6 ; Load $F605.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $F5F5.w,Y		; B9 F5 F5 ; Load $F5F5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $80, $E8		; 80 E8 ; Branch always to $80, $E8 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $80, $E1		; 80 E1 ; Branch always to $80, $E1 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E7F7.w		; 6D F7 E7 ; Add $E7F7.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0215.w		; 8D 15 02 ; Store accumulator to $0215.w [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01E0.w		; 29 E0 01 ; Logical AND #$01E0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0215.w		; 6D 15 02 ; Add $0215.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0215.w		; 8D 15 02 ; Store accumulator to $0215.w [Reads: Accumulator]
	ldy $0211.w		; AC 11 02 ; Load $0211.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0CF5.w		; 8D F5 0C ; Store accumulator to $0CF5.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E7F3.w,Y		; 79 F3 E7 ; Add $E7F3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0217.w		; 8D 17 02 ; Store accumulator to $0217.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01E0.w		; 29 E0 01 ; Logical AND #$01E0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0217.w		; 6D 17 02 ; Add $0217.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0217.w		; 8D 17 02 ; Store accumulator to $0217.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EE79.w,X		; 7D 79 EE ; Add $EE79.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F605.w,X		; BD 05 F6 ; Load $F605.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F5F5.w,Y		; 79 F5 F5 ; Add $F5F5.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$40.b		; [PATTERN: Memory clearing operation] A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FA8.w		; 8D A8 0F ; Store accumulator to $0FA8.w [Reads: Accumulator]
	stz $0FA9.w		; 9C A9 0F ; Store zero to $0FA9.w
	sta $0FAA.w		; 8D AA 0F ; Store accumulator to $0FAA.w [Reads: Accumulator]
	stz $0FAB.w		; 9C AB 0F ; Store zero to $0FAB.w
	ldy #$0018.w		; A0 18 00 ; Load #$0018.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($0E.b),Y		; B1 0E ; Load accumulator ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp $E807.w,X		; DD 07 E8 ; Compare accumulator $E807.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda $0FA8.w		; AD A8 0F ; Load $0FA8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0FA8.w		; 8D A8 0F ; Store accumulator to $0FA8.w [Reads: Accumulator]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FA8.w		; 8D A8 0F ; Store accumulator to $0FA8.w [Reads: Accumulator]
	lda $0FAA.w		; AD AA 0F ; Load $0FAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0FAA.w		; [PATTERN: Memory clearing operation] 8D AA 0F ; Store accumulator to $0FAA.w [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $D9		; 10 D9 ; Branch if plus to $10, $D9 [Flow: branch]
	stz $02.b		; 64 02 ; Store zero to $02.b
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $EE79.w,X		; FD 79 EE ; Subtract with carry $EE79.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
.INDEX 8
	sep #$10		; E2 10
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	lda $0FAA.w		; AD AA 0F ; Load $0FAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E975.w,Y		; 79 75 E9 ; Add $E975.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FAA.w		; 8D AA 0F ; Store accumulator to $0FAA.w [Reads: Accumulator]
	.db $80, $F0		; 80 F0 ; Branch always to $80, $F0 [Flow: branch]
	lda $0FAA.w		; AD AA 0F ; Load $0FAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E7F3.w		; [PATTERN: Memory clearing operation] 6D F3 E7 ; Add $E7F3.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FAA.w		; 8D AA 0F ; Store accumulator to $0FAA.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	stz $13.b		; 64 13 ; Store zero to $13.b
	stz $020D.w		; 9C 0D 02 ; Store zero to $020D.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0AE95B.l		; 22 5B E9 0A ; Jump to subroutine long $0AE95B.l [Writes: Stack Pointer] [Flow: call]
	jmp $EAB2.w		; 4C B2 EA ; Jump to $EAB2.w [Flow: jump]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $0AE979.l		; 22 79 E9 0A ; Jump to subroutine long $0AE979.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	stz $020D.w		; 9C 0D 02 ; Store zero to $020D.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E98622.l,X		; FF 22 86 E9 ; Subtract with carry (long,X) $E98622.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $0210.w		; AD 10 02 ; Load $0210.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $EA7F.w		; 4C 7F EA ; Jump to $EA7F.w [Flow: jump]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $0D		; 30 0D ; Branch if minus to $30, $0D [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0210.w		; AD 10 02 ; Load $0210.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $EA75.w		; 4C 75 EA ; Jump to $EA75.w [Flow: jump]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	stz $020F.w		; 9C 0F 02 ; Store zero to $020F.w
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $020E.w		; CD 0E 02 ; Compare $020E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $EA75.w		; 4C 75 EA ; Jump to $EA75.w [Flow: jump]
	inc $020E.w		; EE 0E 02 ; Increment $020E.w [Flags: ZN]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0300.w		; E9 00 03 ; Subtract #$0300.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$0FFF.w		; 29 FF 0F ; Logical AND #$0FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $020E.w		; CD 0E 02 ; Compare $020E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $77		; F0 77 ; Branch if equal to $F0, $77 [Flow: branch]
	dec $020E.w		; CE 0E 02 ; Decrement $020E.w [Flags: ZN]
	dec $020E.w		; CE 0E 02 ; Decrement $020E.w [Flags: ZN]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0600.w		; 69 00 06 ; Add #$0600.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$0FFF.w		; 29 FF 0F ; Logical AND #$0FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A4.b		; C5 A4 ; Compare $A4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0080.w		; 29 80 00 ; Logical AND #$0080.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$EFFF.w		; A9 FF EF ; Load #$EFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$EFFF.w		; A9 FF EF ; Load #$EFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $E4F9.w		; 20 F9 E4 ; Jump to subroutine at $E4F9.w [Writes: Stack Pointer] [Flow: call]
	jsr $E449.w		; 20 49 E4 ; Jump to subroutine at $E449.w [Writes: Stack Pointer] [Flow: call]
	jsr $E579.w		; 20 79 E5 ; Jump to subroutine at $E579.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	inc $0210.w		; EE 10 02 ; Increment $0210.w [Flags: ZN]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E975.w,X		; 7D 75 E9 ; Add $E975.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0213.w		; 8D 13 02 ; Store accumulator to $0213.w [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0008.w		; 29 08 00 ; Logical AND #$0008.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0300.w		; E9 00 03 ; Subtract #$0300.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$0FFF.w		; 29 FF 0F ; Logical AND #$0FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	inc $020E.w		; EE 0E 02 ; Increment $020E.w [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr ($FCFF.w,X)		; FC FF FC ; Jump to subroutine indirect indexed ($FCFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $C20004.l,X		; FF 04 00 C2 ; Subtract with carry (long,X) $C20004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0217.w		; AD 17 02 ; Load $0217.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EA7B.w,X		; 7D 7B EA ; Add $EA7B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0217.w		; 8D 17 02 ; Store accumulator to $0217.w [Reads: Accumulator]
	lda $0FAA.w		; AD AA 0F ; Load $0FAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EA7B.w,X		; 7D 7B EA ; Add $EA7B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FAA.w		; 8D AA 0F ; Store accumulator to $0FAA.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EA77.w,X		; 7D 77 EA ; Add $EA77.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	cmp $0213.w		; CD 13 02 ; Compare $0213.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0210.w		; 9C 10 02 ; Store zero to $0210.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A4.b		; [PATTERN: Memory clearing operation] 65 A4 ; Add $A4.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	jsr $EAF0.w		; 20 F0 EA ; Jump to subroutine at $EAF0.w [Writes: Stack Pointer] [Flow: call]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	jsr $EBA8.w		; 20 A8 EB ; Jump to subroutine at $EBA8.w [Writes: Stack Pointer] [Flow: call]
	inc $0E.b		; E6 0E ; Increment $0E.b [Reads: Direct Page] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	jsr $EB50.w		; 20 50 EB ; Jump to subroutine at $EB50.w [Writes: Stack Pointer] [Flow: call]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	jsr $EDE4.w		; 20 E4 ED ; Jump to subroutine at $EDE4.w [Writes: Stack Pointer] [Flow: call]
	jsr $EC0A.w		; 20 0A EC ; Jump to subroutine at $EC0A.w [Writes: Stack Pointer] [Flow: call]
	jsr $ECCF.w		; 20 CF EC ; Jump to subroutine at $ECCF.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $C24C.w,Y		; 19 4C C2 ; OR accumulator with memory $C24C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	tsb $38.b		; 04 38 ; Test and set bits $38.b [Reads: Accumulator] [Flags: Z]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $03.b		; E5 03 ; Subtract $03.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $EAEE.w		; AD EE EA ; Load $EAEE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $ECBE.w,Y		; B9 BE EC ; Load $ECBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	stz $0802.w,X		; 9E 02 08 ; Store zero to $0802.w,X [Reads: X Index]
	lda #$3E.b		; A9 3E ; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0ABD.w		; AC BD 0A ; Load $0ABD.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; 9D 03 08 ; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3D3B.w,Y		; 39 3B 3D ; AND accumulator with memory $3D3B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0215.w		; AD 15 02 ; Load $0215.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	lda $0218.w		; AD 18 02 ; Load $0218.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda $0217.w		; AD 17 02 ; Load $0217.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EB40.w		; AD 40 EB ; Load $EB40.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $EB48.w,Y		; B9 48 EB ; Load $EB48.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; 9D 03 08 ; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($B1.b),Y		; F1 B1 ; Subtract with carry ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($31.b),Y		; 71 31 ; Add with carry ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $080C.w		; 0C 0C 08 ; Test and set bits $080C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0215.w		; AD 15 02 ; Load $0215.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EB8A.w,Y		; 79 8A EB ; Add $EB8A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0CF5.w		; AD F5 0C ; Load $0CF5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E7F3.w,Y		; 79 F3 E7 ; Add $E7F3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EB8E.w,Y		; 79 8E EB ; Add $EB8E.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	stz $0802.w,X		; 9E 02 08 ; Store zero to $0802.w,X [Reads: X Index]
	lda $EB92.w,Y		; B9 92 EB ; Load $EB92.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $0F.b		; E6 0F ; Increment $0F.b [Reads: Direct Page] [Flags: ZN]
	lda $0217.w		; AD 17 02 ; Load $0217.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0F.b		; C5 0F ; Compare $0F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0218.w		; AD 18 02 ; Load $0218.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $EB96.w,Y		; 19 96 EB ; OR accumulator with memory $EB96.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; 9D 03 08 ; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $A1		; 10 A1 ; Branch if plus to $10, $A1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: ZN]
	stx $04.b		; 86 04 ; Store X register to $04.b [Reads: X Index]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	stx $04.b		; 86 04 ; Store X register to $04.b [Reads: X Index]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	lda $ECBE.w,Y		; B9 BE EC ; Load $ECBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	sta $0A21.w,X		; 9D 21 0A ; Store accumulator to $0A21.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0804.w,X		; 9D 04 08 ; Store accumulator to $0804.w,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	sta $0805.w,X		; 9D 05 08 ; Store accumulator to $0805.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$3D.b		; A9 3D ; Load #$3D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; 9D 03 08 ; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	sta $0807.w,X		; 9D 07 08 ; Store accumulator to $0807.w,X [Reads: Accumulator, X Index]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0806.w,X		; 9D 06 08 ; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	lda $ECC6.w,Y		; B9 C6 EC ; Load $ECC6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $ECC6.w,Y		; B9 C6 EC ; Load $ECC6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0806.w,X		; 9D 06 08 ; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $03.b		; C5 03 ; Compare $03.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $A6		; D0 A6 ; Branch if not equal to $D0, $A6 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	asl $201F.w,X		; 1E 1F 20 ; Arithmetic shift left $201F.w,X [Reads: X Index] [Flags: ZNC]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3D.b		; 25 3D ; Logical AND $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $020E.w		; AD 0E 02 ; Load $020E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$10		; E2 10
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	inc $05.b		; E6 05 ; Increment $05.b [Reads: Direct Page] [Flags: ZN]
	inc $05.b		; E6 05 ; Increment $05.b [Reads: Direct Page] [Flags: ZN]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $ECCE.w		; AD CE EC ; Load $ECCE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b,X		; 95 0E ; Store accumulator to $0E.b,X [Reads: Accumulator, X Index]
.INDEX 16
	rep #$10		; C2 10
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $01.b		; E5 01 ; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	dec $05.b		; C6 05 ; Decrement $05.b [Reads: Direct Page] [Flags: ZN]
	dec $05.b		; C6 05 ; Decrement $05.b [Reads: Direct Page] [Flags: ZN]
	inc $03.b		; E6 03 ; Increment $03.b [Reads: Direct Page] [Flags: ZN]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $B9, $FF		; 82 B9 FF ; Branch always long to $82, $B9, $FF [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and [$A4.b],Y		; 37 A4 ; AND accumulator with memory (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $38EC.w,Y		; BE EC 38 ; Load X register $38EC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$10		; E2 10
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D.b		; 65 0D ; Add $0D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $0D.b		; 84 0D ; Store Y register to $0D.b [Reads: Y Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx $0D.b		; A6 0D ; Load $0D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $ED4E.w,X		; BD 4E ED ; Load $ED4E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A60.w,Y		; 99 60 0A ; Store accumulator to $0A60.w,Y [Reads: Accumulator, Y Index]
	sta $0A64.w,Y		; 99 64 0A ; Store accumulator to $0A64.w,Y [Reads: Accumulator, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0900.w,Y		; 99 00 09 ; Store accumulator to $0900.w,Y [Reads: Accumulator, Y Index]
	sta $0910.w,Y		; 99 10 09 ; Store accumulator to $0910.w,Y [Reads: Accumulator, Y Index]
	lda $02.b,X		; B5 02 ; Load $02.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0901.w,Y		; 99 01 09 ; Store accumulator to $0901.w,Y [Reads: Accumulator, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0911.w,Y		; 99 11 09 ; Store accumulator to $0911.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $ED50.w,X		; BD 50 ED ; Load $ED50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0902.w,Y		; 99 02 09 ; Store accumulator to $0902.w,Y [Reads: Accumulator, Y Index]
	sta $0912.w,Y		; 99 12 09 ; Store accumulator to $0912.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta $0903.w,Y		; 99 03 09 ; Store accumulator to $0903.w,Y [Reads: Accumulator, Y Index]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0913.w,Y		; 99 13 09 ; Store accumulator to $0913.w,Y [Reads: Accumulator, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $B4		; 10 B4 ; Branch if plus to $10, $B4 [Flow: branch]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $A2		; 10 A2 ; Branch if plus to $10, $A2 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $E807.w,X		; BD 07 E8 ; Load $E807.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $7EF001.l,X		; BF 01 F0 7E ; Load long $7EF001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF364.l		; AF 64 F3 7E ; Load long $7EF364.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $0098C0.l,X		; 3F C0 98 00 ; AND accumulator with memory (long,X) $0098C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $EE7A.w,X		; BD 7A EE ; Load $EE7A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $EE95.w		; 20 95 EE ; Jump to subroutine at $EE95.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.INDEX 8
	sep #$10		; E2 10
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $39		; B0 39 ; Branch if carry set to $B0, $39 [Flow: branch]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,Y		; 99 20 0A ; Store accumulator to $0A20.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EE5E.w,X		; BD 5E EE ; Load $EE5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FA8.w		; 6D A8 0F ; Add $0FA8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$90.b		; 69 90 ; Add #$90.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0800.w,Y		; 99 00 08 ; Store accumulator to $0800.w,Y [Reads: Accumulator, Y Index]
	lda $0FAB.w		; AD AB 0F ; Load $0FAB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $EE5D.w,X		; BD 5D EE ; Load $EE5D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FAA.w		; 6D AA 0F ; Add $0FAA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0801.w,Y		; 99 01 08 ; Store accumulator to $0801.w,Y [Reads: Accumulator, Y Index]
	lda $EE5B.w		; AD 5B EE ; Load $EE5B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,Y		; 99 02 08 ; Store accumulator to $0802.w,Y [Reads: Accumulator, Y Index]
	lda $EE5C.w		; AD 5C EE ; Load $EE5C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,Y		; 99 03 08 ; Store accumulator to $0803.w,Y [Reads: Accumulator, Y Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01FFFF.l,X		; FF FF FF 01 ; Subtract with carry (long,X) $01FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $29F5.w,Y		; D9 F5 29 ; Compare accumulator $29F5.w,Y [Reads: Y Index] [Flags: ZNC]
	ora $180285.l		; 0F 85 02 18 ; OR accumulator with memory (long) $180285.l [Writes: Accumulator] [Flags: ZN]
	adc $EE79.w,X		; 7D 79 EE ; Add $EE79.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $03.b		; E5 03 ; Subtract $03.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $27		; B0 27 ; Branch if carry set to $B0, $27 [Flow: branch]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $EAEF.w		; AD EF EA ; Load $EAEF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $ECBE.w,Y		; B9 BE EC ; Load $ECBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	lda $EE5B.w		; AD 5B EE ; Load $EE5B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $EE5C.w		; AD 5C EE ; Load $EE5C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; 9D 03 08 ; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
.INDEX 16
	rep #$10		; C2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0213.w		; AD 13 02 ; Load $0213.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	lda $0213.w		; AD 13 02 ; Load $0213.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0217.w		; 6D 17 02 ; Add $0217.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0217.w		; 8D 17 02 ; Store accumulator to $0217.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	dec $0205.w		; CE 05 02 ; Decrement $0205.w [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	dec $0200.w		; CE 00 02 ; Decrement $0200.w [Flags: ZN]
	rtl		; [PATTERN: Memory clearing operation] 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9B.b		; A5 9B ; Load $9B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	stz $9B.b		; 64 9B ; Store zero to $9B.b
	jsl $00834B.l		; 22 4B 83 00 ; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC211.l		; AF 11 C2 7E ; Load long $7EC211.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda $7EC212.l		; AF 12 C2 7E ; Load long $7EC212.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00001D.l		; 8F 1D 00 00 ; Store accumulator (long) $00001D.l [Reads: Accumulator]
	lda $7EC20E.l		; AF 0E C2 7E ; Load long $7EC20E.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda $7EC20F.l		; AF 0F C2 7E ; Load long $7EC20F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda $7EC210.l		; [PATTERN: Memory clearing operation] AF 10 C2 7E ; Load long $7EC210.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	stz $0AB2.w		; 9C B2 0A ; Store zero to $0AB2.w
	jsl $0DFA6C.l		; [PATTERN: Memory clearing operation] 22 6C FA 0D ; Jump to subroutine long $0DFA6C.l [Writes: Stack Pointer] [Flow: call]
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	jsl $0090E3.l		; 22 E3 90 00 ; Jump to subroutine long $0090E3.l [Writes: Stack Pointer] [Flow: call]
	jsl $00913F.l		; 22 3F 91 00 ; Jump to subroutine long $00913F.l [Writes: Stack Pointer] [Flow: call]
	jsl $0090E3.l		; 22 E3 90 00 ; Jump to subroutine long $0090E3.l [Writes: Stack Pointer] [Flow: call]
	lda $045C.w		; [PATTERN: Memory clearing operation] AD 5C 04 ; Load $045C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	stz $17.b		; 64 17 ; Store zero to $17.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FDD80.l,X		; BF 80 DD 7F ; Load long $7FDD80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	lda $7FDE00.l,X		; BF 00 DE 7F ; Load long $7FDE00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	lda $7FDE80.l,X		; BF 80 DE 7F ; Load long $7FDE80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC600.l,X		; 9F 00 C6 7E ; Store accumulator (long,X) $7EC600.l,X [Reads: Accumulator, X Index]
	lda $7FDF00.l,X		; BF 00 DF 7F ; Load long $7FDF00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC680.l,X		; 9F 80 C6 7E ; Store accumulator (long,X) $7EC680.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $7EC017.l		; AF 17 C0 7E ; Load long $7EC017.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $9C.b		; 04 9C ; Test and set bits $9C.b [Reads: Accumulator] [Flags: Z]
	tsb $9D.b		; 04 9D ; Test and set bits $9D.b [Reads: Accumulator] [Flags: Z]
	tsb $9E.b		; 04 9E ; Test and set bits $9E.b [Reads: Accumulator] [Flags: Z]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$F3.b		; A9 F3 ; Load #$F3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	jsl $0297B2.l		; [PATTERN: Memory clearing operation] 22 B2 97 02 ; Jump to subroutine long $0297B2.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	stz $13.b		; 64 13 ; Store zero to $13.b
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00FDA7.l		; 22 A7 FD 00 ; Jump to subroutine long $00FDA7.l [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and #$1B.b		; 29 1B ; Logical AND #$1B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit $2D1B.w		; 2C 1B 2D ; Test bits $2D1B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $101B.w		; 2E 1B 10 ; Rotate left $101B.w [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $C9101B.l		; 2F 1B 10 C9 ; AND accumulator with memory (long) $C9101B.l [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1B2E1B.l		; 2F 1B 2E 1B ; AND accumulator with memory (long) $1B2E1B.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $E5		; 10 E5 ; Branch if plus to $10, $E5 [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1B2E1B.l		; 2F 1B 2E 1B ; AND accumulator with memory (long) $1B2E1B.l [Writes: Accumulator] [Flags: ZN]
	and $1B2F5B.l		; 2F 5B 2F 1B ; AND accumulator with memory (long) $1B2F5B.l [Writes: Accumulator] [Flags: ZN]
	rol $2E1B.w		; 2E 1B 2E ; Rotate left $2E1B.w [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $04111B.l		; 2F 1B 11 04 ; AND accumulator with memory (long) $04111B.l [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tsb $1B2E.w		; 0C 2E 1B ; Test and set bits $1B2E.w [Reads: Accumulator] [Flags: Z]
	adc ($0B.b,X)		; 61 0B ; Add with carry ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($53.b,X)		; 61 53 ; Add with carry ($53.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8B.b,X)		; 61 8B ; Add with carry ($8B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $8B, $60		; 62 8B 60 ; Push effective relative address $62, $8B, $60 [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $0B.b,S		; 63 0B ; Add with carry (stack relative) $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0B.b		; 65 0B ; Add $0B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $0B.b		; 66 0B ; Rotate right $0B.b [Reads: Direct Page] [Flags: ZNC]
	adc [$0B.b]		; 67 0B ; Add with carry (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$4B.b]		; 67 4B ; Add with carry (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$93.b]		; 67 93 ; Add with carry (long) [$93.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$D3.b]		; 67 D3 ; Add with carry (long) [$D3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor ($60.b,S),Y		; 53 60 ; XOR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	wai		; CB ; Wait for interrupt
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $6D4B.w		; 6D 4B 6D ; Add $6D4B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($69.b,S),Y		; 13 69 ; OR accumulator (stack relative indirect indexed) ($69.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($6C.b,S),Y		; 13 6C ; OR accumulator (stack relative indirect indexed) ($6C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $6E0B.w		; 6D 0B 6E ; Add $6E0B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($6E.b,S),Y		; 13 6E ; OR accumulator (stack relative indirect indexed) ($6E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0B0013.l		; 6F 13 00 0B ; Add with carry (long) $0B0013.l [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $6D,$17		; 44 17 6D ; Move block positive $6D,$17 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($6D.b,S),Y		; 53 6D ; XOR accumulator (stack relative indirect indexed) ($6D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($76.b,S),Y		; 13 76 ; OR accumulator (stack relative indirect indexed) ($76.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ror $0B.b,X		; 76 0B ; Rotate right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $70, $0B		; 70 0B ; Branch if overflow set to $70, $0B [Flow: branch]
	adc ($0B.b),Y		; 71 0B ; Add with carry ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0B.b)		; 72 0B ; Add with carry (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8B.b),Y		; 71 8B ; Add with carry ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0B.b,X		; 75 0B ; Add $0B.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $0B.b,X		; 76 0B ; Rotate right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $8B.b,X		; 75 8B ; Add $8B.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $8B.b,X		; 76 8B ; Rotate right $8B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($0B.b,S),Y		; 53 0B ; XOR accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0B.b,X		; 55 0B ; Exclusive OR accumulator with memory $0B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$13		; 54 13 54 ; Move block negative $54,$13 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($4B.b,S),Y		; 53 4B ; XOR accumulator (stack relative indirect indexed) ($4B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0B.b,X		; 56 0B ; Logical shift right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$0B.b],Y		; 57 0B ; Exclusive OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $000B.w,Y		; 59 0B 00 ; Exclusive OR accumulator with memory $000B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $5A13.w,X		; 5E 13 5A ; Logical shift right $5A13.w,X [Reads: X Index] [Flags: ZNC]
	ora ($5B.b,S),Y		; 13 5B ; OR accumulator (stack relative indirect indexed) ($5B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($5F.b,S),Y		; 13 5F ; OR accumulator (stack relative indirect indexed) ($5F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($5F.b,S),Y		; 13 5F ; OR accumulator (stack relative indirect indexed) ($5F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5C.b,S),Y		; 53 5C ; XOR accumulator (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $5E0B.w,X		; 5D 0B 5E ; Exclusive OR accumulator with memory $5E0B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($58.b,S),Y		; 53 58 ; XOR accumulator (stack relative indirect indexed) ($58.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	.db $50, $0B		; 50 0B ; Branch if overflow clear to $50, $0B [Flow: branch]
	.db $50, $4B		; 50 4B ; Branch if overflow clear to $50, $4B [Flow: branch]
	eor ($13.b)		; 52 13 ; Exclusive OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $13.b		; 45 13 ; Exclusive OR $13.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $0B.b		; 46 0B ; Logical shift right $0B.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $8B		; 42 8B ; Reserved instruction
	eor [$0B.b]		; 47 0B ; Exclusive OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $0B		; 42 0B ; Reserved instruction
	eor #$0B.b		; 49 0B ; Exclusive OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($48.b,S),Y		; 13 48 ; OR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($4A.b,S),Y		; 53 4A ; XOR accumulator (stack relative indirect indexed) ($4A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$4A.b],Y		; 17 4A ; OR accumulator with memory (long indexed) [$4A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b],Y		; 57 47 ; Exclusive OR accumulator with memory (long indexed) [$47.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $CB		; 42 CB ; Reserved instruction
	eor #$4B.b		; 49 4B ; Exclusive OR #$4B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $4B		; 42 4B ; Reserved instruction
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $4C0B.w		; 4D 0B 4C ; Exclusive OR $4C0B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp $4E4B.w		; 4C 4B 4E ; Jump to $4E4B.w [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $514B.w		; 4E 4B 51 ; Logical shift right $514B.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $00,$0B		; 44 0B 00 ; Move block positive $00,$0B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $4B4F0B.l		; 4F 0B 4F 4B ; Exclusive OR accumulator with memory (long) $4B4F0B.l [Writes: Accumulator] [Flags: ZN]
	eor $D34F93.l		; 4F 93 4F D3 ; Exclusive OR accumulator with memory (long) $D34F93.l [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($0B.b,X)		; 41 0B ; Exclusive OR accumulator with memory ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $0B		; 42 0B ; Reserved instruction
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0B.b,S		; 43 0B ; Exclusive OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $0B.b,S		; 43 0B ; Exclusive OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$93		; 44 93 00 ; Move block positive $00,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($13.b,X)		; 41 13 ; Exclusive OR accumulator with memory ($13.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora [$40.b],Y		; 17 40 ; OR accumulator with memory (long indexed) [$40.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $42, $0B		; 42 0B ; Reserved instruction
	adc $7A0B.w,X		; 7D 0B 7A ; Add $7A0B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $7E0B.w,X		; 7E 0B 7E ; Rotate right $7E0B.w,X [Reads: X Index] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $BA8B.w		; 4D 8B BA ; Exclusive OR $BA8B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $0B.b,X		; 55 0B ; Exclusive OR accumulator with memory $0B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $8B.b,X		; 55 8B ; Exclusive OR accumulator with memory $8B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($53.b,S),Y		; 13 53 ; OR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	ror $4B.b,X		; 76 4B ; Rotate right $4B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $4B.b,X		; 75 4B ; Add $4B.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($BB.b,S),Y		; 13 BB ; OR accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($7F.b,S),Y		; 53 7F ; XOR accumulator (stack relative indirect indexed) ($7F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $4B		; 42 4B ; Reserved instruction
	sta $0B.b,S		; 83 0B ; Store accumulator (stack relative) $0B.b,S [Reads: Accumulator, Stack Pointer]
	ldy $0013.w,X		; BC 13 00 ; Load Y register $0013.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000B.w,Y		; 79 0B 00 ; Add $000B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $7C0B.w		; 6E 0B 7C ; Rotate right $7C0B.w [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($0B.b,X)		; 41 0B ; Exclusive OR accumulator with memory ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($55.b,S),Y		; 13 55 ; OR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $42, $0B		; 42 0B ; Reserved instruction
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $42, $8B		; 42 8B ; Reserved instruction
	mvp $41,$93		; 44 93 41 ; Move block positive $41,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($0B.b,S),Y		; 53 0B ; XOR accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $53,$93		; 44 93 53 ; Move block positive $53,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	mvp $42,$93		; 44 93 42 ; Move block positive $42,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	mvp $42,$93		; 44 93 42 ; Move block positive $42,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $4D,$93		; 44 93 4D ; Move block positive $4D,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($8B.b,S),Y		; 53 8B ; XOR accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $00,$93		; 44 93 00 ; Move block positive $00,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($0B.b,X)		; 41 0B ; Exclusive OR accumulator with memory ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $13.b		; 84 13 ; Store Y register to $13.b [Reads: Y Index]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $8513.w,Y		; B9 13 85 ; Load $8513.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp ($87CB.w,X)		; 7C CB 87 ; Jump indirect indexed to ($87CB.w,X) [Reads: X Index] [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $00,$93		; 44 93 00 ; Move block positive $00,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($0B.b),Y		; 91 0B ; Store accumulator ($0B.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($53.b),Y		; 91 53 ; Store accumulator ($53.b),Y [Reads: Accumulator, Direct Page, Y Index]
	stz $9C0B.w		; 9C 0B 9C ; Store zero to $9C0B.w
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $8B		; 42 8B ; Reserved instruction
	sta ($13.b)		; 92 13 ; Store accumulator (indirect) ($13.b) [Reads: Accumulator, Direct Page]
	sta ($0B.b,S),Y		; 93 0B ; Store accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $13.b,X		; 94 13 ; Store Y register $13.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta $0B.b,X		; 95 0B ; Store accumulator to $0B.b,X [Reads: Accumulator, X Index]
	stx $0B.b,Y		; 96 0B ; Store X register $0B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $93.b,X		; 95 93 ; Store accumulator to $93.b,X [Reads: Accumulator, X Index]
	stx $8B.b,Y		; 96 8B ; Store X register $8B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$0B.b],Y		; 97 0B ; Store accumulator (long indexed) [$0B.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta [$8B.b],Y		; 97 8B ; Store accumulator (long indexed) [$8B.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $9917.w,Y		; 99 17 99 ; Store accumulator to $9917.w,Y [Reads: Accumulator, Y Index]
	eor [$99.b],Y		; 57 99 ; Exclusive OR accumulator with memory (long indexed) [$99.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$99.b],Y		; 97 99 ; Store accumulator (long indexed) [$99.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp [$98.b],Y		; D7 98 ; Compare accumulator (long indexed) [$98.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta [$4B.b],Y		; 97 4B ; Store accumulator (long indexed) [$4B.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	sta [$CB.b],Y		; 97 CB ; Store accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0B.b		; A6 0B ; Load $0B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $4B.b		; A6 4B ; Load $4B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $8E0B.w		; 8E 0B 8E ; Store X register to $8E0B.w [Reads: X Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stx $8E93.w		; 8E 93 8E ; Store X register to $8E93.w [Reads: X Index]
	wai		; CB ; Wait for interrupt
	eor $8F93.w		; 4D 93 8F ; Exclusive OR $8F93.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	.db $90, $53		; 90 53 ; Branch if carry clear to $90, $53 [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0093.w		; 4E 93 00 ; Logical shift right $0093.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $728B.w		; 4D 8B 72 ; Exclusive OR $728B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lsr $13.b		; 46 13 ; Logical shift right $13.b [Reads: Direct Page] [Flags: ZNC]
	eor $0B.b		; 45 0B ; Exclusive OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $0B.b		; 46 0B ; Logical shift right $0B.b [Reads: Direct Page] [Flags: ZNC]
	mvp $44,$57		; 44 57 44 ; Move block positive $44,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0013.w		; 4D 13 00 ; Exclusive OR $0013.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvn $00,$8B		; 54 8B 00 ; Move block negative $00,$8B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor #$13.b		; 49 13 ; Exclusive OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$13.b		; 49 13 ; Exclusive OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc ($0B.b)		; 72 0B ; Add with carry (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($4B.b)		; 72 4B ; Add with carry (indirect) ($4B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $0B.b,X		; 74 0B ; Store zero to $0B.b,X [Reads: X Index]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	adc ($0B.b),Y		; 71 0B ; Add with carry ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$17.b]		; 47 17 ; Exclusive OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0B4B17.l		; AF 17 4B 0B ; Load long $0B4B17.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $13700B.l		; 6F 0B 70 13 ; Add with carry (long) $13700B.l [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($6B8B.w)		; 6C 8B 6B ; Jump indirect to ($6B8B.w) [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda $730B.w		; AD 0B 73 ; Load $730B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $4613.w		; AE 13 46 ; Load $4613.w into X register [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$6B.b],Y		; 17 6B ; OR accumulator with memory (long indexed) [$6B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$6A.b],Y		; 57 6A ; Exclusive OR accumulator with memory (long indexed) [$6A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($68.b,S),Y		; 13 68 ; OR accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($69.b,S),Y		; 53 69 ; XOR accumulator (stack relative indirect indexed) ($69.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($69.b,S),Y		; 13 69 ; OR accumulator (stack relative indirect indexed) ($69.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($4E.b,S),Y		; 53 4E ; XOR accumulator (stack relative indirect indexed) ($4E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $00,$93		; 54 93 00 ; Move block negative $00,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$53.b],Y		; 77 53 ; Add with carry (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0097.w		; 4D 97 00 ; Exclusive OR $0097.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $518B.w		; 4D 8B 51 ; Exclusive OR $518B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $7A0B.w		; 8D 0B 7A ; Store accumulator to $7A0B.w [Reads: Accumulator]
	eor ($7A.b,S),Y		; 53 7A ; XOR accumulator (stack relative indirect indexed) ($7A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($42.b,S),Y		; 13 42 ; OR accumulator (stack relative indirect indexed) ($42.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	ror $0057.w		; 6E 57 00 ; Rotate right $0057.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $9F0B.w		; 6E 0B 9F ; Rotate right $9F0B.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $4B.b		; A5 4B ; Load $4B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$13.b		; A0 13 ; Load #$13.b into Y register [Writes: Y Index] [Flags: ZN]
	lda ($13.b,X)		; A1 13 ; Load accumulator ($13.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: ZN]
	lda $0B.b,S		; A3 0B ; Load accumulator (stack relative) $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $0B.b		; A4 0B ; Load $0B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $8B.b,X		; 55 8B ; Exclusive OR accumulator with memory $8B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $0B		; 42 0B ; Reserved instruction
	sta [$CB.b]		; 87 CB ; Store accumulator (long) [$CB.b] [Reads: Accumulator, Direct Page]
	sta $8B.b,X		; 95 8B ; Store accumulator to $8B.b,X [Reads: Accumulator, X Index]
	lda [$0B.b]		; A7 0B ; Load accumulator (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $8B		; 42 8B ; Reserved instruction
	lda $4B780B.l		; AF 0B 78 4B ; Load long $4B780B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $8B		; 42 8B ; Reserved instruction
	eor ($0B.b),Y		; 51 0B ; Exclusive OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($8B.b),Y		; 51 8B ; Exclusive OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $A90B.w		; AC 0B A9 ; Load $A90B.w into Y register [Writes: Y Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora [$B4.b],Y		; 17 B4 ; OR accumulator with memory (long indexed) [$B4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($AB.b,S),Y		; 13 AB ; OR accumulator (stack relative indirect indexed) ($AB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda ($17.b),Y		; B1 17 ; Load accumulator ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($0B.b,X)		; 41 0B ; Exclusive OR accumulator with memory ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$4B		; 44 4B 42 ; Move block positive $42,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $000B.w		; AD 0B 00 ; Load $000B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldx $4013.w		; AE 13 40 ; Load $4013.w into X register [Writes: X Index] [Flags: ZN]
	ora ($B7.b,S),Y		; 13 B7 ; OR accumulator (stack relative indirect indexed) ($B7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $42, $0B		; 42 0B ; Reserved instruction
	ldx $0B.b,Y		; B6 0B ; Load X register $0B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9E13.w,X		; 9D 13 9E ; Store accumulator to $9E13.w,X [Reads: Accumulator, X Index]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000B.w,Y		; 79 0B 00 ; Add $000B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $8B		; 42 8B ; Reserved instruction
	stx $0B.b		; 86 0B ; Store X register to $0B.b [Reads: X Index]
	.db $42, $0B		; 42 0B ; Reserved instruction
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $42, $8B		; 42 8B ; Reserved instruction
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta [$0B.b]		; 87 0B ; Store accumulator (long) [$0B.b] [Reads: Accumulator, Direct Page]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta [$93.b]		; 87 93 ; Store accumulator (long) [$93.b] [Reads: Accumulator, Direct Page]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($13.b,S),Y		; B3 13 ; Load accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($8D.b,S),Y		; 13 8D ; OR accumulator (stack relative indirect indexed) ($8D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $42, $8B		; 42 8B ; Reserved instruction
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor ($40.b,S),Y		; 53 40 ; XOR accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $42,$4B		; 44 4B 42 ; Move block positive $42,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp ($B5.b,S),Y		; D3 B5 ; Compare accumulator (stack relative indirect indexed) ($B5.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sta [$78.b],Y		; 97 78 ; Store accumulator (long indexed) [$78.b],Y [Reads: Accumulator, Direct Page, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda ($13.b,S),Y		; B3 13 ; Load accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $8B.b,X		; 55 8B ; Exclusive OR accumulator with memory $8B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta $890B.w		; 8D 0B 89 ; Store accumulator to $890B.w [Reads: Accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8B.b,S),Y		; 13 8B ; OR accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sty $000B.w		; 8C 0B 00 ; Store Y register to $000B.w [Reads: Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($000B.w,X)		; 7C 0B 00 ; Jump indirect indexed to ($000B.w,X) [Reads: X Index] [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $0B.b,X		; 56 0B ; Logical shift right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($86.b,S),Y		; 93 86 ; Store accumulator (stack relative indirect indexed) ($86.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora [$65.b],Y		; 17 65 ; OR accumulator with memory (long indexed) [$65.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	wai		; CB ; Wait for interrupt
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora ($AC.b,S),Y		; 13 AC ; OR accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0013.w,X		; 7E 13 00 ; Rotate right $0013.w,X [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0013.w,X		; 7E 13 00 ; Rotate right $0013.w,X [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $17.b,S		; 83 17 ; Store accumulator (stack relative) $17.b,S [Reads: Accumulator, Stack Pointer]
	sty $13.b		; 84 13 ; Store Y register to $13.b [Reads: Y Index]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0053.w,X		; 7E 53 00 ; Rotate right $0053.w,X [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $0B.b,S		; 43 0B ; Exclusive OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $CB.b,S		; 43 CB ; Exclusive OR accumulator with stack relative $CB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7A13.w,Y		; 79 13 7A ; Add $7A13.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($5A.b,S),Y		; 13 5A ; OR accumulator (stack relative indirect indexed) ($5A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc $138013.l,X		; 7F 13 80 13 ; Add long $138013.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($13.b,X)		; 81 13 ; Store accumulator ($13.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $82, $13, $00		; 82 13 00 ; Branch always long to $82, $13, $00 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$13.b]		; 87 13 ; Store accumulator (long) [$13.b] [Reads: Accumulator, Direct Page]
	adc [$13.b],Y		; 77 13 ; Add with carry (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $57.b		; 46 57 ; Logical shift right $57.b [Reads: Direct Page] [Flags: ZNC]
	eor [$0B.b]		; 47 0B ; Exclusive OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$13.b		; 49 13 ; Exclusive OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $13.b,X		; 75 13 ; Add $13.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $4B		; 42 4B ; Reserved instruction
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$4A.b],Y		; 17 4A ; OR accumulator with memory (long indexed) [$4A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$43.b],Y		; 57 43 ; Exclusive OR accumulator with memory (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $45,$13		; 44 13 45 ; Move block positive $45,$13 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $17.b		; 46 17 ; Logical shift right $17.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $17		; 42 17 ; Reserved instruction
	.db $42, $57		; 42 57 ; Reserved instruction
	.db $42, $8B		; 42 8B ; Reserved instruction
	.db $42, $CB		; 42 CB ; Reserved instruction
	adc $13.b,X		; 75 13 ; Add $13.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $53.b,X		; 75 53 ; Add $53.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $8B		; 42 8B ; Reserved instruction
	.db $42, $CB		; 42 CB ; Reserved instruction
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($41.b,S),Y		; 13 41 ; OR accumulator (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	adc ($0B.b),Y		; 71 0B ; Add with carry ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $17.b		; 86 17 ; Store X register to $17.b [Reads: X Index]
	adc ($8B.b),Y		; 71 8B ; Add with carry ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$13.b]		; 47 13 ; Exclusive OR accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $650B.w		; 4D 0B 65 ; Exclusive OR $650B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ror $4B.b		; 66 4B ; Rotate right $4B.b [Reads: Direct Page] [Flags: ZNC]
	adc $8B.b		; 65 8B ; Add $8B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $0B.b		; 65 0B ; Add $0B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $93.b		; 65 93 ; Add $93.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $0B.b		; 66 0B ; Rotate right $0B.b [Reads: Direct Page] [Flags: ZNC]
	adc $0B.b,S		; 63 0B ; Add with carry (stack relative) $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ror $8B.b		; 66 8B ; Rotate right $8B.b [Reads: Direct Page] [Flags: ZNC]
	eor ($4B.b),Y		; 51 4B ; Exclusive OR accumulator with memory ($4B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $CB760B.l,X		; 5F 0B 76 CB ; Exclusive OR accumulator with memory (long,X) $CB760B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	eor $4B604B.l		; 4F 4B 60 4B ; Exclusive OR accumulator with memory (long) $4B604B.l [Writes: Accumulator] [Flags: ZN]
	ror $8B.b,X		; 76 8B ; Rotate right $8B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $4B.b,X		; 76 4B ; Rotate right $4B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($0B.b,X)		; 61 0B ; Add with carry ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $D3.b,X		; 76 D3 ; Rotate right $D3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $62, $13, $61		; 62 13 61 ; Push effective relative address $62, $13, $61 [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ror $0B.b,X		; 76 0B ; Rotate right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	wai		; CB ; Wait for interrupt
	eor ($8B.b),Y		; 51 8B ; Exclusive OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $57.b		; 46 57 ; Logical shift right $57.b [Reads: Direct Page] [Flags: ZNC]
	lsr $000B.w,X		; 5E 0B 00 ; Logical shift right $000B.w,X [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $460B.w,X		; 5E 0B 46 ; Logical shift right $460B.w,X [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0B510B.l		; 4F 0B 51 0B ; Exclusive OR accumulator with memory (long) $0B510B.l [Writes: Accumulator] [Flags: ZN]
	ror $CB.b,X		; 76 CB ; Rotate right $CB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $8B.b,X		; 76 8B ; Rotate right $8B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($53.b),Y		; 51 53 ; Exclusive OR accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($0B.b),Y		; 51 0B ; Exclusive OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $8B518B.l		; 4F 8B 51 8B ; Exclusive OR accumulator with memory (long) $8B518B.l [Writes: Accumulator] [Flags: ZN]
	ror $4B.b,X		; 76 4B ; Rotate right $4B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $0B.b,X		; 76 0B ; Rotate right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($CB.b),Y		; 51 CB ; Exclusive OR accumulator with memory ($CB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	mvn $00,$0B		; 54 0B 00 ; Move block negative $00,$0B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $8B.b		; 66 8B ; Rotate right $8B.b [Reads: Direct Page] [Flags: ZNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lsr $0B.b,X		; 56 0B ; Logical shift right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $4B.b		; 45 4B ; Exclusive OR $4B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$0B.b],Y		; 57 0B ; Exclusive OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $500B.w,Y		; 59 0B 50 ; Exclusive OR accumulator with memory $500B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $50, $CB		; 50 CB ; Branch if overflow clear to $50, $CB [Flow: branch]
	.db $50, $8B		; 50 8B ; Branch if overflow clear to $50, $8B [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor [$51.b],Y		; 57 51 ; Exclusive OR accumulator with memory (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$58.b],Y		; 17 58 ; OR accumulator with memory (long indexed) [$58.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($8B.b),Y		; 51 8B ; Exclusive OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $0B.b,X		; 56 0B ; Logical shift right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $4B.b,X		; 56 4B ; Logical shift right $4B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $0B.b		; 65 0B ; Add $0B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp $4B0B.w		; 4C 0B 4B ; Jump to $4B0B.w [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $000B.w		; 4D 0B 00 ; Exclusive OR $000B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvn $00,$8B		; 54 8B 00 ; Move block negative $00,$8B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $0B500B.l		; 4F 0B 50 0B ; Exclusive OR accumulator with memory (long) $0B500B.l [Writes: Accumulator] [Flags: ZN]
	eor $8B508B.l		; 4F 8B 50 8B ; Exclusive OR accumulator with memory (long) $8B508B.l [Writes: Accumulator] [Flags: ZN]
	.db $50, $4B		; 50 4B ; Branch if overflow clear to $50, $4B [Flow: branch]
	eor ($0B.b),Y		; 51 0B ; Exclusive OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	wai		; CB ; Wait for interrupt
	eor ($8B.b),Y		; 51 8B ; Exclusive OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($0B.b)		; 52 0B ; Exclusive OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$0B		; 54 0B 53 ; Move block negative $53,$0B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvn $48,$93		; 54 93 48 ; Move block negative $48,$93 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta [$48.b],Y		; 97 48 ; Store accumulator (long indexed) [$48.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$8D.b],Y		; 97 8D ; Store accumulator (long indexed) [$8D.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($8E.b,S),Y		; 13 8E ; OR accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($91.b,S),Y		; 13 91 ; OR accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($92.b,S),Y		; 13 92 ; OR accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8C.b,S),Y		; 13 8C ; OR accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8F.b,S),Y		; 13 8F ; OR accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($93.b,S),Y		; 13 93 ; OR accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($90.b,S),Y		; 13 90 ; OR accumulator (stack relative indirect indexed) ($90.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($93.b,S),Y		; 13 93 ; OR accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($8F.b,S),Y		; 93 8F ; Store accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora ($94.b,S),Y		; 13 94 ; OR accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($95.b,S),Y		; 13 95 ; OR accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8E.b,S),Y		; 13 8E ; OR accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8C.b,S),Y		; 13 8C ; OR accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($5D.b,S),Y		; 13 5D ; OR accumulator (stack relative indirect indexed) ($5D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$99.b],Y		; 17 99 ; OR accumulator with memory (long indexed) [$99.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($5D.b,S),Y		; 13 5D ; OR accumulator (stack relative indirect indexed) ($5D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$8F.b],Y		; 97 8F ; Store accumulator (long indexed) [$8F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	eor ($97.b,S),Y		; 53 97 ; XOR accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($98.b,S),Y		; 13 98 ; OR accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($9A.b,S),Y		; 13 9A ; OR accumulator (stack relative indirect indexed) ($9A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$8C.b],Y		; 17 8C ; OR accumulator with memory (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($99.b,S),Y		; 13 99 ; OR accumulator (stack relative indirect indexed) ($99.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($66.b,S),Y		; 13 66 ; OR accumulator (stack relative indirect indexed) ($66.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$8F.b],Y		; 17 8F ; OR accumulator with memory (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($5D.b,S),Y		; 13 5D ; OR accumulator (stack relative indirect indexed) ($5D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$8E.b],Y		; D7 8E ; Compare accumulator (long indexed) [$8E.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	eor ($8F.b,S),Y		; 53 8F ; XOR accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($91.b,S),Y		; 53 91 ; XOR accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($92.b,S),Y		; 13 92 ; OR accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($9B.b,S),Y		; 13 9B ; OR accumulator (stack relative indirect indexed) ($9B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($9B.b,S),Y		; 13 9B ; OR accumulator (stack relative indirect indexed) ($9B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($9C.b,S),Y		; 53 9C ; XOR accumulator (stack relative indirect indexed) ($9C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($9C.b,S),Y		; 13 9C ; OR accumulator (stack relative indirect indexed) ($9C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($8F.b,S),Y		; 53 8F ; XOR accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8E.b,S),Y		; 13 8E ; OR accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($92.b,S),Y		; 13 92 ; OR accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($91.b,S),Y		; 53 91 ; XOR accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($8A.b,S),Y		; 53 8A ; XOR accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8A.b,S),Y		; 13 8A ; OR accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($8B.b,S),Y		; 53 8B ; XOR accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8B.b,S),Y		; 13 8B ; OR accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	wai		; CB ; Wait for interrupt
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $74,$8B		; 54 8B 74 ; Move block negative $74,$8B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $13.b		; A6 13 ; Load $13.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldy #$13.b		; A0 13 ; Load #$13.b into Y register [Writes: Y Index] [Flags: ZN]
	lda ($13.b,X)		; A1 13 ; Load accumulator ($13.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $8E53.w		; 8E 53 8E ; Store X register to $8E53.w [Reads: X Index]
	ora ($8E.b,S),Y		; 13 8E ; OR accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($A3.b,S),Y		; D3 A3 ; Compare accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	eor ($A4.b,S),Y		; 53 A4 ; XOR accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stx $9953.w		; 8E 53 99 ; Store X register to $9953.w [Reads: X Index]
	ora ($A4.b,S),Y		; 13 A4 ; OR accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stx $0013.w		; 8E 13 00 ; Store X register to $0013.w [Reads: X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($53.b,S),Y		; 93 53 ; Store accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $7D57.w		; 4E 57 7D ; Logical shift right $7D57.w [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9F8B.w,X		; 7D 8B 9F ; Add $9F8B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($AA.b,S),Y		; 13 AA ; OR accumulator (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$A4.b],Y		; 97 A4 ; Store accumulator (long indexed) [$A4.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($A9.b,S),Y		; 13 A9 ; OR accumulator (stack relative indirect indexed) ($A9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A9.b,S),Y		; 13 A9 ; OR accumulator (stack relative indirect indexed) ($A9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($A5.b,S),Y		; 53 A5 ; XOR accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A6.b,S),Y		; 13 A6 ; OR accumulator (stack relative indirect indexed) ($A6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A5.b,S),Y		; 13 A5 ; OR accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($A5.b,S),Y		; 93 A5 ; Store accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cmp ($8E.b,S),Y		; D3 8E ; Compare accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($8E.b,S),Y		; D3 8E ; Compare accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sta ($A4.b,S),Y		; 93 A4 ; Store accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora ($AA.b,S),Y		; 13 AA ; OR accumulator (stack relative indirect indexed) ($AA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldx $13.b		; A6 13 ; Load $13.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $139B8B.l,X		; 5F 8B 9B 13 ; Exclusive OR accumulator with memory (long,X) $139B8B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $13.b		; A6 13 ; Load $13.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stz $A213.w		; 9C 13 A2 ; Store zero to $A213.w
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0013.w		; 8C 13 00 ; Store Y register to $0013.w [Reads: Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sty $93.b,X		; 94 93 ; Store Y register $93.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $0013.w,X		; 9E 13 00 ; Store zero to $0013.w,X [Reads: X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $2100.w		; 20 00 21 ; Jump to subroutine at $2100.w [Writes: Stack Pointer] [Flow: call]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $60.b		; 02 60 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($71.b,X)		; 01 71 ; Logical OR ($71.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $6C.b,X		; F6 6C ; Increment memory $6C.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $E9.b,X		; F6 E9 ; Increment memory $E9.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $1B.b,X		; F6 1B ; Increment memory $1B.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc [$66.b],Y		; F7 66 ; Subtract with carry (long indexed) [$66.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$15.b],Y		; F7 15 ; Subtract with carry (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sta ($F8.b)		; 92 F8 ; Store accumulator (indirect) ($F8.b) [Reads: Accumulator, Direct Page]
	cmp $0FF8.w,X		; DD F8 0F ; Compare accumulator $0FF8.w,X [Reads: X Index] [Flags: ZNC]
	sbc $F9D7.w,Y		; F9 D7 F9 ; Subtract with carry $F9D7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $B8FA.w		; 6D FA B8 ; Add $B8FA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	trb $0FFB.w		; 1C FB 0F ; Test and reset bits $0FFB.w [Reads: Accumulator] [Flags: Z]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F110F.l		; 0F 0F 11 0F ; OR accumulator with memory (long) $0F110F.l [Writes: Accumulator] [Flags: ZN]
	ora $210F0F.l		; 0F 0F 0F 21 ; OR accumulator with memory (long) $210F0F.l [Writes: Accumulator] [Flags: ZN]
	jsl $0F0F0F.l		; 22 0F 0F 0F ; Jump to subroutine long $0F0F0F.l [Writes: Stack Pointer] [Flow: call]
	ora $0F0F32.l		; 0F 32 0F 0F ; OR accumulator with memory (long) $0F0F32.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $020F0F.l		; 0F 0F 0F 02 ; OR accumulator with memory (long) $020F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b)		; 12 0F ; OR accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F42.l		; 0F 42 0F 0F ; OR accumulator with memory (long) $0F0F42.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F410F.l		; 0F 0F 41 0F ; OR accumulator with memory (long) $0F410F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $800F0F.l		; 0F 0F 0F 80 ; OR accumulator with memory (long) $800F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	.db $70, $0F		; 70 0F ; Branch if overflow set to $70, $0F [Flow: branch]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $710F0F.l		; 0F 0F 0F 71 ; OR accumulator with memory (long) $710F0F.l [Writes: Accumulator] [Flags: ZN]
	adc ($0F.b)		; 72 0F ; Add with carry (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $82810F.l		; 0F 0F 81 82 ; OR accumulator with memory (long) $82810F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $01500F.l		; 0F 0F 50 01 ; OR accumulator with memory (long) $01500F.l [Writes: Accumulator] [Flags: ZN]
	eor ($0F.b)		; 52 0F ; Exclusive OR accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $626160.l		; 0F 60 61 62 ; OR accumulator with memory (long) $626160.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F510F.l		; 0F 0F 51 0F ; OR accumulator with memory (long) $0F510F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F990F.l		; 0F 0F 99 0F ; OR accumulator with memory (long) $0F990F.l [Writes: Accumulator] [Flags: ZN]
	ora $A9A80F.l		; 0F 0F A8 A9 ; OR accumulator with memory (long) $A9A80F.l [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $B9B80F.l		; 0F 0F B8 B9 ; OR accumulator with memory (long) $B9B80F.l [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $C90F0F.l		; 0F 0F 0F C9 ; OR accumulator with memory (long) $C90F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0FC80F.l		; 0F 0F C8 0F ; OR accumulator with memory (long) $0FC80F.l [Writes: Accumulator] [Flags: ZN]
	ora $D80F0F.l		; 0F 0F 0F D8 ; OR accumulator with memory (long) $D80F0F.l [Writes: Accumulator] [Flags: ZN]
	cmp $0FDA.w,Y		; D9 DA 0F ; Compare accumulator $0FDA.w,Y [Reads: Y Index] [Flags: ZNC]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	adc ($74.b,S),Y		; 73 74 ; Add with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0F.b,X		; 75 0F ; Add $0F.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $858483.l		; 0F 83 84 85 ; OR accumulator with memory (long) $858483.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F63.l		; 0F 63 0F 0F ; OR accumulator with memory (long) $0F0F63.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	and ($0F.b,S),Y		; 33 0F ; AND accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $430F0F.l		; 0F 0F 0F 43 ; OR accumulator with memory (long) $430F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	eor ($0F.b,S),Y		; 53 0F ; XOR accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $D00F0F.l		; 0F 0F 0F D0 ; OR accumulator with memory (long) $D00F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	cpy #$0F.b		; C0 0F ; Compare #$0F.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $B00F0F.l		; 0F 0F 0F B0 ; OR accumulator with memory (long) $B00F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $200F0F.l		; 0F 0F 0F 20 ; OR accumulator with memory (long) $200F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F660F.l		; 0F 0F 66 0F ; OR accumulator with memory (long) $0F660F.l [Writes: Accumulator] [Flags: ZN]
	ora $760F0F.l		; 0F 0F 0F 76 ; OR accumulator with memory (long) $760F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F060F.l		; 0F 0F 06 0F ; OR accumulator with memory (long) $0F060F.l [Writes: Accumulator] [Flags: ZN]
	ora $160F0F.l		; 0F 0F 0F 16 ; OR accumulator with memory (long) $160F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	rol $0F.b		; 26 0F ; Rotate left $0F.b [Reads: Direct Page] [Flags: ZNC]
	ora $363534.l		; 0F 34 35 36 ; OR accumulator with memory (long) $363534.l [Writes: Accumulator] [Flags: ZN]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F460F.l		; 0F 0F 46 0F ; OR accumulator with memory (long) $0F460F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	mvn $0F,$0F		; 54 0F 0F ; Move block negative $0F,$0F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $0F0F28.l		; 0F 28 0F 0F ; OR accumulator with memory (long) $0F0F28.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F5A.l		; 0F 5A 0F 0F ; OR accumulator with memory (long) $0F0F5A.l [Writes: Accumulator] [Flags: ZN]
	ora $0B6A0F.l		; 0F 0F 6A 0B ; OR accumulator with memory (long) $0B6A0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $090F0F.l		; 0F 0F 0F 09 ; OR accumulator with memory (long) $090F0F.l [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $190F0F.l		; 0F 0F 0F 19 ; OR accumulator with memory (long) $190F0F.l [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $2A0F0F.l		; 0F 0F 0F 2A ; OR accumulator with memory (long) $2A0F0F.l [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $3A0F0F.l		; 0F 0F 0F 3A ; OR accumulator with memory (long) $3A0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($0F.b,S),Y		; 93 0F ; Store accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	ora $A00F0F.l		; 0F 0F 0F A0 ; OR accumulator with memory (long) $A00F0F.l [Writes: Accumulator] [Flags: ZN]
	lda ($A2.b,X)		; A1 A2 ; Load accumulator ($A2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0F.b,S		; A3 0F ; Load accumulator (stack relative) $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $B3B2B1.l		; 0F B1 B2 B3 ; OR accumulator with memory (long) $B3B2B1.l [Writes: Accumulator] [Flags: ZN]
	ora $C2C10F.l		; 0F 0F C1 C2 ; OR accumulator with memory (long) $C2C10F.l [Writes: Accumulator] [Flags: ZN]
	cmp $0F.b,S		; C3 0F ; Compare accumulator (stack relative) $0F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $0FD2D1.l		; 0F D1 D2 0F ; OR accumulator with memory (long) $0FD2D1.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $98970F.l		; 0F 0F 97 98 ; OR accumulator with memory (long) $98970F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F29.l		; 0F 29 0F 0F ; OR accumulator with memory (long) $0F0F29.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F390F.l		; 0F 0F 39 0F ; OR accumulator with memory (long) $0F390F.l [Writes: Accumulator] [Flags: ZN]
	ora $490F0F.l		; 0F 0F 0F 49 ; OR accumulator with memory (long) $490F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	eor $0F0F.w,Y		; 59 0F 0F ; Exclusive OR accumulator with memory $0F0F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $560F0F.l		; 0F 0F 0F 56 ; OR accumulator with memory (long) $560F0F.l [Writes: Accumulator] [Flags: ZN]
	eor [$58.b],Y		; 57 58 ; Exclusive OR accumulator with memory (long indexed) [$58.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $670F0F.l		; 0F 0F 0F 67 ; OR accumulator with memory (long) $670F0F.l [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0FDE0F.l		; 0F 0F DE 0F ; OR accumulator with memory (long) $0FDE0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $BFBE0F.l		; 0F 0F BE BF ; OR accumulator with memory (long) $BFBE0F.l [Writes: Accumulator] [Flags: ZN]
	ora $CE0F0F.l		; 0F 0F 0F CE ; OR accumulator with memory (long) $CE0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $9E0F0F.l		; 0F 0F 0F 9E ; OR accumulator with memory (long) $9E0F0F.l [Writes: Accumulator] [Flags: ZN]
	sta $0F0F0F.l,X		; 9F 0F 0F 0F ; Store accumulator (long,X) $0F0F0F.l,X [Reads: Accumulator, X Index]
	ldx $0FAF.w		; AE AF 0F ; Load $0FAF.w into X register [Writes: X Index] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F7F7E.l		; 0F 7E 7F 0F ; OR accumulator with memory (long) $0F7F7E.l [Writes: Accumulator] [Flags: ZN]
	ora $0F8E0F.l		; 0F 0F 8E 0F ; OR accumulator with memory (long) $0F8E0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $5F5E0F.l		; 0F 0F 5E 5F ; OR accumulator with memory (long) $5F5E0F.l [Writes: Accumulator] [Flags: ZN]
	ora $6E0F0F.l		; 0F 0F 0F 6E ; OR accumulator with memory (long) $6E0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $3E0F0F.l		; 0F 0F 0F 3E ; OR accumulator with memory (long) $3E0F0F.l [Writes: Accumulator] [Flags: ZN]
	and $0F0F0F.l,X		; 3F 0F 0F 0F ; AND accumulator with memory (long,X) $0F0F0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $0F0F.w		; 4E 0F 0F ; Logical shift right $0F0F.w [Flags: ZNC]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F1F1E.l		; 0F 1E 1F 0F ; OR accumulator with memory (long) $0F1F1E.l [Writes: Accumulator] [Flags: ZN]
	ora $0F2E0F.l		; 0F 0F 2E 0F ; OR accumulator with memory (long) $0F2E0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0E0F.l		; 0F 0F 0E 0F ; OR accumulator with memory (long) $0F0E0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $870F0F.l		; 0F 0F 0F 87 ; OR accumulator with memory (long) $870F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	adc [$0F.b],Y		; 77 0F ; Add with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $310F0F.l		; 0F 0F 0F 31 ; OR accumulator with memory (long) $310F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	and [$0F.b]		; 27 0F ; AND accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $170F0F.l		; 0F 0F 0F 17 ; OR accumulator with memory (long) $170F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $45440F.l		; 0F 0F 44 45 ; OR accumulator with memory (long) $45440F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $ACAB0F.l		; 0F 0F AB AC ; OR accumulator with memory (long) $ACAB0F.l [Writes: Accumulator] [Flags: ZN]
	ora $BB0F0F.l		; 0F 0F 0F BB ; OR accumulator with memory (long) $BB0F0F.l [Writes: Accumulator] [Flags: ZN]
	ldy $0F0F.w,X		; BC 0F 0F ; Load Y register $0F0F.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora $0FCCCB.l		; 0F CB CC 0F ; OR accumulator with memory (long) $0FCCCB.l [Writes: Accumulator] [Flags: ZN]
	ora $DCDB0F.l		; 0F 0F DB DC ; OR accumulator with memory (long) $DCDB0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	stz $65.b		; 64 65 ; Store zero to $65.b
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0FA40F.l		; 0F 0F A4 0F ; OR accumulator with memory (long) $0FA40F.l [Writes: Accumulator] [Flags: ZN]
	ora $B40F0F.l		; 0F 0F 0F B4 ; OR accumulator with memory (long) $B40F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0FB5.l		; 0F B5 0F 0F ; OR accumulator with memory (long) $0F0FB5.l [Writes: Accumulator] [Flags: ZN]
	ora $0FC5C4.l		; 0F C4 C5 0F ; OR accumulator with memory (long) $0FC5C4.l [Writes: Accumulator] [Flags: ZN]
	ora $D50F0F.l		; 0F 0F 0F D5 ; OR accumulator with memory (long) $D50F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F040F.l		; 0F 0F 04 0F ; OR accumulator with memory (long) $0F040F.l [Writes: Accumulator] [Flags: ZN]
	ora $14130F.l		; 0F 0F 13 14 ; OR accumulator with memory (long) $14130F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F.b,X		; 15 0F ; OR accumulator with memory $0F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F2423.l		; 0F 23 24 0F ; OR accumulator with memory (long) $0F2423.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $B60F0F.l		; 0F 0F 0F B6 ; OR accumulator with memory (long) $B60F0F.l [Writes: Accumulator] [Flags: ZN]
	lda [$0F.b],Y		; B7 0F ; Load accumulator (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $C7C60F.l		; 0F 0F C6 C7 ; OR accumulator with memory (long) $C7C60F.l [Writes: Accumulator] [Flags: ZN]
	ora $D60F0F.l		; 0F 0F 0F D6 ; OR accumulator with memory (long) $D60F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F1C.l		; 0F 1C 0F 0F ; OR accumulator with memory (long) $0F0F1C.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($0F7D.w,X)		; 7C 7D 0F ; Jump indirect indexed to ($0F7D.w,X) [Reads: X Index] [Flow: jump]
	ora $8D8C8B.l		; 0F 8B 8C 8D ; OR accumulator with memory (long) $8D8C8B.l [Writes: Accumulator] [Flags: ZN]
	ora $9C9B0F.l		; 0F 0F 9B 9C ; OR accumulator with memory (long) $9C9B0F.l [Writes: Accumulator] [Flags: ZN]
	sta $0F0F.w,X		; 9D 0F 0F ; Store accumulator to $0F0F.w,X [Reads: Accumulator, X Index]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	tsb $0F0F.w		; 0C 0F 0F ; Test and set bits $0F0F.w [Reads: Accumulator] [Flags: Z]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F5C5B.l		; 0F 5B 5C 0F ; OR accumulator with memory (long) $0F5C5B.l [Writes: Accumulator] [Flags: ZN]
	ora $0F6B0F.l		; 0F 0F 6B 0F ; OR accumulator with memory (long) $0F6B0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $5D0F0F.l		; 0F 0F 0F 5D ; OR accumulator with memory (long) $5D0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $6C0F0F.l		; 0F 0F 0F 6C ; OR accumulator with memory (long) $6C0F0F.l [Writes: Accumulator] [Flags: ZN]
	adc $0F0F.w		; 6D 0F 0F ; Add $0F0F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	ora $A50F0F.l		; 0F 0F 0F A5 ; OR accumulator with memory (long) $A50F0F.l [Writes: Accumulator] [Flags: ZN]
	ldx $0F.b		; A6 0F ; Load $0F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F3D0F.l		; 0F 0F 3D 0F ; OR accumulator with memory (long) $0F3D0F.l [Writes: Accumulator] [Flags: ZN]
	ora $4D4C0F.l		; 0F 0F 4C 4D ; OR accumulator with memory (long) $4D4C0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0D0F.l		; 0F 0F 0D 0F ; OR accumulator with memory (long) $0F0D0F.l [Writes: Accumulator] [Flags: ZN]
	ora $1D0F0F.l		; 0F 0F 0F 1D ; OR accumulator with memory (long) $1D0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($FC15.w,X)		; FC 15 FC ; Jump to subroutine indirect indexed ($FC15.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($FC.b,X)		; 21 FC ; Logical AND ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsr ($FC32.w,X)		; FC 32 FC ; Jump to subroutine indirect indexed ($FC32.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $FC4DFC.l,X		; 3F FC 4D FC ; AND accumulator with memory (long,X) $FC4DFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $FC68FC.l,X		; 5F FC 68 FC ; Exclusive OR accumulator with memory (long,X) $FC68FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $83FC.w,X		; 7D FC 83 ; Add $83FC.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FC8F.w,X)		; FC 8F FC ; Jump to subroutine indirect indexed ($FC8F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy #$FC.b		; A0 FC ; Load #$FC.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0E0D.w		; 0C 0D 0E ; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	ora $121110.l		; 0F 10 11 12 ; OR accumulator with memory (long) $121110.l [Writes: Accumulator] [Flags: ZN]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1B1A.w,Y		; 19 1A 1B ; OR accumulator with memory $1B1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1E1D.w		; 1C 1D 1E ; Test and reset bits $1E1D.w [Reads: Accumulator] [Flags: Z]
	ora $232220.l,X		; 1F 20 22 23 ; Logical OR long $232220.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $2D2C.w		; 2C 2C 2D ; Test bits $2D2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol $302F.w		; 2E 2F 30 ; Rotate left $302F.w [Flags: ZNC]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3B3A.w,Y		; 39 3A 3B ; AND accumulator with memory $3B3A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3E3D.w,X		; 3C 3D 3E ; Test bits $3E3D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $424140.l,X		; 3F 40 41 42 ; AND accumulator with memory (long,X) $424140.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $504F.w		; 4E 4F 50 ; Logical shift right $504F.w [Flags: ZNC]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $56,$55		; 54 55 56 ; Move block negative $56,$55 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$58.b],Y		; 57 58 ; Exclusive OR accumulator with memory (long indexed) [$58.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5B5A.w,Y		; 59 5A 5B ; Exclusive OR accumulator with memory $5B5A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $5F5E5D.l		; 5C 5D 5E 5F ; Jump long to $5F5E5D.l [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $66.b		; 65 66 ; Add $66.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$68.b]		; 67 68 ; Add with carry (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$6A.b		; 69 6A ; Add #$6A.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($6E6D.w)		; 6C 6D 6E ; Jump indirect to ($6E6D.w) [Flow: jump]
	adc $727170.l		; 6F 70 71 72 ; Add with carry (long) $727170.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($74.b,S),Y		; 73 74 ; Add with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $76.b,X		; 75 76 ; Add $76.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7B7A.w,Y		; 79 7A 7B ; Add $7B7A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($7E7D.w,X)		; 7C 7D 7E ; Jump indirect indexed to ($7E7D.w,X) [Reads: X Index] [Flow: jump]
	adc $828180.l,X		; 7F 80 81 82 ; Add long $828180.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	sta [$88.b]		; 87 88 ; Store accumulator (long) [$88.b] [Reads: Accumulator, Direct Page]
	bit #$8A.b		; 89 8A ; Test bits #$8A.b with accumulator [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $8E8D.w		; 8C 8D 8E ; Store Y register to $8E8D.w [Reads: Y Index]
	sta $929190.l		; 8F 90 91 92 ; Store accumulator (long) $929190.l [Reads: Accumulator]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $4C.b,X		; 95 4C ; Store accumulator to $4C.b,X [Reads: Accumulator, X Index]
	stx $97.b,Y		; 96 97 ; Store X register $97.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9A4D.w,Y		; 99 4D 9A ; Store accumulator to $9A4D.w,Y [Reads: Accumulator, Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stz $9E9D.w		; 9C 9D 9E ; Store zero to $9E9D.w
	sta $A2A1A0.l,X		; 9F A0 A1 A2 ; Store accumulator (long,X) $A2A1A0.l,X [Reads: Accumulator, X Index]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$A8.b]		; A7 A8 ; Load accumulator (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$AA.b		; A9 AA ; Load #$AA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $AEAD.w		; AC AD AE ; Load $AEAD.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $B2B1B0.l		; AF B0 B1 B2 ; Load long $B2B1B0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($B4.b,S),Y		; B3 B4 ; Load accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $B6.b,X		; B5 B6 ; Load $B6.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $FFFF.w,Y		; B9 FF FF ; Load $FFFF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $09.b		; 25 09 ; Logical AND $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $09.b		; 25 09 ; Logical AND $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0A.b		; 25 0A ; Logical AND $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0B.b		; 25 0B ; Logical AND $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0D.b		; 25 0D ; Logical AND $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1C.b		; 25 1C ; Logical AND $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $7F.b		; 25 7F ; Logical AND $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $19.b		; 25 19 ; Logical AND $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $09.b		; 25 09 ; Logical AND $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1B.b		; 25 1B ; Logical AND $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1C.b		; 25 1C ; Logical AND $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $18.b		; 25 18 ; Logical AND $18.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $7F.b		; A5 7F ; Load $7F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A9.b,S		; 03 A9 ; OR accumulator with stack relative $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $04A0.w		; 8D A0 04 ; Store accumulator to $04A0.w [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $8F.b		; 25 8F ; Logical AND $8F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($C7.b)		; F2 C7 ; Subtract with carry (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $8F1A.w,X		; 7E 1A 8F ; Rotate right $8F1A.w,X [Reads: X Index] [Flags: ZNC]
	bit $C8.b,X		; 34 C8 ; Test bits $C8.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $8F1A.w,X		; 7E 1A 8F ; Rotate right $8F1A.w,X [Reads: X Index] [Flags: ZNC]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $0FA9.w,X		; 7E A9 0F ; Rotate right $0FA9.w,X [Reads: X Index] [Flags: ZNC]
	and $8F.b		; 25 8F ; Logical AND $8F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pea $7EC7.w		; F4 C7 7E ; Push absolute address $7EC7.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $30.b,S		; A3 30 ; Load accumulator (stack relative) $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $A5.b,S		; 23 A5 ; AND accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $D0.b		; A4 D0 ; Load $D0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E2.b),Y		; 11 E2 ; OR accumulator with memory ($E2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $C5AF.w		; 20 AF C5 ; Jump to subroutine at $C5AF.w [Writes: Stack Pointer] [Flow: call]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $FCE0.w,Y		; B9 E0 FC ; Load $FCE0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC7F2.l,X		; 9F F2 C7 7E ; Store accumulator (long,X) $7EC7F2.l,X [Reads: Accumulator, X Index]
	lda $FCF6.w,Y		; B9 F6 FC ; Load $FCF6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC832.l,X		; 9F 32 C8 7E ; Store accumulator (long,X) $7EC832.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC7F2.l		; 8F F2 C7 7E ; Store accumulator (long) $7EC7F2.l [Reads: Accumulator]
	sta $7EC832.l		; 8F 32 C8 7E ; Store accumulator (long) $7EC832.l [Reads: Accumulator]
	sta $7EC7F4.l		; 8F F4 C7 7E ; Store accumulator (long) $7EC7F4.l [Reads: Accumulator]
	sta $7EC834.l		; 8F 34 C8 7E ; Store accumulator (long) $7EC834.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04B5.w		; AD B5 04 ; Load $04B5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $04B4.w		; AD B4 04 ; Load $04B4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	dec $04B4.w		; CE B4 04 ; Decrement $04B4.w [Flags: ZN]
	lda #$3E.b		; A9 3E ; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B5.w		; 8D B5 04 ; Store accumulator to $04B5.w [Reads: Accumulator]
	dec $04B5.w		; CE B5 04 ; Decrement $04B5.w [Flags: ZN]
	lda $04B4.w		; AD B4 04 ; Load $04B4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	.db $80, $C5		; 80 C5 ; Branch always to $80, $C5 [Flow: branch]
	lda $04B4.w		; AD B4 04 ; Load $04B4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta WRDIVL.w		; 8D 04 42 ; Store accumulator to WRDIVL.w [Reads: Accumulator]
	stz WRDIVH.w		; 9C 05 42 ; Store zero to WRDIVH.w
	lda #$8D0A.w		; A9 0A 8D ; Load #$8D0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $42.b		; 06 42 ; Arithmetic shift left $42.b [Reads: Direct Page] [Flags: ZNC]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda RDDIVL.w		; AD 14 42 ; Load RDDIVL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda RDMPYL.w		; AD 16 42 ; Load RDMPYL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	ldx #$B402.w		; A2 02 B4 ; Load #$B402.w into X register [Writes: X Index] [Flags: ZN]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ldy #$E012.w		; A0 12 E0 ; Load #$E012.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $B9.b		; 14 B9 ; Test and reset bits $B9.b [Reads: Accumulator] [Flags: Z]
	cpx #$9FFC.w		; E0 FC 9F ; Compare #$9FFC.w with X register [Reads: X Index] [Flags: ZNC]
	sbc ($C7.b)		; F2 C7 ; Subtract with carry (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $F6B9.w,X		; 7E B9 F6 ; Rotate right $F6B9.w,X [Reads: X Index] [Flags: ZNC]
	jsr ($329F.w,X)		; FC 9F 32 ; Jump to subroutine indirect indexed ($329F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $CACA.w,X		; 7E CA CA ; Rotate right $CACA.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stz $035F.w		; 9C 5F 03 ; Store zero to $035F.w
	lda #$B0.b		; A9 B0 ; Load #$B0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C04.w		; 8D 04 0C ; Store accumulator to $0C04.w [Reads: Accumulator]
	sta $0C05.w		; 8D 05 0C ; Store accumulator to $0C05.w [Reads: Accumulator]
	sta $0C06.w		; 8D 06 0C ; Store accumulator to $0C06.w [Reads: Accumulator]
	sta $0C07.w		; 8D 07 0C ; Store accumulator to $0C07.w [Reads: Accumulator]
	sta $0C08.w		; 8D 08 0C ; Store accumulator to $0C08.w [Reads: Accumulator]
	sta $0C09.w		; 8D 09 0C ; Store accumulator to $0C09.w [Reads: Accumulator]
	sta $0C0A.w		; 8D 0A 0C ; Store accumulator to $0C0A.w [Reads: Accumulator]
	sta $0C0B.w		; 8D 0B 0C ; Store accumulator to $0C0B.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C18.w		; 8D 18 0C ; Store accumulator to $0C18.w [Reads: Accumulator]
	sta $0C19.w		; 8D 19 0C ; Store accumulator to $0C19.w [Reads: Accumulator]
	sta $0C1A.w		; 8D 1A 0C ; Store accumulator to $0C1A.w [Reads: Accumulator]
	sta $0C1B.w		; 8D 1B 0C ; Store accumulator to $0C1B.w [Reads: Accumulator]
	sta $0C1C.w		; 8D 1C 0C ; Store accumulator to $0C1C.w [Reads: Accumulator]
	sta $0C1D.w		; 8D 1D 0C ; Store accumulator to $0C1D.w [Reads: Accumulator]
	sta $0C1E.w		; 8D 1E 0C ; Store accumulator to $0C1E.w [Reads: Accumulator]
	sta $0C1F.w		; 8D 1F 0C ; Store accumulator to $0C1F.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w		; 8D 4A 0C ; Store accumulator to $0C4A.w [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039D.w		; 8D 9D 03 ; Store accumulator to $039D.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $87FFFF.l,X		; FF FF FF 87 ; Subtract with carry (long,X) $87FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FE87.w,X		; FE 87 FE ; Increment memory $FE87.w,X [Reads: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inc $FFDE.w,X		; FE DE FF ; Increment memory $FFDE.w,X [Reads: X Index] [Flags: ZN]
	inc $0DFE.w		; EE FE 0D ; Increment $0DFE.w [Flags: ZN]
	sbc $A4FF5D.l,X		; FF 5D FF A4 ; Subtract with carry (long,X) $A4FF5D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0AADA5.l,X		; FF A5 AD 0A ; Subtract with carry (long,X) $0AADA5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($FE70.w,X)		; 7C 70 FE ; Jump indirect indexed to ($FE70.w,X) [Reads: X Index] [Flow: jump]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; [PATTERN: Memory clearing operation] 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $AD.b		; 64 AD ; Store zero to $AD.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0312.w		; 9C 12 03 ; Store zero to $0312.w
	stz $0310.w		; 9C 10 03 ; Store zero to $0310.w
	lda $041A.w		; AD 1A 04 ; Load $041A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $4B		; B0 4B ; Branch if carry set to $B0, $4B [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $041C.w		; AD 1C 04 ; Load $041C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$8000.w		; 69 00 80 ; Add #$8000.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $041C.w		; 8D 1C 04 ; Store accumulator to $041C.w [Reads: Accumulator]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$0002.w		; E0 02 00 ; Compare #$0002.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldx $041A.w		; AE 1A 04 ; Load $041A.w into X register [Writes: X Index] [Flags: ZN]
	cpx #$0004.w		; E0 04 00 ; Compare #$0004.w with X register [Reads: X Index] [Flags: ZNC]
	.db $B0, $15		; B0 15 ; Branch if carry set to $B0, $15 [Flow: branch]
	sta $0312.w		; 8D 12 03 ; Store accumulator to $0312.w [Reads: Accumulator]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0312.w		; ED 12 03 ; Subtract $0312.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0422.w		; 8D 22 04 ; Store accumulator to $0422.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0310.w		; 8D 10 03 ; Store accumulator to $0310.w [Reads: Accumulator]
	lda $0424.w		; AD 24 04 ; Load $0424.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0310.w		; ED 10 03 ; Subtract $0310.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0424.w		; 8D 24 04 ; Store accumulator to $0424.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0312.w		; 6D 12 03 ; Add $0312.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0422.w		; 8D 22 04 ; Store accumulator to $0422.w [Reads: Accumulator]
	lda $0424.w		; AD 24 04 ; Load $0424.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	adc $0310.w		; 6D 10 03 ; Add $0310.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0424.w		; 8D 24 04 ; Store accumulator to $0424.w [Reads: Accumulator]
	stz $0312.w		; 9C 12 03 ; Store zero to $0312.w
	stz $0310.w		; 9C 10 03 ; Store zero to $0310.w
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC3DA.l		; AF DA C3 7E ; Load long $7EC3DA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC5DA.l		; 8F DA C5 7E ; Store accumulator (long) $7EC5DA.l [Reads: Accumulator]
	lda $7EC3DC.l		; AF DC C3 7E ; Load long $7EC3DC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC5DC.l		; 8F DC C5 7E ; Store accumulator (long) $7EC5DC.l [Reads: Accumulator]
	lda $7EC3DE.l		; AF DE C3 7E ; Load long $7EC3DE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC5DE.l		; 8F DE C5 7E ; Store accumulator (long) $7EC5DE.l [Reads: Accumulator]
	sta $7EC5EE.l		; 8F EE C5 7E ; Store accumulator (long) $7EC5EE.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$1D59.w		; A9 59 1D ; Load #$1D59.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC5DA.l		; 8F DA C5 7E ; Store accumulator (long) $7EC5DA.l [Reads: Accumulator]
	lda #$25FF.w		; A9 FF 25 ; Load #$25FF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC5DC.l		; 8F DC C5 7E ; Store accumulator (long) $7EC5DC.l [Reads: Accumulator]
	lda #$001A.w		; A9 1A 00 ; Load #$001A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $DA		; 80 DA ; Branch always to $80, $DA [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $0540.w,X		; BD 40 05 ; Load $0540.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0020.w		; E0 20 00 ; Compare #$0020.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	ldx #$2940.w		; A2 40 29 ; Load #$2940.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$4E60.w		; A0 60 4E ; Load #$4E60.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $7EC3F6.l		; CF F6 C3 7E ; Compare accumulator (long) $7EC3F6.l [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	sta $7EC3F6.l		; 8F F6 C3 7E ; Store accumulator (long) $7EC3F6.l [Reads: Accumulator]
	sta $7EC5F6.l		; 8F F6 C5 7E ; Store accumulator (long) $7EC5F6.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC3F8.l		; 8F F8 C3 7E ; Store accumulator (long) $7EC3F8.l [Reads: Accumulator]
	sta $7EC5F8.l		; 8F F8 C5 7E ; Store accumulator (long) $7EC5F8.l [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04C5.w		; 9C C5 04 ; Store zero to $04C5.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $0540.w,X		; BD 40 05 ; Load $0540.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	inc $04C5.w		; EE C5 04 ; Increment $04C5.w [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0006.w		; E0 06 00 ; Compare #$0006.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $04C5.w		; AD C5 04 ; Load $04C5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$B3.b		; A9 B3 ; Load #$B3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $041C.w		; 6D 1C 04 ; Add $041C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $041C.w		; 8D 1C 04 ; Store accumulator to $041C.w [Reads: Accumulator]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0312.w		; 8D 12 03 ; Store accumulator to $0312.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 057FFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ENDS
