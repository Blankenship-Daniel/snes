.BANK 8 SLOT 0
.ORG $0000

.SECTION "Bank8" FORCE

	jsr $8015.w		; 20 15 80 ; Jump to subroutine at $8015.w [Writes: Stack Pointer] [Flow: call]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8015.w		; 20 15 80 ; Jump to subroutine at $8015.w [Writes: Stack Pointer] [Flow: call]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8015.w		; 20 15 80 ; Jump to subroutine at $8015.w [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0CF8.w		; 8D F8 0C ; Store accumulator to $0CF8.w [Reads: Accumulator]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora $0CF8.w		; 0D F8 0C ; Logical OR $0CF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8035.w		; 20 35 80 ; Jump to subroutine at $8035.w [Writes: Stack Pointer] [Flow: call]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8035.w		; 20 35 80 ; Jump to subroutine at $8035.w [Writes: Stack Pointer] [Flow: call]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8035.w		; 20 35 80 ; Jump to subroutine at $8035.w [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0CF8.w		; 8D F8 0C ; Store accumulator to $0CF8.w [Reads: Accumulator]
	jsl $0DBB5E.l		; 22 5E BB 0D ; Jump to subroutine long $0DBB5E.l [Writes: Stack Pointer] [Flow: call]
	ora $0CF8.w		; 0D F8 0C ; Logical OR $0CF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $1010.w		; 0C 10 10 ; Test and set bits $1010.w [Reads: Accumulator] [Flags: Z]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	tsb $0808.w		; 0C 08 08 ; Test and set bits $0808.w [Reads: Accumulator] [Flags: Z]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $10.b		; 24 10 ; Test bits $10.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $1008.w		; 0C 08 10 ; Test and set bits $1008.w [Reads: Accumulator] [Flags: Z]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	tsb $001C.w		; 0C 1C 00 ; Test and set bits $001C.w [Reads: Accumulator] [Flags: Z]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $1010.w		; 20 10 10 ; Jump to subroutine at $1010.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $80, $A0		; 80 A0 ; Branch always to $80, $A0 [Flow: branch]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$F5.b],Y		; 77 F5 ; Add with carry (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $A50F10.l		; 0F 10 0F A5 ; OR accumulator with memory (long) $A50F10.l [Writes: Accumulator] [Flags: NZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $A2.b		; 06 A2 ; Arithmetic shift left $A2.b [Reads: Direct Page] [Flags: NCZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$B0.b		; E9 B0 ; Subtract #$B0.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora [$82.b]		; 07 82 ; OR accumulator with memory (long) [$82.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8007.w		; 20 07 80 ; Jump to subroutine at $8007.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,Y		; 99 4A 0C ; Store accumulator to $0C4A.w,Y [Reads: Y Index, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $806F.w,X		; BD 6F 80 ; Load $806F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,Y		; 99 90 0C ; Store accumulator to $0C90.w,Y [Reads: Y Index, Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,Y		; 99 68 0C ; Store accumulator to $0C68.w,Y [Reads: Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,Y		; 99 54 0C ; Store accumulator to $0C54.w,Y [Reads: Y Index, Accumulator]
	sta $0C5E.w,Y		; 99 5E 0C ; Store accumulator to $0C5E.w,Y [Reads: Y Index, Accumulator]
	sta $0280.w,Y		; 99 80 02 ; Store accumulator to $0280.w,Y [Reads: Y Index, Accumulator]
	sta $028A.w,Y		; 99 8A 02 ; Store accumulator to $028A.w,Y [Reads: Y Index, Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0C72.w,Y		; 99 72 0C ; Store accumulator to $0C72.w,Y [Reads: Y Index, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $099DD3.l		; 22 D3 9D 09 ; Jump to subroutine long $099DD3.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	.db $B0, $62		; B0 62 ; Branch if carry set to $B0, $62 [Flow: branch]
	lda $0022.w		; AD 22 00 ; Load $0022.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8040.w,X		; 7D 40 80 ; Add $8040.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	lda $0023.w		; AD 23 00 ; Load $0023.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $8044.w,X		; 7D 44 80 ; Add $8044.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,Y		; 99 18 0C ; Store accumulator to $0C18.w,Y [Reads: Y Index, Accumulator]
	lda $0020.w		; AD 20 00 ; Load $0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8048.w,X		; 7D 48 80 ; Add $8048.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,Y		; 99 FA 0B ; Store accumulator to $0BFA.w,Y [Reads: Y Index, Accumulator]
	lda $0021.w		; AD 21 00 ; Load $0021.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $804C.w,X		; 7D 4C 80 ; Add $804C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,Y		; 99 0E 0C ; Store accumulator to $0C0E.w,Y [Reads: Y Index, Accumulator]
	lda $0C4A.w,Y		; B9 4A 0C ; Load $0C4A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $8068.w,X		; BD 68 80 ; Load $8068.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,Y		; 99 2C 0C ; Store accumulator to $0C2C.w,Y [Reads: Y Index, Accumulator]
	lda $806C.w,X		; BD 6C 80 ; Load $806C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F.b		; 65 0F ; Add $0F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8050.w,X		; BD 50 80 ; Load $8050.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,Y		; 99 2C 0C ; Store accumulator to $0C2C.w,Y [Reads: Y Index, Accumulator]
	lda $805C.w,X		; BD 5C 80 ; Load $805C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,Y		; 99 22 0C ; Store accumulator to $0C22.w,Y [Reads: Y Index, Accumulator]
	lda $00EE.w		; AD EE 00 ; Load $00EE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,Y		; 99 7C 0C ; Store accumulator to $0C7C.w,Y [Reads: Y Index, Accumulator]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03CA.w,Y		; 99 CA 03 ; Store accumulator to $03CA.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C4A.w,Y		; B9 4A 0C ; Load $0C4A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,Y		; 99 4A 0C ; Store accumulator to $0C4A.w,Y [Reads: Y Index, Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,Y		; 99 68 0C ; Store accumulator to $0C68.w,Y [Reads: Y Index, Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,Y		; 99 90 0C ; Store accumulator to $0C90.w,Y [Reads: Y Index, Accumulator]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,Y		; 99 54 0C ; Store accumulator to $0C54.w,Y [Reads: Y Index, Accumulator]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,Y		; 99 68 0C ; Store accumulator to $0C68.w,Y [Reads: Y Index, Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,Y		; 99 90 0C ; Store accumulator to $0C90.w,Y [Reads: Y Index, Accumulator]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$FC.b],Y		; F7 FC ; Subtract with carry (long indexed) [$FC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FC.b),Y		; F1 FC ; Subtract with carry ($FC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $05.b		; E5 05 ; Subtract $05.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0FF577.l		; 22 77 F5 0F ; Jump to subroutine long $0FF577.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $5D		; 30 5D ; Branch if minus to $30, $5D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,Y		; 99 4A 0C ; Store accumulator to $0C4A.w,Y [Reads: Y Index, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $806F.w,X		; BD 6F 80 ; Load $806F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,Y		; 99 90 0C ; Store accumulator to $0C90.w,Y [Reads: Y Index, Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,Y		; 99 54 0C ; Store accumulator to $0C54.w,Y [Reads: Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,Y		; 99 5E 0C ; Store accumulator to $0C5E.w,Y [Reads: Y Index, Accumulator]
	sta $0280.w,Y		; 99 80 02 ; Store accumulator to $0280.w,Y [Reads: Y Index, Accumulator]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,Y		; 99 72 0C ; Store accumulator to $0C72.w,Y [Reads: Y Index, Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $819F.w,X		; 7D 9F 81 ; Add $819F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,Y		; 99 18 0C ; Store accumulator to $0C18.w,Y [Reads: Y Index, Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $81A3.w,X		; 7D A3 81 ; Add $81A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,Y		; 99 FA 0B ; Store accumulator to $0BFA.w,Y [Reads: Y Index, Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,Y		; 99 0E 0C ; Store accumulator to $0C0E.w,Y [Reads: Y Index, Accumulator]
	jsl $0FFD52.l		; 22 52 FD 0F ; Jump to subroutine long $0FFD52.l [Writes: Stack Pointer] [Flow: call]
	lda $8050.w,X		; BD 50 80 ; Load $8050.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,Y		; 99 2C 0C ; Store accumulator to $0C2C.w,Y [Reads: Y Index, Accumulator]
	lda $805C.w,X		; BD 5C 80 ; Load $805C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,Y		; 99 22 0C ; Store accumulator to $0C22.w,Y [Reads: Y Index, Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,Y		; 99 7C 0C ; Store accumulator to $0C7C.w,Y [Reads: Y Index, Accumulator]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03CA.w,Y		; 99 CA 03 ; Store accumulator to $03CA.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: NZ]
	.db $10, $94		; 10 94 ; Branch if plus to $10, $94 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $8F89.w		; 20 89 8F ; Jump to subroutine at $8F89.w [Writes: Stack Pointer] [Flow: call]
	jsr $832B.w		; 20 2B 83 ; Jump to subroutine at $832B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0022.w		; AD 22 00 ; Load $0022.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0023.w		; AD 23 00 ; Load $0023.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0020.w		; AD 20 00 ; Load $0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0021.w		; AD 21 00 ; Load $0021.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0022.w		; 8D 22 00 ; Store accumulator to $0022.w [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0023.w		; 8D 23 00 ; Store accumulator to $0023.w [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0020.w		; 8D 20 00 ; Store accumulator to $0020.w [Reads: Accumulator]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0021.w		; 8D 21 00 ; Store accumulator to $0021.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $04EBAA.l		; 22 AA EB 04 ; Jump to subroutine long $04EBAA.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0021.w		; 8D 21 00 ; Store accumulator to $0021.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0020.w		; 8D 20 00 ; Store accumulator to $0020.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0023.w		; 8D 23 00 ; Store accumulator to $0023.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0022.w		; 8D 22 00 ; Store accumulator to $0022.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0EF0.w,Y		; 19 F0 0E ; OR accumulator with memory $0EF0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0BA0.w,Y		; 19 A0 0B ; OR accumulator with memory $0BA0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $8324.w		; 4C 24 83 ; Jump to $8324.w [Flow: jump]
	lda $0F20.w,Y		; B9 20 0F ; Load $0F20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0C7C.w,X		; DD 7C 0C ; Compare accumulator $0C7C.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $7C		; 90 7C ; Branch if carry clear to $90, $7C [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$18.b		; E9 18 ; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$18.b		; E9 18 ; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $029E.w,X		; FD 9E 02 ; Subtract with carry $029E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $0683EA.l		; 22 EA 83 06 ; Jump to subroutine long $0683EA.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $0683E6.l		; 22 E6 83 06 ; Jump to subroutine long $0683E6.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $43		; 90 43 ; Branch if carry clear to $90, $43 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0DB0.w,Y		; B9 B0 0D ; Load $0DB0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $35		; B0 35 ; Branch if carry set to $B0, $35 [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $06ECB7.l		; 22 B7 EC 06 ; Jump to subroutine long $06ECB7.l [Writes: Stack Pointer] [Flow: call]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $824D.w		; 20 4D 82 ; Jump to subroutine at $824D.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0F30.w,Y		; 99 30 0F ; Store accumulator to $0F30.w,Y [Reads: Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0F40.w,Y		; 99 40 0F ; Store accumulator to $0F40.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $8289.w		; 4C 89 82 ; Jump to $8289.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $833C.w		; 20 3C 83 ; Jump to subroutine at $833C.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $21		; B0 21 ; Branch if carry set to $B0, $21 [Flow: branch]
	lda $0C90.w,X		; BD 90 0C ; Load $0C90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	ldy $0C7C.w,X		; BC 7C 0C ; Load Y register $0C7C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	jsl $0DBA94.l		; 22 94 BA 0D ; Jump to subroutine long $0DBA94.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C86.w,X		; 9D 86 0C ; Store accumulator to $0C86.w,X [Reads: Accumulator, X Index]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	ldy $0C68.w,X		; BC 68 0C ; Load Y register $0C68.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0C68.w,X		; DE 68 0C ; Decrement memory $0C68.w,X [Reads: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $837F.w,Y		; B9 7F 83 ; Load $837F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $8380.w,Y		; B9 80 83 ; Load $8380.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	jmp ($0000.w)		; 6C 00 00 ; Jump indirect to ($0000.w) [Flow: jump]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $D2.b		; 85 D2 ; Store accumulator to $D2.b [Reads: Accumulator]
	stx $52.b		; 86 52 ; Store X register to $52.b [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $FC8D.w,Y		; 19 8D FC ; OR accumulator with memory $FC8D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $E8		; 90 E8 ; Branch if carry clear to $90, $E8 [Flow: branch]
	sta ($5A.b,S),Y		; 93 5A ; Store accumulator (stack relative indirect indexed) ($5A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta $B6.b,X		; 95 B6 ; Store accumulator to $B6.b,X [Reads: Accumulator, X Index]
	sta $5BA131.l,X		; 9F 31 A1 5B ; Store accumulator (long,X) $5BA131.l,X [Reads: Accumulator, X Index]
	ldy $DD.b		; A4 DD ; Load $DD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $C5.b		; A4 C5 ; Load $C5.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp $DDCA.w,X		; DD CA DD ; Compare accumulator $DDCA.w,X [Reads: X Index] [Flags: NCZ]
	asl $0EA6.w		; 0E A6 0E ; Arithmetic shift left $0EA6.w [Flags: NCZ]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $36.b		; A6 36 ; Load $36.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $35.b		; A6 35 ; Load $35.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sty $0D.b		; 84 0D ; Store Y register to $0D.b [Reads: Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $A8E5A8.l		; 0F A8 E5 A8 ; OR accumulator with memory (long) $A8E5A8.l [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$AA.b		; A0 AA ; Load #$AA.b into Y register [Writes: Y Index] [Flags: NZ]
	dec $B0B0.w		; CE B0 B0 ; Decrement $B0B0.w [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sbc $B66A93.l,X		; FF 93 6A B6 ; Subtract with carry (long,X) $B66A93.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $92BB.w,X		; BC BB 92 ; Load Y register $92BB.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $BD74.w,X		; BC 74 BD ; Load Y register $BD74.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $C0.b,X		; 94 C0 ; Store Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $BC.b,S		; C3 BC ; Compare accumulator (stack relative) $BC.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($01.b,S),Y		; D3 01 ; Compare accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	inc $A8E3.w		; EE E3 A8 ; Increment $A8E3.w [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dec $E8.b,X		; D6 E8 ; Decrement memory $E8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp $C6F2.w,X		; DD F2 C6 ; Compare accumulator $C6F2.w,X [Reads: X Index] [Flags: NCZ]
	sty $B2CA.w		; 8C CA B2 ; Store Y register to $B2CA.w [Reads: Y Index]
	cmp [$FD.b],Y		; D7 FD ; Compare accumulator (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc $E3.b		; 65 E3 ; Add $E3.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc #$3E.b		; E9 3E ; Subtract #$3E.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,S),Y		; 13 EC ; OR accumulator (stack relative indirect indexed) ($EC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $DB.b		; 24 DB ; Test bits $DB.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $DC		; 70 DC ; Branch if overflow set to $70, $DC [Flow: branch]
	and $AA.b,X		; 35 AA ; Logical AND $AA.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $9AA6.w		; 0E A6 9A ; Arithmetic shift left $9AA6.w [Flags: NCZ]
	sbc $AAC25F.l		; EF 5F C2 AA ; Subtract with carry (long) $AAC25F.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $D8D03D.l		; CF 3D D0 D8 ; Compare accumulator (long) $D8D03D.l [Reads: Accumulator] [Flags: NCZ]
	cmp ($83.b),Y		; D1 83 ; Compare accumulator ($83.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	nop		; EA ; No operation
	sta $67F1.w		; 8D F1 67 ; Store accumulator to $67F1.w [Reads: Accumulator]
	cmp ($EA.b,X)		; C1 EA ; Compare accumulator ($EA.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cmp ($01.b,X)		; C1 01 ; Compare accumulator ($01.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc ($CB.b)		; F2 CB ; Subtract with carry (indirect) ($CB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $9AD5.w,Y		; 19 D5 9A ; OR accumulator with memory $9AD5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pei ($AF.b)		; D4 AF ; Push effective indirect address ($AF.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cpx $C7DE.w		; EC DE C7 ; Compare $C7DE.w with X register [Reads: X Index] [Flags: NCZ]
	ldy #$CC.b		; A0 CC ; Load #$CC.b into Y register [Writes: Y Index] [Flags: NZ]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $080302.l,X		; FF 02 03 08 ; Subtract with carry (long,X) $080302.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $040904.l,X		; FF 04 09 04 ; Subtract with carry (long,X) $040904.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	ldx $80.b,Y		; B6 80 ; Load X register $80.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $80.b,Y		; B6 80 ; Load X register $80.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda [$B6.b],Y		; B7 B6 ; Load accumulator (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B6.b],Y		; B7 B6 ; Load accumulator (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B6.b],Y		; B7 B6 ; Load accumulator (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B6.b],Y		; B7 B6 ; Load accumulator (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $862A.w		; 20 2A 86 ; Jump to subroutine at $862A.w [Writes: Stack Pointer] [Flow: call]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0C4A.w,Y		; D9 4A 0C ; Compare accumulator $0C4A.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	lda $0280.w,Y		; B9 80 02 ; Load $0280.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	ldy $0C7C.w,X		; BC 7C 0C ; Load Y register $0C7C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	jsl $0DBA90.l		; 22 90 BA 0D ; Jump to subroutine long $0DBA90.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$1C.b		; 29 1C ; Logical AND #$1C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8405.w,X		; 7D 05 84 ; Add $8405.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8415.w,X		; 7D 15 84 ; Add $8415.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $8425.w,X		; BD 25 84 ; Load $8425.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dec $05.b		; C6 05 ; Decrement $05.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($0004.w,X)		; FC 04 00 ; Jump to subroutine indirect indexed ($0004.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $DE.b		; 14 DE ; Test and reset bits $DE.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C4A.w,Y		; B9 4A 0C ; Load $0C4A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,Y		; 99 4A 0C ; Store accumulator to $0C4A.w,Y [Reads: Y Index, Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,Y		; 99 68 0C ; Store accumulator to $0C68.w,Y [Reads: Y Index, Accumulator]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $84C4.w,X		; BD C4 84 ; Load $84C4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,Y		; 99 2C 0C ; Store accumulator to $0C2C.w,Y [Reads: Y Index, Accumulator]
	lda $84C0.w,X		; BD C0 84 ; Load $84C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,Y		; 99 22 0C ; Store accumulator to $0C22.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,Y		; 99 FA 0B ; Store accumulator to $0BFA.w,Y [Reads: Y Index, Accumulator]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,Y		; 99 7C 0C ; Store accumulator to $0C7C.w,Y [Reads: Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,Y		; 99 90 0C ; Store accumulator to $0C90.w,Y [Reads: Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	ldy $0C54.w,X		; BC 54 0C ; Load Y register $0C54.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $8515.w,Y		; 39 15 85 ; AND accumulator with memory $8515.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	jsr $897B.w		; 20 7B 89 ; Jump to subroutine at $897B.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	.db $82, $EE, $00		; 82 EE 00 ; Branch always long to $82, $EE, $00 [Flow: branch]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	mvp $52,$44		; 44 44 52 ; Move block positive $52,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($50.b)		; 52 50 ; Exclusive OR accumulator with memory (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $50, $44		; 50 44 ; Branch if overflow clear to $50, $44 [Flow: branch]
	mvp $51,$51		; 44 51 51 ; Move block positive $51,$51 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $42, $42		; 42 42 ; Reserved instruction
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	mvp $51,$44		; 44 44 51 ; Move block positive $51,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($50.b),Y		; 51 50 ; Exclusive OR accumulator with memory ($50.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $44		; 50 44 ; Branch if overflow clear to $50, $44 [Flow: branch]
	mvp $52,$52		; 44 52 52 ; Move block positive $52,$52 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $42, $42		; 42 42 ; Reserved instruction
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $BC10.w		; 20 10 BC ; Jump to subroutine at $BC10.w [Writes: Stack Pointer] [Flow: call]
	jmp ($B90C.w,X)		; 7C 0C B9 ; Jump indirect indexed to ($B90C.w,X) [Reads: X Index] [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stx $85.b		; 86 85 ; Store X register to $85.b [Reads: X Index]
	tsb $BC.b		; 04 BC ; Test and set bits $BC.b [Reads: Accumulator] [Flags: Z]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$F4.b		; C9 F4 ; Compare #$F4.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $E3		; B0 E3 ; Branch if carry set to $B0, $E3 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $D7		; B0 D7 ; Branch if carry set to $B0, $D7 [Flow: branch]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $862A.w		; 20 2A 86 ; Jump to subroutine at $862A.w [Writes: Stack Pointer] [Flow: call]
	ldy $0C5E.w,X		; BC 5E 0C ; Load Y register $0C5E.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $864E.w,Y		; 19 4E 86 ; OR accumulator with memory $864E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0C72.w,X		; 7D 72 0C ; Add $0C72.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $0C72.w,X		; 7D 72 0C ; Add $0C72.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $0C54.w,X		; 7D 54 0C ; Add $0C54.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $85C2.w,X		; BD C2 85 ; Load $85C2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $85DA.w,X		; BD DA 85 ; Load $85DA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $85F2.w,X		; BD F2 85 ; Load $85F2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $860A.w,X		; BD 0A 86 ; Load $860A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $8562.w,X		; BD 62 85 ; Load $8562.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$82.b		; 69 82 ; Add #$82.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $857A.w,X		; BD 7A 85 ; Load $857A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$82.b		; 69 82 ; Add #$82.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $8592.w,X		; BD 92 85 ; Load $8592.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $85AA.w,X		; BD AA 85 ; Load $85AA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $82, $80, $20		; 82 80 20 ; Branch always long to $82, $80, $20 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $87EC.w		; 4C EC 87 ; Jump to $87EC.w [Flow: jump]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $77		; D0 77 ; Branch if not equal to $D0, $77 [Flow: branch]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $2E		; B0 2E ; Branch if carry set to $B0, $2E [Flow: branch]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $028A.w,X		; BD 8A 02 ; Load $028A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $028A.w,X		; 9D 8A 02 ; Store accumulator to $028A.w,X [Reads: Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F3.b		; 29 F3 ; Logical AND #$F3.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0333.w		; 8D 33 03 ; Store accumulator to $0333.w [Reads: Accumulator]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0333.w		; 8D 33 03 ; Store accumulator to $0333.w [Reads: Accumulator]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $01F3EC.l		; 22 EC F3 01 ; Jump to subroutine long $01F3EC.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $877C.w		; 20 7C 87 ; Jump to subroutine at $877C.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9C9D.w		; 8D 9D 9C ; Store accumulator to $9C9D.w [Reads: Accumulator]
	jsr $862A.w		; 20 2A 86 ; Jump to subroutine at $862A.w [Writes: Stack Pointer] [Flow: call]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	stx $03.b		; 86 03 ; Store X register to $03.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8759.w,X		; 7D 59 87 ; Add $8759.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8769.w,X		; 7D 69 87 ; Add $8769.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $03.b		; A6 03 ; Load $03.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $8779.w,X		; BD 79 87 ; Load $8779.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $CC		; 10 CC ; Branch if plus to $10, $CC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	cmp #$2F.b		; C9 2F ; Compare #$2F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $099C4F.l		; 22 4F 9C 09 ; Jump to subroutine long $099C4F.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$A0.b		; A2 A0 ; Load #$A0.b into X register [Writes: X Index] [Flags: NZ]
	stx $F920.w		; 8E 20 F9 ; Store X register to $F920.w [Reads: X Index]
	sbc ($20.b,X)		; E1 20 ; Subtract with carry ($20.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stx $A0.b		; 86 A0 ; Store X register to $A0.b [Reads: X Index]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tsb $D2F0.w		; 0C F0 D2 ; Test and set bits $D2F0.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $87E8.w,X		; BD E8 87 ; Load $87E8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	.db $82, $36, $1F		; 82 36 1F ; Branch always long to $82, $36, $1F [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FD.b		; 69 FD ; Add #$FD.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$A4.b		; A9 A4 ; Load #$A4.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	tsb $000C.w		; 0C 0C 00 ; Test and set bits $000C.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	tsb $040C.w		; 0C 0C 04 ; Test and set bits $040C.w [Reads: Accumulator] [Flags: Z]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	stz $03E4.w,X		; 9E E4 03 ; Store zero to $03E4.w,X [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $6F		; [PATTERN: Memory clearing operation] F0 6F ; Branch if equal to $F0, $6F [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 16
	rep #$20		; C2 20
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	jsr $8A03.w		; 20 03 8A ; Jump to subroutine at $8A03.w [Writes: Stack Pointer] [Flow: call]
	stz $0C7C.w,X		; 9E 7C 0C ; Store zero to $0C7C.w,X [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $8A03.w		; 20 03 8A ; Jump to subroutine at $8A03.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0C72.w,X		; BC 72 0C ; Load Y register $0C72.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8953.w,Y		; 79 53 89 ; Add $8953.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8967.w,Y		; 79 67 89 ; Add $8967.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$00E0.w		; C9 E0 00 ; Compare #$00E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $61		; B0 61 ; Branch if carry set to $B0, $61 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $72		; B0 72 ; Branch if carry set to $B0, $72 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00882E.l		; 22 2E 88 00 ; Jump to subroutine long $00882E.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $06E87B.l		; 22 7B E8 06 ; Jump to subroutine long $06E87B.l [Writes: Stack Pointer] [Flow: call]
	sta $03E4.w,X		; 9D E4 03 ; Store accumulator to $03E4.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $8853.w,Y		; B9 53 88 ; Load $8853.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$D002.w		; C9 02 D0 ; Compare #$D002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$2998.w		; 09 98 29 ; Logical OR #$2998.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $C9		; F0 C9 ; Branch if equal to $F0, $C9 [Flow: branch]
	cpy #$D0.b		; C0 D0 ; Compare #$D0.b with Y register [Reads: Y Index] [Flags: NCZ]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0280BD.l		; 0F BD 80 02 ; OR accumulator with memory (long) $0280BD.l [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	cmp #$F001.w		; C9 01 F0 ; Compare #$F001.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $E8.b,X		; F6 E8 ; Increment memory $E8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$D003.w		; C9 03 D0 ; Compare #$D003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora [$BC.b]		; 07 BC ; OR accumulator with memory (long) [$BC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($80.b,X)		; 21 80 ; Logical AND ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $8ADE.w,X		; 1D DE 8A ; OR accumulator with memory $8ADE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $028A.w,X		; 9E 8A 02 ; Store zero to $028A.w,X [Reads: X Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$D004.w		; C9 04 D0 ; Compare #$D004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $9D06A9.l		; 0F A9 06 9D ; OR accumulator with memory (long) $9D06A9.l [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	eor #$9D01.w		; 49 01 9D ; Exclusive OR #$9D01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lda #$8D03.w		; A9 03 8D ; Load #$8D03.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp.w [$600F]		; DC 0F 60 ; Jump long indirect [$600F] [Flow: jump]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6CAD00.l,X		; FF 00 AD 6C ; Subtract with carry (long,X) $6CAD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $F0.b		; [PATTERN: Memory clearing operation] 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	adc $C203C9.l		; 6F C9 03 C2 ; Add with carry (long) $C203C9.l [Writes: Accumulator] [Flags: NCVZ]
	jsr $0690.w		; 20 90 06 ; Jump to subroutine at $0690.w [Writes: Stack Pointer] [Flow: call]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	jsr $8C43.w		; 20 43 8C ; Jump to subroutine at $8C43.w [Writes: Stack Pointer] [Flow: call]
	stz $0C7C.w,X		; 9E 7C 0C ; Store zero to $0C7C.w,X [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $8C43.w		; 20 43 8C ; Jump to subroutine at $8C43.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0C72.w,X		; BC 72 0C ; Load Y register $0C72.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8BBF.w,Y		; 79 BF 8B ; Add $8BBF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $8BC3.w,Y		; 79 C3 8B ; Add $8BC3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8BC7.w,Y		; 79 C7 8B ; Add $8BC7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $8BCB.w,Y		; 79 CB 8B ; Add $8BCB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$00E0.w		; C9 E0 00 ; Compare #$00E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $5D		; B0 5D ; Branch if carry set to $B0, $5D [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $4F		; B0 4F ; Branch if carry set to $B0, $4F [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00882E.l		; 22 2E 88 00 ; Jump to subroutine long $00882E.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $06E87B.l		; 22 7B E8 06 ; Jump to subroutine long $06E87B.l [Writes: Stack Pointer] [Flow: call]
	sta $03E4.w,X		; 9D E4 03 ; Store accumulator to $03E4.w,X [Reads: Accumulator, X Index]
	cmp #$D003.w		; C9 03 D0 ; Compare #$D003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $BC.b		; 05 BC ; Logical OR $BC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $8ABF.w,Y		; B9 BF 8A ; Load $8ABF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$D002.w		; C9 02 D0 ; Compare #$D002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $E8.b,X		; F6 E8 ; Increment memory $E8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$D004.w		; C9 04 D0 ; Compare #$D004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $CABD.w		; 0C BD CA ; Test and set bits $CABD.w [Reads: Accumulator] [Flags: Z]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($A9.b)		; 12 A9 ; OR accumulator with memory (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($9D.b,X)		; 01 9D ; Logical OR ($9D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	cmp #$D003.w		; C9 03 D0 ; Compare #$D003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora [$BC.b]		; 07 BC ; OR accumulator with memory (long) [$BC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pea $F414.w		; F4 14 F4 ; Push absolute address $F414.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	trb $F8.b		; 14 F8 ; Test and reset bits $F8.b [Reads: Accumulator] [Flags: Z]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	tsb $0CFC.w		; 0C FC 0C ; Test and set bits $0CFC.w [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $14F4.w		; F4 F4 14 ; Push absolute address $14F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	trb $F8.b		; 14 F8 ; Test and reset bits $F8.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	jsr ($0CFC.w,X)		; FC FC 0C ; Jump to subroutine indirect indexed ($0CFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $00,$40		; 54 40 00 ; Move block negative $00,$40 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	jsr $862A.w		; 20 2A 86 ; Jump to subroutine at $862A.w [Writes: Stack Pointer] [Flow: call]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $B4, $58		; 82 B4 58 ; Branch always long to $82, $B4, $58 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	stx $03.b		; 86 03 ; Store X register to $03.b [Reads: X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8CD9.w,X		; 7D D9 8C ; Add $8CD9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8CE9.w,X		; 7D E9 8C ; Add $8CE9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $8CF9.w,X		; BD F9 8C ; Load $8CF9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$C882.w		; 69 82 C8 ; Add #$C882.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $8D09.w,X		; BD 09 8D ; Load $8D09.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0502.w		; 09 02 05 ; Logical OR #$0502.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $C8.b		; 04 C8 ; Test and set bits $C8.b [Reads: Accumulator] [Flags: Z]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $03.b		; A6 03 ; Load $03.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $CD		; 10 CD ; Branch if plus to $10, $CD [Flow: branch]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$8203.w		; A9 03 82 ; Load #$8203.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp.w [$A06D]		; DC 6D A0 ; Jump long indirect [$A06D] [Flow: jump]
	ora $0C4ABD.l		; 0F BD 4A 0C ; OR accumulator with memory (long) $0C4ABD.l [Writes: Accumulator] [Flags: NZ]
	cmp #$F009.w		; C9 09 F0 ; Compare #$F009.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl $1FC9.w		; 0E C9 1F ; Arithmetic shift left $1FC9.w [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$1903.w		; 29 03 19 ; Logical AND #$1903.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$9009.w		; C9 09 90 ; Compare #$9009.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora [$B9.b],Y		; 17 B9 ; OR accumulator with memory (long indexed) [$B9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tsb $0229.w		; 0C 29 02 ; Test and set bits $0229.w [Reads: Accumulator] [Flags: Z]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0F20.w,Y		; D9 20 0F ; Compare accumulator $0F20.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $8DAE.w		; 20 AE 8D ; Jump to subroutine at $8DAE.w [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $8EAD.w		; 20 AD 8E ; Jump to subroutine at $8EAD.w [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $0683EA.l		; 22 EA 83 06 ; Jump to subroutine long $0683EA.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsl $0683E6.l		; 22 E6 83 06 ; Jump to subroutine long $0683E6.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jmp $8E73.w		; 4C 73 8E ; Jump to $8E73.w [Flow: jump]
	lda $0B6B.w,Y		; B9 6B 0B ; Load $0B6B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$F008.w		; 29 08 F0 ; Logical AND #$F008.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $BD.b		; 24 BD ; Test bits $BD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $09C9.w		; 0C C9 09 ; Test and set bits $09C9.w [Reads: Accumulator] [Flags: Z]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F01B.w		; C9 1B F0 ; Compare #$F01B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$9003.w		; C9 03 90 ; Compare #$9003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $188D.w		; EE 8D 18 ; Increment $188D.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8DD8.w		; 20 D8 8D ; Jump to subroutine at $8DD8.w [Writes: Stack Pointer] [Flow: call]
	lda $0CAA.w,Y		; B9 AA 0C ; Load $0CAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$F010.w		; 29 10 F0 ; Logical AND #$F010.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $BD.b,X		; 16 BD ; Arithmetic shift left $BD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc ($0C.b)		; 72 0C ; Add with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$9D03.w		; 29 03 9D ; Logical AND #$9D03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($0C.b)		; 72 0C ; Add with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0DE0.w,Y		; B9 E0 0D ; Load $0DE0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $8DAA.w,Y		; B9 AA 8D ; Load $8DAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cmp $0C72.w,X		; DD 72 0C ; Compare accumulator $0C72.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $61		; F0 61 ; Branch if equal to $F0, $61 [Flow: branch]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F005.w		; C9 05 F0 ; Compare #$F005.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp #$D01F.w		; C9 1F D0 ; Compare #$D01F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F08D.w		; C9 8D F0 ; Compare #$F08D.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $F0B9.w		; 0C B9 F0 ; Test and set bits $F0B9.w [Reads: Accumulator] [Flags: Z]
	asl $4AD0.w		; 0E D0 4A ; Arithmetic shift left $4AD0.w [Flags: NCZ]
	lda $0CAA.w,Y		; B9 AA 0C ; Load $0CAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$F002.w		; 29 02 F0 ; Logical AND #$F002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$8A.b]		; 07 8A ; OR accumulator with memory (long) [$8A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Y Index, Accumulator]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	lda $0BA0.w,Y		; B9 A0 0B ; Load $0BA0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3E		; D0 3E ; Branch if not equal to $D0, $3E [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$D092.w		; C9 92 D0 ; Compare #$D092.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora [$B9.b]		; 07 B9 ; OR accumulator with memory (long) [$B9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	cmp #$9003.w		; C9 03 90 ; Compare #$9003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	and #$BDDA.w		; 29 DA BD ; Logical AND #$BDDA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($0C.b)		; 72 0C ; Add with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$AA03.w		; 29 03 AA ; Logical AND #$AA03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $8E75.w,X		; BD 75 8E ; Load $8E75.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F40.w,Y		; 99 40 0F ; Store accumulator to $0F40.w,Y [Reads: Y Index, Accumulator]
	lda $8E79.w,X		; BD 79 8E ; Load $8E79.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F30.w,Y		; 99 30 0F ; Store accumulator to $0F30.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $0FB6.w		; 8E B6 0F ; Store X register to $0FB6.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $06ECB7.l		; 22 B7 EC 06 ; Jump to subroutine long $06ECB7.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0BB0.w,Y		; 99 B0 0B ; Store accumulator to $0BB0.w,Y [Reads: Y Index, Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr $8AB9.w		; 20 B9 8A ; Jump to subroutine at $8AB9.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sbc $0808F8.l,X		; FF F8 08 08 ; Subtract with carry (long,X) $0808F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $0820.w		; 20 20 08 ; Jump to subroutine at $0820.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F0F0F8.l,X		; FF F8 F0 F0 ; Subtract with carry (long,X) $F0F0F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $6420.w		; 20 20 64 ; Jump to subroutine at $6420.w [Writes: Stack Pointer] [Flow: call]
	ora #$BC5A.w		; 09 5A BC ; Logical OR #$BC5A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($0C.b)		; 72 0C ; Add with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$D00C.w		; C9 0C D0 ; Compare #$D00C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl $C6.b		; 06 C6 ; Arithmetic shift left $C6.b [Reads: Direct Page] [Flags: NCZ]
	ora #$0998.w		; 09 98 09 ; Logical OR #$0998.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8E7D.w,Y		; 79 7D 8E ; Add $8E7D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $09.b		; 65 09 ; Add $09.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8E95.w,Y		; 79 95 8E ; Add $8E95.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $09.b		; 65 09 ; Add $09.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $8E89.w,Y		; B9 89 8E ; Load $8E89.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $8EA1.w,Y		; B9 A1 8E ; Load $8EA1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $8F6F.w		; 20 6F 8F ; Jump to subroutine at $8F6F.w [Writes: Stack Pointer] [Flow: call]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$1AFF.w		; 49 FF 1A ; Exclusive OR #$1AFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	jsr $8F5C.w		; 20 5C 8F ; Jump to subroutine at $8F5C.w [Writes: Stack Pointer] [Flow: call]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$1AFF.w		; 49 FF 1A ; Exclusive OR #$1AFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0C.b		; C5 0C ; Compare $0C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; [PATTERN: Memory clearing operation] 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldx $01.b		; A6 01 ; Load $01.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $0D.b		; C5 0D ; Compare $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	sbc $0D.b		; E5 0D ; Subtract $0D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	eor #$1AFF.w		; 49 FF 1A ; Exclusive OR #$1AFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	eor #$1AFF.w		; 49 FF 1A ; Exclusive OR #$1AFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0C04.w,X		; FD 04 0C ; Subtract with carry $0C04.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0C18.w,X		; FD 18 0C ; Subtract with carry $0C18.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0BFA.w,X		; FD FA 0B ; Subtract with carry $0BFA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0C0E.w,X		; FD 0E 0C ; Subtract with carry $0C0E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($82.b,S),Y		; 93 82 ; Store accumulator (stack relative indirect indexed) ($82.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($22.b,X)		; 81 22 ; Store accumulator ($22.b,X) [Reads: Direct Page, Accumulator, X Index]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $0FACAD.l		; 22 AD AC 0F ; Jump to subroutine long $0FACAD.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $F3		; F0 F3 ; Branch if equal to $F0, $F3 [Flow: branch]
	lda #$8D02.w		; A9 02 8D ; Load #$8D02.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp.w [$CE0F]		; DC 0F CE ; Jump long indirect [$CE0F] [Flow: jump]
	lda $08100F.l		; AF 0F 10 08 ; Load long $08100F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec $0FAC.w		; CE AC 0F ; Decrement $0FAC.w [Flags: NZ]
	lda #$8D01.w		; A9 01 8D ; Load #$8D01.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $10A90F.l		; AF 0F A9 10 ; Load long $10A90F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	ldy $0B68.w		; AC 68 0B ; Load $0B68.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	jsl $0DBA94.l		; 22 94 BA 0D ; Jump to subroutine long $0DBA94.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $0FAD.w		; AD AD 0F ; Load $0FAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00E2.w		; ED E2 00 ; Subtract $00E2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$B0F8.w		; C9 F8 B0 ; Compare #$B0F8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $42, $85		; 42 85 ; Reserved instruction
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $380F.w		; AE 0F 38 ; Load $380F.w into X register [Writes: X Index] [Flags: NZ]
	sbc $00E8.w		; ED E8 00 ; Subtract $00E8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$B0F0.w		; C9 F0 B0 ; Compare #$B0F0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $85.b,X		; 35 85 ; Logical AND $85.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($AD.b,X)		; 01 AD ; Logical OR ($AD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy $C90F.w		; AC 0F C9 ; Load $C90F.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $90.b,S		; 03 90 ; OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $A5		; 90 A5 ; Branch if carry clear to $90, $A5 [Flow: branch]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$AE80.w		; A9 80 AE ; Load #$AE80.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E00F.w		; AC 0F E0 ; Load $E00F.w into Y register [Writes: Y Index] [Flags: NZ]
	ora #$02B0.w		; 09 B0 02 ; Logical OR #$02B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$C892.w		; A9 92 C8 ; Load #$C892.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $0B68.w		; AE 68 0B ; Load $0B68.w into X register [Writes: X Index] [Flags: NZ]
	lda $088F85.l,X		; BF 85 8F 08 ; Load long $088F85.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$9100.w		; A9 00 91 ; Load #$9100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($60.b)		; 92 60 ; Store accumulator (indirect) ($60.b) [Reads: Direct Page, Accumulator]
	stz $0FAC.w		; 9C AC 0F ; Store zero to $0FAC.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$A004.w		; E9 04 A0 ; Subtract #$A004.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $A0		; 90 A0 ; Branch if carry clear to $90, $A0 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$A008.w		; 69 08 A0 ; Add #$A008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsb $91.b		; 04 91 ; Test and set bits $91.b [Reads: Accumulator] [Flags: Z]
	.db $90, $A0		; 90 A0 ; Branch if carry clear to $90, $A0 [Flow: branch]
	tsb $9091.w		; 0C 91 90 ; Test and set bits $9091.w [Reads: Accumulator] [Flags: Z]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$A004.w		; E9 04 A0 ; Subtract #$A004.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($91.b,X)		; 01 91 ; Logical OR ($91.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $90, $A0		; 90 A0 ; Branch if carry clear to $90, $A0 [Flow: branch]
	ora $91.b		; 05 91 ; Logical OR $91.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	adc #$A008.w		; 69 08 A0 ; Add #$A008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora #$9091.w		; 09 91 90 ; Logical OR #$9091.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$0D.b		; A0 0D ; Load #$0D.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $0B68.w		; AE 68 0B ; Load $0B68.w into X register [Writes: X Index] [Flags: NZ]
	lda $088F85.l,X		; BF 85 8F 08 ; Load long $088F85.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora #$A040.w		; 09 40 A0 ; Logical OR #$A040.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$91.b]		; 07 91 ; OR accumulator with memory (long) [$91.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	.db $80, $A0		; 80 A0 ; Branch always to $80, $A0 [Flow: branch]
	ora $499091.l		; 0F 91 90 49 ; OR accumulator with memory (long) $499091.l [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$0B.b		; A0 0B ; Load #$0B.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $0FAC.w		; AE AC 0F ; Load $0FAC.w into X register [Writes: X Index] [Flags: NZ]
	lda $8F82.w,X		; BD 82 8F ; Load $8F82.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$0A.b		; A0 0A ; Load #$0A.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$9100.w		; A9 00 91 ; Load #$9100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($C8.b)		; 92 C8 ; Store accumulator (indirect) ($C8.b) [Reads: Direct Page, Accumulator]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$AA0A.w		; 69 0A AA ; Add #$AA0A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $C7, $16		; 82 C7 16 ; Branch always long to $82, $C7, $16 [Flow: branch]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C36.w,X		; 7D 36 0C ; Add $0C36.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C36.w,X		; 9D 36 0C ; Store accumulator to $0C36.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	ora #$88F0.w		; 09 F0 88 ; Logical OR #$88F0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0BFA.w,X		; 7D FA 0B ; Add $0BFA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $0C0E.w,X		; 7D 0E 0C ; Add $0C0E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02A8.w,X		; 7D A8 02 ; Add $02A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02A8.w,X		; 9D A8 02 ; Store accumulator to $02A8.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	ora #$88F0.w		; 09 F0 88 ; Logical OR #$88F0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $029E.w,X		; 7D 9E 02 ; Add $029E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $029E.w,X		; 9D 9E 02 ; Store accumulator to $029E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F80008.l,X		; FF 08 00 F8 ; Subtract with carry (long,X) $F80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080008.l,X		; FF 08 00 08 ; Subtract with carry (long,X) $080008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A0FFF8.l,X		; FF F8 FF A0 ; Subtract with carry (long,X) $A0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $B9.b		; 04 B9 ; Test and set bits $B9.b [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $22C9.w		; 0C C9 22 ; Test and set bits $22C9.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$D007.w		; 29 07 D0 ; Logical AND #$D007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$2720.w		; 09 20 27 ; Logical OR #$2720.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	lda ($03.b),Y		; B1 03 ; Load accumulator ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$B009.w		; C9 09 B0 ; Compare #$B009.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	trb $AD.b		; 14 AD ; Test and reset bits $AD.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $C2, $01		; 82 C2 01 ; Branch always long to $82, $C2, $01 [Flow: branch]
	.db $82, $02, $01		; 82 02 01 ; Branch always long to $82, $02, $01 [Flow: branch]
	lda $03CF.w,X		; BD CF 03 ; Load $03CF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $90DC.w,Y		; 79 DC 90 ; Add $90DC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $90EC.w,Y		; 79 EC 90 ; Add $90EC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	inc $03B1.w,X		; FE B1 03 ; Increment memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	lda $0394.w,X		; BD 94 03 ; Load $0394.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $099757.l		; 22 57 97 09 ; Jump to subroutine long $099757.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $038A.w,X		; 9D 8A 03 ; Store accumulator to $038A.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $03C5.w,X		; BD C5 03 ; Load $03C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $8EED.w		; 20 ED 8E ; Jump to subroutine at $8EED.w [Writes: Stack Pointer] [Flow: call]
	jsl $06809F.l		; 22 9F 80 06 ; Jump to subroutine long $06809F.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $038A.w,X		; BD 8A 03 ; Load $038A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0380.w,X		; 7D 80 03 ; Add $0380.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0380.w,X		; 7D 80 03 ; Add $0380.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $17		; 90 17 ; Branch if carry clear to $90, $17 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $099478.l		; 22 78 94 09 ; Jump to subroutine long $099478.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	jsr $924B.w		; 20 4B 92 ; Jump to subroutine at $924B.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	dec $0C54.w,X		; DE 54 0C ; Decrement memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	dec $0380.w,X		; DE 80 03 ; Decrement memory $0380.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $0C7C.w,X		; 9E 7C 0C ; Store zero to $0C7C.w,X [Reads: X Index]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	jsr $92AB.w		; 20 AB 92 ; Jump to subroutine at $92AB.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $FD, $00		; 82 FD 00 ; Branch always long to $82, $FD, $00 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $8BCF.w		; 20 CF 8B ; Jump to subroutine at $8BCF.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $039D.w		; AD 9D 03 ; Load $039D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $21		; B0 21 ; Branch if carry set to $B0, $21 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $039D.w		; AD 9D 03 ; Load $039D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$000C.w		; 29 0C 00 ; Logical AND #$000C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$00E2.w		; C9 E2 00 ; Compare #$00E2.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $26		; [PATTERN: Memory clearing operation] 90 26 ; Branch if carry clear to $90, $26 [Flow: branch]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $035F.w		; 9C 5F 03 ; Store zero to $035F.w
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $E4.b		; A4 E4 ; Load $E4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	stz $24.b		; 64 24 ; Store zero to $24.b
	ldx #$E2.b		; A2 E2 ; Load #$E2.b into X register [Writes: X Index] [Flags: NZ]
	.db $62, $22, $02		; 62 22 02 ; Push effective relative address $62, $22, $02 [Writes: Stack Pointer]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $020002.l,X		; FF 02 00 02 ; Subtract with carry (long,X) $020002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0002.l,X		; FF 02 00 FE ; Subtract with carry (long,X) $FE0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $80FFFE.l,X		; FF FE FF 80 ; Subtract with carry (long,X) $80FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($F6.b),Y		; 71 F6 ; Add with carry ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $F66D.w,Y		; B9 6D F6 ; Load $F66D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	ldy $0394.w,X		; BC 94 03 ; Load Y register $0394.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $9336.w,Y		; B9 36 93 ; Load $9336.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	ldy $03A4.w,X		; BC A4 03 ; Load Y register $03A4.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $03A9.w,X		; BD A9 03 ; Load $03A9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0394.w,X		; BD 94 03 ; Load $0394.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	stz $74.b		; 64 74 ; Store zero to $74.b
	lda $9322.w,Y		; B9 22 93 ; Load $9322.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $9324.w,Y		; B9 24 93 ; Load $9324.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0FB3.w		; AD B3 0F ; Load $0FB3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9332.w,X		; BD 32 93 ; Load $9332.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0A20.w		; 69 20 0A ; Add #$0A20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $72.b		; 65 72 ; Add $72.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F702.w		; 20 02 F7 ; Jump to subroutine at $F702.w [Writes: Stack Pointer] [Flow: call]
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $931A.w,X		; BD 1A 93 ; Load $931A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $2F		; 10 2F ; Branch if plus to $10, $2F [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	jsr $8AB9.w		; 20 B9 8A ; Jump to subroutine at $8AB9.w [Writes: Stack Pointer] [Flow: call]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $15		; 10 15 ; Branch if plus to $10, $15 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	.db $82, $BC, $51		; 82 BC 51 ; Branch always long to $82, $BC, $51 [Flow: branch]
	.db $82, $C0, $00		; 82 C0 00 ; Branch always long to $82, $C0, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $82, $82		; 82 82 82 ; Branch always long to $82, $82, $82 [Flow: branch]
	.db $82, $93, $93		; 82 93 93 ; Branch always long to $82, $93, $93 [Flow: branch]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($B2.b)		; 72 B2 ; Add with carry (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($32.b)		; F2 32 ; Subtract with carry (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($B2.b)		; 72 B2 ; Add with carry (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($32.b)		; F2 32 ; Subtract with carry (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($B2.b)		; 72 B2 ; Add with carry (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($32.b)		; F2 32 ; Subtract with carry (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC0000.l,X		; FF 00 00 FC ; Subtract with carry (long,X) $FC0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($F6.b),Y		; 71 F6 ; Add with carry ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $941F.w,X		; BD 1F 94 ; Load $941F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $945F.w,X		; BD 5F 94 ; Load $945F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $949F.w,X		; BD 9F 94 ; Load $949F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $941F.w,X		; BD 1F 94 ; Load $941F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $943F.w,X		; BD 3F 94 ; Load $943F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $BA		; 10 BA ; Branch if plus to $10, $BA [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$A5.b		; 09 A5 ; Logical OR #$A5.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($F0.b),Y		; 11 F0 ; OR accumulator with memory ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $9976.w		; 20 76 99 ; Jump to subroutine at $9976.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $9A6A.w		; 20 6A 9A ; Jump to subroutine at $9A6A.w [Writes: Stack Pointer] [Flow: call]
	jsr $9A4F.w		; 20 4F 9A ; Jump to subroutine at $9A4F.w [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
	jsr $9BEF.w		; 20 EF 9B ; Jump to subroutine at $9BEF.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $24, $02		; 82 24 02 ; Branch always long to $82, $24, $02 [Flow: branch]
	jsr $9976.w		; 20 76 99 ; Jump to subroutine at $9976.w [Writes: Stack Pointer] [Flow: call]
	jsr $9C7F.w		; 20 7F 9C ; Jump to subroutine at $9C7F.w [Writes: Stack Pointer] [Flow: call]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	stz $0280.w,X		; 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	jsr $8BCF.w		; 20 CF 8B ; Jump to subroutine at $8BCF.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03D5.w,X		; 9D D5 03 ; Store accumulator to $03D5.w,X [Reads: Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $56		; F0 56 ; Branch if equal to $F0, $56 [Flow: branch]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4F		; D0 4F ; Branch if not equal to $D0, $4F [Flow: branch]
	lda $0BF0.w,X		; BD F0 0B ; Load $0BF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$FC.b		; A0 FC ; Load #$FC.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$F0.b		; A0 F0 ; Load #$F0.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	ldy #$FC.b		; A0 FC ; Load #$FC.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	.db $82, $F5, $00		; 82 F5 00 ; Branch always long to $82, $F5, $00 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $F1		; 30 F1 ; Branch if minus to $30, $F1 [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $41		; F0 41 ; Branch if equal to $F0, $41 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $5E		; F0 5E ; Branch if equal to $F0, $5E [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	cmp #$68.b		; C9 68 ; Compare #$68.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	cmp #$69.b		; C9 69 ; Compare #$69.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	cmp #$6A.b		; C9 6A ; Compare #$6A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$6B.b		; C9 6B ; Compare #$6B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	cmp #$B6.b		; C9 B6 ; Compare #$B6.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$BC.b		; C9 BC ; Compare #$BC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$B0.b		; C9 B0 ; Compare #$B0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	stz $0C68.w,X		; 9E 68 0C ; Store zero to $0C68.w,X [Reads: X Index]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $9B		; D0 9B ; Branch if not equal to $D0, $9B [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	.db $82, $8B, $00		; 82 8B 00 ; Branch always long to $82, $8B, $00 [Flow: branch]
	.db $82, $85, $00		; 82 85 00 ; Branch always long to $82, $85, $00 [Flow: branch]
	.db $82, $30, $FF		; 82 30 FF ; Branch always long to $82, $30, $FF [Flow: branch]
	.db $82, $3D, $00		; 82 3D 00 ; Branch always long to $82, $3D, $00 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$E8.b		; 69 E8 ; Add #$E8.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0C0E.w,X		; 7D 0E 0C ; Add $0C0E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	.db $82, $1A, $33		; 82 1A 33 ; Branch always long to $82, $1A, $33 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $5A		; 30 5A ; Branch if minus to $30, $5A [Flow: branch]
	stx $04.b		; 86 04 ; Store X register to $04.b [Reads: X Index]
	lda $02EC.w		; AD EC 02 ; Load $02EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	.db $82, $0B, $4F		; 82 0B 4F ; Branch always long to $82, $0B, $4F [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $39		; D0 39 ; Branch if not equal to $D0, $39 [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	lda $0310.w		; AD 10 03 ; Load $0310.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0BFA.w,X		; 7D FA 0B ; Add $0BFA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0311.w		; AD 11 03 ; Load $0311.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0C0E.w,X		; 7D 0E 0C ; Add $0C0E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $0312.w		; AD 12 03 ; Load $0312.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C04.w,X		; 7D 04 0C ; Add $0C04.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0313.w		; AD 13 03 ; Load $0313.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0C18.w,X		; 7D 18 0C ; Add $0C18.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $97BE.w		; 20 BE 97 ; Jump to subroutine at $97BE.w [Writes: Stack Pointer] [Flow: call]
	jsr $9CC3.w		; 20 C3 9C ; Jump to subroutine at $9CC3.w [Writes: Stack Pointer] [Flow: call]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0280.w,X		; 1D 80 02 ; OR accumulator with memory $0280.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	jsr $9815.w		; 20 15 98 ; Jump to subroutine at $9815.w [Writes: Stack Pointer] [Flow: call]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; [PATTERN: Memory clearing operation] D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9543.w,Y		; B9 43 95 ; Load $9543.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $38		; D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	stx $0E.b		; 86 0E ; Store X register to $0E.b [Reads: X Index]
	txa		; [PATTERN: Memory clearing operation] 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $03B6.w,X		; 9E B6 03 ; Store zero to $03B6.w,X [Reads: X Index]
	stz $03B7.w,X		; 9E B7 03 ; Store zero to $03B7.w,X [Reads: X Index]
	jsl $01D1F4.l		; 22 F4 D1 01 ; Jump to subroutine long $01D1F4.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $03B6.w,X		; BD B6 03 ; Load $03B6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $03B7.w,X		; 1D B7 03 ; OR accumulator with memory $03B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsr $9E9E.w		; 20 9E 9E ; Jump to subroutine at $9E9E.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$68.b		; E9 68 ; Subtract #$68.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $97B6.w,Y		; B9 B6 97 ; Load $97B6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $97BA.w,Y		; B9 BA 97 ; Load $97BA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0808.w		; 0C 08 08 ; Test and set bits $0808.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	jsr $8287.w		; 20 87 82 ; Jump to subroutine at $8287.w [Writes: Stack Pointer] [Flow: call]
	lda $037B.w		; AD 7B 03 ; Load $037B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $88		; D0 88 ; Branch if not equal to $D0, $88 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $81		; F0 81 ; Branch if equal to $F0, $81 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0308.w		; 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	stz $50.b		; 64 50 ; Store zero to $50.b
	.db $82, $74, $FF		; 82 74 FF ; Branch always long to $82, $74, $FF [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $EE.b		; C5 EE ; Compare $EE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF0.w		; 69 F0 FF ; Add #$FFF0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF0.w		; 69 F0 FF ; Add #$FFF0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	jsl $0683E6.l		; 22 E6 83 06 ; Jump to subroutine long $0683E6.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $6A		; 90 6A ; Branch if carry clear to $90, $6A [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F8.b		; 69 F8 ; Add #$F8.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F4.b		; 69 F4 ; Add #$F4.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $9CCE.w		; 20 CE 9C ; Jump to subroutine at $9CCE.w [Writes: Stack Pointer] [Flow: call]
	lda $97E2.w,Y		; B9 E2 97 ; Load $97E2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $04EB63.l		; 22 63 EB 04 ; Jump to subroutine long $04EB63.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	lda $0FFC.w		; AD FC 0F ; Load $0FFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	jsr $9CCE.w		; 20 CE 9C ; Jump to subroutine at $9CCE.w [Writes: Stack Pointer] [Flow: call]
	lda $97F2.w,Y		; B9 F2 97 ; Load $97F2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	lda $9802.w,Y		; B9 02 98 ; Load $9802.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$3A.b		; A9 3A ; Load #$3A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9812.w,Y		; B9 12 98 ; Load $9812.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FFFF.l,X		; FF FF FF 02 ; Subtract with carry (long,X) $02FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFFF.l,X		; FF FF FF 08 ; Subtract with carry (long,X) $08FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080014.l,X		; FF 14 00 08 ; Subtract with carry (long,X) $080014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$FE.b		; 09 FE ; Logical OR #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	lda $03EA.w,X		; BD EA 03 ; Load $03EA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $61, $01		; 82 61 01 ; Branch always long to $82, $61, $01 [Flow: branch]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $02EC.w		; AD EC 02 ; Load $02EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $037B.w		; AC 7B 03 ; Load $037B.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $03FD.w		; AD FD 03 ; Load $03FD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $10		; [PATTERN: Memory clearing operation] D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03EA.w,X		; 9D EA 03 ; Store accumulator to $03EA.w,X [Reads: Accumulator, X Index]
	stz $0294.w,X		; 9E 94 02 ; Store zero to $0294.w,X [Reads: X Index]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	stz $0BF0.w,X		; 9E F0 0B ; Store zero to $0BF0.w,X [Reads: X Index]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	.db $82, $5C, $00		; 82 5C 00 ; Branch always long to $82, $5C, $00 [Flow: branch]
	.db $82, $7F, $02		; 82 7F 02 ; Branch always long to $82, $7F, $02 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F76B.w		; 20 6B F7 ; Jump to subroutine at $F76B.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $44		; 90 44 ; Branch if carry clear to $90, $44 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $EE.b		; C5 EE ; Compare $EE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0A.b		; C5 0A ; Compare $0A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $9972.w,Y		; B9 72 99 ; Load $9972.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $2F.b		; C5 2F ; Compare $2F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $02EC.w		; [PATTERN: Memory clearing operation] 8D EC 02 ; Store accumulator to $02EC.w [Reads: Accumulator]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	lda $9943.w		; AD 43 99 ; Load $9943.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $76		; F0 76 ; Branch if equal to $F0, $76 [Flow: branch]
	lda $02EC.w		; AD EC 02 ; Load $02EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $71		; F0 71 ; Branch if equal to $F0, $71 [Flow: branch]
	ldy $0380.w,X		; BC 80 03 ; Load Y register $0380.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $6A		; F0 6A ; Branch if equal to $F0, $6A [Flow: branch]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $2A		; 10 2A ; Branch if plus to $10, $2A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
	lda $9943.w,Y		; B9 43 99 ; Load $9943.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $029E.w,X		; 9D 9E 02 ; Store accumulator to $029E.w,X [Reads: Accumulator, X Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$11.b		; 69 11 ; Add #$11.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	stz $0280.w,X		; 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $2F.b		; 65 2F ; Add $2F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9913.w,Y		; 79 13 99 ; Add $9913.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $9914.w,Y		; 79 14 99 ; Add $9914.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $992B.w,Y		; 79 2B 99 ; Add $992B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $992C.w,Y		; 79 2C 99 ; Add $992C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F4.b		; 05 F4 ; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $14, $01		; 82 14 01 ; Branch always long to $82, $14, $01 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	lda $9952.w,Y		; B9 52 99 ; Load $9952.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $9956.w,Y		; B9 56 99 ; Load $9956.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0309.w		; [PATTERN: Memory clearing operation] 8D 09 03 ; Store accumulator to $0309.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	stz $0BF0.w,X		; 9E F0 0B ; Store zero to $0BF0.w,X [Reads: X Index]
	stz $0380.w,X		; [PATTERN: Memory clearing operation] 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	stz $0280.w,X		; 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802E.w		; 20 2E 80 ; Jump to subroutine at $802E.w [Writes: Stack Pointer] [Flow: call]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $0BF0.w,X		; BD F0 0B ; Load $0BF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $25		; 30 25 ; Branch if minus to $30, $25 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $FB		; B0 FB ; Branch if carry set to $B0, $FB [Flow: branch]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	inc $0385.w,X		; FE 85 03 ; Increment memory $0385.w,X [Reads: X Index] [Flags: NZ]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $47		; F0 47 ; Branch if equal to $F0, $47 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C72.w,X		; 7D 72 0C ; Add $0C72.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $996A.w,Y		; B9 6A 99 ; Load $996A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	lda $0BF0.w,X		; [PATTERN: Memory clearing operation] BD F0 0B ; Load $0BF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	stz $0BF0.w,X		; 9E F0 0B ; Store zero to $0BF0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	stz $0385.w,X		; [PATTERN: Memory clearing operation] 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	stz $0BF0.w,X		; 9E F0 0B ; Store zero to $0BF0.w,X [Reads: X Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0294.w,X		; [PATTERN: Memory clearing operation] 9E 94 02 ; Store zero to $0294.w,X [Reads: X Index]
	lda $03D5.w,X		; BD D5 03 ; Load $03D5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	stz $03D5.w,X		; 9E D5 03 ; Store zero to $03D5.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $72		; D0 72 ; Branch if not equal to $D0, $72 [Flow: branch]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; [PATTERN: Memory clearing operation] 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02E0.w		; 0D E0 02 ; Logical OR $02E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	.db $82, $C3, $FE		; 82 C3 FE ; Branch always long to $82, $C3, $FE [Flow: branch]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03CA.w,X		; 9D CA 03 ; Store accumulator to $03CA.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9946.w,Y		; 79 46 99 ; Add $9946.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0012.w		; 69 12 00 ; Add #$0012.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FC.b		; C9 FC ; Compare #$FC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1F		; 90 1F ; Branch if carry clear to $90, $1F [Flow: branch]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	inc $03EA.w,X		; FE EA 03 ; Increment memory $03EA.w,X [Reads: X Index] [Flags: NZ]
	lda $03EA.w,X		; BD EA 03 ; Load $03EA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$18.b		; [PATTERN: Memory clearing operation] A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	stz $03EA.w,X		; [PATTERN: Memory clearing operation] 9E EA 03 ; Store zero to $03EA.w,X [Reads: X Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C0E.w,X		; [PATTERN: Memory clearing operation] BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	stz $0D.b		; 64 0D ; Store zero to $0D.b
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $72.b		; 65 72 ; Add $72.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $FF26.w		; 6E 26 FF ; Rotate right $FF26.w [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8C228C.l,X		; FF 8C 22 8C ; Subtract with carry (long,X) $8C228C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $8C, $A2		; 62 8C A2 ; Push effective relative address $62, $8C, $A2 [Writes: Stack Pointer]
	sty $FFE2.w		; 8C E2 FF ; Store Y register to $FFE2.w [Reads: Y Index]
	sbc $84FFFF.l,X		; FF FF FF 84 ; Subtract with carry (long,X) $84FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $846284.l		; 22 84 62 84 ; Jump to subroutine long $846284.l [Writes: Stack Pointer] [Flow: call]
	ldx #$84.b		; A2 84 ; Load #$84.b into X register [Writes: X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$FF		; E2 FF
	sbc $88FFFF.l,X		; FF FF FF 88 ; Subtract with carry (long,X) $88FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $886288.l		; 22 88 62 88 ; Jump to subroutine long $886288.l [Writes: Stack Pointer] [Flow: call]
	ldx #$88.b		; A2 88 ; Load #$88.b into X register [Writes: X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$FF		; E2 FF
	sbc $86FFFF.l,X		; FF FF FF 86 ; Subtract with carry (long,X) $86FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $882288.l		; 22 88 22 88 ; Jump to subroutine long $882288.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $88, $A2		; 62 88 A2 ; Push effective relative address $62, $88, $A2 [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$FF		; E2 FF
	sbc $862286.l,X		; FF 86 22 86 ; Subtract with carry (long,X) $862286.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $86, $E2		; 62 86 E2 ; Push effective relative address $62, $86, $E2 [Writes: Stack Pointer]
	stx $E2.b		; 86 E2 ; Store X register to $E2.b [Reads: X Index]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $E2.b		; 86 E2 ; Store X register to $E2.b [Reads: X Index]
	stx $22.b		; 86 22 ; Store X register to $22.b [Reads: X Index]
	stx $22.b		; 86 22 ; Store X register to $22.b [Reads: X Index]
	stx $62.b		; 86 62 ; Store X register to $62.b [Reads: X Index]
	stx $A2.b		; 86 A2 ; Store X register to $A2.b [Reads: X Index]
	stx $A2.b		; 86 A2 ; Store X register to $A2.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$8A.b		; A2 8A ; Load #$8A.b into X register [Writes: X Index] [Flags: NZ]
	.db $62, $8A, $22		; 62 8A 22 ; Push effective relative address $62, $8A, $22 [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $8A, $62		; 62 8A 62 ; Push effective relative address $62, $8A, $62 [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$9B		; E2 9B
	jsl $9BA29B.l		; 22 9B A2 9B ; Jump to subroutine long $9BA29B.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $9B, $E2		; 62 9B E2 ; Push effective relative address $62, $9B, $E2 [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldx #$9B.b		; A2 9B ; Load #$9B.b into X register [Writes: X Index] [Flags: NZ]
	jsl $F8FFF8.l		; 22 F8 FF F8 ; Jump to subroutine long $F8FFF8.l [Writes: Stack Pointer] [Flow: call]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8FFF8.l,X		; FF F8 FF F8 ; Subtract with carry (long,X) $F8FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFF0.l,X		; FF F0 FF F0 ; Subtract with carry (long,X) $F0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFF0.l,X		; FF F0 FF F0 ; Subtract with carry (long,X) $F0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EBFFF8.l,X		; FF F8 FF EB ; Subtract with carry (long,X) $EBFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EBFFEA.l,X		; FF EA FF EB ; Subtract with carry (long,X) $EBFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $090008.l,X		; FF 08 00 09 ; Subtract with carry (long,X) $090008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080009.l,X		; FF 09 00 08 ; Subtract with carry (long,X) $080009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF1.l,X		; FF F1 FF 00 ; Subtract with carry (long,X) $00FFF1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFFF0.l,X		; FF F0 FF FE ; Subtract with carry (long,X) $FEFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9FFF8.l,X		; FF F8 FF F9 ; Subtract with carry (long,X) $F9FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EBFFFC.l,X		; FF FC FF EB ; Subtract with carry (long,X) $EBFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFB.l,X		; FF FB FF F4 ; Subtract with carry (long,X) $F4FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F5FFEE.l,X		; FF EE FF F5 ; Subtract with carry (long,X) $F5FFEE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000007.l,X		; FF 07 00 00 ; Subtract with carry (long,X) $000007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0004.l,X		; FF 04 00 FE ; Subtract with carry (long,X) $FE0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFFF7.l,X		; FF F7 FF FC ; Subtract with carry (long,X) $FCFFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFFEA.l,X		; FF EA FF FB ; Subtract with carry (long,X) $FBFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ECFFF3.l,X		; FF F3 FF EC ; Subtract with carry (long,X) $ECFFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $08FFF5.l,X		; FF F5 FF 08 ; Subtract with carry (long,X) $08FFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0005.l,X		; FF 05 00 FE ; Subtract with carry (long,X) $FE0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $04FFEC.l,X		; FF EC FF 04 ; Subtract with carry (long,X) $04FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F7FFED.l,X		; FF ED FF F7 ; Subtract with carry (long,X) $F7FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FB0010.l,X		; FF 10 00 FB ; Subtract with carry (long,X) $FB0010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FFFE.l,X		; FF FE FF 02 ; Subtract with carry (long,X) $02FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06000A.l,X		; FF 0A 00 06 ; Subtract with carry (long,X) $06000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $2A24.w,X		; 1E 24 2A ; Arithmetic shift left $2A24.w,X [Reads: X Index] [Flags: NCZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$3000.w		; A9 00 30 ; Load #$3000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $64.b		; 85 64 ; Store accumulator to $64.b [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy $0C5E.w,X		; BC 5E 0C ; Load Y register $0C5E.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $954E.w,Y		; B9 4E 95 ; Load $954E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9E8A.w,Y		; B9 8A 9E ; Load $9E8A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; [PATTERN: Memory clearing operation] A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	and #$0E.b		; 29 0E ; Logical AND #$0E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	.db $D0, $5D		; D0 5D ; Branch if not equal to $D0, $5D [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	lda $0E20.w		; AD 20 0E ; Load $0E20.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy $02EC.w		; CC EC 02 ; Compare $02EC.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F90A.w		; 20 0A F9 ; Jump to subroutine at $F90A.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $31		; 80 31 ; Branch always to $80, $31 [Flow: branch]
	lda $0FB3.w		; AD B3 0F ; Load $0FB3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy $02EC.w		; CC EC 02 ; Compare $02EC.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$00D0.w		; A9 D0 00 ; Load #$00D0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0034.w		; A9 34 00 ; Load #$0034.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0A20.w		; 69 20 0A ; Add #$0A20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $9E93.w,Y		; B9 93 9E ; Load $9E93.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	stz $06.b		; 64 06 ; Store zero to $06.b
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $A7AB.w		; 20 AB A7 ; Jump to subroutine at $A7AB.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $0FFDCF.l		; 22 CF FD 0F ; Jump to subroutine long $0FFDCF.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	jsr $F897.w		; 20 97 F8 ; Jump to subroutine at $F897.w [Writes: Stack Pointer] [Flow: call]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $A091.w		; 20 91 A0 ; Jump to subroutine at $A091.w [Writes: Stack Pointer] [Flow: call]
	dec $03C0.w,X		; DE C0 03 ; Decrement memory $03C0.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03C0.w,X		; 9D C0 03 ; Store accumulator to $03C0.w,X [Reads: Accumulator, X Index]
	inc $03C2.w,X		; FE C2 03 ; Increment memory $03C2.w,X [Reads: X Index] [Flags: NZ]
	lda $03C2.w,X		; BD C2 03 ; Load $03C2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $E05E.w		; 20 5E E0 ; Jump to subroutine at $E05E.w [Writes: Stack Pointer] [Flow: call]
	lsr $5EA0.w,X		; 5E A0 5E ; Logical shift right $5EA0.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $204F20.l		; 4F 20 4F 20 ; Exclusive OR accumulator with memory (long) $204F20.l [Writes: Accumulator] [Flags: NZ]
	eor $204F20.l		; 4F 20 4F 20 ; Exclusive OR accumulator with memory (long) $204F20.l [Writes: Accumulator] [Flags: NZ]
	lsr $5E60.w,X		; 5E 60 5E ; Logical shift right $5E60.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $5E20.w,X		; 5E 20 5E ; Logical shift right $5E20.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$4F.b		; E0 4F ; Compare #$4F.b with X register [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $604F60.l		; 4F 60 4F 60 ; Exclusive OR accumulator with memory (long) $604F60.l [Writes: Accumulator] [Flags: NZ]
	eor $205E60.l		; 4F 60 5E 20 ; Exclusive OR accumulator with memory (long) $205E60.l [Writes: Accumulator] [Flags: NZ]
	lsr $5EE0.w,X		; 5E E0 5E ; Logical shift right $5EE0.w,X [Reads: X Index] [Flags: NCZ]
	ldy #$5E.b		; A0 5E ; Load #$5E.b into Y register [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $E04F20.l		; 4F 20 4F E0 ; Exclusive OR accumulator with memory (long) $E04F20.l [Writes: Accumulator] [Flags: NZ]
	eor $204F20.l		; 4F 20 4F 20 ; Exclusive OR accumulator with memory (long) $204F20.l [Writes: Accumulator] [Flags: NZ]
	lsr $5E60.w,X		; 5E 60 5E ; Logical shift right $5E60.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $5E20.w,X		; 5E 20 5E ; Logical shift right $5E20.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$4F.b		; E0 4F ; Compare #$4F.b with X register [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $604F60.l		; 4F 60 4F 60 ; Exclusive OR accumulator with memory (long) $604F60.l [Writes: Accumulator] [Flags: NZ]
	eor $A42060.l		; 4F 60 20 A4 ; Exclusive OR accumulator with memory (long) $A42060.l [Writes: Accumulator] [Flags: NZ]
	inc $8A.b,X		; F6 8A ; Increment memory $8A.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $03BA.w,Y		; B9 BA 03 ; Load $03BA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $03B6.w,Y		; B9 B6 03 ; Load $03B6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $06.b		; 64 06 ; Store zero to $06.b
	lda $03C2.w,X		; BD C2 03 ; Load $03C2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $03BE.w,X		; BD BE 03 ; Load $03BE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $9FD1.w,X		; BD D1 9F ; Load $9FD1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $9FD3.w,X		; BD D3 9F ; Load $9FD3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $A051.w,X		; BD 51 A0 ; Load $A051.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $A052.w,X		; BD 52 A0 ; Load $A052.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $A7		; D0 A7 ; Branch if not equal to $D0, $A7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($02FF.w,X)		; FC FF 02 ; Jump to subroutine indirect indexed ($02FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A50004.l,X		; FF 04 00 A5 ; Subtract with carry (long,X) $A50004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($F0.b),Y		; 11 F0 ; OR accumulator with memory ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $82.b,S		; 03 82 ; OR accumulator with stack relative $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $0C5E.w,X		; DE 5E 0C ; Decrement memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	.db $82, $03, $01		; 82 03 01 ; Branch always long to $82, $03, $01 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0997DE.l		; 22 DE 97 09 ; Jump to subroutine long $0997DE.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A9.w,X		; 9D A9 03 ; Store accumulator to $03A9.w,X [Reads: Accumulator, X Index]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $3E		; B0 3E ; Branch if carry set to $B0, $3E [Flow: branch]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	.db $82, $D3, $00		; 82 D3 00 ; Branch always long to $82, $D3, $00 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03C5.w,X		; 9D C5 03 ; Store accumulator to $03C5.w,X [Reads: Accumulator, X Index]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A121.w,Y		; B9 21 A1 ; Load $A121.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0BFA.w,X		; 7D FA 0B ; Add $0BFA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $A122.w,Y		; B9 22 A1 ; Load $A122.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $0C0E.w,X		; 7D 0E 0C ; Add $0C0E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $A129.w,Y		; B9 29 A1 ; Load $A129.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C04.w,X		; 7D 04 0C ; Add $0C04.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $A12A.w,Y		; B9 2A A1 ; Load $A12A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $0C18.w,X		; 7D 18 0C ; Add $0C18.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	stz $0B88.w		; 9C 88 0B ; Store zero to $0B88.w
	.db $80, $58		; 80 58 ; Branch always to $80, $58 [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,Y		; F9 10 0D ; Subtract with carry $0D10.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,Y		; F9 00 0D ; Subtract with carry $0D00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F70.w,Y		; 79 70 0F ; Add $0F70.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03A9.w,X		; 9D A9 03 ; Store accumulator to $03A9.w,X [Reads: Accumulator, X Index]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$65.b		; C9 65 ; Compare #$65.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	lda $0D90.w,Y		; B9 90 0D ; Load $0D90.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E10.w,Y		; 99 10 0E ; Store accumulator to $0E10.w,Y [Reads: Y Index, Accumulator]
	sta $0F10.w		; 8D 10 0F ; Store accumulator to $0F10.w [Reads: Accumulator]
	lda $0B88.w		; AD 88 0B ; Load $0B88.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	inc $0B88.w		; EE 88 0B ; Increment $0B88.w [Flags: NZ]
	lda $0B88.w		; AD 88 0B ; Load $0B88.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Y Index, Accumulator]
	lda $0ED0.w,Y		; B9 D0 0E ; Load $0ED0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0ED0.w,Y		; 99 D0 0E ; Store accumulator to $0ED0.w,Y [Reads: Y Index, Accumulator]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EE0.w,Y		; 99 E0 0E ; Store accumulator to $0EE0.w,Y [Reads: Y Index, Accumulator]
	stz $0B88.w		; 9C 88 0B ; Store zero to $0B88.w
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $03C5.w,X		; BD C5 03 ; Load $03C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C04.w,X		; 7D 04 0C ; Add $0C04.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0BFA.w,X		; 7D FA 0B ; Add $0BFA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $82, $20, $01		; 82 20 01 ; Branch always long to $82, $20, $01 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldy $2A.b		; A4 2A ; Load $2A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $2A.b		; [PATTERN: Memory clearing operation] A4 2A ; Load $2A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	bit $2B.b		; 24 2B ; Test bits $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $2B.b		; 24 2B ; Test bits $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $FF.b		; A4 FF ; Load $FF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $FF242B.l,X		; FF 2B 24 FF ; Subtract with carry (long,X) $FF242B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF643D.l,X		; FF 3D 64 FF ; Subtract with carry (long,X) $FF643D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF243D.l,X		; FF 3D 24 FF ; Subtract with carry (long,X) $FF243D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2CA43C.l,X		; FF 3C A4 2C ; Subtract with carry (long,X) $2CA43C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $2A.b		; A4 2A ; Load $2A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $2C.b		; A4 2C ; Load $2C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx $3C.b		; E4 3C ; Compare $3C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $2A.b		; A4 2A ; Load $2A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $2C.b		; A4 2C ; Load $2C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $2A.b		; 24 2A ; Test bits $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $2C.b		; 24 2C ; Test bits $2C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $3C.b		; [PATTERN: Memory clearing operation] 64 3C ; Store zero to $3C.b
	bit $2A.b		; 24 2A ; Test bits $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	stz $3B.b		; [PATTERN: Memory clearing operation] 64 3B ; Store zero to $3B.b
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	cpx $3B.b		; E4 3B ; Compare $3B.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	cpx $3B.b		; E4 3B ; Compare $3B.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	cpx $2D.b		; E4 2D ; Compare $2D.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $2D.b		; A4 2D ; Load $2D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $3B.b		; A4 3B ; Load $3B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0008.l,X		; FF 08 00 FE ; Subtract with carry (long,X) $FE0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0008.l,X		; FF 08 00 FF ; Subtract with carry (long,X) $FF0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $F6.b		; A4 F6 ; Load $F6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $03C5.w,X		; BD C5 03 ; Load $03C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E6.b		; E5 E6 ; Subtract $E6.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E0.b		; E5 E0 ; Subtract $E0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $74.b		; 84 74 ; Store Y register to $74.b [Reads: Y Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $06.b		; 64 06 ; Store zero to $06.b
	lda $A24E.w,X		; BD 4E A2 ; Load $A24E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $A2AE.w,X		; BD AE A2 ; Load $A2AE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A2B0.w,X		; BD B0 A2 ; Load $A2B0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $A24F.w,X		; BD 4F A2 ; Load $A24F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$C1.b		; 29 C1 ; Logical AND #$C1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $74.b		; 05 74 ; Logical OR $74.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $B0, $FF		; 82 B0 FF ; Branch always long to $82, $B0, $FF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $80, $00		; 82 80 00 ; Branch always long to $82, $80, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $03A9.w,X		; BC A9 03 ; Load Y register $03A9.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $50		; 30 50 ; Branch if minus to $30, $50 [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $73		; 90 73 ; Branch if carry clear to $90, $73 [Flow: branch]
	lda $0F70.w,Y		; B9 70 0F ; Load $0F70.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $6E		; 30 6E ; Branch if minus to $30, $6E [Flow: branch]
	lda $0BA0.w,Y		; B9 A0 0B ; Load $0BA0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $69		; D0 69 ; Branch if not equal to $D0, $69 [Flow: branch]
	lda $0CAA.w,Y		; B9 AA 0C ; Load $0CAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $62		; D0 62 ; Branch if not equal to $D0, $62 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,Y		; 79 10 0D ; Add $0D10.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D00.w,Y		; 79 00 0D ; Add $0D00.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F70.w,Y		; F9 70 0F ; Subtract with carry $0F70.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	jmp $08A36E.l		; 5C 6E A3 08 ; Jump long to $08A36E.l [Flow: jump]
	.db $82, $FB, $40		; 82 FB 40 ; Branch always long to $82, $FB, $40 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $50		; 80 50 ; Branch always to $80, $50 [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	jsr $862A.w		; 20 2A 86 ; Jump to subroutine at $862A.w [Writes: Stack Pointer] [Flow: call]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $806F.w,Y		; B9 6F 80 ; Load $806F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	.db $82, $92, $DF		; 82 92 DF ; Branch always long to $82, $92, $DF [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $82, $20, $00		; 82 20 00 ; Branch always long to $82, $20, $00 [Flow: branch]
	cmp $24CF24.l		; CF 24 CF 24 ; Compare accumulator (long) $24CF24.l [Reads: Accumulator] [Flags: NCZ]
	cmp $24CF24.l		; CF 24 CF 24 ; Compare accumulator (long) $24CF24.l [Reads: Accumulator] [Flags: NCZ]
	cmp $24DF24.l,X		; DF 24 DF 24 ; Compare accumulator (long,X) $24DF24.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $24DF24.l,X		; DF 24 DF 24 ; Compare accumulator (long,X) $24DF24.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C90.w,X		; BD 90 0C ; Load $0C90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $04.b		; 64 04 ; Store zero to $04.b
.ACCU 16
	rep #$20		; C2 20
	lda $A561.w,X		; BD 61 A5 ; Load $A561.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $A562.w,X		; BD 62 A5 ; Load $A562.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$F0.b		; A2 F0 ; Load #$F0.b into X register [Writes: X Index] [Flags: NZ]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $A551.w,X		; BD 51 A5 ; Load $A551.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $A552.w,X		; BD 52 A5 ; Load $A552.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $8D, $FF		; 82 8D FF ; Branch always long to $82, $8D, $FF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $47		; F0 47 ; Branch if equal to $F0, $47 [Flow: branch]
	lda $7F0008.l,X		; BF 08 00 7F ; Load long $7F0008.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F0008.l,X		; 9F 08 00 7F ; Store accumulator (long,X) $7F0008.l,X [Reads: Accumulator, X Index]
	.db $D0, $39		; D0 39 ; Branch if not equal to $D0, $39 [Flow: branch]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldy #$0A.b		; A0 0A ; Load #$0A.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $099031.l		; 22 31 90 09 ; Jump to subroutine long $099031.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	sta $7F0008.l,X		; 9F 08 00 7F ; Store accumulator (long,X) $7F0008.l,X [Reads: Accumulator, X Index]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0008.l,X		; 9F 08 00 7F ; Store accumulator (long,X) $7F0008.l,X [Reads: Accumulator, X Index]
	.db $82, $A3, $00		; 82 A3 00 ; Branch always long to $82, $A3, $00 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $7F0008.l,X		; BF 08 00 7F ; Load long $7F0008.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	ldx $0380.w		; AE 80 03 ; Load $0380.w into X register [Writes: X Index] [Flags: NZ]
	lda $0C5E.w		; AD 5E 0C ; Load $0C5E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $81, $00		; 82 81 00 ; Branch always long to $82, $81, $00 [Flow: branch]
	sta $0C5E.w		; 8D 5E 0C ; Store accumulator to $0C5E.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0008.l,X		; 9F 08 00 7F ; Store accumulator (long,X) $7F0008.l,X [Reads: Accumulator, X Index]
	phx		; [PATTERN: Memory clearing operation] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $01.b		; 64 01 ; Store zero to $01.b
	stz $02.b		; [PATTERN: Memory clearing operation] 64 02 ; Store zero to $02.b
	stz $03.b		; 64 03 ; Store zero to $03.b
	stx $04.b		; 86 04 ; Store X register to $04.b [Reads: X Index]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F001C.l		; AF 1C 00 7F ; Load long $7F001C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b,X		; 95 01 ; Store accumulator to $01.b,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7F0020.l,X		; BF 20 00 7F ; Load long $7F0020.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $7F0020.l,X		; 9F 20 00 7F ; Store accumulator (long,X) $7F0020.l,X [Reads: Accumulator, X Index]
	lda $7F0030.l,X		; BF 30 00 7F ; Load long $7F0030.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $7F0030.l,X		; 9F 30 00 7F ; Store accumulator (long,X) $7F0030.l,X [Reads: Accumulator, X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $F624.w		; 20 24 F6 ; Jump to subroutine at $F624.w [Writes: Stack Pointer] [Flow: call]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $94		; 10 94 ; Branch if plus to $10, $94 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldx $0380.w		; AE 80 03 ; Load $0380.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7F0020.l,X		; BF 20 00 7F ; Load long $7F0020.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F0030.l,X		; BF 30 00 7F ; Load long $7F0030.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $A756.w		; 20 56 A7 ; Jump to subroutine at $A756.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	lda $0C5E.w		; AD 5E 0C ; Load $0C5E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; [PATTERN: Memory clearing operation] D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	stz $0C4A.w		; 9C 4A 0C ; Store zero to $0C4A.w
	stz $0C4B.w		; 9C 4B 0C ; Store zero to $0C4B.w
	stz $0112.w		; 9C 12 01 ; Store zero to $0112.w
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	stz $64.b		; 64 64 ; Store zero to $64.b
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9E93.w,Y		; B9 93 9E ; Load $9E93.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $954E.w,Y		; B9 4E 95 ; Load $954E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9E8A.w,Y		; B9 8A 9E ; Load $9E8A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; [PATTERN: Memory clearing operation] AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda #$32.b		; [PATTERN: Memory clearing operation] A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	stz $06.b		; 64 06 ; Store zero to $06.b
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A7AB.w		; 20 AB A7 ; Jump to subroutine at $A7AB.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9D10.w,X		; BD 10 9D ; Load $9D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $50		; F0 50 ; Branch if equal to $F0, $50 [Flow: branch]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	stz $74.b		; 64 74 ; Store zero to $74.b
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9D7C.w,X		; BD 7C 9D ; Load $9D7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $9D7E.w,X		; BD 7E 9D ; Load $9D7E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	jsr $F702.w		; 20 02 F7 ; Jump to subroutine at $F702.w [Writes: Stack Pointer] [Flow: call]
	lda $9D10.w,X		; BD 10 9D ; Load $9D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $9D11.w,X		; BD 11 9D ; Load $9D11.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$C1.b		; 29 C1 ; Logical AND #$C1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0B.b		; 05 0B ; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $72.b		; 84 72 ; Store Y register to $72.b [Reads: Y Index]
	stx $73.b		; 86 73 ; Store X register to $73.b [Reads: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9E54.w,X		; BD 54 9E ; Load $9E54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $73.b		; A6 73 ; Load $73.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $72.b		; A4 72 ; Load $72.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $08.b		; C5 08 ; Compare $08.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $9F		; D0 9F ; Branch if not equal to $D0, $9F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $A5AE.w		; AC AE A5 ; Load $A5AE.w into Y register [Writes: Y Index] [Flags: NZ]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $DE		; 42 DE ; Reserved instruction
	lda ($03.b),Y		; B1 03 ; Load accumulator ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	stz $03B1.w,X		; 9E B1 03 ; Store zero to $03B1.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FC.b		; 69 FC ; Add #$FC.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	cmp #$E8.b		; C9 E8 ; Compare #$E8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $01FFB6.l		; 22 B6 FF 01 ; Jump to subroutine long $01FFB6.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $A80D.w,X		; BD 0D A8 ; Load $A80D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	dec $72.b		; C6 72 ; Decrement $72.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $D4		; 10 D4 ; Branch if plus to $10, $D4 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $039F.w,X		; 9E 9F 03 ; Store zero to $039F.w,X [Reads: X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	stz $03B1.w,X		; 9E B1 03 ; Store zero to $03B1.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FC.b		; 69 FC ; Add #$FC.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	cmp #$E8.b		; C9 E8 ; Compare #$E8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $038A.w,X		; BD 8A 03 ; Load $038A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $038F.w,X		; BD 8F 03 ; Load $038F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F90A.w		; 20 0A F9 ; Jump to subroutine at $F90A.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $73.b		; 84 73 ; Store Y register to $73.b [Reads: Y Index]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $A8E3.w,X		; BD E3 A8 ; Load $A8E3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $73.b		; 05 73 ; Logical OR $73.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $FA00.w		; 20 00 FA ; Jump to subroutine at $FA00.w [Writes: Stack Pointer] [Flow: call]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	dec $72.b		; C6 72 ; Decrement $72.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $D2		; 10 D2 ; Branch if plus to $10, $D2 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F700.w		; 0D 00 F7 ; Logical OR $F700.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $40FFF5.l,X		; FF F5 FF 40 ; Subtract with carry (long,X) $40FFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	adc ($F6.b),Y		; 71 F6 ; Add with carry ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $A997.w,Y		; B9 97 A9 ; Load $A997.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A999.w,Y		; B9 99 A9 ; Load $A999.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $72.b		; 84 72 ; Store Y register to $72.b [Reads: Y Index]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A9A7.w,X		; BD A7 A9 ; Load $A9A7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $72.b		; 65 72 ; Add $72.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	inc $72.b		; E6 72 ; Increment $72.b [Reads: Direct Page] [Flags: NZ]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $CB		; D0 CB ; Branch if not equal to $D0, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $8D9C.w,X		; 9D 9C 8D ; Store accumulator to $8D9C.w,X [Reads: Accumulator, X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C22.w,X		; 7D 22 0C ; Add $0C22.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $7F0040.l,X		; BF 40 00 7F ; Load long $7F0040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F0040.l,X		; 9F 40 00 7F ; Store accumulator (long,X) $7F0040.l,X [Reads: Accumulator, X Index]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7F0040.l,X		; BF 40 00 7F ; Load long $7F0040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $AA32.w,Y		; B9 32 AA ; Load $AA32.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $B3, $00		; 82 B3 00 ; Branch always long to $82, $B3, $00 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	lda $031D.w		; AD 1D 03 ; Load $031D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	inc $0BF0.w,X		; FE F0 0B ; Increment memory $0BF0.w,X [Reads: X Index] [Flags: NZ]
	lda $0BF0.w,X		; BD F0 0B ; Load $0BF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	lda $031D.w		; AD 1D 03 ; Load $031D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED6D1.l		; 22 D1 D6 0E ; Jump to subroutine long $0ED6D1.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED757.l		; 22 57 D7 0E ; Jump to subroutine long $0ED757.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED83A.l		; 22 3A D8 0E ; Jump to subroutine long $0ED83A.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	dec $0C5E.w,X		; DE 5E 0C ; Decrement memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	.db $82, $E0, $00		; 82 E0 00 ; Branch always long to $82, $E0, $00 [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	.db $82, $15, $00		; 82 15 00 ; Branch always long to $82, $15, $00 [Flow: branch]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	.db $82, $60, $00		; 82 60 00 ; Branch always long to $82, $60, $00 [Flow: branch]
	lda $7F5812.l		; AF 12 58 7F ; Load long $7F5812.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5812.l		; 8F 12 58 7F ; Store accumulator (long) $7F5812.l [Reads: Accumulator]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	.db $82, $95, $00		; 82 95 00 ; Branch always long to $82, $95, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7F580C.l		; CF 0C 58 7F ; Compare accumulator (long) $7F580C.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	sta $7F580C.l		; 8F 0C 58 7F ; Store accumulator (long) $7F580C.l [Reads: Accumulator]
	inc $03C2.w,X		; FE C2 03 ; Increment memory $03C2.w,X [Reads: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$E000.w		; C9 00 E0 ; Compare #$E000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
	lda $7F580A.l		; AF 0A 58 7F ; Load long $7F580A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$E000.w		; C9 00 E0 ; Compare #$E000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda $7F580A.l		; AF 0A 58 7F ; Load long $7F580A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $E0, $02		; 82 E0 02 ; Branch always long to $82, $E0, $02 [Flow: branch]
	lda $03C2.w,X		; BD C2 03 ; Load $03C2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	dec $03C2.w,X		; DE C2 03 ; Decrement memory $03C2.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	.db $82, $C2, $02		; 82 C2 02 ; Branch always long to $82, $C2, $02 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; [PATTERN: Memory clearing operation] 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $031D.w		; AD 1D 03 ; Load $031D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $06EC5C.l		; 22 5C EC 06 ; Jump to subroutine long $06EC5C.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $82, $EE, $02		; 82 EE 02 ; Branch always long to $82, $EE, $02 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	ldy #$2A.b		; A0 2A ; Load #$2A.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	ldy #$AA.b		; A0 AA ; Load #$AA.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldy #$6A.b		; A0 6A ; Load #$6A.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $012F.w		; 8C 2F 01 ; Store Y register to $012F.w [Reads: Y Index]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	stz $0C18.w,X		; 9E 18 0C ; Store zero to $0C18.w,X [Reads: X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: NZ]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $ACED.w		; 20 ED AC ; Jump to subroutine at $ACED.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $ADC9.w		; 20 C9 AD ; Jump to subroutine at $ADC9.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $64		; D0 64 ; Branch if not equal to $D0, $64 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$21.b		; C0 21 ; Compare #$21.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F2		; [PATTERN: Memory clearing operation] D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	stz $0324.w		; 9C 24 03 ; Store zero to $0324.w
	stz $031C.w		; [PATTERN: Memory clearing operation] 9C 1C 03 ; Store zero to $031C.w
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $7EF2F0.l		; AF F0 F2 7E ; Load long $7EF2F0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F844.w		; 20 44 F8 ; Jump to subroutine at $F844.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $09		; [PATTERN: Memory clearing operation] 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04C6.w		; 8D C6 04 ; Store accumulator to $04C6.w [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$19.b		; C9 19 ; Compare #$19.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; [PATTERN: Memory clearing operation] 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sty $3A.b		; 84 3A ; Store Y register to $3A.b [Reads: Y Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0325.w		; 9C 25 03 ; Store zero to $0325.w
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED8FB.l		; 22 FB D8 0E ; Jump to subroutine long $0ED8FB.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 16
	rep #$20		; C2 20
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5810.l		; 6F 10 58 7F ; Add with carry (long) $7F5810.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F580E.l		; 6F 0E 58 7F ; Add with carry (long) $7F580E.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $ACEB.w,X		; BD EB AC ; Load $ACEB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; [PATTERN: Memory clearing operation] 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $42, $66		; 42 66 ; Reserved instruction
	stz $62.b		; 64 62 ; Store zero to $62.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $66.b		; 64 66 ; Store zero to $66.b
	.db $42, $40		; 42 40 ; Reserved instruction
	ror $64.b		; 66 64 ; Rotate right $64.b [Reads: Direct Page] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $66		; 62 64 66 ; Push effective relative address $62, $64, $66 [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $42, $68		; [PATTERN: Memory clearing operation] 42 68 ; Reserved instruction
	stz $68.b		; 64 68 ; Store zero to $68.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	stz $68.b		; 64 68 ; Store zero to $68.b
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ror $68.b		; 66 68 ; Rotate right $68.b [Reads: Direct Page] [Flags: NCZ]
	.db $62, $68, $64		; 62 68 64 ; Push effective relative address $62, $68, $64 [Writes: Stack Pointer]
	bit $FC3C.w,X		; 3C 3C FC ; Test bits $FC3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsr ($3C3C.w,X)		; FC 3C 3C ; Jump to subroutine indirect indexed ($3C3C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy $3CBC.w,X		; BC BC 3C ; Load Y register $3CBC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $7C3C.w,X		; 3C 3C 7C ; Test bits $7C3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jmp ($7C3C.w,X)		; 7C 3C 7C ; Jump indirect indexed to ($7C3C.w,X) [Reads: X Index] [Flow: jump]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldy $7C3C.w,X		; BC 3C 7C ; Load Y register $7C3C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	bit $3C7C.w,X		; 3C 7C 3C ; Test bits $3C7C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsr ($BC3C.w,X)		; FC 3C BC ; Jump to subroutine indirect indexed ($BC3C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $08BC.w,X		; 3C BC 08 ; Test bits $08BC.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E8FFF0.l,X		; FF F0 FF E8 ; Subtract with carry (long,X) $E8FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFF0.l,X		; FF F0 FF F8 ; Subtract with carry (long,X) $F8FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $08FFF0.l,X		; FF F0 FF 08 ; Subtract with carry (long,X) $08FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E8FFF0.l,X		; FF F0 FF E8 ; Subtract with carry (long,X) $E8FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFF0.l,X		; FF F0 FF F8 ; Subtract with carry (long,X) $F8FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E8FFF0.l,X		; FF F0 FF E8 ; Subtract with carry (long,X) $E8FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFF0.l,X		; FF F0 FF F8 ; Subtract with carry (long,X) $F8FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $080000.l,X		; FF 00 00 08 ; Subtract with carry (long,X) $080000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFF8.l,X		; FF F8 FF F0 ; Subtract with carry (long,X) $F0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFE8.l,X		; FF E8 FF F0 ; Subtract with carry (long,X) $F0FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $A55A.w		; 20 5A A5 ; Jump to subroutine at $A55A.w [Writes: Stack Pointer] [Flow: call]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $49.b		; 04 49 ; Test and set bits $49.b [Reads: Accumulator] [Flags: Z]
	sbc $851AFF.l,X		; FF FF 1A 85 ; Subtract with carry (long,X) $851AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5810.l		; 6F 10 58 7F ; Add with carry (long) $7F5810.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F8.b		; 69 F8 ; Add #$F8.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $E8E538.l,X		; FF 38 E5 E8 ; Subtract with carry (long,X) $E8E538.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $0A851A.l,X		; FF 1A 85 0A ; Subtract with carry (long,X) $0A851A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F580E.l		; 6F 0E 58 7F ; Add with carry (long) $7F580E.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F8.b		; 69 F8 ; Add #$F8.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $E2E538.l,X		; FF 38 E5 E2 ; Subtract with carry (long,X) $E2E538.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $AD49.w,X		; BD 49 AD ; Load $AD49.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $AD69.w,X		; BD 69 AD ; Load $AD69.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5810.l		; 6F 10 58 7F ; Add with carry (long) $7F5810.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AD89.w,X		; 7D 89 AD ; Add $AD89.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F580E.l		; 6F 0E 58 7F ; Add with carry (long) $7F580E.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $ADA9.w,X		; 7D A9 AD ; Add $ADA9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $AD4A.w,X		; BD 4A AD ; Load $AD4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $AD6A.w,X		; BD 6A AD ; Load $AD6A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $42, $44		; 42 44 ; Reserved instruction
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jmp $4E4C.w		; 4C 4C 4E ; Jump to $4E4C.w [Flow: jump]
	lsr $7C3C.w		; 4E 3C 7C ; Logical shift right $7C3C.w [Flags: NCZ]
	bit $3C7C.w,X		; 3C 7C 3C ; Test bits $3C7C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jmp ($7C3C.w,X)		; 7C 3C 7C ; Jump indirect indexed to ($7C3C.w,X) [Reads: X Index] [Flow: jump]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $08.b		; 64 08 ; Store zero to $08.b
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $03C2.w,X		; BD C2 03 ; Load $03C2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $AE73.w,X		; BD 73 AE ; Load $AE73.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $AE7F.w		; AD 7F AE ; Load $AE7F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7F5813.l		; AF 13 58 7F ; Load long $7F5813.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFF.w		; 69 FF FF ; Add #$FFFF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F5815.l		; AF 15 58 7F ; Load long $7F5815.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $08.b		; 64 08 ; Store zero to $08.b
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $AE77.w,X		; BD 77 AE ; Load $AE77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $AE7F.w,X		; BD 7F AE ; Load $AE7F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $B5		; 80 B5 ; Branch always to $80, $B5 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFF0.l,X		; FF F0 FF F0 ; Subtract with carry (long,X) $F0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FF80.l,X		; FF 80 FF 00 ; Subtract with carry (long,X) $00FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $F631.w		; 20 31 F6 ; Jump to subroutine at $F631.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $5B, $01		; 82 5B 01 ; Branch always long to $82, $5B, $01 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l		; 8F 00 58 7F ; Store accumulator (long) $7F5800.l [Reads: Accumulator]
	sta $7F5801.l		; 8F 01 58 7F ; Store accumulator (long) $7F5801.l [Reads: Accumulator]
	sta $7F5802.l		; 8F 02 58 7F ; Store accumulator (long) $7F5802.l [Reads: Accumulator]
	sta $7F5803.l		; 8F 03 58 7F ; Store accumulator (long) $7F5803.l [Reads: Accumulator]
	sta $7F5804.l		; 8F 04 58 7F ; Store accumulator (long) $7F5804.l [Reads: Accumulator]
	sta $7F5805.l		; 8F 05 58 7F ; Store accumulator (long) $7F5805.l [Reads: Accumulator]
	sta $7F5806.l		; 8F 06 58 7F ; Store accumulator (long) $7F5806.l [Reads: Accumulator]
	sta $7F5807.l		; 8F 07 58 7F ; Store accumulator (long) $7F5807.l [Reads: Accumulator]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	sta $7F5809.l		; 8F 09 58 7F ; Store accumulator (long) $7F5809.l [Reads: Accumulator]
	sta $7F5945.l		; 8F 45 59 7F ; Store accumulator (long) $7F5945.l [Reads: Accumulator]
	sta $7F5946.l		; 8F 46 59 7F ; Store accumulator (long) $7F5946.l [Reads: Accumulator]
	sta $7F5947.l		; 8F 47 59 7F ; Store accumulator (long) $7F5947.l [Reads: Accumulator]
	sta $7F5948.l		; 8F 48 59 7F ; Store accumulator (long) $7F5948.l [Reads: Accumulator]
	sta $7F5949.l		; 8F 49 59 7F ; Store accumulator (long) $7F5949.l [Reads: Accumulator]
	sta $7F594A.l		; 8F 4A 59 7F ; Store accumulator (long) $7F594A.l [Reads: Accumulator]
	sta $7F594B.l		; 8F 4B 59 7F ; Store accumulator (long) $7F594B.l [Reads: Accumulator]
	sta $7F594C.l		; 8F 4C 59 7F ; Store accumulator (long) $7F594C.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5810.l		; 8F 10 58 7F ; Store accumulator (long) $7F5810.l [Reads: Accumulator]
	sta $7F5811.l		; 8F 11 58 7F ; Store accumulator (long) $7F5811.l [Reads: Accumulator]
	sta $7F5812.l		; 8F 12 58 7F ; Store accumulator (long) $7F5812.l [Reads: Accumulator]
	sta $7F5813.l		; 8F 13 58 7F ; Store accumulator (long) $7F5813.l [Reads: Accumulator]
	sta $7F5814.l		; 8F 14 58 7F ; Store accumulator (long) $7F5814.l [Reads: Accumulator]
	sta $7F5815.l		; 8F 15 58 7F ; Store accumulator (long) $7F5815.l [Reads: Accumulator]
	sta $7F5816.l		; 8F 16 58 7F ; Store accumulator (long) $7F5816.l [Reads: Accumulator]
	sta $7F5817.l		; 8F 17 58 7F ; Store accumulator (long) $7F5817.l [Reads: Accumulator]
	sta $7F5818.l		; 8F 18 58 7F ; Store accumulator (long) $7F5818.l [Reads: Accumulator]
	sta $7F5819.l		; 8F 19 58 7F ; Store accumulator (long) $7F5819.l [Reads: Accumulator]
	sta $7F5935.l		; 8F 35 59 7F ; Store accumulator (long) $7F5935.l [Reads: Accumulator]
	sta $7F5936.l		; 8F 36 59 7F ; Store accumulator (long) $7F5936.l [Reads: Accumulator]
	sta $7F5937.l		; 8F 37 59 7F ; Store accumulator (long) $7F5937.l [Reads: Accumulator]
	sta $7F5938.l		; 8F 38 59 7F ; Store accumulator (long) $7F5938.l [Reads: Accumulator]
	sta $7F5939.l		; 8F 39 59 7F ; Store accumulator (long) $7F5939.l [Reads: Accumulator]
	sta $7F593A.l		; 8F 3A 59 7F ; Store accumulator (long) $7F593A.l [Reads: Accumulator]
	sta $7F593B.l		; 8F 3B 59 7F ; Store accumulator (long) $7F593B.l [Reads: Accumulator]
	sta $7F593C.l		; 8F 3C 59 7F ; Store accumulator (long) $7F593C.l [Reads: Accumulator]
	sta $7F5934.l		; 8F 34 59 7F ; Store accumulator (long) $7F5934.l [Reads: Accumulator]
	sta $7F5A56.l		; 8F 56 5A 7F ; Store accumulator (long) $7F5A56.l [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5A55.l		; 8F 55 5A 7F ; Store accumulator (long) $7F5A55.l [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5820.l		; 8F 20 58 7F ; Store accumulator (long) $7F5820.l [Reads: Accumulator]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AAA.w		; [PATTERN: Memory clearing operation] 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0112.w		; 8D 12 01 ; Store accumulator to $0112.w [Reads: Accumulator]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8007.w		; 20 07 80 ; Jump to subroutine at $8007.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $1A.b		; A4 1A ; Load $1A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5956.l		; 8F 56 59 7F ; Store accumulator (long) $7F5956.l [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F59D6.l		; 8F D6 59 7F ; Store accumulator (long) $7F59D6.l [Reads: Accumulator]
	lda $90FC.w,Y		; B9 FC 90 ; Load $90FC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5955.l		; 8F 55 59 7F ; Store accumulator (long) $7F5955.l [Reads: Accumulator]
	sta $7F59D5.l		; 8F D5 59 7F ; Store accumulator (long) $7F59D5.l [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AF56.w,X		; 7D 56 AF ; Add $AF56.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $7F5924.l,X		; 9F 24 59 7F ; Store accumulator (long,X) $7F5924.l,X [Reads: Accumulator, X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AF5E.w,X		; 7D 5E AF ; Add $AF5E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $7F592C.l,X		; 9F 2C 59 7F ; Store accumulator (long,X) $7F592C.l,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	sta $7F5A57.l		; 8F 57 5A 7F ; Store accumulator (long) $7F5A57.l [Reads: Accumulator]
	lda $7F5820.l,X		; BF 20 58 7F ; Load long $7F5820.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5924.l,X		; 7F 24 59 7F ; Add long $7F5924.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F592C.l,X		; 7F 2C 59 7F ; Add long $7F592C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5824.l,X		; 9F 24 58 7F ; Store accumulator (long,X) $7F5824.l,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5864.l,X		; 9F 64 58 7F ; Store accumulator (long,X) $7F5864.l,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F58A4.l,X		; 9F A4 58 7F ; Store accumulator (long,X) $7F58A4.l,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F58E4.l,X		; 9F E4 58 7F ; Store accumulator (long,X) $7F58E4.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $87		; 10 87 ; Branch if plus to $10, $87 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7F5934.l		; AF 34 59 7F ; Load long $7F5934.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $B10A.w		; 4C 0A B1 ; Jump to $B10A.w [Flow: jump]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B373.w		; 20 73 B3 ; Jump to subroutine at $B373.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7F5934.l		; AF 34 59 7F ; Load long $7F5934.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	jsr $B236.w		; 20 36 B2 ; Jump to subroutine at $B236.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr $B5E1.w		; 20 E1 B5 ; Jump to subroutine at $B5E1.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $B40D.w		; 4C 0D B4 ; Jump to $B40D.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7F5810.l,X		; BF 10 58 7F ; Load long $7F5810.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $F6, $00		; 82 F6 00 ; Branch always long to $82, $F6, $00 [Flow: branch]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $E5, $00		; 82 E5 00 ; Branch always long to $82, $E5, $00 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $7F5810.l,X		; BF 10 58 7F ; Load long $7F5810.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5810.l,X		; 9F 10 58 7F ; Store accumulator (long,X) $7F5810.l,X [Reads: Accumulator, X Index]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $DC		; F0 DC ; Branch if equal to $F0, $DC [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F5810.l,X		; BF 10 58 7F ; Load long $7F5810.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5810.l,X		; 9F 10 58 7F ; Store accumulator (long,X) $7F5810.l,X [Reads: Accumulator, X Index]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F5A57.l		; AF 57 5A 7F ; Load long $7F5A57.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$CF.b		; A9 CF ; Load #$CF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5A57.l		; 8F 57 5A 7F ; Store accumulator (long) $7F5A57.l [Reads: Accumulator]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F5820.l,X		; BF 20 58 7F ; Load long $7F5820.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7F5820.l,X		; 9F 20 58 7F ; Store accumulator (long,X) $7F5820.l,X [Reads: Accumulator, X Index]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5924.l,X		; 7F 24 59 7F ; Add long $7F5924.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F592C.l,X		; 7F 2C 59 7F ; Add long $7F592C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	ldx $74.b		; A6 74 ; Load $74.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5824.l,X		; 9F 24 58 7F ; Store accumulator (long,X) $7F5824.l,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5864.l,X		; 9F 64 58 7F ; Store accumulator (long,X) $7F5864.l,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F58A4.l,X		; 9F A4 58 7F ; Store accumulator (long,X) $7F58A4.l,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F58E4.l,X		; 9F E4 58 7F ; Store accumulator (long,X) $7F58E4.l,X [Reads: Accumulator, X Index]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $09968A.l,X		; BF 8A 96 09 ; Load long $09968A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$2A.b		; 09 2A ; Logical OR #$2A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $B373.w		; 20 73 B3 ; Jump to subroutine at $B373.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $F9, $FE		; 82 F9 FE ; Branch always long to $82, $F9, $FE [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $7F5820.l		; AF 20 58 7F ; Load long $7F5820.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5934.l		; 8F 34 59 7F ; Store accumulator (long) $7F5934.l [Reads: Accumulator]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $7F5810.l,X		; BF 10 58 7F ; Load long $7F5810.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5810.l,X		; 9F 10 58 7F ; Store accumulator (long,X) $7F5810.l,X [Reads: Accumulator, X Index]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5810.l,X		; 9F 10 58 7F ; Store accumulator (long,X) $7F5810.l,X [Reads: Accumulator, X Index]
	jsr $B373.w		; 20 73 B3 ; Jump to subroutine at $B373.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D6		; 10 D6 ; Branch if plus to $10, $D6 [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F5810.l,X		; BF 10 58 7F ; Load long $7F5810.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	stz $72.b		; 64 72 ; Store zero to $72.b
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5934.l		; 8F 34 59 7F ; Store accumulator (long) $7F5934.l [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $06EC5C.l		; 22 5C EC 06 ; Jump to subroutine long $06EC5C.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $4442FF.l,X		; FF FF 42 44 ; Subtract with carry (long,X) $4442FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF4442.l,X		; FF 42 44 FF ; Subtract with carry (long,X) $FF4442.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $44		; 42 44 ; Reserved instruction
	sbc $FF4442.l,X		; FF 42 44 FF ; Subtract with carry (long,X) $FF4442.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jmp $4A4C.w		; 4C 4C 4A ; Jump to $4A4C.w [Flow: jump]
	lsr $4A4C.w		; 4E 4C 4A ; Logical shift right $4A4C.w [Flags: NCZ]
	lsr $4C6A.w		; 4E 6A 4C ; Logical shift right $4C6A.w [Flags: NCZ]
	lsr $FF68.w		; 4E 68 FF ; Logical shift right $FF68.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $FF4EFF.l,X		; FF FF 4E FF ; Subtract with carry (long,X) $FF4EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF3C.l,X		; FF 3C FF FF ; Subtract with carry (long,X) $FFFF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $FF3C.w,X		; 3C 3C FF ; Test bits $FF3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $FF3C.w,X		; 3C 3C FF ; Test bits $FF3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jmp ($FF7C.w,X)		; 7C 7C FF ; Jump indirect indexed to ($FF7C.w,X) [Reads: X Index] [Flow: jump]
	bit $FF7C.w,X		; 3C 7C FF ; Test bits $FF7C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldy $3C3C.w,X		; BC 3C 3C ; Load Y register $3C3C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jmp ($3C3C.w,X)		; 7C 3C 3C ; Jump indirect indexed to ($3C3C.w,X) [Reads: X Index] [Flow: jump]
	bit $7C3C.w,X		; 3C 3C 7C ; Test bits $7C3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $FF3C.w,X		; 3C 3C FF ; Test bits $FF3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $FFFF.w,X		; 3C FF FF ; Test bits $FFFF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $FFFF.w,X		; 3C FF FF ; Test bits $FFFF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFEC.l,X		; FF EC FF 00 ; Subtract with carry (long,X) $00FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFE8.l,X		; FF E8 FF 00 ; Subtract with carry (long,X) $00FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFE4.l,X		; FF E4 FF 00 ; Subtract with carry (long,X) $00FFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFE0.l,X		; FF E0 FF 00 ; Subtract with carry (long,X) $00FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EEFFE0.l,X		; FF E0 FF EE ; Subtract with carry (long,X) $EEFFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFDE.l,X		; FF DE FF FF ; Subtract with carry (long,X) $FFFFDE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFDD.l,X		; FF DD FF FF ; Subtract with carry (long,X) $FFFFDD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DCFFFF.l,X		; FF FF FF DC ; Subtract with carry (long,X) $DCFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0001.l,X		; FF 01 00 FF ; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FFFF.l,X		; FF FF FF 02 ; Subtract with carry (long,X) $02FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFFF.l,X		; FF FF FF 8A ; Subtract with carry (long,X) $8AFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $7F5810.l,X		; BF 10 58 7F ; Load long $7F5810.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $76		; F0 76 ; Branch if equal to $F0, $76 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5810.l,X		; 7F 10 58 7F ; Add long $7F5810.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $08.b		; 64 08 ; Store zero to $08.b
	lda $B289.w,X		; BD 89 B2 ; Load $B289.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $57		; F0 57 ; Branch if equal to $F0, $57 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $75.b		; A6 75 ; Load $75.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F5824.l,X		; BF 24 58 7F ; Load long $7F5824.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F5864.l,X		; BF 64 58 7F ; Load long $7F5864.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7F58A4.l,X		; BF A4 58 7F ; Load long $7F58A4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7F58E4.l,X		; BF E4 58 7F ; Load long $7F58E4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B2D7.w,X		; 7D D7 B2 ; Add $B2D7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B325.w,X		; 7D 25 B3 ; Add $B325.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $B289.w,X		; BD 89 B2 ; Load $B289.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $B2B0.w,X		; BD B0 B2 ; Load $B2B0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $96		; D0 96 ; Branch if not equal to $D0, $96 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $74, $FF		; 82 74 FF ; Branch always long to $82, $74, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F5935.l,X		; BF 35 59 7F ; Load long $7F5935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $7F5945.l,X		; BF 45 59 7F ; Load long $7F5945.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5945.l,X		; 9F 45 59 7F ; Store accumulator (long,X) $7F5945.l,X [Reads: Accumulator, X Index]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $8C, $00		; 82 8C 00 ; Branch always long to $82, $8C, $00 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5945.l,X		; 9F 45 59 7F ; Store accumulator (long,X) $7F5945.l,X [Reads: Accumulator, X Index]
	lda $7F5935.l,X		; BF 35 59 7F ; Load long $7F5935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5935.l,X		; 9F 35 59 7F ; Store accumulator (long,X) $7F5935.l,X [Reads: Accumulator, X Index]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $EA		; D0 EA ; Branch if not equal to $D0, $EA [Flow: branch]
	lda $7F5A56.l		; AF 56 5A 7F ; Load long $7F5A56.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E4		; D0 E4 ; Branch if not equal to $D0, $E4 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F5935.l,X		; BF 35 59 7F ; Load long $7F5935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5935.l,X		; 9F 35 59 7F ; Store accumulator (long,X) $7F5935.l,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5945.l,X		; 9F 45 59 7F ; Store accumulator (long,X) $7F5945.l,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0FFB7A.l,X		; BF 7A FB 0F ; Load long $0FFB7A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; [PATTERN: Memory clearing operation] 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0FFB7D.l,X		; BF 7D FB 0F ; Load long $0FFB7D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $7F5955.l,X		; 9F 55 59 7F ; Store accumulator (long,X) $7F5955.l,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $7F59D5.l,X		; 9F D5 59 7F ; Store accumulator (long,X) $7F59D5.l,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	lda $7F59D5.l,X		; BF D5 59 7F ; Load long $7F59D5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $09968A.l,X		; BF 8A 96 09 ; Load long $09968A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $B5E1.w		; 20 E1 B5 ; Jump to subroutine at $B5E1.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $55, $FF		; 82 55 FF ; Branch always long to $82, $55, $FF [Flow: branch]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F5935.l,X		; BF 35 59 7F ; Load long $7F5935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	stz $0324.w		; 9C 24 03 ; Store zero to $0324.w
	stz $031C.w		; [PATTERN: Memory clearing operation] 9C 1C 03 ; Store zero to $031C.w
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$1A.b		; C9 1A ; Compare #$1A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; [PATTERN: Memory clearing operation] 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sty $3A.b		; 84 3A ; Store Y register to $3A.b [Reads: Y Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0325.w		; 9C 25 03 ; Store zero to $0325.w
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	lda $7F5A55.l		; AF 55 5A 7F ; Load long $7F5A55.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5A55.l		; 8F 55 5A 7F ; Store accumulator (long) $7F5A55.l [Reads: Accumulator]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5A56.l		; 8F 56 5A 7F ; Store accumulator (long) $7F5A56.l [Reads: Accumulator]
	sta $7F5A55.l		; 8F 55 5A 7F ; Store accumulator (long) $7F5A55.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $62FFFF.l,X		; FF FF FF 62 ; Subtract with carry (long,X) $62FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	stz $64.b		; 64 64 ; Store zero to $64.b
	stz $64.b		; 64 64 ; Store zero to $64.b
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: NCZ]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: NCZ]
	lsr $FF3C.w		; 4E 3C FF ; Logical shift right $FF3C.w [Flags: NCZ]
	sbc $7C3CFF.l,X		; FF FF 3C 7C ; Subtract with carry (long,X) $7C3CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $3CFC.w,X		; BC FC 3C ; Load Y register $3CFC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jmp ($FCBC.w,X)		; 7C BC FC ; Jump indirect indexed to ($FCBC.w,X) [Reads: X Index] [Flow: jump]
	bit $BC7C.w,X		; 3C 7C BC ; Test bits $BC7C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsr ($7C3C.w,X)		; FC 3C 7C ; Jump to subroutine indirect indexed ($7C3C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy $3CFC.w,X		; BC FC 3C ; Load Y register $3CFC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jmp ($FCBC.w,X)		; 7C BC FC ; Jump indirect indexed to ($FCBC.w,X) [Reads: X Index] [Flow: jump]
	bit $BC7C.w,X		; 3C 7C BC ; Test bits $BC7C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsr ($7C3C.w,X)		; FC 3C 7C ; Jump to subroutine indirect indexed ($7C3C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy $F8FC.w,X		; BC FC F8 ; Load Y register $F8FC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFF.l,X		; FF FF FF F4 ; Subtract with carry (long,X) $F4FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFFF4.l,X		; FF F4 FF FC ; Subtract with carry (long,X) $FCFFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFC.l,X		; FF FC FF F0 ; Subtract with carry (long,X) $F0FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFF0.l,X		; FF F0 FF 00 ; Subtract with carry (long,X) $00FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF0.l,X		; FF F0 FF 00 ; Subtract with carry (long,X) $00FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01FFEF.l,X		; FF EF FF 01 ; Subtract with carry (long,X) $01FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FFED.l,X		; FF ED FF 03 ; Subtract with carry (long,X) $03FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FFED.l,X		; FF ED FF 03 ; Subtract with carry (long,X) $03FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FFED.l,X		; FF ED FF 03 ; Subtract with carry (long,X) $03FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFF.l,X		; FF FF FF F4 ; Subtract with carry (long,X) $F4FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFC.l,X		; FF FC FF F4 ; Subtract with carry (long,X) $F4FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFC.l,X		; FF FC FF F0 ; Subtract with carry (long,X) $F0FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F00000.l,X		; FF 00 00 F0 ; Subtract with carry (long,X) $F00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F00000.l,X		; FF 00 00 F0 ; Subtract with carry (long,X) $F00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F00000.l,X		; FF 00 00 F0 ; Subtract with carry (long,X) $F00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EF0000.l,X		; FF 00 00 EF ; Subtract with carry (long,X) $EF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EF0001.l,X		; FF 01 00 EF ; Subtract with carry (long,X) $EF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ED0001.l,X		; FF 01 00 ED ; Subtract with carry (long,X) $ED0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ED0003.l,X		; FF 03 00 ED ; Subtract with carry (long,X) $ED0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ED0003.l,X		; FF 03 00 ED ; Subtract with carry (long,X) $ED0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ED0003.l,X		; FF 03 00 ED ; Subtract with carry (long,X) $ED0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ED0003.l,X		; FF 03 00 ED ; Subtract with carry (long,X) $ED0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ED0003.l,X		; FF 03 00 ED ; Subtract with carry (long,X) $ED0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DA0003.l,X		; FF 03 00 DA ; Subtract with carry (long,X) $DA0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F5955.l,X		; BF 55 59 7F ; Load long $7F5955.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F5956.l,X		; BF 56 59 7F ; Load long $7F5956.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $7F59D5.l,X		; BF D5 59 7F ; Load long $7F59D5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $7F59D6.l,X		; BF D6 59 7F ; Load long $7F59D6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $7F5935.l,X		; BF 35 59 7F ; Load long $7F5935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $5D		; F0 5D ; Branch if equal to $F0, $5D [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7F5935.l,X		; BF 35 59 7F ; Load long $7F5935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $B521.w,X		; BD 21 B5 ; Load $B521.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $B561.w,X		; BD 61 B5 ; Load $B561.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $B5A1.w,X		; BD A1 B5 ; Load $B5A1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $B521.w,X		; BD 21 B5 ; Load $B521.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $B541.w,X		; BD 41 B5 ; Load $B541.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $B6		; 10 B6 ; Branch if plus to $10, $B6 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	jsr $B6F7.w		; 20 F7 B6 ; Jump to subroutine at $B6F7.w [Writes: Stack Pointer] [Flow: call]
	jsr $B718.w		; 20 18 B7 ; Jump to subroutine at $B718.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $D1, $01		; 82 D1 01 ; Branch always long to $82, $D1, $01 [Flow: branch]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F5805.l,X		; BF 05 58 7F ; Load long $7F5805.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B713.w,X		; DD 13 B7 ; Compare accumulator $B713.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $B793.w		; 20 93 B7 ; Jump to subroutine at $B793.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $06EC5C.l		; 22 5C EC 06 ; Jump to subroutine long $06EC5C.l [Writes: Stack Pointer] [Flow: call]
	jsl $0680FA.l		; 22 FA 80 06 ; Jump to subroutine long $0680FA.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; [PATTERN: Memory clearing operation] 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	stz $0324.w		; 9C 24 03 ; Store zero to $0324.w
	stz $031C.w		; 9C 1C 03 ; Store zero to $031C.w
	stz $031D.w		; [PATTERN: Memory clearing operation] 9C 1D 03 ; Store zero to $031D.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011B.w		; [PATTERN: Memory clearing operation] 9C 1B 01 ; Store zero to $011B.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $7EF2C7.l		; AF C7 F2 7E ; Load long $7EF2C7.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F844.w		; 20 44 F8 ; Jump to subroutine at $F844.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $09		; [PATTERN: Memory clearing operation] 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04C6.w		; 8D C6 04 ; Store accumulator to $04C6.w [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; [PATTERN: Memory clearing operation] 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sty $3A.b		; 84 3A ; Store Y register to $3A.b [Reads: Y Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0325.w		; 9C 25 03 ; Store zero to $0325.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7F581E.l		; AF 1E 58 7F ; Load long $7F581E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F581E.l		; 8F 1E 58 7F ; Store accumulator (long) $7F581E.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $DA		; 10 DA ; Branch if plus to $10, $DA [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F580F.l		; 8F 0F 58 7F ; Store accumulator (long) $7F580F.l [Reads: Accumulator]
	lda $7F580A.l		; AF 0A 58 7F ; Load long $7F580A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F5805.l,X		; BF 05 58 7F ; Load long $7F5805.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B713.w,X		; DD 13 B7 ; Compare accumulator $B713.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $54		; F0 54 ; Branch if equal to $F0, $54 [Flow: branch]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	.db $10, $46		; 10 46 ; Branch if plus to $10, $46 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $7F5805.l,X		; BF 05 58 7F ; Load long $7F5805.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5805.l,X		; 9F 05 58 7F ; Store accumulator (long,X) $7F5805.l,X [Reads: Accumulator, X Index]
	cmp $B713.w,X		; DD 13 B7 ; Compare accumulator $B713.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8007.w		; 20 07 80 ; Jump to subroutine at $8007.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F580A.l		; 8F 0A 58 7F ; Store accumulator (long) $7F580A.l [Reads: Accumulator]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F580A.l		; 8F 0A 58 7F ; Store accumulator (long) $7F580A.l [Reads: Accumulator]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F580F.l		; 8F 0F 58 7F ; Store accumulator (long) $7F580F.l [Reads: Accumulator]
	jsr $B793.w		; 20 93 B7 ; Jump to subroutine at $B793.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $A0		; 10 A0 ; Branch if plus to $10, $A0 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $7F580F.l		; AF 0F 58 7F ; Load long $7F580F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $05BFDA.l		; 2F DA BF 05 ; AND accumulator with memory (long) $05BFDA.l [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $8E7D18.l,X		; 7F 18 7D 8E ; Add long $8E7D18.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$0A.b],Y		; B7 0A ; Load accumulator (long indexed) [$0A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $FEEA.w,Y		; B9 EA FE ; Load $FEEA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $FEEB.w,Y		; B9 EB FE ; Load $FEEB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $FEEC.w,Y		; B9 EC FE ; Load $FEEC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $FEED.w,Y		; B9 ED FE ; Load $FEED.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7F580D.l		; AF 0D 58 7F ; Load long $7F580D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F580B.l		; AF 0B 58 7F ; Load long $7F580B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$F0.b		; A2 F0 ; Load #$F0.b into X register [Writes: X Index] [Flags: NZ]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $B873.w,X		; BD 73 B8 ; Load $B873.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$3C.b		; 09 3C ; Logical OR #$3C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $74.b		; E4 74 ; Compare $74.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $72, $FF		; 82 72 FF ; Branch always long to $82, $72, $FF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$37.b		; C9 37 ; Compare #$37.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $42, $44		; 42 44 ; Reserved instruction
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jmp $604E.w		; 4C 4E 60 ; Jump to $604E.w [Flow: jump]
	.db $62, $64, $66		; 62 64 66 ; Push effective relative address $62, $64, $66 [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $DA.b,S		; 63 DA ; Add with carry (stack relative) $DA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $FF6A.w,Y		; B9 6A FF ; Load $FF6A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $FF6B.w,Y		; B9 6B FF ; Load $FF6B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $FF6C.w,Y		; B9 6C FF ; Load $FF6C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $FF6D.w,Y		; B9 6D FF ; Load $FF6D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $B873.w,X		; BD 73 B8 ; Load $B873.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$3C.b		; 09 3C ; Logical OR #$3C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $90.b		; E6 90 ; Increment $90.b [Reads: Direct Page] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: NZ]
	jsr $F9BA.w		; 20 BA F9 ; Jump to subroutine at $F9BA.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $74.b		; E4 74 ; Compare $74.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $D0, $B7		; D0 B7 ; Branch if not equal to $D0, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0F0E.w		; 0D 0E 0F ; Logical OR $0F0E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0100.w		; 0C 00 01 ; Test and set bits $0100.w [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: NCZ]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	cpx $F1FF.w		; EC FF F1 ; Compare $F1FF.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $F9FFF3.l,X		; FF F3 FF F9 ; Subtract with carry (long,X) $F9FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFEE.l,X		; FF EE FF F3 ; Subtract with carry (long,X) $F3FFEE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFF3.l,X		; FF F3 FF F3 ; Subtract with carry (long,X) $F3FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFEC.l,X		; FF EC FF F3 ; Subtract with carry (long,X) $F3FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFF3.l,X		; FF F3 FF F8 ; Subtract with carry (long,X) $F8FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFEC.l,X		; FF EC FF F3 ; Subtract with carry (long,X) $F3FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFF3.l,X		; FF F3 FF F8 ; Subtract with carry (long,X) $F8FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFED.l,X		; FF ED FF F4 ; Subtract with carry (long,X) $F4FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9FFF4.l,X		; FF F4 FF F9 ; Subtract with carry (long,X) $F9FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F5FFEE.l,X		; FF EE FF F5 ; Subtract with carry (long,X) $F5FFEE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FAFFF5.l,X		; FF F5 FF FA ; Subtract with carry (long,X) $FAFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F6FFEF.l,X		; FF EF FF F6 ; Subtract with carry (long,X) $F6FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFFF6.l,X		; FF F6 FF FB ; Subtract with carry (long,X) $FBFFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F2FFF0.l,X		; FF F0 FF F2 ; Subtract with carry (long,X) $F2FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F7FFF4.l,X		; FF F4 FF F7 ; Subtract with carry (long,X) $F7FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F2FFEF.l,X		; FF EF FF F2 ; Subtract with carry (long,X) $F2FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFF4.l,X		; FF F4 FF F8 ; Subtract with carry (long,X) $F8FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F2FFEE.l,X		; FF EE FF F2 ; Subtract with carry (long,X) $F2FFEE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FAFFF3.l,X		; FF F3 FF FA ; Subtract with carry (long,X) $FAFFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E1FFDF.l,X		; FF DF FF E1 ; Subtract with carry (long,X) $E1FFDF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E6FFE3.l,X		; FF E3 FF E6 ; Subtract with carry (long,X) $E6FFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E7FFE4.l,X		; FF E4 FF E7 ; Subtract with carry (long,X) $E7FFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EDFFE9.l,X		; FF E9 FF ED ; Subtract with carry (long,X) $EDFFE9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EEFFEA.l,X		; FF EA FF EE ; Subtract with carry (long,X) $EEFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F6FFEF.l,X		; FF EF FF F6 ; Subtract with carry (long,X) $F6FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFE.l,X		; FF FE FF 00 ; Subtract with carry (long,X) $00FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFFFA.l,X		; FF FA FF FC ; Subtract with carry (long,X) $FCFFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F00000.l,X		; FF 00 00 F0 ; Subtract with carry (long,X) $F00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F5FFF4.l,X		; FF F4 FF F5 ; Subtract with carry (long,X) $F5FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFC.l,X		; FF FC FF F0 ; Subtract with carry (long,X) $F0FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFF2.l,X		; FF F2 FF F4 ; Subtract with carry (long,X) $F4FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EFFFF7.l,X		; FF F7 FF EF ; Subtract with carry (long,X) $EFFFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFF2.l,X		; FF F2 FF F4 ; Subtract with carry (long,X) $F4FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EEFFF8.l,X		; FF F8 FF EE ; Subtract with carry (long,X) $EEFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFF2.l,X		; FF F2 FF F3 ; Subtract with carry (long,X) $F3FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFFFA.l,X		; FF FA FF FB ; Subtract with carry (long,X) $FBFFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FFF4.l,X		; FF F4 FF 02 ; Subtract with carry (long,X) $02FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F6FFF9.l,X		; FF F9 FF F6 ; Subtract with carry (long,X) $F6FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFFFA.l,X		; FF FA FF FE ; Subtract with carry (long,X) $FEFFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFA.l,X		; FF FA FF F4 ; Subtract with carry (long,X) $F4FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0001.l,X		; FF 01 00 FA ; Subtract with carry (long,X) $FA0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFA.l,X		; FF FA FF F4 ; Subtract with carry (long,X) $F4FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0001.l,X		; FF 01 00 FA ; Subtract with carry (long,X) $FA0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFA.l,X		; FF FA FF F4 ; Subtract with carry (long,X) $F4FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0001.l,X		; FF 01 00 FA ; Subtract with carry (long,X) $FA0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFA.l,X		; FF FA FF F4 ; Subtract with carry (long,X) $F4FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0001.l,X		; FF 01 00 FA ; Subtract with carry (long,X) $FA0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4FFFA.l,X		; FF FA FF F4 ; Subtract with carry (long,X) $F4FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0001.l,X		; FF 01 00 FA ; Subtract with carry (long,X) $FA0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E9FFEF.l,X		; FF EF FF E9 ; Subtract with carry (long,X) $E9FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EDFFF2.l,X		; FF F2 FF ED ; Subtract with carry (long,X) $EDFFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EEFFF5.l,X		; FF F5 FF EE ; Subtract with carry (long,X) $EEFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFF7.l,X		; FF F7 FF F3 ; Subtract with carry (long,X) $F3FFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFFC.l,X		; FF FC FF F3 ; Subtract with carry (long,X) $F3FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFFF.l,X		; FF FF FF F8 ; Subtract with carry (long,X) $F8FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F7FFFD.l,X		; FF FD FF F7 ; Subtract with carry (long,X) $F7FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FB0000.l,X		; FF 00 00 FB ; Subtract with carry (long,X) $FB0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F6FFFD.l,X		; FF FD FF F6 ; Subtract with carry (long,X) $F6FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFFFF.l,X		; FF FF FF FB ; Subtract with carry (long,X) $FBFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFFC.l,X		; FF FC FF F3 ; Subtract with carry (long,X) $F3FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFFF.l,X		; FF FF FF F8 ; Subtract with carry (long,X) $F8FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F7FFFD.l,X		; FF FD FF F7 ; Subtract with carry (long,X) $F7FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FB0000.l,X		; FF 00 00 FB ; Subtract with carry (long,X) $FB0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F6FFFD.l,X		; FF FD FF F6 ; Subtract with carry (long,X) $F6FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFFFF.l,X		; FF FF FF FB ; Subtract with carry (long,X) $FBFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFFD.l,X		; FF FD FF F3 ; Subtract with carry (long,X) $F3FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFFF.l,X		; FF FF FF F8 ; Subtract with carry (long,X) $F8FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0F0009.l,X		; FF 09 00 0F ; Subtract with carry (long,X) $0F0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F90005.l,X		; FF 05 00 F9 ; Subtract with carry (long,X) $F90005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $090000.l,X		; FF 00 00 09 ; Subtract with carry (long,X) $090000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$68.b		; 09 68 ; Logical OR #$68.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
.ACCU 8
	sep #$28		; E2 28
	ldy $68.b		; A4 68 ; Load $68.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$A4		; E2 A4
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jsl $62E8A4.l		; 22 A4 E8 62 ; Jump to subroutine long $62E8A4.l [Writes: Stack Pointer] [Flow: call]
	bit $A8.b		; 24 A8 ; Test bits $A8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
.ACCU 8
	sep #$64		; E2 64
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldx #$E4.b		; A2 E4 ; Load #$E4.b into X register [Writes: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsl $62E8A4.l		; 22 A4 E8 62 ; Jump to subroutine long $62E8A4.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$A4		; E2 A4
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stz $E8.b		; 64 E8 ; Store zero to $E8.b
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpx $62.b		; E4 62 ; Compare $62.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $A8.b		; E4 A8 ; Compare $A8.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
.ACCU 8
	sep #$68		; E2 68
.ACCU 8
	sep #$A4		; E2 A4
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stz $E8.b		; 64 E8 ; Store zero to $E8.b
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpx $62.b		; E4 62 ; Compare $62.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $A8.b		; E4 A8 ; Compare $A8.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
.ACCU 8
	sep #$68		; E2 68
.ACCU 8
	sep #$A4		; E2 A4
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stz $E8.b		; 64 E8 ; Store zero to $E8.b
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpx $62.b		; E4 62 ; Compare $62.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $A8.b		; E4 A8 ; Compare $A8.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
.ACCU 8
	sep #$68		; E2 68
.ACCU 8
	sep #$A4		; E2 A4
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stz $E8.b		; 64 E8 ; Store zero to $E8.b
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpx $62.b		; E4 62 ; Compare $62.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $A8.b		; E4 A8 ; Compare $A8.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
.ACCU 8
	sep #$68		; E2 68
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	jsr $BB58.w		; 20 58 BB ; Jump to subroutine at $BB58.w [Writes: Stack Pointer] [Flow: call]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $29		; 10 29 ; Branch if plus to $10, $29 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	ldy $0C72.w,X		; BC 72 0C ; Load Y register $0C72.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $B91C.w,Y		; B9 1C B9 ; Load $B91C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; [PATTERN: Memory clearing operation] 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $0333.w		; 9C 33 03 ; Store zero to $0333.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $B8F4.w,Y		; B9 F4 B8 ; Load $B8F4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03C2.w,X		; 9D C2 03 ; Store accumulator to $03C2.w,X [Reads: Accumulator, X Index]
	lda $0C90.w,X		; BD 90 0C ; Load $0C90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $F90A.w		; 20 0A F9 ; Jump to subroutine at $F90A.w [Writes: Stack Pointer] [Flow: call]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $03C2.w,X		; BD C2 03 ; Load $03C2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0072.w		; 8D 72 00 ; Store accumulator to $0072.w [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B920.w,X		; 7D 20 B9 ; Add $B920.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B9B8.w,X		; 7D B8 B9 ; Add $B9B8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $BA50.w,X		; BD 50 BA ; Load $BA50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $BA64.w,X		; BD 64 BA ; Load $BA64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	inc $0A.b		; E6 0A ; Increment $0A.b [Reads: Direct Page] [Flags: NZ]
	dec $72.b		; C6 72 ; Decrement $72.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $BC		; 10 BC ; Branch if plus to $10, $BC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $57		; D0 57 ; Branch if not equal to $D0, $57 [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	lda $0CD2.w,Y		; B9 D2 0C ; Load $0CD2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $49		; D0 49 ; Branch if not equal to $D0, $49 [Flow: branch]
	jsr $E2CA.w		; 20 CA E2 ; Jump to subroutine at $E2CA.w [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $0683EA.l		; 22 EA 83 06 ; Jump to subroutine long $0683EA.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsl $0683E6.l		; 22 E6 83 06 ; Jump to subroutine long $0683E6.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $37		; 90 37 ; Branch if carry clear to $90, $37 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0EB0.w,Y		; B9 B0 0E ; Load $0EB0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Y Index, Accumulator]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $05AB9C.l		; 22 9C AB 05 ; Jump to subroutine long $05AB9C.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $06ECE0.l		; 22 E0 EC 06 ; Jump to subroutine long $06ECE0.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $9F		; 10 9F ; Branch if plus to $10, $9F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $31		; [PATTERN: Memory clearing operation] D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	dec $0C5E.w,X		; DE 5E 0C ; Decrement memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011B.w		; 9C 1B 01 ; Store zero to $011B.w
	stz $011C.w		; [PATTERN: Memory clearing operation] 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0FFAFE.l		; 22 FE FA 0F ; Jump to subroutine long $0FFAFE.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $011A.w,Y		; 99 1A 01 ; Store accumulator to $011A.w,Y [Reads: Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $011B.w,Y		; 99 1B 01 ; Store accumulator to $011B.w,Y [Reads: Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0030.w,Y		; B9 30 00 ; Load $0030.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0030.w,Y		; 99 30 00 ; Store accumulator to $0030.w,Y [Reads: Y Index, Accumulator]
	.db $82, $C5, $CE		; 82 C5 CE ; Branch always long to $82, $C5, $CE [Flow: branch]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFFFD.l,X		; FF FD FF FE ; Subtract with carry (long,X) $FEFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FD0000.l,X		; FF 00 00 FD ; Subtract with carry (long,X) $FD0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFD.l,X		; FF FD FF FF ; Subtract with carry (long,X) $FFFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFFFF.l,X		; FF FF FF FE ; Subtract with carry (long,X) $FEFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFE.l,X		; FF FE FF 00 ; Subtract with carry (long,X) $00FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFFFD.l,X		; FF FD FF FE ; Subtract with carry (long,X) $FEFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FD0000.l,X		; FF 00 00 FD ; Subtract with carry (long,X) $FD0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFD.l,X		; FF FD FF FF ; Subtract with carry (long,X) $FFFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFFFF.l,X		; FF FF FF FE ; Subtract with carry (long,X) $FEFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $05000A.l,X		; FF 0A 00 05 ; Subtract with carry (long,X) $05000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0A0000.l,X		; FF 00 00 0A ; Subtract with carry (long,X) $0A0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0AFFFF.l,X		; FF FF FF 0A ; Subtract with carry (long,X) $0AFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0A0000.l,X		; FF 00 00 0A ; Subtract with carry (long,X) $0A0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CFFFFF.l,X		; FF FF FF CF ; Subtract with carry (long,X) $CFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$DF.b		; A9 DF ; Load #$DF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $FFDFCF.l		; CF CF DF FF ; Compare accumulator (long) $FFDFCF.l [Reads: Accumulator] [Flags: NCZ]
	cmp $A9FFFF.l,X		; DF FF FF A9 ; Compare accumulator (long,X) $A9FFFF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $CFCFFF.l,X		; FF FF CF CF ; Subtract with carry (long,X) $CFCFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CFDFCF.l,X		; FF CF DF CF ; Subtract with carry (long,X) $CFDFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DFFFDF.l		; CF DF FF DF ; Compare accumulator (long) $DFFFDF.l [Reads: Accumulator] [Flags: NCZ]
	sbc $FFCFFF.l,X		; FF FF CF FF ; Subtract with carry (long,X) $FFCFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0C54BD.l,X		; FF BD 54 0C ; Subtract with carry (long,X) $0C54BD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $09ADF4.l		; 22 F4 AD 09 ; Jump to subroutine long $09ADF4.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $1C		; 80 1C ; Branch always to $80, $1C [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $BC8A.w,Y		; B9 8A BC ; Load $BC8A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $BC8B.w,Y		; B9 8B BC ; Load $BC8B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $04.b		; 84 04 ; Store Y register to $04.b [Reads: Y Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $BC6C.w,X		; BD 6C BC ; Load $BC6C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BBF4.w,X		; 7D F4 BB ; Add $BBF4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BC30.w,X		; 7D 30 BC ; Add $BC30.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $BC6C.w,X		; BD 6C BC ; Load $BC6C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	dec $72.b		; C6 72 ; Decrement $72.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $B8		; 10 B8 ; Branch if plus to $10, $B8 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FF0A09.l,X		; FF 09 0A FF ; Subtract with carry (long,X) $FF0A09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF8080.l,X		; FF 80 80 FF ; Subtract with carry (long,X) $FF8080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $FF0040.l,X		; FF 40 00 FF ; Subtract with carry (long,X) $FF0040.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $D011A5.l,X		; FF A5 11 D0 ; Subtract with carry (long,X) $D011A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $BD.b		; 24 BD ; Test bits $BD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tsb $0AD0.w		; 0C D0 0A ; Test and set bits $0AD0.w [Reads: Accumulator] [Flags: Z]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	dec $0C5E.w,X		; DE 5E 0C ; Decrement memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $3D, $01		; 82 3D 01 ; Branch always long to $82, $3D, $01 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	jsr $FA2D.w		; 20 2D FA ; Jump to subroutine at $FA2D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $0F, $01		; 82 0F 01 ; Branch always long to $82, $0F, $01 [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	.db $82, $CD, $00		; 82 CD 00 ; Branch always long to $82, $CD, $00 [Flow: branch]
	jsl $07D576.l		; 22 76 D5 07 ; Jump to subroutine long $07D576.l [Writes: Stack Pointer] [Flow: call]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $036D.w,Y		; B9 6D 03 ; Load $036D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $F0, $41		; F0 41 ; Branch if equal to $F0, $41 [Flow: branch]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $036D.w		; 0D 6D 03 ; Logical OR $036D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0370.w		; 0D 70 03 ; Logical OR $0370.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$33.b		; 29 33 ; Logical AND #$33.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	dec $0394.w,X		; DE 94 03 ; Decrement memory $0394.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $2B		; 10 2B ; Branch if plus to $10, $2B [Flow: branch]
	ldy $0380.w,X		; BC 80 03 ; Load Y register $0380.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	cpy $76.b		; C4 76 ; Compare $76.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	dec $0385.w,X		; DE 85 03 ; Decrement memory $0385.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	inc $0385.w,X		; FE 85 03 ; Increment memory $0385.w,X [Reads: X Index] [Flags: NZ]
	lda $76.b		; A5 76 ; Load $76.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0394.w,X		; BD 94 03 ; Load $0394.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	dec $0394.w,X		; DE 94 03 ; Decrement memory $0394.w,X [Reads: X Index] [Flags: NZ]
	.db $82, $65, $00		; 82 65 00 ; Branch always long to $82, $65, $00 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $58.b		; 05 58 ; Logical OR $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $02F6.w		; AD F6 02 ; Load $02F6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0994C6.l		; 22 C6 94 09 ; Jump to subroutine long $0994C6.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $02F6.w		; AD F6 02 ; Load $02F6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	lda $02F6.w		; AD F6 02 ; Load $02F6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	.db $82, $CB, $FE		; 82 CB FE ; Branch always long to $82, $CB, $FE [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037E.w		; 8D 7E 03 ; Store accumulator to $037E.w [Reads: Accumulator]
	stx $039D.w		; 8E 9D 03 ; Store X register to $039D.w [Reads: X Index]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $BD4C.w,X		; BD 4C BD ; Load $BD4C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $BD4C.w,X		; BD 4C BD ; Load $BD4C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $BD58.w,X		; BD 58 BD ; Load $BD58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inc $0A.b		; E6 0A ; Increment $0A.b [Reads: Direct Page] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $C4		; D0 C4 ; Branch if not equal to $D0, $C4 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $80, $B7		; [PATTERN: Memory clearing operation] 80 B7 ; Branch always to $80, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	stz $0C.b		; [PATTERN: Memory clearing operation] 64 0C ; Store zero to $0C.b
	stz $0D.b		; 64 0D ; Store zero to $0D.b
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$07.b		; E9 07 ; Subtract #$07.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $8F, $00		; 82 8F 00 ; Branch always long to $82, $8F, $00 [Flow: branch]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $BD64.w,X		; BD 64 BD ; Load $BD64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $BD6C.w,X		; BD 6C BD ; Load $BD6C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
.ACCU 16
	rep #$20		; C2 20
	lda $BD64.w,X		; BD 64 BD ; Load $BD64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $BD6C.w,X		; BD 6C BD ; Load $BD6C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F7DC.w		; 20 DC F7 ; Jump to subroutine at $F7DC.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $26		; B0 26 ; Branch if carry set to $B0, $26 [Flow: branch]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0A0C.w		; 0C 0C 0A ; Test and set bits $0A0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $037D.w		; AD 7D 03 ; Load $037D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $037D.w		; AD 7D 03 ; Load $037D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $C003.w,X		; BD 03 C0 ; Load $C003.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $C00B.w,X		; BD 0B C0 ; Load $C00B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0D.b		; 09 0D ; Logical OR #$0D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: NZ]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $C9		; D0 C9 ; Branch if not equal to $D0, $C9 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $B7		; 80 B7 ; Branch always to $80, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $42,$43		; 44 43 42 ; Move block positive $42,$43 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C54.w,X		; 7D 54 0C ; Add $0C54.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0018.w		; E9 18 00 ; Subtract #$0018.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	ldy $0C5E.w,X		; BC 5E 0C ; Load Y register $0C5E.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $C091.w,Y		; B9 91 C0 ; Load $C091.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0109.w		; 8D 09 01 ; Store accumulator to $0109.w [Reads: Accumulator]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FDFFF5.l,X		; FF F5 FF FD ; Subtract with carry (long,X) $FDFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9FFFD.l,X		; FF FD FF F9 ; Subtract with carry (long,X) $F9FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFF9.l,X		; FF F9 FF 00 ; Subtract with carry (long,X) $00FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $92.b		; 00 92 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $93FFFF.l,X		; FF FF FF 93 ; Subtract with carry (long,X) $93FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($F9.b,S),Y		; 93 F9 ; Store accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4000FF.l,X		; FF FF 00 40 ; Subtract with carry (long,X) $4000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B1BDFF.l,X		; FF FF BD B1 ; Subtract with carry (long,X) $B1BDFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$DE.b],Y		; 17 DE ; OR accumulator with memory (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $161003.l,X		; 9F 03 10 16 ; Store accumulator (long,X) $161003.l,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $C147.w,X		; BD 47 C1 ; Load $C147.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C107.w,X		; 7D 07 C1 ; Add $C107.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C127.w,X		; 7D 27 C1 ; Add $C127.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $C147.w,X		; BD 47 C1 ; Load $C147.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $C157.w,X		; BD 57 C1 ; Load $C157.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $B5		; 10 B5 ; Branch if plus to $10, $B5 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$80.b],Y		; B7 80 ; Load accumulator (long indexed) [$80.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b,S		; 83 04 ; Store accumulator (stack relative) $04.b,S [Reads: Stack Pointer, Accumulator]
	tsb $84.b		; 04 84 ; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C86.w,X		; 9D 86 0C ; Store accumulator to $0C86.w,X [Reads: Accumulator, X Index]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $C1E4.w,X		; BD E4 C1 ; Load $C1E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $C1E7.w,X		; BD E7 C1 ; Load $C1E7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $0008FF.l,X		; FF FF 08 00 ; Subtract with carry (long,X) $0008FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0008FF.l,X		; FF FF 08 00 ; Subtract with carry (long,X) $0008FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Direct Page, Accumulator]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $08.b		; 64 08 ; Store zero to $08.b
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $4A		; F0 4A ; Branch if equal to $F0, $4A [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C22F.w,X		; 7D 2F C2 ; Add $C22F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C23F.w,X		; 7D 3F C2 ; Add $C23F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $C24F.w,X		; BD 4F C2 ; Load $C24F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $C257.w,X		; BD 57 C2 ; Load $C257.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $BC		; D0 BC ; Branch if not equal to $D0, $BC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $0070FF.l,X		; FF FF 70 00 ; Subtract with carry (long,X) $0070FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0078FF.l,X		; FF FF 78 00 ; Subtract with carry (long,X) $0078FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $630064.l,X		; FF 64 00 63 ; Subtract with carry (long,X) $630064.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $51.b		; 00 51 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5D.b		; 00 5D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $750074.l,X		; FF 74 00 75 ; Subtract with carry (long,X) $750074.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $58005F.l,X		; FF 5F 00 58 ; Subtract with carry (long,X) $58005F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $5C006A.l,X		; FF 6A 00 5C ; Subtract with carry (long,X) $5C006A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $840059.l,X		; FF 59 00 84 ; Subtract with carry (long,X) $840059.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0159.l,X		; FF 59 01 FF ; Subtract with carry (long,X) $FF0159.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $6700DB.l,X		; FF DB 00 67 ; Subtract with carry (long,X) $6700DB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $26.b		; 25 26 ; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$05.b		; 09 05 ; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0155FF.l,X		; FF FF 55 01 ; Subtract with carry (long,X) $0155FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $01.b,X		; 56 01 ; Logical shift right $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor [$01.b],Y		; 57 01 ; Exclusive OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $02.b		; E4 02 ; Compare $02.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$2B.b		; C9 2B ; Compare #$2B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	.db $82, $4E, $02		; 82 4E 02 ; Branch always long to $82, $4E, $02 [Flow: branch]
	inc $0FC1.w		; EE C1 0F ; Increment $0FC1.w [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $5D, $01		; 82 5D 01 ; Branch always long to $82, $5D, $01 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	cmp #$11.b		; C9 11 ; Compare #$11.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0DF3.w		; A9 F3 0D ; Load #$0DF3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02CD.w		; 8D CD 02 ; Store accumulator to $02CD.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	.db $82, $64, $01		; 82 64 01 ; Branch always long to $82, $64, $01 [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$37.b		; C9 37 ; Compare #$37.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda APUIO0.w		; AD 40 21 ; Load APUIO0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	inc $03B1.w,X		; FE B1 03 ; Increment memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	.db $82, $D5, $FF		; 82 D5 FF ; Branch always long to $82, $D5, $FF [Flow: branch]
	.db $82, $EA, $01		; 82 EA 01 ; Branch always long to $82, $EA, $01 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; [PATTERN: Memory clearing operation] F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $5D.b		; 84 5D ; Store Y register to $5D.b [Reads: Y Index]
	stz $02D8.w		; 9C D8 02 ; Store zero to $02D8.w
	stz $02DA.w		; 9C DA 02 ; Store zero to $02DA.w
	stz $037B.w		; [PATTERN: Memory clearing operation] 9C 7B 03 ; Store zero to $037B.w
	jsl $09AD6C.l		; 22 6C AD 09 ; Jump to subroutine long $09AD6C.l [Writes: Stack Pointer] [Flow: call]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $7EF36B.l		; AF 6B F3 7E ; Load long $7EF36B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$26.b		; [PATTERN: Memory clearing operation] A0 26 ; Load #$26.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	cmp #$3F.b		; C9 3F ; Compare #$3F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	cmp #$3E.b		; C9 3E ; Compare #$3E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$A0.b		; C9 A0 ; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF36C.l		; 8F 6C F3 7E ; Store accumulator (long) $7EF36C.l [Reads: Accumulator]
	lda $7EF372.l		; AF 72 F3 7E ; Load long $7EF372.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$A0.b		; C9 A0 ; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF36C.l		; 8F 6C F3 7E ; Store accumulator (long) $7EF36C.l [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF372.l		; AF 72 F3 7E ; Load long $7EF372.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $800E.w		; 20 0E 80 ; Jump to subroutine at $800E.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	cmp #$42.b		; C9 42 ; Compare #$42.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $7EF372.l		; AF 72 F3 7E ; Load long $7EF372.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $7EF373.l		; AF 73 F3 7E ; Load long $7EF373.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF373.l		; 8F 73 F3 7E ; Store accumulator (long) $7EF373.l [Reads: Accumulator]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	cmp #$22.b		; C9 22 ; Compare #$22.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; [PATTERN: Memory clearing operation] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $1BEDF9.l		; 22 F9 ED 1B ; Jump to subroutine long $1BEDF9.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	ldy $0C5E.w,X		; BC 5E 0C ; Load Y register $0C5E.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy $CA85.w		; CC 85 CA ; Compare $CA85.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	cpy $CA8A.w		; CC 8A CA ; Compare $CA8A.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	cpy $CA89.w		; CC 89 CA ; Compare $CA89.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cpy $CA8B.w		; CC 8B CA ; Compare $CA8B.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00F945.l		; 22 45 F9 00 ; Jump to subroutine long $00F945.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $82, $1B, $FF		; 82 1B FF ; Branch always long to $82, $1B, $FF [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsl $09AD6C.l		; 22 6C AD 09 ; Jump to subroutine long $09AD6C.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $A1, $00		; 82 A1 00 ; Branch always long to $82, $A1, $00 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $800E.w		; 20 0E 80 ; Jump to subroutine at $800E.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$010F.w		; C9 0F 01 ; Compare #$010F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$0110.w		; C9 10 01 ; Compare #$0110.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0112.w		; C9 12 01 ; Compare #$0112.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$011F.w		; C9 1F 01 ; Compare #$011F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $75		; 80 75 ; Branch always to $80, $75 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$38.b		; E9 38 ; Subtract #$38.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C386.w,Y		; B9 86 C3 ; Load $C386.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $45		; 80 45 ; Branch always to $80, $45 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $5B		; F0 5B ; Branch if equal to $F0, $5B [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $7EF36B.l		; AF 6B F3 7E ; Load long $7EF36B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C37E.w,Y		; B9 7E C3 ; Load $C37E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C2DD.w,Y		; B9 DD C2 ; Load $C2DD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	cmp #$0070.w		; C9 70 00 ; Compare #$0070.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$F8.b		; C9 F8 ; Compare #$F8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	jsr $CC93.w		; 20 93 CC ; Jump to subroutine at $CC93.w [Writes: Stack Pointer] [Flow: call]
	lda APUIO0.w		; AD 40 21 ; Load APUIO0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	.db $82, $D1, $05		; 82 D1 05 ; Branch always long to $82, $D1, $05 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	lda $C37B.w		; AD 7B C3 ; Load $C37B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C37B.w,Y		; B9 7B C3 ; Load $C37B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$34.b		; C9 34 ; Compare #$34.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$35.b		; C9 35 ; Compare #$35.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$36.b		; C9 36 ; Compare #$36.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	inc $03A4.w,X		; FE A4 03 ; Increment memory $03A4.w,X [Reads: X Index] [Flags: NZ]
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C378.w,Y		; B9 78 C3 ; Load $C378.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $C375.w,Y		; B9 75 C3 ; Load $C375.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $00D4DB.l		; 22 DB D4 00 ; Jump to subroutine long $00D4DB.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0BF0.w,X		; BD F0 0B ; Load $0BF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $09849C.l,X		; BF 9C 84 09 ; Load long $09849C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $098450.l,X		; BF 50 84 09 ; Load long $098450.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda #$34.b		; A9 34 ; Load #$34.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $09849C.l,X		; BF 9C 84 09 ; Load long $09849C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $62, $00		; 82 62 00 ; Branch always long to $82, $62, $00 [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $5D		; D0 5D ; Branch if not equal to $D0, $5D [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0309.w		; 8D 09 03 ; Store accumulator to $0309.w [Reads: Accumulator]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $3E		; 10 3E ; Branch if plus to $10, $3E [Flow: branch]
	cmp #$E4.b		; C9 E4 ; Compare #$E4.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $3A		; B0 3A ; Branch if carry set to $B0, $3A [Flow: branch]
	lda #$E4.b		; A9 E4 ; Load #$E4.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $029E.w,X		; 9D 9E 02 ; Store accumulator to $029E.w,X [Reads: Accumulator, X Index]
	ldy $0C5E.w,X		; BC 5E 0C ; Load Y register $0C5E.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$12.b		; 69 12 ; Add #$12.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $8450.w,Y		; B9 50 84 ; Load $8450.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	.db $82, $6D, $02		; 82 6D 02 ; Branch always long to $82, $6D, $02 [Flow: branch]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $C37B.w		; AD 7B C3 ; Load $C37B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $C690.w		; 20 90 C6 ; Jump to subroutine at $C690.w [Writes: Stack Pointer] [Flow: call]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3E		; D0 3E ; Branch if not equal to $D0, $3E [Flow: branch]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $35		; B0 35 ; Branch if carry set to $B0, $35 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8450.w,X		; BD 50 84 ; Load $8450.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0028.w		; 69 28 00 ; Add #$0028.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFC.w		; 69 FC FF ; Add #$FFFC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $65.b		; A5 65 ; Load $65.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $F897.w		; 20 97 F8 ; Jump to subroutine at $F897.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0309.w		; 8D 09 03 ; Store accumulator to $0309.w [Reads: Accumulator]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F586C.l,X		; BF 6C 58 7F ; Load long $7F586C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $C819.w		; 20 19 C8 ; Jump to subroutine at $C819.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $7F58AA.l,X		; BF AA 58 7F ; Load long $7F58AA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F586C.l,X		; 9F 6C 58 7F ; Store accumulator (long,X) $7F586C.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E4		; 10 E4 ; Branch if plus to $10, $E4 [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F586C.l,X		; BF 6C 58 7F ; Load long $7F586C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $82, $39, $DF		; 82 39 DF ; Branch always long to $82, $39, $DF [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $0FA0.w		; AC A0 0F ; Load $0FA0.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $C8BE.w		; 20 BE C8 ; Jump to subroutine at $C8BE.w [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	.db $82, $6F, $00		; 82 6F 00 ; Branch always long to $82, $6F, $00 [Flow: branch]
	jsr $CA22.w		; 20 22 CA ; Jump to subroutine at $CA22.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $6A		; 80 6A ; Branch always to $80, $6A [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $59		; D0 59 ; Branch if not equal to $D0, $59 [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $54		; D0 54 ; Branch if not equal to $D0, $54 [Flow: branch]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	cmp #$E4.b		; C9 E4 ; Compare #$E4.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $39		; B0 39 ; Branch if carry set to $B0, $39 [Flow: branch]
	lda #$E4.b		; A9 E4 ; Load #$E4.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $029E.w,X		; 9D 9E 02 ; Store accumulator to $029E.w,X [Reads: Accumulator, X Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$1E.b		; 69 1E ; Add #$1E.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FC.b		; 69 FC ; Add #$FC.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $9E		; 80 9E ; Branch always to $80, $9E [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	jsr $C760.w		; 20 60 C7 ; Jump to subroutine at $C760.w [Writes: Stack Pointer] [Flow: call]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $C924.w		; 20 24 C9 ; Jump to subroutine at $C924.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7F5824.l,X		; BF 24 58 7F ; Load long $7F5824.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,Y		; 99 FA 0B ; Store accumulator to $0BFA.w,Y [Reads: Y Index, Accumulator]
	lda $7F5830.l,X		; BF 30 58 7F ; Load long $7F5830.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,Y		; 99 0E 0C ; Store accumulator to $0C0E.w,Y [Reads: Y Index, Accumulator]
	lda $7F583C.l,X		; BF 3C 58 7F ; Load long $7F583C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	lda $7F5848.l,X		; BF 48 58 7F ; Load long $7F5848.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,Y		; 99 18 0C ; Store accumulator to $0C18.w,Y [Reads: Y Index, Accumulator]
	lda $7F5854.l,X		; BF 54 58 7F ; Load long $7F5854.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $029E.w,Y		; 99 9E 02 ; Store accumulator to $029E.w,Y [Reads: Y Index, Accumulator]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,Y		; 99 22 0C ; Store accumulator to $0C22.w,Y [Reads: Y Index, Accumulator]
	lda $7F580C.l,X		; BF 0C 58 7F ; Load long $7F580C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,Y		; 99 2C 0C ; Store accumulator to $0C2C.w,Y [Reads: Y Index, Accumulator]
	lda $7F5818.l,X		; BF 18 58 7F ; Load long $7F5818.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,Y		; 99 94 02 ; Store accumulator to $0294.w,Y [Reads: Y Index, Accumulator]
	lda $7F5886.l,X		; BF 86 58 7F ; Load long $7F5886.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C36.w,Y		; 99 36 0C ; Store accumulator to $0C36.w,Y [Reads: Y Index, Accumulator]
	lda $7F5892.l,X		; BF 92 58 7F ; Load long $7F5892.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C40.w,Y		; 99 40 0C ; Store accumulator to $0C40.w,Y [Reads: Y Index, Accumulator]
	lda $7F589E.l,X		; BF 9E 58 7F ; Load long $7F589E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02A8.w,Y		; 99 A8 02 ; Store accumulator to $02A8.w,Y [Reads: Y Index, Accumulator]
	lda $7F587A.l,X		; BF 7A 58 7F ; Load long $7F587A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,Y		; 99 5E 0C ; Store accumulator to $0C5E.w,Y [Reads: Y Index, Accumulator]
	lda $7F58AA.l,X		; BF AA 58 7F ; Load long $7F58AA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,Y		; 99 54 0C ; Store accumulator to $0C54.w,Y [Reads: Y Index, Accumulator]
	lda $7F5860.l,X		; BF 60 58 7F ; Load long $7F5860.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,Y		; 99 68 0C ; Store accumulator to $0C68.w,Y [Reads: Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0BFA.w,Y		; B9 FA 0B ; Load $0BFA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5824.l,X		; 9F 24 58 7F ; Store accumulator (long,X) $7F5824.l,X [Reads: Accumulator, X Index]
	lda $0C0E.w,Y		; B9 0E 0C ; Load $0C0E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5830.l,X		; 9F 30 58 7F ; Store accumulator (long,X) $7F5830.l,X [Reads: Accumulator, X Index]
	lda $0C04.w,Y		; B9 04 0C ; Load $0C04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F583C.l,X		; 9F 3C 58 7F ; Store accumulator (long,X) $7F583C.l,X [Reads: Accumulator, X Index]
	lda $0C18.w,Y		; B9 18 0C ; Load $0C18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5848.l,X		; 9F 48 58 7F ; Store accumulator (long,X) $7F5848.l,X [Reads: Accumulator, X Index]
	lda $029E.w,Y		; B9 9E 02 ; Load $029E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5854.l,X		; 9F 54 58 7F ; Store accumulator (long,X) $7F5854.l,X [Reads: Accumulator, X Index]
	lda $0C22.w,Y		; B9 22 0C ; Load $0C22.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $0C2C.w,Y		; B9 2C 0C ; Load $0C2C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F580C.l,X		; 9F 0C 58 7F ; Store accumulator (long,X) $7F580C.l,X [Reads: Accumulator, X Index]
	lda $0294.w,Y		; B9 94 02 ; Load $0294.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5818.l,X		; 9F 18 58 7F ; Store accumulator (long,X) $7F5818.l,X [Reads: Accumulator, X Index]
	lda $0C36.w,Y		; B9 36 0C ; Load $0C36.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5886.l,X		; 9F 86 58 7F ; Store accumulator (long,X) $7F5886.l,X [Reads: Accumulator, X Index]
	lda $0C40.w,Y		; B9 40 0C ; Load $0C40.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5892.l,X		; 9F 92 58 7F ; Store accumulator (long,X) $7F5892.l,X [Reads: Accumulator, X Index]
	lda $02A8.w,Y		; B9 A8 02 ; Load $02A8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F589E.l,X		; 9F 9E 58 7F ; Store accumulator (long,X) $7F589E.l,X [Reads: Accumulator, X Index]
	lda $0C5E.w,Y		; B9 5E 0C ; Load $0C5E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F587A.l,X		; 9F 7A 58 7F ; Store accumulator (long,X) $7F587A.l,X [Reads: Accumulator, X Index]
	lda $0C68.w,Y		; B9 68 0C ; Load $0C68.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5860.l,X		; 9F 60 58 7F ; Store accumulator (long,X) $7F5860.l,X [Reads: Accumulator, X Index]
	lda $0C54.w,Y		; B9 54 0C ; Load $0C54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F58AA.l,X		; 9F AA 58 7F ; Store accumulator (long,X) $7F58AA.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $8080BF.l		; AF BF 80 80 ; Load long $8080BF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F30000.l,X		; FF 00 00 F3 ; Subtract with carry (long,X) $F30000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EFFFF8.l,X		; FF F8 FF EF ; Subtract with carry (long,X) $EFFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EFFFFC.l,X		; FF FC FF EF ; Subtract with carry (long,X) $EFFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFC.l,X		; FF FC FF 00 ; Subtract with carry (long,X) $00FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F9000F.l,X		; FF 0F 00 F9 ; Subtract with carry (long,X) $F9000F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9000F.l,X		; FF 0F 00 F9 ; Subtract with carry (long,X) $F9000F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FF02.l,X		; FF 02 FF 02 ; Subtract with carry (long,X) $02FF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $4A9D.w,X		; 3D 9D 4A ; AND accumulator with memory $4A9D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $5E9E.w		; 0C 9E 5E ; Test and set bits $5E9E.w [Reads: Accumulator] [Flags: Z]
	tsb $06A9.w		; 0C A9 06 ; Test and set bits $06A9.w [Reads: Accumulator] [Flags: Z]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F8.b		; 69 F8 ; Add #$F8.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $C987.w,X		; BD 87 C9 ; Load $C987.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C99B.w,X		; BD 9B C9 ; Load $C99B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $C9AF.w,X		; BD AF C9 ; Load $C9AF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $C987.w,X		; BD 87 C9 ; Load $C987.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $C991.w,X		; BD 91 C9 ; Load $C991.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$24.b		; 09 24 ; Logical OR #$24.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C9C3.w,X		; BD C3 C9 ; Load $C9C3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $B8		; D0 B8 ; Branch if not equal to $D0, $B8 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $37		; 10 37 ; Branch if plus to $10, $37 [Flow: branch]
	and $2638.w,Y		; 39 38 26 ; AND accumulator with memory $2638.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $5EBD20.l		; 0F 20 BD 5E ; OR accumulator with memory (long) $5EBD20.l [Writes: Accumulator] [Flags: NZ]
	tsb $85CD.w		; 0C CD 85 ; Test and set bits $85CD.w [Reads: Accumulator] [Flags: Z]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $F0, $3E		; F0 3E ; Branch if equal to $F0, $3E [Flow: branch]
	cmp $CA8A.w		; CD 8A CA ; Compare $CA8A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	lda $04C2.w		; AD C2 04 ; Load $04C2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	ldy #$23.b		; A0 23 ; Load #$23.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $CA8B.w		; CD 8B CA ; Compare $CA8B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	ldy #$28.b		; A0 28 ; Load #$28.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dec $04C2.w		; CE C2 04 ; Decrement $04C2.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0394.w,X		; BD 94 03 ; Load $0394.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	dec $0394.w,X		; DE 94 03 ; Decrement memory $0394.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $CA8B.w		; CD 8B CA ; Compare $CA8B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BED72.l		; 22 72 ED 1B ; Jump to subroutine long $1BED72.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $CA8B.w		; CD 8B CA ; Compare $CA8B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $CC93.w		; 20 93 CC ; Jump to subroutine at $CC93.w [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $65		; D0 65 ; Branch if not equal to $D0, $65 [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $37		; B0 37 ; Branch if carry set to $B0, $37 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F76B.w		; 20 6B F7 ; Jump to subroutine at $F76B.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$19.b		; C9 19 ; Compare #$19.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; [PATTERN: Memory clearing operation] F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$1A.b		; C9 1A ; Compare #$1A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	stz $0112.w		; 9C 12 01 ; Store zero to $0112.w
	stz $03EF.w		; 9C EF 03 ; Store zero to $03EF.w
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E9.w		; 8D E9 02 ; Store accumulator to $02E9.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F8.b		; C9 F8 ; Compare #$F8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $C690.w		; 20 90 C6 ; Jump to subroutine at $C690.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	inc $0385.w,X		; FE 85 03 ; Increment memory $0385.w,X [Reads: X Index] [Flags: NZ]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $A1.b		; A5 A1 ; Load $A1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $F897.w		; 20 97 F8 ; Jump to subroutine at $F897.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$3E.b		; A9 3E ; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0C36.w,X		; [PATTERN: Memory clearing operation] 9E 36 0C ; Store zero to $0C36.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	jsr $CC93.w		; 20 93 CC ; Jump to subroutine at $CC93.w [Writes: Stack Pointer] [Flow: call]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0122.w		; ED 22 01 ; Subtract $0122.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0049.w		; C9 49 00 ; Compare #$0049.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $61		; B0 61 ; Branch if carry set to $B0, $61 [Flow: branch]
	lda #$0049.w		; A9 49 00 ; Load #$0049.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0122.w		; 6D 22 01 ; Add $0122.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02A1A4.l,X		; 1F A4 A1 02 ; Logical OR long $02A1A4.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF37A.l		; 8F 7A F3 7E ; Store accumulator (long) $7EF37A.l [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC340.l,X		; 9F 40 C3 7E ; Store accumulator (long,X) $7EC340.l,X [Reads: Accumulator, X Index]
	sta $7EC360.l,X		; 9F 60 C3 7E ; Store accumulator (long,X) $7EC360.l,X [Reads: Accumulator, X Index]
	sta $7EC380.l,X		; 9F 80 C3 7E ; Store accumulator (long,X) $7EC380.l,X [Reads: Accumulator, X Index]
	sta $7EC3A0.l,X		; 9F A0 C3 7E ; Store accumulator (long,X) $7EC3A0.l,X [Reads: Accumulator, X Index]
	sta $7EC3C0.l,X		; 9F C0 C3 7E ; Store accumulator (long,X) $7EC3C0.l,X [Reads: Accumulator, X Index]
	sta $7EC3E0.l,X		; 9F E0 C3 7E ; Store accumulator (long,X) $7EC3E0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $E2		; D0 E2 ; Branch if not equal to $D0, $E2 [Flow: branch]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $C690.w		; 20 90 C6 ; Jump to subroutine at $C690.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $099757.l		; 22 57 97 09 ; Jump to subroutine long $099757.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $79		; D0 79 ; Branch if not equal to $D0, $79 [Flow: branch]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0122.w		; ED 22 01 ; Subtract $0122.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0038.w		; C9 38 00 ; Compare #$0038.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $44		; B0 44 ; Branch if carry set to $B0, $44 [Flow: branch]
	lda #$0038.w		; A9 38 00 ; Load #$0038.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0122.w		; 6D 22 01 ; Add $0122.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7F5810.l		; 8F 10 58 7F ; Store accumulator (long) $7F5810.l [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7F580E.l		; 8F 0E 58 7F ; Store accumulator (long) $7F580E.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$013B.w		; A9 3B 01 ; Load #$013B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $54		; 80 54 ; Branch always to $80, $54 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $42		; D0 42 ; Branch if not equal to $D0, $42 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3E		; D0 3E ; Branch if not equal to $D0, $3E [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	stz $0C18.w,X		; 9E 18 0C ; Store zero to $0C18.w,X [Reads: X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $76		; D0 76 ; Branch if not equal to $D0, $76 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $82, $FA, $00		; 82 FA 00 ; Branch always long to $82, $FA, $00 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $68		; F0 68 ; Branch if equal to $F0, $68 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $7F5812.l		; AF 12 58 7F ; Load long $7F5812.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5812.l		; 8F 12 58 7F ; Store accumulator (long) $7F5812.l [Reads: Accumulator]
	.db $D0, $59		; [PATTERN: Memory clearing operation] D0 59 ; Branch if not equal to $D0, $59 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04C6.w		; 8D C6 04 ; Store accumulator to $04C6.w [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $4B		; 80 4B ; Branch always to $80, $4B [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	stz $0C18.w,X		; 9E 18 0C ; Store zero to $0C18.w,X [Reads: X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $16		; 90 16 ; Branch if carry clear to $90, $16 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BED72.l		; 22 72 ED 1B ; Jump to subroutine long $1BED72.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $CF35.w		; 20 35 CF ; Jump to subroutine at $CF35.w [Writes: Stack Pointer] [Flow: call]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5810.l		; 6F 10 58 7F ; Add with carry (long) $7F5810.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0122.w		; ED 22 01 ; Subtract $0122.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F580E.l		; 6F 0E 58 7F ; Add with carry (long) $7F580E.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $011E.w		; ED 1E 01 ; Subtract $011E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5817.l,X		; 9F 17 58 7F ; Store accumulator (long,X) $7F5817.l,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F581F.l,X		; 9F 1F 58 7F ; Store accumulator (long,X) $7F581F.l,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5827.l,X		; 9F 27 58 7F ; Store accumulator (long,X) $7F5827.l,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F582F.l,X		; 9F 2F 58 7F ; Store accumulator (long,X) $7F582F.l,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $CEAA.w		; 20 AA CE ; Jump to subroutine at $CEAA.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F581E.l		; 8F 1E 58 7F ; Store accumulator (long) $7F581E.l [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5826.l		; 8F 26 58 7F ; Store accumulator (long) $7F5826.l [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F582E.l		; 8F 2E 58 7F ; Store accumulator (long) $7F582E.l [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5836.l		; 8F 36 58 7F ; Store accumulator (long) $7F5836.l [Reads: Accumulator]
	jsr $CEAA.w		; 20 AA CE ; Jump to subroutine at $CEAA.w [Writes: Stack Pointer] [Flow: call]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $CC93.w		; 20 93 CC ; Jump to subroutine at $CC93.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $CEC7.w		; 20 C7 CE ; Jump to subroutine at $CEC7.w [Writes: Stack Pointer] [Flow: call]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F702.w		; 20 02 F7 ; Jump to subroutine at $F702.w [Writes: Stack Pointer] [Flow: call]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$17.b		; A2 17 ; Load #$17.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F5837.l,X		; BF 37 58 7F ; Load long $7F5837.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	.db $80, $5E		; 80 5E ; Branch always to $80, $5E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5837.l,X		; 9F 37 58 7F ; Store accumulator (long,X) $7F5837.l,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F58AF.l,X		; 9F AF 58 7F ; Store accumulator (long,X) $7F58AF.l,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F5817.l,X		; BF 17 58 7F ; Load long $7F5817.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F581F.l,X		; BF 1F 58 7F ; Load long $7F581F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7F5827.l,X		; BF 27 58 7F ; Load long $7F5827.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $09.b		; 65 09 ; Add $09.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7F582F.l,X		; BF 2F 58 7F ; Load long $7F582F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F584F.l,X		; 9F 4F 58 7F ; Store accumulator (long,X) $7F584F.l,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5867.l,X		; 9F 67 58 7F ; Store accumulator (long,X) $7F5867.l,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F587F.l,X		; 9F 7F 58 7F ; Store accumulator (long,X) $7F587F.l,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5897.l,X		; 9F 97 58 7F ; Store accumulator (long,X) $7F5897.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$17.b		; A2 17 ; Load #$17.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F5837.l,X		; BF 37 58 7F ; Load long $7F5837.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $63		; F0 63 ; Branch if equal to $F0, $63 [Flow: branch]
	lda $7F58AF.l,X		; BF AF 58 7F ; Load long $7F58AF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F58AF.l,X		; 9F AF 58 7F ; Store accumulator (long,X) $7F58AF.l,X [Reads: Accumulator, X Index]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F58AF.l,X		; 9F AF 58 7F ; Store accumulator (long,X) $7F58AF.l,X [Reads: Accumulator, X Index]
	lda $7F5837.l,X		; BF 37 58 7F ; Load long $7F5837.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5837.l,X		; 9F 37 58 7F ; Store accumulator (long,X) $7F5837.l,X [Reads: Accumulator, X Index]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5837.l,X		; 9F 37 58 7F ; Store accumulator (long,X) $7F5837.l,X [Reads: Accumulator, X Index]
	.db $80, $3D		; 80 3D ; Branch always to $80, $3D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $7F584F.l,X		; BF 4F 58 7F ; Load long $7F584F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F5867.l,X		; BF 67 58 7F ; Load long $7F5867.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7F587F.l,X		; BF 7F 58 7F ; Load long $7F587F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7F5897.l,X		; BF 97 58 7F ; Load long $7F5897.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $7F5837.l,X		; BF 37 58 7F ; Load long $7F5837.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $C1E4.w,X		; BD E4 C1 ; Load $C1E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $C1E7.w,X		; BD E7 C1 ; Load $C1E7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $92		; 10 92 ; Branch if plus to $10, $92 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $54BD.w		; 2E BD 54 ; Rotate left $54BD.w [Flags: NCZ]
	tsb $03C9.w		; 0C C9 03 ; Test and set bits $03C9.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	ldy $0C54.w,X		; BC 54 0C ; Load Y register $0C54.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $CFA6.w,Y		; B9 A6 CF ; Load $CFA6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F76B.w		; 20 6B F7 ; Jump to subroutine at $F76B.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $4D.b		; [PATTERN: Memory clearing operation] A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	ldy #$14.b		; A0 14 ; Load #$14.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7F58B6.l		; AF B6 58 7F ; Load long $7F58B6.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F58B6.l		; 8F B6 58 7F ; Store accumulator (long) $7F58B6.l [Reads: Accumulator]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F58B6.l		; 8F B6 58 7F ; Store accumulator (long) $7F58B6.l [Reads: Accumulator]
	lda $7F58B8.l		; AF B8 58 7F ; Load long $7F58B8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F58B8.l		; 8F B8 58 7F ; Store accumulator (long) $7F58B8.l [Reads: Accumulator]
	lda #$F3.b		; A9 F3 ; Load #$F3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $D5		; 80 D5 ; Branch always to $80, $D5 [Flow: branch]
	dec $0394.w,X		; DE 94 03 ; Decrement memory $0394.w,X [Reads: X Index] [Flags: NZ]
	lda $0394.w,X		; BD 94 03 ; Load $0394.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8007.w		; 20 07 80 ; Jump to subroutine at $8007.w [Writes: Stack Pointer] [Flow: call]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $1BC21D.l		; 22 1D C2 1B ; Jump to subroutine long $1BC21D.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098D90.l		; 22 90 8D 09 ; Jump to subroutine long $098D90.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5878.l		; 8F 78 58 7F ; Store accumulator (long) $7F5878.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5879.l		; 8F 79 58 7F ; Store accumulator (long) $7F5879.l [Reads: Accumulator]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F586C.l,X		; BF 6C 58 7F ; Load long $7F586C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $B2, $00		; 82 B2 00 ; Branch always long to $82, $B2, $00 [Flow: branch]
	lda $7F5860.l,X		; BF 60 58 7F ; Load long $7F5860.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5860.l,X		; 9F 60 58 7F ; Store accumulator (long,X) $7F5860.l,X [Reads: Accumulator, X Index]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5860.l,X		; 9F 60 58 7F ; Store accumulator (long,X) $7F5860.l,X [Reads: Accumulator, X Index]
	lda $7F586C.l,X		; BF 6C 58 7F ; Load long $7F586C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F586C.l,X		; 9F 6C 58 7F ; Store accumulator (long,X) $7F586C.l,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $7F5878.l		; AF 78 58 7F ; Load long $7F5878.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $7F586C.l,X		; BF 6C 58 7F ; Load long $7F586C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,Y		; 99 5E 0C ; Store accumulator to $0C5E.w,Y [Reads: Y Index, Accumulator]
	lda $7F5824.l,X		; BF 24 58 7F ; Load long $7F5824.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,Y		; 99 FA 0B ; Store accumulator to $0BFA.w,Y [Reads: Y Index, Accumulator]
	lda $7F5830.l,X		; BF 30 58 7F ; Load long $7F5830.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,Y		; 99 0E 0C ; Store accumulator to $0C0E.w,Y [Reads: Y Index, Accumulator]
	lda $7F583C.l,X		; BF 3C 58 7F ; Load long $7F583C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	lda $7F5848.l,X		; BF 48 58 7F ; Load long $7F5848.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,Y		; 99 18 0C ; Store accumulator to $0C18.w,Y [Reads: Y Index, Accumulator]
	lda $7F5854.l,X		; BF 54 58 7F ; Load long $7F5854.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $029E.w,Y		; 99 9E 02 ; Store accumulator to $029E.w,Y [Reads: Y Index, Accumulator]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,Y		; 99 22 0C ; Store accumulator to $0C22.w,Y [Reads: Y Index, Accumulator]
	lda $7F580C.l,X		; BF 0C 58 7F ; Load long $7F580C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,Y		; 99 2C 0C ; Store accumulator to $0C2C.w,Y [Reads: Y Index, Accumulator]
	lda $7F5818.l,X		; BF 18 58 7F ; Load long $7F5818.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7F5818.l,X		; 9F 18 58 7F ; Store accumulator (long,X) $7F5818.l,X [Reads: Accumulator, X Index]
	sta $0294.w,Y		; 99 94 02 ; Store accumulator to $0294.w,Y [Reads: Y Index, Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	stz $74.b		; 64 74 ; Store zero to $74.b
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	jsr $D188.w		; 20 88 D1 ; Jump to subroutine at $D188.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	sta $7F586C.l,X		; 9F 6C 58 7F ; Store accumulator (long,X) $7F586C.l,X [Reads: Accumulator, X Index]
	lda $7F5878.l		; AF 78 58 7F ; Load long $7F5878.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0BFA.w,Y		; B9 FA 0B ; Load $0BFA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5824.l,X		; 9F 24 58 7F ; Store accumulator (long,X) $7F5824.l,X [Reads: Accumulator, X Index]
	lda $0C0E.w,Y		; B9 0E 0C ; Load $0C0E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5830.l,X		; 9F 30 58 7F ; Store accumulator (long,X) $7F5830.l,X [Reads: Accumulator, X Index]
	lda $0C04.w,Y		; B9 04 0C ; Load $0C04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F583C.l,X		; 9F 3C 58 7F ; Store accumulator (long,X) $7F583C.l,X [Reads: Accumulator, X Index]
	lda $0C18.w,Y		; B9 18 0C ; Load $0C18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5848.l,X		; 9F 48 58 7F ; Store accumulator (long,X) $7F5848.l,X [Reads: Accumulator, X Index]
	lda $029E.w,Y		; B9 9E 02 ; Load $029E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5854.l,X		; 9F 54 58 7F ; Store accumulator (long,X) $7F5854.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $3D, $FF		; 82 3D FF ; Branch always long to $82, $3D, $FF [Flow: branch]
	lda $7F5878.l		; AF 78 58 7F ; Load long $7F5878.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F586C.l,X		; BF 6C 58 7F ; Load long $7F586C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $204F.w		; 4E 4F 20 ; Logical shift right $204F.w [Flags: NCZ]
	adc ($F6.b),Y		; 71 F6 ; Add with carry ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $7F5879.l		; AF 79 58 7F ; Load long $7F5879.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $D186.w,X		; BD 86 D1 ; Load $D186.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5879.l		; 8F 79 58 7F ; Store accumulator (long) $7F5879.l [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $1AA5.w,X		; 3C A5 1A ; Test bits $1AA5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802E.w		; 20 2E 80 ; Jump to subroutine at $802E.w [Writes: Stack Pointer] [Flow: call]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $C6, $00		; 82 C6 00 ; Branch always long to $82, $C6, $00 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $43		; D0 43 ; Branch if not equal to $D0, $43 [Flow: branch]
	dec $0C5E.w,X		; DE 5E 0C ; Decrement memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	.db $30, $25		; 30 25 ; Branch if minus to $30, $25 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0294.w,X		; 7D 94 02 ; Add $0294.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; [PATTERN: Memory clearing operation] 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	.db $82, $92, $00		; 82 92 00 ; Branch always long to $82, $92, $00 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	lda $D1D6.w		; AD D6 D1 ; Load $D1D6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	inc $0385.w,X		; FE 85 03 ; Increment memory $0385.w,X [Reads: X Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C2C.w,X		; 7D 2C 0C ; Add $0C2C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	inc $0385.w,X		; FE 85 03 ; Increment memory $0385.w,X [Reads: X Index] [Flags: NZ]
	ldy $0385.w,X		; BC 85 03 ; Load Y register $0385.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy #$07.b		; C0 07 ; Compare #$07.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A9.w,X		; 9D A9 03 ; Store accumulator to $03A9.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldy $03A9.w,X		; BC A9 03 ; Load Y register $03A9.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $D1D6.w,Y		; D9 D6 D1 ; Compare accumulator $D1D6.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$03.b		; 49 03 ; Exclusive OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	ldy $03A9.w,X		; BC A9 03 ; Load Y register $03A9.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $D1D6.w,Y		; B9 D6 D1 ; Load $D1D6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	ldy $0380.w,X		; BC 80 03 ; Load Y register $0380.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $DDE5.w,Y		; B9 E5 DD ; Load $DDE5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AF4.w		; 8D F4 0A ; Store accumulator to $0AF4.w [Reads: Accumulator]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D1D4.w,Y		; B9 D4 D1 ; Load $D1D4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $DDDE.w		; AD DE DD ; Load $DDDE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $DDE1.w		; AD E1 DD ; Load $DDE1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $DDD8.w		; AD D8 DD ; Load $DDD8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $DDDB.w		; AD DB DD ; Load $DDDB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0030.w		; 69 30 00 ; Add #$0030.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	jsr $F897.w		; 20 97 F8 ; Jump to subroutine at $F897.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $12		; [PATTERN: Memory clearing operation] 30 12 ; Branch if minus to $30, $12 [Flow: branch]
	cmp #$00F8.w		; C9 F8 00 ; Compare #$00F8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF34C.l		; 8F 4C F3 7E ; Store accumulator (long) $7EF34C.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $A9.b		; 86 A9 ; Store X register to $A9.b [Reads: X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $40FFFF.l,X		; FF FF FF 40 ; Subtract with carry (long,X) $40FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0CFFFC.l,X		; FF FC FF 0C ; Subtract with carry (long,X) $0CFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC000C.l,X		; FF 0C 00 FC ; Subtract with carry (long,X) $FC000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DE000C.l,X		; FF 0C 00 DE ; Subtract with carry (long,X) $DE000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($03.b),Y		; B1 03 ; Load accumulator ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $3C		; 10 3C ; Branch if plus to $10, $3C [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; [PATTERN: Memory clearing operation] 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $02E1.w		; 9C E1 02 ; Store zero to $02E1.w
	stz $50.b		; [PATTERN: Memory clearing operation] 64 50 ; Store zero to $50.b
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $4B.b		; 64 4B ; Store zero to $4B.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $02E0.w		; 8C E0 02 ; Store Y register to $02E0.w [Reads: Y Index]
	sty $56.b		; 84 56 ; Store Y register to $56.b [Reads: Y Index]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $0ED6DD.l		; 22 DD D6 0E ; Jump to subroutine long $0ED6DD.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FB3.w		; AD B3 0F ; Load $0FB3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	lda $035F.w		; AD 5F 03 ; Load $035F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$00D0.w		; A9 D0 00 ; Load #$00D0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0A20.w		; 69 20 0A ; Add #$0A20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $0C5E.w,X		; BC 5E 0C ; Load Y register $0C5E.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $D37D.w,Y		; B9 7D D3 ; Load $D37D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $D37A.w,Y		; B9 7A D3 ; Load $D37A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D38C.w,X		; 7D 8C D3 ; Add $D38C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D3A4.w,X		; 7D A4 D3 ; Add $D3A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $D380.w,X		; BD 80 D3 ; Load $D380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	inc $0A.b		; E6 0A ; Increment $0A.b [Reads: Direct Page] [Flags: NZ]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $B7		; D0 B7 ; Branch if not equal to $D0, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; [PATTERN: Memory clearing operation] 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $82, $44, $FF		; 82 44 FF ; Branch always long to $82, $44, $FF [Flow: branch]
	stx $87.b		; 86 87 ; Store X register to $87.b [Reads: X Index]
	stx $97.b,Y		; 96 97 ; Store X register $97.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $0AFE.w,X		; FE FE 0A ; Increment memory $0AFE.w,X [Reads: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FE0A.w,X		; FE 0A FE ; Increment memory $FE0A.w,X [Reads: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	stz $08.b		; 64 08 ; Store zero to $08.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D4D9.w,X		; 7D D9 D4 ; Add $D4D9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $D4E9.w,X		; 7D E9 D4 ; Add $D4E9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D4F9.w,X		; 7D F9 D4 ; Add $D4F9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $D509.w,X		; 7D 09 D5 ; Add $D509.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $D4B9.w,X		; BD B9 D4 ; Load $D4B9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $D4C9.w,X		; BD C9 D4 ; Load $D4C9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $B9		; D0 B9 ; Branch if not equal to $D0, $B9 [Flow: branch]
	.db $82, $BC, $D1		; 82 BC D1 ; Branch always long to $82, $BC, $D1 [Flow: branch]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $B78080.l,X		; FF 80 80 B7 ; Subtract with carry (long,X) $B78080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	sbc $B7B7FF.l,X		; FF FF B7 B7 ; Subtract with carry (long,X) $B7B7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B78080.l,X		; FF 80 80 B7 ; Subtract with carry (long,X) $B78080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	sbc $B7B7FF.l,X		; FF FF B7 B7 ; Subtract with carry (long,X) $B7B7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B78080.l,X		; FF 80 80 B7 ; Subtract with carry (long,X) $B78080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	sbc $B7B7FF.l,X		; FF FF B7 B7 ; Subtract with carry (long,X) $B7B7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B78080.l,X		; FF 80 80 B7 ; Subtract with carry (long,X) $B78080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EEEAFF.l,X		; FF FF EA EE ; Subtract with carry (long,X) $EEEAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EFEEEA.l,X		; FF EA EE EF ; Subtract with carry (long,X) $EFEEEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	nop		; EA ; No operation
	inc $EFEF.w		; EE EF EF ; Increment $EFEF.w [Flags: NZ]
	sbc $2823FF.l,X		; FF FF 23 28 ; Subtract with carry (long,X) $2823FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $252823.l,X		; FF 23 28 25 ; Subtract with carry (long,X) $252823.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $28.b,S		; 23 28 ; AND accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0702FF.l,X		; FF FF 02 07 ; Subtract with carry (long,X) $0702FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $130702.l,X		; FF 02 07 13 ; Subtract with carry (long,X) $130702.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0702FF.l,X		; FF FF 02 07 ; Subtract with carry (long,X) $0702FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $130702.l,X		; FF 02 07 13 ; Subtract with carry (long,X) $130702.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0A05FF.l,X		; FF FF 05 0A ; Subtract with carry (long,X) $0A05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC0A05.l,X		; FF 05 0A FC ; Subtract with carry (long,X) $FC0A05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($FFFC.w,X)		; FC FC FF ; Jump to subroutine indirect indexed ($FFFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF0500.l,X		; FF 00 05 FF ; Subtract with carry (long,X) $FF0500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0500.w		; 0E 00 05 ; Arithmetic shift left $0500.w [Flags: NCZ]
	asl $FF0E.w		; 0E 0E FF ; Arithmetic shift left $FF0E.w [Flags: NCZ]
	sbc $FFE5E9.l,X		; FF E9 E5 FF ; Subtract with carry (long,X) $FFE5E9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$E5.b		; E9 E5 ; Subtract #$E5.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	nop		; EA ; No operation
	sbc #$E5.b		; E9 E5 ; Subtract #$E5.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	nop		; EA ; No operation
	nop		; EA ; No operation
	sbc $2320FF.l,X		; FF FF 20 23 ; Subtract with carry (long,X) $2320FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1E2320.l,X		; FF 20 23 1E ; Subtract with carry (long,X) $1E2320.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $1E23.w		; 20 23 1E ; Jump to subroutine at $1E23.w [Writes: Stack Pointer] [Flow: call]
	asl $FFFF.w,X		; 1E FF FF ; Arithmetic shift left $FFFF.w,X [Reads: X Index] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $DE.b		; 24 DE ; Test bits $DE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda ($03.b),Y		; B1 03 ; Load accumulator ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy $0C72.w,X		; BC 72 0C ; Load Y register $0C72.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C5E.w,X		; 7D 5E 0C ; Add $0C5E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D656.w,Y		; 79 56 D6 ; Add $D656.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $D596.w,X		; BD 96 D5 ; Load $D596.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $4A		; F0 4A ; Branch if equal to $F0, $4A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $D5F6.w,X		; BD F6 D5 ; Load $D5F6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $D626.w,X		; BD 26 D6 ; Load $D626.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $D596.w,X		; BD 96 D5 ; Load $D596.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $D5C6.w,X		; BD C6 D5 ; Load $D5C6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $AA		; 10 AA ; Branch if plus to $10, $AA [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($FF.b)		; 92 FF ; Store accumulator (indirect) ($FF.b) [Reads: Direct Page, Accumulator]
	sbc $8C8CFF.l,X		; FF FF 8C 8C ; Subtract with carry (long,X) $8C8CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $D68C.w		; 8C 8C D6 ; Store Y register to $D68C.w [Reads: Y Index]
	dec $D6.b,X		; D6 D6 ; Decrement memory $D6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $93.b,X		; D6 93 ; Decrement memory $93.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($D6.b,S),Y		; 93 D6 ; Store accumulator (stack relative indirect indexed) ($D6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	dec $D6.b,X		; D6 D6 ; Decrement memory $D6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $D7.b,X		; D6 D7 ; Decrement memory $D7.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $80FFFF.l,X		; FF FF FF 80 ; Subtract with carry (long,X) $80FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $22FFFF.l,X		; FF FF FF 22 ; Subtract with carry (long,X) $22FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $22FFFF.l,X		; FF FF FF 22 ; Subtract with carry (long,X) $22FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $A2, $E2		; 62 A2 E2 ; Push effective relative address $62, $A2, $E2 [Writes: Stack Pointer]
	bit $64.b		; 24 64 ; Test bits $64.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $E4.b		; A4 E4 ; Load $E4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsl $E2A262.l		; 22 62 A2 E2 ; Jump to subroutine long $E2A262.l [Writes: Stack Pointer] [Flow: call]
	jsl $E2A262.l		; 22 62 A2 E2 ; Jump to subroutine long $E2A262.l [Writes: Stack Pointer] [Flow: call]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC0000.l,X		; FF 00 00 FC ; Subtract with carry (long,X) $FC0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $B1DE.w		; 2C DE B1 ; Test bits $B1DE.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$9E.b]		; 27 9E ; AND accumulator with memory (long) [$9E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($03.b),Y		; B1 03 ; Load accumulator ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D704.w,Y		; B9 04 D7 ; Load $D704.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $90, $00		; 82 90 00 ; Branch always long to $82, $90, $00 [Flow: branch]
	jsl $0FF67B.l		; 22 7B F6 0F ; Jump to subroutine long $0FF67B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $65		; F0 65 ; Branch if equal to $F0, $65 [Flow: branch]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $04.b		; 84 04 ; Store Y register to $04.b [Reads: Y Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $D70A.w,X		; BD 0A D7 ; Load $D70A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D742.w,X		; 7D 42 D7 ; Add $D742.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D77A.w,X		; 7D 7A D7 ; Add $D77A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $D70A.w,X		; BD 0A D7 ; Load $D70A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $D726.w,X		; BD 26 D7 ; Load $D726.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $B7		; D0 B7 ; Branch if not equal to $D0, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $02031E.l,X		; 1F 1E 03 02 ; Logical OR long $02031E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	and ($30.b),Y		; 31 30 ; AND accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $001C2E.l		; 2F 2E 1C 00 ; AND accumulator with memory (long) $001C2E.l [Writes: Accumulator] [Flags: NZ]
	inc $18FF.w,X		; FE FF 18 ; Increment memory $18FF.w,X [Reads: X Index] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $190015.l,X		; FF 15 00 19 ; Subtract with carry (long,X) $190015.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9D2BA9.l,X		; FF A9 2B 9D ; Subtract with carry (long,X) $9D2BA9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $2FA5.w		; 0C A5 2F ; Test and set bits $2FA5.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D84D.w,Y		; B9 4D D8 ; Load $D84D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l		; 8F 00 58 7F ; Store accumulator (long) $7F5800.l [Reads: Accumulator]
	lda $D84E.w,Y		; B9 4E D8 ; Load $D84E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5801.l		; 8F 01 58 7F ; Store accumulator (long) $7F5801.l [Reads: Accumulator]
	lda $D84F.w,Y		; B9 4F D8 ; Load $D84F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5802.l		; 8F 02 58 7F ; Store accumulator (long) $7F5802.l [Reads: Accumulator]
	lda $D850.w,Y		; B9 50 D8 ; Load $D850.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5803.l		; 8F 03 58 7F ; Store accumulator (long) $7F5803.l [Reads: Accumulator]
	sta $7F5804.l		; 8F 04 58 7F ; Store accumulator (long) $7F5804.l [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$4C.b		; A9 4C ; Load #$4C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; [PATTERN: Memory clearing operation] 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7F5810.l		; 8F 10 58 7F ; Store accumulator (long) $7F5810.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7F580E.l		; 8F 0E 58 7F ; Store accumulator (long) $7F580E.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D85D.w,Y		; 79 5D D8 ; Add $D85D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D865.w,Y		; 79 65 D8 ; Add $D865.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	cmp [$B7.b],Y		; D7 B7 ; Compare accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	lda [$80.b],Y		; B7 80 ; Load accumulator (long indexed) [$80.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $BD.b,S		; 83 BD ; Store accumulator (stack relative) $BD.b,S [Reads: Stack Pointer, Accumulator]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $47, $01		; 82 47 01 ; Branch always long to $82, $47, $01 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	.db $82, $20, $01		; 82 20 01 ; Branch always long to $82, $20, $01 [Flow: branch]
	cmp #$42.b		; C9 42 ; Compare #$42.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	cmp #$46.b		; C9 46 ; Compare #$46.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
	jsl $08DA17.l		; 22 17 DA 08 ; Jump to subroutine long $08DA17.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $D8F6.w,X		; BD F6 D8 ; Load $D8F6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $B6		; 10 B6 ; Branch if plus to $10, $B6 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $7F5804.l		; AF 04 58 7F ; Load long $7F5804.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$09.b		; 69 09 ; Add #$09.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5804.l		; 8F 04 58 7F ; Store accumulator (long) $7F5804.l [Reads: Accumulator]
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F5804.l		; AF 04 58 7F ; Load long $7F5804.l into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
	jsl $08DA17.l		; 22 17 DA 08 ; Jump to subroutine long $08DA17.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $D8FA.w,X		; BD FA D8 ; Load $D8FA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F5810.l		; 6F 10 58 7F ; Add with carry (long) $7F5810.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFC.w		; 69 FC FF ; Add #$FFFC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F580E.l		; 6F 0E 58 7F ; Add with carry (long) $7F580E.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFC.w		; 69 FC FF ; Add #$FFFC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $04.b		; 84 04 ; Store Y register to $04.b [Reads: Y Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $82, $7E, $FD		; 82 7E FD ; Branch always long to $82, $7E, $FD [Flow: branch]
	sta ($FF.b)		; 92 FF ; Store accumulator (indirect) ($FF.b) [Reads: Direct Page, Accumulator]
	sbc $8C8CFF.l,X		; FF FF 8C 8C ; Subtract with carry (long,X) $8C8CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $D68C.w		; 8C 8C D6 ; Store Y register to $D68C.w [Reads: Y Index]
	dec $D6.b,X		; D6 D6 ; Decrement memory $D6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $93.b,X		; D6 93 ; Decrement memory $93.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($22.b,S),Y		; 93 22 ; Store accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $22FFFF.l,X		; FF FF FF 22 ; Subtract with carry (long,X) $22FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $A2, $E2		; 62 A2 E2 ; Push effective relative address $62, $A2, $E2 [Writes: Stack Pointer]
	bit $64.b		; 24 64 ; Test bits $64.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $E4.b		; A4 E4 ; Load $E4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsl $E2A262.l		; 22 62 A2 E2 ; Jump to subroutine long $E2A262.l [Writes: Stack Pointer] [Flow: call]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $050000.l,X		; FF 00 00 05 ; Subtract with carry (long,X) $050000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8FFFA.l,X		; FF FA FF F8 ; Subtract with carry (long,X) $F8FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CFFFD.l,X		; FF FD FF 0C ; Subtract with carry (long,X) $0CFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8FFF6.l,X		; FF F6 FF F8 ; Subtract with carry (long,X) $F8FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $160009.l,X		; FF 09 00 16 ; Subtract with carry (long,X) $160009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$11.b		; C9 11 ; Compare #$11.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $E1, $00		; 82 E1 00 ; Branch always long to $82, $E1, $00 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $C5, $00		; 82 C5 00 ; Branch always long to $82, $C5, $00 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $DAE4.w,Y		; B9 E4 DA ; Load $DAE4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $DB04.w,Y		; B9 04 DB ; Load $DB04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $04.b		; 84 04 ; Store Y register to $04.b [Reads: Y Index]
	lda $DA84.w,X		; BD 84 DA ; Load $DA84.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DAA4.w,X		; 7D A4 DA ; Add $DAA4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DAC4.w,X		; 7D C4 DA ; Add $DAC4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $DA84.w,X		; BD 84 DA ; Load $DA84.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $DA94.w,X		; BD 94 DA ; Load $DA94.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $B7		; D0 B7 ; Branch if not equal to $D0, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$10.b]		; 27 10 ; AND accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $040D0E.l		; 0F 0E 0D 04 ; OR accumulator with memory (long) $040D0E.l [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $DC0E.w,Y		; B9 0E DC ; Load $DC0E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l		; 8F 00 58 7F ; Store accumulator (long) $7F5800.l [Reads: Accumulator]
	lda $DC0F.w,Y		; B9 0F DC ; Load $DC0F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5801.l		; 8F 01 58 7F ; Store accumulator (long) $7F5801.l [Reads: Accumulator]
	lda $DC10.w,Y		; B9 10 DC ; Load $DC10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5802.l		; 8F 02 58 7F ; Store accumulator (long) $7F5802.l [Reads: Accumulator]
	lda $DC11.w,Y		; B9 11 DC ; Load $DC11.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5803.l		; [PATTERN: Memory clearing operation] 8F 03 58 7F ; Store accumulator (long) $7F5803.l [Reads: Accumulator]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	stz $0394.w,X		; 9E 94 03 ; Store zero to $0394.w,X [Reads: X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$08.b		; [PATTERN: Memory clearing operation] A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $800E.w		; 20 0E 80 ; Jump to subroutine at $800E.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $86, $00		; 82 86 00 ; Branch always long to $82, $86, $00 [Flow: branch]
	lda $0303.w		; AD 03 03 ; Load $0303.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $7EF37B.l		; AF 7B F3 7E ; Load long $7EF37B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $DC1E.w,Y		; B9 1E DC ; Load $DC1E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	dec $0394.w,X		; DE 94 03 ; Decrement memory $0394.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EF36E.l		; 8F 6E F3 7E ; Store accumulator (long) $7EF36E.l [Reads: Accumulator]
	bit $F4.b		; [PATTERN: Memory clearing operation] 24 F4 ; Test bits $F4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $50, $0B		; 50 0B ; Branch if overflow clear to $50, $0B [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	dec $03A4.w,X		; DE A4 03 ; Decrement memory $03A4.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7F5810.l		; 8F 10 58 7F ; Store accumulator (long) $7F5810.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7F580E.l		; 8F 0E 58 7F ; Store accumulator (long) $7F580E.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $800E.w		; 20 0E 80 ; Jump to subroutine at $800E.w [Writes: Stack Pointer] [Flow: call]
	stx $74.b		; 86 74 ; Store X register to $74.b [Reads: X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7F5808.l		; AF 08 58 7F ; Load long $7F5808.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $7F5800.l,X		; BF 00 58 7F ; Load long $7F5800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
	jsl $08DA17.l		; 22 17 DA 08 ; Jump to subroutine long $08DA17.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $D8F6.w,X		; BD F6 D8 ; Load $D8F6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx $74.b		; A6 74 ; Load $74.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	stz $0C72.w,X		; 9E 72 0C ; Store zero to $0C72.w,X [Reads: X Index]
	jsr $8D68.w		; 20 68 8D ; Jump to subroutine at $8D68.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0FF764.l		; 22 64 F7 0F ; Jump to subroutine long $0FF764.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C86.w,X		; 9D 86 0C ; Store accumulator to $0C86.w,X [Reads: Accumulator, X Index]
	jsl $0FF8FF.l		; 22 FF F8 0F ; Jump to subroutine long $0FF8FF.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	jsl $002E2E.l		; 22 2E 2E 00 ; Jump to subroutine long $002E2E.l [Writes: Stack Pointer] [Flow: call]
	tsb $0014.w		; 0C 14 00 ; Test and set bits $0014.w [Reads: Accumulator] [Flags: Z]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx #$A5.b		; E0 A5 ; Compare #$A5.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($F0.b),Y		; 11 F0 ; OR accumulator with memory ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $82.b,S		; 03 82 ; OR accumulator with stack relative $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $01.b,X		; 74 01 ; Store zero to $01.b,X [Reads: X Index]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$FFF0.w		; A9 F0 FF ; Load #$FFF0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0394.w,X		; DE 94 03 ; Decrement memory $0394.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802E.w		; 20 2E 80 ; Jump to subroutine at $802E.w [Writes: Stack Pointer] [Flow: call]
	ldy $0385.w,X		; BC 85 03 ; Load Y register $0385.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	inc $0FC1.w		; EE C1 0F ; Increment $0FC1.w [Flags: NZ]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $82, $AC, $00		; 82 AC 00 ; Branch always long to $82, $AC, $00 [Flow: branch]
	.db $82, $A7, $00		; 82 A7 00 ; Branch always long to $82, $A7, $00 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F76B.w		; 20 6B F7 ; Jump to subroutine at $F76B.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $F6		; 90 F6 ; Branch if carry clear to $90, $F6 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $59		; D0 59 ; Branch if not equal to $D0, $59 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $E6		; F0 E6 ; Branch if equal to $F0, $E6 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $E2		; F0 E2 ; Branch if equal to $F0, $E2 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $DE		; F0 DE ; Branch if equal to $F0, $DE [Flow: branch]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $D8		; F0 D8 ; Branch if equal to $F0, $D8 [Flow: branch]
	lda $02DA.w		; AD DA 02 ; Load $02DA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $037E.w		; 0D 7E 03 ; Logical OR $037E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $03EF.w		; 0D EF 03 ; Logical OR $03EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $037B.w		; 0D 7B 03 ; Logical OR $037B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $CA		; D0 CA ; Branch if not equal to $D0, $CA [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $C5		; 30 C5 ; Branch if minus to $30, $C5 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$41.b		; C9 41 ; Compare #$41.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E3		; 10 E3 ; Branch if plus to $10, $E3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$00.b		; [PATTERN: Memory clearing operation] A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	sta $02F9.w		; 8D F9 02 ; Store accumulator to $02F9.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; [PATTERN: Memory clearing operation] 9C 1C 01 ; Store zero to $011C.w
.ACCU 8
	sep #$20		; E2 20
	jsl $07F1A3.l		; 22 A3 F1 07 ; Jump to subroutine long $07F1A3.l [Writes: Stack Pointer] [Flow: call]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	stz $03F8.w		; 9C F8 03 ; Store zero to $03F8.w
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $02DA.w		; 8D DA 02 ; Store accumulator to $02DA.w [Reads: Accumulator]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $02F9.w		; 8D F9 02 ; Store accumulator to $02F9.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	inc $0FC1.w		; EE C1 0F ; Increment $0FC1.w [Flags: NZ]
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sta $03FD.w		; 8D FD 03 ; Store accumulator to $03FD.w [Reads: Accumulator]
	.db $80, $67		; 80 67 ; Branch always to $80, $67 [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $0FC1.w		; EE C1 0F ; Increment $0FC1.w [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $3B		; [PATTERN: Memory clearing operation] 90 3B ; Branch if carry clear to $90, $3B [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $4B.b		; 64 4B ; Store zero to $4B.b
	stz $02F9.w		; [PATTERN: Memory clearing operation] 9C F9 02 ; Store zero to $02F9.w
	stz $02DA.w		; 9C DA 02 ; Store zero to $02DA.w
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $03FD.w		; 9C FD 03 ; Store zero to $03FD.w
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A0.b		; 06 A0 ; Arithmetic shift left $A0.b [Reads: Direct Page] [Flags: NCZ]
	ora $E2.b,S		; 03 E2 ; OR accumulator with stack relative $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $1C80.w		; 20 80 1C ; Jump to subroutine at $1C80.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	inc $0380.w,X		; FE 80 03 ; Increment memory $0380.w,X [Reads: X Index] [Flags: NZ]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	ldy $0380.w,X		; BC 80 03 ; Load Y register $0380.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $DDE4.w,Y		; B9 E4 DD ; Load $DDE4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AF4.w		; 8D F4 0A ; Store accumulator to $0AF4.w [Reads: Accumulator]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $DDDE.w,X		; BD DE DD ; Load $DDDE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $DDE1.w,X		; BD E1 DD ; Load $DDE1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $DDD8.w,X		; BD D8 DD ; Load $DDD8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $DDDB.w,X		; BD DB DD ; Load $DDDB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $08.b		; E4 08 ; Compare $08.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $D0, $B3		; D0 B3 ; Branch if not equal to $D0, $B3 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$001C.w		; 69 1C 00 ; Add #$001C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	jsr $F897.w		; 20 97 F8 ; Jump to subroutine at $F897.w [Writes: Stack Pointer] [Flow: call]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$001C.w		; 69 1C 00 ; Add #$001C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF9.w		; 69 F9 FF ; Add #$FFF9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	jsr $F897.w		; 20 97 F8 ; Jump to subroutine at $F897.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	cmp #$0130.w		; C9 30 01 ; Compare #$0130.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1C		; 90 1C ; Branch if carry clear to $90, $1C [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $11001F.l,X		; FF 1F 00 11 ; Subtract with carry (long,X) $11001F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8B0017.l,X		; FF 17 00 8B ; Subtract with carry (long,X) $8B0017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $F631.w		; 20 31 F6 ; Jump to subroutine at $F631.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $D6, $00		; 82 D6 00 ; Branch always long to $82, $D6, $00 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	lda $02EC.w		; AD EC 02 ; Load $02EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $03		; [PATTERN: Memory clearing operation] D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	jsl $09AD30.l		; 22 30 AD 09 ; Jump to subroutine long $09AD30.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $0646.w		; [PATTERN: Memory clearing operation] 9C 46 06 ; Store zero to $0646.w
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	.db $82, $A7, $00		; 82 A7 00 ; Branch always long to $82, $A7, $00 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $CD		; 10 CD ; Branch if plus to $10, $CD [Flow: branch]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $800E.w		; 20 0E 80 ; Jump to subroutine at $800E.w [Writes: Stack Pointer] [Flow: call]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C2C.w,X		; [PATTERN: Memory clearing operation] 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $03B1.w,X		; 9E B1 03 ; Store zero to $03B1.w,X [Reads: X Index]
	stz $039F.w,X		; 9E 9F 03 ; Store zero to $039F.w,X [Reads: X Index]
	stz $03A4.w,X		; 9E A4 03 ; Store zero to $03A4.w,X [Reads: X Index]
	stz $03C5.w,X		; 9E C5 03 ; Store zero to $03C5.w,X [Reads: X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0394.w,X		; [PATTERN: Memory clearing operation] 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	stz $0380.w,X		; [PATTERN: Memory clearing operation] 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	stz $03EA.w,X		; 9E EA 03 ; Store zero to $03EA.w,X [Reads: X Index]
	stz $0BF0.w,X		; 9E F0 0B ; Store zero to $0BF0.w,X [Reads: X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A9.w,X		; 9D A9 03 ; Store accumulator to $03A9.w,X [Reads: Accumulator, X Index]
	stz $03D5.w,X		; 9E D5 03 ; Store zero to $03D5.w,X [Reads: X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	jsl $099E44.l		; 22 44 9E 09 ; Jump to subroutine long $099E44.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $2A		; 90 2A ; Branch if carry clear to $90, $2A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	.db $80, $2F		; 80 2F ; Branch always to $80, $2F [Flow: branch]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E068.w,Y		; 79 68 E0 ; Add $E068.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $E069.w,Y		; 79 69 E0 ; Add $E069.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E070.w,Y		; 79 70 E0 ; Add $E070.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $E071.w,Y		; 79 71 E0 ; Add $E071.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	jsr $E191.w		; 20 91 E1 ; Jump to subroutine at $E191.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	jsl $07B0E9.l		; 22 E9 B0 07 ; Jump to subroutine long $07B0E9.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $080000.l,X		; FF 00 00 08 ; Subtract with carry (long,X) $080000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080000.l,X		; FF 00 00 08 ; Subtract with carry (long,X) $080000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080000.l,X		; FF 00 00 08 ; Subtract with carry (long,X) $080000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080000.l,X		; FF 00 00 08 ; Subtract with carry (long,X) $080000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFF0.l,X		; FF F0 FF F0 ; Subtract with carry (long,X) $F0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $100010.l,X		; FF 10 00 10 ; Subtract with carry (long,X) $100010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $F003.w		; F4 03 F0 ; Push absolute address $F003.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $62, $A0, $16		; 62 A0 16 ; Push effective relative address $62, $A0, $16 [Writes: Stack Pointer]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E161.w,Y		; 79 61 E1 ; Add $E161.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E162.w,Y		; 79 62 E1 ; Add $E162.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E179.w,Y		; 79 79 E1 ; Add $E179.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E17A.w,Y		; 79 7A E1 ; Add $E17A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $8A26.w		; 20 26 8A ; Jump to subroutine at $8A26.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$B6.b		; C9 B6 ; Compare #$B6.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$BC.b		; C9 BC ; Compare #$BC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $BA		; 10 BA ; Branch if plus to $10, $BA [Flow: branch]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	jsl $098DD2.l		; 22 D2 8D 09 ; Jump to subroutine long $098DD2.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0F00.w,Y		; 19 00 0F ; OR accumulator with memory $0F00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0EF0.w,Y		; 19 F0 0E ; OR accumulator with memory $0EF0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	lda $0CAA.w,Y		; B9 AA 0C ; Load $0CAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0F20.w,Y		; D9 20 0F ; Compare accumulator $0F20.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cmp #$90.b		; C9 90 ; Compare #$90.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $E23D.w		; 20 3D E2 ; Jump to subroutine at $E23D.w [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E2CA.w		; 20 CA E2 ; Jump to subroutine at $E2CA.w [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $0683EA.l		; 22 EA 83 06 ; Jump to subroutine long $0683EA.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsl $0683E6.l		; 22 E6 83 06 ; Jump to subroutine long $0683E6.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $79		; 90 79 ; Branch if carry clear to $90, $79 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0DB0.w,Y		; B9 B0 0D ; Load $0DB0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $67		; 90 67 ; Branch if carry clear to $90, $67 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0F10.w,Y		; B9 10 0F ; Load $0F10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Y Index, Accumulator]
	lda $0DE0.w,Y		; B9 E0 0D ; Load $0DE0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Y Index, Accumulator]
	lda $0BA0.w,Y		; B9 A0 0B ; Load $0BA0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $029E.w,X		; FD 9E 02 ; Subtract with carry $029E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F30.w,Y		; 99 30 0F ; Store accumulator to $0F30.w,Y [Reads: Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F40.w,Y		; 99 40 0F ; Store accumulator to $0F40.w,Y [Reads: Y Index, Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $06ECB7.l		; 22 B7 EC 06 ; Jump to subroutine long $06ECB7.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $029E.w,X		; FD 9E 02 ; Subtract with carry $029E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80008.l,X		; FF 08 00 F8 ; Subtract with carry (long,X) $F80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFF8.l,X		; FF F8 FF 08 ; Subtract with carry (long,X) $08FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $03.b,X		; 94 03 ; Store Y register $03.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $10, $8E		; 10 8E ; Branch if plus to $10, $8E [Flow: branch]
	stz $0394.w,X		; 9E 94 03 ; Store zero to $0394.w,X [Reads: X Index]
	lda $03C5.w,X		; BD C5 03 ; Load $03C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $9976.w		; 20 76 99 ; Jump to subroutine at $9976.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $9A6A.w		; 20 6A 9A ; Jump to subroutine at $9A6A.w [Writes: Stack Pointer] [Flow: call]
	jsr $9A4F.w		; 20 4F 9A ; Jump to subroutine at $9A4F.w [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
	jsr $9BEF.w		; 20 EF 9B ; Jump to subroutine at $9BEF.w [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $09		; 30 09 ; Branch if minus to $30, $09 [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0646.w		; 9C 46 06 ; Store zero to $0646.w
	.db $82, $8C, $00		; 82 8C 00 ; Branch always long to $82, $8C, $00 [Flow: branch]
	lda $03F4.w		; AD F4 03 ; Load $03F4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $76		; F0 76 ; Branch if equal to $F0, $76 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E335.w,Y		; 79 35 E3 ; Add $E335.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E336.w,Y		; 79 36 E3 ; Add $E336.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E34D.w,Y		; 79 4D E3 ; Add $E34D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E34E.w,Y		; 79 4E E3 ; Add $E34E.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $8A26.w		; 20 26 8A ; Jump to subroutine at $8A26.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$B6.b		; C9 B6 ; Compare #$B6.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$BC.b		; C9 BC ; Compare #$BC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpy #$18.b		; C0 18 ; Compare #$18.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $36		; B0 36 ; Branch if carry set to $B0, $36 [Flow: branch]
	.db $80, $B3		; 80 B3 ; Branch always to $80, $B3 [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	jsl $098DD2.l		; 22 D2 8D 09 ; Jump to subroutine long $098DD2.l [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E75C.w		; 20 5C E7 ; Jump to subroutine at $E75C.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0646.w		; EE 46 06 ; Increment $0646.w [Flags: NZ]
	jsr $9C7F.w		; 20 7F 9C ; Jump to subroutine at $9C7F.w [Writes: Stack Pointer] [Flow: call]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	stz $0280.w,X		; 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	jsr $8BCF.w		; 20 CF 8B ; Jump to subroutine at $8BCF.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03D5.w,X		; 9D D5 03 ; Store accumulator to $03D5.w,X [Reads: Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $90, $61		; 90 61 ; Branch if carry clear to $90, $61 [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $57		; F0 57 ; Branch if equal to $F0, $57 [Flow: branch]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	lda $0BF0.w,X		; BD F0 0B ; Load $0BF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy #$F0.b		; A0 F0 ; Load #$F0.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	ldy #$FC.b		; A0 FC ; Load #$FC.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	ldy #$FC.b		; A0 FC ; Load #$FC.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	.db $82, $FC, $00		; 82 FC 00 ; Branch always long to $82, $FC, $00 [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $F8		; 30 F8 ; Branch if minus to $30, $F8 [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $8981.w		; 20 81 89 ; Jump to subroutine at $8981.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $69		; F0 69 ; Branch if equal to $F0, $69 [Flow: branch]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $65		; F0 65 ; Branch if equal to $F0, $65 [Flow: branch]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	cmp #$68.b		; C9 68 ; Compare #$68.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	cmp #$69.b		; C9 69 ; Compare #$69.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$6A.b		; C9 6A ; Compare #$6A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$6B.b		; C9 6B ; Compare #$6B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$B6.b		; C9 B6 ; Compare #$B6.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	cmp #$BC.b		; C9 BC ; Compare #$BC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$B0.b		; C9 B0 ; Compare #$B0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	.db $82, $84, $00		; 82 84 00 ; Branch always long to $82, $84, $00 [Flow: branch]
	.db $82, $46, $FF		; 82 46 FF ; Branch always long to $82, $46, $FF [Flow: branch]
	.db $82, $79, $00		; 82 79 00 ; Branch always long to $82, $79, $00 [Flow: branch]
	stz $0C68.w,X		; 9E 68 0C ; Store zero to $0C68.w,X [Reads: X Index]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $03C5.w,X		; 1D C5 03 ; OR accumulator with memory $03C5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	.db $82, $8D, $00		; 82 8D 00 ; Branch always long to $82, $8D, $00 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$E8.b		; 69 E8 ; Add #$E8.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	.db $82, $5B, $E4		; 82 5B E4 ; Branch always long to $82, $5B, $E4 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $5E		; D0 5E ; Branch if not equal to $D0, $5E [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	.db $82, $4D, $00		; 82 4D 00 ; Branch always long to $82, $4D, $00 [Flow: branch]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0310.w		; 6D 10 03 ; Add $0310.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $0311.w		; 6D 11 03 ; Add $0311.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0312.w		; 6D 12 03 ; Add $0312.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $0313.w		; 6D 13 03 ; Add $0313.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	.db $80, $27		; 80 27 ; Branch always to $80, $27 [Flow: branch]
	jsr $97BE.w		; 20 BE 97 ; Jump to subroutine at $97BE.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $1D		; 30 1D ; Branch if minus to $30, $1D [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $5E.b		; [PATTERN: Memory clearing operation] A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0280.w,X		; 1D 80 02 ; OR accumulator with memory $0280.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	dec $03A9.w,X		; DE A9 03 ; Decrement memory $03A9.w,X [Reads: X Index] [Flags: NZ]
	lda $03A9.w,X		; BD A9 03 ; Load $03A9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	inc $03A9.w,X		; FE A9 03 ; Increment memory $03A9.w,X [Reads: X Index] [Flags: NZ]
	stz $0280.w,X		; 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	jsr $E1F9.w		; 20 F9 E1 ; Jump to subroutine at $E1F9.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03A9.w,X		; 9D A9 03 ; Store accumulator to $03A9.w,X [Reads: Accumulator, X Index]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $A4, $03		; 82 A4 03 ; Branch always long to $82, $A4, $03 [Flow: branch]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	jsr $9CC3.w		; 20 C3 9C ; Jump to subroutine at $9CC3.w [Writes: Stack Pointer] [Flow: call]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy $02EC.w		; CC EC 02 ; Compare $02EC.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0C90.w,X		; BD 90 0C ; Load $0C90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $F90A.w		; 20 0A F9 ; Jump to subroutine at $F90A.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $31		; 80 31 ; Branch always to $80, $31 [Flow: branch]
	lda $0FB3.w		; AD B3 0F ; Load $0FB3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy $02EC.w		; CC EC 02 ; Compare $02EC.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$00D0.w		; A9 D0 00 ; Load #$00D0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0034.w		; A9 34 00 ; Load #$0034.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0A20.w		; 69 20 0A ; Add #$0A20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$3000.w		; A9 00 30 ; Load #$3000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $64.b		; 85 64 ; Store accumulator to $64.b [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $08.b		; 64 08 ; Store zero to $08.b
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	stz $74.b		; 64 74 ; Store zero to $74.b
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E305.w,X		; 7D 05 E3 ; Add $E305.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E31D.w,X		; 7D 1D E3 ; Add $E31D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F702.w		; 20 02 F7 ; Jump to subroutine at $F702.w [Writes: Stack Pointer] [Flow: call]
	lda #$E9.b		; A9 E9 ; Load #$E9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $E2F9.w,X		; BD F9 E2 ; Load $E2F9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $72.b		; 05 72 ; Logical OR $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $B9		; D0 B9 ; Branch if not equal to $D0, $B9 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$11.b		; C0 11 ; Compare #$11.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($92.b),Y		; B1 92 ; Load accumulator ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	iny		; [PATTERN: Memory clearing operation] C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	stz $0646.w		; 9C 46 06 ; Store zero to $0646.w
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	stz $02EC.w		; [PATTERN: Memory clearing operation] 9C EC 02 ; Store zero to $02EC.w
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9C0004.l,X		; FF 04 00 9C ; Subtract with carry (long,X) $9C0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $06.b		; 46 06 ; Logical shift right $06.b [Reads: Direct Page] [Flags: NCZ]
	stz $03DB.w,X		; 9E DB 03 ; Store zero to $03DB.w,X [Reads: X Index]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E74C.w,Y		; 79 4C E7 ; Add $E74C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E74D.w,Y		; 79 4D E7 ; Add $E74D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E754.w,Y		; 79 54 E7 ; Add $E754.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E755.w,Y		; 79 55 E7 ; Add $E755.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0280.w,X		; BD 80 02 ; Load $0280.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $8A26.w		; 20 26 8A ; Jump to subroutine at $8A26.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0280.w,X		; 9D 80 02 ; Store accumulator to $0280.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$25.b		; C9 25 ; Compare #$25.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$3B.b		; C9 3B ; Compare #$3B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $03DB.w,X		; FE DB 03 ; Increment memory $03DB.w,X [Reads: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	lda $03DB.w,X		; BD DB 03 ; Load $03DB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	lda $0394.w,X		; BD 94 03 ; Load $0394.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	lda $03C5.w,X		; BD C5 03 ; Load $03C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $1B, $01		; 82 1B 01 ; Branch always long to $82, $1B, $01 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $038A.w,X		; 9D 8A 03 ; Store accumulator to $038A.w,X [Reads: Accumulator, X Index]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	.db $82, $C0, $00		; 82 C0 00 ; Branch always long to $82, $C0, $00 [Flow: branch]
	cmp $039F.w,X		; DD 9F 03 ; Compare accumulator $039F.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F76B.w		; 20 6B F7 ; Jump to subroutine at $F76B.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $E0		; 90 E0 ; Branch if carry clear to $90, $E0 [Flow: branch]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $EE.b		; C5 EE ; Compare $EE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda $02F1.w		; AD F1 02 ; Load $02F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	jsl $0791B9.l		; 22 B9 91 07 ; Jump to subroutine long $0791B9.l [Writes: Stack Pointer] [Flow: call]
	lda #$32.b		; [PATTERN: Memory clearing operation] A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802E.w		; 20 2E 80 ; Jump to subroutine at $802E.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $7C, $00		; 82 7C 00 ; Branch always long to $82, $7C, $00 [Flow: branch]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	ldy $E7C0.w		; AC C0 E7 ; Load $E7C0.w into Y register [Writes: Y Index] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldy $E7C1.w		; AC C1 E7 ; Load $E7C1.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp $E7C0.w		; CD C0 E7 ; Compare $E7C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	ldy $E7C0.w		; AC C0 E7 ; Load $E7C0.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy $E7C1.w		; AC C1 E7 ; Load $E7C1.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp $E7C0.w		; CD C0 E7 ; Compare $E7C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	jsr $8BCF.w		; 20 CF 8B ; Jump to subroutine at $8BCF.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $1C		; B0 1C ; Branch if carry set to $B0, $1C [Flow: branch]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	inc $038A.w,X		; FE 8A 03 ; Increment memory $038A.w,X [Reads: X Index] [Flags: NZ]
	lda $038A.w,X		; BD 8A 03 ; Load $038A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $E7C2.w,Y		; B9 C2 E7 ; Load $E7C2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $E7D2.w,Y		; B9 D2 E7 ; Load $E7D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda $E7E2.w		; AD E2 E7 ; Load $E7E2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03C5.w,X		; 9D C5 03 ; Store accumulator to $03C5.w,X [Reads: Accumulator, X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FC.b		; C9 FC ; Compare #$FC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $5D		; 90 5D ; Branch if carry clear to $90, $5D [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda $03C5.w,X		; BD C5 03 ; Load $03C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $03C5.w,X		; [PATTERN: Memory clearing operation] 9D C5 03 ; Store accumulator to $03C5.w,X [Reads: Accumulator, X Index]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	stz $0BF0.w,X		; 9E F0 0B ; Store zero to $0BF0.w,X [Reads: X Index]
	stz $03C5.w,X		; 9E C5 03 ; Store zero to $03C5.w,X [Reads: X Index]
	.db $80, $42		; 80 42 ; Branch always to $80, $42 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $E7E2.w,Y		; B9 E2 E7 ; Load $E7E2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FCFFFC.l,X		; FF FC FF FC ; Subtract with carry (long,X) $FCFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFFFC.l,X		; FF FC FF FC ; Subtract with carry (long,X) $FCFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFC.l,X		; FF FC FF FF ; Subtract with carry (long,X) $FFFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $92FFFE.l,X		; FF FE FF 92 ; Subtract with carry (long,X) $92FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9F9F9.l,X		; FF F9 F9 F9 ; Subtract with carry (long,X) $F9F9F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF06.w,Y		; F9 06 FF ; Subtract with carry $FF06.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $C6.b		; 86 C6 ; Store X register to $C6.b [Reads: X Index]
	stx $C6.b		; 86 C6 ; Store X register to $C6.b [Reads: X Index]
	lda $5E.b		; [PATTERN: Memory clearing operation] A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0646.w		; [PATTERN: Memory clearing operation] 9C 46 06 ; Store zero to $0646.w
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	stz $03B1.w,X		; 9E B1 03 ; Store zero to $03B1.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0C5E.w,X		; [PATTERN: Memory clearing operation] 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $039F.w,X		; 9E 9F 03 ; Store zero to $039F.w,X [Reads: X Index]
	stz $03A4.w,X		; 9E A4 03 ; Store zero to $03A4.w,X [Reads: X Index]
	stz $03EA.w,X		; 9E EA 03 ; Store zero to $03EA.w,X [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0308.w		; 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $05.b		; 84 05 ; Store Y register to $05.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	lda $E9A6.w,X		; BD A6 E9 ; Load $E9A6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E98E.w,X		; 7D 8E E9 ; Add $E98E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E99A.w,X		; 7D 9A E9 ; Add $E99A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $E9A6.w,X		; BD A6 E9 ; Load $E9A6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $E9AC.w,X		; BD AC E9 ; Load $E9AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $B7		; D0 B7 ; Branch if not equal to $D0, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	lda $0C7C.w,X		; BD 7C 0C ; Load $0C7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $BD.b		; 85 BD ; Store accumulator to $BD.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$ED.b		; A9 ED ; Load #$ED.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $82, $88, $00		; 82 88 00 ; Branch always long to $82, $88, $00 [Flow: branch]
	stz $02F5.w		; 9C F5 02 ; Store zero to $02F5.w
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Y Index, Accumulator]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Y Index, Accumulator]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Y Index, Accumulator]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $75.b		; A5 75 ; Load $75.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Y Index, Accumulator]
	lda $BD.b		; A5 BD ; Load $BD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $06.b		; 64 06 ; Store zero to $06.b
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $06.b		; 64 06 ; Store zero to $06.b
	lda $7F1FC0.l,X		; BF C0 1F 7F ; Load long $7F1FC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00B0.w		; C9 B0 00 ; Compare #$00B0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	lda $7F2040.l,X		; BF 40 20 7F ; Load long $7F2040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00B0.w		; C9 B0 00 ; Compare #$00B0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	lda $7F1FFF.l,X		; BF FF 1F 7F ; Load long $7F1FFF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00B0.w		; C9 B0 00 ; Compare #$00B0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $EA7F.w,X		; BD 7F EA ; Load $EA7F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Y Index, Accumulator]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E61B.w		; 20 1B E6 ; Jump to subroutine at $E61B.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $81A7.w		; 20 A7 81 ; Jump to subroutine at $81A7.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $029E.w,X		; 7D 9E 02 ; Add $029E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $05.b		; 84 05 ; Store Y register to $05.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FFCC2.l,X		; 7F C2 FC 0F ; Add long $0FFCC2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FFCE2.l,X		; 7F E2 FC 0F ; Add long $0FFCE2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $0FFD02.l,X		; BF 02 FD 0F ; Load long $0FFD02.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $0FFD12.l,X		; BF 12 FD 0F ; Load long $0FFD12.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $FF9C.w		; 9C 9C FF ; Store zero to $FF9C.w
	sbc $B2A5A4.l,X		; FF A4 A5 B2 ; Subtract with carry (long,X) $B2A5A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($E3.b,S),Y		; B3 E3 ; Load accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0000FD.l,X		; FF FD 00 00 ; Subtract with carry (long,X) $0000FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $EBE3.w,X		; BD E3 EB ; Load $EBE3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	lda $EBEF.w,X		; BD EF EB ; Load $EBEF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $EBFB.w,X		; 7D FB EB ; Add $EBFB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $EC07.w,X		; BD 07 EC ; Load $EC07.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $EBE3.w,X		; BD E3 EB ; Load $EBE3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $B9		; D0 B9 ; Branch if not equal to $D0, $B9 [Flow: branch]
	.db $82, $DB, $BA		; 82 DB BA ; Branch always long to $82, $DB, $BA [Flow: branch]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	ldy $AEAC.w		; AC AC AE ; Load $AEAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $BFBF.w		; AE BF BF ; Load $BFBF.w into X register [Writes: X Index] [Flags: NZ]
	sty $FF.b		; 84 FF ; Store Y register to $FF.b [Reads: Y Index]
	sty $C4.b		; 84 C4 ; Store Y register to $C4.b [Reads: Y Index]
	sty $C4.b		; 84 C4 ; Store Y register to $C4.b [Reads: Y Index]
	sty $C4.b		; 84 C4 ; Store Y register to $C4.b [Reads: Y Index]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FB00.w,X)		; FC 00 FB ; Jump to subroutine indirect indexed ($FB00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $0CFD.w,X		; FD FD 0C ; Subtract with carry $0CFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00FF.w		; 0C FF 00 ; Test and set bits $00FF.w [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F904.w,X)		; FC 04 F9 ; Jump to subroutine indirect indexed ($F904.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $F844.w		; 20 44 F8 ; Jump to subroutine at $F844.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8007.w		; 20 07 80 ; Jump to subroutine at $8007.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0351.w		; 8D 51 03 ; Store accumulator to $0351.w [Reads: Accumulator]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$06.b		; E9 06 ; Subtract #$06.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $EC77.w,X		; BD 77 EC ; Load $EC77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	lda $EC8F.w,X		; BD 8F EC ; Load $EC8F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $EC97.w,X		; BD 97 EC ; Load $EC97.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $07.b		; 65 07 ; Add $07.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $EC9F.w,X		; BD 9F EC ; Load $EC9F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $ECA7.w,X		; BD A7 EC ; Load $ECA7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $05.b		; 65 05 ; Add $05.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $EC77.w,X		; BD 77 EC ; Load $EC77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $EC7F.w,X		; BD 7F EC ; Load $EC7F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $EC87.w,X		; BD 87 EC ; Load $EC87.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $B6		; D0 B6 ; Branch if not equal to $D0, $B6 [Flow: branch]
	.db $82, $C9, $B9		; 82 C9 B9 ; Branch always long to $82, $C9, $B9 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $67		; D0 67 ; Branch if not equal to $D0, $67 [Flow: branch]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	jsr $EE57.w		; 20 57 EE ; Jump to subroutine at $EE57.w [Writes: Stack Pointer] [Flow: call]
	lda $038A.w,X		; BD 8A 03 ; Load $038A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $038F.w,X		; BD 8F 03 ; Load $038F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; [PATTERN: Memory clearing operation] A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $3E		; B0 3E ; Branch if carry set to $B0, $3E [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $03E9.w		; 9C E9 03 ; Store zero to $03E9.w
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda $03BA.w,X		; BD BA 03 ; Load $03BA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $03B6.w,X		; BD B6 03 ; Load $03B6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0698.w		; 8D 98 06 ; Store accumulator to $0698.w [Reads: Accumulator]
	ldy #$48.b		; A0 48 ; Load #$48.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0532.w		; C9 32 05 ; Compare #$0532.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	ldy #$60.b		; A0 60 ; Load #$60.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0488.w		; C9 88 04 ; Compare #$0488.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0692.w		; 8D 92 06 ; Store accumulator to $0692.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $02AD5C.l		; 22 5C AD 02 ; Jump to subroutine long $02AD5C.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $F6A4.w		; 20 A4 F6 ; Jump to subroutine at $F6A4.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $EDF9.w,X		; BD F9 ED ; Load $EDF9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $EDFD.w,X		; BD FD ED ; Load $EDFD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$3D.b		; 09 3D ; Logical OR #$3D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $C1		; D0 C1 ; Branch if not equal to $D0, $C1 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $48		; 90 48 ; Branch if carry clear to $90, $48 [Flow: branch]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $44		; B0 44 ; Branch if carry set to $B0, $44 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $3A		; 90 3A ; Branch if carry clear to $90, $3A [Flow: branch]
	cmp $06.b		; C5 06 ; Compare $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $36		; B0 36 ; Branch if carry set to $B0, $36 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
.ACCU 8
	sep #$20		; E2 20
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $A2A0.w		; 8E A0 A2 ; Store X register to $A2A0.w [Reads: X Index]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	sbc $86FFFF.l,X		; FF FF FF 86 ; Subtract with carry (long,X) $86FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $8A.b		; 86 8A ; Store X register to $8A.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EAFFE8.l,X		; FF E8 FF EA ; Subtract with carry (long,X) $EAFFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DBFFFF.l,X		; FF FF FF DB ; Subtract with carry (long,X) $DBFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0FFE0.l,X		; FF E0 FF E0 ; Subtract with carry (long,X) $E0FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFE9.l,X		; FF E9 FF F0 ; Subtract with carry (long,X) $F0FFE9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DBFFF2.l,X		; FF F2 FF DB ; Subtract with carry (long,X) $DBFFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0FFE0.l,X		; FF E0 FF E0 ; Subtract with carry (long,X) $E0FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFE9.l,X		; FF E9 FF F0 ; Subtract with carry (long,X) $F0FFE9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DDFFF2.l,X		; FF F2 FF DD ; Subtract with carry (long,X) $DDFFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E4FFE3.l,X		; FF E3 FF E4 ; Subtract with carry (long,X) $E4FFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFEC.l,X		; FF EC FF F3 ; Subtract with carry (long,X) $F3FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFF5.l,X		; FF F5 FF F3 ; Subtract with carry (long,X) $F3FFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F6FFEB.l,X		; FF EB FF F6 ; Subtract with carry (long,X) $F6FFEB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFFE5.l,X		; FF E5 FF FC ; Subtract with carry (long,X) $FCFFE5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FAFFF0.l,X		; FF F0 FF FA ; Subtract with carry (long,X) $FAFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFE7.l,X		; FF E7 FF F0 ; Subtract with carry (long,X) $F0FFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFFE5.l,X		; FF E5 FF FC ; Subtract with carry (long,X) $FCFFE5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FAFFF0.l,X		; FF F0 FF FA ; Subtract with carry (long,X) $FAFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3FFE7.l,X		; FF E7 FF F3 ; Subtract with carry (long,X) $F3FFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E5FFFB.l,X		; FF FB FF E5 ; Subtract with carry (long,X) $E5FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EAFFF5.l,X		; FF F5 FF EA ; Subtract with carry (long,X) $EAFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFD.l,X		; FF FD FF 00 ; Subtract with carry (long,X) $00FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	ora ($AF.b)		; 12 AF ; OR accumulator with memory (indirect) ($AF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $BD14F0.l,X		; 7F F0 14 BD ; Add long $BD14F0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $C90C.w,X		; 5E 0C C9 ; Logical shift right $C90C.w,X [Reads: X Index] [Flags: NCZ]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	ora $B1DE.w		; 0D DE B1 ; Logical OR $B1DE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7F0008.l,X		; BF 08 00 7F ; Load long $7F0008.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F0008.l,X		; 9F 08 00 7F ; Store accumulator (long,X) $7F0008.l,X [Reads: Accumulator, X Index]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $98, $00		; 82 98 00 ; Branch always long to $82, $98, $00 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0008.l,X		; 9F 08 00 7F ; Store accumulator (long,X) $7F0008.l,X [Reads: Accumulator, X Index]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E4		; D0 E4 ; Branch if not equal to $D0, $E4 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $7F0018.l		; AF 18 00 7F ; Load long $7F0018.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7F0018.l		; 8F 18 00 7F ; Store accumulator (long) $7F0018.l [Reads: Accumulator]
	cmp #$00C8.w		; C9 C8 00 ; Compare #$00C8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	lda #$0098.w		; A9 98 00 ; Load #$0098.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $7F0010.l		; AF 10 00 7F ; Load long $7F0010.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0010.l		; 8F 10 00 7F ; Store accumulator (long) $7F0010.l [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $F624.w		; 20 24 F6 ; Jump to subroutine at $F624.w [Writes: Stack Pointer] [Flow: call]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $7F0018.l		; AF 18 00 7F ; Load long $7F0018.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00A8.w		; C9 A8 00 ; Compare #$00A8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0080.w		; 09 80 00 ; Logical OR #$0080.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F001A.l		; AF 1A 00 7F ; Load long $7F001A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0030.l,X		; 9F 30 00 7F ; Store accumulator (long,X) $7F0030.l,X [Reads: Accumulator, X Index]
	lda $7F0018.l		; AF 18 00 7F ; Load long $7F0018.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0020.l,X		; 9F 20 00 7F ; Store accumulator (long,X) $7F0020.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $7F001A.l		; AF 1A 00 7F ; Load long $7F001A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsr $F624.w		; 20 24 F6 ; Jump to subroutine at $F624.w [Writes: Stack Pointer] [Flow: call]
	ora #$2A.b		; 09 2A ; Logical OR #$2A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $82, $7A, $00		; 82 7A 00 ; Branch always long to $82, $7A, $00 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $EEDE.w,Y		; B9 DE EE ; Load $EEDE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $EEE2.w,Y		; B9 E2 EE ; Load $EEE2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $EEE6.w,Y		; B9 E6 EE ; Load $EEE6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $EEEA.w,Y		; B9 EA EE ; Load $EEEA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7F0020.l,X		; BF 20 00 7F ; Load long $7F0020.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F0030.l,X		; BF 30 00 7F ; Load long $7F0030.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $CD, $FE		; 82 CD FE ; Branch always long to $82, $CD, $FE [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F0010.l		; AF 10 00 7F ; Load long $7F0010.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $EF96.w,X		; BD 96 EF ; Load $EF96.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $08.b		; 64 08 ; Store zero to $08.b
	lda $EEEE.w,X		; BD EE EE ; Load $EEEE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda #$00C8.w		; A9 C8 00 ; Load #$00C8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF36.w,X		; 7D 36 EF ; Add $EF36.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$00A8.w		; A9 A8 00 ; Load #$00A8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF66.w,X		; 7D 66 EF ; Add $EF66.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $EEEE.w,X		; BD EE EE ; Load $EEEE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $EF06.w,X		; BD 06 EF ; Load $EF06.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $EF1E.w,X		; BD 1E EF ; Load $EF1E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $08.b		; E6 08 ; Increment $08.b [Reads: Direct Page] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $AE		; D0 AE ; Branch if not equal to $D0, $AE [Flow: branch]
	.db $82, $E9, $B5		; 82 E9 B5 ; Branch always long to $82, $E9, $B5 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $00FFF0.l,X		; FF F0 FF 00 ; Subtract with carry (long,X) $00FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $100000.l,X		; FF 00 00 10 ; Subtract with carry (long,X) $100000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00018.l,X		; FF 18 00 F0 ; Subtract with carry (long,X) $F00018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $100000.l,X		; FF 00 00 10 ; Subtract with carry (long,X) $100000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$DE.b		; 29 DE ; Logical AND #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9FBD03.l,X		; 9F 03 BD 9F ; Store accumulator (long,X) $9FBD03.l,X [Reads: Accumulator, X Index]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($FE.b,X)		; 21 FE ; Logical AND ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $BD0C.w,X		; 5E 0C BD ; Logical shift right $BD0C.w,X [Reads: X Index] [Flags: NCZ]
	lsr $C90C.w,X		; 5E 0C C9 ; Logical shift right $C90C.w,X [Reads: X Index] [Flags: NCZ]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $2720.w		; 0C 20 27 ; Test and set bits $2720.w [Reads: Accumulator] [Flags: Z]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	lsr $C90C.w,X		; 5E 0C C9 ; Logical shift right $C90C.w,X [Reads: X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9543.w,Y		; B9 43 95 ; Load $9543.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; [PATTERN: Memory clearing operation] 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	stz $64.b		; 64 64 ; Store zero to $64.b
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9E93.w,Y		; B9 93 9E ; Load $9E93.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $954E.w,Y		; B9 4E 95 ; Load $954E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9E8A.w,Y		; B9 8A 9E ; Load $9E8A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F169.w,Y		; 79 69 F1 ; Add $F169.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F17B.w,Y		; 79 7B F1 ; Add $F17B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FB2B.w		; 20 2B FB ; Jump to subroutine at $FB2B.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; [PATTERN: Memory clearing operation] 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	stz $06.b		; 64 06 ; Store zero to $06.b
	stz $07.b		; 64 07 ; Store zero to $07.b
	jsr $A7AB.w		; 20 AB A7 ; Jump to subroutine at $A7AB.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dec $09.b		; C6 09 ; Decrement $09.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $9A		; 10 9A ; Branch if plus to $10, $9A [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $01D1F4.l		; 22 F4 D1 01 ; Jump to subroutine long $01D1F4.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $4749.w		; 4D 49 47 ; Exclusive OR $4749.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$8B.b		; 49 8B ; Exclusive OR #$8B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	.db $82, $33, $01		; 82 33 01 ; Branch always long to $82, $33, $01 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	ldy $0C54.w,X		; [PATTERN: Memory clearing operation] BC 54 0C ; Load Y register $0C54.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $F27C.w,Y		; B9 7C F2 ; Load $F27C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	stz $0294.w,X		; 9E 94 02 ; Store zero to $0294.w,X [Reads: X Index]
	.db $82, $9B, $00		; 82 9B 00 ; Branch always long to $82, $9B, $00 [Flow: branch]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $95, $00		; 82 95 00 ; Branch always long to $82, $95, $00 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $6D		; D0 6D ; Branch if not equal to $D0, $6D [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	lda $039F.w,X		; [PATTERN: Memory clearing operation] BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	stz $0294.w,X		; 9E 94 02 ; Store zero to $0294.w,X [Reads: X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	.db $82, $7D, $00		; 82 7D 00 ; Branch always long to $82, $7D, $00 [Flow: branch]
	cmp #$4F.b		; C9 4F ; Compare #$4F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$8F.b		; C9 8F ; Compare #$8F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0385.w,X		; FE 85 03 ; Increment memory $0385.w,X [Reads: X Index] [Flags: NZ]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8027.w		; 20 27 80 ; Jump to subroutine at $8027.w [Writes: Stack Pointer] [Flow: call]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	dec $0394.w,X		; DE 94 03 ; Decrement memory $0394.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $15		; 10 15 ; Branch if plus to $10, $15 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	lda $0C5E.w,X		; [PATTERN: Memory clearing operation] BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0380.w,X		; BD 80 03 ; Load $0380.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0385.w,X		; BD 85 03 ; Load $0385.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $F27E.w,X		; BD 7E F2 ; Load $F27E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$74.b		; A9 74 ; Load #$74.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $7EC211.l		; AF 11 C2 7E ; Load long $7EC211.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	jsr $F3CF.w		; 20 CF F3 ; Jump to subroutine at $F3CF.w [Writes: Stack Pointer] [Flow: call]
	jsr $F430.w		; 20 30 F4 ; Jump to subroutine at $F430.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $4C		; 10 4C ; Branch if plus to $10, $4C [Flow: branch]
	stz $039F.w,X		; 9E 9F 03 ; Store zero to $039F.w,X [Reads: X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	dec $03B1.w,X		; DE B1 03 ; Decrement memory $03B1.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $B91C.w,Y		; B9 1C B9 ; Load $B91C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $B8F4.w,Y		; B9 F4 B8 ; Load $B8F4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03C2.w,X		; 9D C2 03 ; Store accumulator to $03C2.w,X [Reads: Accumulator, X Index]
	jsr $BAEB.w		; 20 EB BA ; Jump to subroutine at $BAEB.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	lda $020A.w		; AD 0A 02 ; Load $020A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $56.b		; A5 56 ; Load $56.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E0.w		; 8D E0 02 ; Store accumulator to $02E0.w [Reads: Accumulator]
	sty $5D.b		; 84 5D ; Store Y register to $5D.b [Reads: Y Index]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $036B.w		; 9C 6B 03 ; Store zero to $036B.w
	stz $030D.w		; [PATTERN: Memory clearing operation] 9C 0D 03 ; Store zero to $030D.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $0C4A.w		; 9C 4A 0C ; Store zero to $0C4A.w
	stz $0C4B.w		; [PATTERN: Memory clearing operation] 9C 4B 0C ; Store zero to $0C4B.w
	stz $0C4C.w		; 9C 4C 0C ; Store zero to $0C4C.w
	stz $0C4D.w		; 9C 4D 0C ; Store zero to $0C4D.w
	stz $0C4E.w		; 9C 4E 0C ; Store zero to $0C4E.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	dec $039F.w,X		; DE 9F 03 ; Decrement memory $039F.w,X [Reads: X Index] [Flags: NZ]
	lda $039F.w,X		; BD 9F 03 ; Load $039F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	inc $039F.w,X		; FE 9F 03 ; Increment memory $039F.w,X [Reads: X Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	inc $0C54.w,X		; FE 54 0C ; Increment memory $0C54.w,X [Reads: X Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	dec $0380.w,X		; DE 80 03 ; Decrement memory $0380.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0380.w,X		; 9D 80 03 ; Store accumulator to $0380.w,X [Reads: Accumulator, X Index]
	lda $0294.w,X		; BD 94 02 ; Load $0294.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	jsr $90B7.w		; 20 B7 90 ; Jump to subroutine at $90B7.w [Writes: Stack Pointer] [Flow: call]
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $F4D8.w		; 20 D8 F4 ; Jump to subroutine at $F4D8.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $6D.b,X		; F6 6D ; Increment memory $6D.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cpy $F4.b		; C4 F4 ; Compare $F4.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $F5.b,X		; F5 F5 ; Subtract $F5.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $0C4A.w		; AE 4A 0C ; Load $0C4A.w into X register [Writes: X Index] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $F4D2.w,X		; BD D2 F4 ; Load $F4D2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F4D5.w,X		; BD D5 F4 ; Load $F4D5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	jmp ($0000.w)		; 6C 00 00 ; Jump indirect to ($0000.w) [Flow: jump]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	.db $70, $88		; 70 88 ; Branch if overflow set to $70, $88 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldx $035F.w		; AE 5F 03 ; Load $035F.w into X register [Writes: X Index] [Flags: NZ]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $F4EE.w,X		; DD EE F4 ; Compare accumulator $F4EE.w,X [Reads: X Index] [Flags: NCZ]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	lda $F4EE.w,X		; BD EE F4 ; Load $F4EE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $035F.w		; 8E 5F 03 ; Store X register to $035F.w [Reads: X Index]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $035F.w		; 8D 5F 03 ; Store accumulator to $035F.w [Reads: Accumulator]
	inc $0C4A.w		; EE 4A 0C ; Increment $0C4A.w [Flags: NZ]
	stz $039D.w		; 9C 9D 03 ; Store zero to $039D.w
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	cpy $039D.w		; CC 9D 03 ; Compare $039D.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy $039D.w		; CC 9D 03 ; Compare $039D.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $039D.w		; AE 9D 03 ; Load $039D.w into X register [Writes: X Index] [Flags: NZ]
	cmp $F4EE.w,X		; DD EE F4 ; Compare accumulator $F4EE.w,X [Reads: X Index] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	dec $039D.w		; CE 9D 03 ; Decrement $039D.w [Flags: NZ]
	.db $82, $5F, $00		; 82 5F 00 ; Branch always long to $82, $5F, $00 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $70, $88		; 70 88 ; Branch if overflow set to $70, $88 [Flow: branch]
	.db $90, $98		; 90 98 ; Branch if carry clear to $90, $98 [Flow: branch]
	ldy #$AE.b		; A0 AE ; Load #$AE.b into Y register [Writes: Y Index] [Flags: NZ]
	eor $A08E03.l,X		; 5F 03 8E A0 ; Exclusive OR accumulator with memory (long,X) $A08E03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D60A9.l		; 0F A9 60 9D ; OR accumulator with memory (long) $9D60A9.l [Writes: Accumulator] [Flags: NZ]
	bit $200C.w		; 2C 0C 20 ; Test bits $200C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $80, $90		; 80 90 ; Branch always to $80, $90 [Flow: branch]
	ldy $039D.w		; AC 9D 03 ; Load $039D.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $F565.w,Y		; D9 65 F5 ; Compare accumulator $F565.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $90, $17		; 90 17 ; Branch if carry clear to $90, $17 [Flow: branch]
	lda $F565.w,Y		; B9 65 F5 ; Load $F565.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	inc $039D.w		; EE 9D 03 ; Increment $039D.w [Flags: NZ]
	lda $039D.w		; AD 9D 03 ; Load $039D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	inc $0C4A.w		; EE 4A 0C ; Increment $0C4A.w [Flags: NZ]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $039D.w		; AD 9D 03 ; Load $039D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $035F.w		; AE 5F 03 ; Load $035F.w into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C04.w,Y		; 99 04 0C ; Store accumulator to $0C04.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $50, $41		; 50 41 ; Branch if overflow clear to $50, $41 [Flow: branch]
	eor ($42.b),Y		; 51 42 ; Exclusive OR accumulator with memory ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($43.b)		; 52 43 ; Exclusive OR accumulator with memory (indirect) ($43.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($44.b,S),Y		; 53 44 ; XOR accumulator (stack relative indirect indexed) ($44.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvn $55,$45		; 54 45 55 ; Move block negative $55,$45 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $53.b,S		; 43 53 ; Exclusive OR accumulator with stack relative $53.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $56.b		; 46 56 ; Logical shift right $56.b [Reads: Direct Page] [Flags: NCZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $91.b		; 85 91 ; Store accumulator to $91.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $93.b		; 85 93 ; Store accumulator to $93.b [Reads: Accumulator]
	ldx $035F.w		; AE 5F 03 ; Load $035F.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$57.b		; A9 57 ; Load #$57.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $F5B4.w,X		; BD B4 F5 ; Load $F5B4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$5F.b		; A9 5F ; Load #$5F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	lda $F5B5.w,X		; BD B5 F5 ; Load $F5B5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $B6		; 10 B6 ; Branch if plus to $10, $B6 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $09968A.l,X		; BF 8A 96 09 ; Load long $09968A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0FF577.l		; 22 77 F5 0F ; Jump to subroutine long $0FF577.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $30, $23		; 30 23 ; Branch if minus to $30, $23 [Flow: branch]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $806F.w,Y		; B9 6F 80 ; Load $806F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C7C.w,X		; [PATTERN: Memory clearing operation] 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03CA.w,X		; 9D CA 03 ; Store accumulator to $03CA.w,X [Reads: Accumulator, X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0280.w,X		; [PATTERN: Memory clearing operation] 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	stz $028A.w,X		; 9E 8A 02 ; Store zero to $028A.w,X [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: NZ]
	cmp $0C4A.w,X		; DD 4A 0C ; Compare accumulator $0C4A.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $3010.w		; 20 10 30 ; Jump to subroutine at $3010.w [Writes: Stack Pointer] [Flow: call]
	jsr $7CBC.w		; 20 BC 7C ; Jump to subroutine at $7CBC.w [Writes: Stack Pointer] [Flow: call]
	tsb $6DB9.w		; 0C B9 6D ; Test and set bits $6DB9.w [Reads: Accumulator] [Flags: Z]
	inc $85.b,X		; F6 85 ; Increment memory $85.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	adc $64.b		; 65 64 ; Add $64.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $BD.b		; 64 BD ; Store zero to $BD.b
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0C7C.w,X		; BC 7C 0C ; Load Y register $0C7C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $F66D.w,Y		; B9 6D F6 ; Load $F66D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	stz $64.b		; 64 64 ; Store zero to $64.b
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0122.w		; ED 22 01 ; Subtract $0122.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $011E.w		; ED 1E 01 ; Subtract $011E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $F671.w		; 20 71 F6 ; Jump to subroutine at $F671.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$F0.b		; A2 F0 ; Load #$F0.b into X register [Writes: X Index] [Flags: NZ]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F6E1.w		; 20 E1 F6 ; Jump to subroutine at $F6E1.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0180.w		; C9 80 01 ; Compare #$0180.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$00F0.w		; A9 F0 00 ; Load #$00F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
.ACCU 8
	sep #$20		; E2 20
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F72F.w,Y		; 79 2F F7 ; Add $F72F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F739.w,Y		; 79 39 F7 ; Add $F739.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F757.w,Y		; 79 57 F7 ; Add $F757.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	cmp $F743.w,Y		; D9 43 F7 ; Compare accumulator $F743.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $B0, $1C		; B0 1C ; Branch if carry set to $B0, $1C [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F761.w,Y		; 79 61 F7 ; Add $F761.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	cmp $F74D.w,Y		; D9 4D F7 ; Compare accumulator $F74D.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $72.b		; E5 72 ; Subtract $72.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1B		; B0 1B ; Branch if carry set to $B0, $1B [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $74.b		; E5 74 ; Subtract $74.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $0210.w		; 0D 10 02 ; Logical OR $0210.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($000C.w,X)		; FC 0C 00 ; Jump to subroutine indirect indexed ($000C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0E68.w		; 0D 68 0E ; Logical OR $0E68.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $F824.w,Y		; F9 24 F8 ; Subtract with carry $F824.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $F834.w,Y		; D9 34 F8 ; Compare accumulator $F834.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $F82C.w,Y		; F9 2C F8 ; Subtract with carry $F82C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $F83C.w,Y		; D9 3C F8 ; Compare accumulator $F83C.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($286C.w)		; 6C 6C 28 ; Jump indirect to ($286C.w) [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $D8C8C8.l,X		; FF C8 C8 D8 ; Subtract with carry (long,X) $D8C8C8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $DAD9.w,Y		; D9 D9 DA ; Compare accumulator $DAD9.w,Y [Reads: Y Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; [PATTERN: Memory clearing operation] 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $242222.l,X		; FF 22 22 24 ; Subtract with carry (long,X) $242222.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $E0.b		; 64 E0 ; Store zero to $E0.b
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $20C2.w		; 0C C2 20 ; Test and set bits $20C2.w [Reads: Accumulator] [Flags: Z]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E2.b		; [PATTERN: Memory clearing operation] 02 E2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0A8A.w		; 20 8A 0A ; Jump to subroutine at $0A8A.w [Writes: Stack Pointer] [Flow: call]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $74.b		; 64 74 ; Store zero to $74.b
	stz $75.b		; 64 75 ; Store zero to $75.b
	jsr $F702.w		; 20 02 F7 ; Jump to subroutine at $F702.w [Writes: Stack Pointer] [Flow: call]
	lda $F87B.w,X		; BD 7B F8 ; Load $F87B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $F889.w,X		; BD 89 F8 ; Load $F889.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $F87C.w,X		; [PATTERN: Memory clearing operation] BD 7C F8 ; Load $F87C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	stz $74.b		; 64 74 ; Store zero to $74.b
	stz $75.b		; 64 75 ; Store zero to $75.b
	jsr $F702.w		; 20 02 F7 ; Jump to subroutine at $F702.w [Writes: Stack Pointer] [Flow: call]
	lda $F87C.w,X		; BD 7C F8 ; Load $F87C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $F88A.w,X		; BD 8A F8 ; Load $F88A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA90.l		; 22 90 BA 0D ; Jump to subroutine long $0DBA90.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx $02D3.w		; AE D3 02 ; Load $02D3.w into X register [Writes: X Index] [Flags: NZ]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C03.w		; 8D 03 0C ; Store accumulator to $0C03.w [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C17.w		; 8D 17 0C ; Store accumulator to $0C17.w [Reads: Accumulator]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C0D.w		; 8D 0D 0C ; Store accumulator to $0C0D.w [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C21.w		; 8D 21 0C ; Store accumulator to $0C21.w [Reads: Accumulator]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8EED.w		; 20 ED 8E ; Jump to subroutine at $8EED.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	jsr $908B.w		; 20 8B 90 ; Jump to subroutine at $908B.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $9080.w		; 20 80 90 ; Jump to subroutine at $9080.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $2F		; 90 2F ; Branch if carry clear to $90, $2F [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $02D3.w		; EE D3 02 ; Increment $02D3.w [Flags: NZ]
	ldx $02D3.w		; AE D3 02 ; Load $02D3.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1A00.w,X		; 9D 00 1A ; Store accumulator to $1A00.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1A14.w,X		; 9D 14 1A ; Store accumulator to $1A14.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1A28.w,X		; 9D 28 1A ; Store accumulator to $1A28.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1A3C.w,X		; 9D 3C 1A ; Store accumulator to $1A3C.w,X [Reads: Accumulator, X Index]
	ldy $EE.b		; A4 EE ; Load $EE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $F66D.w,Y		; B9 6D F6 ; Load $F66D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1A64.w,X		; 9D 64 1A ; Store accumulator to $1A64.w,X [Reads: Accumulator, X Index]
	.db $82, $67, $FF		; 82 67 FF ; Branch always long to $82, $67, $FF [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $90.b		; 65 90 ; Add $90.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldx $0FB3.w		; AE B3 0F ; Load $0FB3.w into X register [Writes: X Index] [Flags: NZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	cmp #$0900.w		; C9 00 09 ; Compare #$0900.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	cmp #$08E0.w		; C9 E0 08 ; Compare #$08E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $27		; 90 27 ; Branch if carry clear to $90, $27 [Flow: branch]
	lda #$0820.w		; A9 20 08 ; Load #$0820.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	cmp #$09D0.w		; C9 D0 09 ; Compare #$09D0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	lda #$0940.w		; A9 40 09 ; Load #$0940.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	cmp #$0990.w		; C9 90 09 ; Compare #$0990.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda #$0820.w		; A9 20 08 ; Load #$0820.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0800.w		; E9 00 08 ; Subtract #$0800.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0A20.w		; 69 20 0A ; Add #$0A20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $90.b		; 65 90 ; Add $90.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldx $0FB3.w		; AE B3 0F ; Load $0FB3.w into X register [Writes: X Index] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	cmp #$09D0.w		; C9 D0 09 ; Compare #$09D0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda #$0820.w		; A9 20 08 ; Load #$0820.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0800.w		; E9 00 08 ; Subtract #$0800.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0A20.w		; 69 20 0A ; Add #$0A20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	ldx $0700.w		; AE 00 07 ; Load $0700.w into X register [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02A8C4.l,X		; FF C4 A8 02 ; Subtract with carry (long,X) $02A8C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1B		; 90 1B ; Branch if carry clear to $90, $1B [Flow: branch]
	cmp $0716.w		; CD 16 07 ; Compare $0716.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	ldx $0700.w		; AE 00 07 ; Load $0700.w into X register [Writes: X Index] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02A944.l,X		; FF 44 A9 02 ; Subtract with carry (long,X) $02A944.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	cmp $0716.w		; CD 16 07 ; Compare $0716.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $E0		; 90 E0 ; Branch if carry clear to $90, $E0 [Flow: branch]
	cmp #$01E8.w		; C9 E8 01 ; Compare #$01E8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $DB		; B0 DB ; Branch if carry set to $B0, $DB [Flow: branch]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $CF		; 90 CF ; Branch if carry clear to $90, $CF [Flow: branch]
	cmp #$01F0.w		; C9 F0 01 ; Compare #$01F0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $CA		; B0 CA ; Branch if carry set to $B0, $CA [Flow: branch]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $03.b		; C5 03 ; Compare $03.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0FFC02.l,X		; BF 02 FC 0F ; Load long $0FFC02.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	lda $0FFC42.l,X		; BF 42 FC 0F ; Load long $0FFC42.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	lda RDMPYL.w		; AD 16 42 ; Load RDMPYL.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0FFBC2.l,X		; BF C2 FB 0F ; Load long $0FFBC2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	lda $0FFC82.l,X		; BF 82 FC 0F ; Load long $0FFC82.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda RDMPYL.w		; AD 16 42 ; Load RDMPYL.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $FADD.w		; 20 DD FA ; Jump to subroutine at $FADD.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0C7C.w,X		; BC 7C 0C ; Load Y register $0C7C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DBA94.l		; 22 94 BA 0D ; Jump to subroutine long $0DBA94.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $FBA6.w		; 20 A6 FB ; Jump to subroutine at $FBA6.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda ($92.b),Y		; B1 92 ; Load accumulator ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $07.b		; E5 07 ; Subtract $07.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	jsr $FBC9.w		; 20 C9 FB ; Jump to subroutine at $FBC9.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($92.b),Y		; B1 92 ; Load accumulator ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $FBD6.w		; 20 D6 FB ; Jump to subroutine at $FBD6.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $A6		; 10 A6 ; Branch if plus to $10, $A6 [Flow: branch]
	.db $82, $AC, $AB		; 82 AC AB ; Branch always long to $82, $AC, $AB [Flow: branch]
	sty $0B.b		; 84 0B ; Store Y register to $0B.b [Reads: Y Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	asl $84F8.w		; 0E F8 84 ; Arithmetic shift left $84F8.w [Flags: NCZ]
	ora $44F8.w,X		; 1D F8 44 ; OR accumulator with memory $44F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $84F9.w		; 0D F9 84 ; Logical OR $84F9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $2F44F9.l,X		; 1F F9 44 2F ; Logical OR long $2F44F9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($3184.w,X)		; FC 84 31 ; Jump to subroutine indirect indexed ($3184.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $06.b,X		; F5 06 ; Subtract $06.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $2F44FB.l,X		; 3F FB 44 2F ; AND accumulator with memory (long,X) $2F44FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($2484.w,X)		; FC 84 24 ; Jump to subroutine indirect indexed ($2484.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F53108.l		; EF 08 31 F5 ; Subtract with carry (long) $F53108.l [Writes: Accumulator] [Flags: NCVZ]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvp $04,$4E		; 44 4E 04 ; Move block positive $04,$4E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $EF.b		; 24 EF ; Test bits $EF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $0804.w		; 4E 04 08 ; Logical shift right $0804.w [Flags: NCZ]
	eor $0814.w,X		; 5D 14 08 ; Exclusive OR accumulator with memory $0814.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$D2.b]		; 07 D2 ; OR accumulator with memory (long) [$D2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$D3.b],Y		; 17 D3 ; OR accumulator with memory (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $0814.w,X		; 5D 14 08 ; Exclusive OR accumulator with memory $0814.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4824.w,X		; 5D 24 48 ; Exclusive OR accumulator with memory $4824.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $08C3.w,Y		; F9 C3 08 ; Subtract with carry $08C3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $C5.b		; 25 C5 ; Logical AND $C5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$D2.b]		; 07 D2 ; OR accumulator with memory (long) [$D2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$D3.b],Y		; 17 D3 ; OR accumulator with memory (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $4824.w,X		; 5D 24 48 ; Exclusive OR accumulator with memory $4824.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0834.w,X		; 5D 34 08 ; Exclusive OR accumulator with memory $0834.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $F801B6.l		; 2F B6 01 F8 ; AND accumulator with memory (long) $F801B6.l [Writes: Accumulator] [Flags: NZ]
	cmp $08.b,S		; C3 08 ; Compare accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit $C4.b		; 24 C4 ; Test bits $C4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $0834.w,X		; 5D 34 08 ; Exclusive OR accumulator with memory $0834.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($0843.w)		; 6C 43 08 ; Jump indirect to ($0843.w) [Flow: jump]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	nop		; EA ; No operation
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $3B01B6.l		; 2F B6 01 3B ; AND accumulator with memory (long) $3B01B6.l [Writes: Accumulator] [Flags: NZ]
	rep #$81		; C2 81 ; Reset processor status bits #$81 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jmp ($0843.w)		; 6C 43 08 ; Jump indirect to ($0843.w) [Flow: jump]
	adc $0850.w,Y		; 79 50 08 ; Add $0850.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pei ($98.b)		; D4 98 ; Push effective indirect address ($98.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp #$DB.b		; C9 DB ; Compare #$DB.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	eor #$B6.b		; 49 B6 ; Exclusive OR #$B6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rep #$81		; C2 81 ; Reset processor status bits #$81 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc $0850.w,Y		; 79 50 08 ; Add $0850.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pei ($88.b)		; D4 88 ; Push effective indirect address ($88.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$D4.b		; 09 D4 ; Logical OR #$D4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$57.b		; C9 57 ; Compare #$57.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$B6.b		; 49 B6 ; Exclusive OR #$B6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pei ($88.b)		; D4 88 ; Push effective indirect address ($88.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$66.b		; 09 66 ; Logical OR #$66.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$A7.b],Y		; 57 A7 ; Exclusive OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $98.b		; 66 98 ; Rotate right $98.b [Reads: Direct Page] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$A7.b],Y		; 57 A7 ; Exclusive OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $70, $8C		; 70 8C ; Branch if overflow set to $70, $8C [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $98.b		; 66 98 ; Rotate right $98.b [Reads: Direct Page] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $70, $8C		; 70 8C ; Branch if overflow set to $70, $8C [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc ($F0.b,S),Y		; F3 F0 ; Subtract with carry (stack relative indirect indexed) ($F0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	sbc ($F0.b,S),Y		; F3 F0 ; Subtract with carry (stack relative indirect indexed) ($F0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cop $F3.b		; 02 F3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sbc $F0.b,X		; F5 F0 ; Subtract $F0.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F5.b,S		; 43 F5 ; Exclusive OR accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	sbc $F0.b,X		; F5 F0 ; Subtract $F0.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($F5.b,X)		; 41 F5 ; Exclusive OR accumulator with memory ($F5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $04.b,X		; F6 04 ; Increment memory $04.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	inc $E808.w		; EE 08 E8 ; Increment $E808.w [Flags: NZ]
	inc $04.b,X		; F6 04 ; Increment memory $04.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc $D3C4.w,Y		; F9 C4 D3 ; Subtract with carry $D3C4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EEDAC9.l,X		; DF C9 DA EE ; Compare accumulator (long,X) $EEDAC9.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp [$F9.b]		; C7 F9 ; Compare accumulator (long) [$F9.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tsb $D8.b		; 04 D8 ; Test and set bits $D8.b [Reads: Accumulator] [Flags: Z]
	sbc $D0C4.w,Y		; F9 C4 D0 ; Subtract with carry $D0C4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($07.b,S),Y		; D3 07 ; Compare accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($DF.b,S),Y		; D3 DF ; Compare accumulator (stack relative indirect indexed) ($DF.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp #$C7.b		; C9 C7 ; Compare #$C7.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $B904.w,Y		; F9 04 B9 ; Subtract with carry $B904.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	asl $B9.b		; 06 B9 ; Arithmetic shift left $B9.b [Reads: Direct Page] [Flags: NCZ]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	ora $BA.b		; 05 BA ; Logical OR $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($08.b,X)		; 21 08 ; Logical AND ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	ora [$CA.b]		; 07 CA ; OR accumulator with memory (long) [$CA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $31CA08.l		; 22 08 CA 31 ; Jump to subroutine long $31CA08.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	asl $CA.b		; 06 CA ; Arithmetic shift left $CA.b [Reads: Direct Page] [Flags: NCZ]
	and ($88.b),Y		; 31 88 ; AND accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	ora [$BB.b]		; 07 BB ; OR accumulator with memory (long) [$BB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	eor #$C4.b		; 49 C4 ; Exclusive OR #$C4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	ora $9B.b		; 05 9B ; Logical OR $9B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$04.b		; 49 04 ; Exclusive OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	eor #$C4.b		; 49 C4 ; Exclusive OR #$C4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $CB.b		; C4 CB ; Compare $CB.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $D3		; D0 D3 ; Branch if not equal to $D0, $D3 [Flow: branch]
	asl $9B.b		; 06 9B ; Arithmetic shift left $9B.b [Reads: Direct Page] [Flags: NCZ]
	eor #$04.b		; 49 04 ; Exclusive OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $C44D.w		; 8C 4D C4 ; Store Y register to $C44D.w [Reads: Y Index]
	lda $BD.b,X		; B5 BD ; Load $BD.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy $CB.b		; C4 CB ; Compare $CB.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $4C		; 80 4C ; Branch always to $80, $4C [Flow: branch]
	tsb $8C.b		; 04 8C ; Test and set bits $8C.b [Reads: Accumulator] [Flags: Z]
	eor $A6C4.w		; 4D C4 A6 ; Exclusive OR $A6C4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $B508.w		; AE 08 B5 ; Load $B508.w into X register [Writes: X Index] [Flags: NZ]
	lda $8008.w,X		; BD 08 80 ; Load $8008.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $9704.w		; 4C 04 97 ; Jump to $9704.w [Flow: jump]
	sta $AEA608.l,X		; 9F 08 A6 AE ; Store accumulator (long,X) $AEA608.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$9F.b],Y		; 97 9F ; Store accumulator (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FD01.w		; 0C 01 FD ; Test and set bits $FD01.w [Reads: Accumulator] [Flags: Z]
	ora $FD00.w		; 0D 00 FD ; Logical OR $FD00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FD01.w		; 8D 01 FD ; Store accumulator to $FD01.w [Reads: Accumulator]
	sty $FD01.w		; 8C 01 FD ; Store Y register to $FD01.w [Reads: Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsb $FA89.w		; 0C 89 FA ; Test and set bits $FA89.w [Reads: Accumulator] [Flags: Z]
	tsb $F689.w		; 0C 89 F6 ; Test and set bits $F689.w [Reads: Accumulator] [Flags: Z]
	trb $F6C9.w		; 1C C9 F6 ; Test and reset bits $F6C9.w [Reads: Accumulator] [Flags: Z]
	trb $F849.w		; 1C 49 F8 ; Test and reset bits $F849.w [Reads: Accumulator] [Flags: Z]
	bit $F889.w		; 2C 89 F8 ; Test bits $F889.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $F689.w		; 2C 89 F6 ; Test bits $F689.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cop $F6.b		; 02 F6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	cop $E9.b		; 02 E9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: NCZ]
	ora $46.b		; 05 46 ; Logical OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc #$46.b		; E9 46 ; Subtract #$46.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $46.b		; 05 46 ; Logical OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $48.b,X		; 55 48 ; Exclusive OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($55.b,S),Y		; 13 55 ; OR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $48.b,X		; 55 48 ; Exclusive OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($55.b,S),Y		; 13 55 ; OR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy $4863.w		; CC 63 48 ; Compare $4863.w with Y register [Reads: Y Index] [Flags: NCZ]
	and ($65.b,X)		; 21 65 ; Logical AND ($65.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy $4863.w		; CC 63 48 ; Compare $4863.w with Y register [Reads: Y Index] [Flags: NCZ]
	and ($65.b,X)		; 21 65 ; Logical AND ($65.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $4871.w,Y		; BE 71 48 ; Load X register $4871.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and $BE0873.l		; 2F 73 08 BE ; AND accumulator with memory (long) $BE0873.l [Writes: Accumulator] [Flags: NZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $A00873.l		; 2F 73 08 A0 ; AND accumulator with memory (long) $A00873.l [Writes: Accumulator] [Flags: NZ]
	.db $70, $20		; 70 20 ; Branch if overflow set to $70, $20 [Flow: branch]
	ldy #$70.b		; A0 70 ; Load #$70.b into Y register [Writes: Y Index] [Flags: NZ]
	and ($A0.b,X)		; 21 A0 ; Logical AND ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $70, $66		; 70 66 ; Branch if overflow set to $70, $66 [Flow: branch]
	ldy #$70.b		; A0 70 ; Load #$70.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $2370A0.l		; 22 A0 70 23 ; Jump to subroutine long $2370A0.l [Writes: Stack Pointer] [Flow: call]
	ldy #$70.b		; A0 70 ; Load #$70.b into Y register [Writes: Y Index] [Flags: NZ]
	adc $A0.b,S		; 63 A0 ; Add with carry (stack relative) $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $62		; 70 62 ; Branch if overflow set to $70, $62 [Flow: branch]
	ldy #$70.b		; A0 70 ; Load #$70.b into Y register [Writes: Y Index] [Flags: NZ]
	rol $A0.b		; 26 A0 ; Rotate left $A0.b [Reads: Direct Page] [Flags: NCZ]
	.db $70, $27		; 70 27 ; Branch if overflow set to $70, $27 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($AA28.w,X)		; 7C 28 AA ; Jump indirect indexed to ($AA28.w,X) [Reads: X Index] [Flow: jump]
	jmp ($B828.w,X)		; 7C 28 B8 ; Jump indirect indexed to ($B828.w,X) [Reads: X Index] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $9A.b		; C5 9A ; Compare $9A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda ($C5.b,X)		; A1 C5 ; Load accumulator ($C5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($D4.b,X)		; A1 D4 ; Load accumulator ($D4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sty $D468.w		; 8C 68 D4 ; Store Y register to $D468.w [Reads: Y Index]
	sty $E368.w		; 8C 68 E3 ; Store Y register to $E368.w [Reads: Y Index]
	ror $E368.w,X		; 7E 68 E3 ; Rotate right $E368.w,X [Reads: X Index] [Flags: NCZ]
	ror $ED68.w,X		; 7E 68 ED ; Rotate right $ED68.w,X [Reads: X Index] [Flags: NCZ]
	adc $90C5.w,X		; 7D C5 90 ; Add $90C5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	bit $6090.w		; 2C 90 60 ; Test bits $6090.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $5289.w		; 2D 89 52 ; Logical AND $5289.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$90.b		; 29 90 ; Logical AND #$90.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $42.b		; 85 42 ; Store accumulator to $42.b [Reads: Accumulator]
	sbc #$89.b		; E9 89 ; Subtract #$89.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor ($29.b)		; 52 29 ; Exclusive OR accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$32.b]		; 87 32 ; Store accumulator (long) [$32.b] [Reads: Direct Page, Accumulator]
	and #$85.b		; 29 85 ; Logical AND #$85.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $42, $E9		; 42 E9 ; Reserved instruction
	ror $2822.w,X		; 7E 22 28 ; Rotate right $2822.w,X [Reads: X Index] [Flags: NCZ]
	sta $6822.w		; 8D 22 68 ; Store accumulator to $6822.w [Reads: Accumulator]
	sta [$32.b]		; 87 32 ; Store accumulator (long) [$32.b] [Reads: Direct Page, Accumulator]
	and #$96.b		; 29 96 ; Logical AND #$96.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($A9.b)		; 12 A9 ; OR accumulator with memory (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $7E2813.l		; 6F 13 28 7E ; Add with carry (long) $7E2813.l [Writes: Accumulator] [Flags: NCVZ]
	jsl $228D28.l		; 22 28 8D 22 ; Jump to subroutine long $228D28.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	stz $6802.w		; 9C 02 68 ; Store zero to $6802.w
	ror $04.b		; 66 04 ; Rotate right $04.b [Reads: Direct Page] [Flags: NCZ]
	sbc #$96.b		; E9 96 ; Subtract #$96.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($A9.b)		; 12 A9 ; OR accumulator with memory (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $A52813.l		; 6F 13 28 A5 ; Add with carry (long) $A52813.l [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A9.b)		; F2 A9 ; Subtract with carry (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $9C28F5.l,X		; 5F F5 28 9C ; Exclusive OR accumulator with memory (long,X) $9C28F5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $68.b		; 02 68 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $04.b		; 66 04 ; Rotate right $04.b [Reads: Direct Page] [Flags: NCZ]
	sbc #$60.b		; E9 60 ; Subtract #$60.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $61		; 70 61 ; Branch if overflow set to $70, $61 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $26		; 70 26 ; Branch if overflow set to $70, $26 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $62		; 70 62 ; Branch if overflow set to $70, $62 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $63		; 70 63 ; Branch if overflow set to $70, $63 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $23		; 70 23 ; Branch if overflow set to $70, $23 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $22		; 70 22 ; Branch if overflow set to $70, $22 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $66		; 70 66 ; Branch if overflow set to $70, $66 [Flow: branch]
	eor $6F.b,X		; 55 6F ; Exclusive OR accumulator with memory $6F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $67		; 70 67 ; Branch if overflow set to $70, $67 [Flow: branch]
	lsr $68.b		; 46 68 ; Logical shift right $68.b [Reads: Direct Page] [Flags: NCZ]
	bit $55.b		; 24 55 ; Test bits $55.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc $6846E8.l		; 6F E8 46 68 ; Add with carry (long) $6846E8.l [Writes: Accumulator] [Flags: NCVZ]
	bit $36.b		; 24 36 ; Test bits $36.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jmp ($28E4.w)		; 6C E4 28 ; Jump indirect to ($28E4.w) [Flow: jump]
	stz $28.b		; 64 28 ; Store zero to $28.b
	rol $6B.b		; 26 6B ; Rotate left $6B.b [Reads: Direct Page] [Flags: NCZ]
	bit $36.b		; 24 36 ; Test bits $36.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jmp ($19E4.w)		; 6C E4 19 ; Jump indirect to ($19E4.w) [Flow: jump]
	eor $28.b,X		; 55 28 ; Exclusive OR accumulator with memory $28.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stz $28.b		; 64 28 ; Store zero to $28.b
	rol $6B.b		; 26 6B ; Rotate left $6B.b [Reads: Direct Page] [Flags: NCZ]
	bit $16.b		; 24 16 ; Test bits $16.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $0BE4.w		; 6E E4 0B ; Rotate right $0BE4.w [Flags: NCZ]
	lsr $28.b		; 46 28 ; Logical shift right $28.b [Reads: Direct Page] [Flags: NCZ]
	ora $2855.w,Y		; 19 55 28 ; OR accumulator with memory $2855.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$6C.b]		; 07 6C ; OR accumulator with memory (long) [$6C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $16.b		; 24 16 ; Test bits $16.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $0BE4.w		; 6E E4 0B ; Rotate right $0BE4.w [Flags: NCZ]
	lsr $28.b		; 46 28 ; Logical shift right $28.b [Reads: Direct Page] [Flags: NCZ]
	ora [$6C.b]		; 07 6C ; OR accumulator with memory (long) [$6C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $70.b		; 24 70 ; Test bits $70.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $2A		; 70 2A ; Branch if overflow set to $70, $2A [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	bit $7070.w		; 2C 70 70 ; Test bits $7070.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $7070.w		; 2D 70 70 ; Logical AND $7070.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jmp ($297D.w)		; 6C 7D 29 ; Jump indirect to ($297D.w) [Flow: jump]
	jmp ($297D.w)		; 6C 7D 29 ; Jump indirect to ($297D.w) [Flow: jump]
	adc ($8C.b)		; 72 8C ; Add with carry (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc ($8C.b)		; 72 8C ; Add with carry (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jmp ($299C.w,X)		; 7C 9C 29 ; Jump indirect indexed to ($299C.w,X) [Reads: X Index] [Flow: jump]
	jmp ($299C.w,X)		; 7C 9C 29 ; Jump indirect indexed to ($299C.w,X) [Reads: X Index] [Flow: jump]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $7BE9.w		; AC E9 7B ; Load $7BE9.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $75E9.w		; AC E9 75 ; Load $75E9.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $E4.b,Y		; B6 E4 ; Load X register $E4.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sty $BB.b		; 84 BB ; Store Y register to $BB.b [Reads: Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $B6.b,X		; 75 B6 ; Add $B6.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $84.b		; E4 84 ; Compare $84.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc [$BD.b]		; 67 BD ; Add with carry (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta ($CA.b)		; 92 CA ; Store accumulator (indirect) ($CA.b) [Reads: Direct Page, Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc [$BD.b]		; 67 BD ; Add with carry (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta ($CA.b)		; 92 CA ; Store accumulator (indirect) ($CA.b) [Reads: Direct Page, Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $9A69CC.l,X		; 5F CC 69 9A ; Exclusive OR accumulator with memory (long,X) $9A69CC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $5F29.w,Y		; D9 29 5F ; Compare accumulator $5F29.w,Y [Reads: Y Index] [Flags: NCZ]
	cpy $9A69.w		; CC 69 9A ; Compare $9A69.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $6029.w,Y		; D9 29 60 ; Compare accumulator $6029.w,Y [Reads: Y Index] [Flags: NCZ]
	jmp.w [$9AE9]		; DC E9 9A ; Jump long indirect [$9AE9] [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc #$60.b		; E9 60 ; Subtract #$60.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$9AE9]		; DC E9 9A ; Jump long indirect [$9AE9] [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc #$85.b		; E9 85 ; Subtract #$85.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc ($29.b)		; F2 29 ; Subtract with carry (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $2EF2.w		; 8D F2 2E ; Store accumulator to $2EF2.w [Reads: Accumulator]
	and ($F4.b),Y		; 31 F4 ; AND accumulator with memory ($F4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F0FB.w		; ED FB F0 ; Subtract $F0FB.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc ($FB.b,S),Y		; F3 FB ; Subtract with carry (stack relative indirect indexed) ($FB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	inc $FB.b,X		; F6 FB ; Increment memory $FB.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $FCFB.w,Y		; F9 FB FC ; Subtract with carry $FCFB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FC02FB.l,X		; FF FB 02 FC ; Subtract with carry (long,X) $FC02FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FC.b		; 05 FC ; Logical OR $FC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($FC11.w,X)		; FC 11 FC ; Jump to subroutine indirect indexed ($FC11.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$FC.b],Y		; 17 FC ; OR accumulator with memory (long indexed) [$FC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $2CFC.w		; 20 FC 2C ; Jump to subroutine at $2CFC.w [Writes: Stack Pointer] [Flow: call]
	jsr ($FC38.w,X)		; FC 38 FC ; Jump to subroutine indirect indexed ($FC38.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor [$FC.b]		; 47 FC ; Exclusive OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $6BFC.w,Y		; 59 FC 6B ; Exclusive OR accumulator with memory $6BFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($FC7D.w,X)		; FC 7D FC ; Jump to subroutine indirect indexed ($FC7D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sty $98FC.w		; 8C FC 98 ; Store Y register to $98FC.w [Reads: Y Index]
	jsr ($FCA1.w,X)		; FC A1 FC ; Jump to subroutine indirect indexed ($FCA1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda [$FC.b]		; A7 FC ; Load accumulator (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $B0FC.w		; AD FC B0 ; Load $B0FC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($FCB3.w,X)		; FC B3 FC ; Jump to subroutine indirect indexed ($FCB3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldx $FC.b,Y		; B6 FC ; Load X register $FC.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda $BCFC.w,Y		; B9 FC BC ; Load $BCFC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($FCBF.w,X)		; FC BF FC ; Jump to subroutine indirect indexed ($FCBF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$FC		; C2 FC
	cmp $FC.b		; C5 FC ; Compare $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	jsr ($FCD4.w,X)		; FC D4 FC ; Jump to subroutine indirect indexed ($FCD4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$ECFC.w		; E0 FC EC ; Compare #$ECFC.w with X register [Reads: X Index] [Flags: NCZ]
	jsr ($FCF5.w,X)		; FC F5 FC ; Jump to subroutine indirect indexed ($FCF5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $07FC.w,X		; FE FC 07 ; Increment memory $07FC.w,X [Reads: X Index] [Flags: NZ]
	sbc $FD10.w,X		; FD 10 FD ; Subtract with carry $FD10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $22FD.w,Y		; 19 FD 22 ; OR accumulator with memory $22FD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FD2E.w,X		; FD 2E FD ; Subtract with carry $FD2E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $FD43.w,X		; FD 43 FD ; Subtract with carry $FD43.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor #$4FFD.w		; 49 FD 4F ; Exclusive OR #$4FFD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FD52.w,X		; FD 52 FD ; Subtract with carry $FD52.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FD.b,X		; 55 FD ; Exclusive OR accumulator with memory $FD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $FD5B.w,X		; FD 5B FD ; Subtract with carry $FD5B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $61FD.w,X		; 5E FD 61 ; Logical shift right $61FD.w,X [Reads: X Index] [Flags: NCZ]
	sbc $FD64.w,X		; FD 64 FD ; Subtract with carry $FD64.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$FD.b]		; 67 FD ; Add with carry (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $73FD.w		; 6D FD 73 ; Add $73FD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $FD79.w,X		; FD 79 FD ; Subtract with carry $FD79.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FD88FD.l,X		; 7F FD 88 FD ; Add long $FD88FD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $FD.b,X		; 94 FD ; Store Y register $FD.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy #$ACFD.w		; A0 FD AC ; Load #$ACFD.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $FDB2.w,X		; FD B2 FD ; Subtract with carry $FDB2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($FD.b)		; B2 FD ; Load accumulator (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $FD.b,X		; B5 FD ; Load $FD.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $FDBB.w,X		; FD BB FD ; Subtract with carry $FDBB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $C1FD.w,Y		; BE FD C1 ; Load X register $C1FD.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $FDC4.w,X		; FD C4 FD ; Subtract with carry $FDC4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$FD.b]		; C7 FD ; Compare accumulator (long) [$FD.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $FDD0.w,X		; FD D0 FD ; Subtract with carry $FDD0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $FD.b,X		; D6 FD ; Decrement memory $FD.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	jmp.w [$E2FD]		; DC FD E2 ; Jump long indirect [$E2FD] [Flow: jump]
	sbc $FDE8.w,X		; FD E8 FD ; Subtract with carry $FDE8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $FDEE.w,X		; FD EE FD ; Subtract with carry $FDEE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FD.b),Y		; F1 FD ; Subtract with carry ($FD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $F7FD.w		; F4 FD F7 ; Push absolute address $F7FD.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $FDFA.w,X		; FD FA FD ; Subtract with carry $FDFA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	tsb $15FE.w		; 0C FE 15 ; Test and set bits $15FE.w [Reads: Accumulator] [Flags: Z]
	inc $FE21.w,X		; FE 21 FE ; Increment memory $FE21.w,X [Reads: X Index] [Flags: NZ]
	and $39FE.w		; 2D FE 39 ; Logical AND $39FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $FE3C.w,X		; FE 3C FE ; Increment memory $FE3C.w,X [Reads: X Index] [Flags: NZ]
	and $FE42FE.l,X		; 3F FE 42 FE ; AND accumulator with memory (long,X) $FE42FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $FE.b		; 45 FE ; Exclusive OR $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	inc $FE4B.w,X		; FE 4B FE ; Increment memory $FE4B.w,X [Reads: X Index] [Flags: NZ]
	lsr $51FE.w		; 4E FE 51 ; Logical shift right $51FE.w [Flags: NCZ]
	inc $FE57.w,X		; FE 57 FE ; Increment memory $FE57.w,X [Reads: X Index] [Flags: NZ]
	eor $63FE.w,X		; 5D FE 63 ; Exclusive OR accumulator with memory $63FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FE6C.w,X		; FE 6C FE ; Increment memory $FE6C.w,X [Reads: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc $FE84.w,X		; FE 84 FE ; Increment memory $FE84.w,X [Reads: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FE8D.w,X		; FE 8D FE ; Increment memory $FE8D.w,X [Reads: X Index] [Flags: NZ]
	.db $90, $FE		; 90 FE ; Branch if carry clear to $90, $FE [Flow: branch]
	sta ($FE.b,S),Y		; 93 FE ; Store accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	stx $FE.b,Y		; 96 FE ; Store X register $FE.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $A2FE.w		; 9C FE A2 ; Store zero to $A2FE.w
	inc $FEA8.w,X		; FE A8 FE ; Increment memory $FEA8.w,X [Reads: X Index] [Flags: NZ]
	ldx $B7FE.w		; AE FE B7 ; Load $B7FE.w into X register [Writes: X Index] [Flags: NZ]
	inc $FEC3.w,X		; FE C3 FE ; Increment memory $FEC3.w,X [Reads: X Index] [Flags: NZ]
	cmp $FEDBFE.l		; CF FE DB FE ; Compare accumulator (long) $FEDBFE.l [Reads: Accumulator] [Flags: NCZ]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	nop		; EA ; No operation
	inc $FFFF.w,X		; FE FF FF ; Increment memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 047FFC. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 047FFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 047FFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 047FFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ENDS
