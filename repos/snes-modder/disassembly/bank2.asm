.BANK 2 SLOT 0
.ORG $0000

.SECTION "Bank2" FORCE

	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	jsr $C500.w		; 20 00 C5 ; Jump to subroutine at $C500.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta OBJSEL.w		; 8D 01 21 ; Store accumulator to OBJSEL.w [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	stz $0AAA.w		; 9C AA 0A ; Store zero to $0AAA.w
	jsr $854C.w		; 20 4C 85 ; Jump to subroutine at $854C.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	ldx #$80.b		; A2 80 ; Load #$80.b into X register [Writes: X Index] [Flags: NZ]
	stx VMAIN.w		; 8E 15 21 ; Store X register to VMAIN.w [Reads: X Index]
	lda #$27F0.w		; A9 F0 27 ; Load #$27F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	lda #$7FFF.w		; A9 FF 7F ; Load #$7FFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	stz VMDATAL.w		; 9C 18 21 ; Store zero to VMDATAL.w
	sta $7EC620.l,X		; 9F 20 C6 7E ; Store accumulator (long,X) $7EC620.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	lda #$1FFE.w		; A9 FE 1F ; Load #$1FFE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$1BFE.w		; A9 FE 1B ; Load #$1BFE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $00848C.l,X		; BF 8C 84 00 ; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $700000.l,X		; 7F 00 00 70 ; Add long $700000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0280.w		; C0 80 02 ; Compare #$0280.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp #$5A5A.w		; C9 5A 5A ; Compare #$5A5A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $700F00.l,X		; 7F 00 0F 70 ; Add long $700F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0280.w		; C0 80 02 ; Compare #$0280.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp #$5A5A.w		; C9 5A 5A ; Compare #$5A5A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $700F00.l,X		; BF 00 0F 70 ; Load long $700F00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $700000.l,X		; 9F 00 00 70 ; Store accumulator (long,X) $700000.l,X [Reads: Accumulator, X Index]
	lda $701000.l,X		; BF 00 10 70 ; Load long $701000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $700100.l,X		; 9F 00 01 70 ; Store accumulator (long,X) $700100.l,X [Reads: Accumulator, X Index]
	lda $701100.l,X		; BF 00 11 70 ; Load long $701100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $700200.l,X		; 9F 00 02 70 ; Store accumulator (long,X) $700200.l,X [Reads: Accumulator, X Index]
	lda $701200.l,X		; BF 00 12 70 ; Load long $701200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $700300.l,X		; 9F 00 03 70 ; Store accumulator (long,X) $700300.l,X [Reads: Accumulator, X Index]
	lda $701300.l,X		; BF 00 13 70 ; Load long $701300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $700400.l,X		; 9F 00 04 70 ; Store accumulator (long,X) $700400.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0080.w		; C0 80 00 ; Compare #$0080.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$0006.w		; [PATTERN: Memory clearing operation] E0 06 00 ; Compare #$0006.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $8B		; D0 8B ; Branch if not equal to $D0, $8B [Flow: branch]
	ldx #$00FE.w		; A2 FE 00 ; Load #$00FE.w into X register [Writes: X Index] [Flags: NZ]
	stz $0D00.w,X		; 9E 00 0D ; Store zero to $0D00.w,X [Reads: X Index]
	stz $0E00.w,X		; 9E 00 0E ; Store zero to $0E00.w,X [Reads: X Index]
	stz $0F00.w,X		; 9E 00 0F ; Store zero to $0F00.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $700F00.l,X		; 9F 00 0F 70 ; Store accumulator (long,X) $700F00.l,X [Reads: Accumulator, X Index]
	sta $700000.l,X		; 9F 00 00 70 ; Store accumulator (long,X) $700000.l,X [Reads: Accumulator, X Index]
	sta $701000.l,X		; 9F 00 10 70 ; Store accumulator (long,X) $701000.l,X [Reads: Accumulator, X Index]
	sta $700100.l,X		; 9F 00 01 70 ; Store accumulator (long,X) $700100.l,X [Reads: Accumulator, X Index]
	sta $701100.l,X		; 9F 00 11 70 ; Store accumulator (long,X) $701100.l,X [Reads: Accumulator, X Index]
	sta $700200.l,X		; 9F 00 02 70 ; Store accumulator (long,X) $700200.l,X [Reads: Accumulator, X Index]
	sta $701200.l,X		; 9F 00 12 70 ; Store accumulator (long,X) $701200.l,X [Reads: Accumulator, X Index]
	sta $700300.l,X		; 9F 00 03 70 ; Store accumulator (long,X) $700300.l,X [Reads: Accumulator, X Index]
	sta $701300.l,X		; 9F 00 13 70 ; Store accumulator (long,X) $701300.l,X [Reads: Accumulator, X Index]
	sta $700400.l,X		; 9F 00 04 70 ; Store accumulator (long,X) $700400.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	ldy $EB22.w		; AC 22 EB ; Load $EB22.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp ($0E.b,S),Y		; D3 0E ; Compare accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	jsr $C5B2.w		; 20 B2 C5 ; Jump to subroutine at $C5B2.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5D5F.w,X		; 5D 5F 5D ; Exclusive OR accumulator with memory $5D5F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5F5E5F.l,X		; 5F 5F 5E 5F ; Exclusive OR accumulator with memory (long,X) $5F5E5F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $5D5E.w,X		; 5E 5E 5D ; Logical shift right $5D5E.w,X [Reads: X Index] [Flags: NCZ]
	eor $5D5E.w,X		; 5D 5E 5D ; Exclusive OR accumulator with memory $5D5E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5D5D.w,X		; [PATTERN: Memory clearing operation] 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $225D.w,X		; 5D 5D 22 ; Exclusive OR accumulator with memory $225D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $0089.w,X		; 3D 89 00 ; AND accumulator with memory $0089.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $03F4.w		; 9C F4 03 ; Store zero to $03F4.w
	stz $02D4.w		; [PATTERN: Memory clearing operation] 9C D4 02 ; Store zero to $02D4.w
	stz $02D7.w		; 9C D7 02 ; Store zero to $02D7.w
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	stz $0379.w		; 9C 79 03 ; Store zero to $0379.w
	stz $03FD.w		; 9C FD 03 ; Store zero to $03FD.w
	jsl $00834B.l		; 22 4B 83 00 ; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta OBJSEL.w		; 8D 01 21 ; Store accumulator to OBJSEL.w [Reads: Accumulator]
	jsl $00E2D0.l		; 22 D0 E2 00 ; Jump to subroutine long $00E2D0.l [Writes: Stack Pointer] [Flow: call]
	jsl $00FC41.l		; 22 41 FC 00 ; Jump to subroutine long $00FC41.l [Writes: Stack Pointer] [Flow: call]
	jsl $0E97D9.l		; 22 D9 97 0E ; Jump to subroutine long $0E97D9.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D2C8.l		; 22 C8 D2 00 ; Jump to subroutine long $00D2C8.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D308.l		; 22 08 D3 00 ; Jump to subroutine long $00D308.l [Writes: Stack Pointer] [Flow: call]
	jsl $07F13C.l		; 22 3C F1 07 ; Jump to subroutine long $07F13C.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D423.l		; 22 23 D4 00 ; Jump to subroutine long $00D423.l [Writes: Stack Pointer] [Flow: call]
	lda #$46.b		; A9 46 ; Load #$46.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC2FC.l		; 8F FC C2 7E ; Store accumulator (long) $7EC2FC.l [Reads: Accumulator]
	sta $7EC2FD.l		; 8F FD C2 7E ; Store accumulator (long) $7EC2FD.l [Reads: Accumulator]
	sta $7EC2FE.l		; 8F FE C2 7E ; Store accumulator (long) $7EC2FE.l [Reads: Accumulator]
	sta $7EC2FF.l		; 8F FF C2 7E ; Store accumulator (long) $7EC2FF.l [Reads: Accumulator]
	stz $02CD.w		; 9C CD 02 ; Store zero to $02CD.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02CE.w		; 8D CE 02 ; Store accumulator to $02CE.w [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FF.b		; 85 FF ; Store accumulator to $FF.b [Reads: Accumulator]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $6C		; D0 6C ; Branch if not equal to $D0, $6C [Flow: branch]
	jsl $0DE395.l		; 22 95 E3 0D ; Jump to subroutine long $0DE395.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DFA6C.l		; 22 6C FA 0D ; Jump to subroutine long $0DFA6C.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DDD32.l		; [PATTERN: Memory clearing operation] 22 32 DD 0D ; Jump to subroutine long $0DDD32.l [Writes: Stack Pointer] [Flow: call]
	stz $010A.w		; 9C 0A 01 ; Store zero to $010A.w
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	stz $A1.b		; 64 A1 ; Store zero to $A1.b
	lda #$08.b		; [PATTERN: Memory clearing operation] A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $04AA.w		; 9C AA 04 ; Store zero to $04AA.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $45		; D0 45 ; Branch if not equal to $D0, $45 [Flow: branch]
	lda $010A.w		; AD 0A 01 ; Load $010A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $04AA.w		; AD AA 04 ; Load $04AA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $7EF3C8.l		; AF C8 F3 7E ; Load long $7EF3C8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0185.w		; A2 85 01 ; Load #$0185.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EF353.l		; AF 53 F3 7E ; Load long $7EF353.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldx #$0184.w		; A2 84 01 ; Load #$0184.w into X register [Writes: X Index] [Flags: NZ]
	stx $1CF0.w		; 8E F0 1C ; Store X register to $1CF0.w [Reads: X Index]
.INDEX 8
	sep #$10		; E2 10
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	jsr $C630.w		; 20 30 C6 ; Jump to subroutine at $C630.w [Writes: Stack Pointer] [Flow: call]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	jsl $0DE395.l		; 22 95 E3 0D ; Jump to subroutine long $0DE395.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DFA6C.l		; 22 6C FA 0D ; Jump to subroutine long $0DFA6C.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DDD32.l		; [PATTERN: Memory clearing operation] 22 32 DD 0D ; Jump to subroutine long $0DDD32.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	stz $A0.b		; 64 A0 ; Store zero to $A0.b
	stz $A2.b		; 64 A2 ; Store zero to $A2.b
	stz $0402.w		; 9C 02 04 ; Store zero to $0402.w
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC019.l		; 8F 19 C0 7E ; Store accumulator (long) $7EC019.l [Reads: Accumulator]
	sta $7EC01B.l		; 8F 1B C0 7E ; Store accumulator (long) $7EC01B.l [Reads: Accumulator]
	sta $7EC01D.l		; 8F 1D C0 7E ; Store accumulator (long) $7EC01D.l [Reads: Accumulator]
	sta $7EC01F.l		; 8F 1F C0 7E ; Store accumulator (long) $7EC01F.l [Reads: Accumulator]
	sta $7EC021.l		; 8F 21 C0 7E ; Store accumulator (long) $7EC021.l [Reads: Accumulator]
	sta $7EC023.l		; 8F 23 C0 7E ; Store accumulator (long) $7EC023.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $D8B3.w		; 20 B3 D8 ; Jump to subroutine at $D8B3.w [Writes: Stack Pointer] [Flow: call]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; [PATTERN: Memory clearing operation] AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF37C.l,X		; BF 7C F3 7E ; Load long $7EF37C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0DFA68.l		; 22 68 FA 0D ; Jump to subroutine long $0DFA68.l [Writes: Stack Pointer] [Flow: call]
	stz $045A.w		; 9C 5A 04 ; Store zero to $045A.w
	stz $0458.w		; 9C 58 04 ; Store zero to $0458.w
	jsr $C57B.w		; 20 7B C5 ; Jump to subroutine at $C57B.w [Writes: Stack Pointer] [Flow: call]
	jsl $0E942A.l		; 22 2A 94 0E ; Jump to subroutine long $0E942A.l [Writes: Stack Pointer] [Flow: call]
	ldx $0AA1.w		; AE A1 0A ; Load $0AA1.w into X register [Writes: X Index] [Flags: NZ]
	lda $02811E.l,X		; BF 1E 81 02 ; Load long $02811E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $00D337.l		; 22 37 D3 00 ; Jump to subroutine long $00D337.l [Writes: Stack Pointer] [Flow: call]
	jsl $01B8BF.l		; 22 BF B8 01 ; Jump to subroutine long $01B8BF.l [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA4.w		; 8D A4 0A ; Store accumulator to $0AA4.w [Reads: Accumulator]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	jsr $C630.w		; 20 30 C6 ; Jump to subroutine at $C630.w [Writes: Stack Pointer] [Flow: call]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $56.b		; 05 56 ; Logical OR $56.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0ED6DD.l		; 22 DD D6 0E ; Jump to subroutine long $0ED6DD.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $062C.w		; 8D 2C 06 ; Store accumulator to $062C.w [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0FF0.w		; 29 F0 0F ; Logical AND #$0FF0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $062E.w		; 8D 2E 06 ; Store accumulator to $062E.w [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0104.w		; C9 04 01 ; Compare #$0104.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $7EF3C6.l		; AF C6 F3 7E ; Load long $7EF3C6.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0010.w		; 29 10 00 ; Logical AND #$0010.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC005.l		; 8F 05 C0 7E ; Store accumulator (long) $7EC005.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $02B8CB.l		; 22 CB B8 02 ; Jump to subroutine long $02B8CB.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$B3.b		; A9 B3 ; Load #$B3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	ldx $045A.w		; AE 5A 04 ; Load $045A.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	ldy $0414.w		; AC 14 04 ; Load $0414.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$07.b		; C0 07 ; Compare #$07.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$62.b		; A9 62 ; Load #$62.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda $02A1E5.l,X		; BF E5 A1 02 ; Load long $02A1E5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	jsl $01FEC1.l		; 22 C1 FE 01 ; Jump to subroutine long $01FEC1.l [Writes: Stack Pointer] [Flow: call]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; [PATTERN: Memory clearing operation] 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	stz $57.b		; 64 57 ; Store zero to $57.b
	stz $3A.b		; [PATTERN: Memory clearing operation] 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	jsr $8AEF.w		; 20 EF 8A ; Jump to subroutine at $8AEF.w [Writes: Stack Pointer] [Flow: call]
	jsl $0FFD22.l		; 22 22 FD 0F ; Jump to subroutine long $0FFD22.l [Writes: Stack Pointer] [Flow: call]
	jsr $8D71.w		; 20 71 8D ; Jump to subroutine at $8D71.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	stz $04B4.w		; 9C B4 04 ; Store zero to $04B4.w
	jsl $0AFD90.l		; 22 90 FD 0A ; Jump to subroutine long $0AFD90.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C44E.l		; 22 4E C4 09 ; Jump to subroutine long $09C44E.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C114.l		; 22 14 C1 09 ; Jump to subroutine long $09C114.l [Writes: Stack Pointer] [Flow: call]
	stz $02F0.w		; 9C F0 02 ; Store zero to $02F0.w
	inc $04C7.w		; EE C7 04 ; Increment $04C7.w [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	lda $7EF3C6.l		; AF C6 F3 7E ; Load long $7EF3C6.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9C.b		; 85 9C ; Store accumulator to $9C.b [Reads: Accumulator]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9D.b		; 85 9D ; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC005.l		; 8F 05 C0 7E ; Store accumulator (long) $7EC005.l [Reads: Accumulator]
	sta $7EC006.l		; 8F 06 C0 7E ; Store accumulator (long) $7EC006.l [Reads: Accumulator]
	jsl $079A2C.l		; 22 2C 9A 07 ; Jump to subroutine long $079A2C.l [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	jsr $9BD7.w		; 20 D7 9B ; Jump to subroutine at $9BD7.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $15		; 30 15 ; Branch if minus to $30, $15 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8D81.w		; 20 81 8D ; Jump to subroutine at $8D81.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp [$83.b]		; C7 83 ; Compare accumulator (long) [$83.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $B9AF.w,Y		; 19 AF B9 ; OR accumulator with memory $B9AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $11A5.w		; ED A5 11 ; Subtract $11A5.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($83B9.w,X)		; FC B9 83 ; Jump to subroutine indirect indexed ($83B9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	stz $03F4.w		; 9C F4 03 ; Store zero to $03F4.w
	jsl $02856A.l		; 22 6A 85 02 ; Jump to subroutine long $02856A.l [Writes: Stack Pointer] [Flow: call]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $E4A3.w		; 20 A3 E4 ; Jump to subroutine at $E4A3.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E9BC.w		; 20 BC E9 ; Jump to subroutine at $E9BC.w [Writes: Stack Pointer] [Flow: call]
	jsl $02C463.l		; 22 63 C4 02 ; Jump to subroutine long $02C463.l [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36F.l		; 8F 6F F3 7E ; Store accumulator (long) $7EF36F.l [Reads: Accumulator]
	jsl $0DDB75.l		; 22 75 DB 0D ; Jump to subroutine long $0DDB75.l [Writes: Stack Pointer] [Flow: call]
	ldy #$58.b		; A0 58 ; Load #$58.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $6F		; F0 6F ; Branch if equal to $F0, $6F [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $6B		; F0 6B ; Branch if equal to $F0, $6B [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $67		; F0 67 ; Branch if equal to $F0, $67 [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $5F		; F0 5F ; Branch if equal to $F0, $5F [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $5B		; F0 5B ; Branch if equal to $F0, $5B [Flow: branch]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $57		; F0 57 ; Branch if equal to $F0, $57 [Flow: branch]
	ldy #$5A.b		; A0 5A ; Load #$5A.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $3A		; B0 3A ; Branch if carry set to $B0, $3A [Flow: branch]
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$E3.b		; C9 E3 ; Compare #$E3.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	cmp #$2F.b		; C9 2F ; Compare #$2F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF300.l		; AF 00 F3 7E ; Load long $7EF300.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	cmp #$E1.b		; C9 E1 ; Compare #$E1.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	ldx #$F3.b		; A2 F3 ; Load #$F3.b into X register [Writes: X Index] [Flags: NZ]
	lda $0132.w		; AD 32 01 ; Load $0132.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$F2.b		; C9 F2 ; Compare #$F2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	ldx #$0D.b		; A2 0D ; Load #$0D.b into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	stx $0132.w		; 8E 32 01 ; Store X register to $0132.w [Reads: X Index]
	jsl $00D394.l		; 22 94 D3 00 ; Jump to subroutine long $00D394.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	jsr $C692.w		; 20 92 C6 ; Jump to subroutine at $C692.w [Writes: Stack Pointer] [Flow: call]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EFD40.l,X		; BF 40 FD 7E ; Load long $7EFD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED618.l		; 22 18 D6 0E ; Jump to subroutine long $0ED618.l [Writes: Stack Pointer] [Flow: call]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $C65F.w		; 20 5F C6 ; Jump to subroutine at $C65F.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $C6EB.w		; 20 EB C6 ; Jump to subroutine at $C6EB.w [Writes: Stack Pointer] [Flow: call]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	jsl $09C499.l		; 22 99 C4 09 ; Jump to subroutine long $09C499.l [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $09AF89.l		; 22 89 AF 09 ; Jump to subroutine long $09AF89.l [Writes: Stack Pointer] [Flow: call]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	stx $012D.w		; 8E 2D 01 ; Store X register to $012D.w [Reads: X Index]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; [PATTERN: Memory clearing operation] D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; [PATTERN: Memory clearing operation] 64 3C ; Store zero to $3C.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E0.w		; 8D E0 02 ; Store accumulator to $02E0.w [Reads: Accumulator]
	sta $56.b		; 85 56 ; Store accumulator to $56.b [Reads: Accumulator]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsl $0ED6DD.l		; 22 DD D6 0E ; Jump to subroutine long $0ED6DD.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; [PATTERN: Memory clearing operation] 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC005.l		; 8F 05 C0 7E ; Store accumulator (long) $7EC005.l [Reads: Accumulator]
	stz $046C.w		; 9C 6C 04 ; Store zero to $046C.w
	stz $EE.b		; 64 EE ; Store zero to $EE.b
	stz $0476.w		; [PATTERN: Memory clearing operation] 9C 76 04 ; Store zero to $0476.w
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: NZ]
	stz $0402.w		; 9C 02 04 ; Store zero to $0402.w
	stz $0403.w		; 9C 03 04 ; Store zero to $0403.w
	lda $0136.w		; [PATTERN: Memory clearing operation] AD 36 01 ; Load $0136.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz NMITIMEN.w		; 9C 00 42 ; Store zero to NMITIMEN.w
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	stz $0136.w		; 9C 36 01 ; Store zero to $0136.w
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta APUIO0.w		; 8D 40 21 ; Store accumulator to APUIO0.w [Reads: Accumulator]
	jsl $008913.l		; 22 13 89 00 ; Jump to subroutine long $008913.l [Writes: Stack Pointer] [Flow: call]
	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta NMITIMEN.w		; 8D 00 42 ; Store accumulator to NMITIMEN.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; [PATTERN: Memory clearing operation] F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $03F5.w		; 9C F5 03 ; Store zero to $03F5.w
	stz $03F6.w		; 9C F6 03 ; Store zero to $03F6.w
	stz $03F7.w		; [PATTERN: Memory clearing operation] 9C F7 03 ; Store zero to $03F7.w
	stz $56.b		; 64 56 ; Store zero to $56.b
	stz $02E0.w		; 9C E0 02 ; Store zero to $02E0.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy $0E.b		; C4 0E ; Compare $0E.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	stz $14.b		; 64 14 ; Store zero to $14.b
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	jsl $00834B.l		; 22 4B 83 00 ; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C8.l		; AF C8 F3 7E ; Load long $7EF3C8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $1CE8.w		; AE E8 1C ; Load $1CE8.w into X register [Writes: X Index] [Flags: NZ]
	lda $028583.l,X		; BF 83 85 02 ; Load long $028583.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF3C8.l		; 8F C8 F3 7E ; Store accumulator (long) $7EF3C8.l [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	jsl $028208.l		; 22 08 82 02 ; Jump to subroutine long $028208.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $7EF3C8.l		; 8F C8 F3 7E ; Store accumulator (long) $7EF3C8.l [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $86.b		; 04 86 ; Test and set bits $86.b [Reads: Accumulator] [Flags: Z]
	sta [$86.b],Y		; 97 86 ; Store accumulator (long indexed) [$86.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($85B4.w,X)		; FC B4 85 ; Jump to subroutine indirect indexed ($85B4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	.db $10, $5D		; 10 5D ; Branch if plus to $10, $5D [Flow: branch]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $27.b		; 46 27 ; Logical shift right $27.b [Reads: Direct Page] [Flags: NCZ]
	rol $2B2B.w		; 2E 2B 2B ; Rotate left $2B2B.w [Flags: NCZ]
	asl $1A2C.w		; 0E 2C 1A ; Arithmetic shift left $1A2C.w [Flags: NCZ]
	and #$47.b		; 29 47 ; Logical AND #$47.b with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and [$28.b]		; 27 28 ; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $4001.w		; 2D 01 40 ; Logical AND $4001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor [$40.b]		; 47 40 ; Exclusive OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $0089.w,X		; 3D 89 00 ; AND accumulator with memory $0089.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $00834B.l		; 22 4B 83 00 ; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx $11.b		; A6 11 ; Load $11.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0285C2.l,X		; BF C2 85 02 ; Load long $0285C2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	cpx #$1E.b		; E0 1E ; Compare #$1E.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $E4A3.w		; [PATTERN: Memory clearing operation] 20 A3 E4 ; Jump to subroutine at $E4A3.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E851.w		; 20 51 E8 ; Jump to subroutine at $E851.w [Writes: Stack Pointer] [Flow: call]
	stz $012C.w		; 9C 2C 01 ; Store zero to $012C.w
	stz $012D.w		; 9C 2D 01 ; Store zero to $012D.w
	ldy #$58.b		; A0 58 ; Load #$58.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$5A.b		; A0 5A ; Load #$5A.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $00D394.l		; 22 94 D3 00 ; Jump to subroutine long $00D394.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0285E2.l,X		; BF E2 85 02 ; Load long $0285E2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda $0285F3.l,X		; BF F3 85 02 ; Load long $0285F3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	jsr $C692.w		; 20 92 C6 ; Jump to subroutine at $C692.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB2.w		; 8D B2 0A ; Store accumulator to $0AB2.w [Reads: Accumulator]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $00E556.l		; 22 56 E5 00 ; Jump to subroutine long $00E556.l [Writes: Stack Pointer] [Flow: call]
	jsr $C65F.w		; 20 5F C6 ; Jump to subroutine at $C65F.w [Writes: Stack Pointer] [Flow: call]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsl $0ED618.l		; 22 18 D6 0E ; Jump to subroutine long $0ED618.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	inc $B0.b		; [PATTERN: Memory clearing operation] E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $AF1E.w		; 20 1E AF ; Jump to subroutine at $AF1E.w [Writes: Stack Pointer] [Flow: call]
	stz $012C.w		; 9C 2C 01 ; Store zero to $012C.w
	stz $012D.w		; 9C 2D 01 ; Store zero to $012D.w
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: NZ]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $ED59.w		; 20 59 ED ; Jump to subroutine at $ED59.w [Writes: Stack Pointer] [Flow: call]
	jsl $0E98B9.l		; 22 B9 98 0E ; Jump to subroutine long $0E98B9.l [Writes: Stack Pointer] [Flow: call]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	stz $C9.b		; 64 C9 ; Store zero to $C9.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0EAEA6.l		; 22 A6 AE 0E ; Jump to subroutine long $0EAEA6.l [Writes: Stack Pointer] [Flow: call]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $F273.w		; 20 73 F2 ; Jump to subroutine at $F273.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda #$3B.b		; A9 3B ; Load #$3B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	ldx #$5B.b		; A2 5B ; Load #$5B.b into X register [Writes: X Index] [Flags: NZ]
	stx $8A.b		; 86 8A ; Store X register to $8A.b [Reads: X Index]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB5.w		; 8D B5 0A ; Store accumulator to $0AB5.w [Reads: Accumulator]
	jsl $1BEF0C.l		; [PATTERN: Memory clearing operation] 22 0C EF 1B ; Jump to subroutine long $1BEF0C.l [Writes: Stack Pointer] [Flow: call]
	jsr $C769.w		; 20 69 C7 ; Jump to subroutine at $C769.w [Writes: Stack Pointer] [Flow: call]
	jsr $AF1E.w		; 20 1E AF ; Jump to subroutine at $AF1E.w [Writes: Stack Pointer] [Flow: call]
	stz $E6.b		; 64 E6 ; Store zero to $E6.b
	stz $E7.b		; 64 E7 ; Store zero to $E7.b
	stz $E0.b		; [PATTERN: Memory clearing operation] 64 E0 ; Store zero to $E0.b
	stz $E1.b		; 64 E1 ; Store zero to $E1.b
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	jsl $00834B.l		; 22 4B 83 00 ; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	ldx $11.b		; A6 11 ; Load $11.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0285C2.l,X		; [PATTERN: Memory clearing operation] BF C2 85 02 ; Load long $0285C2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $010E.w		; 8D 0E 01 ; Store accumulator to $010E.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $D8B3.w		; 20 B3 D8 ; Jump to subroutine at $D8B3.w [Writes: Stack Pointer] [Flow: call]
	stz $045A.w		; 9C 5A 04 ; Store zero to $045A.w
	stz $0458.w		; 9C 58 04 ; Store zero to $0458.w
	jsr $C57B.w		; 20 7B C5 ; Jump to subroutine at $C57B.w [Writes: Stack Pointer] [Flow: call]
	ldx $0AA1.w		; AE A1 0A ; Load $0AA1.w into X register [Writes: X Index] [Flags: NZ]
	lda $02811E.l,X		; BF 1E 81 02 ; Load long $02811E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $00D337.l		; 22 37 D3 00 ; Jump to subroutine long $00D337.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0285E2.l,X		; BF E2 85 02 ; Load long $0285E2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda $0285F3.l,X		; BF F3 85 02 ; Load long $0285F3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0ED462.l,X		; BF 62 D4 0E ; Load long $0ED462.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AAD.w		; 8D AD 0A ; Store accumulator to $0AAD.w [Reads: Accumulator]
	lda $0ED463.l,X		; BF 63 D4 0E ; Load long $0ED463.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AAE.w		; 8D AE 0A ; Store accumulator to $0AAE.w [Reads: Accumulator]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA4.w		; 8D A4 0A ; Store accumulator to $0AA4.w [Reads: Accumulator]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	jsr $C630.w		; [PATTERN: Memory clearing operation] 20 30 C6 ; Jump to subroutine at $C630.w [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	stz $C9.b		; 64 C9 ; Store zero to $C9.b
	stz $13.b		; 64 13 ; Store zero to $13.b
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	jsl $0E98B9.l		; 22 B9 98 0E ; Jump to subroutine long $0E98B9.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $7C88.w,X		; DE 88 7C ; Decrement memory $7C88.w,X [Reads: X Index] [Flags: NZ]
	bit #$26.b		; 89 26 ; Test bits #$26.b with accumulator [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8C.b		; 05 8C ; Logical OR $8C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sty $8C0F.w		; 8C 0F 8C ; Store Y register to $8C0F.w [Reads: Y Index]
	trb $8C.b		; 14 8C ; Test and reset bits $8C.b [Reads: Accumulator] [Flags: Z]
	and [$8E.b]		; 27 8E ; AND accumulator with memory (long) [$8E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0F8F.w		; 0C 8F 0F ; Test and set bits $0F8F.w [Reads: Accumulator] [Flags: Z]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	.db $90, $2D		; 90 2D ; Branch if carry clear to $90, $2D [Flow: branch]
	.db $90, $4A		; 90 4A ; Branch if carry clear to $90, $4A [Flow: branch]
	.db $90, $4F		; 90 4F ; Branch if carry clear to $90, $4F [Flow: branch]
	.db $90, $54		; 90 54 ; Branch if carry clear to $90, $54 [Flow: branch]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	sta ($88.b,S),Y		; 93 88 ; Store accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta $579357.l		; 8F 57 93 57 ; Store accumulator (long) $579357.l [Reads: Accumulator]
	sta ($57.b,S),Y		; 93 57 ; Store accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($20.b,S),Y		; 93 20 ; Store accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta $7A.b,X		; 95 7A ; Store accumulator to $7A.b,X [Reads: Accumulator, X Index]
	stx $2A.b,Y		; 96 2A ; Store X register $2A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$0A.b],Y		; 97 0A ; Store accumulator (long indexed) [$0A.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$98.b],Y		; F7 98 ; Subtract with carry (long indexed) [$98.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $99.b,X		; 16 99 ; Arithmetic shift left $99.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $0AFE80.l		; 22 80 FE 0A ; Jump to subroutine long $0AFE80.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($876C.w,X)		; FC 6C 87 ; Jump to subroutine indirect indexed ($876C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $042C.w		; 9C 2C 04 ; Store zero to $042C.w
	jsl $01D81B.l		; 22 1B D8 01 ; Jump to subroutine long $01D81B.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	jsr $BA31.w		; 20 31 BA ; Jump to subroutine at $BA31.w [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	jsl $01C2FD.l		; 22 FD C2 01 ; Jump to subroutine long $01C2FD.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	jsl $01CE70.l		; 22 70 CE 01 ; Jump to subroutine long $01CE70.l [Writes: Stack Pointer] [Flow: call]
	lda $0454.w		; AD 54 04 ; Load $0454.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $01D6C1.l		; 22 C1 D6 01 ; Jump to subroutine long $01D6C1.l [Writes: Stack Pointer] [Flow: call]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $885E.w		; 20 5E 88 ; Jump to subroutine at $885E.w [Writes: Stack Pointer] [Flow: call]
	jsl $00F567.l		; 22 67 F5 00 ; Jump to subroutine long $00F567.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$21		; C2 21
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $0428.w		; AD 28 04 ; Load $0428.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda $0422.w		; AD 22 04 ; Load $0422.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0424.w		; AD 24 04 ; Load $0424.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
	sep #$20		; E2 20
	jsl $07F0AC.l		; 22 AC F0 07 ; Jump to subroutine long $07F0AC.l [Writes: Stack Pointer] [Flow: call]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DDB75.l		; 22 75 DB 0D ; Jump to subroutine long $0DDB75.l [Writes: Stack Pointer] [Flow: call]
	jmp $0AFD0C.l		; 5C 0C FD 0A ; Jump long to $0AFD0C.l [Flow: jump]
.ACCU 16
	rep #$20		; C2 20
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$000C.w		; 29 0C 00 ; Logical AND #$000C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $28		; 90 28 ; Branch if carry clear to $90, $28 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$01DC.w		; C9 DC 01 ; Compare #$01DC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $21		; B0 21 ; Branch if carry set to $B0, $21 [Flow: branch]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $36		; F0 36 ; Branch if equal to $F0, $36 [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$01E9.w		; C9 E9 01 ; Compare #$01E9.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1C		; 90 1C ; Branch if carry clear to $90, $1C [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsl $07F439.l		; 22 39 F4 07 ; Jump to subroutine long $07F439.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	jsl $0288C5.l		; 22 C5 88 02 ; Jump to subroutine long $0288C5.l [Writes: Stack Pointer] [Flow: call]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $A50C.w		; 0C 0C A5 ; Test and set bits $A50C.w [Reads: Accumulator] [Flags: Z]
	adc [$3F.b]		; 67 3F ; Add with carry (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($88.b,X)		; C1 88 ; Compare accumulator ($88.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$8A.b]		; 67 8A ; Add with carry (long) [$8A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsl $00879C.l		; 22 9C 87 00 ; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldx $02.b,Y		; B6 02 ; Load X register $02.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	cmp $02B6.w,Y		; D9 B6 02 ; Compare accumulator $02B6.w,Y [Reads: Y Index] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda [$02.b],Y		; B7 02 ; Load accumulator (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $02B8.w		; 1C B8 02 ; Test and reset bits $02B8.w [Reads: Accumulator] [Flags: Z]
	lda $0112.w		; AD 12 01 ; Load $0112.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02E4.w		; 0D E4 02 ; Logical OR $02E4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0FFC.w		; 0D FC 0F ; Logical OR $0FFC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $8947.w		; 4C 47 89 ; Jump to $8947.w [Flow: jump]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF4.w		; 8D F4 1C ; Store accumulator to $1CF4.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0186.w		; A9 86 01 ; Load #$0186.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $C8		; 80 C8 ; Branch always to $80, $C8 [Flow: branch]
	jsl $078000.l		; 22 00 80 07 ; Jump to subroutine long $078000.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$D8.b		; 89 D8 ; Test bits #$D8.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$95.b		; 89 95 ; Test bits #$95.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$03.b		; 89 03 ; Test bits #$03.b with accumulator [Reads: Accumulator] [Flags: Z]
	ldx $C110.w,Y		; BE 10 C1 ; Load X register $C110.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $70, $C1		; 70 C1 ; Branch if overflow set to $70, $C1 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit #$F0.b		; 89 F0 ; Test bits #$F0.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$C2.b		; 89 C2 ; Test bits #$C2.b with accumulator [Reads: Accumulator] [Flags: Z]
	jsr $22A5.w		; 20 A5 22 ; Jump to subroutine at $22A5.w [Writes: Stack Pointer] [Flow: call]
	sta $0FC2.w		; 8D C2 0F ; Store accumulator to $0FC2.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC4.w		; 8D C4 0F ; Store accumulator to $0FC4.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($896C.w,X)		; 7C 6C 89 ; Jump indirect indexed to ($896C.w,X) [Reads: X Index] [Flow: jump]
	stz $0468.w		; 9C 68 04 ; Store zero to $0468.w
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0690.w		; 8D 90 06 ; Store accumulator to $0690.w [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $01D38F.l		; 22 8F D3 01 ; Jump to subroutine long $01D38F.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	sta $7EC007.l		; [PATTERN: Memory clearing operation] 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$001F.w		; A9 1F 00 ; Load #$001F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	stz $0AA6.w		; 9C A6 0A ; Store zero to $0AA6.w
.ACCU 8
	sep #$20		; E2 20
	stz $0646.w		; 9C 46 06 ; Store zero to $0646.w
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8D71.w		; 20 71 8D ; Jump to subroutine at $8D71.w [Writes: Stack Pointer] [Flow: call]
	lda $0468.w		; [PATTERN: Memory clearing operation] AD 68 04 ; Load $0468.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	inc $0468.w		; EE 68 04 ; Increment $0468.w [Flags: NZ]
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $8A5B8A.l		; 4F 8A 5B 8A ; Exclusive OR accumulator with memory (long) $8A5B8A.l [Writes: Accumulator] [Flags: NZ]
	sta ($8B.b)		; 92 8B ; Store accumulator (indirect) ($8B.b) [Reads: Direct Page, Accumulator]
	sta [$8A.b]		; 87 8A ; Store accumulator (long) [$8A.b] [Reads: Direct Page, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $038B.w		; 2E 8B 03 ; Rotate left $038B.w [Flags: NCZ]
	ldx $8ABA.w,Y		; BE BA 8A ; Load X register $8ABA.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C1628A.l		; CF 8A 62 C1 ; Compare accumulator (long) $C1628A.l [Reads: Accumulator] [Flags: NCZ]
	sta ($8B.b)		; 92 8B ; Store accumulator (indirect) ($8B.b) [Reads: Direct Page, Accumulator]
	ldx $C28B.w		; AE 8B C2 ; Load $C28B.w into X register [Writes: X Index] [Flags: NZ]
	jsr $22A5.w		; 20 A5 22 ; Jump to subroutine at $22A5.w [Writes: Stack Pointer] [Flow: call]
	sta $0FC2.w		; 8D C2 0F ; Store accumulator to $0FC2.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC4.w		; 8D C4 0F ; Store accumulator to $0FC4.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $01B8B4.l		; 22 B4 B8 01 ; Jump to subroutine long $01B8B4.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($8A06.w,X)		; 7C 06 8A ; Jump indirect indexed to ($8A06.w,X) [Reads: X Index] [Flow: jump]
	lda $0458.w		; AD 58 04 ; Load $0458.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $8CAC.w		; 20 AC 8C ; Jump to subroutine at $8CAC.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0458.w		; 8D 58 04 ; Store accumulator to $0458.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01873A.l		; 22 3A 87 01 ; Jump to subroutine long $01873A.l [Writes: Stack Pointer] [Flow: call]
	jsl $00FDA4.l		; 22 A4 FD 00 ; Jump to subroutine long $00FDA4.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D6F9.l		; 22 F9 D6 00 ; Jump to subroutine long $00D6F9.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	jsl $09C114.l		; 22 14 C1 09 ; Jump to subroutine long $09C114.l [Writes: Stack Pointer] [Flow: call]
	lda $0458.w		; AD 58 04 ; Load $0458.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $BB7B.w		; 20 7B BB ; Jump to subroutine at $BB7B.w [Writes: Stack Pointer] [Flow: call]
	stz $0458.w		; 9C 58 04 ; Store zero to $0458.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC006.l		; 0F 06 C0 7E ; OR accumulator with memory (long) $7EC006.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	jsl $02B5DC.l		; 22 DC B5 02 ; Jump to subroutine long $02B5DC.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E031.l		; 22 31 E0 00 ; Jump to subroutine long $00E031.l [Writes: Stack Pointer] [Flow: call]
	jsr $BB7B.w		; 20 7B BB ; Jump to subroutine at $BB7B.w [Writes: Stack Pointer] [Flow: call]
	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC006.l		; 0F 06 C0 7E ; OR accumulator with memory (long) $7EC006.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC006.l		; 0F 06 C0 7E ; OR accumulator with memory (long) $7EC006.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	jsl $00913F.l		; 22 3F 91 00 ; Jump to subroutine long $00913F.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	jsr $C12C.w		; 20 2C C1 ; Jump to subroutine at $C12C.w [Writes: Stack Pointer] [Flow: call]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC006.l		; 0F 06 C0 7E ; OR accumulator with memory (long) $7EC006.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	lda $02894C.l,X		; BF 4C 89 02 ; Load long $02894C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	jsl $0DFA33.l		; 22 33 FA 0D ; Jump to subroutine long $0DFA33.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AC6B.l		; [PATTERN: Memory clearing operation] 22 6B AC 09 ; Jump to subroutine long $09AC6B.l [Writes: Stack Pointer] [Flow: call]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	lda #$FF.b		; [PATTERN: Memory clearing operation] A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $C7.b		; 85 C7 ; Store accumulator to $C7.b [Reads: Accumulator]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $032B.w		; [PATTERN: Memory clearing operation] 9C 2B 03 ; Store zero to $032B.w
	stz $0372.w		; 9C 72 03 ; Store zero to $0372.w
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx $E2.b		; A6 E2 ; Load $E2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stx $E0.b		; 86 E0 ; Store X register to $E0.b [Reads: X Index]
	ldx $E8.b		; A6 E8 ; Load $E8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stx $E6.b		; 86 E6 ; Store X register to $E6.b [Reads: X Index]
	ldx $A0.b		; A6 A0 ; Load $A0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$0036.w		; E0 36 00 ; Compare #$0036.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	cpx #$0038.w		; E0 38 00 ; Compare #$0038.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0016.w		; A0 16 00 ; Load #$0016.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $02894C.l,X		; BF 4C 89 02 ; Load long $02894C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy #$0116.w		; A0 16 01 ; Load #$0116.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy $1C.b		; C4 1C ; Compare $1C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ora $1D.b		; 05 1D ; Logical OR $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
.INDEX 8
	sep #$10		; E2 10
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC006.l		; 0F 06 C0 7E ; OR accumulator with memory (long) $7EC006.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldx $045A.w		; AE 5A 04 ; Load $045A.w into X register [Writes: X Index] [Flags: NZ]
	lda $02A1E5.l,X		; BF E5 A1 02 ; Load long $02A1E5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	jsl $01FEC1.l		; 22 C1 FE 01 ; Jump to subroutine long $01FEC1.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	jsr $A1E9.w		; 20 E9 A1 ; Jump to subroutine at $A1E9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC006.l		; 0F 06 C0 7E ; OR accumulator with memory (long) $7EC006.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8D71.w		; 20 71 8D ; Jump to subroutine at $8D71.w [Writes: Stack Pointer] [Flow: call]
	lda $0468.w		; AD 68 04 ; Load $0468.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$AC.b		; C9 AC ; Compare #$AC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; [PATTERN: Memory clearing operation] 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	inc $0468.w		; EE 68 04 ; Increment $0468.w [Flags: NZ]
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx #$14.b		; A2 14 ; Load #$14.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $13		; 30 13 ; Branch if minus to $30, $13 [Flow: branch]
	cmp $028954.l,X		; DF 54 89 02 ; Compare accumulator (long,X) $028954.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsl $09AF32.l		; 22 32 AF 09 ; Jump to subroutine long $09AF32.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	ldx #$15.b		; A2 15 ; Load #$15.b into X register [Writes: X Index] [Flags: NZ]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01B83E.l		; 22 3E B8 01 ; Jump to subroutine long $01B83E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01D476.l		; 22 76 D4 01 ; Jump to subroutine long $01D476.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01D38F.l		; 22 8F D3 01 ; Jump to subroutine long $01D38F.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsl $01B8B4.l		; 22 B4 B8 01 ; Jump to subroutine long $01B8B4.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $28		; 90 28 ; Branch if carry clear to $90, $28 [Flow: branch]
	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	dec $0464.w		; CE 64 04 ; Decrement $0464.w [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	stx $67.b		; 86 67 ; Store X register to $67.b [Reads: X Index]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsr $BA31.w		; 20 31 BA ; Jump to subroutine at $BA31.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($8D.b,X)		; 01 8D ; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sep #$8C		; E2 8C ; Set processor status bits #$8C [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $8E1D8E.l		; 0F 8E 1D 8E ; OR accumulator with memory (long) $8E1D8E.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $8D		; 10 8D ; Branch if plus to $10, $8D [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $8AC8.w		; 8D C8 8A ; Store accumulator to $8AC8.w [Reads: Accumulator]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8AC48A.l		; AF 8A C4 8A ; Load long $8AC48A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $8AC48A.l		; AF 8A C4 8A ; Load long $8AC48A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $90.b,X		; 94 90 ; Store Y register $90.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc $5F8A.w		; ED 8A 5F ; Subtract $5F8A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $20C2.w		; 8D C2 20 ; Store accumulator to $20C2.w [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $17C9.w		; 0C C9 17 ; Test and set bits $17C9.w [Reads: Accumulator] [Flags: Z]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($AE.b,S),Y		; 13 AE ; OR accumulator (stack relative indirect indexed) ($AE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	ldx #$F1.b		; A2 F1 ; Load #$F1.b into X register [Writes: X Index] [Flags: NZ]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	ldx #$58.b		; A2 58 ; Load #$58.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$6A.b		; A2 6A ; Load #$6A.b into X register [Writes: X Index] [Flags: NZ]
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	sta $7EC007.l		; [PATTERN: Memory clearing operation] 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$001F.w		; A9 1F 00 ; Load #$001F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	stz $0AA6.w		; 9C A6 0A ; Store zero to $0AA6.w
	stz $045A.w		; 9C 5A 04 ; Store zero to $045A.w
	lda $0458.w		; AD 58 04 ; Load $0458.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$B302.w		; A9 02 B3 ; Load #$B302.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0458.w		; 9C 58 04 ; Store zero to $0458.w
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	jsr $C769.w		; 20 69 C7 ; Jump to subroutine at $C769.w [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $A2F0.w		; 20 F0 A2 ; Jump to subroutine at $A2F0.w [Writes: Stack Pointer] [Flow: call]
	jsl $01873A.l		; 22 3A 87 01 ; Jump to subroutine long $01873A.l [Writes: Stack Pointer] [Flow: call]
	jsl $00FDA4.l		; 22 A4 FD 00 ; Jump to subroutine long $00FDA4.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D66E.l		; 22 6E D6 00 ; Jump to subroutine long $00D66E.l [Writes: Stack Pointer] [Flow: call]
	jsl $0E942A.l		; 22 2A 94 0E ; Jump to subroutine long $0E942A.l [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E031.l		; 22 31 E0 00 ; Jump to subroutine long $00E031.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C114.l		; 22 14 C1 09 ; Jump to subroutine long $09C114.l [Writes: Stack Pointer] [Flow: call]
	jmp $8B67.w		; 4C 67 8B ; Jump to $8B67.w [Flow: jump]
	jsr $BB7B.w		; 20 7B BB ; Jump to subroutine at $BB7B.w [Writes: Stack Pointer] [Flow: call]
	jsl $02B5DC.l		; 22 DC B5 02 ; Jump to subroutine long $02B5DC.l [Writes: Stack Pointer] [Flow: call]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	lda $02894C.l,X		; BF 4C 89 02 ; Load long $02894C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	inc $A4.b		; E6 A4 ; Increment $A4.b [Reads: Direct Page] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$30.b		; A2 30 ; Load #$30.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: NZ]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	sty $012E.w		; 8C 2E 01 ; Store Y register to $012E.w [Reads: Y Index]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	jsr $8EC9.w		; 20 C9 8E ; Jump to subroutine at $8EC9.w [Writes: Stack Pointer] [Flow: call]
	jmp $8AB3.w		; 4C B3 8A ; Jump to $8AB3.w [Flow: jump]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC007.l		; 0F 07 C0 7E ; OR accumulator with memory (long) $7EC007.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0200.w		; [PATTERN: Memory clearing operation] AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0418.w		; [PATTERN: Memory clearing operation] 9C 18 04 ; Store zero to $0418.w
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
	stz $0641.w		; 9C 41 06 ; Store zero to $0641.w
.ACCU 16
	rep #$20		; C2 20
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC180.l		; 8F 80 C1 7E ; Store accumulator (long) $7EC180.l [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC182.l		; 8F 82 C1 7E ; Store accumulator (long) $7EC182.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC184.l		; 8F 84 C1 7E ; Store accumulator (long) $7EC184.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC186.l		; 8F 86 C1 7E ; Store accumulator (long) $7EC186.l [Reads: Accumulator]
	lda $0600.w		; AD 00 06 ; Load $0600.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC188.l		; 8F 88 C1 7E ; Store accumulator (long) $7EC188.l [Reads: Accumulator]
	lda $0604.w		; AD 04 06 ; Load $0604.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC18A.l		; 8F 8A C1 7E ; Store accumulator (long) $7EC18A.l [Reads: Accumulator]
	lda $0608.w		; AD 08 06 ; Load $0608.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC18C.l		; 8F 8C C1 7E ; Store accumulator (long) $7EC18C.l [Reads: Accumulator]
	lda $060C.w		; AD 0C 06 ; Load $060C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC18E.l		; 8F 8E C1 7E ; Store accumulator (long) $7EC18E.l [Reads: Accumulator]
	lda $0610.w		; AD 10 06 ; Load $0610.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC190.l		; 8F 90 C1 7E ; Store accumulator (long) $7EC190.l [Reads: Accumulator]
	lda $0612.w		; AD 12 06 ; Load $0612.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC192.l		; 8F 92 C1 7E ; Store accumulator (long) $7EC192.l [Reads: Accumulator]
	lda $0614.w		; AD 14 06 ; Load $0614.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC194.l		; 8F 94 C1 7E ; Store accumulator (long) $7EC194.l [Reads: Accumulator]
	lda $0616.w		; AD 16 06 ; Load $0616.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC196.l		; 8F 96 C1 7E ; Store accumulator (long) $7EC196.l [Reads: Accumulator]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC198.l		; 8F 98 C1 7E ; Store accumulator (long) $7EC198.l [Reads: Accumulator]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC19A.l		; 8F 9A C1 7E ; Store accumulator (long) $7EC19A.l [Reads: Accumulator]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC19C.l		; 8F 9C C1 7E ; Store accumulator (long) $7EC19C.l [Reads: Accumulator]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC19E.l		; 8F 9E C1 7E ; Store accumulator (long) $7EC19E.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC1A6.l		; 8F A6 C1 7E ; Store accumulator (long) $7EC1A6.l [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC1A7.l		; 8F A7 C1 7E ; Store accumulator (long) $7EC1A7.l [Reads: Accumulator]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC1A8.l		; 8F A8 C1 7E ; Store accumulator (long) $7EC1A8.l [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC1A9.l		; 8F A9 C1 7E ; Store accumulator (long) $7EC1A9.l [Reads: Accumulator]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC1AA.l		; 8F AA C1 7E ; Store accumulator (long) $7EC1AA.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00DF1A.l		; 22 1A DF 00 ; Jump to subroutine long $00DF1A.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $01B8B4.l		; 22 B4 B8 01 ; Jump to subroutine long $01B8B4.l [Writes: Stack Pointer] [Flow: call]
	jsl $01FEB0.l		; 22 B0 FE 01 ; Jump to subroutine long $01FEB0.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	adc $8E.b,S		; 63 8E ; Add with carry (stack relative) $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	sep #$8C		; E2 8C ; Set processor status bits #$8C [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $8E1D8E.l		; 0F 8E 1D 8E ; OR accumulator with memory (long) $8E1D8E.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $8D		; 10 8D ; Branch if plus to $10, $8D [Flow: branch]
	.db $80, $8E		; 80 8E ; Branch always to $80, $8E [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $A18A.w		; ED 8A A1 ; Subtract $A18A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	stx $8EE0.w		; 8E E0 8E ; Store X register to $8EE0.w [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stx $20C2.w		; 8E C2 20 ; Store X register to $20C2.w [Reads: X Index]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C9.b		; 05 C9 ; Logical OR $C9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$F1.b		; A2 F1 ; Load #$F1.b into X register [Writes: X Index] [Flags: NZ]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	jmp $8CA9.w		; 4C A9 8C ; Jump to $8CA9.w [Flow: jump]
	jsr $BB7B.w		; 20 7B BB ; Jump to subroutine at $BB7B.w [Writes: Stack Pointer] [Flow: call]
	jsl $02B5DC.l		; 22 DC B5 02 ; Jump to subroutine long $02B5DC.l [Writes: Stack Pointer] [Flow: call]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	lda $02894C.l,X		; BF 4C 89 02 ; Load long $02894C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $20.b		; A4 20 ; Load $20.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy $51.b		; C4 51 ; Compare $51.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $52.b		; 85 52 ; Store accumulator to $52.b [Reads: Accumulator]
	jsr $9165.w		; 20 65 91 ; Jump to subroutine at $9165.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$89.b		; C9 89 ; Compare #$89.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$4F.b		; C9 4F ; Compare #$4F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$A7.b		; C9 A7 ; Compare #$A7.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04A0.w		; 8D A0 04 ; Store accumulator to $04A0.w [Reads: Accumulator]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	jsl $02B8CB.l		; 22 CB B8 02 ; Jump to subroutine long $02B8CB.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04A0.w		; 9C A0 04 ; Store zero to $04A0.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A4.b		; 85 A4 ; Store accumulator to $A4.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $079520.l		; 22 20 95 07 ; Jump to subroutine long $079520.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	jsr $8D71.w		; 20 71 8D ; Jump to subroutine at $8D71.w [Writes: Stack Pointer] [Flow: call]
	jsr $8BD7.w		; 20 D7 8B ; Jump to subroutine at $8BD7.w [Writes: Stack Pointer] [Flow: call]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	dec $0464.w		; CE 64 04 ; Decrement $0464.w [Flags: NZ]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E9D3.l		; 22 D3 E9 07 ; Jump to subroutine long $07E9D3.l [Writes: Stack Pointer] [Flow: call]
	jsr $BA31.w		; 20 31 BA ; Jump to subroutine at $BA31.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and $8F.b,X		; 35 8F ; Logical AND $8F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $519C8F.l,X		; 5F 8F 9C 51 ; Exclusive OR accumulator with memory (long,X) $519C8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $3CA2.w,Y		; 19 A2 3C ; OR accumulator with memory $3CA2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$38.b		; A2 38 ; Load #$38.b into X register [Writes: X Index] [Flags: NZ]
	stz $0476.w		; [PATTERN: Memory clearing operation] 9C 76 04 ; Store zero to $0476.w
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	stz $EE.b		; 64 EE ; Store zero to $EE.b
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	sty $012E.w		; 8C 2E 01 ; Store Y register to $012E.w [Reads: Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	stz $11.b		; 64 11 ; Store zero to $11.b
	jsl $02B8CB.l		; 22 CB B8 02 ; Jump to subroutine long $02B8CB.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	dec $0464.w		; CE 64 04 ; Decrement $0464.w [Flags: NZ]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E9D3.l		; 22 D3 E9 07 ; Jump to subroutine long $07E9D3.l [Writes: Stack Pointer] [Flow: call]
	jsr $BA31.w		; 20 31 BA ; Jump to subroutine at $BA31.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda ($8F.b),Y		; B1 8F ; Load accumulator ($8F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($8F.b,X)		; E1 8F ; Subtract with carry ($8F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$3C.b		; A2 3C ; Load #$3C.b into X register [Writes: X Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$38.b		; A2 38 ; Load #$38.b into X register [Writes: X Index] [Flags: NZ]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	sty $012E.w		; 8C 2E 01 ; Store Y register to $012E.w [Reads: Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; [PATTERN: Memory clearing operation] 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	stz $11.b		; 64 11 ; Store zero to $11.b
	jsl $02B8CB.l		; 22 CB B8 02 ; Jump to subroutine long $02B8CB.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01D469.l		; 22 69 D4 01 ; Jump to subroutine long $01D469.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F567.l		; 22 67 F5 00 ; Jump to subroutine long $00F567.l [Writes: Stack Pointer] [Flow: call]
	jsl $01FEB0.l		; 22 B0 FE 01 ; Jump to subroutine long $01FEB0.l [Writes: Stack Pointer] [Flow: call]
	lda $00009C.l		; AF 9C 00 00 ; Load long $00009C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$1F.b		; [PATTERN: Memory clearing operation] 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EC017.l		; CF 17 C0 7E ; Compare accumulator (long) $7EC017.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $029032.l		; 22 32 90 02 ; Jump to subroutine long $029032.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $00879C.l		; 22 9C 87 00 ; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	mvn $01,$EF		; 54 EF 01 ; Move block negative $01,$EF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cpx $01EF.w		; EC EF 01 ; Compare $01EF.w with X register [Reads: X Index] [Flags: NCZ]
	lsr $F0.b		; 46 F0 ; Logical shift right $F0.b [Reads: Direct Page] [Flags: NCZ]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	lsr $F0.b		; 46 F0 ; Logical shift right $F0.b [Reads: Direct Page] [Flags: NCZ]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	jsl $01F093.l		; 22 93 F0 01 ; Jump to subroutine long $01F093.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01F2FE.l		; 22 FE F2 01 ; Jump to subroutine long $01F2FE.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $01B8B4.l		; 22 B4 B8 01 ; Jump to subroutine long $01B8B4.l [Writes: Stack Pointer] [Flow: call]
	jsl $07F2C1.l		; 22 C1 F2 07 ; Jump to subroutine long $07F2C1.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	cpy $91.b		; C4 91 ; Compare $91.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty $90A1.w		; 8C A1 90 ; Store Y register to $90A1.w [Reads: Y Index]
	sep #$8C		; E2 8C ; Set processor status bits #$8C [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $8E1D8E.l		; 0F 8E 1D 8E ; OR accumulator with memory (long) $8E1D8E.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $8D		; 10 8D ; Branch if plus to $10, $8D [Flow: branch]
	cmp [$90.b]		; C7 90 ; Compare accumulator (long) [$90.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8AC48A.l		; AF 8A C4 8A ; Load long $8AC48A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $8AC48A.l		; AF 8A C4 8A ; Load long $8AC48A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $90.b,X		; 94 90 ; Store Y register $90.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta ($9B.b),Y		; 91 9B ; Store accumulator ($9B.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($B5.b),Y		; 91 B5 ; Store accumulator ($B5.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($DD.b),Y		; 91 DD ; Store accumulator ($DD.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($22.b),Y		; 91 22 ; Store accumulator ($22.b),Y [Reads: Direct Page, Y Index, Accumulator]
	trb $E9.b		; 14 E9 ; Test and reset bits $E9.b [Reads: Accumulator] [Flags: Z]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $E9.b		; 14 E9 ; Test and reset bits $E9.b [Reads: Accumulator] [Flags: Z]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $FE		; B0 FE ; Branch if carry set to $B0, $FE [Flow: branch]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	sta $02F9.w		; 8D F9 02 ; Store accumulator to $02F9.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0464.w		; CE 64 04 ; Decrement $0464.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0030.w		; A2 30 00 ; Load #$0030.w into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldx #$FFD0.w		; A2 D0 FF ; Load #$FFD0.w into X register [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx $048A.w		; AE 8A 04 ; Load $048A.w into X register [Writes: X Index] [Flags: NZ]
	lda $01C322.l,X		; BF 22 C3 01 ; Load long $01C322.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	jsr $92B1.w		; 20 B1 92 ; Jump to subroutine at $92B1.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx #$FFD0.w		; A2 D0 FF ; Load #$FFD0.w into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldx #$0030.w		; A2 30 00 ; Load #$0030.w into X register [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	jsr $BB7B.w		; 20 7B BB ; Jump to subroutine at $BB7B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $02B5DC.l		; 22 DC B5 02 ; Jump to subroutine long $02B5DC.l [Writes: Stack Pointer] [Flow: call]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	lda $02894C.l,X		; BF 4C 89 02 ; Load long $02894C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	inc $A4.b		; E6 A4 ; Increment $A4.b [Reads: Direct Page] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	jsr $8EC9.w		; 20 C9 8E ; Jump to subroutine at $8EC9.w [Writes: Stack Pointer] [Flow: call]
	jsl $0DFA33.l		; 22 33 FA 0D ; Jump to subroutine long $0DFA33.l [Writes: Stack Pointer] [Flow: call]
	jmp $8AB3.w		; 4C B3 8A ; Jump to $8AB3.w [Flow: jump]
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0464.w		; 8D 64 04 ; Store accumulator to $0464.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	ldx #$1C.b		; A2 1C ; Load #$1C.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldx #$15.b		; A2 15 ; Load #$15.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0007.w		; C9 07 00 ; Compare #$0007.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	ldx #$11.b		; A2 11 ; Load #$11.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0017.w		; C9 17 00 ; Compare #$0017.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	cpx $0130.w		; EC 30 01 ; Compare $0130.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $0130.w		; AD 30 01 ; Load $0130.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00F1.w		; C9 F1 00 ; Compare #$00F1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07F391.l		; 22 91 F3 07 ; Jump to subroutine long $07F391.l [Writes: Stack Pointer] [Flow: call]
	dec $0464.w		; CE 64 04 ; Decrement $0464.w [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07F391.l		; 22 91 F3 07 ; Jump to subroutine long $07F391.l [Writes: Stack Pointer] [Flow: call]
	dec $0464.w		; CE 64 04 ; Decrement $0464.w [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01F528.l		; 22 28 F5 01 ; Jump to subroutine long $01F528.l [Writes: Stack Pointer] [Flow: call]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $1D.b		; 04 1D ; Test and set bits $1D.b [Reads: Accumulator] [Flags: Z]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $048A.w		; AE 8A 04 ; Load $048A.w into X register [Writes: X Index] [Flags: NZ]
	lda $01C31F.l,X		; BF 1F C3 01 ; Load long $01C31F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $01C322.l,X		; BF 22 C3 01 ; Load long $01C322.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $01F585.l		; 22 85 F5 01 ; Jump to subroutine long $01F585.l [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	jmp $8D71.w		; 4C 71 8D ; Jump to $8D71.w [Flow: jump]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E0FFF6.l,X		; FF F6 FF E0 ; Subtract with carry (long,X) $E0FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $6420E2.l,X		; FF E2 20 64 ; Subtract with carry (long,X) $6420E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $048A.w		; AD 8A 04 ; Load $048A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	cmp $0492.w		; CD 92 04 ; Compare $0492.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02920A.l,X		; 7F 0A 92 02 ; Add long $02920A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $029212.l,X		; 7F 12 92 02 ; Add long $029212.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	lda $048A.w		; AD 8A 04 ; Load $048A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $1D.b		; 04 1D ; Test and set bits $1D.b [Reads: Accumulator] [Flags: Z]
	lda $0492.w		; AD 92 04 ; Load $0492.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $048A.w		; AD 8A 04 ; Load $048A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$F002.w		; C9 02 F0 ; Compare #$F002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$0410.w		; A9 10 04 ; Load #$0410.w into accumulator [Writes: Accumulator] [Flags: NZ]
	trb $1DA5.w		; 1C A5 1D ; Test and reset bits $1DA5.w [Reads: Accumulator] [Flags: Z]
	and #$850F.w		; 29 0F 85 ; Logical AND #$850F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $92AD.w,X		; 1D AD 92 ; OR accumulator with memory $92AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $A520C2.l,X		; DF C2 20 A5 ; Compare accumulator (long,X) $A520C2.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jsr $E938.w		; 20 38 E9 ; Jump to subroutine at $E938.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $20E2.w		; 20 E2 20 ; Jump to subroutine at $20E2.w [Writes: Stack Pointer] [Flow: call]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$D004.w		; 29 04 D0 ; Logical AND #$D004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $048C.w		; AD 8C 04 ; Load $048C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$007F.w		; 29 7F 00 ; Logical AND #$007F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$FFFE.w		; A2 FE FF ; Load #$FFFE.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $06B0.w,X		; BD B0 06 ; Load $06B0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$007F.w		; 29 7F 00 ; Logical AND #$007F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	lda $06B0.w,X		; BD B0 06 ; Load $06B0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $048C.w		; 8D 8C 04 ; Store accumulator to $048C.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda $7E2080.l,X		; BF 80 20 7E ; Load long $7E2080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E2100.l,X		; 9F 00 21 7E ; Store accumulator (long,X) $7E2100.l,X [Reads: Accumulator, X Index]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$2000.w		; 09 00 20 ; Logical OR #$2000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E2180.l,X		; 9F 80 21 7E ; Store accumulator (long,X) $7E2180.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $CF		; 10 CF ; Branch if plus to $10, $CF [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $3493.w		; 2D 93 34 ; Logical AND $3493.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($A5.b,S),Y		; 93 A5 ; Store accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9319.w,X)		; FC 19 93 ; Jump to subroutine indirect indexed ($9319.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F295.l		; 22 95 F2 00 ; Jump to subroutine long $00F295.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	jsl $00F312.l		; [PATTERN: Memory clearing operation] 22 12 F3 00 ; Jump to subroutine long $00F312.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	stz $96.b		; 64 96 ; Store zero to $96.b
	stz $97.b		; 64 97 ; Store zero to $97.b
	stz $98.b		; [PATTERN: Memory clearing operation] 64 98 ; Store zero to $98.b
	stz $1E.b		; 64 1E ; Store zero to $1E.b
	stz $1F.b		; 64 1F ; Store zero to $1F.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $0132.w		; AD 32 01 ; Load $0132.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsl $01B8B4.l		; 22 B4 B8 01 ; Jump to subroutine long $01B8B4.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	dec $0464.w		; CE 64 04 ; Decrement $0464.w [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	stx $67.b		; 86 67 ; Store X register to $67.b [Reads: X Index]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta ($ED.b,S),Y		; 93 ED ; Store accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($03.b,S),Y		; 93 03 ; Store accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sty $22.b,X		; 94 22 ; Store Y register $22.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $2A.b,X		; 94 2A ; Store Y register $2A.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $AF.b,X		; 94 AF ; Store Y register $AF.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $8A.b		; C4 8A ; Compare $8A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda $8AC48A.l		; AF 8A C4 8A ; Load long $8AC48A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$94.b		; E0 94 ; Compare #$94.b with X register [Reads: X Index] [Flags: NCZ]
	adc $BE.b,X		; 75 BE ; Add $BE.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $C8.b,X		; 94 C8 ; Store Y register $C8.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $90.b,X		; 94 90 ; Store Y register $90.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc $1894.w		; ED 94 18 ; Subtract $1894.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $71.b,X		; 95 71 ; Store accumulator to $71.b,X [Reads: Accumulator, X Index]
	sta $72AD.w		; 8D AD 72 ; Store accumulator to $72AD.w [Reads: Accumulator]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$9C.b]		; 07 9C ; OR accumulator with memory (long) [$9C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($03.b)		; 72 03 ; Add with carry (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	ldx #$16.b		; A2 16 ; Load #$16.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	stx $012E.w		; 8E 2E 01 ; Store X register to $012E.w [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$F1.b		; A2 F1 ; Load #$F1.b into X register [Writes: X Index] [Flags: NZ]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	jmp $8CA9.w		; 4C A9 8C ; Jump to $8CA9.w [Flow: jump]
	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	jsl $01873A.l		; 22 3A 87 01 ; Jump to subroutine long $01873A.l [Writes: Stack Pointer] [Flow: call]
	jsl $00FDA7.l		; 22 A7 FD 00 ; Jump to subroutine long $00FDA7.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D66E.l		; 22 6E D6 00 ; Jump to subroutine long $00D66E.l [Writes: Stack Pointer] [Flow: call]
	jsl $0E942A.l		; 22 2A 94 0E ; Jump to subroutine long $0E942A.l [Writes: Stack Pointer] [Flow: call]
	jsl $02B5DC.l		; 22 DC B5 02 ; Jump to subroutine long $02B5DC.l [Writes: Stack Pointer] [Flow: call]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	jsr $8E0F.w		; 20 0F 8E ; Jump to subroutine at $8E0F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	jsr $8E1D.w		; 20 1D 8E ; Jump to subroutine at $8E1D.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	jsl $09C114.l		; 22 14 C1 09 ; Jump to subroutine long $09C114.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	lda $02894C.l,X		; BF 4C 89 02 ; Load long $02894C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	inc $A4.b		; E6 A4 ; Increment $A4.b [Reads: Direct Page] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	ldx #$3C.b		; A2 3C ; Load #$3C.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: NZ]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	ldx #$32.b		; A2 32 ; Load #$32.b into X register [Writes: X Index] [Flags: NZ]
	stx $0464.w		; 8E 64 04 ; Store X register to $0464.w [Reads: X Index]
	sty $012E.w		; 8C 2E 01 ; Store Y register to $012E.w [Reads: Y Index]
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$12.b		; C0 12 ; Compare #$12.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$FFE0.w		; A9 E0 FF ; Load #$FFE0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	ldx $048A.w		; AE 8A 04 ; Load $048A.w into X register [Writes: X Index] [Flags: NZ]
	lda $01C31F.l,X		; BF 1F C3 01 ; Load long $01C31F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $01C322.l,X		; BF 22 C3 01 ; Load long $01C322.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$12.b		; C0 12 ; Compare #$12.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$FFE0.w		; A9 E0 FF ; Load #$FFE0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$000C.w		; A9 0C 00 ; Load #$000C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$12.b		; C0 12 ; Compare #$12.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
.INDEX 16
	rep #$10		; C2 10
	ldx #$FFE8.w		; A2 E8 FF ; Load #$FFE8.w into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldx #$FFF8.w		; A2 F8 FF ; Load #$FFF8.w into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $8EC9.w		; 20 C9 8E ; Jump to subroutine at $8EC9.w [Writes: Stack Pointer] [Flow: call]
	jsl $0DFA33.l		; 22 33 FA 0D ; Jump to subroutine long $0DFA33.l [Writes: Stack Pointer] [Flow: call]
	jmp $8AB3.w		; 4C B3 8A ; Jump to $8AB3.w [Flow: jump]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	jsl $00E031.l		; 22 31 E0 00 ; Jump to subroutine long $00E031.l [Writes: Stack Pointer] [Flow: call]
	jmp $A1E9.w		; 4C E9 A1 ; Jump to $A1E9.w [Flow: jump]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	ldx #$1C.b		; A2 1C ; Load #$1C.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	jsl $01FEB0.l		; 22 B0 FE 01 ; Jump to subroutine long $01FEB0.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0464.w		; AD 64 04 ; Load $0464.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $83.b,X		; 95 83 ; Store accumulator to $83.b,X [Reads: Accumulator, X Index]
	sta $C2.b,X		; 95 C2 ; Store accumulator to $C2.b,X [Reads: Accumulator, X Index]
	jsr $E2A5.w		; 20 A5 E2 ; Jump to subroutine at $E2A5.w [Writes: Stack Pointer] [Flow: call]
	cmp $7EC180.l		; CF 80 C1 7E ; Compare accumulator (long) $7EC180.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC180.l		; CF 80 C1 7E ; Compare accumulator (long) $7EC180.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC180.l		; CF 80 C1 7E ; Compare accumulator (long) $7EC180.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC182.l		; CF 82 C1 7E ; Compare accumulator (long) $7EC182.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC182.l		; CF 82 C1 7E ; Compare accumulator (long) $7EC182.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC182.l		; CF 82 C1 7E ; Compare accumulator (long) $7EC182.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	cmp $7EC182.l		; CF 82 C1 7E ; Compare accumulator (long) $7EC182.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC180.l		; CF 80 C1 7E ; Compare accumulator (long) $7EC180.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	lda $0458.w		; AD 58 04 ; Load $0458.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $BB7B.w		; 20 7B BB ; Jump to subroutine at $BB7B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7EC184.l		; AF 84 C1 7E ; Load long $7EC184.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $7EC186.l		; AF 86 C1 7E ; Load long $7EC186.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $7EC188.l		; AF 88 C1 7E ; Load long $7EC188.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0600.w		; 8D 00 06 ; Store accumulator to $0600.w [Reads: Accumulator]
	lda $7EC18A.l		; AF 8A C1 7E ; Load long $7EC18A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	lda $7EC18C.l		; AF 8C C1 7E ; Load long $7EC18C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0608.w		; 8D 08 06 ; Store accumulator to $0608.w [Reads: Accumulator]
	lda $7EC18E.l		; AF 8E C1 7E ; Load long $7EC18E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $060C.w		; 8D 0C 06 ; Store accumulator to $060C.w [Reads: Accumulator]
	lda $7EC190.l		; AF 90 C1 7E ; Load long $7EC190.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0610.w		; 8D 10 06 ; Store accumulator to $0610.w [Reads: Accumulator]
	lda $7EC192.l		; AF 92 C1 7E ; Load long $7EC192.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0612.w		; 8D 12 06 ; Store accumulator to $0612.w [Reads: Accumulator]
	lda $7EC194.l		; AF 94 C1 7E ; Load long $7EC194.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0614.w		; 8D 14 06 ; Store accumulator to $0614.w [Reads: Accumulator]
	lda $7EC196.l		; AF 96 C1 7E ; Load long $7EC196.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0616.w		; 8D 16 06 ; Store accumulator to $0616.w [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $7EC198.l		; AF 98 C1 7E ; Load long $7EC198.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $7EC19A.l		; AF 9A C1 7E ; Load long $7EC19A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	lda $7EC19C.l		; AF 9C C1 7E ; Load long $7EC19C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	lda $7EC19E.l		; AF 9E C1 7E ; Load long $7EC19E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A9.b		; 85 A9 ; Store accumulator to $A9.b [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $7EC1A6.l		; AF A6 C1 7E ; Load long $7EC1A6.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	lda $7EC1A7.l		; AF A7 C1 7E ; Load long $7EC1A7.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $7EC1A8.l		; AF A8 C1 7E ; Load long $7EC1A8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $7EC1A9.l		; AF A9 C1 7E ; Load long $7EC1A9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $6C.b		; 85 6C ; Store accumulator to $6C.b [Reads: Accumulator]
	lda $7EC1AA.l		; AF AA C1 7E ; Load long $7EC1AA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A4.b		; 85 A4 ; Store accumulator to $A4.b [Reads: Accumulator]
	stz $4B.b		; [PATTERN: Memory clearing operation] 64 4B ; Store zero to $4B.b
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	jsr $8EC9.w		; 20 C9 8E ; Jump to subroutine at $8EC9.w [Writes: Stack Pointer] [Flow: call]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	jsl $07984B.l		; [PATTERN: Memory clearing operation] 22 4B 98 07 ; Jump to subroutine long $07984B.l [Writes: Stack Pointer] [Flow: call]
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $B0.b		; [PATTERN: Memory clearing operation] 64 B0 ; Store zero to $B0.b
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC211.l		; 8F 11 C2 7E ; Store accumulator (long) $7EC211.l [Reads: Accumulator]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC212.l		; 8F 12 C2 7E ; Store accumulator (long) $7EC212.l [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $031F.w		; 9C 1F 03 ; Store zero to $031F.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $01B8B4.l		; 22 B4 B8 01 ; Jump to subroutine long $01B8B4.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E296.w		; AC 96 E2 ; Load $E296.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $8D10.w		; 8C 10 8D ; Store Y register to $8D10.w [Reads: Y Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	stx $C8.b,Y		; 96 C8 ; Store X register $C8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $EC8A.w		; ED 8A EC ; Subtract $EC8A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	stx $0F.b,Y		; 96 0F ; Store X register $0F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$20.b],Y		; 97 20 ; Store accumulator (long indexed) [$20.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cpx $C2.b		; E4 C2 ; Compare $C2.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	jmp $A2A0.w		; 4C A0 A2 ; Jump to $A2A0.w [Flow: jump]
	jsl $01FEB0.l		; 22 B0 FE 01 ; Jump to subroutine long $01FEB0.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0017.w		; C9 17 00 ; Compare #$0017.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	stx $A4.b		; 86 A4 ; Store X register to $A4.b [Reads: X Index]
	jsr $BB7B.w		; 20 7B BB ; Jump to subroutine at $BB7B.w [Writes: Stack Pointer] [Flow: call]
	jsl $02B5DC.l		; 22 DC B5 02 ; Jump to subroutine long $02B5DC.l [Writes: Stack Pointer] [Flow: call]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	lda $02894C.l,X		; BF 4C 89 02 ; Load long $02894C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$8400.w		; A9 00 84 ; Load #$8400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	trb $1D85.w		; 1C 85 1D ; Test and reset bits $1D85.w [Reads: Accumulator] [Flags: Z]
	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$8F10.w		; E9 10 8F ; Subtract #$8F10.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $09A9.w,X		; 7E A9 09 ; Rotate right $09A9.w,X [Reads: X Index] [Flags: NCZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$8503.w		; 09 03 85 ; Logical OR #$8503.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4C.b,X		; 95 4C ; Store accumulator to $4C.b,X [Reads: Accumulator, X Index]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$D005.w		; C9 05 D0 ; Compare #$D005.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$CB22.w		; 09 22 CB ; Logical OR #$CB22.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($20.b),Y		; 11 20 ; OR accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($8D.b),Y		; 71 8D ; Add with carry ($8D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $3997.w,Y		; 39 97 39 ; AND accumulator with memory $3997.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$4D.b],Y		; 97 4D ; Store accumulator (long indexed) [$4D.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$61.b],Y		; 97 61 ; Store accumulator (long indexed) [$61.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$A9.b],Y		; 97 A9 ; Store accumulator (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$E6.b],Y		; 97 E6 ; Store accumulator (long indexed) [$E6.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $B0, $A5		; B0 A5 ; Branch if carry set to $B0, $A5 [Flow: branch]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $B0A5.w		; ED A5 B0 ; Subtract $B0A5.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($9720.w,X)		; 7C 20 97 ; Jump indirect indexed to ($9720.w,X) [Reads: X Index] [Flow: jump]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0100.w		; A2 00 01 ; Load #$0100.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$0100.w		; A0 00 01 ; Load #$0100.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0080.w		; A2 80 00 ; Load #$0080.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0100.w		; A0 00 01 ; Load #$0100.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0180.w		; A0 80 01 ; Load #$0180.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$487F.w		; A9 7F 48 ; Load #$487F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EB340.l,X		; BF 40 B3 7E ; Load long $7EB340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0080.w		; C0 80 00 ; Compare #$0080.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EB340.l,X		; BF 40 B3 7E ; Load long $7EB340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0100.w		; C0 00 01 ; Compare #$0100.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; [PATTERN: Memory clearing operation] 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01C22A.l		; 22 2A C2 01 ; Jump to subroutine long $01C22A.l [Writes: Stack Pointer] [Flow: call]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0180.w		; A0 80 01 ; Load #$0180.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $9773.w		; 20 73 97 ; Jump to subroutine at $9773.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0002.w		; E9 02 00 ; Subtract #$0002.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $04B6.w		; AD B6 04 ; Load $04B6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $04B6.w		; AD B6 04 ; Load $04B6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $01E7A9.l		; 22 A9 E7 01 ; Jump to subroutine long $01E7A9.l [Writes: Stack Pointer] [Flow: call]
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	asl $58.b,X		; 16 58 ; Arithmetic shift left $58.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $58.b,X		; 16 58 ; Arithmetic shift left $58.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $58.b,X		; 16 58 ; Arithmetic shift left $58.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: NCZ]
	asl $58.b,X		; 16 58 ; Arithmetic shift left $58.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	sta ($87.b,X)		; 81 87 ; Store accumulator ($87.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($8A.b,S),Y		; B3 8A ; Load accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$98.b]		; E7 98 ; Subtract with carry (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsl $00F135.l		; 22 35 F1 00 ; Jump to subroutine long $00F135.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda $7EC541.l		; AF 41 C5 7E ; Load long $7EC541.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC501.l		; 8F 01 C5 7E ; Store accumulator (long) $7EC501.l [Reads: Accumulator]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $45		; D0 45 ; Branch if not equal to $D0, $45 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda #$01EC.w		; A9 EC 01 ; Load #$01EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E2800.l,X		; 9F 00 28 7E ; Store accumulator (long,X) $7E2800.l,X [Reads: Accumulator, X Index]
	sta $7E3000.l,X		; 9F 00 30 7E ; Store accumulator (long,X) $7E3000.l,X [Reads: Accumulator, X Index]
	sta $7E3800.l,X		; 9F 00 38 7E ; Store accumulator (long,X) $7E3800.l,X [Reads: Accumulator, X Index]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E4800.l,X		; 9F 00 48 7E ; Store accumulator (long,X) $7E4800.l,X [Reads: Accumulator, X Index]
	sta $7E5000.l,X		; 9F 00 50 7E ; Store accumulator (long,X) $7E5000.l,X [Reads: Accumulator, X Index]
	sta $7E5800.l,X		; 9F 00 58 7E ; Store accumulator (long,X) $7E5800.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; [PATTERN: Memory clearing operation] E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0800.w		; E0 00 08 ; Compare #$0800.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $0422.w		; [PATTERN: Memory clearing operation] 9C 22 04 ; Store zero to $0422.w
	stz $0424.w		; 9C 24 04 ; Store zero to $0424.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00EBCF.l		; 22 CF EB 00 ; Jump to subroutine long $00EBCF.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $02895C.l,X		; DF 5C 89 02 ; Compare accumulator (long,X) $02895C.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	lda $0297FA.l,X		; BF FA 97 02 ; Load long $0297FA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	ldy #$0007.w		; A0 07 00 ; Load #$0007.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$1F80.w		; 09 80 1F ; Logical OR #$1F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	ora #$1F88.w		; 09 88 1F ; Logical OR #$1F88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E4200.l,X		; 9F 00 42 7E ; Store accumulator (long,X) $7E4200.l,X [Reads: Accumulator, X Index]
	inc $0E.b		; E6 0E ; Increment $0E.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $012A.w		; [PATTERN: Memory clearing operation] EE 2A 01 ; Increment $012A.w [Flags: NZ]
	jsl $09F7DE.l		; 22 DE F7 09 ; Jump to subroutine long $09F7DE.l [Writes: Stack Pointer] [Flow: call]
	jsl $1ECCE3.l		; 22 E3 CC 1E ; Jump to subroutine long $1ECCE3.l [Writes: Stack Pointer] [Flow: call]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C2EB.w		; 20 EB C2 ; Jump to subroutine at $C2EB.w [Writes: Stack Pointer] [Flow: call]
	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $17		; [PATTERN: Memory clearing operation] D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $14.b		; 64 14 ; Store zero to $14.b
	lda $0130.w		; AD 30 01 ; Load $0130.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0133.w		; 8D 33 01 ; Store accumulator to $0133.w [Reads: Accumulator]
	lda $0ABD.w		; AD BD 0A ; Load $0ABD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $01F5DA.l		; 22 DA F5 01 ; Jump to subroutine long $01F5DA.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C2E4.w		; 20 E4 C2 ; Jump to subroutine at $C2E4.w [Writes: Stack Pointer] [Flow: call]
	jsr $9922.w		; 20 22 99 ; Jump to subroutine at $9922.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	rol $AD99.w		; 2E 99 AD ; Rotate left $AD99.w [Flags: NCZ]
	tsb $8501.w		; 0C 01 85 ; Test and set bits $8501.w [Reads: Accumulator] [Flags: Z]
	.db $10, $64		; 10 64 ; Branch if plus to $10, $64 [Flow: branch]
	ora ($64.b),Y		; 11 64 ; OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	jsr $C2F6.w		; 20 F6 C2 ; Jump to subroutine at $C2F6.w [Writes: Stack Pointer] [Flow: call]
	jsr $9951.w		; 20 51 99 ; Jump to subroutine at $9951.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta $1164.w,Y		; 99 64 11 ; Store accumulator to $1164.w,Y [Reads: Y Index, Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0696.w		; AD 96 06 ; Load $0696.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0698.w		; 0D 98 06 ; Logical OR $0698.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $069A.w		; 8D 9A 06 ; Store accumulator to $069A.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($CA.b,X)		; 01 CA ; Logical OR ($CA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $9A19.w,Y		; 99 19 9A ; Store accumulator to $9A19.w,Y [Reads: Y Index, Accumulator]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($997E.w,X)		; FC 7E 99 ; Jump to subroutine indirect indexed ($997E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0351.w		; 8D 51 03 ; Store accumulator to $0351.w [Reads: Accumulator]
	lda #$06.b		; [PATTERN: Memory clearing operation] A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	stz $31.b		; 64 31 ; Store zero to $31.b
	stz $30.b		; 64 30 ; Store zero to $30.b
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $010E.w		; AD 0E 01 ; Load $010E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $02997A.l,X		; BF 7A 99 02 ; Load long $02997A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	sta $67.b		; [PATTERN: Memory clearing operation] 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	jmp $0DA18E.l		; 5C 8E A1 0D ; Jump long to $0DA18E.l [Flow: jump]
	stz $012A.w		; 9C 2A 01 ; Store zero to $012A.w
	stz $1F0C.w		; 9C 0C 1F ; Store zero to $1F0C.w
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	jsl $0FFD3C.l		; 22 3C FD 0F ; Jump to subroutine long $0FFD3C.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC148.l		; 8F 48 C1 7E ; Store accumulator (long) $7EC148.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx $010E.w		; AE 0E 01 ; Load $010E.w into X register [Writes: X Index] [Flags: NZ]
	lda $02D82E.l,X		; BF 2E D8 02 ; Load long $02D82E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	cmp #$F2.b		; C9 F2 ; Compare #$F2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldx $0130.w		; AE 30 01 ; Load $0130.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	stz $04A0.w		; 9C A0 04 ; Store zero to $04A0.w
	jsl $0AFD0C.l		; 22 0C FD 0A ; Jump to subroutine long $0AFD0C.l [Writes: Stack Pointer] [Flow: call]
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: NZ]
	jsl $00F28B.l		; 22 8B F2 00 ; Jump to subroutine long $00F28B.l [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; [PATTERN: Memory clearing operation] E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F312.l		; 22 12 F3 00 ; Jump to subroutine long $00F312.l [Writes: Stack Pointer] [Flow: call]
	stz $012A.w		; 9C 2A 01 ; Store zero to $012A.w
	stz $1F0C.w		; 9C 0C 1F ; Store zero to $1F0C.w
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC148.l		; AF 48 C1 7E ; Load long $7EC148.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	jsl $07B107.l		; 22 07 B1 07 ; Jump to subroutine long $07B107.l [Writes: Stack Pointer] [Flow: call]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $46		; D0 46 ; Branch if not equal to $D0, $46 [Flow: branch]
	lda $A1.b		; A5 A1 ; Load $A1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $2F.b		; A6 2F ; Load $2F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $069A.w		; 8D 9A 06 ; Store accumulator to $069A.w [Reads: Accumulator]
	lda $0696.w		; AD 96 06 ; Load $0696.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0698.w		; 0D 98 06 ; Logical OR $0698.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $0699.w		; AD 99 06 ; Load $0699.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	lda $0699.w		; AD 99 06 ; Load $0699.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0699.w		; 8D 99 06 ; Store accumulator to $0699.w [Reads: Accumulator]
	stx $0692.w		; [PATTERN: Memory clearing operation] 8E 92 06 ; Store X register to $0692.w [Reads: X Index]
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$15.b		; [PATTERN: Memory clearing operation] A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	stz $96.b		; 64 96 ; Store zero to $96.b
	stz $97.b		; 64 97 ; Store zero to $97.b
	stz $98.b		; 64 98 ; Store zero to $98.b
	stz $1E.b		; [PATTERN: Memory clearing operation] 64 1E ; Store zero to $1E.b
	stz $1F.b		; 64 1F ; Store zero to $1F.b
	stz $03EF.w		; 9C EF 03 ; Store zero to $03EF.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$4C26.w		; A2 26 4C ; Load #$4C26.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$8C4C.w		; A0 4C 8C ; Load #$8C4C.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	cmp #$0005.w		; C9 05 00 ; Compare #$0005.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	cmp #$0007.w		; C9 07 00 ; Compare #$0007.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	ldx #$4A26.w		; A2 26 4A ; Load #$4A26.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$874A.w		; A0 4A 87 ; Load #$874A.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0043.w		; C9 43 00 ; Compare #$0043.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0045.w		; C9 45 00 ; Compare #$0045.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0047.w		; C9 47 00 ; Compare #$0047.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stx $9C.b		; 86 9C ; Store X register to $9C.b [Reads: X Index]
	sty $9D.b		; 84 9D ; Store Y register to $9D.b [Reads: Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $9A.b		; E6 9A ; Increment $9A.b [Reads: Direct Page] [Flags: NZ]
	ora $229A.w,Y		; 19 9A 22 ; OR accumulator with memory $229A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta $06.b,S		; 83 06 ; Store accumulator (stack relative) $06.b,S [Reads: Stack Pointer, Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9AD3.w,X)		; FC D3 9A ; Jump to subroutine indirect indexed ($9AD3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp $0DA18E.l		; 5C 8E A1 0D ; Jump long to $0DA18E.l [Flow: jump]
	jsl $00F295.l		; 22 95 F2 00 ; Jump to subroutine long $00F295.l [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($9B.b,X)		; 01 9B ; Logical OR ($9B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldx #$1C.b		; A2 1C ; Load #$1C.b into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $8D		; 10 8D ; Branch if plus to $10, $8D [Flow: branch]
	ora $9C1C9C.l		; 0F 9C 1C 9C ; OR accumulator with memory (long) $9C1C9C.l [Writes: Accumulator] [Flags: NZ]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9AED.w,X)		; FC ED 9A ; Jump to subroutine indirect indexed ($9AED.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $010E.w		; AE 0E 01 ; Load $010E.w into X register [Writes: X Index] [Flags: NZ]
	lda $02D82E.l,X		; BF 2E D8 02 ; Load long $02D82E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	jmp $8CA9.w		; 4C A9 8C ; Jump to $8CA9.w [Flow: jump]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	jsr $D8B3.w		; 20 B3 D8 ; Jump to subroutine at $D8B3.w [Writes: Stack Pointer] [Flow: call]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF37C.l,X		; BF 7C F3 7E ; Load long $7EF37C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0DFA68.l		; 22 68 FA 0D ; Jump to subroutine long $0DFA68.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5A.b		; 85 5A ; Store accumulator to $5A.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; [PATTERN: Memory clearing operation] 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; [PATTERN: Memory clearing operation] 9C 09 03 ; Store zero to $0309.w
	stz $030B.w		; 9C 0B 03 ; Store zero to $030B.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $51.b		; 85 51 ; Store accumulator to $51.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; [PATTERN: Memory clearing operation] 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $045A.w		; 9C 5A 04 ; Store zero to $045A.w
	stz $0458.w		; 9C 58 04 ; Store zero to $0458.w
	jsr $C57B.w		; 20 7B C5 ; Jump to subroutine at $C57B.w [Writes: Stack Pointer] [Flow: call]
	jsl $0E942A.l		; 22 2A 94 0E ; Jump to subroutine long $0E942A.l [Writes: Stack Pointer] [Flow: call]
	ldx $0AA1.w		; AE A1 0A ; Load $0AA1.w into X register [Writes: X Index] [Flags: NZ]
	lda $02811E.l,X		; BF 1E 81 02 ; Load long $02811E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $00D337.l		; 22 37 D3 00 ; Jump to subroutine long $00D337.l [Writes: Stack Pointer] [Flow: call]
	jsl $01B8BF.l		; 22 BF B8 01 ; Jump to subroutine long $01B8BF.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA4.w		; 8D A4 0A ; Store accumulator to $0AA4.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta OBJSEL.w		; 8D 01 21 ; Store accumulator to OBJSEL.w [Reads: Accumulator]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB1.w		; [PATTERN: Memory clearing operation] 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	jsr $C630.w		; 20 30 C6 ; Jump to subroutine at $C630.w [Writes: Stack Pointer] [Flow: call]
	jsl $0DFA33.l		; 22 33 FA 0D ; Jump to subroutine long $0DFA33.l [Writes: Stack Pointer] [Flow: call]
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	jsr $8AEF.w		; 20 EF 8A ; Jump to subroutine at $8AEF.w [Writes: Stack Pointer] [Flow: call]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0ED6DD.l		; 22 DD D6 0E ; Jump to subroutine long $0ED6DD.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	jsl $0DDB75.l		; 22 75 DB 0D ; Jump to subroutine long $0DDB75.l [Writes: Stack Pointer] [Flow: call]
	jsl $02838C.l		; 22 8C 83 02 ; Jump to subroutine long $02838C.l [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $0132.w		; AD 32 01 ; Load $0132.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	cmp #$F2.b		; C9 F2 ; Compare #$F2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lda $0136.w		; [PATTERN: Memory clearing operation] AD 36 01 ; Load $0136.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz NMITIMEN.w		; 9C 00 42 ; Store zero to NMITIMEN.w
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	inc $0136.w		; EE 36 01 ; Increment $0136.w [Flags: NZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta APUIO0.w		; 8D 40 21 ; Store accumulator to APUIO0.w [Reads: Accumulator]
	jsl $008925.l		; 22 25 89 00 ; Jump to subroutine long $008925.l [Writes: Stack Pointer] [Flow: call]
	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta NMITIMEN.w		; 8D 00 42 ; Store accumulator to NMITIMEN.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $854C.w		; 4C 4C 85 ; Jump to $854C.w [Flow: jump]
	lda $13.b		; A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	jsl $079520.l		; 22 20 95 07 ; Jump to subroutine long $079520.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	inc $04C7.w		; EE C7 04 ; Increment $04C7.w [Flags: NZ]
	jsr $8EC9.w		; 20 C9 8E ; Jump to subroutine at $8EC9.w [Writes: Stack Pointer] [Flow: call]
	jsr $8D71.w		; 20 71 8D ; Jump to subroutine at $8D71.w [Writes: Stack Pointer] [Flow: call]
	lda $0132.w		; AD 32 01 ; Load $0132.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda $0130.w		; AD 30 01 ; Load $0130.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0133.w		; 8D 33 01 ; Store accumulator to $0133.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $939C.w,Y		; 59 9C 93 ; Exclusive OR accumulator with memory $939C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $9CAD.w		; 9C AD 9C ; Store zero to $9CAD.w
	cmp ($9C.b),Y		; D1 9C ; Compare accumulator ($9C.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $9A19.w,Y		; 99 19 9A ; Store accumulator to $9A19.w,Y [Reads: Y Index, Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9C3E.w,X)		; FC 3E 9C ; Jump to subroutine indirect indexed ($9C3E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	jmp $0DA18E.l		; 5C 8E A1 0D ; Jump long to $0DA18E.l [Flow: jump]
	jsl $0DF1B3.l		; 22 B3 F1 0D ; Jump to subroutine long $0DF1B3.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	jsl $0DF128.l		; 22 28 F1 0D ; Jump to subroutine long $0DF128.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: NZ]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	inc $02E4.w		; EE E4 02 ; Increment $02E4.w [Flags: NZ]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	jsl $0DDB75.l		; 22 75 DB 0D ; Jump to subroutine long $0DDB75.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	jsl $07A7B0.l		; 22 B0 A7 07 ; Jump to subroutine long $07A7B0.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AC6B.l		; 22 6B AC 09 ; Jump to subroutine long $09AC6B.l [Writes: Stack Pointer] [Flow: call]
	jsl $0992AC.l		; 22 AC 92 09 ; Jump to subroutine long $0992AC.l [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $078000.l		; 22 00 80 07 ; Jump to subroutine long $078000.l [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03EF.w		; 8D EF 03 ; Store accumulator to $03EF.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $B0.b		; [PATTERN: Memory clearing operation] C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $9D.b,X		; 16 9D ; Arithmetic shift left $9D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jsl $9E069D.l		; 22 9D 06 9E ; Jump to subroutine long $9E069D.l [Writes: Stack Pointer] [Flow: call]
	ora $9E159E.l		; 0F 9E 15 9E ; OR accumulator with memory (long) $9E159E.l [Writes: Accumulator] [Flags: NZ]
	eor $B69D.w,X		; 5D 9D B6 ; Exclusive OR accumulator with memory $B69D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $9DC2.w,X		; 9D C2 9D ; Store accumulator to $9DC2.w,X [Reads: Accumulator, X Index]
	sbc $9D.b,X		; F5 9D ; Subtract $9D.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $939C.w,Y		; 59 9C 93 ; Exclusive OR accumulator with memory $939C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $9CAD.w		; 9C AD 9C ; Store zero to $9CAD.w
	jsl $11A59E.l		; 22 9E A5 11 ; Jump to subroutine long $11A59E.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9CE2.w,X)		; FC E2 9C ; Jump to subroutine indirect indexed ($9CE2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	jsr $854C.w		; 20 4C 85 ; Jump to subroutine at $854C.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	sta $0410.w		; 8D 10 04 ; Store accumulator to $0410.w [Reads: Accumulator]
	jsl $00FDEE.l		; 22 EE FD 00 ; Jump to subroutine long $00FDEE.l [Writes: Stack Pointer] [Flow: call]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	jsl $00EE78.l		; 22 78 EE 00 ; Jump to subroutine long $00EE78.l [Writes: Stack Pointer] [Flow: call]
	jsr $AB08.w		; 20 08 AB ; Jump to subroutine at $AB08.w [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; [PATTERN: Memory clearing operation] E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $0402.w		; [PATTERN: Memory clearing operation] 9C 02 04 ; Store zero to $0402.w
	stz $30.b		; 64 30 ; Store zero to $30.b
	lda #$7FFF.w		; A9 FF 7F ; Load #$7FFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	sta $7EC540.l		; 8F 40 C5 7E ; Store accumulator (long) $7EC540.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0BFFEE.l		; 22 EE FF 0B ; Jump to subroutine long $0BFFEE.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$2641.w		; A9 41 26 ; Load #$2641.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP7.w		; 8D 70 43 ; Store accumulator to DMAP7.w [Reads: Accumulator]
	ldx #$003E.w		; A2 3E 00 ; Load #$003E.w into X register [Writes: X Index] [Flags: NZ]
	lda #$FF00.w		; A9 00 FF ; Load #$FF00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	sta $1B40.w,X		; 9D 40 1B ; Store accumulator to $1B40.w,X [Reads: Accumulator, X Index]
	sta $1B80.w,X		; 9D 80 1B ; Store accumulator to $1B80.w,X [Reads: Accumulator, X Index]
	sta $1BC0.w,X		; 9D C0 1B ; Store accumulator to $1BC0.w,X [Reads: Accumulator, X Index]
	sta $1C00.w,X		; 9D 00 1C ; Store accumulator to $1C00.w,X [Reads: Accumulator, X Index]
	sta $1C40.w,X		; 9D 40 1C ; Store accumulator to $1C40.w,X [Reads: Accumulator, X Index]
	sta $1C80.w,X		; 9D 80 1C ; Store accumulator to $1C80.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E7		; 10 E7 ; Branch if plus to $10, $E7 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx #$0035.w		; A2 35 00 ; Load #$0035.w into X register [Writes: X Index] [Flags: NZ]
	stx $1CF0.w		; 8E F0 1C ; Store X register to $1CF0.w [Reads: X Index]
.INDEX 8
	sep #$10		; E2 10
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D788.l		; 22 88 D7 00 ; Jump to subroutine long $00D788.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DFA60.l		; 22 60 FA 0D ; Jump to subroutine long $0DFA60.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0EC440.l		; 22 40 C4 0E ; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0036.w		; A9 36 00 ; Load #$0036.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	stz $012D.w		; 9C 2D 01 ; Store zero to $012D.w
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $11.b		; 86 11 ; Store X register to $11.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0EC440.l		; 22 40 C4 0E ; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	stx $11.b		; 86 11 ; Store X register to $11.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00FE5E.l		; 22 5E FE 00 ; Jump to subroutine long $00FE5E.l [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00FE64.l		; 22 64 FE 00 ; Jump to subroutine long $00FE64.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $00FF2F.l		; 22 2F FF 00 ; Jump to subroutine long $00FF2F.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $38		; D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	jsl $029E6E.l		; 22 6E 9E 02 ; Jump to subroutine long $029E6E.l [Writes: Stack Pointer] [Flow: call]
	jsl $02C463.l		; 22 63 C4 02 ; Jump to subroutine long $02C463.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF29B.l		; AF 9B F2 7E ; Load long $7EF29B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF29B.l		; [PATTERN: Memory clearing operation] 8F 9B F2 7E ; Store accumulator (long) $7EF29B.l [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $0710.w		; [PATTERN: Memory clearing operation] 9C 10 07 ; Store zero to $0710.w
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $E6.b		; 64 E6 ; Store zero to $E6.b
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3C7.l		; 8F C7 F3 7E ; Store accumulator (long) $7EF3C7.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$15.b		; C9 15 ; Compare #$15.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	jsr $E4A3.w		; 20 A3 E4 ; Jump to subroutine at $E4A3.w [Writes: Stack Pointer] [Flow: call]
	ldy #$5A.b		; [PATTERN: Memory clearing operation] A0 5A ; Load #$5A.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $00D394.l		; 22 94 D3 00 ; Jump to subroutine long $00D394.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AC6B.l		; 22 6B AC 09 ; Jump to subroutine long $09AC6B.l [Writes: Stack Pointer] [Flow: call]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3A.b		; [PATTERN: Memory clearing operation] 64 3A ; Store zero to $3A.b
	stz $03EF.w		; 9C EF 03 ; Store zero to $03EF.w
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $939C.w,Y		; 59 9C 93 ; Exclusive OR accumulator with memory $939C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $9CAD.w		; [PATTERN: Memory clearing operation] 9C AD 9C ; Store zero to $9CAD.w
	cmp ($9C.b),Y		; D1 9C ; Compare accumulator ($9C.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stz $11A5.w,X		; 9E A5 11 ; Store zero to $11A5.w,X [Reads: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9E80.w,X)		; FC 80 9E ; Jump to subroutine indirect indexed ($9E80.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	jmp $0DA18E.l		; 5C 8E A1 0D ; Jump long to $0DA18E.l [Flow: jump]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $30.b		; [PATTERN: Memory clearing operation] 64 30 ; Store zero to $30.b
.ACCU 8
	sep #$20		; E2 20
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $02D8.w		; [PATTERN: Memory clearing operation] 9C D8 02 ; Store zero to $02D8.w
	stz $02DA.w		; 9C DA 02 ; Store zero to $02DA.w
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; [PATTERN: Memory clearing operation] 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	jmp $9A37.w		; 4C 37 9A ; Jump to $9A37.w [Flow: jump]
	and $9F429F.l		; 2F 9F 42 9F ; AND accumulator with memory (long) $9F429F.l [Writes: Accumulator] [Flags: NZ]
	lsr $769F.w,X		; 5E 9F 76 ; Logical shift right $769F.w,X [Reads: X Index] [Flags: NCZ]
	sta $949F8B.l,X		; 9F 8B 9F 94 ; Store accumulator (long,X) $949F8B.l,X [Reads: Accumulator, X Index]
	sta $C19FC0.l,X		; 9F C0 9F C1 ; Store accumulator (long,X) $C19FC0.l,X [Reads: Accumulator, X Index]
	sta $C29FC9.l,X		; 9F C9 9F C2 ; Store accumulator (long,X) $C29FC9.l,X [Reads: Accumulator, X Index]
	and ($A5.b,X)		; 21 A5 ; Logical AND ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sep #$48		; E2 48 ; Set processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9ECA.w,X)		; FC CA 9E ; Jump to subroutine indirect indexed ($9ECA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp $0DA18E.l		; 5C 8E A1 0D ; Jump long to $0DA18E.l [Flow: jump]
	jsl $0AFE80.l		; 22 80 FE 0A ; Jump to subroutine long $0AFE80.l [Writes: Stack Pointer] [Flow: call]
	jsl $07A45F.l		; 22 5F A4 07 ; Jump to subroutine long $07A45F.l [Writes: Stack Pointer] [Flow: call]
	jsl $02A1C7.l		; 22 C7 A1 02 ; Jump to subroutine long $02A1C7.l [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	inc $02E4.w		; EE E4 02 ; Increment $02E4.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0AFE80.l		; 22 80 FE 0A ; Jump to subroutine long $0AFE80.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda #$5B.b		; A9 5B ; Load #$5B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; [PATTERN: Memory clearing operation] 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	stz $1B.b		; 64 1B ; Store zero to $1B.b
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0AFE80.l		; 22 80 FE 0A ; Jump to subroutine long $0AFE80.l [Writes: Stack Pointer] [Flow: call]
	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	jsl $00893D.l		; [PATTERN: Memory clearing operation] 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	jsl $0DFA60.l		; 22 60 FA 0D ; Jump to subroutine long $0DFA60.l [Writes: Stack Pointer] [Flow: call]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1AF0.w		; 8D F0 1A ; Store accumulator to $1AF0.w [Reads: Accumulator]
	stz $1AF1.w		; 9C F1 1A ; Store zero to $1AF1.w
	jsl $0AB8C5.l		; 22 C5 B8 0A ; Jump to subroutine long $0AB8C5.l [Writes: Stack Pointer] [Flow: call]
	jsr $854C.w		; 20 4C 85 ; Jump to subroutine at $854C.w [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0AB948.l		; 22 48 B9 0A ; Jump to subroutine long $0AB948.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: NZ]
	lda $13.b		; [PATTERN: Memory clearing operation] A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	stz $0402.w		; 9C 02 04 ; Store zero to $0402.w
	stz $0403.w		; 9C 03 04 ; Store zero to $0403.w
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	jsl $1AF6F5.l		; 22 F5 F6 1A ; Jump to subroutine long $1AF6F5.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	stz $1B.b		; 64 1B ; Store zero to $1B.b
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0AB96C.l		; 22 6C B9 0A ; Jump to subroutine long $0AB96C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($A0.b,X)		; 21 A0 ; Logical AND ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $A035A0.l		; 2F A0 35 A0 ; AND accumulator with memory (long) $A035A0.l [Writes: Accumulator] [Flags: NZ]
	adc $A0.b		; 65 A0 ; Add $A0.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	bit #$A0.b		; 89 A0 ; Test bits #$A0.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $E4A0.w		; CD A0 E4 ; Compare $E4A0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($37.b,X)		; A1 37 ; Load accumulator ($37.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($21.b,X)		; A1 21 ; Load accumulator ($21.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($37.b,X)		; A1 37 ; Load accumulator ($37.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($51.b,X)		; A1 51 ; Load accumulator ($51.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($64.b,X)		; A1 64 ; Load accumulator ($64.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($73.b,X)		; A1 73 ; Load accumulator ($73.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($86.b,X)		; A1 86 ; Load accumulator ($86.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A5.b,X)		; A1 A5 ; Load accumulator ($A5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9FCE.w,X)		; FC CE 9F ; Jump to subroutine indirect indexed ($9FCE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	jmp $0DA18E.l		; 5C 8E A1 0D ; Jump long to $0DA18E.l [Flow: jump]
	jsl $07F1A3.l		; 22 A3 F1 07 ; Jump to subroutine long $07F1A3.l [Writes: Stack Pointer] [Flow: call]
	stz $66.b		; 64 66 ; Store zero to $66.b
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	jmp $8CA9.w		; 4C A9 8C ; Jump to $8CA9.w [Flow: jump]
	jsr $C2E4.w		; 20 E4 C2 ; Jump to subroutine at $C2E4.w [Writes: Stack Pointer] [Flow: call]
	jmp $A2A0.w		; 4C A0 A2 ; Jump to $A2A0.w [Flow: jump]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz NMITIMEN.w		; 9C 00 42 ; Store zero to NMITIMEN.w
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta APUIO0.w		; 8D 40 21 ; Store accumulator to APUIO0.w [Reads: Accumulator]
	jsl $008931.l		; 22 31 89 00 ; Jump to subroutine long $008931.l [Writes: Stack Pointer] [Flow: call]
	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta NMITIMEN.w		; 8D 00 42 ; Store accumulator to NMITIMEN.w [Reads: Accumulator]
	lda #$89.b		; A9 89 ; Load #$89.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A1.b		; 85 A1 ; Store accumulator to $A1.b [Reads: Accumulator]
	jsl $00834B.l		; 22 4B 83 00 ; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	jsr $E851.w		; 20 51 E8 ; Jump to subroutine at $E851.w [Writes: Stack Pointer] [Flow: call]
	jsr $AF1E.w		; 20 1E AF ; Jump to subroutine at $AF1E.w [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $61		; 80 61 ; Branch always to $80, $61 [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda #$7D.b		; A9 7D ; Load #$7D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda #$51.b		; A9 51 ; Load #$51.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	jsr $C6AD.w		; 20 AD C6 ; Jump to subroutine at $C6AD.w [Writes: Stack Pointer] [Flow: call]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	jsr $C6EB.w		; 20 EB C6 ; Jump to subroutine at $C6EB.w [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $EDB9.w		; 20 B9 ED ; Jump to subroutine at $EDB9.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E1.b		; 85 E1 ; Store accumulator to $E1.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	lda #$EC.b		; A9 EC ; Load #$EC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $2F.b		; [PATTERN: Memory clearing operation] 64 2F ; Store zero to $2F.b
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $26.b		; [PATTERN: Memory clearing operation] 64 26 ; Store zero to $26.b
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	jsr $C2F6.w		; 20 F6 C2 ; Jump to subroutine at $C2F6.w [Writes: Stack Pointer] [Flow: call]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0CCA54.l		; 22 54 CA 0C ; Jump to subroutine long $0CCA54.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda #$0173.w		; A9 73 01 ; Load #$0173.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	jsl $0EC440.l		; 22 40 C4 0E ; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0CCAB1.l		; 22 B1 CA 0C ; Jump to subroutine long $0CCAB1.l [Writes: Stack Pointer] [Flow: call]
	jsl $0EC440.l		; 22 40 C4 0E ; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0CCAB1.l		; 22 B1 CA 0C ; Jump to subroutine long $0CCAB1.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; [PATTERN: Memory clearing operation] 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $26.b		; 64 26 ; Store zero to $26.b
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0CCAB1.l		; 22 B1 CA 0C ; Jump to subroutine long $0CCAB1.l [Writes: Stack Pointer] [Flow: call]
	jsl $07F49C.l		; 22 9C F4 07 ; Jump to subroutine long $07F49C.l [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; [PATTERN: Memory clearing operation] A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $26.b		; 64 26 ; Store zero to $26.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0CCAB1.l		; 22 B1 CA 0C ; Jump to subroutine long $0CCAB1.l [Writes: Stack Pointer] [Flow: call]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $0EF404.l		; 22 04 F4 0E ; Jump to subroutine long $0EF404.l [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0CCAB1.l		; 22 B1 CA 0C ; Jump to subroutine long $0CCAB1.l [Writes: Stack Pointer] [Flow: call]
	jsl $00EF8A.l		; 22 8A EF 00 ; Jump to subroutine long $00EF8A.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $19		; [PATTERN: Memory clearing operation] D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$FF.b		; [PATTERN: Memory clearing operation] A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0128.w		; 8D 28 01 ; Store accumulator to $0128.w [Reads: Accumulator]
	stz $012A.w		; 9C 2A 01 ; Store zero to $012A.w
	stz $1F0C.w		; 9C 0C 1F ; Store zero to $1F0C.w
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CA.l		; 8F CA F3 7E ; Store accumulator (long) $7EF3CA.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	jsr $AD08.w		; 20 08 AD ; Jump to subroutine at $AD08.w [Writes: Stack Pointer] [Flow: call]
	tsb $C904.w		; 0C 04 C9 ; Test and set bits $C904.w [Reads: Accumulator] [Flags: Z]
	sbc $A927F0.l,X		; FF F0 27 A9 ; Subtract with carry (long,X) $A927F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1185.w,Y		; 19 85 11 ; OR accumulator with memory $1185.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF36F.l		; AF 6F F3 7E ; Load long $7EF36F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF37C.l,X		; 9F 7C F3 7E ; Store accumulator (long,X) $7EF37C.l,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $000408.l,X		; 1F 08 04 00 ; Logical OR long $000408.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $0ABD.w		; AD BD 0A ; Load $0ABD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$B3.b		; A9 B3 ; Load #$B3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	ldx $045A.w		; AE 5A 04 ; Load $045A.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4E		; D0 4E ; Branch if not equal to $D0, $4E [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	ldy $0414.w		; AC 14 04 ; Load $0414.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $43		; F0 43 ; Branch if equal to $F0, $43 [Flow: branch]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$07.b		; C0 07 ; Compare #$07.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	lda #$62.b		; A9 62 ; Load #$62.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED657.l		; 22 57 D6 0E ; Jump to subroutine long $0ED657.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC019.l		; 8F 19 C0 7E ; Store accumulator (long) $7EC019.l [Reads: Accumulator]
	sta $7EC01B.l		; 8F 1B C0 7E ; Store accumulator (long) $7EC01B.l [Reads: Accumulator]
	sta $7EC01D.l		; 8F 1D C0 7E ; Store accumulator (long) $7EC01D.l [Reads: Accumulator]
	sta $7EC01F.l		; 8F 1F C0 7E ; Store accumulator (long) $7EC01F.l [Reads: Accumulator]
	sta $7EC021.l		; 8F 21 C0 7E ; Store accumulator (long) $7EC021.l [Reads: Accumulator]
	sta $7EC023.l		; 8F 23 C0 7E ; Store accumulator (long) $7EC023.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $1BF0C2.l		; 22 C2 F0 1B ; Jump to subroutine long $1BF0C2.l [Writes: Stack Pointer] [Flow: call]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda $02A1E5.l,X		; BF E5 A1 02 ; Load long $02A1E5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	jsl $1BEE74.l		; 22 74 EE 1B ; Jump to subroutine long $1BEE74.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC77.l		; 22 77 EC 1B ; Jump to subroutine long $1BEC77.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECC5.l		; 22 C5 EC 1B ; Jump to subroutine long $1BECC5.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECE4.l		; 22 E4 EC 1B ; Jump to subroutine long $1BECE4.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC005.l		; [PATTERN: Memory clearing operation] 8F 05 C0 7E ; Store accumulator (long) $7EC005.l [Reads: Accumulator]
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E90C.l		; 22 0C E9 00 ; Jump to subroutine long $00E90C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8CA9.w		; 20 A9 8C ; Jump to subroutine at $8CA9.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $A1E9.w		; 20 E9 A1 ; Jump to subroutine at $A1E9.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $A281.w		; 20 81 A2 ; Jump to subroutine at $A281.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E9.b		; 85 E9 ; Store accumulator to $E9.b [Reads: Accumulator]
	lda $0605.w		; AD 05 06 ; Load $0605.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0605.w		; 8D 05 06 ; Store accumulator to $0605.w [Reads: Accumulator]
	lda $0607.w		; AD 07 06 ; Load $0607.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0607.w		; 8D 07 06 ; Store accumulator to $0607.w [Reads: Accumulator]
	lda $0601.w		; AD 01 06 ; Load $0601.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0601.w		; 8D 01 06 ; Store accumulator to $0601.w [Reads: Accumulator]
	lda $0603.w		; AD 03 06 ; Load $0603.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0603.w		; 8D 03 06 ; Store accumulator to $0603.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E3.b		; 85 E3 ; Store accumulator to $E3.b [Reads: Accumulator]
	lda $060D.w		; AD 0D 06 ; Load $060D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $060D.w		; 8D 0D 06 ; Store accumulator to $060D.w [Reads: Accumulator]
	lda $060F.w		; AD 0F 06 ; Load $060F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $060F.w		; 8D 0F 06 ; Store accumulator to $060F.w [Reads: Accumulator]
	lda $0609.w		; AD 09 06 ; Load $0609.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0609.w		; 8D 09 06 ; Store accumulator to $0609.w [Reads: Accumulator]
	lda $060B.w		; AD 0B 06 ; Load $060B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $060B.w		; 8D 0B 06 ; Store accumulator to $060B.w [Reads: Accumulator]
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E9.b		; 85 E9 ; Store accumulator to $E9.b [Reads: Accumulator]
	lda $0605.w		; AD 05 06 ; Load $0605.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0605.w		; 8D 05 06 ; Store accumulator to $0605.w [Reads: Accumulator]
	lda $0607.w		; AD 07 06 ; Load $0607.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0607.w		; 8D 07 06 ; Store accumulator to $0607.w [Reads: Accumulator]
	lda $0601.w		; AD 01 06 ; Load $0601.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0601.w		; 8D 01 06 ; Store accumulator to $0601.w [Reads: Accumulator]
	lda $0603.w		; AD 03 06 ; Load $0603.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0603.w		; 8D 03 06 ; Store accumulator to $0603.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $23.b		; E5 23 ; Subtract $23.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E3.b		; 85 E3 ; Store accumulator to $E3.b [Reads: Accumulator]
	lda $060D.w		; AD 0D 06 ; Load $060D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $060D.w		; 8D 0D 06 ; Store accumulator to $060D.w [Reads: Accumulator]
	lda $060F.w		; AD 0F 06 ; Load $060F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $060F.w		; 8D 0F 06 ; Store accumulator to $060F.w [Reads: Accumulator]
	lda $0609.w		; AD 09 06 ; Load $0609.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0609.w		; 8D 09 06 ; Store accumulator to $0609.w [Reads: Accumulator]
	lda $060B.w		; AD 0B 06 ; Load $060B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $060B.w		; 8D 0B 06 ; Store accumulator to $060B.w [Reads: Accumulator]
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $21.b		; E5 21 ; Subtract $21.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E9.b		; 85 E9 ; Store accumulator to $E9.b [Reads: Accumulator]
	lda $0605.w		; AD 05 06 ; Load $0605.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0605.w		; 8D 05 06 ; Store accumulator to $0605.w [Reads: Accumulator]
	lda $0607.w		; AD 07 06 ; Load $0607.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0607.w		; 8D 07 06 ; Store accumulator to $0607.w [Reads: Accumulator]
	lda $0601.w		; AD 01 06 ; Load $0601.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0601.w		; 8D 01 06 ; Store accumulator to $0601.w [Reads: Accumulator]
	lda $0603.w		; AD 03 06 ; Load $0603.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0603.w		; 8D 03 06 ; Store accumulator to $0603.w [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1A14.w,Y		; 99 14 1A ; Store accumulator to $1A14.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $88A5.w,X		; 3C A5 88 ; Test bits $88A5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $C6AB.w,X		; BC AB C6 ; Load Y register $C6AB.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $27AB.w		; ED AB 27 ; Subtract $27AB.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ldy $ABDA.w		; AC DA AB ; Load $ABDA.w into Y register [Writes: Y Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldy $C242.w		; AC 42 C2 ; Load $C242.w into Y register [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $AC8F.w		; AD 8F AC ; Load $AC8F.w into accumulator [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$AC		; C2 AC
	jmp ($5EAD.w)		; 6C AD 5E ; Jump indirect to ($5EAD.w) [Flow: jump]
	ldx $AF19.w		; AE 19 AF ; Load $AF19.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $C6AB.w,X		; BC AB C6 ; Load Y register $C6AB.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $27AB.w		; ED AB 27 ; Subtract $27AB.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ldy $ABDA.w		; AC DA AB ; Load $ABDA.w into Y register [Writes: Y Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldy $B0D2.w		; AC D2 B0 ; Load $B0D2.w into Y register [Writes: Y Index] [Flags: NZ]
	lsr $C8AE.w,X		; 5E AE C8 ; Logical shift right $C8AE.w,X [Reads: X Index] [Flags: NCZ]
	lda ($DF.b),Y		; B1 DF ; Load accumulator ($DF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b),Y		; B1 88 ; Load accumulator ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $50AB.w,X		; BC AB 50 ; Load Y register $50AB.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($CE.b),Y		; B1 CE ; Load accumulator ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $AEEA.w		; AE EA AE ; Load $AEEA.w into X register [Writes: X Index] [Flags: NZ]
	ldy $C2.b		; A4 C2 ; Load $C2.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	asl $25AF.w,X		; 1E AF 25 ; Arithmetic shift left $25AF.w,X [Reads: X Index] [Flags: NCZ]
	sbc $B1BB.w		; ED BB B1 ; Subtract $B1BB.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($5E.b),Y		; B1 5E ; Load accumulator ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $AF0B.w		; AE 0B AF ; Load $AF0B.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $59AB.w,X		; BC AB 59 ; Load Y register $59AB.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $B0D2.w		; ED D2 B0 ; Subtract $B0D2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($0E.b),Y		; B1 0E ; Load accumulator ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0F.b,X		; B4 0F ; Load Y register $0F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $21.b,X		; B4 21 ; Load Y register $21.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $01.b,X		; B5 01 ; Load $01.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($E2.b),Y		; 11 E2 ; OR accumulator with memory ($E2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	ora ($0A.b),Y		; 11 0A ; OR accumulator with memory ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($A40D.w,X)		; FC 0D A4 ; Jump to subroutine indirect indexed ($A40D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$21		; C2 21
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DDB75.l		; 22 75 DB 0D ; Jump to subroutine long $0DDB75.l [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $51		; B0 51 ; Branch if carry set to $B0, $51 [Flow: branch]
	lda $7EF2F0.l		; AF F0 F2 7E ; Load long $7EF2F0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $49		; D0 49 ; Branch if not equal to $D0, $49 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$58.b		; C9 58 ; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$5A.b		; C9 5A ; Compare #$5A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	ldx #$36.b		; A2 36 ; Load #$36.b into X register [Writes: X Index] [Flags: NZ]
	stx $012E.w		; 8E 2E 01 ; Store X register to $012E.w [Reads: X Index]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $0494.w		; AD 94 04 ; Load $0494.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0494.w		; 8D 94 04 ; Store accumulator to $0494.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E1.b		; A5 E1 ; Load $E1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02A46D.l,X		; 7F 6D A4 02 ; Add long $02A46D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E1.b		; 85 E1 ; Store accumulator to $E1.b [Reads: Accumulator]
	lda $E7.b		; A5 E7 ; Load $E7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02A471.l,X		; 7F 71 A4 02 ; Add long $02A471.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E7.b		; 85 E7 ; Store accumulator to $E7.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0112.w		; AD 12 01 ; Load $0112.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02E4.w		; 0D E4 02 ; Logical OR $02E4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0FFC.w		; 0D FC 0F ; Logical OR $0FFC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04C6.w		; 0D C6 04 ; Logical OR $04C6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $A597.w		; 4C 97 A5 ; Jump to $A597.w [Flow: jump]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF4.w		; 8D F4 1C ; Store accumulator to $1CF4.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0186.w		; A9 86 01 ; Load #$0186.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $CE		; 80 CE ; Branch always to $80, $CE [Flow: branch]
	lda $04C6.w		; AD C6 04 ; Load $04C6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $1BCAC4.l		; 22 C4 CA 1B ; Jump to subroutine long $1BCAC4.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $078000.l		; 22 00 80 07 ; Jump to subroutine long $078000.l [Writes: Stack Pointer] [Flow: call]
	lda $04B4.w		; AD B4 04 ; Load $04B4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0AFDA8.l		; 22 A8 FD 0A ; Jump to subroutine long $0AFDA8.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$1E00.w		; 29 00 1E ; Logical AND #$1E00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0700.w		; 8D 00 07 ; Store accumulator to $0700.w [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$1E00.w		; 29 00 1E ; Logical AND #$1E00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0700.w		; 0D 00 07 ; Logical OR $0700.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0700.w		; 8D 00 07 ; Store accumulator to $0700.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	jsr $BB90.w		; 20 90 BB ; Jump to subroutine at $BB90.w [Writes: Stack Pointer] [Flow: call]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsl $1BBBF4.l		; 22 F4 BB 1B ; Jump to subroutine long $1BBBF4.l [Writes: Stack Pointer] [Flow: call]
	jsl $0EF582.l		; 22 82 F5 0E ; Jump to subroutine long $0EF582.l [Writes: Stack Pointer] [Flow: call]
	jsr $A9C4.w		; 20 C4 A9 ; Jump to subroutine at $A9C4.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $AB7B.w		; 20 7B AB ; Jump to subroutine at $AB7B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $121110.l		; 0F 10 11 12 ; OR accumulator with memory (long) $121110.l [Writes: Accumulator] [Flags: NZ]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1E1E.w,X		; 1D 1E 1E ; OR accumulator with memory $1E1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $251B1B.l		; 22 1B 1B 25 ; Jump to subroutine long $251B1B.l [Writes: Stack Pointer] [Flow: call]
	asl $281E.w,X		; 1E 1E 28 ; Arithmetic shift left $281E.w,X [Reads: X Index] [Flags: NCZ]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $2E2D.w		; 2C 2D 2E ; Test bits $2E2D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $323030.l		; 2F 30 30 32 ; AND accumulator with memory (long) $323030.l [Writes: Accumulator] [Flags: NZ]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$30.b],Y		; 37 30 ; AND accumulator with memory (long indexed) [$30.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $3A		; 30 3A ; Branch if minus to $30, $3A [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $3535.w,X		; 3C 35 35 ; Test bits $3535.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and $800F80.l,X		; 3F 80 0F 80 ; AND accumulator with memory (long,X) $800F80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3F003F.l		; 0F 3F 00 3F ; OR accumulator with memory (long) $3F003F.l [Writes: Accumulator] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $10FF.w,X		; FE FF 10 ; Increment memory $10FF.w,X [Reads: X Index] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $10FFF0.l,X		; FF F0 FF 10 ; Subtract with carry (long,X) $10FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $200002.l,X		; FF 02 00 20 ; Subtract with carry (long,X) $200002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2000.w		; 20 00 20 ; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $F273.w		; 20 73 F2 ; Jump to subroutine at $F273.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$000C.w		; 29 0C 00 ; Logical AND #$000C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $0700.w		; AE 00 07 ; Load $0700.w into X register [Writes: X Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02A8C4.l,X		; FF C4 A8 02 ; Subtract with carry (long,X) $02A8C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $3B		; 90 3B ; Branch if carry clear to $90, $3B [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	cmp $0716.w		; CD 16 07 ; Compare $0716.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $32		; B0 32 ; Branch if carry set to $B0, $32 [Flow: branch]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	lda $0716.w		; AD 16 07 ; Load $0716.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $0700.w		; AE 00 07 ; Load $0700.w into X register [Writes: X Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02A944.l,X		; FF 44 A9 02 ; Subtract with carry (long,X) $02A944.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsl $0EDE49.l		; 22 49 DE 0E ; Jump to subroutine long $0EDE49.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	jsl $07F439.l		; 22 39 F4 07 ; Jump to subroutine long $07F439.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $F3		; B0 F3 ; Branch if carry set to $B0, $F3 [Flow: branch]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	stz $03.b		; 64 03 ; Store zero to $03.b
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $02A62C.l,X		; 3F 2C A6 02 ; AND accumulator with memory (long,X) $02A62C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $0700.w		; AD 00 07 ; Load $0700.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02A834.l,X		; 7F 34 A8 02 ; Add long $02A834.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02A634.l,X		; 7F 34 A6 02 ; Add long $02A634.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda $02A5EC.l,X		; BF EC A5 02 ; Load long $02A5EC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7EF3CA.l		; 0F CA F3 7E ; OR accumulator with memory (long) $7EF3CA.l [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	sta $040A.w		; 8D 0A 04 ; Store accumulator to $040A.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0130.w		; CD 30 01 ; Compare $0130.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	jsr $AB08.w		; 20 08 AB ; Jump to subroutine at $AB08.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0410.w		; 8D 10 04 ; Store accumulator to $0410.w [Reads: Accumulator]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $FC		; [PATTERN: Memory clearing operation] 90 FC ; Branch if carry clear to $90, $FC [Flow: branch]
	stx $0418.w		; 8E 18 04 ; Store X register to $0418.w [Reads: X Index]
	stx $069C.w		; 8E 9C 06 ; Store X register to $069C.w [Reads: X Index]
	stz $0696.w		; 9C 96 06 ; Store zero to $0696.w
	stz $0698.w		; 9C 98 06 ; Store zero to $0698.w
	stz $0126.w		; 9C 26 01 ; Store zero to $0126.w
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EFD40.l,X		; BF 40 FD 7E ; Load long $7EFD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	jsr $C769.w		; 20 69 C7 ; Jump to subroutine at $C769.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stz $0412.w		; 9C 12 04 ; Store zero to $0412.w
	lda $7EFCC0.l,X		; BF C0 FC 7E ; Load long $7EFCC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda $00FC9C.l,X		; BF 9C FC 00 ; Load long $00FC9C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0712.w		; AD 12 07 ; Load $0712.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0714.w		; 8D 14 07 ; Store accumulator to $0714.w [Reads: Accumulator]
	lda $02A844.l,X		; BF 44 A8 02 ; Load long $02A844.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0712.w		; 8D 12 07 ; Store accumulator to $0712.w [Reads: Accumulator]
	lda $02A884.l,X		; BF 84 A8 02 ; Load long $02A884.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	ldy #$20.b		; A0 20 ; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	sty $0AA1.w		; 8C A1 0A ; Store Y register to $0AA1.w [Reads: Y Index]
	lda $00D8F4.l,X		; BF F4 D8 00 ; Load long $00D8F4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA4.w		; 8D A4 0A ; Store accumulator to $0AA4.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00BF.w		; 29 BF 00 ; Logical AND #$00BF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02A8C4.l,X		; BF C4 A8 02 ; Load long $02A8C4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0708.w		; 8D 08 07 ; Store accumulator to $0708.w [Reads: Accumulator]
	lda $02A944.l,X		; BF 44 A9 02 ; Load long $02A944.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $070C.w		; 8D 0C 07 ; Store accumulator to $070C.w [Reads: Accumulator]
	lda #$03F0.w		; A9 F0 03 ; Load #$03F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $0712.w		; AE 12 07 ; Load $0712.w into X register [Writes: X Index] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$01F0.w		; A9 F0 01 ; Load #$01F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $070A.w		; 8D 0A 07 ; Store accumulator to $070A.w [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $070E.w		; 8D 0E 07 ; Store accumulator to $070E.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $F273.w		; 20 73 F2 ; Jump to subroutine at $F273.w [Writes: Stack Pointer] [Flow: call]
	jsl $0EDEE3.l		; 22 E3 DE 0E ; Jump to subroutine long $0EDEE3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF2BB.l		; AF BB F2 7E ; Load long $7EF2BB.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$DF.b		; 29 DF ; Logical AND #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF2BB.l		; 8F BB F2 7E ; Store accumulator (long) $7EF2BB.l [Reads: Accumulator]
	lda $7EF2FB.l		; AF FB F2 7E ; Load long $7EF2FB.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$DF.b		; 29 DF ; Logical AND #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF2FB.l		; 8F FB F2 7E ; Store accumulator (long) $7EF2FB.l [Reads: Accumulator]
	lda $7EF216.l		; AF 16 F2 7E ; Load long $7EF216.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF216.l		; 8F 16 F2 7E ; Store accumulator (long) $7EF216.l [Reads: Accumulator]
	lda $7EF051.l		; AF 51 F0 7E ; Load long $7EF051.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF051.l		; 8F 51 F0 7E ; Store accumulator (long) $7EF051.l [Reads: Accumulator]
	jsl $00D66E.l		; 22 6E D6 00 ; Jump to subroutine long $00D66E.l [Writes: Stack Pointer] [Flow: call]
	jsl $00DF1A.l		; 22 1A DF 00 ; Jump to subroutine long $00DF1A.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; [PATTERN: Memory clearing operation] 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04C8.w		; 9C C8 04 ; Store zero to $04C8.w
	stz $04C9.w		; 9C C9 04 ; Store zero to $04C9.w
	jsr $EFE8.w		; 20 E8 EF ; Jump to subroutine at $EFE8.w [Writes: Stack Pointer] [Flow: call]
	inc $0710.w		; EE 10 07 ; Increment $0710.w [Flags: NZ]
	jsr $F031.w		; 20 31 F0 ; Jump to subroutine at $F031.w [Writes: Stack Pointer] [Flow: call]
	jsl $00E031.l		; 22 31 E0 00 ; Jump to subroutine long $00E031.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	jsr $C001.w		; 20 01 C0 ; Jump to subroutine at $C001.w [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $AC30.w		; 4C 30 AC ; Jump to $AC30.w [Flow: jump]
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; [PATTERN: Memory clearing operation] 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $09C49D.l		; 22 9D C4 09 ; Jump to subroutine long $09C49D.l [Writes: Stack Pointer] [Flow: call]
	stz $04AC.w		; 9C AC 04 ; Store zero to $04AC.w
	stz $04AD.w		; 9C AD 04 ; Store zero to $04AD.w
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jmp $AC27.w		; 4C 27 AC ; Jump to $AC27.w [Flow: jump]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	ldx $0410.w		; AE 10 04 ; Load $0410.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	stx $0416.w		; 8E 16 04 ; Store X register to $0416.w [Reads: X Index]
	jsr $F20E.w		; 20 0E F2 ; Jump to subroutine at $F20E.w [Writes: Stack Pointer] [Flow: call]
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	ldx $0410.w		; AE 10 04 ; Load $0410.w into X register [Writes: X Index] [Flags: NZ]
	stx $0416.w		; 8E 16 04 ; Store X register to $0416.w [Reads: X Index]
	jsr $F20E.w		; 20 0E F2 ; Jump to subroutine at $F20E.w [Writes: Stack Pointer] [Flow: call]
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $38		; 90 38 ; Branch if carry clear to $90, $38 [Flow: branch]
	ldx $0410.w		; AE 10 04 ; Load $0410.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $04		; [PATTERN: Memory clearing operation] D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0410.w		; 9C 10 04 ; Store zero to $0410.w
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $7EC174.l		; AF 74 C1 7E ; Load long $7EC174.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $7EC176.l		; AF 76 C1 7E ; Load long $7EC176.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	jsl $09ACF3.l		; 22 F3 AC 09 ; Jump to subroutine long $09ACF3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07E69D.l		; 22 9D E6 07 ; Jump to subroutine long $07E69D.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0001.w		; 69 01 00 ; Add #$0001.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	dec $069A.w		; CE 9A 06 ; Decrement $069A.w [Flags: NZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	stz $11.b		; 64 11 ; Store zero to $11.b
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0003.w		; 69 03 00 ; Add #$0003.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	jsr $BB90.w		; 20 90 BB ; Jump to subroutine at $BB90.w [Writes: Stack Pointer] [Flow: call]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $F273.w		; 20 73 F2 ; Jump to subroutine at $F273.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0001.w		; E9 01 00 ; Subtract #$0001.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	dec $069A.w		; CE 9A 06 ; Decrement $069A.w [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $0DA9.w		; 0D A9 0D ; Logical OR $0DA9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora $0DAB.w		; 0D AB 0D ; Logical OR $0DAB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $AD0D.w		; AC 0D AD ; Load $AD0D.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $0DAE.w		; 0D AE 0D ; Logical OR $0DAE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $0DB00D.l		; AF 0D B0 0D ; Load long $0DB00D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($0D.b),Y		; B1 0D ; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0D.b)		; B2 0D ; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($0D.b,S),Y		; B3 0D ; Load accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $0D.b,Y		; B6 0D ; Load X register $0D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $0DB9.w		; 0D B9 0D ; Logical OR $0DB9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ora $0DBB.w		; 0D BB 0D ; Logical OR $0DBB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $BD0D.w,X		; BC 0D BD ; Load Y register $BD0D.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $0DCD.w		; 0D CD 0D ; Logical OR $0DCD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec $CF0D.w		; CE 0D CF ; Decrement $CF0D.w [Flags: NZ]
	ora $0DD0.w		; 0D D0 0D ; Logical OR $0DD0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($0D.b,S),Y		; D3 0D ; Compare accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	pei ($0D.b)		; D4 0D ; Push effective indirect address ($0D.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $0D.b,X		; D5 0D ; Compare accumulator $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $0D.b,X		; D6 0D ; Decrement memory $0D.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp [$0D.b],Y		; D7 0D ; Compare accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $0DD9.w		; 0D D9 0D ; Logical OR $0DD9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora $0DD1.w		; 0D D1 0D ; Logical OR $0DD1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($0D.b)		; D2 0D ; Compare accumulator (indirect) ($0D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($0D.b,S),Y		; D3 0D ; Compare accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	pei ($0D.b)		; D4 0D ; Push effective indirect address ($0D.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($0D.b),Y		; D1 0D ; Compare accumulator ($0D.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($0D.b)		; D2 0D ; Compare accumulator (indirect) ($0D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$0D.b],Y		; D7 0D ; Compare accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $0918.w		; 0D 18 09 ; Logical OR $0918.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1A09.w,Y		; 19 09 1A ; OR accumulator with memory $1A09.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$1B.b		; 09 1B ; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0DDC.w		; 0D DC 0D ; Logical OR $0DDC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $DE0D.w,X		; DD 0D DE ; Compare accumulator $DE0D.w,X [Reads: X Index] [Flags: NCZ]
	ora $0DD1.w		; 0D D1 0D ; Logical OR $0DD1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($0D.b)		; D2 0D ; Compare accumulator (indirect) ($0D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora $0DDC.w		; 0D DC 0D ; Logical OR $0DDC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($0E.b,X)		; 21 0E ; Logical AND ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $0E230E.l		; 22 0E 23 0E ; Jump to subroutine long $0E230E.l [Writes: Stack Pointer] [Flow: call]
	bit $0E.b		; 24 0E ; Test bits $0E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda $0690.w		; AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $069A.w		; 8D 9A 06 ; Store accumulator to $069A.w [Reads: Accumulator]
	stz $0416.w		; [PATTERN: Memory clearing operation] 9C 16 04 ; Store zero to $0416.w
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $AD85.w		; 20 85 AD ; Jump to subroutine at $AD85.w [Writes: Stack Pointer] [Flow: call]
	stz $0692.w		; 9C 92 06 ; Store zero to $0692.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $AD87.w		; 20 87 AD ; Jump to subroutine at $AD87.w [Writes: Stack Pointer] [Flow: call]
	stz $0692.w		; 9C 92 06 ; Store zero to $0692.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0690.w		; [PATTERN: Memory clearing operation] AD 90 06 ; Load $0690.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$D003.w		; C9 03 D0 ; Compare #$D003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0692.w		; AD 92 06 ; Load $0692.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$F007.w		; 29 07 F0 ; Logical AND #$F007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $30C2.w		; AE C2 30 ; Load $30C2.w into X register [Writes: X Index] [Flags: NZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0698.w		; AD 98 06 ; Load $0698.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	sta $7EF800.l,X		; 9F 00 F8 7E ; Store accumulator (long,X) $7EF800.l,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $0692.w		; AC 92 06 ; Load $0692.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $ACDA.w,Y		; B9 DA AC ; Load $ACDA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	sta $7EFA00.l,X		; 9F 00 FA 7E ; Store accumulator (long,X) $7EFA00.l,X [Reads: Accumulator, X Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0698.w		; AE 98 06 ; Load $0698.w into X register [Writes: X Index] [Flags: NZ]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
	lda $0698.w		; AD 98 06 ; Load $0698.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF802.l,X		; 9F 02 F8 7E ; Store accumulator (long,X) $7EF802.l,X [Reads: Accumulator, X Index]
	ldx $0698.w		; AE 98 06 ; Load $0698.w into X register [Writes: X Index] [Flags: NZ]
	ldy $0692.w		; AC 92 06 ; Load $0692.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $ACDC.w,Y		; B9 DC AC ; Load $ACDC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	sta $7EFA02.l,X		; 9F 02 FA 7E ; Store accumulator (long,X) $7EFA02.l,X [Reads: Accumulator, X Index]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0698.w		; AE 98 06 ; Load $0698.w into X register [Writes: X Index] [Flags: NZ]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
	lda $0698.w		; AD 98 06 ; Load $0698.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF804.l,X		; 9F 04 F8 7E ; Store accumulator (long,X) $7EF804.l,X [Reads: Accumulator, X Index]
	ldx $0698.w		; AE 98 06 ; Load $0698.w into X register [Writes: X Index] [Flags: NZ]
	ldy $0692.w		; AC 92 06 ; Load $0692.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $ACDE.w,Y		; B9 DE AC ; Load $ACDE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7E2080.l,X		; 9F 80 20 7E ; Store accumulator (long,X) $7E2080.l,X [Reads: Accumulator, X Index]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	sta $7EFA04.l,X		; 9F 04 FA 7E ; Store accumulator (long,X) $7EFA04.l,X [Reads: Accumulator, X Index]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0698.w		; AE 98 06 ; Load $0698.w into X register [Writes: X Index] [Flags: NZ]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
	lda $0698.w		; AD 98 06 ; Load $0698.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0082.w		; 69 82 00 ; Add #$0082.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF806.l,X		; 9F 06 F8 7E ; Store accumulator (long,X) $7EF806.l,X [Reads: Accumulator, X Index]
	ldx $0698.w		; AE 98 06 ; Load $0698.w into X register [Writes: X Index] [Flags: NZ]
	ldy $0692.w		; AC 92 06 ; Load $0692.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $ACE0.w,Y		; B9 E0 AC ; Load $ACE0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7E2082.l,X		; 9F 82 20 7E ; Store accumulator (long,X) $7E2082.l,X [Reads: Accumulator, X Index]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	sta $7EFA06.l,X		; 9F 06 FA 7E ; Store accumulator (long,X) $7EFA06.l,X [Reads: Accumulator, X Index]
	ldy #$0082.w		; A0 82 00 ; Load #$0082.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0698.w		; AE 98 06 ; Load $0698.w into X register [Writes: X Index] [Flags: NZ]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
	ldy $1000.w		; AC 00 10 ; Load $1000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Y Index, Accumulator]
	lda $04AC.w		; AD AC 04 ; Load $04AC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $04AC.w		; 8D AC 04 ; Store accumulator to $04AC.w [Reads: Accumulator]
	inc $0690.w		; EE 90 06 ; Increment $0690.w [Flags: NZ]
	lda $0692.w		; AD 92 06 ; Load $0692.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0690.w		; EE 90 06 ; Increment $0690.w [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	inc $0692.w		; EE 92 06 ; Increment $0692.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C2E4.w		; 20 E4 C2 ; Jump to subroutine at $C2E4.w [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	adc $A0AE.w		; 6D AE A0 ; Add $A0AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldx #$86.b		; A2 86 ; Load #$86.b into X register [Writes: X Index] [Flags: NZ]
	ldx $8AA6.w		; AE A6 8A ; Load $8AA6.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0130.w		; CD 30 01 ; Compare $0130.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	jmp $8CA9.w		; 4C A9 8C ; Jump to $8CA9.w [Flow: jump]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	jsr $E9BC.w		; 20 BC E9 ; Jump to subroutine at $E9BC.w [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C2E4.w		; 20 E4 C2 ; Jump to subroutine at $C2E4.w [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp $A9AE.w,X		; DD AE A9 ; Compare accumulator $A9AE.w,X [Reads: X Index] [Flags: NCZ]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	ora ($64.b,S),Y		; 13 64 ; OR accumulator (stack relative indirect indexed) ($64.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $A9		; B0 A9 ; Branch if carry set to $B0, $A9 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C2E4.w		; 20 E4 C2 ; Jump to subroutine at $C2E4.w [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	sbc $A9AE.w,Y		; F9 AE A9 ; Subtract with carry $A9AE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	ora ($20.b,S),Y		; 13 20 ; OR accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $A9E9.w,X		; BC E9 A9 ; Load Y register $A9E9.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora #$85.b		; 09 85 ; Logical OR #$85.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	ora $641185.l		; 0F 85 11 64 ; OR accumulator with memory (long) $641185.l [Writes: Accumulator] [Flags: NZ]
	.db $B0, $60		; [PATTERN: Memory clearing operation] B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	jsl $09AFD6.l		; 22 D6 AF 09 ; Jump to subroutine long $09AFD6.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C499.l		; 22 99 C4 09 ; Jump to subroutine long $09C499.l [Writes: Stack Pointer] [Flow: call]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC213.l		; 8F 13 C2 7E ; Store accumulator (long) $7EC213.l [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC215.l		; 8F 15 C2 7E ; Store accumulator (long) $7EC215.l [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC217.l		; 8F 17 C2 7E ; Store accumulator (long) $7EC217.l [Reads: Accumulator]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC219.l		; 8F 19 C2 7E ; Store accumulator (long) $7EC219.l [Reads: Accumulator]
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC21B.l		; 8F 1B C2 7E ; Store accumulator (long) $7EC21B.l [Reads: Accumulator]
	lda $0410.w		; AD 10 04 ; Load $0410.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC21D.l		; [PATTERN: Memory clearing operation] 8F 1D C2 7E ; Store accumulator (long) $7EC21D.l [Reads: Accumulator]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC21F.l		; 8F 1F C2 7E ; Store accumulator (long) $7EC21F.l [Reads: Accumulator]
	stz $8C.b		; 64 8C ; Store zero to $8C.b
	stz $0622.w		; 9C 22 06 ; Store zero to $0622.w
	stz $0620.w		; 9C 20 06 ; Store zero to $0620.w
	ldy #$0390.w		; A0 90 03 ; Load #$0390.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $44		; 90 44 ; Branch if carry clear to $90, $44 [Flow: branch]
	ldx #$0097.w		; A2 97 00 ; Load #$0097.w into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0180.w		; C9 80 01 ; Compare #$0180.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	ldx #$0080.w		; A2 80 00 ; Load #$0080.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$0097.w		; A2 97 00 ; Load #$0097.w into X register [Writes: X Index] [Flags: NZ]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	jmp $B00B.w		; 4C 0B B0 ; Jump to $B00B.w [Flow: jump]
	ldx #$0094.w		; A2 94 00 ; Load #$0094.w into X register [Writes: X Index] [Flags: NZ]
	cmp #$0181.w		; C9 81 01 ; Compare #$0181.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F5		; F0 F5 ; Branch if equal to $F0, $F5 [Flow: branch]
	ldx #$0093.w		; A2 93 00 ; Load #$0093.w into X register [Writes: X Index] [Flags: NZ]
	cmp #$0189.w		; C9 89 01 ; Compare #$0189.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $ED		; F0 ED ; Branch if equal to $F0, $ED [Flow: branch]
	cmp #$0182.w		; C9 82 01 ; Compare #$0182.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0183.w		; C9 83 01 ; Compare #$0183.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0080A2.l		; 0F A2 80 00 ; OR accumulator with memory (long) $0080A2.l [Writes: Accumulator] [Flags: NZ]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$9E.b		; A2 9E ; Load #$9E.b into X register [Writes: X Index] [Flags: NZ]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $9DA2.w		; 4D A2 9D ; Exclusive OR $9DA2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$95.b		; A2 95 ; Load #$95.b into X register [Writes: X Index] [Flags: NZ]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $05C9.w,X		; 3E C9 05 ; Rotate left $05C9.w,X [Reads: X Index] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $07C9.w,Y		; 39 C9 07 ; AND accumulator with memory $07C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $A2.b,X		; 34 A2 ; Test bits $A2.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	stz $C900.w		; 9C 00 C9 ; Store zero to $C900.w
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$C9.b]		; 27 C9 ; AND accumulator with memory (long) [$C9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $7EF2F0.l		; AF F0 F2 7E ; Load long $7EF2F0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $80.b		; 14 80 ; Test and reset bits $80.b [Reads: Accumulator] [Flags: Z]
	ora $0096A2.l		; 0F A2 96 00 ; OR accumulator with memory (long) $0096A2.l [Writes: Accumulator] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	ldx #$9F.b		; A2 9F ; Load #$9F.b into X register [Writes: X Index] [Flags: NZ]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $86.b		; 84 86 ; Store Y register to $86.b [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $8C.b		; 86 8C ; Store X register to $8C.b [Reads: X Index]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $29.b		; 04 29 ; Test and set bits $29.b [Reads: Accumulator] [Flags: Z]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $29.b		; [PATTERN: Memory clearing operation] 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $4A00.w,X		; 3E 00 4A ; Rotate left $4A00.w,X [Reads: X Index] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	stz $0410.w		; 9C 10 04 ; Store zero to $0410.w
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$97.b		; E0 97 ; Compare #$97.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	cpx #$94.b		; E0 94 ; Compare #$94.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	cpx #$93.b		; E0 93 ; Compare #$93.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	cpx #$9D.b		; E0 9D ; Compare #$9D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	cpx #$9E.b		; E0 9E ; Compare #$9E.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	cpx #$9F.b		; E0 9F ; Compare #$9F.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$95.b		; E0 95 ; Compare #$95.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	cpx #$9C.b		; E0 9C ; Compare #$9C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	lda $7EC213.l		; AF 13 C2 7E ; Load long $7EC213.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$5B.b		; E0 5B ; Compare #$5B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cpx #$1B.b		; E0 1B ; Compare #$1B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldx $11.b		; A6 11 ; Load $11.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cpx #$2C.b		; E0 2C ; Compare #$2C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	jsr $FD0D.w		; 20 0D FD ; Jump to subroutine at $FD0D.w [Writes: Stack Pointer] [Flow: call]
	lda $8C.b		; A5 8C ; Load $8C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$94.b		; C9 94 ; Compare #$94.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $E7.b		; A5 E7 ; Load $E7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E7.b		; 85 E7 ; Store accumulator to $E7.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC213.l		; AF 13 C2 7E ; Load long $7EC213.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	lda $7EC215.l		; AF 15 C2 7E ; Load long $7EC215.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $7EC217.l		; AF 17 C2 7E ; Load long $7EC217.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $7EC219.l		; AF 19 C2 7E ; Load long $7EC219.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $7EC21B.l		; AF 1B C2 7E ; Load long $7EC21B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0418.w		; 8D 18 04 ; Store accumulator to $0418.w [Reads: Accumulator]
	lda $7EC21D.l		; AF 1D C2 7E ; Load long $7EC21D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0410.w		; 8D 10 04 ; Store accumulator to $0410.w [Reads: Accumulator]
	lda $7EC21F.l		; AF 1F C2 7E ; Load long $7EC21F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	jsr $C2F6.w		; 20 F6 C2 ; Jump to subroutine at $C2F6.w [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sbc ($B0.b,S),Y		; F3 B0 ; Subtract with carry (stack relative indirect indexed) ($B0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $B1.b,X		; 95 B1 ; Store accumulator to $B1.b,X [Reads: Accumulator, X Index]
	ora $B1.b		; 05 B1 ; Logical OR $B1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EFD40.l,X		; BF 40 FD 7E ; Load long $7EFD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $6C		; 80 6C ; Branch always to $80, $6C [Flow: branch]
	lda $0130.w		; AD 30 01 ; Load $0130.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0133.w		; 8D 33 01 ; Store accumulator to $0133.w [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0130.w		; CD 30 01 ; Compare $0130.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sta $012C.w		; [PATTERN: Memory clearing operation] 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $069A.w		; 8D 9A 06 ; Store accumulator to $069A.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	jsr $C2F6.w		; 20 F6 C2 ; Jump to subroutine at $C2F6.w [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	adc ($B1.b),Y		; 71 B1 ; Add with carry ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $B1.b,X		; 95 B1 ; Store accumulator to $B1.b,X [Reads: Accumulator, X Index]
	stz $22B1.w,X		; 9E B1 22 ; Store zero to $22B1.w,X [Reads: X Index]
	and ($E0.b),Y		; 31 E0 ; AND accumulator with memory ($E0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A91385.l		; 0F 85 13 A9 ; OR accumulator with memory (long) $A91385.l [Writes: Accumulator] [Flags: NZ]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $7EC00B.l		; AF 0B C0 7E ; Load long $7EC00B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: NZ]
	lda $13.b		; [PATTERN: Memory clearing operation] A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $032A.w		; 9C 2A 03 ; Store zero to $032A.w
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $E851.w		; 20 51 E8 ; Jump to subroutine at $E851.w [Writes: Stack Pointer] [Flow: call]
	jsr $AF0B.w		; 20 0B AF ; Jump to subroutine at $AF0B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $EDB9.w		; 20 B9 ED ; Jump to subroutine at $EDB9.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $ED59.w		; 20 59 ED ; Jump to subroutine at $ED59.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $AF1E.w		; 20 1E AF ; Jump to subroutine at $AF1E.w [Writes: Stack Pointer] [Flow: call]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $02B1FF.l		; 22 FF B1 02 ; Jump to subroutine long $02B1FF.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0710.w		; EE 10 07 ; Increment $0710.w [Flags: NZ]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $00879C.l		; 22 9C 87 00 ; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	ora [$B2.b],Y		; 17 B2 ; OR accumulator with memory (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $5E.b		; 02 5E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $6400.w,X		; FE 00 64 ; Increment memory $6400.w,X [Reads: X Index] [Flags: NZ]
	inc $2F00.w,X		; FE 00 2F ; Increment memory $2F00.w,X [Reads: X Index] [Flags: NZ]
	sbc $B26000.l,X		; FF 00 60 B2 ; Subtract with carry (long,X) $B26000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; [PATTERN: Memory clearing operation] 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	sta $0ABF.w		; 8D BF 0A ; Store accumulator to $0ABF.w [Reads: Accumulator]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	jsl $00FDEE.l		; 22 EE FD 00 ; Jump to subroutine long $00FDEE.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3CA.l		; [PATTERN: Memory clearing operation] AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CA.l		; 8F CA F3 7E ; Store accumulator (long) $7EF3CA.l [Reads: Accumulator]
	stz $04C8.w		; 9C C8 04 ; Store zero to $04C8.w
	stz $04C9.w		; 9C C9 04 ; Store zero to $04C9.w
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EF3CA.l		; 0F CA F3 7E ; OR accumulator with memory (long) $7EF3CA.l [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	sta $040A.w		; 8D 0A 04 ; Store accumulator to $040A.w [Reads: Accumulator]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	jsl $00EE78.l		; 22 78 EE 00 ; Jump to subroutine long $00EE78.l [Writes: Stack Pointer] [Flow: call]
	jsr $AB08.w		; 20 08 AB ; Jump to subroutine at $AB08.w [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$2641.w		; A9 41 26 ; Load #$2641.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP7.w		; 8D 70 43 ; Store accumulator to DMAP7.w [Reads: Accumulator]
	ldx #$3E.b		; A2 3E ; Load #$3E.b into X register [Writes: X Index] [Flags: NZ]
	lda #$FF00.w		; A9 00 FF ; Load #$FF00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	sta $1B40.w,X		; 9D 40 1B ; Store accumulator to $1B40.w,X [Reads: Accumulator, X Index]
	sta $1B80.w,X		; 9D 80 1B ; Store accumulator to $1B80.w,X [Reads: Accumulator, X Index]
	sta $1BC0.w,X		; 9D C0 1B ; Store accumulator to $1BC0.w,X [Reads: Accumulator, X Index]
	sta $1C00.w,X		; 9D 00 1C ; Store accumulator to $1C00.w,X [Reads: Accumulator, X Index]
	sta $1C40.w,X		; 9D 40 1C ; Store accumulator to $1C40.w,X [Reads: Accumulator, X Index]
	sta $1C80.w,X		; 9D 80 1C ; Store accumulator to $1C80.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E7		; 10 E7 ; Branch if plus to $10, $E7 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $00D788.l		; 22 88 D7 00 ; Jump to subroutine long $00D788.l [Writes: Stack Pointer] [Flow: call]
	jsl $02C463.l		; 22 63 C4 02 ; Jump to subroutine long $02C463.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; [PATTERN: Memory clearing operation] 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0200.w		; [PATTERN: Memory clearing operation] 9C 00 02 ; Store zero to $0200.w
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $AF19.w		; 20 19 AF ; Jump to subroutine at $AF19.w [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$5B.b		; C9 5B ; Compare #$5B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda #$0390.w		; A9 90 03 ; Load #$0390.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $EEC5.w		; 20 C5 EE ; Jump to subroutine at $EEC5.w [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $FE47.w		; 20 47 FE ; Jump to subroutine at $FE47.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; [PATTERN: Memory clearing operation] 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	stz $CA.b		; 64 CA ; Store zero to $CA.b
	stz $CC.b		; 64 CC ; Store zero to $CC.b
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda #$0390.w		; A9 90 03 ; Load #$0390.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $FD37.w		; 20 37 FD ; Jump to subroutine at $FD37.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $C692.w		; 20 92 C6 ; Jump to subroutine at $C692.w [Writes: Stack Pointer] [Flow: call]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EFD40.l,X		; BF 40 FD 7E ; Load long $7EFD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED61D.l		; 22 1D D6 0E ; Jump to subroutine long $0ED61D.l [Writes: Stack Pointer] [Flow: call]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$5B.b		; C9 5B ; Compare #$5B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$7FFF.w		; A9 FF 7F ; Load #$7FFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC540.l,X		; 9F 40 C5 7E ; Store accumulator (long,X) $7EC540.l,X [Reads: Accumulator, X Index]
	sta $7EC560.l,X		; 9F 60 C5 7E ; Store accumulator (long,X) $7EC560.l,X [Reads: Accumulator, X Index]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	sta $7EC5A0.l,X		; 9F A0 C5 7E ; Store accumulator (long,X) $7EC5A0.l,X [Reads: Accumulator, X Index]
	sta $7EC5C0.l,X		; 9F C0 C5 7E ; Store accumulator (long,X) $7EC5C0.l,X [Reads: Accumulator, X Index]
	sta $7EC5E0.l,X		; 9F E0 C5 7E ; Store accumulator (long,X) $7EC5E0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $E2		; D0 E2 ; Branch if not equal to $D0, $E2 [Flow: branch]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$005B.w		; C9 5B 00 ; Compare #$005B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	sta $7EC540.l		; 8F 40 C5 7E ; Store accumulator (long) $7EC540.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $09C44E.l		; 22 4E C4 09 ; Jump to subroutine long $09C44E.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C499.l		; 22 99 C4 09 ; Jump to subroutine long $09C499.l [Writes: Stack Pointer] [Flow: call]
	jsl $07B107.l		; 22 07 B1 07 ; Jump to subroutine long $07B107.l [Writes: Stack Pointer] [Flow: call]
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $09AF89.l		; 22 89 AF 09 ; Jump to subroutine long $09AF89.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0EF400.l		; 22 00 F4 0E ; Jump to subroutine long $0EF400.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0710.w		; EE 10 07 ; Increment $0710.w [Flags: NZ]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and ($B4.b)		; 32 B4 ; AND accumulator with memory (indirect) ($B4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $51B4.w		; 4C B4 51 ; Jump to $51B4.w [Flow: jump]
	ldy $6E.b,X		; B4 6E ; Load Y register $6E.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $8A.b,X		; B4 8A ; Load Y register $8A.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $90.b,X		; B4 90 ; Load Y register $90.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $8A.b,X		; B4 8A ; Load Y register $8A.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $9A.b,X		; B4 9A ; Load Y register $9A.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $9F.b,X		; B4 9F ; Load Y register $9F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $AE.b,X		; B4 AE ; Load Y register $AE.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $5F.b,X		; B4 5F ; Load Y register $5F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $56.b,X		; B4 56 ; Load Y register $56.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $EF.b,X		; B4 EF ; Load Y register $EF.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $A9.b,X		; B4 A9 ; Load Y register $A9.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	bit $8D.b,X		; 34 8D ; Test bits $8D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	rol $A901.w		; 2E 01 A9 ; Rotate left $A901.w [Flags: NCZ]
	ora $8D.b		; 05 8D ; Logical OR $8D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $9C01.w		; 2D 01 9C ; Logical AND $9C01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC008.l		; 8F 08 C0 7E ; Store accumulator (long) $7EC008.l [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00EF97.l		; 22 97 EF 00 ; Jump to subroutine long $00EF97.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F00C.l		; 22 0C F0 00 ; Jump to subroutine long $00F00C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00DEFF.l		; 22 FF DE 00 ; Jump to subroutine long $00DEFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $00F04A.l		; 22 4A F0 00 ; Jump to subroutine long $00F04A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F0C7.l		; 22 C7 F0 00 ; Jump to subroutine long $00F0C7.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00F0C7.l		; 22 C7 F0 00 ; Jump to subroutine long $00F0C7.l [Writes: Stack Pointer] [Flow: call]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$9F.b		; A9 9F ; Load #$9F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	stz $0AB2.w		; 9C B2 0A ; Store zero to $0AB2.w
	jsl $02ED08.l		; 22 08 ED 02 ; Jump to subroutine long $02ED08.l [Writes: Stack Pointer] [Flow: call]
	stz $B2.b		; [PATTERN: Memory clearing operation] 64 B2 ; Store zero to $B2.b
	jsl $02B1F4.l		; 22 F4 B1 02 ; Jump to subroutine long $02B1F4.l [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	stz $15.b		; 64 15 ; Store zero to $15.b
	.db $80, $57		; 80 57 ; Branch always to $80, $57 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	.db $80, $59		; 80 59 ; Branch always to $80, $59 [Flow: branch]
	jsl $0AB948.l		; 22 48 B9 0A ; Jump to subroutine long $0AB948.l [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	.db $80, $4B		; 80 4B ; Branch always to $80, $4B [Flow: branch]
	jsr $AB88.w		; 20 88 AB ; Jump to subroutine at $AB88.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	jsr $ABBC.w		; 20 BC AB ; Jump to subroutine at $ABBC.w [Writes: Stack Pointer] [Flow: call]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	inc $0710.w		; EE 10 07 ; Increment $0710.w [Flags: NZ]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: NZ]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	jsl $1BEC9E.l		; 22 9E EC 1B ; Jump to subroutine long $1BEC9E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED6E.l		; 22 6E ED 1B ; Jump to subroutine long $1BED6E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC77.l		; 22 77 EC 1B ; Jump to subroutine long $1BEC77.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEEC7.l		; 22 C7 EE 1B ; Jump to subroutine long $1BEEC7.l [Writes: Stack Pointer] [Flow: call]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EFD40.l,X		; BF 40 FD 7E ; Load long $7EFD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED618.l		; 22 18 D6 0E ; Jump to subroutine long $0ED618.l [Writes: Stack Pointer] [Flow: call]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E031.l		; 22 31 E0 00 ; Jump to subroutine long $00E031.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	inc $0710.w		; EE 10 07 ; Increment $0710.w [Flags: NZ]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	jsl $00D788.l		; 22 88 D7 00 ; Jump to subroutine long $00D788.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; [PATTERN: Memory clearing operation] F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	stx $012C.w		; 8E 2C 01 ; Store X register to $012C.w [Reads: X Index]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0200.w		; [PATTERN: Memory clearing operation] 9C 00 02 ; Store zero to $0200.w
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1BCA9F.l		; 22 9F CA 1B ; Jump to subroutine long $1BCA9F.l [Writes: Stack Pointer] [Flow: call]
	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; [PATTERN: Memory clearing operation] 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and ($B5.b)		; 32 B5 ; AND accumulator with memory (indirect) ($B5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $95.b,S		; 83 95 ; Store accumulator (stack relative) $95.b,S [Reads: Stack Pointer, Accumulator]
.ACCU 16
	rep #$20		; C2 20
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC186.l		; CF 86 C1 7E ; Compare accumulator (long) $7EC186.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC186.l		; CF 86 C1 7E ; Compare accumulator (long) $7EC186.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC186.l		; CF 86 C1 7E ; Compare accumulator (long) $7EC186.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC184.l		; CF 84 C1 7E ; Compare accumulator (long) $7EC184.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC184.l		; CF 84 C1 7E ; Compare accumulator (long) $7EC184.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC184.l		; CF 84 C1 7E ; Compare accumulator (long) $7EC184.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	cmp $7EC184.l		; CF 84 C1 7E ; Compare accumulator (long) $7EC184.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7EC186.l		; CF 86 C1 7E ; Compare accumulator (long) $7EC186.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	stz $46.b		; 64 46 ; Store zero to $46.b
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	jsr $BB90.w		; 20 90 BB ; Jump to subroutine at $BB90.w [Writes: Stack Pointer] [Flow: call]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $F273.w		; 20 73 F2 ; Jump to subroutine at $F273.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0F0F0F.l		; 0F 0F 0F 0F ; OR accumulator with memory (long) $0F0F0F.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $070F0B.l		; 0F 0B 0F 07 ; OR accumulator with memory (long) $070F0B.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0E0F07.l		; 0F 07 0F 0E ; OR accumulator with memory (long) $0E0F07.l [Writes: Accumulator] [Flags: NZ]
	ora $0D0E.w		; 0D 0E 0D ; Logical OR $0D0E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0D0E0F.l		; 0F 0F 0E 0D ; OR accumulator with memory (long) $0D0E0F.l [Writes: Accumulator] [Flags: NZ]
	asl $0F0D.w		; 0E 0D 0F ; Arithmetic shift left $0F0D.w [Flags: NCZ]
	ora $06090A.l		; 0F 0A 09 06 ; OR accumulator with memory (long) $06090A.l [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $0303.w		; 0C 03 03 ; Test and set bits $0303.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $8B0F0F.l		; 0F 0F 0F 8B ; OR accumulator with memory (long) $8B0F0F.l [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	stz $A6.b		; 64 A6 ; Store zero to $A6.b
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0452.w		; AD 52 04 ; Load $0452.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $B5AC.w,X		; BD AC B5 ; Load $B5AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	stz $A7.b		; 64 A7 ; Store zero to $A7.b
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0453.w		; AD 53 04 ; Load $0453.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $B5AC.w,X		; BD AC B5 ; Load $B5AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	lda $FC.b		; A5 FC ; Load $FC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	lda $FD.b		; A5 FD ; Load $FD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A9.b		; 85 A9 ; Store accumulator to $A9.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B968.w		; 20 68 B9 ; Jump to subroutine at $B968.w [Writes: Stack Pointer] [Flow: call]
	jsr $B947.w		; 20 47 B9 ; Jump to subroutine at $B947.w [Writes: Stack Pointer] [Flow: call]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $BDC8.w		; 20 C8 BD ; Jump to subroutine at $BDC8.w [Writes: Stack Pointer] [Flow: call]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $B9DC.w		; 20 DC B9 ; Jump to subroutine at $B9DC.w [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B981.w		; 20 81 B9 ; Jump to subroutine at $B981.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda $0114.w		; AD 14 01 ; Load $0114.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$89.b		; C9 89 ; Compare #$89.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $7EC004.l		; AF 04 C0 7E ; Load long $7EC004.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A37C.w		; 20 7C A3 ; Jump to subroutine at $A37C.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $A0.b		; C5 A0 ; Compare $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	jsr $A2F0.w		; 20 F0 A2 ; Jump to subroutine at $A2F0.w [Writes: Stack Pointer] [Flow: call]
	inc $A0.b		; E6 A0 ; Increment $A0.b [Reads: Direct Page] [Flags: NZ]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $040C.w		; [PATTERN: Memory clearing operation] AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	stz $A7.b		; 64 A7 ; Store zero to $A7.b
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0453.w		; AD 53 04 ; Load $0453.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $B5AC.w,X		; BD AC B5 ; Load $B5AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A9.b		; 85 A9 ; Store accumulator to $A9.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B99A.w		; 20 9A B9 ; Jump to subroutine at $B99A.w [Writes: Stack Pointer] [Flow: call]
	jsr $B947.w		; 20 47 B9 ; Jump to subroutine at $B947.w [Writes: Stack Pointer] [Flow: call]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $BDC8.w		; 20 C8 BD ; Jump to subroutine at $BDC8.w [Writes: Stack Pointer] [Flow: call]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $B9DC.w		; 20 DC B9 ; Jump to subroutine at $B9DC.w [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $4D		; F0 4D ; Branch if equal to $F0, $4D [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B9B3.w		; 20 B3 B9 ; Jump to subroutine at $B9B3.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda $0114.w		; AD 14 01 ; Load $0114.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$89.b		; C9 89 ; Compare #$89.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $7EC003.l		; AF 03 C0 7E ; Load long $7EC003.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A37C.w		; 20 7C A3 ; Jump to subroutine at $A37C.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $A0.b		; C5 A0 ; Compare $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	jsr $A2F0.w		; 20 F0 A2 ; Jump to subroutine at $A2F0.w [Writes: Stack Pointer] [Flow: call]
	dec $A0.b		; C6 A0 ; Decrement $A0.b [Reads: Direct Page] [Flags: NZ]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $040C.w		; [PATTERN: Memory clearing operation] AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	stz $A7.b		; 64 A7 ; Store zero to $A7.b
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0453.w		; AD 53 04 ; Load $0453.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $B5AC.w,X		; BD AC B5 ; Load $B5AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B968.w		; 20 68 B9 ; Jump to subroutine at $B968.w [Writes: Stack Pointer] [Flow: call]
	jsr $B947.w		; 20 47 B9 ; Jump to subroutine at $B947.w [Writes: Stack Pointer] [Flow: call]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $BDE2.w		; 20 E2 BD ; Jump to subroutine at $BDE2.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $B9DC.w		; 20 DC B9 ; Jump to subroutine at $B9DC.w [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $5C		; D0 5C ; Branch if not equal to $D0, $5C [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B981.w		; 20 81 B9 ; Jump to subroutine at $B981.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda $0114.w		; AD 14 01 ; Load $0114.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$8E.b		; C9 8E ; Compare #$8E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	jsl $02A1C7.l		; 22 C7 A1 02 ; Jump to subroutine long $02A1C7.l [Writes: Stack Pointer] [Flow: call]
	jsl $02B8E5.l		; 22 E5 B8 02 ; Jump to subroutine long $02B8E5.l [Writes: Stack Pointer] [Flow: call]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; [PATTERN: Memory clearing operation] 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $A0.b		; C5 A0 ; Compare $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	jsr $A2F0.w		; 20 F0 A2 ; Jump to subroutine at $A2F0.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $040C.w		; [PATTERN: Memory clearing operation] AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	stz $A6.b		; 64 A6 ; Store zero to $A6.b
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0452.w		; AD 52 04 ; Load $0452.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $B5AC.w,X		; BD AC B5 ; Load $B5AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B99A.w		; 20 9A B9 ; Jump to subroutine at $B99A.w [Writes: Stack Pointer] [Flow: call]
	jsr $B947.w		; 20 47 B9 ; Jump to subroutine at $B947.w [Writes: Stack Pointer] [Flow: call]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $BDE2.w		; 20 E2 BD ; Jump to subroutine at $BDE2.w [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $B9DC.w		; 20 DC B9 ; Jump to subroutine at $B9DC.w [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B9B3.w		; 20 B3 B9 ; Jump to subroutine at $B9B3.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda $0114.w		; AD 14 01 ; Load $0114.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$8E.b		; C9 8E ; Compare #$8E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $B7AE.w		; 4C AE B7 ; Jump to $B7AE.w [Flow: jump]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b		; 05 A1 ; Logical OR $A1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	jsl $02A1C7.l		; [PATTERN: Memory clearing operation] 22 C7 A1 02 ; Jump to subroutine long $02A1C7.l [Writes: Stack Pointer] [Flow: call]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $A0.b		; C5 A0 ; Compare $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	jsr $A2F0.w		; 20 F0 A2 ; Jump to subroutine at $A2F0.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $040C.w		; [PATTERN: Memory clearing operation] AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	stz $A6.b		; 64 A6 ; Store zero to $A6.b
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0452.w		; AD 52 04 ; Load $0452.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $B5AC.w,X		; BD AC B5 ; Load $B5AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A9.b		; 85 A9 ; Store accumulator to $A9.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B968.w		; 20 68 B9 ; Jump to subroutine at $B968.w [Writes: Stack Pointer] [Flow: call]
	lda $A7.b		; A5 A7 ; Load $A7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02B5CC.l,X		; BF CC B5 02 ; Load long $02B5CC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0408.w		; 0D 08 04 ; Logical OR $0408.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0408.w		; 8D 08 04 ; Store accumulator to $0408.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0408.w		; 0D 08 04 ; Logical OR $0408.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF000.l,X		; 9F 00 F0 7E ; Store accumulator (long,X) $7EF000.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A9.b		; 85 A9 ; Store accumulator to $A9.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B99A.w		; 20 9A B9 ; Jump to subroutine at $B99A.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $C2		; 80 C2 ; Branch always to $80, $C2 [Flow: branch]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B968.w		; 20 68 B9 ; Jump to subroutine at $B968.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $B2		; 80 B2 ; Branch always to $80, $B2 [Flow: branch]
	lda $AA.b		; A5 AA ; Load $AA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	jsr $BA27.w		; 20 27 BA ; Jump to subroutine at $BA27.w [Writes: Stack Pointer] [Flow: call]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B99A.w		; 20 9A B9 ; Jump to subroutine at $B99A.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $A2		; 80 A2 ; Branch always to $80, $A2 [Flow: branch]
	lda $A7.b		; A5 A7 ; Load $A7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02B5CC.l,X		; BF CC B5 02 ; Load long $02B5CC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0408.w		; 0D 08 04 ; Logical OR $0408.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0408.w		; 8D 08 04 ; Store accumulator to $0408.w [Reads: Accumulator]
	jsr $B947.w		; 20 47 B9 ; Jump to subroutine at $B947.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0402.w		; AD 02 04 ; Load $0402.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0400.w		; AD 00 04 ; Load $0400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$F000.w		; 29 00 F0 ; Logical AND #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0408.w		; 0D 08 04 ; Logical OR $0408.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EF000.l,X		; 9F 00 F0 7E ; Store accumulator (long,X) $7EF000.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0600.w,X		; BD 00 06 ; Load $0600.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0600.w,X		; 9D 00 06 ; Store accumulator to $0600.w,X [Reads: Accumulator, X Index]
	lda $0604.w,X		; BD 04 06 ; Load $0604.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0100.w		; 69 00 01 ; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0604.w,X		; 9D 04 06 ; Store accumulator to $0604.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0602.w,X		; BD 02 06 ; Load $0602.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0602.w,X		; 9D 02 06 ; Store accumulator to $0602.w,X [Reads: Accumulator, X Index]
	lda $0606.w,X		; BD 06 06 ; Load $0606.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0200.w		; 69 00 02 ; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0606.w,X		; 9D 06 06 ; Store accumulator to $0606.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0600.w,X		; BD 00 06 ; Load $0600.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0100.w		; E9 00 01 ; Subtract #$0100.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0600.w,X		; 9D 00 06 ; Store accumulator to $0600.w,X [Reads: Accumulator, X Index]
	lda $0604.w,X		; BD 04 06 ; Load $0604.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0100.w		; E9 00 01 ; Subtract #$0100.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0604.w,X		; 9D 04 06 ; Store accumulator to $0604.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0602.w,X		; BD 02 06 ; Load $0602.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0200.w		; E9 00 02 ; Subtract #$0200.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0602.w,X		; 9D 02 06 ; Store accumulator to $0602.w,X [Reads: Accumulator, X Index]
	lda $0606.w,X		; BD 06 06 ; Load $0606.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0200.w		; E9 00 02 ; Subtract #$0200.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0606.w,X		; 9D 06 06 ; Store accumulator to $0606.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($8C.b,X)		; 01 8C ; Logical OR ($8C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	adc [$29.b]		; 67 29 ; Add with carry (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($C2.b,X)		; 21 C2 ; Logical AND ($C2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $04A2.w		; 20 A2 04 ; Jump to subroutine at $04A2.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A2.b		; 02 A2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $B9D4.w,X		; BD D4 B9 ; Load $B9D4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	ldy $AA.b		; A4 AA ; Load $AA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $B9CC.w,X		; BD CC B9 ; Load $B9CC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $040E.w		; AD 0E 04 ; Load $040E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A8.b		; 85 A8 ; Store accumulator to $A8.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $74		; F0 74 ; Branch if equal to $F0, $74 [Flow: branch]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	.db $90, $4C		; 90 4C ; Branch if carry clear to $90, $4C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $061A.w		; CD 1A 06 ; Compare $061A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $45		; 90 45 ; Branch if carry clear to $90, $45 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0600.w,X		; DD 00 06 ; Compare accumulator $0600.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $04.b		; 64 04 ; Store zero to $04.b
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $04.b		; 66 04 ; Rotate right $04.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$7000.w		; C9 00 70 ; Compare #$7000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0622.w		; AD 22 06 ; Load $0622.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0622.w		; 8D 22 06 ; Store accumulator to $0622.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $74		; F0 74 ; Branch if equal to $F0, $74 [Flow: branch]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	.db $90, $4C		; 90 4C ; Branch if carry clear to $90, $4C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $061E.w		; CD 1E 06 ; Compare $061E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $45		; 90 45 ; Branch if carry clear to $90, $45 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0608.w,X		; DD 08 06 ; Compare accumulator $0608.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $04.b		; 64 04 ; Store zero to $04.b
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $04.b		; 66 04 ; Rotate right $04.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$7000.w		; C9 00 70 ; Compare #$7000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0620.w		; AD 20 06 ; Load $0620.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0620.w		; 8D 20 06 ; Store accumulator to $0620.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	ldx $0414.w		; AE 14 04 ; Load $0414.w into X register [Writes: X Index] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $78.b		; A5 78 ; Load $78.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $BC60.w		; 4C 60 BC ; Jump to $BC60.w [Flow: jump]
	stz $04.b		; 64 04 ; Store zero to $04.b
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $08.b		; 64 08 ; Store zero to $08.b
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $061A.w		; CD 1A 06 ; Compare $061A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	jsr $BD62.w		; 20 62 BD ; Jump to subroutine at $BD62.w [Writes: Stack Pointer] [Flow: call]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $069E.w		; 8D 9E 06 ; Store accumulator to $069E.w [Reads: Accumulator]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$97.b		; E0 97 ; Compare #$97.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	cpx #$9D.b		; E0 9D ; Compare #$9D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$B5.b		; E0 B5 ; Compare #$B5.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$BE.b		; E0 BE ; Compare #$BE.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$3000.w		; C9 00 30 ; Compare #$3000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	cmp #$7000.w		; C9 00 70 ; Compare #$7000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0622.w		; AD 22 06 ; Load $0622.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0622.w		; 8D 22 06 ; Store accumulator to $0622.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$001B.w		; C9 1B 00 ; Compare #$001B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$0600.w		; A9 00 06 ; Load #$0600.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $E6.b		; C5 E6 ; Compare $E6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda #$06C0.w		; A9 C0 06 ; Load #$06C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $E6.b		; C5 E6 ; Compare $E6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $BCFB.w		; 4C FB BC ; Jump to $BCFB.w [Flow: jump]
	stz $04.b		; 64 04 ; Store zero to $04.b
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $061E.w		; CD 1E 06 ; Compare $061E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $BD62.w		; 20 62 BD ; Jump to subroutine at $BD62.w [Writes: Stack Pointer] [Flow: call]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $069F.w		; 8D 9F 06 ; Store accumulator to $069F.w [Reads: Accumulator]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$97.b		; E0 97 ; Compare #$97.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	cpx #$9D.b		; E0 9D ; Compare #$9D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$95.b		; E0 95 ; Compare #$95.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$9E.b		; E0 9E ; Compare #$9E.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$3000.w		; C9 00 30 ; Compare #$3000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	cmp #$7000.w		; C9 00 70 ; Compare #$7000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0620.w		; AD 20 06 ; Load $0620.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0620.w		; 8D 20 06 ; Store accumulator to $0620.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$47.b		; E0 47 ; Compare #$47.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$9C.b		; E0 9C ; Compare #$9C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cpx #$97.b		; E0 97 ; Compare #$97.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$9D.b		; E0 9D ; Compare #$9D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	lda $0622.w		; AD 22 06 ; Load $0622.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$2000.w		; 69 00 20 ; Add #$2000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0622.w		; 8D 22 06 ; Store accumulator to $0622.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $0620.w		; AD 20 06 ; Load $0620.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$2000.w		; 69 00 20 ; Add #$2000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0620.w		; 8D 20 06 ; Store accumulator to $0620.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda $0622.w		; AD 22 06 ; Load $0622.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$2000.w		; E9 00 20 ; Subtract #$2000.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0622.w		; 8D 22 06 ; Store accumulator to $0622.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc #$0000.w		; E9 00 00 ; Subtract #$0000.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $069E.w		; 6D 9E 06 ; Add $069E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0181.w		; C9 81 01 ; Compare #$0181.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$0100.w		; 09 00 01 ; Logical OR #$0100.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $E2.b,X		; B5 E2 ; Load $E2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0600.w,Y		; D9 00 06 ; Compare accumulator $0600.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $06.b		; 24 06 ; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $0624.w,X		; 9D 24 06 ; Store accumulator to $0624.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b,X		; 95 E2 ; Store accumulator to $E2.b,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $061A.w,X		; BD 1A 06 ; Load $061A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $061A.w,X		; 9D 1A 06 ; Store accumulator to $061A.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0618.w,X		; 9D 18 06 ; Store accumulator to $0618.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0624.w,Y		; B9 24 06 ; Load $0624.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0624.w,Y		; 99 24 06 ; Store accumulator to $0624.w,Y [Reads: Y Index, Accumulator]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $06.b		; 24 06 ; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda $BB88.w,Y		; B9 88 BB ; Load $BB88.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0416.w		; 0D 16 04 ; Logical OR $0416.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0624.w,Y		; F9 24 06 ; Subtract with carry $0624.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0624.w,X		; 9D 24 06 ; Store accumulator to $0624.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $BDC0.w,Y		; B9 C0 BD ; Load $BDC0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0614.w,X		; 9D 14 06 ; Store accumulator to $0614.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $BDDA.w,Y		; B9 DA BD ; Load $BDDA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0610.w,X		; 9D 10 06 ; Store accumulator to $0610.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $340034.l,X		; FF 34 00 34 ; Subtract with carry (long,X) $340034.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	inc $0126.w		; EE 26 01 ; Increment $0126.w [Flags: NZ]
	lda $0418.w		; [PATTERN: Memory clearing operation] AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	lda $E2.b,X		; B5 E2 ; Load $E2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BDF3.w,Y		; 79 F3 BD ; Add $BDF3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$FFFE.w		; 29 FE FF ; Logical AND #$FFFE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E2.b,X		; 95 E2 ; Store accumulator to $E2.b,X [Reads: Accumulator, X Index]
	sta $E0.b,X		; 95 E0 ; Store accumulator to $E0.b,X [Reads: Accumulator, X Index]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $0126.w		; AD 26 01 ; Load $0126.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $BDFB.w,Y		; D9 FB BD ; Compare accumulator $BDFB.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $20.b,X		; B5 20 ; Load $20.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BDF3.w,Y		; 79 F3 BD ; Add $BDF3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FC.w		; 29 FC 01 ; Logical AND #$01FC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0610.w,Y		; D9 10 06 ; Compare accumulator $0610.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsl $02B8CB.l		; 22 CB B8 02 ; Jump to subroutine long $02B8CB.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	stz $0126.w		; 9C 26 01 ; Store zero to $0126.w
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	jsl $0091C4.l		; 22 C4 91 00 ; Jump to subroutine long $0091C4.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C000.w		; 20 00 C0 ; Jump to subroutine at $C000.w [Writes: Stack Pointer] [Flow: call]
	sbc $E00020.l,X		; FF 20 00 E0 ; Subtract with carry (long,X) $E00020.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $AB4B8B.l,X		; FF 8B 4B AB ; Subtract with carry (long,X) $AB4B8B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	sta $02F9.w		; 8D F9 02 ; Store accumulator to $02F9.w [Reads: Accumulator]
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BDF3.w,X		; 7D F3 BD ; Add $BDF3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$FFFC.w		; 29 FC FF ; Logical AND #$FFFC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	and #$01FC.w		; 29 FC 01 ; Logical AND #$01FC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0610.w,X		; DD 10 06 ; Compare accumulator $0610.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$12.b		; C0 12 ; Compare #$12.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	adc $BE6D.w,X		; 7D 6D BE ; Add $BE6D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $4B.b		; 64 4B ; Store zero to $4B.b
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F80008.l,X		; FF 08 00 F8 ; Subtract with carry (long,X) $F80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E80008.l,X		; FF 08 00 E8 ; Subtract with carry (long,X) $E80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D80018.l,X		; FF 18 00 D8 ; Subtract with carry (long,X) $D80018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $900018.l,X		; FF 18 00 90 ; Subtract with carry (long,X) $900018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $900070.l,X		; FF 70 00 90 ; Subtract with carry (long,X) $900070.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000070.l,X		; FF 70 00 00 ; Subtract with carry (long,X) $000070.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0200.w,X		; FE 00 02 ; Increment memory $0200.w,X [Reads: X Index] [Flags: NZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $200B.w		; 20 0B 20 ; Jump to subroutine at $200B.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $200B.w		; 20 0B 20 ; Jump to subroutine at $200B.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $200B.w		; 20 0B 20 ; Jump to subroutine at $200B.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $200B.w		; 20 0B 20 ; Jump to subroutine at $200B.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $200B.w		; 20 0B 20 ; Jump to subroutine at $200B.w [Writes: Stack Pointer] [Flow: call]
	ora $0D20.w		; 0D 20 0D ; Logical OR $0D20.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $200D.w		; 20 0D 20 ; Jump to subroutine at $200D.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $200B.w		; 20 0B 20 ; Jump to subroutine at $200B.w [Writes: Stack Pointer] [Flow: call]
	ora $FF00.w		; 0D 00 FF ; Logical OR $FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1E01.w,X		; 1E 01 1E ; Arithmetic shift left $1E01.w,X [Reads: X Index] [Flags: NCZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1B.b		; 05 1B ; Logical OR $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $AEAB.w		; 20 AB AE ; Jump to subroutine at $AEAB.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	inc $0126.w		; EE 26 01 ; Increment $0126.w [Flags: NZ]
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $BEBA.w,Y		; B9 BA BE ; Load $BEBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $069E.w,X		; 9D 9E 06 ; Store accumulator to $069E.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	lda $E2.b,X		; B5 E2 ; Load $E2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BEBA.w,Y		; 79 BA BE ; Add $BEBA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b,X		; 95 E2 ; Store accumulator to $E2.b,X [Reads: Accumulator, X Index]
	ldy $8A.b		; A4 8A ; Load $8A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$1B.b		; C0 1B ; Compare #$1B.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cpy #$5B.b		; C0 5B ; Compare #$5B.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	sta $E0.b,X		; 95 E0 ; Store accumulator to $E0.b,X [Reads: Accumulator, X Index]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $0126.w		; AD 26 01 ; Load $0126.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $BFF2.w,Y		; D9 F2 BF ; Compare accumulator $BFF2.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $20.b,X		; B5 20 ; Load $20.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BEBA.w,Y		; 79 BA BE ; Add $BEBA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0610.w,Y		; D9 10 06 ; Compare accumulator $0610.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0002.w		; E9 02 00 ; Subtract #$0002.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	lda $20.b,X		; B5 20 ; Load $20.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BECA.w,Y		; 79 CA BE ; Add $BECA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000B.w		; 69 0B 00 ; Add #$000B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $061A.w,X		; 9D 1A 06 ; Store accumulator to $061A.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0618.w,X		; 9D 18 06 ; Store accumulator to $0618.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $0712.w		; AD 12 07 ; Load $0712.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $0700.w		; AD 00 07 ; Load $0700.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A83C.w,Y		; 79 3C A8 ; Add $A83C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; [PATTERN: Memory clearing operation] A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $C0C3.w		; 20 C3 C0 ; Jump to subroutine at $C0C3.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0624.w,X		; 9E 24 06 ; Store zero to $0624.w,X [Reads: X Index]
	stz $0626.w,X		; 9E 26 06 ; Store zero to $0626.w,X [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0ABF.w		; [PATTERN: Memory clearing operation] 8D BF 0A ; Store accumulator to $0ABF.w [Reads: Accumulator]
	ldx $0410.w		; AE 10 04 ; Load $0410.w into X register [Writes: X Index] [Flags: NZ]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0126.w		; 9C 26 01 ; Store zero to $0126.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $09AFD6.l		; 22 D6 AF 09 ; Jump to subroutine long $09AFD6.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $A8C4.w,Y		; B9 C4 A8 ; Load $A8C4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0600.w		; 8D 00 06 ; Store accumulator to $0600.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BFE2.w,X		; 7D E2 BF ; Add $BFE2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0602.w		; 8D 02 06 ; Store accumulator to $0602.w [Reads: Accumulator]
	lda $A944.w,Y		; B9 44 A9 ; Load $A944.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BFE6.w,X		; 7D E6 BF ; Add $BFE6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0606.w		; 8D 06 06 ; Store accumulator to $0606.w [Reads: Accumulator]
	lda $BEE2.w,Y		; B9 E2 BE ; Load $BEE2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0610.w		; 8D 10 06 ; Store accumulator to $0610.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BFEA.w,X		; 7D EA BF ; Add $BFEA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0612.w		; 8D 12 06 ; Store accumulator to $0612.w [Reads: Accumulator]
	lda $BF62.w,Y		; B9 62 BF ; Load $BF62.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0614.w		; 8D 14 06 ; Store accumulator to $0614.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BFEE.w,X		; 7D EE BF ; Add $BFEE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0616.w		; 8D 16 06 ; Store accumulator to $0616.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $30200C.l		; 0F 0C 20 30 ; OR accumulator with memory (long) $30200C.l [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pei ($D8.b)		; D4 D8 ; Push effective indirect address ($D8.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $2818.w		; 0C 18 28 ; Test and set bits $2818.w [Reads: Accumulator] [Flags: Z]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	cpx $D8.b		; E4 D8 ; Compare $D8.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$B0.b		; C0 B0 ; Compare #$B0.b with Y register [Reads: Y Index] [Flags: NCZ]
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	jsr $C12C.w		; 20 2C C1 ; Jump to subroutine at $C12C.w [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0408.w		; 0D 08 04 ; Logical OR $0408.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF000.l,X		; 9F 00 F0 7E ; Store accumulator (long,X) $7EF000.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $C1E5.w		; 20 E5 C1 ; Jump to subroutine at $C1E5.w [Writes: Stack Pointer] [Flow: call]
	ldx $0418.w		; AE 18 04 ; Load $0418.w into X register [Writes: X Index] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02C0F8.l,X		; 7F F8 C0 02 ; Add long $02C0F8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $02C0FC.l,X		; BF FC C0 02 ; Load long $02C0FC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$F8.b		; A0 F8 ; Load #$F8.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta $0020.w,Y		; 99 20 00 ; Store accumulator to $0020.w,Y [Reads: Y Index, Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $4B.b		; 86 4B ; Store X register to $4B.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EC006.l		; 0F 06 C0 7E ; OR accumulator with memory (long) $7EC006.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	jsr $C191.w		; 20 91 C1 ; Jump to subroutine at $C191.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $17		; 90 17 ; Branch if carry clear to $90, $17 [Flow: branch]
	ldx $4E.b		; A6 4E ; Load $4E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; [PATTERN: Memory clearing operation] F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	stz $6F.b		; 64 6F ; Store zero to $6F.b
	stz $49.b		; [PATTERN: Memory clearing operation] 64 49 ; Store zero to $49.b
	stz $4E.b		; 64 4E ; Store zero to $4E.b
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0418.w		; AE 18 04 ; Load $0418.w into X register [Writes: X Index] [Flags: NZ]
	lda $4E.b		; A5 4E ; Load $4E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02C0F8.l,X		; 7F F8 C0 02 ; Add long $02C0F8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$FE.b		; A0 FE ; Load #$FE.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $21.b		; 65 21 ; Add $21.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $02C0FC.l,X		; DF FC C0 02 ; Compare accumulator (long,X) $02C0FC.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $23.b		; 65 23 ; Add $23.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $02C0FC.l,X		; DF FC C0 02 ; Compare accumulator (long,X) $02C0FC.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $E3		; D0 E3 ; Branch if not equal to $D0, $E3 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $EE.b		; A6 EE ; Load $EE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$1000.w		; 69 00 10 ; Add #$1000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and #$8E.b		; 29 8E ; Logical AND #$8E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$82.b		; C9 82 ; Compare #$82.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$84.b		; C9 84 ; Compare #$84.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	cmp #$88.b		; C9 88 ; Compare #$88.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$86.b		; C9 86 ; Compare #$86.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $4E.b		; 84 4E ; Store Y register to $4E.b [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $069C.w		; AD 9C 06 ; Load $069C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldy #$FE.b		; A0 FE ; Load #$FE.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b,X		; 75 20 ; Add $20.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $21.b,X		; 75 21 ; Add $21.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $21.b,X		; 95 21 ; Store accumulator to $21.b,X [Reads: Accumulator, X Index]
	lda $20.b,X		; B5 20 ; Load $20.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $069C.w		; AE 9C 06 ; Load $069C.w into X register [Writes: X Index] [Flags: NZ]
	and #$FE.b		; [PATTERN: Memory clearing operation] 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $02C23E.l,X		; DF 3E C2 02 ; Compare accumulator (long,X) $02C23E.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda $0130.w		; AD 30 01 ; Load $0130.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$F1.b		; C9 F1 ; Compare #$F1.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	jsr $BB90.w		; 20 90 BB ; Jump to subroutine at $BB90.w [Writes: Stack Pointer] [Flow: call]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $F273.w		; 20 73 F2 ; Jump to subroutine at $F273.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $069C.w		; AD 9C 06 ; Load $069C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b,X		; 75 20 ; Add $20.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $21.b,X		; 75 21 ; Add $21.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $21.b,X		; 95 21 ; Store accumulator to $21.b,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $30.b,X		; 95 30 ; Store accumulator to $30.b,X [Reads: Accumulator, X Index]
	dec $069A.w		; CE 9A 06 ; Decrement $069A.w [Flags: NZ]
	.db $D0, $08		; [PATTERN: Memory clearing operation] D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	jsr $BB90.w		; 20 90 BB ; Jump to subroutine at $BB90.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $099D.w,X		; 9D 9D 09 ; Store accumulator to $099D.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $9D09.w,X		; 9D 09 9D ; Store accumulator to $9D09.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$05.b		; 09 05 ; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($8B.b)		; 12 8B ; OR accumulator with memory (indirect) ($8B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.INDEX 16
	rep #$10		; C2 10
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$00C0.w		; A0 C0 00 ; Load #$00C0.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $12		; B0 12 ; Branch if carry set to $B0, $12 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $C303.w,Y		; B9 03 C3 ; Load $C303.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5B00.l,X		; 9F 00 5B 7F ; Store accumulator (long,X) $7F5B00.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0040.w		; E0 40 00 ; Compare #$0040.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $C403.w,Y		; B9 03 C4 ; Load $C403.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F5B00.l,X		; 9F 00 5B 7F ; Store accumulator (long,X) $7F5B00.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0060.w		; C0 60 00 ; Compare #$0060.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F5B80.l		; 8F 80 5B 7F ; Store accumulator (long) $7F5B80.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; [PATTERN: Memory clearing operation] FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz SETINI.w		; 9C 33 21 ; Store zero to SETINI.w
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	stz $95.b		; 64 95 ; Store zero to $95.b
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1SC.w		; 8D 07 21 ; Store accumulator to BG1SC.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2SC.w		; 8D 08 21 ; Store accumulator to BG2SC.w [Reads: Accumulator]
	lda #$63.b		; A9 63 ; Load #$63.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG3SC.w		; 8D 09 21 ; Store accumulator to BG3SC.w [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG12NBA.w		; 8D 0B 21 ; Store accumulator to BG12NBA.w [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG34NBA.w		; 8D 0C 21 ; Store accumulator to BG34NBA.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9C.b		; 85 9C ; Store accumulator to $9C.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9D.b		; 85 9D ; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $010E.w		; 8D 0E 01 ; Store accumulator to $010E.w [Reads: Accumulator]
	jsr $D8B3.w		; 20 B3 D8 ; Jump to subroutine at $D8B3.w [Writes: Stack Pointer] [Flow: call]
	stz $045A.w		; 9C 5A 04 ; Store zero to $045A.w
	stz $0458.w		; 9C 58 04 ; Store zero to $0458.w
	jsr $C57B.w		; 20 7B C5 ; Jump to subroutine at $C57B.w [Writes: Stack Pointer] [Flow: call]
	jsr $8AEF.w		; 20 EF 8A ; Jump to subroutine at $8AEF.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0AA3.w		; 8E A3 0A ; Store X register to $0AA3.w [Reads: X Index]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	jsl $00E19B.l		; 22 9B E1 00 ; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	jsl $0ED5F4.l		; 22 F4 D5 0E ; Jump to subroutine long $0ED5F4.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC77.l		; 22 77 EC 1B ; Jump to subroutine long $1BEC77.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC9E.l		; 22 9E EC 1B ; Jump to subroutine long $1BEC9E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECC5.l		; 22 C5 EC 1B ; Jump to subroutine long $1BECC5.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECE4.l		; 22 E4 EC 1B ; Jump to subroutine long $1BECE4.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED72.l		; 22 72 ED 1B ; Jump to subroutine long $1BED72.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEE74.l		; 22 74 EE 1B ; Jump to subroutine long $1BEE74.l [Writes: Stack Pointer] [Flow: call]
	rtl		; [PATTERN: Memory clearing operation] 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $9B.b		; A5 9B ; Load $9B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	stz $9B.b		; 64 9B ; Store zero to $9B.b
	jsl $01873A.l		; [PATTERN: Memory clearing operation] 22 3A 87 01 ; Jump to subroutine long $01873A.l [Writes: Stack Pointer] [Flow: call]
	stz $0418.w		; 9C 18 04 ; Store zero to $0418.w
	stz $045C.w		; 9C 5C 04 ; Store zero to $045C.w
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	jsl $0091D3.l		; 22 D3 91 00 ; Jump to subroutine long $0091D3.l [Writes: Stack Pointer] [Flow: call]
	jsl $0090E3.l		; 22 E3 90 00 ; Jump to subroutine long $0090E3.l [Writes: Stack Pointer] [Flow: call]
	jsl $00913F.l		; 22 3F 91 00 ; Jump to subroutine long $00913F.l [Writes: Stack Pointer] [Flow: call]
	jsl $0090E3.l		; 22 E3 90 00 ; Jump to subroutine long $0090E3.l [Writes: Stack Pointer] [Flow: call]
	lda $045C.w		; AD 5C 04 ; Load $045C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E9		; [PATTERN: Memory clearing operation] D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	stz $17.b		; 64 17 ; Store zero to $17.b
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC480.l,X		; 9F 80 C4 7E ; Store accumulator (long,X) $7EC480.l,X [Reads: Accumulator, X Index]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	sta $7EC600.l,X		; 9F 00 C6 7E ; Store accumulator (long,X) $7EC600.l,X [Reads: Accumulator, X Index]
	sta $7EC680.l,X		; 9F 80 C6 7E ; Store accumulator (long,X) $7EC680.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB3.w		; 8D B3 0A ; Store accumulator to $0AB3.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB4.w		; 8D B4 0A ; Store accumulator to $0AB4.w [Reads: Accumulator]
	sta $0AB5.w		; 8D B5 0A ; Store accumulator to $0AB5.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB8.w		; 8D B8 0A ; Store accumulator to $0AB8.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB1.w		; [PATTERN: Memory clearing operation] 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AAC.w		; 8D AC 0A ; Store accumulator to $0AAC.w [Reads: Accumulator]
	stz $0ABD.w		; 9C BD 0A ; Store zero to $0ABD.w
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	jsl $0ED5F4.l		; 22 F4 D5 0E ; Jump to subroutine long $0ED5F4.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC77.l		; 22 77 EC 1B ; Jump to subroutine long $1BEC77.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC9E.l		; 22 9E EC 1B ; Jump to subroutine long $1BEC9E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEEC7.l		; 22 C7 EE 1B ; Jump to subroutine long $1BEEC7.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEEE8.l		; 22 E8 EE 1B ; Jump to subroutine long $1BEEE8.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEF0C.l		; 22 0C EF 1B ; Jump to subroutine long $1BEF0C.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEEA8.l		; 22 A8 EE 1B ; Jump to subroutine long $1BEEA8.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED72.l		; 22 72 ED 1B ; Jump to subroutine long $1BED72.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC4D0.l,X		; BF D0 C4 7E ; Load long $7EC4D0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC6B0.l,X		; 9F B0 C6 7E ; Store accumulator (long,X) $7EC6B0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	jsl $0ED5F4.l		; 22 F4 D5 0E ; Jump to subroutine long $0ED5F4.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC77.l		; 22 77 EC 1B ; Jump to subroutine long $1BEC77.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC9E.l		; 22 9E EC 1B ; Jump to subroutine long $1BEC9E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECC5.l		; 22 C5 EC 1B ; Jump to subroutine long $1BECC5.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECE4.l		; 22 E4 EC 1B ; Jump to subroutine long $1BECE4.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED03.l		; 22 03 ED 1B ; Jump to subroutine long $1BED03.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED29.l		; 22 29 ED 1B ; Jump to subroutine long $1BED29.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED6E.l		; 22 6E ED 1B ; Jump to subroutine long $1BED6E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEDF9.l		; 22 F9 ED 1B ; Jump to subroutine long $1BEDF9.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEE74.l		; 22 74 EE 1B ; Jump to subroutine long $1BEE74.l [Writes: Stack Pointer] [Flow: call]
	lda $0AB6.w		; AD B6 0A ; Load $0AB6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC20A.l		; 8F 0A C2 7E ; Store accumulator (long) $7EC20A.l [Reads: Accumulator]
	lda $0AB8.w		; AD B8 0A ; Load $0AB8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC20B.l		; 8F 0B C2 7E ; Store accumulator (long) $7EC20B.l [Reads: Accumulator]
	lda $0AB7.w		; AD B7 0A ; Load $0AB7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC20C.l		; 8F 0C C2 7E ; Store accumulator (long) $7EC20C.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	jmp $C769.w		; 4C 69 C7 ; Jump to $C769.w [Flow: jump]
	jsr $C692.w		; 20 92 C6 ; Jump to subroutine at $C692.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C93F.w		; 29 3F C9 ; Logical AND #$C93F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$F005.w		; C9 05 F0 ; Compare #$F005.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl $C9.b		; 06 C9 ; Arithmetic shift left $C9.b [Reads: Direct Page] [Flags: NCZ]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $A2.b		; 02 A2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F040.w		; 29 40 F0 ; Logical AND #$F040.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($E8.b,X)		; 01 E8 ; Logical OR ($E8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stx $0AB3.w		; 8E B3 0A ; Store X register to $0AB3.w [Reads: X Index]
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	jsl $1BEC9E.l		; 22 9E EC 1B ; Jump to subroutine long $1BEC9E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED6E.l		; 22 6E ED 1B ; Jump to subroutine long $1BED6E.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECC5.l		; 22 C5 EC 1B ; Jump to subroutine long $1BECC5.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECE4.l		; 22 E4 EC 1B ; Jump to subroutine long $1BECE4.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED03.l		; 22 03 ED 1B ; Jump to subroutine long $1BED03.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED29.l		; 22 29 ED 1B ; Jump to subroutine long $1BED29.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEDF9.l		; 22 F9 ED 1B ; Jump to subroutine long $1BEDF9.l [Writes: Stack Pointer] [Flow: call]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$F040.w		; 29 40 F0 ; Logical AND #$F040.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $A2.b		; 02 A2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8E.b,S		; 03 8E ; OR accumulator with stack relative $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $220A.w		; AC 0A 22 ; Load $220A.w into Y register [Writes: Y Index] [Flags: NZ]
	adc [$EC.b],Y		; 77 EC ; Add with carry (long indexed) [$EC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEEC7.l		; 22 C7 EE 1B ; Jump to subroutine long $1BEEC7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC540.l,X		; 9F 40 C5 7E ; Store accumulator (long,X) $7EC540.l,X [Reads: Accumulator, X Index]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	sta $7EC5C0.l,X		; 9F C0 C5 7E ; Store accumulator (long,X) $7EC5C0.l,X [Reads: Accumulator, X Index]
	sta $7EC600.l,X		; 9F 00 C6 7E ; Store accumulator (long,X) $7EC600.l,X [Reads: Accumulator, X Index]
	sta $7EC640.l,X		; 9F 40 C6 7E ; Store accumulator (long,X) $7EC640.l,X [Reads: Accumulator, X Index]
	sta $7EC680.l,X		; 9F 80 C6 7E ; Store accumulator (long,X) $7EC680.l,X [Reads: Accumulator, X Index]
	sta $7EC6C0.l,X		; 9F C0 C6 7E ; Store accumulator (long,X) $7EC6C0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $DE		; D0 DE ; Branch if not equal to $D0, $DE [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	lda $7EC310.l,X		; BF 10 C3 7E ; Load long $7EC310.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC510.l,X		; 9F 10 C5 7E ; Store accumulator (long,X) $7EC510.l,X [Reads: Accumulator, X Index]
	lda $7EC320.l,X		; BF 20 C3 7E ; Load long $7EC320.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC520.l,X		; 9F 20 C5 7E ; Store accumulator (long,X) $7EC520.l,X [Reads: Accumulator, X Index]
	lda $7EC330.l,X		; BF 30 C3 7E ; Load long $7EC330.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC530.l,X		; 9F 30 C5 7E ; Store accumulator (long,X) $7EC530.l,X [Reads: Accumulator, X Index]
	lda $7EC4B0.l,X		; BF B0 C4 7E ; Load long $7EC4B0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC6B0.l,X		; 9F B0 C6 7E ; Store accumulator (long,X) $7EC6B0.l,X [Reads: Accumulator, X Index]
	lda $7EC4D0.l,X		; BF D0 C4 7E ; Load long $7EC4D0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC6D0.l,X		; 9F D0 C6 7E ; Store accumulator (long,X) $7EC6D0.l,X [Reads: Accumulator, X Index]
	lda $7EC4E0.l,X		; BF E0 C4 7E ; Load long $7EC4E0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC6E0.l,X		; 9F E0 C6 7E ; Store accumulator (long,X) $7EC6E0.l,X [Reads: Accumulator, X Index]
	lda $7EC4F0.l,X		; BF F0 C4 7E ; Load long $7EC4F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC6F0.l,X		; 9F F0 C6 7E ; Store accumulator (long,X) $7EC6F0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$F7.b		; A9 F7 ; Load #$F7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	lda $7EC340.l,X		; BF 40 C3 7E ; Load long $7EC340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC540.l,X		; 9F 40 C5 7E ; Store accumulator (long,X) $7EC540.l,X [Reads: Accumulator, X Index]
	lda $7EC380.l,X		; BF 80 C3 7E ; Load long $7EC380.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	lda $7EC3C0.l,X		; BF C0 C3 7E ; Load long $7EC3C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5C0.l,X		; 9F C0 C5 7E ; Store accumulator (long,X) $7EC5C0.l,X [Reads: Accumulator, X Index]
	lda $7EC400.l,X		; BF 00 C4 7E ; Load long $7EC400.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC600.l,X		; 9F 00 C6 7E ; Store accumulator (long,X) $7EC600.l,X [Reads: Accumulator, X Index]
	lda $7EC440.l,X		; BF 40 C4 7E ; Load long $7EC440.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC640.l,X		; 9F 40 C6 7E ; Store accumulator (long,X) $7EC640.l,X [Reads: Accumulator, X Index]
	lda $7EC480.l,X		; BF 80 C4 7E ; Load long $7EC480.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC680.l,X		; 9F 80 C6 7E ; Store accumulator (long,X) $7EC680.l,X [Reads: Accumulator, X Index]
	lda $7EC4C0.l,X		; BF C0 C4 7E ; Load long $7EC4C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC6C0.l,X		; 9F C0 C6 7E ; Store accumulator (long,X) $7EC6C0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $C807.w,X		; BD 07 C8 ; Load $C807.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4370.w,X		; 9D 70 43 ; Store accumulator to $4370.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN7B.w		; 8D 77 43 ; Store accumulator to DMALEN7B.w [Reads: Accumulator]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $96.b		; 85 96 ; Store accumulator to $96.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $97.b		; 85 97 ; Store accumulator to $97.b [Reads: Accumulator]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $98.b		; 85 98 ; Store accumulator to $98.b [Reads: Accumulator]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1E.b		; 85 1E ; Store accumulator to $1E.b [Reads: Accumulator]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1F.b		; 85 1F ; Store accumulator to $1F.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx #$01DF.w		; A2 DF 01 ; Load #$01DF.w into X register [Writes: X Index] [Flags: NZ]
	stz $1B00.w,X		; 9E 00 1B ; Store zero to $1B00.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FF0001.l,X		; FF 01 00 FF ; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FF0001.l,X		; FF 01 00 FF ; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $41.b		; 00 41 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $0C.b		; 26 0C ; Rotate left $0C.b [Reads: Direct Page] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($15.b,X)		; 01 15 ; Logical OR ($15.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($15.b,X)		; 01 15 ; Logical OR ($15.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $51.b		; 00 51 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $2121.w		; 20 21 21 ; Jump to subroutine at $2121.w [Writes: Stack Pointer] [Flow: call]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $0D0C.w		; 0D 0C 0D ; Logical OR $0D0C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0001.w		; 0D 01 00 ; Logical OR $0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0D0C.w		; 0D 0C 0D ; Logical OR $0D0C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0202.w		; 0D 02 02 ; Logical OR $0202.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0D0C.w		; 0D 0C 0D ; Logical OR $0D0C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0404.w		; 0D 04 04 ; Logical OR $0404.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1918.w,Y		; 19 18 19 ; OR accumulator with memory $1918.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1212.w,Y		; 19 12 12 ; OR accumulator with memory $1212.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$11.b		; 09 11 ; Logical OR #$11.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($0B.b),Y		; 11 0B ; OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora $0D0C.w		; 0D 0C 0D ; Logical OR $0D0C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0606.w		; 0D 06 06 ; Logical OR $0606.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0606.w,X		; 1D 06 06 ; OR accumulator with memory $0606.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0405.w,X		; 1D 05 04 ; OR accumulator with memory $0405.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1011.w,X		; 1D 11 10 ; OR accumulator with memory $1011.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1617.w,X		; 1D 17 16 ; OR accumulator with memory $1617.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1A1A.w,X		; 1D 1A 1A ; OR accumulator with memory $1A1A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D1D.w,X		; 1D 1D 1D ; OR accumulator with memory $1D1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $1C1D.w,X		; 1E 1D 1C ; Arithmetic shift left $1C1D.w,X [Reads: X Index] [Flags: NCZ]
	ora $1D1D.w,X		; 1D 1D 1D ; OR accumulator with memory $1D1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $1D1D.w		; 1C 1D 1D ; Test and reset bits $1D1D.w [Reads: Accumulator] [Flags: Z]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1E1E.w,X		; 1D 1E 1E ; OR accumulator with memory $1E1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $1B1F.w,X		; 1E 1F 1B ; Arithmetic shift left $1B1F.w,X [Reads: X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: NCZ]
	ora $1F1E1F.l,X		; 1F 1F 1E 1F ; Logical OR long $1F1E1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $121212.l,X		; 1F 12 12 12 ; Logical OR long $121212.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1F.b,S),Y		; 13 1F ; OR accumulator (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $1F1F.w,X		; 1E 1F 1F ; Arithmetic shift left $1F1F.w,X [Reads: X Index] [Flags: NCZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1414.w,X		; 1D 14 14 ; OR accumulator with memory $1414.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0000.w,X		; 1D 00 00 ; OR accumulator with memory $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora $0A0B.w		; 0D 0B 0A ; Logical OR $0A0B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	ora $0B0A0B.l		; 0F 0B 0A 0B ; OR accumulator with memory (long) $0B0A0B.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0202.w,X		; 1D 02 02 ; OR accumulator with memory $0202.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1C1D.w,X		; 1D 1D 1C ; OR accumulator with memory $1C1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0C1D.w,X		; 1D 1D 0C ; OR accumulator with memory $0C1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0D0C.w		; 0C 0C 0D ; Test and set bits $0D0C.w [Reads: Accumulator] [Flags: Z]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0E0F.w,X		; 1D 0F 0E ; OR accumulator with memory $0E0F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1C1D0F.l		; 0F 0F 1D 1C ; OR accumulator with memory (long) $1C1D0F.l [Writes: Accumulator] [Flags: NZ]
	ora $081D.w,X		; 1D 1D 08 ; OR accumulator with memory $081D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$1D.b		; 09 1D ; Logical OR #$1D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $1D1D.w		; 1C 1D 1D ; Test and reset bits $1D1D.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0F0F0E.l		; 0F 0E 0F 0F ; OR accumulator with memory (long) $0F0F0E.l [Writes: Accumulator] [Flags: NZ]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	ora $1B1A1B.l		; 0F 1B 1A 1B ; OR accumulator with memory (long) $1B1A1B.l [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $0D0C.w		; 0D 0C 0D ; Logical OR $0D0C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0203.w		; 0D 03 02 ; Logical OR $0203.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0001.w,Y		; 19 01 00 ; OR accumulator with memory $0001.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F1F1E.l,X		; 1F 1E 1F 1F ; Logical OR long $1F1F1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1918.w,Y		; 19 18 19 ; OR accumulator with memory $1918.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0405.w,Y		; 19 05 04 ; OR accumulator with memory $0405.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $2021.w,Y		; 19 21 20 ; OR accumulator with memory $2021.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1D1D.w,X		; 1D 1D 1D ; OR accumulator with memory $1D1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $2021.w,X		; 1E 21 20 ; Arithmetic shift left $2021.w,X [Reads: X Index] [Flags: NCZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0F0F0E.l		; 0F 0E 0F 0F ; OR accumulator with memory (long) $0F0F0E.l [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $201F1F.l,X		; 1F 1F 1F 20 ; Logical OR long $201F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora $2021.w		; 0D 21 20 ; Logical OR $2021.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0D0D.w		; 0D 0D 0D ; Logical OR $0D0D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $2021.w		; 0E 21 20 ; Arithmetic shift left $2021.w [Flags: NCZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	ora $212021.l		; 0F 21 20 21 ; OR accumulator with memory (long) $212021.l [Writes: Accumulator] [Flags: NZ]
	and ($0F.b,X)		; 21 0F ; Logical AND ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $21100F.l		; 0F 0F 10 21 ; OR accumulator with memory (long) $21100F.l [Writes: Accumulator] [Flags: NZ]
	jsr $2121.w		; 20 21 21 ; Jump to subroutine at $2121.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $2021.w,Y		; 19 21 20 ; OR accumulator with memory $2021.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $2223.w,Y		; 19 23 22 ; OR accumulator with memory $2223.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $2223.w,Y		; 19 23 22 ; OR accumulator with memory $2223.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	ora $2425.w,X		; 1D 25 24 ; OR accumulator with memory $2425.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$23.b		; 09 23 ; Logical OR #$23.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0A2323.l		; 22 23 23 0A ; Jump to subroutine long $0A2323.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $2021.w		; 0C 21 20 ; Test and set bits $2021.w [Reads: Accumulator] [Flags: Z]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: NCZ]
	ora $232223.l,X		; 1F 23 22 23 ; Logical OR long $232223.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $12.b,S		; 23 12 ; AND accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($23.b,S),Y		; 13 23 ; OR accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $092323.l		; 22 23 23 09 ; Jump to subroutine long $092323.l [Writes: Stack Pointer] [Flow: call]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0D0D.w		; 0D 0D 0D ; Logical OR $0D0D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $2425.w		; 0E 25 24 ; Arithmetic shift left $2425.w [Flags: NCZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	ora $2021.w,X		; 1D 21 20 ; OR accumulator with memory $2021.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1D1D.w,X		; 1D 1D 1D ; OR accumulator with memory $1D1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $2223.w,X		; 1E 23 22 ; Arithmetic shift left $2223.w,X [Reads: X Index] [Flags: NCZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: NCZ]
	ora $252425.l,X		; 1F 25 24 25 ; Logical OR long $252425.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $06.b		; 25 06 ; Logical AND $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora [$25.b]		; 07 25 ; OR accumulator with memory (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$25.b		; 09 25 ; Logical OR #$25.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $09.b		; 25 09 ; Logical AND $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $2425.w		; 0C 25 24 ; Test and set bits $2425.w [Reads: Accumulator] [Flags: Z]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora $2425.w		; 0D 25 24 ; Logical OR $2425.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0D0D.w		; 0D 0D 0D ; Logical OR $0D0D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $1010.w		; 0E 10 10 ; Arithmetic shift left $1010.w [Flags: NCZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora $0E0E.w		; 0D 0E 0E ; Logical OR $0E0E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $0C0F.w		; 0E 0F 0C ; Arithmetic shift left $0C0F.w [Flags: NCZ]
	tsb $0D0C.w		; 0C 0C 0D ; Test and set bits $0D0C.w [Reads: Accumulator] [Flags: Z]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0D0C.w		; 0D 0C 0D ; Logical OR $0D0C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1C1C.w		; 0D 1C 1C ; Logical OR $1C1C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $031D.w		; 1C 1D 03 ; Test and reset bits $031D.w [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($0A.b),Y		; 11 0A ; OR accumulator with memory ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0607.w,X		; 1D 07 06 ; OR accumulator with memory $0607.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1D1C.w,X		; 1D 1C 1D ; OR accumulator with memory $1D1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0404.w,X		; 1D 04 04 ; OR accumulator with memory $0404.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: NCZ]
	ora $030203.l,X		; 1F 03 02 03 ; Logical OR long $030203.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora [$25.b]		; 07 25 ; OR accumulator with memory (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $0E.b		; 25 0E ; Logical AND $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0F0E.w		; 0E 0E 0F ; Arithmetic shift left $0F0E.w [Flags: NCZ]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ora $0300.w		; 0D 00 03 ; Logical OR $0300.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $101C.w,X		; 3D 1C 10 ; AND accumulator with memory $101C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda $1002.w		; AD 02 10 ; Load $1002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $10.b		; 25 10 ; Logical AND $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $78.b		; 25 78 ; Logical AND $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($C0.b,X)		; 21 C0 ; Logical AND ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0DC0.w		; 0D C0 0D ; Logical OR $0DC0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $1FD8.w		; 0D D8 1F ; Logical OR $1FD8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$1F.b		; C0 1F ; Compare #$1F.b with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $11D8.w,Y		; 19 D8 11 ; OR accumulator with memory $11D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($D8.b),Y		; 11 D8 ; OR accumulator with memory ($D8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($D8.b),Y		; 11 D8 ; OR accumulator with memory ($D8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FD8.w		; 0D D8 1F ; Logical OR $1FD8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $D81FD8.l,X		; 1F D8 1F D8 ; Logical OR long $D81FD8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $D81DD8.l,X		; 1F D8 1D D8 ; Logical OR long $D81DD8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FD8.w,X		; 1D D8 1F ; OR accumulator with memory $1FD8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $05D8.w,X		; 1D D8 05 ; OR accumulator with memory $05D8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $D81DD8.l,X		; 1F D8 1D D8 ; Logical OR long $D81DD8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C01DD8.l,X		; 1F D8 1D C0 ; Logical OR long $C01DD8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $D81DD8.l,X		; 1F D8 1D D8 ; Logical OR long $D81DD8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $D81DD8.l,X		; 1F D8 1D D8 ; Logical OR long $D81DD8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $D81FC0.l,X		; 1F C0 1F D8 ; Logical OR long $D81FC0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1DD8.w,X		; 1D D8 1D ; OR accumulator with memory $1DD8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $D8.b		; 05 D8 ; Logical OR $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$D8.b		; 09 D8 ; Logical OR #$D8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($D8.b,S),Y		; 13 D8 ; OR accumulator (stack relative indirect indexed) ($D8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $01D8.w,X		; 1D D8 01 ; OR accumulator with memory $01D8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$1D.b		; C0 1D ; Compare #$1D.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$1D.b		; C0 1D ; Compare #$1D.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$1D.b		; C0 1D ; Compare #$1D.b with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $0BD8.w,X		; 1D D8 0B ; OR accumulator with memory $0BD8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$0F.b		; C0 0F ; Compare #$0F.b with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($D8.b,X)		; 01 D8 ; Logical OR ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D8.b,X)		; 01 D8 ; Logical OR ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $D8.b		; 05 D8 ; Logical OR $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$D8.b]		; 07 D8 ; OR accumulator with memory (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $D8.b		; 05 D8 ; Logical OR $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $21D8.w		; 20 D8 21 ; Jump to subroutine at $21D8.w [Writes: Stack Pointer] [Flow: call]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($C0.b,X)		; 21 C0 ; Logical AND ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($C0.b,X)		; 21 C0 ; Logical AND ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($C0.b,X)		; 21 C0 ; Logical AND ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($D8.b,X)		; 21 D8 ; Logical AND ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $D8.b,S		; 23 D8 ; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $80.b		; 25 80 ; Logical AND $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tsb $0C96.w		; 0C 96 0C ; Test and set bits $0C96.w [Reads: Accumulator] [Flags: Z]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$00.b		; 89 00 ; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $96.b,S		; 03 96 ; OR accumulator with stack relative $96.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $891D.w,X		; 7D 1D 89 ; Add $891D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0589.w,X		; 1D 89 05 ; OR accumulator with memory $0589.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $97.b,S		; 03 97 ; OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($D8.b,X)		; 01 D8 ; Logical OR ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $D8.b		; 25 D8 ; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $78.b		; 25 78 ; Logical AND $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$78.b		; 09 78 ; Logical OR #$78.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$F8.b		; 09 F8 ; Logical OR #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $78.b		; 02 78 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	ora #$78.b		; 09 78 ; Logical OR #$78.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	ora $F8.b		; 05 F8 ; Logical OR $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	ora ($78.b),Y		; 11 78 ; OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $78.b,X		; 16 78 ; Arithmetic shift left $78.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$78.b],Y		; 17 78 ; OR accumulator with memory (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora #$F8.b		; 09 F8 ; Logical OR #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $1D78.w,X		; 1D 78 1D ; OR accumulator with memory $1D78.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $F81EF8.l,X		; 1F F8 1E F8 ; Logical OR long $F81EF8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $1278.w,X		; 1E 78 12 ; Arithmetic shift left $1278.w,X [Reads: X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	trb $78.b		; 14 78 ; Test and reset bits $78.b [Reads: Accumulator] [Flags: Z]
	trb $78.b		; 14 78 ; Test and reset bits $78.b [Reads: Accumulator] [Flags: Z]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	trb $78.b		; 14 78 ; Test and reset bits $78.b [Reads: Accumulator] [Flags: Z]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	tsb $0E78.w		; 0C 78 0E ; Test and set bits $0E78.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	ora ($78.b)		; 12 78 ; OR accumulator with memory (indirect) ($78.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $78.b		; 02 78 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C78.w,X		; 1D 78 0C ; OR accumulator with memory $0C78.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $F80878.l		; 0F 78 08 F8 ; OR accumulator with memory (long) $F80878.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	asl $16F8.w		; 0E F8 16 ; Arithmetic shift left $16F8.w [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $0078.w		; 0D 78 00 ; Logical OR $0078.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($78.b),Y		; 11 78 ; OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $781978.l,X		; 1F 78 19 78 ; Logical OR long $781978.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0278.w,X		; 1D 78 02 ; OR accumulator with memory $0278.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	ora $780678.l		; 0F 78 06 78 ; OR accumulator with memory (long) $780678.l [Writes: Accumulator] [Flags: NZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	ora [$78.b]		; 07 78 ; OR accumulator with memory (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $780C78.l,X		; 1F 78 0C 78 ; Logical OR long $780C78.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0E78.w		; 0D 78 0E ; Logical OR $0E78.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $781078.l		; 0F 78 10 78 ; OR accumulator with memory (long) $781078.l [Writes: Accumulator] [Flags: NZ]
	ora ($78.b)		; 12 78 ; OR accumulator with memory (indirect) ($78.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $F8.b		; 14 F8 ; Test and reset bits $F8.b [Reads: Accumulator] [Flags: Z]
	asl $78.b,X		; 16 78 ; Arithmetic shift left $78.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $1678.w,Y		; 19 78 16 ; OR accumulator with memory $1678.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora [$78.b],Y		; 17 78 ; OR accumulator with memory (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $1C78.w,Y		; 19 78 1C ; OR accumulator with memory $1C78.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $78.b		; 02 78 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl $12F8.w,X		; 1E F8 12 ; Arithmetic shift left $12F8.w,X [Reads: X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora #$78.b		; 09 78 ; Logical OR #$78.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0278.w		; 0D 78 02 ; Logical OR $0278.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($78.b),Y		; 11 78 ; OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $78.b,X		; 15 78 ; OR accumulator with memory $78.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	trb $1D78.w		; 1C 78 1D ; Test and reset bits $1D78.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl $0678.w,X		; 1E 78 06 ; Arithmetic shift left $0678.w,X [Reads: X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora #$78.b		; 09 78 ; Logical OR #$78.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $0D78.w		; 0C 78 0D ; Test and set bits $0D78.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $78.b		; 02 78 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $1100.w		; 0E 00 11 ; Arithmetic shift left $1100.w [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $0370.w		; 0D 70 03 ; Logical OR $0370.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $107301.l,X		; 7F 01 73 10 ; Add long $107301.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $07780B.l,X		; 9F 0B 78 07 ; Store accumulator (long,X) $07780B.l,X [Reads: Accumulator, X Index]
	adc $1E6104.l,X		; 7F 04 61 1E ; Add long $1E6104.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($03.b,S),Y		; 93 03 ; Store accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	adc [$06.b],Y		; 77 06 ; Add with carry (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl $0078.w		; 0E 78 00 ; Arithmetic shift left $0078.w [Flags: NCZ]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $0606.w		; 0D 06 06 ; Logical OR $0606.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $060D.w		; 0D 0D 06 ; Logical OR $060D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0E13.w		; 0D 13 0E ; Logical OR $0E13.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0A.b,S		; 03 0A ; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $12.b		; 06 12 ; Arithmetic shift left $12.b [Reads: Direct Page] [Flags: NCZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $031414.l		; 0F 14 14 03 ; OR accumulator with memory (long) $031414.l [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $13.b		; 06 13 ; Arithmetic shift left $13.b [Reads: Direct Page] [Flags: NCZ]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0100FF.l,X		; FF FF 00 01 ; Subtract with carry (long,X) $0100FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FE0100.l,X		; FF 00 01 FE ; Subtract with carry (long,X) $FE0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000100.l,X		; FF 00 01 00 ; Subtract with carry (long,X) $000100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0200FF.l,X		; FF FF 00 02 ; Subtract with carry (long,X) $0200FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0604FF.l,X		; FF FF 04 06 ; Subtract with carry (long,X) $0604FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $18FFFF.l,X		; FF FF FF 18 ; Subtract with carry (long,X) $18FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1818FF.l,X		; FF FF 18 18 ; Subtract with carry (long,X) $1818FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0A08FF.l,X		; FF FF 08 0A ; Subtract with carry (long,X) $0A08FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $100E.w		; 0C 0E 10 ; Test and set bits $100E.w [Reads: Accumulator] [Flags: Z]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FFFF1A.l,X		; FF 1A FF FF ; Subtract with carry (long,X) $FFFF1A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $202222.l		; 22 22 22 20 ; Jump to subroutine long $202222.l [Writes: Stack Pointer] [Flow: call]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $220022.l		; 22 22 00 22 ; Jump to subroutine long $220022.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $202202.l		; 22 02 22 20 ; Jump to subroutine long $202202.l [Writes: Stack Pointer] [Flow: call]
	jsr $2220.w		; 20 20 22 ; Jump to subroutine at $2220.w [Writes: Stack Pointer] [Flow: call]
	jsl $220022.l		; 22 22 00 22 ; Jump to subroutine long $220022.l [Writes: Stack Pointer] [Flow: call]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $202202.l		; 22 02 22 20 ; Jump to subroutine long $202202.l [Writes: Stack Pointer] [Flow: call]
	jsl $020222.l		; 22 22 02 02 ; Jump to subroutine long $020222.l [Writes: Stack Pointer] [Flow: call]
	jsl $222000.l		; 22 00 20 22 ; Jump to subroutine long $222000.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000202.l		; 22 02 02 00 ; Jump to subroutine long $000202.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020200.l		; 22 00 02 02 ; Jump to subroutine long $020200.l [Writes: Stack Pointer] [Flow: call]
	jsl $000202.l		; 22 02 02 00 ; Jump to subroutine long $000202.l [Writes: Stack Pointer] [Flow: call]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0002.w		; 20 02 00 ; Jump to subroutine at $0002.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $16.b		; 02 16 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $D405.w		; CC 05 D4 ; Compare $D405.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $B6.b		; 05 B6 ; Logical OR $B6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stx $0B.b		; 86 0B ; Store X register to $0B.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $0B98.w		; 0D 98 0B ; Logical OR $0B98.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec $0014.w		; CE 14 00 ; Decrement $0014.w [Flags: NZ]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $FFFF.w		; 1C FF FF ; Test and reset bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	ror $14.b		; 66 14 ; Rotate right $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $1A.b,Y		; B6 1A ; Load X register $1A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldx $1A.b,Y		; B6 1A ; Load X register $1A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	asl $0C04.w		; 0E 04 0C ; Arithmetic shift left $0C04.w [Flags: NCZ]
	stz $1530.w		; 9C 30 15 ; Store zero to $1530.w
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0009.w		; AC 09 00 ; Load $0009.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$AC.b		; 09 AC ; Logical OR #$AC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b)		; 12 03 ; OR accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $1C.b,X		; 16 1C ; Arithmetic shift left $1C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $1B.b,X		; 16 1B ; Arithmetic shift left $1B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($0E.b)		; 12 0E ; OR accumulator with memory (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($F2.b)		; 12 F2 ; OR accumulator with memory (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($F2.b)		; 12 F2 ; OR accumulator with memory (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$0E.b],Y		; 17 0E ; OR accumulator with memory (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($18.b)		; F2 18 ; Subtract with carry (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$12.b],Y		; 17 12 ; OR accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $1812.w		; 0E 12 18 ; Arithmetic shift left $1812.w [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($12.b)		; F2 12 ; Subtract with carry (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc ($17.b)		; F2 17 ; Subtract with carry (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora [$0E.b],Y		; 17 0E ; OR accumulator with memory (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($12.b)		; F2 12 ; Subtract with carry (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $1616FF.l,X		; FF FF 16 16 ; Subtract with carry (long,X) $1616FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $1B.b,X		; 15 1B ; OR accumulator with memory $1B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B.b		; 85 1B ; Store accumulator to $1B.b [Reads: Accumulator]
	lda $010A.w		; AD 0A 01 ; Load $010A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	stz $010A.w		; 9C 0A 01 ; Store zero to $010A.w
	jmp $D97C.w		; 4C 7C D9 ; Jump to $D97C.w [Flow: jump]
.ACCU 16
	rep #$20		; C2 20
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC140.l		; 8F 40 C1 7E ; Store accumulator (long) $7EC140.l [Reads: Accumulator]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC142.l		; 8F 42 C1 7E ; Store accumulator (long) $7EC142.l [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC144.l		; 8F 44 C1 7E ; Store accumulator (long) $7EC144.l [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC146.l		; 8F 46 C1 7E ; Store accumulator (long) $7EC146.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC148.l		; 8F 48 C1 7E ; Store accumulator (long) $7EC148.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC14A.l		; 8F 4A C1 7E ; Store accumulator (long) $7EC14A.l [Reads: Accumulator]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC150.l		; 8F 50 C1 7E ; Store accumulator (long) $7EC150.l [Reads: Accumulator]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC152.l		; 8F 52 C1 7E ; Store accumulator (long) $7EC152.l [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC14C.l		; [PATTERN: Memory clearing operation] 8F 4C C1 7E ; Store accumulator (long) $7EC14C.l [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC14E.l		; 8F 4E C1 7E ; Store accumulator (long) $7EC14E.l [Reads: Accumulator]
	stz $8A.b		; 64 8A ; Store zero to $8A.b
	stz $8C.b		; 64 8C ; Store zero to $8C.b
	lda $0600.w		; AD 00 06 ; Load $0600.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC154.l		; 8F 54 C1 7E ; Store accumulator (long) $7EC154.l [Reads: Accumulator]
	lda $0602.w		; AD 02 06 ; Load $0602.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC156.l		; 8F 56 C1 7E ; Store accumulator (long) $7EC156.l [Reads: Accumulator]
	lda $0604.w		; AD 04 06 ; Load $0604.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC158.l		; 8F 58 C1 7E ; Store accumulator (long) $7EC158.l [Reads: Accumulator]
	lda $0606.w		; AD 06 06 ; Load $0606.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC15A.l		; 8F 5A C1 7E ; Store accumulator (long) $7EC15A.l [Reads: Accumulator]
	lda $0610.w		; AD 10 06 ; Load $0610.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC15C.l		; 8F 5C C1 7E ; Store accumulator (long) $7EC15C.l [Reads: Accumulator]
	lda $0612.w		; AD 12 06 ; Load $0612.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC15E.l		; 8F 5E C1 7E ; Store accumulator (long) $7EC15E.l [Reads: Accumulator]
	lda $0614.w		; AD 14 06 ; Load $0614.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC160.l		; 8F 60 C1 7E ; Store accumulator (long) $7EC160.l [Reads: Accumulator]
	lda $0616.w		; AD 16 06 ; Load $0616.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC162.l		; 8F 62 C1 7E ; Store accumulator (long) $7EC162.l [Reads: Accumulator]
	lda $0624.w		; AD 24 06 ; Load $0624.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC16A.l		; 8F 6A C1 7E ; Store accumulator (long) $7EC16A.l [Reads: Accumulator]
	lda $0626.w		; AD 26 06 ; Load $0626.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC16C.l		; 8F 6C C1 7E ; Store accumulator (long) $7EC16C.l [Reads: Accumulator]
	lda $0628.w		; AD 28 06 ; Load $0628.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC16E.l		; 8F 6E C1 7E ; Store accumulator (long) $7EC16E.l [Reads: Accumulator]
	lda $062A.w		; AD 2A 06 ; Load $062A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC170.l		; 8F 70 C1 7E ; Store accumulator (long) $7EC170.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0AA0.w		; AD A0 0A ; Load $0AA0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC164.l		; 8F 64 C1 7E ; Store accumulator (long) $7EC164.l [Reads: Accumulator]
	lda $0AA1.w		; AD A1 0A ; Load $0AA1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC165.l		; 8F 65 C1 7E ; Store accumulator (long) $7EC165.l [Reads: Accumulator]
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC166.l		; [PATTERN: Memory clearing operation] 8F 66 C1 7E ; Store accumulator (long) $7EC166.l [Reads: Accumulator]
	lda $0AA3.w		; AD A3 0A ; Load $0AA3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC167.l		; 8F 67 C1 7E ; Store accumulator (long) $7EC167.l [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $010A.w		; 9C 0A 01 ; Store zero to $010A.w
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $04AA.w		; AD AA 04 ; Load $04AA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $DC55.w		; 4C 55 DC ; Jump to $DC55.w [Flow: jump]
	lda $010E.w		; AD 0E 01 ; Load $010E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C813.w,X		; BD 13 C8 ; Load $C813.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	lda $CE4F.w,X		; BD 4F CE ; Load $CE4F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $CD45.w,X		; BD 45 CD ; Load $CD45.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $CF59.w,X		; BD 59 CF ; Load $CF59.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $D063.w,X		; BD 63 D0 ; Load $D063.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $D16D.w,X		; BD 6D D1 ; Load $D16D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $D277.w,X		; BD 77 D2 ; Load $D277.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	lda #$01F8.w		; A9 F8 01 ; Load #$01F8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EC.b		; 85 EC ; Store accumulator to $EC.b [Reads: Accumulator]
	lda $D724.w,X		; BD 24 D7 ; Load $D724.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0696.w		; 8D 96 06 ; Store accumulator to $0696.w [Reads: Accumulator]
	stz $0698.w		; 9C 98 06 ; Store zero to $0698.w
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0610.w		; 8D 10 06 ; Store accumulator to $0610.w [Reads: Accumulator]
	lda #$0110.w		; A9 10 01 ; Load #$0110.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0612.w		; 8D 12 06 ; Store accumulator to $0612.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0614.w		; 8D 14 06 ; Store accumulator to $0614.w [Reads: Accumulator]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0616.w		; 8D 16 06 ; Store accumulator to $0616.w [Reads: Accumulator]
	lda $010E.w		; AD 0E 01 ; Load $010E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $C91D.w,Y		; B9 1D C9 ; Load $C91D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0601.w		; 8D 01 06 ; Store accumulator to $0601.w [Reads: Accumulator]
	lda $C91E.w,Y		; B9 1E C9 ; Load $C91E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0603.w		; 8D 03 06 ; Store accumulator to $0603.w [Reads: Accumulator]
	lda $C91F.w,Y		; B9 1F C9 ; Load $C91F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0605.w		; 8D 05 06 ; Store accumulator to $0605.w [Reads: Accumulator]
	lda $C920.w,Y		; B9 20 C9 ; Load $C920.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0607.w		; 8D 07 06 ; Store accumulator to $0607.w [Reads: Accumulator]
	lda $C921.w,Y		; B9 21 C9 ; Load $C921.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0609.w		; 8D 09 06 ; Store accumulator to $0609.w [Reads: Accumulator]
	lda $C922.w,Y		; B9 22 C9 ; Load $C922.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $060B.w		; 8D 0B 06 ; Store accumulator to $060B.w [Reads: Accumulator]
	lda $C923.w,Y		; B9 23 C9 ; Load $C923.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $060D.w		; [PATTERN: Memory clearing operation] 8D 0D 06 ; Store accumulator to $060D.w [Reads: Accumulator]
	lda $C924.w,Y		; B9 24 C9 ; Load $C924.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $060F.w		; 8D 0F 06 ; Store accumulator to $060F.w [Reads: Accumulator]
	stz $0600.w		; 9C 00 06 ; Store zero to $0600.w
	stz $0602.w		; 9C 02 06 ; Store zero to $0602.w
	lda #$10.b		; [PATTERN: Memory clearing operation] A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	sta $0606.w		; 8D 06 06 ; Store accumulator to $0606.w [Reads: Accumulator]
	stz $0608.w		; 9C 08 06 ; Store zero to $0608.w
	stz $060A.w		; 9C 0A 06 ; Store zero to $060A.w
	stz $060C.w		; [PATTERN: Memory clearing operation] 9C 0C 06 ; Store zero to $060C.w
	stz $060E.w		; 9C 0E 06 ; Store zero to $060E.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0000.w		; E0 00 00 ; Compare #$0000.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cpx #$0043.w		; E0 43 00 ; Compare #$0043.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	lda $D381.w,X		; BD 81 D3 ; Load $D381.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda $D82E.w,X		; BD 2E D8 ; Load $D82E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0132.w		; 8D 32 01 ; Store accumulator to $0132.w [Reads: Accumulator]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0132.w		; 8D 32 01 ; Store accumulator to $0132.w [Reads: Accumulator]
	lda $D406.w,X		; BD 06 D4 ; Load $D406.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A4.b		; 85 A4 ; Store accumulator to $A4.b [Reads: Accumulator]
	lda $D48B.w,X		; BD 8B D4 ; Load $D48B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	lda $D510.w,X		; BD 10 D5 ; Load $D510.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $6C.b		; 85 6C ; Store accumulator to $6C.b [Reads: Accumulator]
	lda $D595.w,X		; BD 95 D5 ; Load $D595.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $D595.w,X		; BD 95 D5 ; Load $D595.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $D61A.w,X		; BD 1A D6 ; Load $D61A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	lda $D61A.w,X		; BD 1A D6 ; Load $D61A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	lda $D69F.w,X		; BD 9F D6 ; Load $D69F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $A9.b		; 85 A9 ; Store accumulator to $A9.b [Reads: Accumulator]
	lda $D69F.w,X		; BD 9F D6 ; Load $D69F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	ldx $A0.b		; A6 A0 ; Load $A0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$0100.w		; E0 00 01 ; Compare #$0100.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	stz $A4.b		; 64 A4 ; Store zero to $A4.b
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $42.b		; 85 42 ; Store accumulator to $42.b [Reads: Accumulator]
	sta $43.b		; 85 43 ; Store accumulator to $43.b [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $04F1DE.l,X		; BF DE F1 04 ; Load long $04F1DE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $F940.w,X		; 9D 40 F9 ; Store accumulator to $F940.w,X [Reads: Accumulator, X Index]
	lda $04F25E.l,X		; BF 5E F2 04 ; Load long $04F25E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $F9C0.w,X		; 9D C0 F9 ; Store accumulator to $F9C0.w,X [Reads: Accumulator, X Index]
	lda $04F2DE.l,X		; BF DE F2 04 ; Load long $04F2DE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $FA40.w,X		; 9D 40 FA ; Store accumulator to $FA40.w,X [Reads: Accumulator, X Index]
	lda $04F35E.l,X		; BF 5E F3 04 ; Load long $04F35E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $FAC0.w,X		; 9D C0 FA ; Store accumulator to $FAC0.w,X [Reads: Accumulator, X Index]
	lda $04F36A.l,X		; BF 6A F3 04 ; Load long $04F36A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $FB40.w,X		; 9D 40 FB ; Store accumulator to $FB40.w,X [Reads: Accumulator, X Index]
	lda $04F3EA.l,X		; BF EA F3 04 ; Load long $04F3EA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $FBC0.w,X		; 9D C0 FB ; Store accumulator to $FBC0.w,X [Reads: Accumulator, X Index]
	lda $04F46A.l,X		; BF 6A F4 04 ; Load long $04F46A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $FC40.w,X		; 9D 40 FC ; Store accumulator to $FC40.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $C9		; D0 C9 ; Branch if not equal to $D0, $C9 [Flow: branch]
	ldx #$3E.b		; A2 3E ; Load #$3E.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $F800.w,X		; 9D 00 F8 ; Store accumulator to $F800.w,X [Reads: Accumulator, X Index]
	sta $F840.w,X		; 9D 40 F8 ; Store accumulator to $F840.w,X [Reads: Accumulator, X Index]
	sta $F880.w,X		; 9D 80 F8 ; Store accumulator to $F880.w,X [Reads: Accumulator, X Index]
	sta $F8C0.w,X		; 9D C0 F8 ; Store accumulator to $F8C0.w,X [Reads: Accumulator, X Index]
	sta $F580.w,X		; 9D 80 F5 ; Store accumulator to $F580.w,X [Reads: Accumulator, X Index]
	sta $F5C0.w,X		; 9D C0 F5 ; Store accumulator to $F5C0.w,X [Reads: Accumulator, X Index]
	sta $F600.w,X		; 9D 00 F6 ; Store accumulator to $F600.w,X [Reads: Accumulator, X Index]
	sta $F640.w,X		; 9D 40 F6 ; Store accumulator to $F640.w,X [Reads: Accumulator, X Index]
	sta $F680.w,X		; 9D 80 F6 ; Store accumulator to $F680.w,X [Reads: Accumulator, X Index]
	sta $F6C0.w,X		; 9D C0 F6 ; Store accumulator to $F6C0.w,X [Reads: Accumulator, X Index]
	sta $F700.w,X		; 9D 00 F7 ; Store accumulator to $F700.w,X [Reads: Accumulator, X Index]
	sta $F740.w,X		; 9D 40 F7 ; Store accumulator to $F740.w,X [Reads: Accumulator, X Index]
	sta $F780.w,X		; 9D 80 F7 ; Store accumulator to $F780.w,X [Reads: Accumulator, X Index]
	sta $F7C0.w,X		; 9D C0 F7 ; Store accumulator to $F7C0.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D2		; 10 D2 ; Branch if plus to $10, $D2 [Flow: branch]
	sta $7EC172.l		; 8F 72 C1 7E ; Store accumulator (long) $7EC172.l [Reads: Accumulator]
	stz $04BC.w		; 9C BC 04 ; Store zero to $04BC.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	eor $00.b,X		; 55 00 ; Exclusive OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($00.b),Y		; 51 00 ; Exclusive OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: NCZ]
	ora $010001.l,X		; 1F 01 00 01 ; Logical OR long $010001.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1D.b,X)		; 01 1D ; Logical OR ($1D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $1D1D.w		; 1C 1D 1D ; Test and reset bits $1D1D.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $DB.b		; 04 DB ; Test and set bits $DB.b [Reads: Accumulator] [Flags: Z]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	and ($02.b),Y		; 31 02 ; AND accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0A.b,S		; 03 0A ; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $1E8C0A.l		; 22 0A 8C 1E ; Jump to subroutine long $1E8C0A.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $1D		; 10 1D ; Branch if plus to $10, $1D [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and ($9C.b,X)		; 21 9C ; Logical AND ($9C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $41.b		; 02 41 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $70		; 10 70 ; Branch if plus to $10, $70 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $1EF80A.l		; 8F 0A F8 1E ; Store accumulator (long) $1EF80A.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0978.w,X		; 1D 78 09 ; OR accumulator with memory $0978.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $A8.b		; 02 A8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $00A701.l,X		; 7F 01 A7 00 ; Add long $00A701.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01FF.w,X		; FD FF 01 ; Subtract with carry $01FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0200.l,X		; FF 00 02 FF ; Subtract with carry (long,X) $FF0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2220.w		; 20 20 22 ; Jump to subroutine at $2220.w [Writes: Stack Pointer] [Flow: call]
	jsl $000202.l		; 22 02 02 00 ; Jump to subroutine long $000202.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $16.b		; 02 16 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ora ($AF.b)		; 12 AF ; OR accumulator with memory (indirect) ($AF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $DC40.w,X		; BD 40 DC ; Load $DC40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $010E.w		; 8D 0E 01 ; Store accumulator to $010E.w [Reads: Accumulator]
	lda $DB6E.w,X		; BD 6E DB ; Load $DB6E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	lda $DBC2.w,X		; BD C2 DB ; Load $DBC2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $DBB4.w,X		; BD B4 DB ; Load $DBB4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $DBD0.w,X		; BD D0 DB ; Load $DBD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $DBDE.w,X		; BD DE DB ; Load $DBDE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $DBEC.w,X		; BD EC DB ; Load $DBEC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $DBFA.w,X		; BD FA DB ; Load $DBFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx $32BD.w		; EC BD 32 ; Compare $32BD.w with X register [Reads: X Index] [Flags: NCZ]
	jmp.w [$968D]		; DC 8D 96 ; Jump long indirect [$968D] [Flow: jump]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0610.w		; 8D 10 06 ; Store accumulator to $0610.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($8D.b,X)		; 01 8D ; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($06.b)		; 12 06 ; OR accumulator with memory (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($8D.b,X)		; 01 8D ; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $06.b,X		; 16 06 ; Arithmetic shift left $06.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $7EF3C8.l		; AF C8 F3 7E ; Load long $7EF3C8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
	sep #$20		; E2 20
	lda $DB7C.w,Y		; B9 7C DB ; Load $DB7C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0601.w		; 8D 01 06 ; Store accumulator to $0601.w [Reads: Accumulator]
	lda $DB7D.w,Y		; B9 7D DB ; Load $DB7D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0603.w		; 8D 03 06 ; Store accumulator to $0603.w [Reads: Accumulator]
	lda $DB7E.w,Y		; B9 7E DB ; Load $DB7E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0605.w		; 8D 05 06 ; Store accumulator to $0605.w [Reads: Accumulator]
	lda $DB7F.w,Y		; B9 7F DB ; Load $DB7F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0607.w		; 8D 07 06 ; Store accumulator to $0607.w [Reads: Accumulator]
	lda $DB80.w,Y		; B9 80 DB ; Load $DB80.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0609.w		; 8D 09 06 ; Store accumulator to $0609.w [Reads: Accumulator]
	lda $DB81.w,Y		; B9 81 DB ; Load $DB81.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $060B.w		; 8D 0B 06 ; Store accumulator to $060B.w [Reads: Accumulator]
	lda $DB82.w,Y		; B9 82 DB ; Load $DB82.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $060D.w		; [PATTERN: Memory clearing operation] 8D 0D 06 ; Store accumulator to $060D.w [Reads: Accumulator]
	lda $DB83.w,Y		; B9 83 DB ; Load $DB83.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $060F.w		; 8D 0F 06 ; Store accumulator to $060F.w [Reads: Accumulator]
	stz $0600.w		; 9C 00 06 ; Store zero to $0600.w
	stz $0602.w		; 9C 02 06 ; Store zero to $0602.w
	lda #$10.b		; [PATTERN: Memory clearing operation] A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	sta $0606.w		; 8D 06 06 ; Store accumulator to $0606.w [Reads: Accumulator]
	stz $0608.w		; 9C 08 06 ; Store zero to $0608.w
	stz $060A.w		; 9C 0A 06 ; Store zero to $060A.w
	stz $060C.w		; [PATTERN: Memory clearing operation] 9C 0C 06 ; Store zero to $060C.w
	stz $060E.w		; 9C 0E 06 ; Store zero to $060E.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	lda $DC08.w,X		; BD 08 DC ; Load $DC08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda $DC0F.w,X		; BD 0F DC ; Load $DC0F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A4.b		; 85 A4 ; Store accumulator to $A4.b [Reads: Accumulator]
	lda $DC16.w,X		; BD 16 DC ; Load $DC16.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	lda $DC1D.w,X		; BD 1D DC ; Load $DC1D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $DC1D.w,X		; BD 1D DC ; Load $DC1D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $DC24.w,X		; BD 24 DC ; Load $DC24.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	lda $DC24.w,X		; BD 24 DC ; Load $DC24.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	lda $DC2B.w,X		; BD 2B DC ; Load $DC2B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $A9.b		; 85 A9 ; Store accumulator to $A9.b [Reads: Accumulator]
	lda $DC2B.w,X		; BD 2B DC ; Load $DC2B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	lda $DC4E.w,X		; BD 4E DC ; Load $DC4E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0132.w		; 8D 32 01 ; Store accumulator to $0132.w [Reads: Accumulator]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0132.w		; 8D 32 01 ; Store accumulator to $0132.w [Reads: Accumulator]
	stz $04AA.w		; 9C AA 04 ; Store zero to $04AA.w
	jmp $DADB.w		; 4C DB DA ; Jump to $DADB.w [Flow: jump]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00020.l,X		; FF 20 00 F0 ; Subtract with carry (long,X) $F00020.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($82.b,X)		; 01 82 ; Logical OR ($82.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($89.b,X)		; 01 89 ; Logical OR ($89.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1B.b,S),Y		; 13 1B ; OR accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $030A5B.l		; 0F 5B 0A 03 ; OR accumulator with memory (long) $030A5B.l [Writes: Accumulator] [Flags: NZ]
	asl $3030.w,X		; 1E 30 30 ; Arithmetic shift left $3030.w,X [Reads: X Index] [Flags: NCZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $45.b		; 02 45 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $4070.w,X		; 5E 70 40 ; Logical shift right $4070.w,X [Reads: X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $75.b,S		; 03 75 ; OR accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1B.b,S		; 03 1B ; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$58.b]		; 47 58 ; Exclusive OR accumulator with memory (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $15.b,S		; 43 15 ; Exclusive OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $181B.w		; 2C 1B 18 ; Test bits $181B.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $2C.b,S		; 03 2C ; OR accumulator with stack relative $2C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $8118.w,X		; 1E 18 81 ; Arithmetic shift left $8118.w,X [Reads: X Index] [Flags: NCZ]
	.db $30, $16		; 30 16 ; Branch if minus to $30, $16 [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	trb $1600.w		; 1C 00 16 ; Test and reset bits $1600.w [Reads: Accumulator] [Flags: Z]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4A.b		; 05 4A ; Logical OR $4A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $5A.b		; 14 5A ; Test and reset bits $5A.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A8.b,S		; 03 A8 ; OR accumulator with stack relative $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $16.b		; 02 16 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C4.b		; 02 C4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	ora ($04.b)		; 12 04 ; OR accumulator with memory (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $0460.w		; 0E 60 04 ; Arithmetic shift left $0460.w [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora [$A0.b]		; 07 A0 ; OR accumulator with memory (long) [$A0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	pei ($0D.b)		; D4 0D ; Push effective indirect address ($0D.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($0A.b)		; D4 0A ; Push effective indirect address ($0A.b) [Reads: Direct Page] [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tsb $07C8.w		; 0C C8 07 ; Test and set bits $07C8.w [Reads: Accumulator] [Flags: Z]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$17.b		; E0 17 ; Compare #$17.b with X register [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $9C.b		; 04 9C ; Test and set bits $9C.b [Reads: Accumulator] [Flags: Z]
	ora $0EAC.w		; 0D AC 0E ; Logical OR $0EAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $3209.w		; 2C 09 32 ; Test bits $3209.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $5A.b		; 04 5A ; Test and set bits $5A.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $8E.b		; 04 8E ; Test and set bits $8E.b [Reads: Accumulator] [Flags: Z]
	tsb $0EB8.w		; 0C B8 0E ; Test and set bits $0EB8.w [Reads: Accumulator] [Flags: Z]
	jmp $820F.w		; 4C 0F 82 ; Jump to $820F.w [Flow: jump]
	cop $50.b		; 02 50 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $82, $0D, $1A		; 82 0D 1A ; Branch always long to $82, $0D, $1A [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $12.b		; 04 12 ; Test and set bits $12.b [Reads: Accumulator] [Flags: Z]
	ora [$2E.b]		; 07 2E ; OR accumulator with memory (long) [$2E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $0E0F.w		; 4E 0F 0E ; Logical shift right $0E0F.w [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $DA.b,S		; 03 DA ; OR accumulator with stack relative $DA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $4C.b		; 04 4C ; Test and set bits $4C.b [Reads: Accumulator] [Flags: Z]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $9A.b,S		; 03 9A ; OR accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($40.b),Y		; 11 40 ; OR accumulator with memory ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$3A.b		; 09 3A ; Logical OR #$3A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $8200.w		; 20 00 82 ; Jump to subroutine at $8200.w [Writes: Stack Pointer] [Flow: call]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($06.b)		; 92 06 ; Store accumulator (indirect) ($06.b) [Reads: Direct Page, Accumulator]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $02.b		; 64 02 ; Store zero to $02.b
	sty $02.b,X		; 94 02 ; Store Y register $02.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0C.b,X		; 56 0C ; Logical shift right $0C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0C46.w		; 0C 46 0C ; Test and set bits $0C46.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $4A06.w		; 4C 06 4A ; Jump to $4A06.w [Flow: jump]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $01.b		; E4 01 ; Compare $01.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $02.b,S		; 63 02 ; Add with carry (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A3.b,X)		; 01 A3 ; Logical OR ($A3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($E3.b,X)		; 01 E3 ; Logical OR ($E3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $93.b,S		; 03 93 ; OR accumulator with stack relative $93.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E3.b,X)		; 01 E3 ; Logical OR ($E3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $8C.b		; 06 8C ; Arithmetic shift left $8C.b [Reads: Direct Page] [Flags: NCZ]
	asl $0600.w		; 0E 00 06 ; Arithmetic shift left $0600.w [Flags: NCZ]
	adc $A60C.w,Y		; 79 0C A6 ; Add $A60C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($E6.b,X)		; 01 E6 ; Logical OR ($E6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F6.b,X)		; 01 F6 ; Logical OR ($F6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($66.b,X)		; 01 66 ; Logical OR ($66.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0205.w		; 0D 05 02 ; Logical OR $0205.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $01.b		; C4 01 ; Compare $01.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	asl $2403.w,X		; 1E 03 24 ; Arithmetic shift left $2403.w,X [Reads: X Index] [Flags: NCZ]
	cop $7A.b		; 02 7A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $DA.b		; 06 DA ; Arithmetic shift left $DA.b [Reads: Direct Page] [Flags: NCZ]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F6.b]		; 07 F6 ; OR accumulator with memory (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($5A.b,X)		; 01 5A ; Logical OR ($5A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $65.b		; 04 65 ; Test and set bits $65.b [Reads: Accumulator] [Flags: Z]
	asl $A3.b		; 06 A3 ; Arithmetic shift left $A3.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $42, $08		; 42 08 ; Reserved instruction
	stz $06.b,X		; 74 06 ; Store zero to $06.b,X [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jmp L000900.l		; 5C 00 89 00 ; Jump long to L000900.l [Flow: jump]
	cpx $06.b		; E4 06 ; Compare $06.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $08.b		; 26 08 ; Rotate left $08.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	jsr $000D.w		; 20 0D 00 ; Jump to subroutine at $000D.w [Writes: Stack Pointer] [Flow: call]
	tsb $1E.b		; 04 1E ; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec $AE06.w,X		; DE 06 AE ; Decrement memory $AE06.w,X [Reads: X Index] [Flags: NZ]
	asl $84.b		; 06 84 ; Arithmetic shift left $84.b [Reads: Direct Page] [Flags: NCZ]
	ora [$56.b]		; 07 56 ; OR accumulator with memory (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sep #$0E		; E2 0E ; Set processor status bits #$0E [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $D6.b		; 06 D6 ; Arithmetic shift left $D6.b [Reads: Direct Page] [Flags: NCZ]
	asl $00A6.w		; 0E A6 00 ; Arithmetic shift left $00A6.w [Flags: NCZ]
	.db $42, $01		; 42 01 ; Reserved instruction
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	sep #$01		; E2 01 ; Set processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jsl $010002.l		; 22 02 00 01 ; Jump to subroutine long $010002.l [Writes: Stack Pointer] [Flow: call]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $C604.w		; 8E 04 C6 ; Store X register to $C604.w [Reads: X Index]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $0D00.w		; 0D 00 0D ; Logical OR $0D00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $0C.b		; 46 0C ; Logical shift right $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lsr $0C.b,X		; 56 0C ; Logical shift right $0C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr $0C.b		; 46 0C ; Logical shift right $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($06.b)		; D4 06 ; Push effective indirect address ($06.b) [Reads: Direct Page] [Writes: Stack Pointer]
	mvn $54,$07		; 54 07 54 ; Move block negative $54,$07 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora [$84.b]		; 07 84 ; OR accumulator with memory (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F2.b]		; 07 F2 ; OR accumulator with memory (long) [$F2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $D6.b		; 06 D6 ; Arithmetic shift left $D6.b [Reads: Direct Page] [Flags: NCZ]
	asl $00A6.w		; 0E A6 00 ; Arithmetic shift left $00A6.w [Flags: NCZ]
	.db $62, $00, $C2		; 62 00 C2 ; Push effective relative address $62, $00, $C2 [Writes: Stack Pointer]
	ora ($62.b,X)		; 01 62 ; Logical OR ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $16.b		; 02 16 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $000C.w,X		; 3E 0C 00 ; Rotate left $000C.w,X [Reads: X Index] [Flags: NCZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $B4.b		; 06 B4 ; Arithmetic shift left $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	mvn $96,$08		; 54 08 96 ; Move block negative $96,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl $0176.w		; 0E 76 01 ; Arithmetic shift left $0176.w [Flags: NCZ]
	.db $62, $02, $74		; 62 02 74 ; Push effective relative address $62, $02, $74 [Writes: Stack Pointer]
	asl $84.b		; 06 84 ; Arithmetic shift left $84.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $0A.b,X		; 36 0A ; Rotate left $0A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $0C.b,X		; D6 0C ; Decrement memory $0C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	lsr $0C.b,X		; 56 0C ; Logical shift right $0C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($08.b)		; 32 08 ; AND accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $024B07.l,X		; 7F 07 4B 02 ; Add long $024B07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp [$08.b],Y		; D7 08 ; Compare accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc $CF0C.w		; 6D 0C CF ; Add $CF0C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	ora $0001.w		; 0D 01 00 ; Logical OR $0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0478.w		; 0C 78 04 ; Test and set bits $0478.w [Reads: Accumulator] [Flags: Z]
	cmp $000001.l		; CF 01 00 00 ; Compare accumulator (long) $000001.l [Reads: Accumulator] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0002.w,X		; 1E 02 00 ; Arithmetic shift left $0002.w,X [Reads: X Index] [Flags: NCZ]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	cpy $0406.w		; CC 06 04 ; Compare $0406.w with Y register [Reads: Y Index] [Flags: NCZ]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	cop $5C.b		; 02 5C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $B8.b		; 06 B8 ; Arithmetic shift left $B8.b [Reads: Direct Page] [Flags: NCZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: NCZ]
	tsb $0C98.w		; 0C 98 0C ; Test and set bits $0C98.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0C28.w		; 0C 28 0C ; Test and set bits $0C28.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: NCZ]
	asl $58.b		; 06 58 ; Arithmetic shift left $58.b [Reads: Direct Page] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc [$00.b]		; 67 00 ; Add with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($B7.b,X)		; 01 B7 ; Logical OR ($B7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $58.b		; 02 58 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B8.b		; 02 B8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $B7.b		; 02 B7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($F7.b,X)		; 01 F7 ; Logical OR ($F7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $58.b		; 02 58 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E7.b,S		; 03 E7 ; OR accumulator with stack relative $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $37.b		; 02 37 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $87.b		; 02 87 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $D8.b		; 06 D8 ; Arithmetic shift left $D8.b [Reads: Direct Page] [Flags: NCZ]
	asl $0628.w		; 0E 28 06 ; Arithmetic shift left $0628.w [Flags: NCZ]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B8.b		; 02 B8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0257.w		; 0D 57 02 ; Logical OR $0257.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cop $A7.b		; 02 A7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	ora ($A8.b,X)		; 01 A8 ; Logical OR ($A8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$48.b]		; 07 48 ; OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $A8.b		; 02 A8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $B7.b		; 04 B7 ; Test and set bits $B7.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	rep #$06		; C2 06 ; Reset processor status bits #$06 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	eor $5900.w		; 4D 00 59 ; Exclusive OR $5900.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$74.b]		; 07 74 ; OR accumulator with memory (long) [$74.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $7200.w		; 6E 00 72 ; Rotate right $7200.w [Flags: NCZ]
	ora $044D.w		; 0D 4D 04 ; Logical OR $044D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($0B.b)		; 72 0B ; Add with carry (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldx $E801.w,Y		; BE 01 E8 ; Load X register $E801.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($B8.b,X)		; 01 B8 ; Logical OR ($B8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$C8.b]		; 07 C8 ; OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $50, $0F		; 50 0F ; Branch if overflow clear to $50, $0F [Flow: branch]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $50.b		; 06 50 ; Arithmetic shift left $50.b [Reads: Direct Page] [Flags: NCZ]
	ora $C80128.l		; 0F 28 01 C8 ; OR accumulator with memory (long) $C80128.l [Writes: Accumulator] [Flags: NZ]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($68.b,X)		; 01 68 ; Logical OR ($68.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $A8.b		; 02 A8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B8.b		; 02 B8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $48.b		; 05 48 ; Logical OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0DB8.w		; 0D B8 0D ; Logical OR $0DB8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tsb $05A8.w		; 0C A8 05 ; Test and set bits $05A8.w [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $18.b		; 05 18 ; Logical OR $18.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0D78.w		; 0D 78 0D ; Logical OR $0D78.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0D18.w		; 0D 18 0D ; Logical OR $0D18.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $0CB8.w		; 0C B8 0C ; Test and set bits $0CB8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $0DC8.w		; 0D C8 0D ; Logical OR $0DC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $0748.w		; 0D 48 07 ; Logical OR $0748.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora [$C8.b]		; 07 C8 ; OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$78.b]		; 07 78 ; OR accumulator with memory (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$50.b]		; 07 50 ; OR accumulator with memory (long) [$50.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $E80128.l		; 0F 28 01 E8 ; OR accumulator with memory (long) $E80128.l [Writes: Accumulator] [Flags: NZ]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $98.b		; 02 98 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tsb $05B8.w		; 0C B8 05 ; Test and set bits $05B8.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	ora [$88.b]		; 07 88 ; OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $E801F8.l		; 0F F8 01 E8 ; OR accumulator with memory (long) $E801F8.l [Writes: Accumulator] [Flags: NZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $F8.b		; 06 F8 ; Arithmetic shift left $F8.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0CC8.w		; 0D C8 0C ; Logical OR $0CC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($07.b,S),Y		; F3 07 ; Subtract with carry (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E602.w		; CD 02 E6 ; Compare $E602.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $0CDF09.l		; 4F 09 DF 0C ; Exclusive OR accumulator with memory (long) $0CDF09.l [Writes: Accumulator] [Flags: NZ]
	eor ($05.b),Y		; 51 05 ; Exclusive OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($830E.w,X)		; 7C 0E 83 ; Jump indirect indexed to ($830E.w,X) [Reads: X Index] [Flow: jump]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $30.b		; 04 30 ; Test and set bits $30.b [Reads: Accumulator] [Flags: Z]
	ora ($D1.b,X)		; 01 D1 ; Logical OR ($D1.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04FE.w		; 0C FE 04 ; Test and set bits $04FE.w [Reads: Accumulator] [Flags: Z]
	eor $02.b,X		; 55 02 ; Exclusive OR accumulator with memory $02.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	stz $8002.w,X		; 9E 02 80 ; Store zero to $8002.w,X [Reads: X Index]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $6D04.w		; 6D 04 6D ; Add $6D04.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: NCZ]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: NCZ]
	cop $6D.b		; 02 6D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $D3.b		; 06 D3 ; Arithmetic shift left $D3.b [Reads: Direct Page] [Flags: NCZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $6D.b,S		; 03 6D ; OR accumulator with stack relative $6D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $C3.b		; 06 C3 ; Arithmetic shift left $C3.b [Reads: Direct Page] [Flags: NCZ]
	tsb $0CB7.w		; 0C B7 0C ; Test and set bits $0CB7.w [Reads: Accumulator] [Flags: Z]
	lda ($0C.b,S),Y		; B3 0C ; Load accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $B90C.w		; 6D 0C B9 ; Add $B90C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	asl $73.b		; 06 73 ; Arithmetic shift left $73.b [Reads: Direct Page] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $0B.b,X		; 74 0B ; Store zero to $0B.b,X [Reads: X Index]
	sbc [$08.b]		; E7 08 ; Subtract with carry (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $00, $53		; 82 00 53 ; Branch always long to $82, $00, $53 [Flow: branch]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($72.b,X)		; 01 72 ; Logical OR ($72.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D2.b,X)		; 01 D2 ; Logical OR ($D2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $77.b		; 02 77 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $D3.b		; 02 D3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($72.b,X)		; 01 72 ; Logical OR ($72.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($33.b,X)		; 01 33 ; Logical OR ($33.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $D2.b		; 02 D2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $77.b		; 02 77 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($52.b,X)		; 01 52 ; Logical OR ($52.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $73.b		; 02 73 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A2.b		; 02 A2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: NCZ]
	asl $066D.w		; 0E 6D 06 ; Arithmetic shift left $066D.w [Flags: NCZ]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: NZ]
	ora ($02.b,S),Y		; 13 02 ; OR accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($02.b,S),Y		; 53 02 ; XOR accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $02.b,S		; 63 02 ; Add with carry (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($00.b,S),Y		; D3 00 ; Compare accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	cmp [$0D.b],Y		; D7 0D ; Compare accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc ($02.b)		; 72 02 ; Add with carry (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and ($02.b,S),Y		; 33 02 ; AND accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $9303.w		; 8D 03 93 ; Store accumulator to $9303.w [Reads: Accumulator]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $47.b		; 06 47 ; Arithmetic shift left $47.b [Reads: Direct Page] [Flags: NCZ]
	ora ($C7.b,X)		; 01 C7 ; Logical OR ($C7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$63.b]		; 07 63 ; OR accumulator with memory (long) [$63.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$6F.b]		; 07 6F ; OR accumulator with memory (long) [$6F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $D2.b		; 04 D2 ; Test and set bits $D2.b [Reads: Accumulator] [Flags: Z]
	asl $12.b		; 06 12 ; Arithmetic shift left $12.b [Reads: Direct Page] [Flags: NCZ]
	ora ($6F.b,X)		; 01 6F ; Logical OR ($6F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $06E108.l		; AF 08 E1 06 ; Load long $06E108.l into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $7800.w		; 6D 00 78 ; Add $7800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	eor ($07.b),Y		; 51 07 ; Exclusive OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta $8D00.w		; 8D 00 8D ; Store accumulator to $8D00.w [Reads: Accumulator]
	ora $046D.w		; 0D 6D 04 ; Logical OR $046D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $D90B.w		; 8D 0B D9 ; Store accumulator to $D90B.w [Reads: Accumulator]
	ora ($9D.b,X)		; 01 9D ; Logical OR ($9D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8F.b,X)		; 01 8F ; Logical OR ($8F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $9D.b,S		; 03 9D ; OR accumulator with stack relative $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $07.b,S		; 63 07 ; Add with carry (stack relative) $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and ($07.b,S),Y		; 33 07 ; AND accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($08.b,S),Y		; D3 08 ; Compare accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	eor [$0F.b],Y		; 57 0F ; Exclusive OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$07.b],Y		; F7 07 ; Subtract with carry (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $8305.w		; 8D 05 83 ; Store accumulator to $8305.w [Reads: Accumulator]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	ora $CF0133.l		; 0F 33 01 CF ; OR accumulator with memory (long) $CF0133.l [Writes: Accumulator] [Flags: NZ]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6F.b,X)		; 01 6F ; Logical OR ($6F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $AF.b		; 02 AF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $8D.b		; 02 8D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($8D.b,X)		; 01 8D ; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $13.b		; 02 13 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $53.b		; 05 53 ; Logical OR $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $7D.b		; 05 7D ; Logical OR $7D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0D7D.w		; 0D 7D 0D ; Logical OR $0D7D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0C.b,S		; C3 0C ; Compare accumulator (stack relative) $0C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $8D05.w		; 8D 05 8D ; Store accumulator to $8D05.w [Reads: Accumulator]
	ora $23.b		; 05 23 ; Logical OR $23.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0D7D.w		; 0D 7D 0D ; Logical OR $0D7D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $0D.b,S		; 23 0D ; AND accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $0D.b,S		; 23 0D ; AND accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($0C.b,S),Y		; D3 0C ; Compare accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $0C.b,S		; C3 0C ; Compare accumulator (stack relative) $0C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	adc $7D0D.w,X		; 7D 0D 7D ; Add $7D0D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0D7D.w		; 0D 7D 0D ; Logical OR $0D7D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($07.b,S),Y		; 53 07 ; XOR accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($07.b,S),Y		; D3 07 ; Compare accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($07.b,S),Y		; D3 07 ; Compare accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $0F5B07.l,X		; 7F 07 5B 0F ; Add long $0F5B07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($01.b,S),Y		; 33 01 ; AND accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $024F00.l		; EF 00 4F 02 ; Subtract with carry (long) $024F00.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $00A302.l		; EF 02 A3 00 ; Subtract with carry (long) $00A302.l [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $0C.b,S		; C3 0C ; Compare accumulator (stack relative) $0C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $7F05.w		; 8D 05 7F ; Store accumulator to $7F05.w [Reads: Accumulator]
	asl $33.b		; 06 33 ; Arithmetic shift left $33.b [Reads: Direct Page] [Flags: NCZ]
	ora [$93.b]		; 07 93 ; OR accumulator with memory (long) [$93.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($08.b,S),Y		; D3 08 ; Compare accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	ora ($0F.b,S),Y		; 13 0F ; OR accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $06F302.l		; EF 02 F3 06 ; Subtract with carry (long) $06F302.l [Writes: Accumulator] [Flags: NCVZ]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($0A.b,S),Y		; B3 0A ; Load accumulator (stack relative indirect indexed) ($0A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $0D5300.l,X		; BF 00 53 0D ; Load long $0D5300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($0C.b,S),Y		; D3 0C ; Compare accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda $07FE08.l,X		; BF 08 FE 07 ; Load long $07FE08.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $09.b,X		; 56 09 ; Logical shift right $09.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	nop		; EA ; No operation
	tsb $055C.w		; 0C 5C 05 ; Test and set bits $055C.w [Reads: Accumulator] [Flags: Z]
	sta $0E.b,S		; 83 0E ; Store accumulator (stack relative) $0E.b,S [Reads: Stack Pointer, Accumulator]
	stx $8400.w		; 8E 00 84 ; Store X register to $8400.w [Reads: X Index]
	tsb $37.b		; 04 37 ; Test and set bits $37.b [Reads: Accumulator] [Flags: Z]
	ora ($DC.b,X)		; 01 DC ; Logical OR ($DC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $0505.w		; 0C 05 05 ; Test and set bits $0505.w [Reads: Accumulator] [Flags: Z]
	jmp $008302.l		; 5C 02 83 00 ; Jump long to $008302.l [Flow: jump]
	sta $A101.w		; 8D 01 A1 ; Store accumulator to $A101.w [Reads: Accumulator]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0000.w		; 0E 00 00 ; Arithmetic shift left $0000.w [Flags: NCZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $000C.w,X		; FE 0C 00 ; Increment memory $000C.w,X [Reads: X Index] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $0000.w		; F4 00 00 ; Push absolute address $0000.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0202.w,X		; FE 02 02 ; Increment memory $0202.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $00F8.w,X		; FE F8 00 ; Increment memory $00F8.w,X [Reads: X Index] [Flags: NZ]
	jsr ($FAFA.w,X)		; FC FA FA ; Jump to subroutine indirect indexed ($FAFA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $0EFD.w,X		; FE FD 0E ; Increment memory $0EFD.w,X [Reads: X Index] [Flags: NZ]
	inc $00FE.w,X		; FE FE 00 ; Increment memory $00FE.w,X [Reads: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0AFC.w,X)		; FC FC 0A ; Jump to subroutine indirect indexed ($0AFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FAFA.w,X		; FE FA FA ; Increment memory $FAFA.w,X [Reads: X Index] [Flags: NZ]
	asl $FEFE.w		; 0E FE FE ; Arithmetic shift left $FEFE.w [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pea $00F2.w		; F4 F2 00 ; Push absolute address $00F2.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FAFA.w		; 0C FA FA ; Test and set bits $FAFA.w [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	asl $FCFA.w		; 0E FA FC ; Arithmetic shift left $FCFA.w [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $0AFA.w,X		; FE FA 0A ; Increment memory $0AFA.w,X [Reads: X Index] [Flags: NZ]
	inc $F5FF.w,X		; FE FF F5 ; Increment memory $F5FF.w,X [Reads: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0103.w,Y		; F9 03 01 ; Subtract with carry $0103.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08F906.l,X		; FF 06 F9 08 ; Subtract with carry (long,X) $08F906.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $D405.w		; CC 05 D4 ; Compare $D405.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $B6.b		; 05 B6 ; Logical OR $B6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stx $0B.b		; 86 0B ; Store X register to $0B.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($BE.b,X)		; 81 BE ; Store accumulator ($BE.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta [$58.b]		; 87 58 ; Store accumulator (long) [$58.b] [Reads: Direct Page, Accumulator]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $00, $00		; 82 00 00 ; Branch always long to $82, $00, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $1B.b		; [PATTERN: Memory clearing operation] 64 1B ; Store zero to $1B.b
	stz $0458.w		; 9C 58 04 ; Store zero to $0458.w
.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040C.w		; 8D 0C 04 ; Store accumulator to $040C.w [Reads: Accumulator]
	stz $04AC.w		; 9C AC 04 ; Store zero to $04AC.w
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0104.w		; C9 04 01 ; Compare #$0104.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$0180.w		; C9 80 01 ; Compare #$0180.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	jsr $E5D4.w		; 20 D4 E5 ; Jump to subroutine at $E5D4.w [Writes: Stack Pointer] [Flow: call]
	jmp $E58A.w		; 4C 8A E5 ; Jump to $E58A.w [Flow: jump]
	ldx #$9E.b		; A2 9E ; Load #$9E.b into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $DD8A.w,X		; DD 8A DD ; Compare accumulator $DD8A.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	lda $DF15.w,X		; BD 15 DF ; Load $DF15.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $DFB3.w,X		; BD B3 DF ; Load $DFB3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E051.w,X		; BD 51 E0 ; Load $E051.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $E0EF.w,X		; BD EF E0 ; Load $E0EF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $DE77.w,X		; BD 77 DE ; Load $DE77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $E18D.w,X		; BD 8D E1 ; Load $E18D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $E22B.w,X		; BD 2B E2 ; Load $E22B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	lda $E367.w,X		; BD 67 E3 ; Load $E367.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0696.w		; 8D 96 06 ; Store accumulator to $0696.w [Reads: Accumulator]
	lda $E405.w,X		; BD 05 E4 ; Load $E405.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0698.w		; 8D 98 06 ; Store accumulator to $0698.w [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $DE28.w,X		; [PATTERN: Memory clearing operation] BD 28 DE ; Load $DE28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	sta $040A.w		; 8D 0A 04 ; Store accumulator to $040A.w [Reads: Accumulator]
	stz $8B.b		; 64 8B ; Store zero to $8B.b
	stz $040B.w		; 9C 0B 04 ; Store zero to $040B.w
	lda $E2C9.w,X		; BD C9 E2 ; Load $E2C9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0624.w		; 8D 24 06 ; Store accumulator to $0624.w [Reads: Accumulator]
	stz $0625.w		; 9C 25 06 ; Store zero to $0625.w
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	dec $0625.w		; CE 25 06 ; Decrement $0625.w [Flags: NZ]
	lda $E318.w,X		; BD 18 E3 ; Load $E318.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0628.w		; 8D 28 06 ; Store accumulator to $0628.w [Reads: Accumulator]
	stz $0629.w		; 9C 29 06 ; Store zero to $0629.w
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	dec $0629.w		; CE 29 06 ; Decrement $0629.w [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0624.w		; ED 24 06 ; Subtract $0624.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0626.w		; 8D 26 06 ; Store accumulator to $0626.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0628.w		; ED 28 06 ; Subtract $0628.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $062A.w		; 8D 2A 06 ; Store accumulator to $062A.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$FFF8.w		; A9 F8 FF ; Load #$FFF8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EC.b		; 85 EC ; Store accumulator to $EC.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $AB08.w		; 20 08 AB ; Jump to subroutine at $AB08.w [Writes: Stack Pointer] [Flow: call]
	lda #$E4.b		; A9 E4 ; Load #$E4.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0716.w		; 8D 16 07 ; Store accumulator to $0716.w [Reads: Accumulator]
	stz $0713.w		; 9C 13 07 ; Store zero to $0713.w
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $0712.w		; AD 12 07 ; Load $0712.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsr $C0C3.w		; 20 C3 C0 ; Jump to subroutine at $C0C3.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $A9.b		; 64 A9 ; Store zero to $A9.b
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $42.b		; 85 42 ; Store accumulator to $42.b [Reads: Accumulator]
	sta $43.b		; 85 43 ; Store accumulator to $43.b [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7EC140.l		; AF 40 C1 7E ; Load long $7EC140.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040A.w		; 8D 0A 04 ; Store accumulator to $040A.w [Reads: Accumulator]
	lda $7EC142.l		; AF 42 C1 7E ; Load long $7EC142.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda $7EC144.l		; AF 44 C1 7E ; Load long $7EC144.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $7EC146.l		; AF 46 C1 7E ; Load long $7EC146.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $7EC14A.l		; AF 4A C1 7E ; Load long $7EC14A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $7EC148.l		; AF 48 C1 7E ; Load long $7EC148.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0124.w		; C9 24 01 ; Compare #$0124.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	lda $0696.w		; AD 96 06 ; Load $0696.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	stz $2F.b		; 64 2F ; Store zero to $2F.b
	lda $7EC14C.l		; AF 4C C1 7E ; Load long $7EC14C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	lda $7EC14E.l		; AF 4E C1 7E ; Load long $7EC14E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $7EC150.l		; AF 50 C1 7E ; Load long $7EC150.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $7EC152.l		; AF 52 C1 7E ; Load long $7EC152.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	lda $7EC154.l		; AF 54 C1 7E ; Load long $7EC154.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0600.w		; 8D 00 06 ; Store accumulator to $0600.w [Reads: Accumulator]
	lda $7EC156.l		; AF 56 C1 7E ; Load long $7EC156.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0602.w		; 8D 02 06 ; Store accumulator to $0602.w [Reads: Accumulator]
	lda $7EC158.l		; AF 58 C1 7E ; Load long $7EC158.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	lda $7EC15A.l		; AF 5A C1 7E ; Load long $7EC15A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0606.w		; 8D 06 06 ; Store accumulator to $0606.w [Reads: Accumulator]
	lda $7EC15C.l		; AF 5C C1 7E ; Load long $7EC15C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0610.w		; 8D 10 06 ; Store accumulator to $0610.w [Reads: Accumulator]
	lda $7EC15E.l		; AF 5E C1 7E ; Load long $7EC15E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0612.w		; 8D 12 06 ; Store accumulator to $0612.w [Reads: Accumulator]
	lda $7EC160.l		; AF 60 C1 7E ; Load long $7EC160.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0614.w		; 8D 14 06 ; Store accumulator to $0614.w [Reads: Accumulator]
	lda $7EC162.l		; AF 62 C1 7E ; Load long $7EC162.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0616.w		; 8D 16 06 ; Store accumulator to $0616.w [Reads: Accumulator]
	lda $7EC16A.l		; AF 6A C1 7E ; Load long $7EC16A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0624.w		; 8D 24 06 ; Store accumulator to $0624.w [Reads: Accumulator]
	lda $7EC16C.l		; AF 6C C1 7E ; Load long $7EC16C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0626.w		; 8D 26 06 ; Store accumulator to $0626.w [Reads: Accumulator]
	lda $7EC16E.l		; AF 6E C1 7E ; Load long $7EC16E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0628.w		; 8D 28 06 ; Store accumulator to $0628.w [Reads: Accumulator]
	lda $7EC170.l		; AF 70 C1 7E ; Load long $7EC170.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $062A.w		; 8D 2A 06 ; Store accumulator to $062A.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $7EC164.l		; AF 64 C1 7E ; Load long $7EC164.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA0.w		; 8D A0 0A ; Store accumulator to $0AA0.w [Reads: Accumulator]
	lda $7EC165.l		; AF 65 C1 7E ; Load long $7EC165.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda $7EC166.l		; AF 66 C1 7E ; Load long $7EC166.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	lda $7EC167.l		; AF 67 C1 7E ; Load long $7EC167.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2001.w		; 20 01 20 ; Jump to subroutine at $2001.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $20FF.w		; 20 FF 20 ; Jump to subroutine at $20FF.w [Writes: Stack Pointer] [Flow: call]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $200120.l,X		; FF 20 01 20 ; Subtract with carry (long,X) $200120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $000100.l,X		; FF 00 01 00 ; Subtract with carry (long,X) $000100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$0B00.w		; 09 00 0B ; Logical OR #$0B00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$0B00.w		; 09 00 0B ; Logical OR #$0B00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $20FF.w		; 20 FF 20 ; Jump to subroutine at $20FF.w [Writes: Stack Pointer] [Flow: call]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000400.l,X		; FF 00 04 00 ; Subtract with carry (long,X) $000400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $20FF20.l,X		; FF 20 FF 20 ; Subtract with carry (long,X) $20FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000400.l,X		; FF 00 04 00 ; Subtract with carry (long,X) $000400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$0B00.w		; 09 00 0B ; Logical OR #$0B00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0E0C.w		; 0C 0C 0E ; Test and set bits $0E0C.w [Reads: Accumulator] [Flags: Z]
	asl $100E.w		; 0E 0E 10 ; Arithmetic shift left $100E.w [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	asl $1010.w		; 0E 10 10 ; Arithmetic shift left $1010.w [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: NZ]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: NZ]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: NZ]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $AC9C.w		; 20 9C AC ; Jump to subroutine at $AC9C.w [Writes: Stack Pointer] [Flow: call]
	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $8F.b		; 04 8F ; Test and set bits $8F.b [Reads: Accumulator] [Flags: Z]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $1CA5.w,X		; 7E A5 1C ; Rotate right $1CA5.w,X [Reads: X Index] [Flags: NCZ]
	sta $7EC102.l		; 8F 02 C1 7E ; Store accumulator (long) $7EC102.l [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC104.l		; 8F 04 C1 7E ; Store accumulator (long) $7EC104.l [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC106.l		; 8F 06 C1 7E ; Store accumulator (long) $7EC106.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC108.l		; 8F 08 C1 7E ; Store accumulator (long) $7EC108.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC10A.l		; 8F 0A C1 7E ; Store accumulator (long) $7EC10A.l [Reads: Accumulator]
	lda $0618.w		; AD 18 06 ; Load $0618.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC110.l		; 8F 10 C1 7E ; Store accumulator (long) $7EC110.l [Reads: Accumulator]
	lda $061C.w		; AD 1C 06 ; Load $061C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC112.l		; 8F 12 C1 7E ; Store accumulator (long) $7EC112.l [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC10C.l		; 8F 0C C1 7E ; Store accumulator (long) $7EC10C.l [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC10E.l		; 8F 0E C1 7E ; Store accumulator (long) $7EC10E.l [Reads: Accumulator]
	lda $0600.w		; AD 00 06 ; Load $0600.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC114.l		; 8F 14 C1 7E ; Store accumulator (long) $7EC114.l [Reads: Accumulator]
	lda $0602.w		; AD 02 06 ; Load $0602.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC116.l		; 8F 16 C1 7E ; Store accumulator (long) $7EC116.l [Reads: Accumulator]
	lda $0604.w		; AD 04 06 ; Load $0604.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC118.l		; 8F 18 C1 7E ; Store accumulator (long) $7EC118.l [Reads: Accumulator]
	lda $0606.w		; AD 06 06 ; Load $0606.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC11A.l		; 8F 1A C1 7E ; Store accumulator (long) $7EC11A.l [Reads: Accumulator]
	lda $0610.w		; AD 10 06 ; Load $0610.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC11C.l		; 8F 1C C1 7E ; Store accumulator (long) $7EC11C.l [Reads: Accumulator]
	lda $0612.w		; AD 12 06 ; Load $0612.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC11E.l		; 8F 1E C1 7E ; Store accumulator (long) $7EC11E.l [Reads: Accumulator]
	lda $0614.w		; AD 14 06 ; Load $0614.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC120.l		; 8F 20 C1 7E ; Store accumulator (long) $7EC120.l [Reads: Accumulator]
	lda $0616.w		; AD 16 06 ; Load $0616.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC122.l		; 8F 22 C1 7E ; Store accumulator (long) $7EC122.l [Reads: Accumulator]
	lda $0624.w		; AD 24 06 ; Load $0624.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC12A.l		; 8F 2A C1 7E ; Store accumulator (long) $7EC12A.l [Reads: Accumulator]
	lda $0626.w		; AD 26 06 ; Load $0626.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC12C.l		; 8F 2C C1 7E ; Store accumulator (long) $7EC12C.l [Reads: Accumulator]
	lda $0628.w		; AD 28 06 ; Load $0628.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC12E.l		; 8F 2E C1 7E ; Store accumulator (long) $7EC12E.l [Reads: Accumulator]
	lda $062A.w		; AD 2A 06 ; Load $062A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC130.l		; 8F 30 C1 7E ; Store accumulator (long) $7EC130.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0AA0.w		; AD A0 0A ; Load $0AA0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC124.l		; 8F 24 C1 7E ; Store accumulator (long) $7EC124.l [Reads: Accumulator]
	lda $0AA1.w		; AD A1 0A ; Load $0AA1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC125.l		; 8F 25 C1 7E ; Store accumulator (long) $7EC125.l [Reads: Accumulator]
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC126.l		; 8F 26 C1 7E ; Store accumulator (long) $7EC126.l [Reads: Accumulator]
	lda $0AA3.w		; AD A3 0A ; Load $0AA3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC127.l		; 8F 27 C1 7E ; Store accumulator (long) $7EC127.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $E4A3.w		; 20 A3 E4 ; Jump to subroutine at $E4A3.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$1010.w		; C9 10 10 ; Compare #$1010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0182.w		; A9 82 01 ; Load #$0182.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02E801.l,X		; BF 01 E8 02 ; Load long $02E801.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	stz $0412.w		; 9C 12 04 ; Store zero to $0412.w
	lda $02E811.l,X		; BF 11 E8 02 ; Load long $02E811.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda $02E821.l,X		; BF 21 E8 02 ; Load long $02E821.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $02E841.l,X		; BF 41 E8 02 ; Load long $02E841.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02E831.l,X		; BF 31 E8 02 ; Load long $02E831.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$03F0.w		; A9 F0 03 ; Load #$03F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02E6E1.l,X		; BF E1 E6 02 ; Load long $02E6E1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0708.w		; 8D 08 07 ; Store accumulator to $0708.w [Reads: Accumulator]
	lda $02E7E1.l,X		; BF E1 E7 02 ; Load long $02E7E1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $070C.w		; 8D 0C 07 ; Store accumulator to $070C.w [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $070A.w		; 8D 0A 07 ; Store accumulator to $070A.w [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $070E.w		; 8D 0E 07 ; Store accumulator to $070E.w [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.INDEX 8
	sep #$10		; E2 10
	lda $E6E1.w,Y		; B9 E1 E6 ; Load $E6E1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0600.w		; 8D 00 06 ; Store accumulator to $0600.w [Reads: Accumulator]
	lda $E701.w,Y		; B9 01 E7 ; Load $E701.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0602.w		; 8D 02 06 ; Store accumulator to $0602.w [Reads: Accumulator]
	lda $E721.w,Y		; B9 21 E7 ; Load $E721.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	lda $E741.w,Y		; B9 41 E7 ; Load $E741.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0606.w		; 8D 06 06 ; Store accumulator to $0606.w [Reads: Accumulator]
	lda $E761.w,Y		; B9 61 E7 ; Load $E761.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0610.w		; 8D 10 06 ; Store accumulator to $0610.w [Reads: Accumulator]
	lda $E7A1.w,Y		; B9 A1 E7 ; Load $E7A1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0612.w		; 8D 12 06 ; Store accumulator to $0612.w [Reads: Accumulator]
	lda $E781.w,Y		; B9 81 E7 ; Load $E781.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0614.w		; 8D 14 06 ; Store accumulator to $0614.w [Reads: Accumulator]
	lda $E7C1.w,Y		; B9 C1 E7 ; Load $E7C1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0616.w		; 8D 16 06 ; Store accumulator to $0616.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $0ED61D.l		; 22 1D D6 0E ; Jump to subroutine long $0ED61D.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	stz $04AC.w		; 9C AC 04 ; Store zero to $04AC.w
	lda $7EC100.l		; AF 00 C1 7E ; Load long $7EC100.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $040A.w		; 8D 0A 04 ; Store accumulator to $040A.w [Reads: Accumulator]
	lda $7EC102.l		; AF 02 C1 7E ; Load long $7EC102.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda $7EC104.l		; AF 04 C1 7E ; Load long $7EC104.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $7EC106.l		; AF 06 C1 7E ; Load long $7EC106.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $7EC108.l		; AF 08 C1 7E ; Load long $7EC108.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $7EC10A.l		; AF 0A C1 7E ; Load long $7EC10A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $7EC10C.l		; AF 0C C1 7E ; Load long $7EC10C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	lda $7EC10E.l		; AF 0E C1 7E ; Load long $7EC10E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $7EC110.l		; AF 10 C1 7E ; Load long $7EC110.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $7EC112.l		; AF 12 C1 7E ; Load long $7EC112.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	lda $7EC114.l		; AF 14 C1 7E ; Load long $7EC114.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0600.w		; 8D 00 06 ; Store accumulator to $0600.w [Reads: Accumulator]
	lda $7EC116.l		; AF 16 C1 7E ; Load long $7EC116.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0602.w		; 8D 02 06 ; Store accumulator to $0602.w [Reads: Accumulator]
	lda $7EC118.l		; AF 18 C1 7E ; Load long $7EC118.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	lda $7EC11A.l		; AF 1A C1 7E ; Load long $7EC11A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0606.w		; 8D 06 06 ; Store accumulator to $0606.w [Reads: Accumulator]
	lda $7EC11C.l		; AF 1C C1 7E ; Load long $7EC11C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0610.w		; 8D 10 06 ; Store accumulator to $0610.w [Reads: Accumulator]
	lda $7EC11E.l		; AF 1E C1 7E ; Load long $7EC11E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0612.w		; 8D 12 06 ; Store accumulator to $0612.w [Reads: Accumulator]
	lda $7EC120.l		; AF 20 C1 7E ; Load long $7EC120.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0614.w		; 8D 14 06 ; Store accumulator to $0614.w [Reads: Accumulator]
	lda $7EC122.l		; AF 22 C1 7E ; Load long $7EC122.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0616.w		; 8D 16 06 ; Store accumulator to $0616.w [Reads: Accumulator]
	lda $7EC12A.l		; AF 2A C1 7E ; Load long $7EC12A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0624.w		; 8D 24 06 ; Store accumulator to $0624.w [Reads: Accumulator]
	lda $7EC12C.l		; AF 2C C1 7E ; Load long $7EC12C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0626.w		; 8D 26 06 ; Store accumulator to $0626.w [Reads: Accumulator]
	lda $7EC12E.l		; AF 2E C1 7E ; Load long $7EC12E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0628.w		; 8D 28 06 ; Store accumulator to $0628.w [Reads: Accumulator]
	lda $7EC130.l		; AF 30 C1 7E ; Load long $7EC130.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $062A.w		; 8D 2A 06 ; Store accumulator to $062A.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $7EC124.l		; AF 24 C1 7E ; Load long $7EC124.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA0.w		; 8D A0 0A ; Store accumulator to $0AA0.w [Reads: Accumulator]
	lda $7EC125.l		; AF 25 C1 7E ; Load long $7EC125.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA1.w		; 8D A1 0A ; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda $7EC126.l		; AF 26 C1 7E ; Load long $7EC126.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA2.w		; 8D A2 0A ; Store accumulator to $0AA2.w [Reads: Accumulator]
	lda $7EC127.l		; AF 27 C1 7E ; Load long $7EC127.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA3.w		; 8D A3 0A ; Store accumulator to $0AA3.w [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EFD40.l,X		; BF 40 FD 7E ; Load long $7EFD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED61D.l		; 22 1D D6 0E ; Jump to subroutine long $0ED61D.l [Writes: Stack Pointer] [Flow: call]
	stz $A9.b		; 64 A9 ; Store zero to $A9.b
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $AA.b		; 85 AA ; Store accumulator to $AA.b [Reads: Accumulator]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	sta $A7.b		; 85 A7 ; Store accumulator to $A7.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $42.b		; 85 42 ; Store accumulator to $42.b [Reads: Accumulator]
	sta $43.b		; 85 43 ; Store accumulator to $43.b [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	jsr $AB08.w		; 20 08 AB ; Jump to subroutine at $AB08.w [Writes: Stack Pointer] [Flow: call]
	lda #$E4.b		; A9 E4 ; Load #$E4.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0716.w		; 8D 16 07 ; Store accumulator to $0716.w [Reads: Accumulator]
	stz $0713.w		; 9C 13 07 ; Store zero to $0713.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $88.b,X		; 16 88 ; Arithmetic shift left $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $98.b		; 05 98 ; Logical OR $98.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$80.b]		; 07 80 ; OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $1006.w,X		; 9E 06 10 ; Store zero to $1006.w,X [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol NMITIMEN.w		; 2E 00 42 ; Rotate left NMITIMEN.w [Flags: NCZ]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $12.b		; 06 12 ; Arithmetic shift left $12.b [Reads: Direct Page] [Flags: NCZ]
	ora ($9E.b,X)		; 01 9E ; Logical OR ($9E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $8E.b		; 05 8E ; Logical OR $8E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $CA.b		; 02 CA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $16.b		; 02 16 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $59.b		; 05 59 ; Logical OR $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$B9.b]		; 07 B9 ; OR accumulator with memory (long) [$B9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $DF0F.w,X		; 1E 0F DF ; Arithmetic shift left $DF0F.w,X [Reads: X Index] [Flags: NCZ]
	asl $0F05.w		; 0E 05 0F ; Arithmetic shift left $0F05.w [Flags: NCZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0E.b		; 46 0E ; Logical shift right $0E.b [Reads: Direct Page] [Flags: NCZ]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $BA.b		; 04 BA ; Test and set bits $BA.b [Reads: Accumulator] [Flags: Z]
	tsb $049A.w		; 0C 9A 04 ; Test and set bits $049A.w [Reads: Accumulator] [Flags: Z]
	lsr $0E.b,X		; 56 0E ; Logical shift right $0E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $56.b		; 04 56 ; Test and set bits $56.b [Reads: Accumulator] [Flags: Z]
	asl $060E.w		; 0E 0E 06 ; Arithmetic shift left $060E.w [Flags: NCZ]
	lsr $7E0C.w		; 4E 0C 7E ; Logical shift right $7E0C.w [Flags: NCZ]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($06.b)		; F2 06 ; Subtract with carry (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $0E.b,X		; 75 0E ; Add $0E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E06.w		; 0C 06 0E ; Test and set bits $0E06.w [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	nop		; EA ; No operation
	asl $62.b		; 06 62 ; Arithmetic shift left $62.b [Reads: Direct Page] [Flags: NCZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $0A8A.w		; 0E 8A 0A ; Arithmetic shift left $0A8A.w [Flags: NCZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $B7.b		; 05 B7 ; Logical OR $B7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $670F3D.l		; 0F 3D 0F 67 ; OR accumulator with memory (long) $670F3D.l [Writes: Accumulator] [Flags: NZ]
	ora $A8065C.l		; 0F 5C 06 A8 ; OR accumulator with memory (long) $A8065C.l [Writes: Accumulator] [Flags: NZ]
	asl $0328.w		; 0E 28 03 ; Arithmetic shift left $0328.w [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $04F8.w		; 0D F8 04 ; Logical OR $04F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	asl $0488.w		; 0E 88 04 ; Arithmetic shift left $0488.w [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	asl $0678.w		; 0E 78 06 ; Arithmetic shift left $0678.w [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F3.b]		; 07 F3 ; OR accumulator with memory (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $07F0.w		; 0E F0 07 ; Arithmetic shift left $07F0.w [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	.db $70, $07		; 70 07 ; Branch if overflow set to $70, $07 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tsb $68.b		; 04 68 ; Test and set bits $68.b [Reads: Accumulator] [Flags: Z]
	asl $0B10.w		; 0E 10 0B ; Arithmetic shift left $0B10.w [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	asl $0337.w		; 0E 37 03 ; Arithmetic shift left $0337.w [Flags: NCZ]
	sta $05.b,S		; 83 05 ; Store accumulator (stack relative) $05.b,S [Reads: Stack Pointer, Accumulator]
	dec $07.b		; C6 07 ; Decrement $07.b [Reads: Direct Page] [Flags: NZ]
	rol $0B.b		; 26 0B ; Rotate left $0B.b [Reads: Direct Page] [Flags: NCZ]
	adc [$0B.b]		; 67 0B ; Add with carry (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $4C0F.w		; 8D 0F 4C ; Store accumulator to $4C0F.w [Reads: Accumulator]
	ora $6D0F72.l		; 0F 72 0F 6D ; OR accumulator with memory (long) $6D0F72.l [Writes: Accumulator] [Flags: NZ]
	asl $B3.b		; 06 B3 ; Arithmetic shift left $B3.b [Reads: Direct Page] [Flags: NCZ]
	asl $0333.w		; 0E 33 03 ; Arithmetic shift left $0333.w [Flags: NCZ]
	sta [$04.b],Y		; 97 04 ; Store accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index, Accumulator]
	and [$0D.b]		; 27 0D ; AND accumulator with memory (long) [$0D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0E.b,S		; C3 0E ; Compare accumulator (stack relative) $0E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta [$04.b],Y		; 97 04 ; Store accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $0E.b,S		; C3 0E ; Compare accumulator (stack relative) $0E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $06.b,S		; 83 06 ; Store accumulator (stack relative) $06.b,S [Reads: Stack Pointer, Accumulator]
	cmp ($0C.b,S),Y		; D3 0C ; Compare accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $BF.b		; 02 BF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and [$0F.b],Y		; 37 0F ; AND accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F00.w		; 8D 00 7F ; Store accumulator to $7F00.w [Reads: Accumulator]
	ora [$FA.b]		; 07 FA ; OR accumulator with memory (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $07F7.w		; 0E F7 07 ; Arithmetic shift left $07F7.w [Flags: NCZ]
	sta [$0C.b],Y		; 97 0C ; Store accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	asl $0B17.w		; 0E 17 0B ; Arithmetic shift left $0B17.w [Flags: NCZ]
	adc [$07.b],Y		; 77 07 ; Add with carry (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0E8504.l		; EF 04 85 0E ; Subtract with carry (long) $0E8504.l [Writes: Accumulator] [Flags: NCVZ]
	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $F70007.l,X		; FF 07 00 F7 ; Subtract with carry (long,X) $F70007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFF6.l,X		; FF F6 FF 00 ; Subtract with carry (long,X) $00FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFB.l,X		; FF FB FF 00 ; Subtract with carry (long,X) $00FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F6000A.l,X		; FF 0A 00 F6 ; Subtract with carry (long,X) $F6000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F6FFF6.l,X		; FF F6 FF F6 ; Subtract with carry (long,X) $F6FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F6FFFA.l,X		; FF FA FF F6 ; Subtract with carry (long,X) $F6FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F2FFFA.l,X		; FF FA FF F2 ; Subtract with carry (long,X) $F2FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FFF2.l,X		; FF F2 FF 02 ; Subtract with carry (long,X) $02FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8000B.l,X		; FF 0B 00 F8 ; Subtract with carry (long,X) $F8000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0006.l,X		; FF 06 00 FA ; Subtract with carry (long,X) $FA0006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $06FFFA.l,X		; FF FA FF 06 ; Subtract with carry (long,X) $06FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8B0000.l,X		; FF 00 00 8B ; Subtract with carry (long,X) $8B0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	stz $04AC.w		; 9C AC 04 ; Store zero to $04AC.w
	asl $1AF0.w		; 0E F0 1A ; Arithmetic shift left $1AF0.w [Flags: NCZ]
	ldx $1AF0.w		; AE F0 1A ; Load $1AF0.w into X register [Writes: X Index] [Flags: NZ]
	lda $EB29.w,X		; BD 29 EB ; Load $EB29.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
	lda $EB4B.w,X		; BD 4B EB ; Load $EB4B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $EB6D.w,X		; BD 6D EB ; Load $EB6D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $EB8F.w,X		; BD 8F EB ; Load $EB8F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $EBF5.w,X		; BD F5 EB ; Load $EBF5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0624.w		; 8D 24 06 ; Store accumulator to $0624.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0624.w		; ED 24 06 ; Subtract $0624.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0626.w		; 8D 26 06 ; Store accumulator to $0626.w [Reads: Accumulator]
	lda $EC17.w,X		; BD 17 EC ; Load $EC17.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0628.w		; 8D 28 06 ; Store accumulator to $0628.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0628.w		; ED 28 06 ; Subtract $0628.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $062A.w		; 8D 2A 06 ; Store accumulator to $062A.w [Reads: Accumulator]
	lda $EAE5.w,X		; BD E5 EA ; Load $EAE5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	sta $040A.w		; 8D 0A 04 ; Store accumulator to $040A.w [Reads: Accumulator]
	lda $EB07.w,X		; BD 07 EB ; Load $EB07.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $EBB1.w,X		; BD B1 EB ; Load $EBB1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0618.w		; 8D 18 06 ; Store accumulator to $0618.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061A.w		; 8D 1A 06 ; Store accumulator to $061A.w [Reads: Accumulator]
	lda $EBD3.w,X		; BD D3 EB ; Load $EBD3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $061C.w		; 8D 1C 06 ; Store accumulator to $061C.w [Reads: Accumulator]
	dec A		; [PATTERN: Memory clearing operation] 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $061E.w		; 8D 1E 06 ; Store accumulator to $061E.w [Reads: Accumulator]
	stz $0696.w		; 9C 96 06 ; Store zero to $0696.w
	stz $0698.w		; 9C 98 06 ; Store zero to $0698.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $E58B.w		; 20 8B E5 ; Jump to subroutine at $E58B.w [Writes: Stack Pointer] [Flow: call]
	jsl $09C44E.l		; 22 4E C4 09 ; Jump to subroutine long $09C44E.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C499.l		; 22 99 C4 09 ; Jump to subroutine long $09C499.l [Writes: Stack Pointer] [Flow: call]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	jsr $8B0C.w		; 20 0C 8B ; Jump to subroutine at $8B0C.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C692.w		; 20 92 C6 ; Jump to subroutine at $C692.w [Writes: Stack Pointer] [Flow: call]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EFD40.l,X		; BF 40 FD 7E ; Load long $7EFD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00FD1C.l,X		; BF 1C FD 00 ; Load long $00FD1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0ED5A8.l		; 22 A8 D5 0E ; Jump to subroutine long $0ED5A8.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED618.l		; 22 18 D6 0E ; Jump to subroutine long $0ED618.l [Writes: Stack Pointer] [Flow: call]
	jsr $C65F.w		; 20 5F C6 ; Jump to subroutine at $C65F.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $003500.l		; 0F 00 35 00 ; OR accumulator with memory (long) $003500.l [Writes: Accumulator] [Flags: NZ]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $001200.l,X		; 3F 00 12 00 ; AND accumulator with memory (long,X) $001200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $005500.l,X		; 7F 00 55 00 ; Add long $005500.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $02ECF8.l,X		; DF F8 EC 02 ; Compare accumulator (long,X) $02ECF8.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0012.w		; 69 12 00 ; Add #$0012.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $04AC.w		; 9C AC 04 ; Store zero to $04AC.w
	jmp $EC47.w		; 4C 47 EC ; Jump to $EC47.w [Flow: jump]
.ACCU 16
	rep #$20		; C2 20
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	lda #$0390.w		; A9 90 03 ; Load #$0390.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	.db $80, $37		; 80 37 ; Branch always to $80, $37 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda #$0390.w		; A9 90 03 ; Load #$0390.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $EEC5.w		; [PATTERN: Memory clearing operation] 20 C5 EE ; Jump to subroutine at $EEC5.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	stz $CA.b		; 64 CA ; Store zero to $CA.b
	stz $CC.b		; 64 CC ; Store zero to $CC.b
.ACCU 8
	sep #$20		; E2 20
	jsr $FD37.w		; 20 37 FD ; Jump to subroutine at $FD37.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	stz $13.b		; 64 13 ; Store zero to $13.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $ED59.w		; [PATTERN: Memory clearing operation] 20 59 ED ; Jump to subroutine at $ED59.w [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C1C.w		; 0C 1C 0C ; Test and set bits $0C1C.w [Reads: Accumulator] [Flags: Z]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C1C.w		; 0C 1C 0C ; Test and set bits $0C1C.w [Reads: Accumulator] [Flags: Z]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	tsb $0C18.w		; 0C 18 0C ; Test and set bits $0C18.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $0018.w		; 0C 18 00 ; Test and set bits $0018.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldx $1A.b,Y		; B6 1A ; Load X register $1A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2E0E.w		; 2E 0E 2E ; Rotate left $2E0E.w [Flags: NCZ]
	asl $0000.w		; 0E 00 00 ; Arithmetic shift left $0000.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $1A.b,Y		; B6 1A ; Load X register $1A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $1A.b,Y		; B6 1A ; Load X register $1A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2E0E.w		; 2E 0E 2E ; Rotate left $2E0E.w [Flags: NCZ]
	asl $0000.w		; 0E 00 00 ; Arithmetic shift left $0000.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $A2.b,X		; F5 A2 ; Subtract $A2.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $A900.w,X		; 1E 00 A9 ; Arithmetic shift left $A900.w,X [Reads: X Index] [Flags: NCZ]
	cpy $0D.b		; C4 0D ; Compare $0D.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E4020.l,X		; 9F 20 40 7E ; Store accumulator (long,X) $7E4020.l,X [Reads: Accumulator, X Index]
	sta $7E4020.l,X		; 9F 20 40 7E ; Store accumulator (long,X) $7E4020.l,X [Reads: Accumulator, X Index]
	sta $7E4040.l,X		; 9F 40 40 7E ; Store accumulator (long,X) $7E4040.l,X [Reads: Accumulator, X Index]
	sta $7E4060.l,X		; 9F 60 40 7E ; Store accumulator (long,X) $7E4060.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	ldx $0696.w		; AE 96 06 ; Load $0696.w into X register [Writes: X Index] [Flags: NZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E037F0.l,X		; FF F0 37 E0 ; Subtract with carry (long,X) $E037F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda #$A4.b		; A9 A4 ; Load #$A4.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $009F.w		; 0D 9F 00 ; Logical OR $009F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $227E.w		; 20 7E 22 ; Jump to subroutine at $227E.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp $A90E.w,X		; DD 0E A9 ; Compare accumulator $A90E.w,X [Reads: X Index] [Flags: NCZ]
	ldx $0D.b		; A6 0D ; Load $0D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $B4A9AA.l,X		; 1F AA A9 B4 ; Logical OR long $B4A9AA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $4022.w		; 0D 22 40 ; Logical OR $4022.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $9F0E.w,X		; DD 0E 9F ; Compare accumulator $9F0E.w,X [Reads: X Index] [Flags: NCZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $B5A9.w,X		; 7E A9 B5 ; Rotate right $B5A9.w,X [Reads: X Index] [Flags: NCZ]
	ora $029F.w		; 0D 9F 02 ; Logical OR $029F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E87E.w		; 20 7E E8 ; Jump to subroutine at $E87E.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsl $0EDD40.l		; 22 40 DD 0E ; Jump to subroutine long $0EDD40.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stz $0696.w		; 9C 96 06 ; Store zero to $0696.w
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $A6.b		; 02 A6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$33.b		; E0 33 ; Compare #$33.b with X register [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $8F.b		; 04 8F ; Test and set bits $8F.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $2FE07E.l		; 22 7E E0 2F ; Jump to subroutine long $2FE07E.l [Writes: Stack Pointer] [Flow: call]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $8F.b		; 04 8F ; Test and set bits $8F.b [Reads: Accumulator] [Flags: Z]
	lda ($2B.b)		; B2 2B ; Load accumulator (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $30E2.w,X		; 7E E2 30 ; Rotate right $30E2.w,X [Reads: X Index] [Flags: NCZ]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0EF652.l		; 22 52 F6 0E ; Jump to subroutine long $0EF652.l [Writes: Stack Pointer] [Flow: call]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02EDC5.l,X		; BF C5 ED 02 ; Load long $02EDC5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$0DB4.w		; A9 B4 0D ; Load #$0DB4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	lda #$0DB5.w		; A9 B5 0D ; Load #$0DB5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	jsr $F482.w		; 20 82 F4 ; Jump to subroutine at $F482.w [Writes: Stack Pointer] [Flow: call]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta $1100.w,X		; 9D 00 11 ; Store accumulator to $1100.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$8040.w		; A9 40 80 ; Load #$8040.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	jsr $F3B9.w		; 20 B9 F3 ; Jump to subroutine at $F3B9.w [Writes: Stack Pointer] [Flow: call]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta $1100.w,X		; 9D 00 11 ; Store accumulator to $1100.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $F54A.w		; 20 4A F5 ; Jump to subroutine at $F54A.w [Writes: Stack Pointer] [Flow: call]
	ldx #$001E.w		; A2 1E 00 ; Load #$001E.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0DC4.w		; A9 C4 0D ; Load #$0DC4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7E4000.l,X		; 9F 00 40 7E ; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E4020.l,X		; 9F 20 40 7E ; Store accumulator (long,X) $7E4020.l,X [Reads: Accumulator, X Index]
	sta $7E4040.l,X		; 9F 40 40 7E ; Store accumulator (long,X) $7E4040.l,X [Reads: Accumulator, X Index]
	sta $7E4060.l,X		; 9F 60 40 7E ; Store accumulator (long,X) $7E4060.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	jsr $EF29.w		; 20 29 EF ; Jump to subroutine at $EF29.w [Writes: Stack Pointer] [Flow: call]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$DCF2.w		; A2 F2 DC ; Load #$DCF2.w into X register [Writes: X Index] [Flags: NZ]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	.db $F0, $A2		; F0 A2 ; Branch if equal to $F0, $A2 [Flow: branch]
	sbc ($87.b)		; F2 87 ; Subtract with carry (indirect) ($87.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $A2		; F0 A2 ; Branch if equal to $F0, $A2 [Flow: branch]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($6B.b)		; F2 6B ; Subtract with carry (indirect) ($6B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $A2		; F0 A2 ; Branch if equal to $F0, $A2 [Flow: branch]
	sbc ($B7.b)		; F2 B7 ; Subtract with carry (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($85.b),Y		; F1 85 ; Subtract with carry ($85.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b),Y		; F1 A2 ; Subtract with carry ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($41.b)		; F2 41 ; Subtract with carry (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b),Y		; F1 A2 ; Subtract with carry ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($0F.b)		; F2 0F ; Subtract with carry (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($E2.b),Y		; F1 E2 ; Subtract with carry ($E2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($F00D.w,X)		; 7C 0D F0 ; Jump indirect indexed to ($F00D.w,X) [Reads: X Index] [Flow: jump]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($F01F.w,X)		; 7C 1F F0 ; Jump indirect indexed to ($F01F.w,X) [Reads: X Index] [Flow: jump]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$0F80.w		; 29 80 0F ; Logical AND #$0F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and #$003E.w		; 29 3E 00 ; Logical AND #$003E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0380.w		; 69 80 03 ; Add #$0380.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda #$001F.w		; A9 1F 00 ; Load #$001F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EF7A.w		; 20 7A EF ; Jump to subroutine at $EF7A.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0780.w		; 69 80 07 ; Add #$0780.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EF7A.w		; 20 7A EF ; Jump to subroutine at $EF7A.w [Writes: Stack Pointer] [Flow: call]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0009.w		; 69 09 00 ; Add #$0009.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0B80.w		; E9 80 0B ; Subtract #$0B80.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000E.w		; 69 0E 00 ; Add #$000E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda #$001F.w		; A9 1F 00 ; Load #$001F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EFB3.w		; 20 B3 EF ; Jump to subroutine at $EFB3.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0060.w		; E9 60 00 ; Subtract #$0060.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$001E.w		; 69 1E 00 ; Add #$001E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EFB3.w		; 20 B3 EF ; Jump to subroutine at $EFB3.w [Writes: Stack Pointer] [Flow: call]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0009.w		; 69 09 00 ; Add #$0009.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$002E.w		; E9 2E 00 ; Subtract #$002E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0700.w		; E9 00 07 ; Subtract #$0700.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC172.l		; 8F 72 C1 7E ; Store accumulator (long) $7EC172.l [Reads: Accumulator]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC174.l		; 8F 74 C1 7E ; Store accumulator (long) $7EC174.l [Reads: Accumulator]
	lda #$000A.w		; A9 0A 00 ; Load #$000A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC176.l		; 8F 76 C1 7E ; Store accumulator (long) $7EC176.l [Reads: Accumulator]
	lda #$1390.w		; A9 90 13 ; Load #$1390.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; [PATTERN: Memory clearing operation] 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	stz $86.b		; 64 86 ; Store zero to $86.b
	lda #$001F.w		; A9 1F 00 ; Load #$001F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EF7A.w		; 20 7A EF ; Jump to subroutine at $EF7A.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC172.l		; 8F 72 C1 7E ; Store accumulator (long) $7EC172.l [Reads: Accumulator]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC174.l		; 8F 74 C1 7E ; Store accumulator (long) $7EC174.l [Reads: Accumulator]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC176.l		; 8F 76 C1 7E ; Store accumulator (long) $7EC176.l [Reads: Accumulator]
	lda #$0790.w		; A9 90 07 ; Load #$0790.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; [PATTERN: Memory clearing operation] 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	stz $86.b		; 64 86 ; Store zero to $86.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EF7A.w		; 20 7A EF ; Jump to subroutine at $EF7A.w [Writes: Stack Pointer] [Flow: call]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0009.w		; 69 09 00 ; Add #$0009.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0B80.w		; E9 80 0B ; Subtract #$0B80.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0020.w		; E9 20 00 ; Subtract #$0020.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC172.l		; 8F 72 C1 7E ; Store accumulator (long) $7EC172.l [Reads: Accumulator]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC174.l		; 8F 74 C1 7E ; Store accumulator (long) $7EC174.l [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC176.l		; 8F 76 C1 7E ; Store accumulator (long) $7EC176.l [Reads: Accumulator]
	lda #$044E.w		; A9 4E 04 ; Load #$044E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; [PATTERN: Memory clearing operation] 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	stz $88.b		; 64 88 ; Store zero to $88.b
	lda #$001F.w		; A9 1F 00 ; Load #$001F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EFB3.w		; 20 B3 EF ; Jump to subroutine at $EFB3.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0060.w		; E9 60 00 ; Subtract #$0060.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC172.l		; 8F 72 C1 7E ; Store accumulator (long) $7EC172.l [Reads: Accumulator]
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC174.l		; 8F 74 C1 7E ; Store accumulator (long) $7EC174.l [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC176.l		; 8F 76 C1 7E ; Store accumulator (long) $7EC176.l [Reads: Accumulator]
	lda #$041E.w		; A9 1E 04 ; Load #$041E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; [PATTERN: Memory clearing operation] 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	stz $88.b		; 64 88 ; Store zero to $88.b
	lda #$0007.w		; A9 07 00 ; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $EFB3.w		; 20 B3 EF ; Jump to subroutine at $EFB3.w [Writes: Stack Pointer] [Flow: call]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0009.w		; 69 09 00 ; Add #$0009.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$002E.w		; E9 2E 00 ; Subtract #$002E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$F2.b		; A2 F2 ; Load #$F2.b into X register [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($41.b)		; F2 41 ; Subtract with carry (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($38.b)		; F2 38 ; Subtract with carry (indirect) ($38.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($18.b)		; F2 18 ; Subtract with carry (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($E2.b)		; F2 E2 ; Subtract with carry (indirect) ($E2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	asl $04.b,X		; 16 04 ; Arithmetic shift left $04.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($F1FC.w,X)		; 7C FC F1 ; Jump indirect indexed to ($F1FC.w,X) [Reads: X Index] [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	jsr $F2F1.w		; 20 F1 F2 ; Jump to subroutine at $F2F1.w [Writes: Stack Pointer] [Flow: call]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	sta $1102.w,Y		; 99 02 11 ; Store accumulator to $1102.w,Y [Reads: Y Index, Accumulator]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	jsr $F325.w		; 20 25 F3 ; Jump to subroutine at $F325.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $DE		; 80 DE ; Branch always to $80, $DE [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	jsr $F363.w		; 20 63 F3 ; Jump to subroutine at $F363.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $D5		; 80 D5 ; Branch always to $80, $D5 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	jsr $F39D.w		; 20 9D F3 ; Jump to subroutine at $F39D.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $CC		; 80 CC ; Branch always to $80, $CC [Flow: branch]
	ldx #$A5F2.w		; A2 F2 A5 ; Load #$A5F2.w into X register [Writes: X Index] [Flags: NZ]
	sbc ($AC.b)		; F2 AC ; Subtract with carry (indirect) ($AC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($B3.b)		; F2 B3 ; Subtract with carry (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($BA.b)		; F2 BA ; Subtract with carry (indirect) ($BA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($BA.b)		; F2 BA ; Subtract with carry (indirect) ($BA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C8.b)		; F2 C8 ; Subtract with carry (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($CF.b)		; F2 CF ; Subtract with carry (indirect) ($CF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($CF.b)		; F2 CF ; Subtract with carry (indirect) ($CF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A2.b)		; F2 A2 ; Subtract with carry (indirect) ($A2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C2.b)		; F2 C2 ; Subtract with carry (indirect) ($C2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $64		; 30 64 ; Branch if minus to $30, $64 [Flow: branch]
	asl $30E2.w		; 0E E2 30 ; Arithmetic shift left $30E2.w [Flags: NCZ]
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($F253.w,X)		; FC 53 F2 ; Jump to subroutine indirect indexed ($F253.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	sta $1102.w,Y		; 99 02 11 ; Store accumulator to $1102.w,Y [Reads: Y Index, Accumulator]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0418.w		; 8D 18 04 ; Store accumulator to $0418.w [Reads: Accumulator]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $11.b		; 64 11 ; Store zero to $11.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F37F.w		; 20 7F F3 ; Jump to subroutine at $F37F.w [Writes: Stack Pointer] [Flow: call]
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F345.w		; [PATTERN: Memory clearing operation] 20 45 F3 ; Jump to subroutine at $F345.w [Writes: Stack Pointer] [Flow: call]
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F311.w		; 20 11 F3 ; Jump to subroutine at $F311.w [Writes: Stack Pointer] [Flow: call]
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F311.w		; 20 11 F3 ; Jump to subroutine at $F311.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F2DD.w		; 20 DD F2 ; Jump to subroutine at $F2DD.w [Writes: Stack Pointer] [Flow: call]
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F2DD.w		; 20 DD F2 ; Jump to subroutine at $F2DD.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $2A		; 30 2A ; Branch if minus to $30, $2A [Flow: branch]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	jsr $F482.w		; 20 82 F4 ; Jump to subroutine at $F482.w [Writes: Stack Pointer] [Flow: call]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$1800.w		; C9 00 18 ; Compare #$1800.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $2A		; B0 2A ; Branch if carry set to $B0, $2A [Flow: branch]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	jsr $F482.w		; 20 82 F4 ; Jump to subroutine at $F482.w [Writes: Stack Pointer] [Flow: call]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	cmp #$0000.w		; C9 00 00 ; Compare #$0000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$8040.w		; A9 40 80 ; Load #$8040.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	jsr $F3B9.w		; 20 B9 F3 ; Jump to subroutine at $F3B9.w [Writes: Stack Pointer] [Flow: call]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	cmp #$0060.w		; C9 60 00 ; Compare #$0060.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $26		; B0 26 ; Branch if carry set to $B0, $26 [Flow: branch]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $02F88D.l,X		; BF 8D F8 02 ; Load long $02F88D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$8040.w		; A9 40 80 ; Load #$8040.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	jsr $F3B9.w		; 20 B9 F3 ; Jump to subroutine at $F3B9.w [Writes: Stack Pointer] [Flow: call]
	inc $84.b		; E6 84 ; Increment $84.b [Reads: Direct Page] [Flags: NZ]
	inc $84.b		; E6 84 ; Increment $84.b [Reads: Direct Page] [Flags: NZ]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02F883.l,X		; FF 83 F8 02 ; Subtract with carry (long,X) $02F883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$007E.w		; A9 7E 00 ; Load #$007E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0400.w		; A9 00 04 ; Load #$0400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $02F889.l		; AF 89 F8 02 ; Load long $02F889.l into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F435.w		; 20 35 F4 ; Jump to subroutine at $F435.w [Writes: Stack Pointer] [Flow: call]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02F88B.l		; AF 8B F8 02 ; Load long $02F88B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1142.w,Y		; 99 42 11 ; Store accumulator to $1142.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0500.w,X		; BD 00 05 ; Load $0500.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	lda $0F8002.l,X		; BF 02 80 0F ; Load long $0F8002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1142.w,Y		; 99 42 11 ; Store accumulator to $1142.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $0F8004.l,X		; BF 04 80 0F ; Load long $0F8004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	lda $0F8006.l,X		; BF 06 80 0F ; Load long $0F8006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1142.w,Y		; 99 42 11 ; Store accumulator to $1142.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $CF		; D0 CF ; Branch if not equal to $D0, $CF [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0042.w		; 69 42 00 ; Add #$0042.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0416.w		; AD 16 04 ; Load $0416.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02F885.l,X		; FF 85 F8 02 ; Subtract with carry (long,X) $02F885.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $86.b		; A5 86 ; Load $86.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$007E.w		; A9 7E 00 ; Load #$007E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0800.w		; A9 00 08 ; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0400.w		; 69 00 04 ; Add #$0400.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $02F889.l		; AF 89 F8 02 ; Load long $02F889.l into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F50A.w		; 20 0A F5 ; Jump to subroutine at $F50A.w [Writes: Stack Pointer] [Flow: call]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $02F88B.l		; AF 8B F8 02 ; Load long $02F88B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0500.w,X		; BD 00 05 ; Load $0500.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	lda $0F8004.l,X		; BF 04 80 0F ; Load long $0F8004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1140.w,Y		; 99 40 11 ; Store accumulator to $1140.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $0F8002.l,X		; BF 02 80 0F ; Load long $0F8002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	lda $0F8006.l,X		; BF 06 80 0F ; Load long $0F8006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1140.w,Y		; 99 40 11 ; Store accumulator to $1140.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $CF		; D0 CF ; Branch if not equal to $D0, $CF [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $8A.b		; 65 8A ; Add $8A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$007E.w		; A9 7E 00 ; Load #$007E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F595.w		; 20 95 F5 ; Jump to subroutine at $F595.w [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsr $F595.w		; 20 95 F5 ; Jump to subroutine at $F595.w [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$3000.w		; A9 00 30 ; Load #$3000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F595.w		; 20 95 F5 ; Jump to subroutine at $F595.w [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0009.w		; 69 09 00 ; Add #$0009.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$3000.w		; A9 00 30 ; Load #$3000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $02F94D.l,X		; BF 4D F9 02 ; Load long $02F94D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda $02F94E.l,X		; BF 4E F9 02 ; Load long $02F94E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$4400.w		; A9 00 44 ; Load #$4400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $FEBB.w		; 20 BB FE ; Jump to subroutine at $FEBB.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $F638.w		; 20 38 F6 ; Jump to subroutine at $F638.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $02FB2D.l,X		; BF 2D FB 02 ; Load long $02FB2D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda $02FB2E.l,X		; BF 2E FB 02 ; Load long $02FB2E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	lda #$4400.w		; A9 00 44 ; Load #$4400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $FEBB.w		; 20 BB FE ; Jump to subroutine at $FEBB.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $F679.w		; 20 79 F6 ; Jump to subroutine at $F679.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; [PATTERN: Memory clearing operation] AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4440.w		; 8D 40 44 ; Store accumulator to $4440.w [Reads: Accumulator]
	stz $06.b		; 64 06 ; Store zero to $06.b
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy $0B.b		; A4 0B ; Load $0B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $F691.w		; 20 91 F6 ; Jump to subroutine at $F691.w [Writes: Stack Pointer] [Flow: call]
	sty $06.b		; 84 06 ; Store Y register to $06.b [Reads: Y Index]
	inc $0B.b		; E6 0B ; Increment $0B.b [Reads: Direct Page] [Flags: NZ]
	inc $0B.b		; E6 0B ; Increment $0B.b [Reads: Direct Page] [Flags: NZ]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00C0.w		; 69 C0 00 ; Add #$00C0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	cmp #$1000.w		; C9 00 10 ; Compare #$1000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $DA		; 90 DA ; Branch if carry clear to $90, $DA [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0001.w		; A0 01 00 ; Load #$0001.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $4400.w,X		; BD 00 44 ; Load $4400.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $4400.w,X		; BD 00 44 ; Load $4400.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $4400.w,X		; BD 00 44 ; Load $4400.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $4400.w,X		; BD 00 44 ; Load $4400.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0100.w		; E0 00 01 ; Compare #$0100.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $DB		; 90 DB ; Branch if carry clear to $90, $DB [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $BF		; 80 BF ; Branch always to $80, $BF [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $4440CD.l,X		; FF CD 40 44 ; Subtract with carry (long,X) $4440CD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $F7AD.w		; 4C AD F7 ; Jump to $F7AD.w [Flow: jump]
	sta $4440.w		; 8D 40 44 ; Store accumulator to $4440.w [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4442.w		; 8D 42 44 ; Store accumulator to $4442.w [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $4442.w		; 6D 42 44 ; Add $4442.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $038000.l,X		; BF 00 80 03 ; Load long $038000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4400.w		; 8D 00 44 ; Store accumulator to $4400.w [Reads: Accumulator]
	lda $038001.l,X		; BF 01 80 03 ; Load long $038001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4402.w		; 8D 02 44 ; Store accumulator to $4402.w [Reads: Accumulator]
	lda $038002.l,X		; BF 02 80 03 ; Load long $038002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4404.w		; 8D 04 44 ; Store accumulator to $4404.w [Reads: Accumulator]
	lda $038003.l,X		; BF 03 80 03 ; Load long $038003.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4406.w		; 8D 06 44 ; Store accumulator to $4406.w [Reads: Accumulator]
	lda $038004.l,X		; BF 04 80 03 ; Load long $038004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4401.w		; 8D 01 44 ; Store accumulator to $4401.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4403.w		; 8D 03 44 ; Store accumulator to $4403.w [Reads: Accumulator]
	lda $038005.l,X		; BF 05 80 03 ; Load long $038005.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4405.w		; 8D 05 44 ; Store accumulator to $4405.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4407.w		; 8D 07 44 ; Store accumulator to $4407.w [Reads: Accumulator]
	lda $03B400.l,X		; BF 00 B4 03 ; Load long $03B400.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4410.w		; 8D 10 44 ; Store accumulator to $4410.w [Reads: Accumulator]
	lda $03B401.l,X		; BF 01 B4 03 ; Load long $03B401.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4412.w		; 8D 12 44 ; Store accumulator to $4412.w [Reads: Accumulator]
	lda $03B402.l,X		; BF 02 B4 03 ; Load long $03B402.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4414.w		; 8D 14 44 ; Store accumulator to $4414.w [Reads: Accumulator]
	lda $03B403.l,X		; BF 03 B4 03 ; Load long $03B403.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4416.w		; 8D 16 44 ; Store accumulator to $4416.w [Reads: Accumulator]
	lda $03B404.l,X		; BF 04 B4 03 ; Load long $03B404.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4411.w		; 8D 11 44 ; Store accumulator to $4411.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4413.w		; 8D 13 44 ; Store accumulator to $4413.w [Reads: Accumulator]
	lda $03B405.l,X		; BF 05 B4 03 ; Load long $03B405.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4415.w		; 8D 15 44 ; Store accumulator to $4415.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4417.w		; 8D 17 44 ; Store accumulator to $4417.w [Reads: Accumulator]
	lda $048000.l,X		; BF 00 80 04 ; Load long $048000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4420.w		; 8D 20 44 ; Store accumulator to $4420.w [Reads: Accumulator]
	lda $048001.l,X		; BF 01 80 04 ; Load long $048001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4422.w		; 8D 22 44 ; Store accumulator to $4422.w [Reads: Accumulator]
	lda $048002.l,X		; BF 02 80 04 ; Load long $048002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4424.w		; 8D 24 44 ; Store accumulator to $4424.w [Reads: Accumulator]
	lda $048003.l,X		; BF 03 80 04 ; Load long $048003.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4426.w		; 8D 26 44 ; Store accumulator to $4426.w [Reads: Accumulator]
	lda $048004.l,X		; BF 04 80 04 ; Load long $048004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4421.w		; 8D 21 44 ; Store accumulator to $4421.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4423.w		; 8D 23 44 ; Store accumulator to $4423.w [Reads: Accumulator]
	lda $048005.l,X		; BF 05 80 04 ; Load long $048005.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4425.w		; 8D 25 44 ; Store accumulator to $4425.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4427.w		; 8D 27 44 ; Store accumulator to $4427.w [Reads: Accumulator]
	lda $04B400.l,X		; BF 00 B4 04 ; Load long $04B400.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4430.w		; 8D 30 44 ; Store accumulator to $4430.w [Reads: Accumulator]
	lda $04B401.l,X		; BF 01 B4 04 ; Load long $04B401.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4432.w		; 8D 32 44 ; Store accumulator to $4432.w [Reads: Accumulator]
	lda $04B402.l,X		; BF 02 B4 04 ; Load long $04B402.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4434.w		; 8D 34 44 ; Store accumulator to $4434.w [Reads: Accumulator]
	lda $04B403.l,X		; BF 03 B4 04 ; Load long $04B403.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4436.w		; 8D 36 44 ; Store accumulator to $4436.w [Reads: Accumulator]
	lda $04B404.l,X		; BF 04 B4 04 ; Load long $04B404.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4431.w		; 8D 31 44 ; Store accumulator to $4431.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4433.w		; 8D 33 44 ; Store accumulator to $4433.w [Reads: Accumulator]
	lda $04B405.l,X		; BF 05 B4 04 ; Load long $04B405.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4435.w		; 8D 35 44 ; Store accumulator to $4435.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4437.w		; 8D 37 44 ; Store accumulator to $4437.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $4400.w,X		; BD 00 44 ; Load $4400.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $4420.w,X		; BD 20 44 ; Load $4420.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$03.b],Y		; 97 03 ; Store accumulator (long indexed) [$03.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $4410.w,X		; BD 10 44 ; Load $4410.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $4430.w,X		; BD 30 44 ; Load $4430.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$03.b],Y		; 97 03 ; Store accumulator (long indexed) [$03.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $8A.b		; 65 8A ; Add $8A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$007E.w		; A9 7E 00 ; Load #$007E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $02F94D.l,X		; BF 4D F9 02 ; Load long $02F94D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda $02F94E.l,X		; BF 4E F9 02 ; Load long $02F94E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$4400.w		; A9 00 44 ; Load #$4400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $FEBB.w		; 20 BB FE ; Jump to subroutine at $FEBB.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $F638.w		; 20 38 F6 ; Jump to subroutine at $F638.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $02FB2D.l,X		; BF 2D FB 02 ; Load long $02FB2D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda $02FB2E.l,X		; BF 2E FB 02 ; Load long $02FB2E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	lda #$4400.w		; A9 00 44 ; Load #$4400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $FEBB.w		; 20 BB FE ; Jump to subroutine at $FEBB.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $F679.w		; 20 79 F6 ; Jump to subroutine at $F679.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; [PATTERN: Memory clearing operation] AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4440.w		; 8D 40 44 ; Store accumulator to $4440.w [Reads: Accumulator]
	stz $06.b		; 64 06 ; Store zero to $06.b
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy $0B.b		; A4 0B ; Load $0B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $F691.w		; 20 91 F6 ; Jump to subroutine at $F691.w [Writes: Stack Pointer] [Flow: call]
	sty $06.b		; 84 06 ; Store Y register to $06.b [Reads: Y Index]
	inc $0B.b		; E6 0B ; Increment $0B.b [Reads: Direct Page] [Flags: NZ]
	inc $0B.b		; E6 0B ; Increment $0B.b [Reads: Direct Page] [Flags: NZ]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00C0.w		; 69 C0 00 ; Add #$00C0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	cmp #$1000.w		; C9 00 10 ; Compare #$1000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $D9		; 90 D9 ; Branch if carry clear to $90, $D9 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	dec $80.b,X		; D6 80 ; Decrement memory $80.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rep #$81		; C2 81 ; Reset processor status bits #$81 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $83.b,X		; 16 83 ; Arithmetic shift left $83.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	nop		; EA ; No operation
	sta $0B.b,S		; 83 0B ; Store accumulator (stack relative) $0B.b,S [Reads: Stack Pointer, Accumulator]
	asl $0B85.w		; 0E 85 0B ; Arithmetic shift left $0B85.w [Flags: NCZ]
	adc ($86.b),Y		; 71 86 ; Add with carry ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $D30B88.l		; 0F 88 0B D3 ; OR accumulator with memory (long) $D30B88.l [Writes: Accumulator] [Flags: NZ]
	bit #$900B.w		; 89 0B 90 ; Test bits #$900B.w with accumulator [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$0BD7.w		; 09 D7 0B ; Logical OR #$0BD7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $8D.b		; 24 8D ; Test bits $8D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $8E.b,S		; E3 8E ; Subtract stack-relative $8E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $90		; 70 90 ; Branch if overflow set to $70, $90 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	nop		; EA ; No operation
	sta ($0B.b),Y		; 91 0B ; Store accumulator ($0B.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpy $0B93.w		; CC 93 0B ; Compare $0B93.w with Y register [Reads: Y Index] [Flags: NCZ]
	and [$95.b]		; 27 95 ; AND accumulator with memory (long) [$95.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc $0B.b,S		; E3 0B ; Subtract stack-relative $0B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor [$E5.b],Y		; 57 E5 ; Exclusive OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $96.b,X		; D5 96 ; Compare accumulator $96.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $98.b,S		; 43 98 ; Exclusive OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sty $0B99.w		; 8C 99 0B ; Store Y register to $0B99.w [Reads: Y Index]
	eor $9B.b,X		; 55 9B ; Exclusive OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
.ACCU 16
	rep #$ED		; C2 ED
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$9D.b]		; 07 9D ; OR accumulator with memory (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit #$0B9E.w		; 89 9E 0B ; Test bits #$0B9E.w with accumulator [Reads: Accumulator] [Flags: Z]
	asl $A0.b,X		; 16 A0 ; Arithmetic shift left $A0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$0BA2.w		; 09 A2 0B ; Logical OR #$0BA2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $A3.b		; A6 A3 ; Load $A3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $A5.b,S		; 43 A5 ; Exclusive OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $A7.b		; 14 A7 ; Test and reset bits $A7.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0BA8.w,Y		; 19 A8 0B ; OR accumulator with memory $0BA8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $0BA9.w		; 4E A9 0B ; Logical shift right $0BA9.w [Flags: NCZ]
	dec $0BAA.w		; CE AA 0B ; Decrement $0BAA.w [Flags: NZ]
	eor $220BAC.l,X		; 5F AC 0B 22 ; Exclusive OR accumulator with memory (long,X) $220BAC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $A00B.w		; AE 0B A0 ; Load $A00B.w into X register [Writes: X Index] [Flags: NZ]
	lda $84BD0B.l		; AF 0B BD 84 ; Load long $84BD0B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $B140.w		; 0C 40 B1 ; Test and set bits $B140.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc ($B2.b,S),Y		; F3 B2 ; Subtract with carry (stack relative indirect indexed) ($B2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($B4.b),Y		; B1 B4 ; Load accumulator ($B4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $0B,$B6		; 44 B6 0B ; Move block positive $0B,$B6 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp ($0C8D.w)		; 6C 8D 0C ; Jump indirect to ($0C8D.w) [Flow: jump]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	sta $91060C.l		; 8F 0C 06 91 ; Store accumulator (long) $91060C.l [Reads: Accumulator]
	tsb $B800.w		; 0C 00 B8 ; Test and set bits $B800.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $D0, $94		; D0 94 ; Branch if not equal to $D0, $94 [Flow: branch]
	tsb $96BF.w		; 0C BF 96 ; Test and set bits $96BF.w [Reads: Accumulator] [Flags: Z]
	tsb $B9BB.w		; 0C BB B9 ; Test and set bits $B9BB.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $0BBA.w,X		; FE BA 0B ; Increment memory $0BBA.w,X [Reads: X Index] [Flags: NZ]
	inc $0BBB.w,X		; FE BB 0B ; Increment memory $0BBB.w,X [Reads: X Index] [Flags: NZ]
	lda $730C9D.l		; AF 9D 0C 73 ; Load long $730C9D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BDC70C.l,X		; 9F 0C C7 BD ; Store accumulator (long,X) $BDC70C.l,X [Reads: Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($BF.b,X)		; A1 BF ; Load accumulator ($BF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $A40BC1.l		; 8F C1 0B A4 ; Store accumulator (long) $A40BC1.l [Reads: Accumulator]
	rep #$0B		; C2 0B ; Reset processor status bits #$0B [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp $0B.b,S		; C3 0B ; Compare accumulator (stack relative) $0B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	eor $370CAC.l,X		; 5F AC 0C 37 ; Exclusive OR accumulator with memory (long,X) $370CAC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $900C.w		; AE 0C 90 ; Load $900C.w into X register [Writes: X Index] [Flags: NZ]
	cmp $0B.b		; C5 0B ; Compare $0B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp ($0BC7.w)		; 6C C7 0B ; Jump indirect to ($0BC7.w) [Flow: jump]
	cmp ($B3.b)		; D2 B3 ; Compare accumulator (indirect) ($B3.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tsb $C93F.w		; 0C 3F C9 ; Test and set bits $C93F.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0BCA.w,Y		; 19 CA 0B ; OR accumulator with memory $0BCA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $D0, $CC		; D0 CC ; Branch if not equal to $D0, $CC [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($CE.b,S),Y		; 13 CE ; OR accumulator (stack relative indirect indexed) ($CE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($0BCF.w)		; 6C CF 0B ; Jump indirect to ($0BCF.w) [Flow: jump]
	lda ($D0.b),Y		; B1 D0 ; Load accumulator ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $0B,$D2		; 44 D2 0B ; Move block positive $0B,$D2 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	inc $D3.b,X		; F6 D3 ; Increment memory $D3.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $0B.b,X		; D5 0B ; Compare accumulator $0B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora #$0BD7.w		; 09 D7 0B ; Logical OR #$0BD7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc #$0BD8.w		; E9 D8 0B ; Subtract #$0BD8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda [$DA.b]		; A7 DA ; Load accumulator (long) [$DA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $0BDC.w		; 4D DC 0B ; Exclusive OR $0BDC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $DE.b,S		; 23 DE ; AND accumulator with stack relative $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($E0.b),Y		; 11 E0 ; OR accumulator with memory ($E0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dec $0BE1.w,X		; DE E1 0B ; Decrement memory $0BE1.w,X [Reads: X Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc $0B.b,S		; E3 0B ; Subtract stack-relative $0B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor [$E5.b],Y		; 57 E5 ; Exclusive OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc [$0B.b]		; E7 0B ; Subtract with carry (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $370BE8.l,X		; DF E8 0B 37 ; Compare accumulator (long,X) $370BE8.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	nop		; EA ; No operation
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
.ACCU 16
	rep #$ED		; C2 ED
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc $F1560B.l		; EF 0B 56 F1 ; Subtract with carry (long) $F1560B.l [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pea $0BF2.w		; F4 F2 0B ; Push absolute address $0BF2.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx $F4.b		; E4 F4 ; Compare $F4.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($F6.b,S),Y		; B3 F6 ; Load accumulator (stack relative indirect indexed) ($F6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $F8.b		; A4 F8 ; Load $F8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sbc $150B.w,Y		; F9 0B 15 ; Subtract with carry $150B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $0BFC.w,Y		; B9 FC 0B ; Load $0BFC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $81C4.w		; 0C C4 81 ; Test and set bits $81C4.w [Reads: Accumulator] [Flags: Z]
	tsb $8321.w		; 0C 21 83 ; Test and set bits $8321.w [Reads: Accumulator] [Flags: Z]
	tsb $84BD.w		; 0C BD 84 ; Test and set bits $84BD.w [Reads: Accumulator] [Flags: Z]
	tsb $8688.w		; 0C 88 86 ; Test and set bits $8688.w [Reads: Accumulator] [Flags: Z]
	tsb $880D.w		; 0C 0D 88 ; Test and set bits $880D.w [Reads: Accumulator] [Flags: Z]
	tsb $89CC.w		; 0C CC 89 ; Test and set bits $89CC.w [Reads: Accumulator] [Flags: Z]
	tsb $8B9A.w		; 0C 9A 8B ; Test and set bits $8B9A.w [Reads: Accumulator] [Flags: Z]
	tsb $8D6C.w		; 0C 6C 8D ; Test and set bits $8D6C.w [Reads: Accumulator] [Flags: Z]
	tsb $8F2B.w		; 0C 2B 8F ; Test and set bits $8F2B.w [Reads: Accumulator] [Flags: Z]
	tsb $9106.w		; 0C 06 91 ; Test and set bits $9106.w [Reads: Accumulator] [Flags: Z]
	tsb $92E8.w		; 0C E8 92 ; Test and set bits $92E8.w [Reads: Accumulator] [Flags: Z]
	tsb $94D0.w		; 0C D0 94 ; Test and set bits $94D0.w [Reads: Accumulator] [Flags: Z]
	tsb $96BF.w		; 0C BF 96 ; Test and set bits $96BF.w [Reads: Accumulator] [Flags: Z]
	tsb $98B0.w		; 0C B0 98 ; Test and set bits $98B0.w [Reads: Accumulator] [Flags: Z]
	tsb $9A48.w		; 0C 48 9A ; Test and set bits $9A48.w [Reads: Accumulator] [Flags: Z]
	tsb $9BC2.w		; 0C C2 9B ; Test and set bits $9BC2.w [Reads: Accumulator] [Flags: Z]
	tsb $9DAF.w		; 0C AF 9D ; Test and set bits $9DAF.w [Reads: Accumulator] [Flags: Z]
	tsb $9F73.w		; 0C 73 9F ; Test and set bits $9F73.w [Reads: Accumulator] [Flags: Z]
	tsb $A132.w		; 0C 32 A1 ; Test and set bits $A132.w [Reads: Accumulator] [Flags: Z]
	tsb $A329.w		; 0C 29 A3 ; Test and set bits $A329.w [Reads: Accumulator] [Flags: Z]
	tsb $A4BA.w		; 0C BA A4 ; Test and set bits $A4BA.w [Reads: Accumulator] [Flags: Z]
	tsb $A6B2.w		; 0C B2 A6 ; Test and set bits $A6B2.w [Reads: Accumulator] [Flags: Z]
	tsb $A898.w		; 0C 98 A8 ; Test and set bits $A898.w [Reads: Accumulator] [Flags: Z]
	tsb $AA6D.w		; 0C 6D AA ; Test and set bits $AA6D.w [Reads: Accumulator] [Flags: Z]
	tsb $AC5F.w		; 0C 5F AC ; Test and set bits $AC5F.w [Reads: Accumulator] [Flags: Z]
	tsb $AE37.w		; 0C 37 AE ; Test and set bits $AE37.w [Reads: Accumulator] [Flags: Z]
	tsb $B016.w		; 0C 16 B0 ; Test and set bits $B016.w [Reads: Accumulator] [Flags: Z]
	tsb $B20B.w		; 0C 0B B2 ; Test and set bits $B20B.w [Reads: Accumulator] [Flags: Z]
	tsb $B3D2.w		; 0C D2 B3 ; Test and set bits $B3D2.w [Reads: Accumulator] [Flags: Z]
	tsb $B83C.w		; 0C 3C B8 ; Test and set bits $B83C.w [Reads: Accumulator] [Flags: Z]
	tsb $B97C.w		; 0C 7C B9 ; Test and set bits $B97C.w [Reads: Accumulator] [Flags: Z]
	tsb $BAF2.w		; 0C F2 BA ; Test and set bits $BAF2.w [Reads: Accumulator] [Flags: Z]
	tsb $8000.w		; 0C 00 80 ; Test and set bits $8000.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $C0.b,X		; B4 C0 ; Load Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tsb $BCAE.w		; 0C AE BC ; Test and set bits $BCAE.w [Reads: Accumulator] [Flags: Z]
	tsb $BE4B.w		; 0C 4B BE ; Test and set bits $BE4B.w [Reads: Accumulator] [Flags: Z]
	tsb $8000.w		; 0C 00 80 ; Test and set bits $8000.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $C0.b,X		; B4 C0 ; Load Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tsb $B83C.w		; 0C 3C B8 ; Test and set bits $B83C.w [Reads: Accumulator] [Flags: Z]
	tsb $BFFA.w		; 0C FA BF ; Test and set bits $BFFA.w [Reads: Accumulator] [Flags: Z]
	tsb $BFD7.w		; 0C D7 BF ; Test and set bits $BFD7.w [Reads: Accumulator] [Flags: Z]
	tsb $B67B.w		; 0C 7B B6 ; Test and set bits $B67B.w [Reads: Accumulator] [Flags: Z]
	tsb $8000.w		; 0C 00 80 ; Test and set bits $8000.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $0CC0.w		; AC C0 0C ; Load $0CC0.w into Y register [Writes: Y Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $0C.b,Y		; B6 0C ; Load X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $0CB6.w,Y		; BE B6 0C ; Load X register $0CB6.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $82, $0B, $40		; 82 0B 40 ; Branch always long to $82, $0B, $40 [Flow: branch]
	sta $0B.b,S		; 83 0B ; Store accumulator (stack relative) $0B.b,S [Reads: Stack Pointer, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $0B.b		; 84 0B ; Store Y register to $0B.b [Reads: Y Index]
	lda $85.b,S		; A3 85 ; Load accumulator (stack relative) $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $87.b		; 24 87 ; Test bits $87.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpx #$0B88.w		; E0 88 0B ; Compare #$0B88.w with X register [Reads: X Index] [Flags: NCZ]
	sta ($8A.b),Y		; 91 8A ; Store accumulator ($8A.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $8C.b,X		; 35 8C ; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $F0, $D7		; F0 D7 ; Branch if equal to $F0, $D7 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $8D.b,X		; F6 8D ; Increment memory $8D.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta [$8F.b]		; 87 8F ; Store accumulator (long) [$8F.b] [Reads: Direct Page, Accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($0B.b),Y		; 91 0B ; Store accumulator ($0B.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $650B92.l		; CF 92 0B 65 ; Compare accumulator (long) $650B92.l [Reads: Accumulator] [Flags: NCZ]
	sty $0B.b,X		; 94 0B ; Store Y register $0B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc [$95.b]		; E7 95 ; Subtract with carry (long) [$95.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cpx $0B.b		; E4 0B ; Compare $0B.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $0B.b		; E6 0B ; Increment $0B.b [Reads: Direct Page] [Flags: NZ]
	adc $97.b,X		; 75 97 ; Add $97.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp [$98.b]		; C7 98 ; Compare accumulator (long) [$98.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $9A.b		; 65 9A ; Add $9A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $A70B.w		; 9C 0B A7 ; Store zero to $A70B.w
	inc $AC0B.w		; EE 0B AC ; Increment $AC0B.w [Flags: NZ]
	sta $390B.w,X		; 9D 0B 39 ; Store accumulator to $390B.w,X [Reads: Accumulator, X Index]
	sta $A1070B.l,X		; 9F 0B 07 A1 ; Store accumulator (long,X) $A1070B.l,X [Reads: Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($A2.b,X)		; C1 A2 ; Compare accumulator ($A2.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $0BA4.w,X		; 5E A4 0B ; Logical shift right $0BA4.w,X [Reads: X Index] [Flags: NCZ]
	jsl $460BA6.l		; 22 A6 0B 46 ; Jump to subroutine long $460BA6.l [Writes: Stack Pointer] [Flow: call]
	lda [$0B.b]		; A7 0B ; Load accumulator (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda #$790B.w		; A9 0B 79 ; Load #$790B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $0BAD.w		; 2E AD 0B ; Rotate left $0BAD.w [Flags: NCZ]
	cmp $0BAE.w		; CD AE 0B ; Compare $0BAE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	tsb $B2.b		; 04 B2 ; Test and set bits $B2.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda ($0B.b,S),Y		; B3 0B ; Load accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$B5.b]		; 67 B5 ; Add with carry (long) [$B5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda [$0B.b],Y		; B7 0B ; Load accumulator (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $0C0C.w		; 8E 0C 0C ; Store X register to $0C0C.w [Reads: X Index]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	sbc ($91.b),Y		; F1 91 ; Subtract with carry ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $B8D3.w		; 0C D3 B8 ; Test and set bits $B8D3.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpy $95.b		; C4 95 ; Compare $95.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	tsb $97B3.w		; 0C B3 97 ; Test and set bits $97B3.w [Reads: Accumulator] [Flags: Z]
	tsb $BA25.w		; 0C 25 BA ; Test and set bits $BA25.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $0BBB.w,X		; 3C BB 0B ; Test bits $0BBB.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $820B.w,X		; BC 0B 82 ; Load Y register $820B.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stz $490C.w,X		; 9E 0C 49 ; Store zero to $490C.w,X [Reads: X Index]
	ldy #$AC0C.w		; A0 0C AC ; Load #$AC0C.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $8B0B.w,Y		; BE 0B 8B ; Load X register $8B0B.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cpy #$B30B.w		; C0 0B B3 ; Compare #$B30B.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpy $0B.b		; C4 0B ; Compare $0B.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $240C.w		; AD 0C 24 ; Load $240C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $C6730C.l		; AF 0C 73 C6 ; Load long $C6730C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b,X		; B4 0C ; Load Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$780B.w		; C9 0B 78 ; Compare #$780B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $CB.b,S		; E3 CB ; Subtract stack-relative $CB.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp $B00B.w		; CD 0B B0 ; Compare $B00B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	dec $F60B.w		; CE 0B F6 ; Decrement $F60B.w [Flags: NZ]
	cmp $D1690B.l		; CF 0B 69 D1 ; Compare accumulator (long) $D1690B.l [Reads: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($0B.b,S),Y		; D3 0B ; Compare accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	ldy $D4.b		; A4 D4 ; Load $D4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $0BD6.w		; 1C D6 0B ; Test and reset bits $0BD6.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $D7		; F0 D7 ; Branch if equal to $F0, $D7 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $600BD9.l,X		; BF D9 0B 60 ; Load long $600BD9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $130B.w,X		; DD 0B 13 ; Compare accumulator $130B.w,X [Reads: X Index] [Flags: NCZ]
	cmp $E0F00B.l,X		; DF 0B F0 E0 ; Compare accumulator (long,X) $E0F00B.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $E2.b,S		; A3 E2 ; Load accumulator (stack relative) $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cpx $0B.b		; E4 0B ; Compare $0B.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $0B.b		; E6 0B ; Increment $0B.b [Reads: Direct Page] [Flags: NZ]
	ora [$E8.b]		; 07 E8 ; OR accumulator with memory (long) [$E8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $E9.b,X		; 76 E9 ; Rotate right $E9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $CB0BEB.l		; 0F EB 0B CB ; OR accumulator with memory (long) $CB0BEB.l [Writes: Accumulator] [Flags: NZ]
	cpx $A70B.w		; EC 0B A7 ; Compare $A70B.w with X register [Reads: X Index] [Flags: NCZ]
	inc $670B.w		; EE 0B 67 ; Increment $670B.w [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	ora ($F2.b,S),Y		; 13 F2 ; OR accumulator (stack relative indirect indexed) ($F2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $F3.b,S		; E3 F3 ; Subtract stack-relative $F3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $120BF5.l,X		; 1F F5 0B 12 ; Logical OR long $120BF5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $0B.b,X		; F6 0B ; Increment memory $0B.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ldy $F7.b		; A4 F7 ; Load $F7.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dec $0BF8.w,X		; DE F8 0B ; Decrement memory $0BF8.w,X [Reads: X Index] [Flags: NZ]
	and $D50BFA.l,X		; 3F FA 0B D5 ; AND accumulator with memory (long,X) $D50BFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $0BFD.w		; 6D FD 0B ; Add $0BFD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp ($80.b)		; D2 80 ; Compare accumulator (indirect) ($80.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tsb $8265.w		; 0C 65 82 ; Test and set bits $8265.w [Reads: Accumulator] [Flags: Z]
	tsb $83E6.w		; 0C E6 83 ; Test and set bits $83E6.w [Reads: Accumulator] [Flags: Z]
	tsb $8598.w		; 0C 98 85 ; Test and set bits $8598.w [Reads: Accumulator] [Flags: Z]
	tsb $8734.w		; 0C 34 87 ; Test and set bits $8734.w [Reads: Accumulator] [Flags: Z]
	tsb $88DD.w		; 0C DD 88 ; Test and set bits $88DD.w [Reads: Accumulator] [Flags: Z]
	tsb $8AA4.w		; 0C A4 8A ; Test and set bits $8AA4.w [Reads: Accumulator] [Flags: Z]
	tsb $8C73.w		; 0C 73 8C ; Test and set bits $8C73.w [Reads: Accumulator] [Flags: Z]
	tsb $8E3B.w		; 0C 3B 8E ; Test and set bits $8E3B.w [Reads: Accumulator] [Flags: Z]
	tsb $900C.w		; 0C 0C 90 ; Test and set bits $900C.w [Reads: Accumulator] [Flags: Z]
	tsb $91F1.w		; 0C F1 91 ; Test and set bits $91F1.w [Reads: Accumulator] [Flags: Z]
	tsb $93D4.w		; 0C D4 93 ; Test and set bits $93D4.w [Reads: Accumulator] [Flags: Z]
	tsb $95C4.w		; 0C C4 95 ; Test and set bits $95C4.w [Reads: Accumulator] [Flags: Z]
	tsb $97B3.w		; 0C B3 97 ; Test and set bits $97B3.w [Reads: Accumulator] [Flags: Z]
	tsb $996E.w		; 0C 6E 99 ; Test and set bits $996E.w [Reads: Accumulator] [Flags: Z]
	tsb $9AF4.w		; 0C F4 9A ; Test and set bits $9AF4.w [Reads: Accumulator] [Flags: Z]
	tsb $9CB3.w		; 0C B3 9C ; Test and set bits $9CB3.w [Reads: Accumulator] [Flags: Z]
	tsb $9E82.w		; 0C 82 9E ; Test and set bits $9E82.w [Reads: Accumulator] [Flags: Z]
	tsb $A049.w		; 0C 49 A0 ; Test and set bits $A049.w [Reads: Accumulator] [Flags: Z]
	tsb $A226.w		; 0C 26 A2 ; Test and set bits $A226.w [Reads: Accumulator] [Flags: Z]
	tsb $A3DC.w		; 0C DC A3 ; Test and set bits $A3DC.w [Reads: Accumulator] [Flags: Z]
	tsb $A5B3.w		; 0C B3 A5 ; Test and set bits $A5B3.w [Reads: Accumulator] [Flags: Z]
	tsb $A799.w		; 0C 99 A7 ; Test and set bits $A799.w [Reads: Accumulator] [Flags: Z]
	tsb $A971.w		; 0C 71 A9 ; Test and set bits $A971.w [Reads: Accumulator] [Flags: Z]
	tsb $AB64.w		; 0C 64 AB ; Test and set bits $AB64.w [Reads: Accumulator] [Flags: Z]
	tsb $AD4A.w		; 0C 4A AD ; Test and set bits $AD4A.w [Reads: Accumulator] [Flags: Z]
	tsb $AF24.w		; 0C 24 AF ; Test and set bits $AF24.w [Reads: Accumulator] [Flags: Z]
	tsb $B10C.w		; 0C 0C B1 ; Test and set bits $B10C.w [Reads: Accumulator] [Flags: Z]
	tsb $B2E6.w		; 0C E6 B2 ; Test and set bits $B2E6.w [Reads: Accumulator] [Flags: Z]
	tsb $B4C8.w		; 0C C8 B4 ; Test and set bits $B4C8.w [Reads: Accumulator] [Flags: Z]
	tsb $B8AC.w		; 0C AC B8 ; Test and set bits $B8AC.w [Reads: Accumulator] [Flags: Z]
	tsb $BA16.w		; 0C 16 BA ; Test and set bits $BA16.w [Reads: Accumulator] [Flags: Z]
	tsb $BBB9.w		; 0C B9 BB ; Test and set bits $BBB9.w [Reads: Accumulator] [Flags: Z]
	tsb $8004.w		; 0C 04 80 ; Test and set bits $8004.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy #$5E0C.w		; C0 0C 5E ; Compare #$5E0C.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $050C.w,X		; BD 0C 05 ; Load $050C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $80040C.l,X		; BF 0C 04 80 ; Load long $80040C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy #$AC0C.w		; C0 0C AC ; Compare #$AC0C.w with Y register [Reads: Y Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tsb $C044.w		; 0C 44 C0 ; Test and set bits $C044.w [Reads: Accumulator] [Flags: Z]
	tsb $BFDE.w		; 0C DE BF ; Test and set bits $BFDE.w [Reads: Accumulator] [Flags: Z]
	tsb $B67F.w		; 0C 7F B6 ; Test and set bits $B67F.w [Reads: Accumulator] [Flags: Z]
	tsb $8004.w		; 0C 04 80 ; Test and set bits $8004.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $B0, $C0		; B0 C0 ; Branch if carry set to $B0, $C0 [Flow: branch]
	tsb $B67F.w		; 0C 7F B6 ; Test and set bits $B67F.w [Reads: Accumulator] [Flags: Z]
	tsb $B5CC.w		; 0C CC B5 ; Test and set bits $B5CC.w [Reads: Accumulator] [Flags: Z]
	tsb $B743.w		; 0C 43 B7 ; Test and set bits $B743.w [Reads: Accumulator] [Flags: Z]
	tsb $30C2.w		; 0C C2 30 ; Test and set bits $30C2.w [Reads: Accumulator] [Flags: Z]
	jsr $F7CB.w		; 20 CB F7 ; Jump to subroutine at $F7CB.w [Writes: Stack Pointer] [Flow: call]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $CC.b		; 85 CC ; Store accumulator to $CC.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $FD26.w		; 20 26 FD ; Jump to subroutine at $FD26.w [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$007E.w		; A9 7E 00 ; Load #$007E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$480F.w		; A9 0F 48 ; Load #$480F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$007E.w		; A9 7E 00 ; Load #$007E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	adc #$1000.w		; 69 00 10 ; Add #$1000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	jsr $FD87.w		; 20 87 FD ; Jump to subroutine at $FD87.w [Writes: Stack Pointer] [Flow: call]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	jsr $FD87.w		; 20 87 FD ; Jump to subroutine at $FD87.w [Writes: Stack Pointer] [Flow: call]
	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0080.w		; E9 80 00 ; Subtract #$0080.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $D6		; D0 D6 ; Branch if not equal to $D0, $D6 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $84.b		; A5 84 ; Load $84.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $29.b		; 04 29 ; Test and set bits $29.b [Reads: Accumulator] [Flags: Z]
	sbc $A5A81F.l,X		; FF 1F A8 A5 ; Subtract with carry (long,X) $A5A81F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $9D.b		; 04 9D ; Test and set bits $9D.b [Reads: Accumulator] [Flags: Z]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04B7A8.l,X		; 1F A8 B7 04 ; Logical OR long $04B7A8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00C6A8.l,X		; 1F A8 C6 00 ; Logical OR long $00C6A8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $D6		; D0 D6 ; Branch if not equal to $D0, $D6 [Flow: branch]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02F889.l		; AF 89 F8 02 ; Load long $02F889.l into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FDF7.w		; 20 F7 FD ; Jump to subroutine at $FDF7.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsb $85.b		; 04 85 ; Test and set bits $85.b [Reads: Accumulator] [Flags: Z]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A6.b		; 02 A6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $CC.b		; 05 CC ; Logical OR $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F4000.l,X		; 9F 00 40 7F ; Store accumulator (long,X) $7F4000.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02A4.w		; 0C A4 02 ; Test and set bits $02A4.w [Reads: Accumulator] [Flags: Z]
	lda $0500.w,Y		; B9 00 05 ; Load $0500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $8000.w,Y		; B9 00 80 ; Load $8000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	lda $8004.w,Y		; B9 04 80 ; Load $8004.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $8002.w,Y		; B9 02 80 ; Load $8002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F2000.l,X		; 9F 00 20 7F ; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	lda $8006.w,Y		; B9 06 80 ; Load $8006.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F2040.l,X		; 9F 40 20 7F ; Store accumulator (long,X) $7F2040.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $CF		; D0 CF ; Branch if not equal to $D0, $CF [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $C260.w		; 0E 60 C2 ; Arithmetic shift left $C260.w [Flags: NCZ]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	ldy $F004.w		; AC 04 F0 ; Load $F004.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $00A2.w		; 20 A2 00 ; Jump to subroutine at $00A2.w [Writes: Stack Pointer] [Flow: call]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $BFA8.w,X		; 7E A8 BF ; Rotate right $BFA8.w,X [Reads: X Index] [Flags: NCZ]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $9FBB.w,X		; 7E BB 9F ; Rotate right $9FBB.w,X [Reads: X Index] [Flags: NCZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $00E6.w,X		; 7E E6 00 ; Rotate right $00E6.w,X [Reads: X Index] [Flags: NCZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $04AC.w		; CD AC 04 ; Compare $04AC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$E8.b		; A9 E8 ; Load #$E8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
	jsr $FEBB.w		; 20 BB FE ; Jump to subroutine at $FEBB.w [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $7F6000.l,X		; 9F 00 60 7F ; Store accumulator (long,X) $7F6000.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F6001.l,X		; 9F 01 60 7F ; Store accumulator (long,X) $7F6001.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$1000.w		; E0 00 10 ; Compare #$1000.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $E6		; 90 E6 ; Branch if carry clear to $90, $E6 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $CD.b		; 85 CD ; Store accumulator to $CD.b [Reads: Accumulator]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $CD.b		; A5 CD ; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	lda $CD.b		; A5 CD ; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$48E0.w		; 29 E0 48 ; Logical AND #$48E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $CD.b		; A5 CD ; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$EB03.w		; 29 03 EB ; Logical AND #$EB03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $CB.b		; 85 CB ; Store accumulator to $CB.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $2A		; 10 2A ; Branch if plus to $10, $2A [Flow: branch]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	.db $80, $B4		; 80 B4 ; Branch always to $80, $B4 [Flow: branch]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $CB.b		; 86 CB ; Store X register to $CB.b [Reads: X Index]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	.db $80, $A5		; 80 A5 ; Branch always to $80, $A5 [Flow: branch]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	.db $80, $98		; 80 98 ; Branch always to $80, $98 [Flow: branch]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	jmp $FEC0.w		; 4C C0 FE ; Jump to $FEC0.w [Flow: jump]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr $FF5F.w		; 20 5F FF ; Jump to subroutine at $FF5F.w [Writes: Stack Pointer] [Flow: call]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	dec $CB.b		; C6 CB ; Decrement $CB.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	jmp $FEC0.w		; 4C C0 FE ; Jump to $FEC0.w [Flow: jump]
	lda [$C8.b]		; A7 C8 ; Load accumulator (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $C8.b		; A6 C8 ; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $E6		; 80 E6 ; Branch always to $80, $E6 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $C8.b		; 86 C8 ; Store X register to $C8.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 017FFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 017FFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ENDS
