.BANK 26 SLOT 0
.ORG $0000

.SECTION "Bank26" FORCE

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $CD5EFF.l		; 8F FF 5E CD ; Store accumulator (long) $CD5EFF.l [Reads: Accumulator]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($47.b,X)		; 01 47 ; Logical OR ($47.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pea $F031.w		; F4 31 F0 ; Push absolute address $F031.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $3D3D0F.l,X		; 3F 0F 3D 3D ; AND accumulator with memory (long,X) $3D3D0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor [$D0.b]		; 47 D0 ; Exclusive OR accumulator with memory (long) [$D0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($6F.b,S),Y		; F3 6F ; Subtract with carry (stack relative indirect indexed) ($6F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	trb $F6FD.w		; 1C FD F6 ; Test and reset bits $F6FD.w [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	asl $F62D.w		; 0E 2D F6 ; Arithmetic shift left $F62D.w [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $DD2D.w		; 0E 2D DD ; Arithmetic shift left $DD2D.w [Flags: NCZ]
	jmp $C0F6FD.l		; 5C FD F6 C0 ; Jump long to $C0F6FD.l [Flow: jump]
	asl $08F0.w		; 0E F0 08 ; Arithmetic shift left $08F0.w [Flags: NCZ]
	sbc [$30.b]		; E7 30 ; Subtract with carry (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $30, $D0		; 30 D0 ; Branch if minus to $30, $D0 [Flow: branch]
	cop $BB.b		; 02 BB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($FD.b),Y		; 31 FD ; AND accumulator with memory ($FD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $0211D5.l		; 6F D5 11 02 ; Add with carry (long) $0211D5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $0610.w,X		; FD 10 06 ; Subtract with carry $0610.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $A8		; 80 A8 ; Branch always to $80, $A8 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $5F.b		; 84 5F ; Store Y register to $5F.b [Reads: Y Index]
	sta $CF06.w		; 8D 06 CF ; Store accumulator to $CF06.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	trb $60.b		; 14 60 ; Test and reset bits $60.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $E415.w,X		; 3D 15 E4 ; AND accumulator with memory $E415.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $47.b		; 24 47 ; Test bits $47.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	eor $9F7D.w		; 4D 7D 9F ; Exclusive OR $9F7D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $5D0408.l		; 5C 08 04 5D ; Jump long to $5D0408.l [Flow: jump]
	sta $F700.w		; 8D 00 F7 ; Store accumulator to $F700.w [Reads: Accumulator]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	asl $1F28.w		; 0E 28 1F ; Arithmetic shift left $1F28.w [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr $0E48.w		; 20 48 0E ; Jump to subroutine at $0E48.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $072F.w,X		; DD 2F 07 ; Compare accumulator $072F.w,X [Reads: X Index] [Flags: NCZ]
	cpx $47.b		; E4 47 ; Compare $47.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr $0049.w		; 4E 49 00 ; Logical shift right $0049.w [Flags: NCZ]
	sbc [$14.b],Y		; F7 14 ; Subtract with carry (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$00F2.w		; C9 F2 00 ; Compare #$00F2.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $F3.b		; C5 F3 ; Compare $F3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($04AD.w,X)		; FC AD 04 ; Jump to subroutine indirect indexed ($04AD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	dec $14F7.w		; CE F7 14 ; Decrement $14F7.w [Flags: NZ]
	cmp $21.b,X		; D5 21 ; Compare accumulator $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$14.b],Y		; F7 14 ; Subtract with carry (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $20.b,X		; D5 20 ; Compare accumulator $20.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $6F.b		; 02 6F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $51.b,X		; D5 51 ; Compare accumulator $51.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0331D5.l,X		; 1F D5 31 03 ; Logical OR long $0331D5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	adc $2D91D4.l		; 6F D4 91 2D ; Add with carry (long) $2D91D4.l [Writes: Accumulator] [Flags: NCVZ]
	and $D50C5C.l,X		; 3F 5C 0C D5 ; AND accumulator with memory (long,X) $D50C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $03		; 50 03 ; Branch if overflow clear to $50, $03 [Flow: branch]
	.db $80, $B5		; 80 B5 ; Branch always to $80, $B5 [Flow: branch]
	and ($03.b),Y		; 31 03 ; AND accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $CE3F.w		; CE 3F CE ; Decrement $CE3F.w [Flags: NZ]
	asl $40D5.w		; 0E D5 40 ; Arithmetic shift left $40D5.w [Flags: NCZ]
	ora $DD.b,S		; 03 DD ; OR accumulator with stack relative $DD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $41.b,X		; D5 41 ; Compare accumulator $41.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $B0.b,X		; D5 B0 ; Compare accumulator $B0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $A1D50C.l		; 5C 0C D5 A1 ; Jump long to $A1D50C.l [Flow: jump]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $B1D40C.l		; 5C 0C D4 B1 ; Jump long to $B1D40C.l [Flow: jump]
	cmp $C1.b,X		; D5 C1 ; Compare accumulator $C1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($02.b),Y		; B1 02 ; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $02B1D5.l		; 6F D5 B1 02 ; Add with carry (long) $02B1D5.l [Writes: Accumulator] [Flags: NCVZ]
	and $008D.w		; 2D 8D 00 ; Logical AND $008D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pea $CEB1.w		; F4 B1 CE ; Push absolute address $CEB1.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	stz $44F8.w,X		; 9E F8 44 ; Store zero to $44F8.w,X [Reads: X Index]
	cmp $C0.b,X		; D5 C0 ; Compare accumulator $C0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $6F.b		; 02 6F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CA.b		; E5 CA ; Subtract $CA.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$E1E5.w		; 09 E5 E1 ; Logical OR #$E1E5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $E8.b		; 04 E8 ; Test and set bits $E8.b [Reads: Accumulator] [Flags: Z]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $3F5AC4.l		; 6F C4 5A 3F ; Add with carry (long) $3F5AC4.l [Writes: Accumulator] [Flags: NCVZ]
	jmp $5BC40C.l		; 5C 0C C4 5B ; Jump long to $5BC40C.l [Flow: jump]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	eor $5AF8.w,Y		; 59 F8 5A ; Exclusive OR accumulator with memory $5AF8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $DA0ECE.l,X		; 3F CE 0E DA ; AND accumulator with memory (long,X) $DA0ECE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $00E86F.l		; 5C 6F E8 00 ; Jump long to $00E86F.l [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor ($6F.b)		; 52 6F ; Exclusive OR accumulator with memory (indirect) ($6F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy $54.b		; C4 54 ; Compare $54.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	and $C40C5C.l,X		; 3F 5C 0C C4 ; AND accumulator with memory (long,X) $C40C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $53.b		; A4 53 ; Load $53.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	mvn $CE,$3F		; 54 3F CE ; Move block negative $CE,$3F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl $56DA.w		; 0E DA 56 ; Arithmetic shift left $56DA.w [Flags: NCZ]
	adc $6F50C4.l		; 6F C4 50 6F ; Add with carry (long) $6F50C4.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $F0.b,X		; D5 F0 ; Compare accumulator $F0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $6F.b		; 02 6F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $E0.b,X		; D5 E0 ; Compare accumulator $E0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $D1D50C.l		; 5C 0C D5 D1 ; Jump long to $D1D50C.l [Flow: jump]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $C1D40C.l		; 5C 0C D4 C1 ; Jump long to $C1D40C.l [Flow: jump]
	adc $2F01E8.l		; 6F E8 01 2F ; Add with carry (long) $2F01E8.l [Writes: Accumulator] [Flags: NCVZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	cmp $81D5.w,X		; DD D5 81 ; Compare accumulator $81D5.w,X [Reads: X Index] [Flags: NCZ]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $80D50C.l		; 5C 0C D5 80 ; Jump long to $80D50C.l [Flow: jump]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $91D50C.l		; 5C 0C D5 91 ; Jump long to $91D50C.l [Flow: jump]
	cop $6F.b		; 02 6F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $6F.b		; 02 6F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $01.b,X		; D5 01 ; Compare accumulator $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $E8.b,S		; 03 E8 ; OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2D90D4.l		; 6F D4 90 2D ; Add with carry (long) $2D90D4.l [Writes: Accumulator] [Flags: NCVZ]
	and $D50C5C.l,X		; 3F 5C 0C D5 ; AND accumulator with memory (long,X) $D50C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $8003.w		; 20 03 80 ; Jump to subroutine at $8003.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b,X		; B5 01 ; Load $01.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $CE.b,S		; 03 CE ; OR accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D50ECE.l,X		; 3F CE 0E D5 ; AND accumulator with memory (long,X) $D50ECE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	cmp $11D5.w,X		; DD D5 11 ; Compare accumulator $11D5.w,X [Reads: X Index] [Flags: NCZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $81.b,X		; D5 81 ; Compare accumulator $81.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $40.b,X		; D5 40 ; Compare accumulator $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $41D50C.l		; 5C 0C D5 41 ; Jump long to $41D50C.l [Flow: jump]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $80D40C.l		; 5C 0C D4 80 ; Jump long to $80D40C.l [Flow: jump]
	pea $D530.w		; F4 30 D5 ; Push absolute address $D530.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	pea $D531.w		; F4 31 D5 ; Push absolute address $D531.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	and ($02.b),Y		; 31 02 ; AND accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $40.b,X		; F5 40 ; Subtract $40.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $D4.b		; 02 D4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $F5		; 30 F5 ; Branch if minus to $30, $F5 [Flow: branch]
	eor ($02.b,X)		; 41 02 ; Exclusive OR accumulator with memory ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pei ($31.b)		; D4 31 ; Push effective indirect address ($31.b) [Reads: Direct Page] [Writes: Stack Pointer]
	adc $03C3C5.l		; 6F C5 C3 03 ; Add with carry (long) $03C3C5.l [Writes: Accumulator] [Flags: NCVZ]
	cpy $4A.b		; C4 4A ; Compare $4A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	and $E80C5C.l,X		; 3F 5C 0C E8 ; AND accumulator with memory (long,X) $E80C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $E80C5C.l,X		; 3F 5C 0C E8 ; AND accumulator with memory (long,X) $E80C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $B2, $48		; 62 B2 48 ; Push effective relative address $62, $B2, $48 [Writes: Stack Pointer]
	adc $3F68C4.l		; 6F C4 68 3F ; Add with carry (long) $3F68C4.l [Writes: Accumulator] [Flags: NCVZ]
	jmp $69C40C.l		; 5C 0C C4 69 ; Jump long to $69C40C.l [Flow: jump]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	adc ($F8.b,X)		; 61 F8 ; Add with carry ($F8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $DA0ECE.l,X		; 3F CE 0E DA ; AND accumulator with memory (long,X) $DA0ECE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $3F.b		; 64 3F ; Store zero to $3F.b
	jmp $6AC40C.l		; 5C 0C C4 6A ; Jump long to $6AC40C.l [Flow: jump]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	adc $F8.b,S		; 63 F8 ; Add with carry (stack relative) $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $DA0ECE.l,X		; 3F CE 0E DA ; AND accumulator with memory (long,X) $DA0ECE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $6F.b		; 66 6F ; Rotate right $6F.b [Reads: Direct Page] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $A2, $48		; 62 A2 48 ; Push effective relative address $62, $A2, $48 [Writes: Stack Pointer]
	adc $0E223F.l		; 6F 3F 22 0E ; Add with carry (long) $0E223F.l [Writes: Accumulator] [Flags: NCVZ]
	and $C40C5C.l,X		; 3F 5C 0C C4 ; AND accumulator with memory (long,X) $C40C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $5C3F.w		; 4E 3F 5C ; Logical shift right $5C3F.w [Flags: NCZ]
	tsb $088D.w		; 0C 8D 08 ; Test and set bits $088D.w [Reads: Accumulator] [Flags: Z]
	cmp $0F8D5D.l		; CF 5D 8D 0F ; Compare accumulator (long) $0F8D5D.l [Reads: Accumulator] [Flags: NCZ]
	sbc $8D.b,X		; F5 8D ; Subtract $8D.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($3F.b),Y		; 11 3F ; OR accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $60DD.w,X		; 3D DD 60 ; AND accumulator with memory $60DD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	mvp $C4,$6F		; 44 6F C4 ; Move block positive $C4,$6F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $7D8D.w		; 4D 8D 7D ; Exclusive OR $7D8D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $00F2.w		; CC F2 00 ; Compare $00F2.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $F3.b		; E5 F3 ; Subtract $F3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $2BF0.w		; 4D F0 2B ; Exclusive OR $2BF0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $F3FF48.l		; 0F 48 FF F3 ; OR accumulator with memory (long) $F3FF48.l [Writes: Accumulator] [Flags: NZ]
	jmp $6003.w		; 4C 03 60 ; Jump to $6003.w [Flow: jump]
	sty $4C.b		; 84 4C ; Store Y register to $4C.b [Reads: Y Index]
	cpy $4C.b		; C4 4C ; Compare $4C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sta $F604.w		; 8D 04 F6 ; Store accumulator to $F604.w [Reads: Accumulator]
	ldy $C511.w		; AC 11 C5 ; Load $C511.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	inc $E4F3.w,X		; FE F3 E4 ; Increment memory $E4F3.w,X [Reads: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $6C8D.w		; 20 8D 6C ; Jump to subroutine at $6C8D.w [Writes: Stack Pointer] [Flow: call]
	and $E409F7.l,X		; 3F F7 09 E4 ; AND accumulator with memory (long,X) $E409F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $7D8D.w		; 4D 8D 7D ; Exclusive OR $7D8D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $1C09F7.l,X		; 3F F7 09 1C ; AND accumulator with memory (long,X) $1C09F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $481C.w		; 1C 1C 48 ; Test and reset bits $481C.w [Reads: Accumulator] [Flags: Z]
	sbc $D08880.l,X		; FF 80 88 D0 ; Subtract with carry (long,X) $D08880.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $5F6D.w		; 8D 6D 5F ; Store accumulator to $5F6D.w [Reads: Accumulator]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $5F.b		; C4 5F ; Compare $5F.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	adc $0C5E3F.l		; 6F 3F 5E 0C ; Add with carry (long) $0C5E3F.l [Writes: Accumulator] [Flags: NCVZ]
	adc $FFD5BC.l		; 6F BC D5 FF ; Add with carry (long) $FFD5BC.l [Writes: Accumulator] [Flags: NCVZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $1BC4.w,X		; BC C4 1B ; Load Y register $1BC4.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	eor $F40AB6.l,X		; 5F B6 0A F4 ; Exclusive OR accumulator with memory (long,X) $F40AB6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$44D0.w		; A0 D0 44 ; Load #$44D0.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc [$30.b]		; E7 30 ; Subtract with carry (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $3ED0.w,Y		; F9 D0 3E ; Subtract with carry $3ED0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $47.b		; E4 47 ; Compare $47.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $1A.b		; 24 1A ; Test bits $1A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	sta $3F1004.l		; 8F 04 10 3F ; Store accumulator (long) $3F1004.l [Reads: Accumulator]
	lsr $6E0C.w,X		; 5E 0C 6E ; Logical shift right $6E0C.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	and $5E3F2D.l		; 2F 2D 3F 5E ; AND accumulator with memory (long) $5E3F2D.l [Writes: Accumulator] [Flags: NZ]
	tsb $5C3F.w		; 0C 3F 5C ; Test and set bits $5C3F.w [Reads: Accumulator] [Flags: Z]
	tsb $A1D4.w		; 0C D4 A1 ; Test and set bits $A1D4.w [Reads: Accumulator] [Flags: Z]
	and $D40C5C.l,X		; 3F 5C 0C D4 ; AND accumulator with memory (long,X) $D40C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$5C3F.w		; A0 3F 5C ; Load #$5C3F.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $8460.w		; 0C 60 84 ; Test and set bits $8460.w [Reads: Accumulator] [Flags: Z]
	.db $50, $95		; 50 95 ; Branch if overflow clear to $50, $95 [Flow: branch]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $0380D5.l,X		; 7F D5 80 03 ; Add long $0380D5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $B5		; 80 B5 ; Branch always to $80, $B5 [Flow: branch]
	adc ($03.b,X)		; 61 03 ; Add with carry ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ldy #$CE6D.w		; A0 6D CE ; Load #$CE6D.w into Y register [Writes: Y Index] [Flags: NZ]
	and $D50ECE.l,X		; 3F CE 0E D5 ; AND accumulator with memory (long,X) $D50ECE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	cmp $71D5.w,X		; DD D5 71 ; Compare accumulator $71D5.w,X [Reads: X Index] [Flags: NCZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $61.b,X		; F5 61 ; Subtract $61.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($F5.b),Y		; 11 F5 ; OR accumulator with memory ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $6F		; 10 6F ; Branch if plus to $10, $6F [Flow: branch]
	sbc $126B.w		; ED 6B 12 ; Subtract $126B.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $008DBC.l,X		; FF BC 8D 00 ; Subtract with carry (long,X) $008DBC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $E82D.w,X		; 9E 2D E8 ; Store zero to $E82D.w,X [Reads: X Index]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $44F8.w		; EE F8 44 ; Increment $44F8.w [Flags: NZ]
	sbc ($12.b,S),Y		; F3 12 ; Subtract with carry (stack relative indirect indexed) ($12.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $DA.b		; 06 DA ; Arithmetic shift left $DA.b [Reads: Direct Page] [Flags: NCZ]
	trb $BA.b		; 14 BA ; Test and reset bits $BA.b [Reads: Accumulator] [Flags: Z]
	asl $149A.w		; 0E 9A 14 ; Arithmetic shift left $149A.w [Flags: NCZ]
	adc $BF0C66.l		; 6F 66 0C BF ; Add with carry (long) $BF0C66.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: NZ]
	sbc ($0C.b)		; F2 0C ; Subtract with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $1C0D.w		; 0D 0D 1C ; Logical OR $1C0D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0D2E.w		; 0D 2E 0D ; Logical OR $0D2E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($0D.b,S),Y		; 33 0D ; AND accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $0D.b		; 45 0D ; Exclusive OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $0D4C.w		; 0D 4C 0D ; Logical OR $0D4C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $0D79.w		; 0D 79 0D ; Logical OR $0D79.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $0D, $9F		; 82 0D 9F ; Branch always long to $82, $0D, $9F [Flow: branch]
	ora $0CFD.w		; 0D FD 0C ; Logical OR $0CFD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ora $0D5F.w		; 0D 5F 0D ; Logical OR $0D5F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0D.b,X		; 75 0D ; Add $0D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $0DC2.w		; 0D C2 0D ; Logical OR $0DC2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $000D.w,Y		; F9 0D 00 ; Subtract with carry $000D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0DD8.w		; 0E D8 0D ; Arithmetic shift left $0DD8.w [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $0E68.w		; 0E 68 0E ; Arithmetic shift left $0E68.w [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	ora #$00E8.w		; 09 E8 00 ; Logical OR #$00E8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B03.w		; 8D 03 9B ; Store accumulator to $9B03.w [Reads: Accumulator]
	.db $90, $3F		; 90 3F ; Branch if carry clear to $90, $3F [Flow: branch]
	cmp ($0F.b)		; D2 0F ; Compare accumulator (indirect) ($0F.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cmp ($F0.b,X)		; C1 F0 ; Compare accumulator ($F0.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	and $F5.b,S		; 23 F5 ; AND accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$DE02.w		; E0 02 DE ; Compare #$DE02.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$091B.w		; C0 1B 09 ; Compare #$091B.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor [$5E.b]		; 47 5E ; Exclusive OR accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $D0.b,X		; F5 D0 ; Subtract $D0.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $80, $2F		; 80 2F ; Branch always to $80, $2F [Flow: branch]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	sta $D1.b,X		; 95 D1 ; Store accumulator to $D1.b,X [Reads: Accumulator, X Index]
	cop $D5.b		; 02 D5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	and $2F115B.l,X		; 3F 5B 11 2F ; AND accumulator with memory (long,X) $2F115B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$BB.b]		; 07 BB ; OR accumulator with memory (long) [$BB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$FFE8.w		; C0 E8 FF ; Compare #$FFE8.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $F41166.l,X		; 3F 66 11 F4 ; AND accumulator with memory (long,X) $F41166.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($F0.b),Y		; 91 F0 ; Store accumulator ($F0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora #$30E8.w		; 09 E8 30 ; Logical OR #$30E8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B03.w		; 8D 03 9B ; Store accumulator to $9B03.w [Reads: Accumulator]
	sta ($3F.b),Y		; 91 3F ; Store accumulator ($3F.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp ($0F.b)		; D2 0F ; Compare accumulator (indirect) ($0F.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpx $47.b		; E4 47 ; Compare $47.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $5E.b		; 24 5E ; Test bits $5E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	sbc $31.b,X		; F5 31 ; Subtract $31.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $30.b,X		; F5 30 ; Subtract $30.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $DA.b,S		; 03 DA ; OR accumulator with stack relative $DA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $7D		; 10 7D ; Branch if plus to $10, $7D [Flow: branch]
	sta $12C45C.l,X		; 9F 5C C4 12 ; Store accumulator (long,X) $12C45C.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($F6.b),Y		; 11 F6 ; OR accumulator with memory ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $8011.w,Y		; 79 11 80 ; Add $8011.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $78.b,Y		; B6 78 ; Load X register $78.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ora ($EB.b),Y		; 11 EB ; OR accumulator with memory ($EB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $CF		; 10 CF ; Branch if plus to $10, $CF [Flow: branch]
	cmp $11EB.w,X		; DD EB 11 ; Compare accumulator $11EB.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $78.b,Y		; 96 78 ; Store X register $78.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($FD.b),Y		; 11 FD ; OR accumulator with memory ($FD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $21.b,X		; F5 21 ; Subtract $21.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $CF.b,S		; 03 CF ; OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $51.b,X		; F5 51 ; Subtract $51.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp $0390.w,X		; DD 90 03 ; Compare accumulator $0390.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $12EBBC.l,X		; FF BC EB 12 ; Subtract with carry (long,X) $12EBBC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $8D09EF.l,X		; 3F EF 09 8D ; AND accumulator with memory (long,X) $8D09EF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $E8.b		; 14 E8 ; Test and reset bits $E8.b [Reads: Accumulator] [Flags: Z]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $DA		; 10 DA ; Branch if plus to $10, $DA [Flow: branch]
	.db $10, $AB		; 10 AB ; Branch if plus to $10, $AB [Flow: branch]
	ora ($33.b)		; 12 33 ; OR accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b)		; 12 C8 ; OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $5E4709.l		; 6F 09 47 5E ; Add with carry (long) $5E4709.l [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	trb $DA.b		; 14 DA ; Test and reset bits $DA.b [Reads: Accumulator] [Flags: Z]
	asl $4D.b,X		; 16 4D ; Arithmetic shift left $4D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inc $D060.w		; EE 60 D0 ; Increment $D060.w [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $00E816.l,X		; 1F 16 E8 00 ; Logical OR long $00E816.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$14.b],Y		; D7 14 ; Compare accumulator (long indexed) [$14.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jsr ($092F.w,X)		; FC 2F 09 ; Jump to subroutine indirect indexed ($092F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	and $FC0FEF.l,X		; 3F EF 0F FC ; AND accumulator with memory (long,X) $FC0FEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$14.b],Y		; F7 14 ; Subtract with carry (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$16.b],Y		; 97 16 ; Store accumulator (long indexed) [$16.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp [$14.b],Y		; D7 14 ; Compare accumulator (long indexed) [$14.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc $F071F4.l		; 6F F4 71 F0 ; Add with carry (long) $F071F4.l [Writes: Accumulator] [Flags: NCVZ]
	adc $9B.b		; 65 9B ; Add $9B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($F0.b),Y		; 71 F0 ; Add with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $E8.b		; 05 E8 ; Logical OR $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $DE.b		; 02 DE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $5C		; 70 5C ; Branch if overflow set to $70, $5C [Flow: branch]
	pea $C480.w		; F4 80 C4 ; Push absolute address $C480.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora [$F4.b],Y		; 17 F4 ; OR accumulator with memory (long indexed) [$F4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $FB		; 30 FB ; Branch if minus to $30, $FB [Flow: branch]
	and ($DA.b),Y		; 31 DA ; AND accumulator with memory ($DA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $8D.b		; 14 8D ; Test and reset bits $8D.b [Reads: Accumulator] [Flags: Z]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $F0.b		; 14 F0 ; Test and reset bits $F0.b [Reads: Accumulator] [Flags: Z]
	asl $0730.w,X		; 1E 30 07 ; Arithmetic shift left $0730.w,X [Reads: X Index] [Flags: NCZ]
	jsr ($4030.w,X)		; FC 30 40 ; Jump to subroutine indirect indexed ($4030.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$14.b],Y		; F7 14 ; Subtract with carry (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $6829F0.l		; EF F0 29 68 ; Subtract with carry (long) $6829F0.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$3090.w		; E0 90 30 ; Compare #$3090.w with X register [Reads: X Index] [Flags: NCZ]
	adc $AEFD.w		; 6D FD AE ; Add $AEFD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stx $40.b,Y		; 96 40 ; Store X register $40.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	asl $2FFD.w		; 0E FD 2F ; Arithmetic shift left $2FFD.w [Flags: NCZ]
	dec $17E4.w,X		; DE E4 17 ; Decrement memory $17E4.w,X [Reads: X Index] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora [$D0.b],Y		; 17 D0 ; OR accumulator with memory (long indexed) [$D0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $31.b,X		; F5 31 ; Subtract $31.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $2D.b		; 02 2D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $30.b,X		; F5 30 ; Subtract $30.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $EE.b		; 02 EE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $41F5C8.l		; 2F C8 F5 41 ; AND accumulator with memory (long) $41F5C8.l [Writes: Accumulator] [Flags: NZ]
	cop $2D.b		; 02 2D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $40.b,X		; F5 40 ; Subtract $40.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $EE.b		; 02 EE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $F7FCBE.l		; 2F BE FC F7 ; AND accumulator with memory (long) $F7FCBE.l [Writes: Accumulator] [Flags: NZ]
	trb $2D.b		; 14 2D ; Test and reset bits $2D.b [Reads: Accumulator] [Flags: Z]
	jsr ($14F7.w,X)		; FC F7 14 ; Jump to subroutine indirect indexed ($14F7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $2FAE.w,X		; FD AE 2F ; Subtract with carry $2FAE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($E4.b,S),Y		; B3 E4 ; Load accumulator (stack relative indirect indexed) ($E4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$8D.b]		; 47 8D ; Exclusive OR accumulator with memory (long) [$8D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $09EF3F.l		; 5C 3F EF 09 ; Jump long to $09EF3F.l [Flow: jump]
	sbc ($13.b)		; F2 13 ; Subtract with carry (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pea $F0A0.w		; F4 A0 F0 ; Push absolute address $F0A0.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $A1F4.w,Y		; 19 F4 A1 ; OR accumulator with memory $A1F4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($2F.b,X)		; A1 2F ; Load accumulator ($2F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($E4.b),Y		; 11 E4 ; OR accumulator with memory ($E4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $47.b		; 24 47 ; Test bits $47.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
.INDEX 8
	sep #$13		; E2 13
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $9B03.w		; 8D 03 9B ; Store accumulator to $9B03.w [Reads: Accumulator]
	ldy #$3F.b		; A0 3F ; Load #$3F.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp $0F.b,X		; D5 0F ; Compare accumulator $0F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $F40EC3.l,X		; 3F C3 0E F4 ; AND accumulator with memory (long,X) $F40EC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($F0.b),Y		; B1 F0 ; Load accumulator ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $B0F5.w		; 4C F5 B0 ; Jump to $B0F5.w [Flow: jump]
	cop $DE.b		; 02 DE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $44		; B0 44 ; Branch if carry set to $B0, $44 [Flow: branch]
	sbc $00.b,X		; F5 00 ; Subtract $00.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($75.b,X)		; 01 75 ; Logical OR ($75.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($02.b),Y		; B1 02 ; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	sbc $C1.b,X		; F5 C1 ; Subtract $C1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $2F.b		; 02 2F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $BB40.w		; 0D 40 BB ; Logical OR $BB40.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02F0.w,X		; FD F0 02 ; Subtract with carry $02F0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $60B1.w		; F4 B1 60 ; Push absolute address $60B1.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	cop $D4.b		; 02 D4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($F5.b),Y		; B1 F5 ; Load accumulator ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $A1.b,X		; 95 A1 ; Store accumulator to $A1.b,X [Reads: Accumulator, X Index]
	cop $D5.b		; 02 D5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	cpy $12.b		; C4 12 ; Compare $12.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	trb $901C.w		; 1C 1C 90 ; Test and reset bits $901C.w [Reads: Accumulator] [Flags: Z]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $B1F4FD.l,X		; FF FD F4 B1 ; Subtract with carry (long,X) $B1F4FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc ($90.b),Y		; F1 90 ; Subtract with carry ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $28.b		; 05 28 ; Logical OR $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $042FCF.l		; 0F CF 2F 04 ; OR accumulator with memory (long) $042FCF.l [Writes: Accumulator] [Flags: NZ]
	cmp $008DDD.l		; CF DD 8D 00 ; Compare accumulator (long) $008DDD.l [Reads: Accumulator] [Flags: NCZ]
	and $5F1146.l,X		; 3F 46 11 5F ; AND accumulator with memory (long,X) $5F1146.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($BB09.w)		; 6C 09 BB ; Jump indirect to ($BB09.w) [Flow: jump]
	.db $B0, $E3		; B0 E3 ; Branch if carry set to $B0, $E3 [Flow: branch]
	ora ($F8.b,S),Y		; 13 F8 ; OR accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $F413F2.l		; 6F F2 13 F4 ; Add with carry (long) $F413F2.l [Writes: Accumulator] [Flags: NCVZ]
	cmp ($F0.b,X)		; C1 F0 ; Compare accumulator ($F0.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ora #$E0F5.w		; 09 F5 E0 ; Logical OR #$E0F5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $DE.b		; 02 DE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: NCZ]
	and $F5114E.l,X		; 3F 4E 11 F5 ; AND accumulator with memory (long,X) $F5114E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($03.b),Y		; 31 03 ; AND accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $30F5.w,X		; FD F5 30 ; Subtract with carry $30F5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $DA.b,S		; 03 DA ; OR accumulator with stack relative $DA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	sta ($F0.b),Y		; 91 F0 ; Store accumulator ($F0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $41.b,X		; F5 41 ; Subtract $41.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $40.b,X		; F5 40 ; Subtract $40.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	sbc ($13.b,S),Y		; F3 13 ; Subtract with carry (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $0F.b,X		; 94 0F ; Store Y register $0F.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc ($13.b)		; F2 13 ; Subtract with carry (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $F40EC3.l,X		; 3F C3 0E F4 ; AND accumulator with memory (long,X) $F40EC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$F0.b		; A0 F0 ; Load #$F0.b into Y register [Writes: Y Index] [Flags: NZ]
	asl $A1F4.w		; 0E F4 A1 ; Arithmetic shift left $A1F4.w [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	sbc $71.b,X		; F5 71 ; Subtract $71.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $70.b,X		; F5 70 ; Subtract $70.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	pea $F0B1.w		; F4 B1 F0 ; Push absolute address $F0B1.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lda $F5.b,X		; B5 F5 ; Load $F5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	dec $AFB0.w,X		; DE B0 AF ; Decrement memory $AFB0.w,X [Reads: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($F5.b),Y		; 51 F5 ; Exclusive OR accumulator with memory ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($02.b,X)		; A1 02 ; Load accumulator ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $9560DD.l		; CF DD 60 95 ; Compare accumulator (long) $9560DD.l [Reads: Accumulator] [Flags: NCZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	eor $E210B1.l,X		; 5F B1 10 E2 ; Exclusive OR accumulator with memory (long,X) $E210B1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($CB.b,S),Y		; 13 CB ; OR accumulator (stack relative indirect indexed) ($CB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($3F.b)		; 12 3F ; OR accumulator with memory (indirect) ($3F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	adc $51EB.w		; 6D EB 51 ; Add $51EB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp $8F14CB.l		; CF CB 14 8F ; Compare accumulator (long) $8F14CB.l [Reads: Accumulator] [Flags: NCZ]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($AE.b),Y		; 51 AE ; Exclusive OR accumulator with memory ($AE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $3F147A.l		; CF 7A 14 3F ; Compare accumulator (long) $3F147A.l [Reads: Accumulator] [Flags: NCZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	.db $10, $DA		; 10 DA ; Branch if plus to $10, $DA [Flow: branch]
	.db $10, $6F		; 10 6F ; Branch if plus to $10, $6F [Flow: branch]
.INDEX 8
	sep #$13		; E2 13
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($F5.b),Y		; 51 F5 ; Exclusive OR accumulator with memory ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp $9560DD.l		; CF DD 60 95 ; Compare accumulator (long) $9560DD.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	trb $0290.w		; 1C 90 02 ; Test and reset bits $0290.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $CFC1FB.l,X		; FF FB C1 CF ; Subtract with carry (long,X) $CFC1FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF48.w,X		; DD 48 FF ; Compare accumulator $FF48.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $F5CF.w,Y		; 59 CF F5 ; Exclusive OR accumulator with memory $F5CF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	cmp $0301F5.l		; CF F5 01 03 ; Compare accumulator (long) $0301F5.l [Reads: Accumulator] [Flags: NCZ]
	cmp $DDCFDD.l		; CF DD CF DD ; Compare accumulator (long) $DDCFDD.l [Reads: Accumulator] [Flags: NCZ]
	cmp $21.b,X		; D5 21 ; Compare accumulator $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1E15.w		; 0D 15 1E ; Logical OR $1E15.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$4234.w		; 29 34 42 ; Logical AND #$4234.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$6E.b]		; 67 6E ; Add with carry (long) [$6E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($77.b,S),Y		; 73 77 ; Add with carry (stack relative indirect indexed) ($77.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	jmp ($7E7D.w,X)		; 7C 7D 7E ; Jump indirect indexed to ($7E7D.w,X) [Reads: X Index] [Flow: jump]
	adc $00007F.l,X		; 7F 7F 00 00 ; Add long $00007F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FEF0DB.l,X		; BF DB F0 FE ; Load long $FEF0DB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb BG34NBA.w		; 0C 0C 21 ; Test and set bits BG34NBA.w [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora ($FE.b,S),Y		; 13 FE ; OR accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($F9.b,S),Y		; F3 F9 ; Subtract with carry (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01.b		; E5 01 ; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($2CEB.w,X)		; FC EB 2C ; Jump to subroutine indirect indexed ($2CEB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $4D0D.w,X		; 3C 0D 4D ; Test bits $4D0D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jmp ($5C4C.w)		; 6C 4C 5C ; Jump indirect to ($5C4C.w) [Flow: jump]
	and $5C2D.w,X		; 3D 2D 5C ; AND accumulator with memory $5C2D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $484A.w		; 4E 4A 48 ; Logical shift right $484A.w [Flags: NCZ]
	eor $0E.b		; 45 0E ; Exclusive OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$464B.w		; 49 4B 46 ; Exclusive OR #$464B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $08DE08.l,X		; 5F 08 DE 08 ; Exclusive OR accumulator with memory (long,X) $08DE08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $09.b		; 65 09 ; Add $09.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pea $8C09.w		; F4 09 8C ; Push absolute address $8C09.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $D60B.w		; 2C 0B D6 ; Test bits $D60B.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tsb $0D4A.w		; 0C 4A 0D ; Test and set bits $0D4A.w [Reads: Accumulator] [Flags: Z]
	trb $0E.b		; 14 0E ; Test and reset bits $0E.b [Reads: Accumulator] [Flags: Z]
	nop		; EA ; No operation
	asl $0FCD.w		; 0E CD 0F ; Arithmetic shift left $0FCD.w [Flags: NCZ]
	ldx $2A10.w,Y		; BE 10 2A ; Load X register $2A10.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lsr $65.b,X		; 56 65 ; Logical shift right $65.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc ($20.b)		; 72 20 ; Add with carry (indirect) ($20.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor ($31.b,S),Y		; 53 31 ; XOR accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol $3032.w		; 2E 32 30 ; Rotate left $3032.w [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cmp $F4.b		; C5 F4 ; Compare $F4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp $F5.b		; C5 F5 ; Compare $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $6800.w		; F4 00 68 ; Push absolute address $6800.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpy $F9D0.w		; CC D0 F9 ; Compare $F9D0.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $F4EC20.l		; 2F 20 EC F4 ; AND accumulator with memory (long) $F4EC20.l [Writes: Accumulator] [Flags: NZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lsr $00F4.w,X		; 5E F4 00 ; Logical shift right $00F4.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	sbc $F5.b		; E5 F5 ; Subtract $F5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $D700.w		; F4 00 D7 ; Push absolute address $D700.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	trb $FC.b		; 14 FC ; Test and reset bits $FC.b [Reads: Accumulator] [Flags: Z]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora $2F.b,X		; 15 2F ; OR accumulator with memory $2F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $EA10.w		; EC 10 EA ; Compare $EA10.w with X register [Reads: X Index] [Flags: NCZ]
	lsr $00F4.w,X		; 5E F4 00 ; Logical shift right $00F4.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $E5		; 10 E5 ; Branch if plus to $10, $E5 [Flow: branch]
	sbc $F6.b		; E5 F6 ; Subtract $F6.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	trb $EC.b		; 14 EC ; Test and reset bits $EC.b [Reads: Accumulator] [Flags: Z]
	pea $E500.w		; F4 00 E5 ; Push absolute address $E500.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $00.b,X		; F5 00 ; Subtract $00.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $00F4.w		; CC F4 00 ; Compare $00F4.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $CD		; D0 CD ; Branch if not equal to $D0, $CD [Flow: branch]
	cmp $C931.w		; CD 31 C9 ; Compare $C931.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $2802E4.l		; 6F E4 02 28 ; Add with carry (long) $2802E4.l [Writes: Accumulator] [Flags: NCVZ]
	and $DCF55D.l,X		; 3F 5D F5 DC ; AND accumulator with memory (long,X) $DCF55D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $8D.b,S		; 03 8D ; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $80CD.w		; 0E CD 80 ; Arithmetic shift left $80CD.w [Flags: NCZ]
	cmp #$03C1.w		; C9 C1 03 ; Compare #$03C1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $CB.b		; E5 CB ; Subtract $CB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $A0.b,X		; F6 A0 ; Increment memory $A0.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $96.b,S		; 03 96 ; OR accumulator with stack relative $96.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02.b		; 64 02 ; Store zero to $02.b
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	jmp.w [$4CDC]		; DC DC 4C ; Jump long indirect [$4CDC] [Flow: jump]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	and $03E433.l		; 2F 33 E4 03 ; AND accumulator with memory (long) $03E433.l [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $D8F55D.l,X		; 3F 5D F5 D8 ; AND accumulator with memory (long,X) $D8F55D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $E2C5.w,Y		; 19 C5 E2 ; OR accumulator with memory $E2C5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $8D.b,S		; 03 8D ; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $80CD.w		; 0E CD 80 ; Arithmetic shift left $80CD.w [Flags: NCZ]
	cmp #$03C1.w		; C9 C1 03 ; Compare #$03C1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $CD.b		; E5 CD ; Subtract $CD.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $A0.b,X		; F6 A0 ; Increment memory $A0.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $96.b,S		; 03 96 ; OR accumulator with stack relative $96.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $03.b		; 64 03 ; Store zero to $03.b
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	jmp.w [$4CDC]		; DC DC 4C ; Jump long indirect [$4CDC] [Flow: jump]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	and $C0CC05.l		; 2F 05 CC C0 ; AND accumulator with memory (long) $C0CC05.l [Writes: Accumulator] [Flags: NZ]
	ora $2F.b,S		; 03 2F ; OR accumulator with stack relative $2F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $60.b,X		; 15 60 ; OR accumulator with memory $60.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $E81A.w		; CD 1A E8 ; Compare $E81A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $80, $C5		; 80 C5 ; Branch always to $80, $C5 [Flow: branch]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta $260E.w		; 8D 0E 26 ; Store accumulator to $260E.w [Reads: Accumulator]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jmp.w [$4CDC]		; DC DC 4C ; Jump long indirect [$4CDC] [Flow: jump]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	jmp $CCF590.l		; 5C 90 F5 CC ; Jump long to $CCF590.l [Flow: jump]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $03C8.w		; CC C8 03 ; Compare $03C8.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$0403.w		; C9 03 04 ; Compare #$0403.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpy $1A.b		; C4 1A ; Compare $1A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc #$03E2.w		; E9 E2 03 ; Subtract #$03E2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $03.b,S		; E3 03 ; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $03.b,S		; E3 03 ; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cpx $4A.b		; E4 4A ; Compare $4A.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $80, $A5		; 80 A5 ; Branch always to $80, $A5 [Flow: branch]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cpy $4A.b		; C4 4A ; Compare $4A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sta $3F4D.w		; 8D 4D 3F ; Store accumulator to $3F4D.w [Reads: Accumulator]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $03C4E9.l		; 6F E9 C4 03 ; Add with carry (long) $03C4E9.l [Writes: Accumulator] [Flags: NCVZ]
	cmp #$03C0.w		; C9 C0 03 ; Compare #$03C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx $03C5.w		; EC C5 03 ; Compare $03C5.w with X register [Reads: X Index] [Flags: NCZ]
	cpy $03C1.w		; CC C1 03 ; Compare $03C1.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $8D.b,S		; 03 8D ; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $09F73F.l		; 5C 3F F7 09 ; Jump long to $09F73F.l [Flow: jump]
	and $6F1569.l,X		; 3F 69 15 6F ; AND accumulator with memory (long,X) $6F1569.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $05.b		; C4 05 ; Compare $05.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $D0.b		; 05 D0 ; Logical OR $D0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E9.b		; 06 E9 ; Arithmetic shift left $E9.b [Reads: Direct Page] [Flags: NCZ]
	cmp $01D003.l		; CF 03 D0 01 ; Compare accumulator (long) $01D003.l [Reads: Accumulator] [Flags: NCZ]
	adc $C900CD.l		; 6F CD 00 C9 ; Add with carry (long) $C900CD.l [Writes: Accumulator] [Flags: NCVZ]
	cpx $03.b		; E4 03 ; Compare $03.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $E40E.w		; CD 0E E4 ; Compare $E40E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $D5.b,S		; 03 D5 ; OR accumulator with stack relative $D5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($03.b,X)		; A1 03 ; Load accumulator ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $80, $C5		; 80 C5 ; Branch always to $80, $C5 [Flow: branch]
	cmp $5C8D03.l		; CF 03 8D 5C ; Compare accumulator (long) $5C8D03.l [Reads: Accumulator] [Flags: NCZ]
	and $E209F7.l,X		; 3F F7 09 E2 ; AND accumulator with memory (long,X) $E209F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($F5.b,X)		; 01 F5 ; Logical OR ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $01C417.l,X		; FF 17 C4 01 ; Subtract with carry (long,X) $01C417.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	adc $E40CCD.l		; 6F CD 0C E4 ; Add with carry (long) $E40CCD.l [Writes: Accumulator] [Flags: NCVZ]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $D5.b,S		; 03 D5 ; OR accumulator with stack relative $D5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($03.b,X)		; A1 03 ; Load accumulator ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
.INDEX 16
	rep #$1A		; C2 1A
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $3F5C.w		; 8D 5C 3F ; Store accumulator to $3F5C.w [Reads: Accumulator]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy #$CFC5.w		; C0 C5 CF ; Compare #$CFC5.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $03.b,S		; E3 03 ; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp $E3.b		; C5 E3 ; Compare $E3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $E8.b,S		; 03 E8 ; OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $03CB25.l,X		; 3F 25 CB 03 ; AND accumulator with memory (long,X) $03CB25.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $CB.b		; C5 CB ; Compare $CB.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $E8.b,S		; 03 E8 ; OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $03CD25.l,X		; 3F 25 CD 03 ; AND accumulator with memory (long,X) $03CD25.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $CD.b		; C5 CD ; Compare $CD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx $01.b		; E4 01 ; Compare $01.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $D0, $8C		; D0 8C ; Branch if not equal to $D0, $8C [Flow: branch]
	adc $E505C4.l		; 6F C4 05 E5 ; Add with carry (long) $E505C4.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $05F003.l		; CF 03 F0 05 ; Compare accumulator (long) $05F003.l [Reads: Accumulator] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $E4.b		; C5 E4 ; Compare $E4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $6F.b,S		; 03 6F ; OR accumulator with stack relative $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $03E4.w		; 8C E4 03 ; Store Y register to $03E4.w [Reads: Y Index]
	sbc $E4.b		; E5 E4 ; Subtract $E4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $05E8.w		; 0C E8 05 ; Test and set bits $05E8.w [Reads: Accumulator] [Flags: Z]
	cpy $01.b		; C4 01 ; Compare $01.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	and $E8130B.l,X		; 3F 0B 13 E8 ; AND accumulator with memory (long,X) $E8130B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6F.b,X)		; 01 6F ; Logical OR ($6F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jmp $03E5C5.l		; 5C C5 E5 03 ; Jump long to $03E5C5.l [Flow: jump]
	sta $3F70.w		; 8D 70 3F ; Store accumulator to $3F70.w [Reads: Accumulator]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($E5E5.w,X)		; FC E5 E5 ; Jump to subroutine indirect indexed ($E5E5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E560.w		; 8D 60 E5 ; Store accumulator to $E560.w [Reads: Accumulator]
	sbc $03.b		; E5 03 ; Subtract $03.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $FC09F7.l,X		; 3F F7 09 FC ; AND accumulator with memory (long,X) $FC09F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E5.b		; E5 E5 ; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $E4144D.l,X		; 5F 4D 14 E4 ; Exclusive OR accumulator with memory (long,X) $E4144D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $D003E4.l		; 6F E4 03 D0 ; Add with carry (long) $D003E4.l [Writes: Accumulator] [Flags: NCVZ]
	ora ($6F.b,X)		; 01 6F ; Logical OR ($6F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $021A2E.l,X		; FF 2E 1A 02 ; Subtract with carry (long,X) $021A2E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $603F3A.l		; 2F 3A 3F 60 ; AND accumulator with memory (long) $603F3A.l [Writes: Accumulator] [Flags: NZ]
	ora ($E9.b)		; 12 E9 ; OR accumulator with memory (indirect) ($E9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$E403.w		; C0 03 E4 ; Compare #$E403.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$D0D5.w		; C0 D5 D0 ; Compare #$D0D5.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $E4.b,S		; 03 E4 ; OR accumulator with stack relative $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $03A0D5.l,X		; 3F D5 A0 03 ; AND accumulator with memory (long,X) $03A0D5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $D5.b,S		; 03 D5 ; OR accumulator with stack relative $D5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($03.b,X)		; A1 03 ; Load accumulator ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $C503.w		; CD 03 C5 ; Compare $C503.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $E503.w		; CD 03 E5 ; Compare $E503.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta $3F5C.w		; 8D 5C 3F ; Store accumulator to $3F5C.w [Reads: Accumulator]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A0.b,X		; F5 A0 ; Subtract $A0.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $5D.b,S		; 03 5D ; OR accumulator with stack relative $5D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $99.b,X		; F5 99 ; Subtract $99.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $03C4.w,Y		; 19 C4 03 ; OR accumulator with memory $03C4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $BF		; D0 BF ; Branch if not equal to $D0, $BF [Flow: branch]
	adc $2EFFE8.l		; 6F E8 FF 2E ; Add with carry (long) $2EFFE8.l [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cop $2F.b		; 02 2F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $E91232.l,X		; 3F 32 12 E9 ; AND accumulator with memory (long,X) $E91232.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$E403.w		; C0 03 E4 ; Compare #$E403.w with Y register [Reads: Y Index] [Flags: NCZ]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $03A0D5.l,X		; 3F D5 A0 03 ; AND accumulator with memory (long,X) $03A0D5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $02.b		; E4 02 ; Compare $02.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpy #$D0D5.w		; C0 D5 D0 ; Compare #$D0D5.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $E8.b,S		; 03 E8 ; OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $D5.b,S		; 03 D5 ; OR accumulator with stack relative $D5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($03.b,X)		; A1 03 ; Load accumulator ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ora $E5.b,S		; 03 E5 ; OR accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta $3F5C.w		; 8D 5C 3F ; Store accumulator to $3F5C.w [Reads: Accumulator]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A0.b,X		; F5 A0 ; Subtract $A0.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $5D.b,S		; 03 5D ; OR accumulator with stack relative $5D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $9D.b,X		; F5 9D ; Subtract $9D.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpy $02.b		; C4 02 ; Compare $02.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $D0, $BF		; D0 BF ; Branch if not equal to $D0, $BF [Flow: branch]
	adc $03E4E5.l		; 6F E5 E4 03 ; Add with carry (long) $03E4E5.l [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	eor $E51381.l,X		; 5F 81 13 E5 ; Exclusive OR accumulator with memory (long,X) $E51381.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $E0C503.l		; CF 03 C5 E0 ; Compare accumulator (long) $E0C503.l [Reads: Accumulator] [Flags: NCZ]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $CD		; 30 CD ; Branch if minus to $30, $CD [Flow: branch]
	asl $80E8.w		; 0E E8 80 ; Arithmetic shift left $80E8.w [Flags: NCZ]
	cmp $C1.b		; C5 C1 ; Compare $C1.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$9003.w		; E0 03 90 ; Compare #$9003.w with X register [Reads: X Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$03C0.w		; C9 C0 03 ; Compare #$03C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $5C9F.w,X		; 7D 9F 5C ; Add $5C9F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C2.b		; C5 C2 ; Compare $C2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $F5.b,S		; 03 F5 ; OR accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	cpy $20.b		; C4 20 ; Compare $20.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $A1.b,X		; F5 A1 ; Subtract $A1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($F5.b)		; 12 F5 ; OR accumulator with memory (indirect) ($F5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$F003.w		; A0 03 F0 ; Load #$F003.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($4C15.w,X)		; FC 15 4C ; Jump to subroutine indirect indexed ($4C15.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ora $C81D.w,X		; 1D 1D C8 ; OR accumulator with memory $C81D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $D7		; 10 D7 ; Branch if plus to $10, $D7 [Flow: branch]
	adc $03C0C9.l		; 6F C9 C0 03 ; Add with carry (long) $03C0C9.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $A1.b,X		; F5 A1 ; Subtract $A1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $9C.b,S		; 03 9C ; OR accumulator with stack relative $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $A1.b,X		; D5 A1 ; Compare accumulator $A1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($F514.w,X)		; 7C 14 F5 ; Jump indirect indexed to ($F514.w,X) [Reads: X Index] [Flow: jump]
	ldy #$1C03.w		; A0 03 1C ; Load #$1C03.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $BFF6.w,X		; FD F6 BF ; Subtract with carry $BFF6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$D5.b],Y		; 17 D5 ; OR accumulator with memory (long indexed) [$D5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($03.b),Y		; 91 03 ; Store accumulator ($03.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpy $2D.b		; C4 2D ; Compare $2D.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	inc $BE.b,X		; F6 BE ; Increment memory $BE.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora [$D5.b],Y		; 17 D5 ; OR accumulator with memory (long indexed) [$D5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	cpy $2C.b		; C4 2C ; Compare $2C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	eor $E51619.l,X		; 5F 19 16 E5 ; Exclusive OR accumulator with memory (long,X) $E51619.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy $F003.w		; CC 03 F0 ; Compare $F003.w with Y register [Reads: Y Index] [Flags: NCZ]
	rol $0ECD.w		; 2E CD 0E ; Rotate left $0ECD.w [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $80, $C5		; 80 C5 ; Branch always to $80, $C5 [Flow: branch]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	tsb $03CC.w		; 0C CC 03 ; Test and set bits $03CC.w [Reads: Accumulator] [Flags: Z]
	.db $90, $1B		; 90 1B ; Branch if carry clear to $90, $1B [Flow: branch]
	cmp #$03C0.w		; C9 C0 03 ; Compare #$03C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $5C9F.w,X		; 7D 9F 5C ; Add $5C9F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C2.b		; C5 C2 ; Compare $C2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $F5.b,S		; 03 F5 ; OR accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	cpy $20.b		; C4 20 ; Compare $20.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $A1.b,X		; F5 A1 ; Subtract $A1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	ldy #$F003.w		; A0 03 F0 ; Load #$F003.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($4C15.w,X)		; FC 15 4C ; Jump to subroutine indirect indexed ($4C15.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ora $101D.w,X		; 1D 1D 10 ; OR accumulator with memory $101D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C96F.w,Y		; D9 6F C9 ; Compare accumulator $C96F.w,Y [Reads: Y Index] [Flags: NCZ]
	cpy #$F503.w		; C0 03 F5 ; Compare #$F503.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda ($03.b,X)		; A1 03 ; Load accumulator ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stz $A1D5.w		; 9C D5 A1 ; Store zero to $A1D5.w
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$F514]		; DC 14 F5 ; Jump long indirect [$F514] [Flow: jump]
	ldy #$1C03.w		; A0 03 1C ; Load #$1C03.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $1FF6.w,X		; FD F6 1F ; Subtract with carry $1FF6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $91.b,X		; D5 91 ; Compare accumulator $91.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $1EF6.w		; 2D F6 1E ; Logical AND $1EF6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $90.b,X		; D5 90 ; Compare accumulator $90.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $195F.w		; 2C 5F 19 ; Test bits $195F.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $E5.b,X		; 16 E5 ; Arithmetic shift left $E5.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $C503.w		; CD 03 C5 ; Compare $C503.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	dec $F003.w		; CE 03 F0 ; Decrement $F003.w [Flags: NZ]
	rol $0ECD.w		; 2E CD 0E ; Rotate left $0ECD.w [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $80, $C5		; 80 C5 ; Branch always to $80, $C5 [Flow: branch]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	tsb $03CE.w		; 0C CE 03 ; Test and set bits $03CE.w [Reads: Accumulator] [Flags: Z]
	.db $90, $1B		; 90 1B ; Branch if carry clear to $90, $1B [Flow: branch]
	cmp #$03C0.w		; C9 C0 03 ; Compare #$03C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $5C9F.w,X		; 7D 9F 5C ; Add $5C9F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C2.b		; C5 C2 ; Compare $C2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $F5.b,S		; 03 F5 ; OR accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	cpy $20.b		; C4 20 ; Compare $20.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $A1.b,X		; F5 A1 ; Subtract $A1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	ldy #$F003.w		; A0 03 F0 ; Load #$F003.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($4C15.w,X)		; FC 15 4C ; Jump to subroutine indirect indexed ($4C15.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ora $101D.w,X		; 1D 1D 10 ; OR accumulator with memory $101D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C96F.w,Y		; D9 6F C9 ; Compare accumulator $C96F.w,Y [Reads: Y Index] [Flags: NCZ]
	cpy #$F503.w		; C0 03 F5 ; Compare #$F503.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda ($03.b,X)		; A1 03 ; Load accumulator ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stz $A1D5.w		; 9C D5 A1 ; Store zero to $A1D5.w
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $F5.b,X		; 15 F5 ; OR accumulator with memory $F5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$1C03.w		; A0 03 1C ; Load #$1C03.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $1BF6.w,X		; FD F6 1B ; Subtract with carry $1BF6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $91D5.w,Y		; 19 D5 91 ; OR accumulator with memory $91D5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $1AF6.w		; 2D F6 1A ; Logical AND $1AF6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $90D5.w,Y		; 19 D5 90 ; OR accumulator with memory $90D5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $195F.w		; 2C 5F 19 ; Test bits $195F.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $E8.b,X		; 16 E8 ; Arithmetic shift left $E8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $E9.b		; 00 E9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$D503.w		; C0 03 D5 ; Compare #$D503.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy #$E403.w		; A0 03 E4 ; Load #$E403.w into Y register [Writes: Y Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $A5		; 80 A5 ; Branch always to $80, $A5 [Flow: branch]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cpy $1A.b		; C4 1A ; Compare $1A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $CBE5.w		; 0C E5 CB ; Test and set bits $CBE5.w [Reads: Accumulator] [Flags: Z]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $C1.b		; A5 C1 ; Load $C1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ora $2F.b,S		; 03 2F ; OR accumulator with stack relative $2F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $C1E5.w,X		; 1E E5 C1 ; Arithmetic shift left $C1E5.w,X [Reads: X Index] [Flags: NCZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $F003.w		; CD 03 F0 ; Compare $F003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $CDE5.w		; 0C E5 CD ; Test and set bits $CDE5.w [Reads: Accumulator] [Flags: Z]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $C1.b		; A5 C1 ; Load $C1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $2F03.w		; CD 03 2F ; Compare $2F03.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $CF.b		; E5 CF ; Subtract $CF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $C1.b		; A5 C1 ; Load $C1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $44D803.l		; CF 03 D8 44 ; Compare accumulator (long) $44D803.l [Reads: Accumulator] [Flags: NCZ]
	sbc $11.b,X		; F5 11 ; Subtract $11.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0C.b		; 66 0C ; Rotate right $0C.b [Reads: Direct Page] [Flags: NCZ]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $03.b,S		; C3 03 ; Compare accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	bit $4A.b		; 24 4A ; Test bits $4A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	cpx $4A.b		; E4 4A ; Compare $4A.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $C1.b		; 85 C1 ; Store accumulator to $C1.b [Reads: Accumulator]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $3F4D.w		; 8D 4D 3F ; Store accumulator to $3F4D.w [Reads: Accumulator]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $C1.b		; A5 C1 ; Load $C1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $03.b,S		; E3 03 ; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $03C1E5.l		; 6F E5 C1 03 ; Add with carry (long) $03C1E5.l [Writes: Accumulator] [Flags: NCVZ]
	and $CF.b		; 25 CF ; Logical AND $CF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $C1E5.w		; 0E E5 C1 ; Arithmetic shift left $C1E5.w [Flags: NCZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $693F.w		; 0C 3F 69 ; Test and set bits $693F.w [Reads: Accumulator] [Flags: Z]
	ora $5F.b,X		; 15 5F ; OR accumulator with memory $5F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $3F.b,X		; 15 3F ; OR accumulator with memory $3F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$5F15.w		; 69 15 5F ; Add #$5F15.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp ($3F14.w,X)		; 7C 14 3F ; Jump indirect indexed to ($3F14.w,X) [Reads: X Index] [Flow: jump]
	adc #$5F15.w		; 69 15 5F ; Add #$5F15.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$3F14]		; DC 14 3F ; Jump long indirect [$3F14] [Flow: jump]
	cmp $12.b,S		; C3 12 ; Compare accumulator (stack relative) $12.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp #$03C0.w		; C9 C0 03 ; Compare #$03C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $91.b,X		; F5 91 ; Subtract $91.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $90.b,X		; F5 90 ; Subtract $90.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $DA.b,S		; 03 DA ; OR accumulator with stack relative $DA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $B0F5.w		; 2C F5 B0 ; Test bits $B0F5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $9C.b,S		; 03 9C ; OR accumulator with stack relative $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $B0.b,X		; D5 B0 ; Compare accumulator $B0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$3A16.w		; C9 16 3A ; Compare #$3A16.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $C0E5.w		; 2C E5 C0 ; Test bits $C0E5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $9F.b,S		; 03 9F ; OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $03C2C5.l		; 5C C5 C2 03 ; Jump long to $03C2C5.l [Flow: jump]
	cmp $E700.w		; CD 00 E7 ; Compare $E700.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $B3F0.w		; 2C F0 B3 ; Test bits $B3F0.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $71		; 30 71 ; Branch if minus to $30, $71 [Flow: branch]
	cpx $03C0.w		; EC C0 03 ; Compare $03C0.w with X register [Reads: X Index] [Flags: NCZ]
	dec $B1.b,X		; D6 B1 ; Decrement memory $B1.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $3A.b,S		; 03 3A ; OR accumulator with stack relative $3A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cpy $10.b		; C4 10 ; Compare $10.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $30, $63		; 30 63 ; Branch if minus to $30, $63 [Flow: branch]
	eor $C1E5.w,X		; 5D E5 C1 ; Exclusive OR accumulator with memory $C1E5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $2EF003.l		; CF 03 F0 2E ; Compare accumulator (long) $2EF003.l [Reads: Accumulator] [Flags: NCZ]
	adc $05F0.w,X		; 7D F0 05 ; Add $05F0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$03E5.w		; E9 E5 03 ; Subtract #$03E5.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $4E		; D0 4E ; Branch if not equal to $D0, $4E [Flow: branch]
	cpy $10.b		; C4 10 ; Compare $10.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpx $03C2.w		; EC C2 03 ; Compare $03C2.w with X register [Reads: X Index] [Flags: NCZ]
	and $CD09F7.l,X		; 3F F7 09 CD ; AND accumulator with memory (long,X) $CD09F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	eor $10E4.w,X		; 5D E4 10 ; Exclusive OR accumulator with memory $10E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $03C2.w		; EC C2 03 ; Compare $03C2.w with X register [Reads: X Index] [Flags: NCZ]
	jsr ($F73F.w,X)		; FC 3F F7 ; Jump to subroutine indirect indexed ($F73F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$2F7D.w		; 09 7D 2F ; Logical OR #$2F7D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $EC.b,X		; 35 EC ; Logical AND $EC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rep #$03		; C2 03 ; Reset processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jsr ($F73F.w,X)		; FC 3F F7 ; Jump to subroutine indirect indexed ($F73F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$282F.w		; 09 2F 28 ; Logical OR #$282F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $C0E9.w,X		; 7D E9 C0 ; Add $C0E9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $21.b,X		; D5 21 ; Compare accumulator $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $E8.b,S		; 03 E8 ; OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $51.b,X		; D5 51 ; Compare accumulator $51.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $E3.b,S		; 03 E3 ; OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $C308.w		; 20 08 C3 ; Jump to subroutine at $C308.w [Writes: Stack Pointer] [Flow: call]
	jsr $8F0A.w		; 20 0A 8F ; Jump to subroutine at $8F0A.w [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $D01110.l		; 8F 10 11 D0 ; Store accumulator (long) $D01110.l [Reads: Accumulator]
	ora $8F.b,S		; 03 8F ; OR accumulator with stack relative $8F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $11.b		; 04 11 ; Test and set bits $11.b [Reads: Accumulator] [Flags: Z]
	sta $3F1000.l		; 8F 00 10 3F ; Store accumulator (long) $3F1000.l [Reads: Accumulator]
	sty $0F.b,X		; 94 0F ; Store Y register $0F.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cmp $3A00.w		; CD 00 3A ; Compare $3A00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cpx #$03D0.w		; E0 D0 03 ; Compare #$03D0.w with X register [Reads: X Index] [Flags: NCZ]
	eor $68174A.l,X		; 5F 4A 17 68 ; Exclusive OR accumulator with memory (long,X) $68174A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $67F0.w,Y		; F9 F0 67 ; Subtract with carry $67F0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $E906D0.l,X		; FF D0 06 E9 ; Subtract with carry (long,X) $E906D0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$5F03.w		; C0 03 5F ; Compare #$5F03.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $14.b,X		; 95 14 ; Store accumulator to $14.b,X [Reads: Accumulator, X Index]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $023F.w,X		; FD 3F 02 ; Subtract with carry $023F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$C1E5.w		; 09 E5 C1 ; Logical OR #$C1E5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $17		; 90 17 ; Branch if carry clear to $90, $17 [Flow: branch]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $B1.b,X		; F5 B1 ; Subtract $B1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $D5.b,S		; 03 D5 ; OR accumulator with stack relative $D5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	sbc ($13.b)		; F2 13 ; Subtract with carry (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	pea $F0A0.w		; F4 A0 F0 ; Push absolute address $F0A0.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $17.b,X		; 76 17 ; Rotate right $17.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $02E80F.l		; 2F 0F E8 02 ; AND accumulator with memory (long) $02E80F.l [Writes: Accumulator] [Flags: NZ]
	adc $B0.b,X		; 75 B0 ; Add $B0.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $8D.b,S		; 03 8D ; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $09F73F.l		; 5C 3F F7 09 ; Jump long to $09F73F.l [Flow: jump]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cpx $2D.b		; E4 2D ; Compare $2D.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $91.b,X		; D5 91 ; Compare accumulator $91.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $E4.b,S		; 03 E4 ; OR accumulator with stack relative $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $90D5.w		; 2C D5 90 ; Test bits $90D5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $E5.b,S		; 03 E5 ; OR accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	and $CF.b		; 25 CF ; Logical AND $CF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $5F.b		; 06 5F ; Arithmetic shift left $5F.b [Reads: Direct Page] [Flags: NCZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $5F.b,X		; 15 5F ; OR accumulator with memory $5F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($5F14.w,X)		; 7C 14 5F ; Jump indirect indexed to ($5F14.w,X) [Reads: X Index] [Flow: jump]
	jmp.w [$CD14]		; DC 14 CD ; Jump long indirect [$CD14] [Flow: jump]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	mvp $3F,$FD		; 44 FD 3F ; Move block positive $3F,$FD [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $17		; 90 17 ; Branch if carry clear to $90, $17 [Flow: branch]
	cmp $3A00.w		; CD 00 3A ; Compare $3A00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	pei ($A1.b)		; D4 A1 ; Push effective indirect address ($A1.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $3A00.w		; CD 00 3A ; Compare $3A00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc #$03C0.w		; E9 C0 03 ; Subtract #$03C0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	pei ($A0.b)		; D4 A0 ; Push effective indirect address ($A0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	and $00CD.w		; 2D CD 00 ; Logical AND $00CD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	inc $C0E9.w		; EE E9 C0 ; Increment $C0E9.w [Flags: NZ]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvp $AB,$3F		; 44 3F AB ; Move block positive $AB,$3F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl $C05F.w		; 0E 5F C0 ; Arithmetic shift left $C05F.w [Flags: NCZ]
	asl $CD.b,X		; 16 CD ; Arithmetic shift left $CD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $2CE7.w		; 2C E7 2C ; Test bits $2CE7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sta $CF09.w		; 8D 09 CF ; Store accumulator to $CF09.w [Reads: Accumulator]
	eor $C2EC.w,X		; 5D EC C2 ; Exclusive OR accumulator with memory $C2EC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8F.b,S		; 03 8F ; OR accumulator with stack relative $8F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($F5.b)		; 12 F5 ; OR accumulator with memory (indirect) ($F5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3D09F7.l,X		; 3F F7 09 3D ; AND accumulator with memory (long,X) $3D09F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($126E.w,X)		; FC 6E 12 ; Jump to subroutine indirect indexed ($126E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F5.b,X		; F5 F5 ; Subtract $F5.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $03C0.w		; EC C0 03 ; Compare $03C0.w with X register [Reads: X Index] [Flags: NCZ]
	dec $21.b,X		; D6 21 ; Decrement memory $21.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $5F02.w		; 20 02 5F ; Jump to subroutine at $5F02.w [Writes: Stack Pointer] [Flow: call]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$13		; E2 13
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $9B03.w		; 8D 03 9B ; Store accumulator to $9B03.w [Reads: Accumulator]
	ldy #$3F.b		; A0 3F ; Load #$3F.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp $0F.b,X		; D5 0F ; Compare accumulator $0F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $61.b,X		; F5 61 ; Subtract $61.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $60.b,X		; F5 60 ; Subtract $60.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $DA.b,S		; 03 DA ; OR accumulator with stack relative $DA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $8F		; 10 8F ; Branch if plus to $10, $8F [Flow: branch]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $2D096C.l,X		; 5F 6C 09 2D ; Exclusive OR accumulator with memory (long,X) $2D096C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E85C.w		; 8D 5C E8 ; Store accumulator to $E85C.w [Reads: Accumulator]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $4C8D.w		; AE 8D 4C ; Load $4C8D.w into X register [Writes: X Index] [Flags: NZ]
	eor $9009F7.l,X		; 5F F7 09 90 ; Exclusive OR accumulator with memory (long,X) $9009F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	ora [$52.b],Y		; 17 52 ; OR accumulator with memory (long indexed) [$52.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $62.b		; 26 62 ; Rotate left $62.b [Reads: Direct Page] [Flags: NCZ]
	rol $77.b		; 26 77 ; Rotate left $77.b [Reads: Direct Page] [Flags: NCZ]
	rol $87.b		; 26 87 ; Rotate left $87.b [Reads: Direct Page] [Flags: NCZ]
	rol $4F.b		; 26 4F ; Rotate left $4F.b [Reads: Direct Page] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $273928.l		; 4F 28 39 27 ; Exclusive OR accumulator with memory (long) $273928.l [Writes: Accumulator] [Flags: NZ]
	rol $27.b,X		; 36 27 ; Rotate left $27.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	stx $BC1C.w		; 8E 1C BC ; Store X register to $BC1C.w [Reads: X Index]
	trb $1BA3.w		; 1C A3 1B ; Test and reset bits $1BA3.w [Reads: Accumulator] [Flags: Z]
	.db $62, $1B, $0E		; 62 1B 0E ; Push effective relative address $62, $1B, $0E [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $2C1B.w,X		; 1D 1B 2C ; OR accumulator with memory $2C1B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $AC1B.w,X		; 3E 1B AC ; Rotate left $AC1B.w,X [Reads: X Index] [Flags: NCZ]
	asl $1EC8.w,X		; 1E C8 1E ; Arithmetic shift left $1EC8.w,X [Reads: X Index] [Flags: NCZ]
	cmp ($1A.b)		; D2 1A ; Compare accumulator (indirect) ($1A.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc ($1A.b,X)		; E1 1A ; Subtract with carry ($1A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	sbc $1C241A.l,X		; FF 1A 24 1C ; Subtract with carry (long,X) $1C241A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1B.b,S		; E3 1B ; Subtract stack-relative $1B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $1B.b,S		; A3 1B ; Load accumulator (stack relative) $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $62, $1B, $0E		; 62 1B 0E ; Push effective relative address $62, $1B, $0E [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $2C1B.w,X		; 1D 1B 2C ; OR accumulator with memory $2C1B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $021B.w,X		; 3E 1B 02 ; Rotate left $021B.w,X [Reads: X Index] [Flags: NCZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: NCZ]
	rol $34.b		; 26 34 ; Rotate left $34.b [Reads: Direct Page] [Flags: NCZ]
	rol $43.b		; 26 43 ; Rotate left $43.b [Reads: Direct Page] [Flags: NCZ]
	rol $DD.b		; 26 DD ; Rotate left $DD.b [Reads: Direct Page] [Flags: NCZ]
	and $D7.b		; 25 D7 ; Logical AND $D7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $B7.b		; 25 B7 ; Logical AND $B7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $E3.b		; 25 E3 ; Logical AND $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $AD.b		; 25 AD ; Logical AND $AD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $C7.b		; 25 C7 ; Logical AND $C7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $78.b		; 25 78 ; Logical AND $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $9C.b		; 24 9C ; Test bits $9C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rol $14.b		; 26 14 ; Rotate left $14.b [Reads: Direct Page] [Flags: NCZ]
	bit $04.b		; 24 04 ; Test bits $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $C3.b		; 24 C3 ; Test bits $C3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FA.b		; 24 FA ; Test bits $FA.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $F0.b,S		; 23 F0 ; AND accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $CD.b,S		; 23 CD ; AND accumulator with stack relative $CD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $A0.b,S		; 23 A0 ; AND accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $90.b,S		; 23 90 ; AND accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $2C.b,S		; 23 2C ; AND accumulator with stack relative $2C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $44.b,S		; 23 44 ; AND accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $56.b,S		; 23 56 ; AND accumulator with stack relative $56.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $6E.b,S		; 23 6E ; AND accumulator with stack relative $6E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $16.b,S		; 23 16 ; AND accumulator with stack relative $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $07.b,S		; 23 07 ; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $BB.b,S		; 23 BB ; AND accumulator with stack relative $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $E92577.l		; 22 77 25 E9 ; Jump to subroutine long $E92577.l [Writes: Stack Pointer] [Flow: call]
	jsl $CF22DA.l		; 22 DA 22 CF ; Jump to subroutine long $CF22DA.l [Writes: Stack Pointer] [Flow: call]
	jsl $B12107.l		; 22 07 21 B1 ; Jump to subroutine long $B12107.l [Writes: Stack Pointer] [Flow: call]
	jsl $9622A5.l		; 22 A5 22 96 ; Jump to subroutine long $9622A5.l [Writes: Stack Pointer] [Flow: call]
	jsl $522844.l		; 22 44 28 52 ; Jump to subroutine long $522844.l [Writes: Stack Pointer] [Flow: call]
	jsl $3F2287.l		; 22 87 22 3F ; Jump to subroutine long $3F2287.l [Writes: Stack Pointer] [Flow: call]
	bit $33.b		; 24 33 ; Test bits $33.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsr $1FF2.w		; 20 F2 1F ; Jump to subroutine at $1FF2.w [Writes: Stack Pointer] [Flow: call]
	cmp $A61F.w,Y		; D9 1F A6 ; Compare accumulator $A61F.w,Y [Reads: Y Index] [Flags: NCZ]
	jsr $1FCA.w		; 20 CA 1F ; Jump to subroutine at $1FCA.w [Writes: Stack Pointer] [Flow: call]
	eor [$1F.b]		; 47 1F ; Exclusive OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($1E.b),Y		; F1 1E ; Subtract with carry ($1E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $4720.w		; CE 20 47 ; Decrement $4720.w [Flags: NZ]
	ora $1CDC.w,X		; 1D DC 1C ; OR accumulator with memory $1CDC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $1C671F.l		; 6F 1F 67 1C ; Add with carry (long) $1C671F.l [Writes: Accumulator] [Flags: NCVZ]
	stz $1C.b		; 64 1C ; Store zero to $1C.b
	eor $1A.b,S		; 43 1A ; Exclusive OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $1F9C1F.l		; 6F 1F 9C 1F ; Add with carry (long) $1F9C1F.l [Writes: Accumulator] [Flags: NCVZ]
	sbc [$1F.b]		; E7 1F ; Subtract with carry (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $24, $37		; 62 24 37 ; Push effective relative address $62, $24, $37 [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $3523B5.l		; 22 B5 23 35 ; Jump to subroutine long $3523B5.l [Writes: Stack Pointer] [Flow: call]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0000.w,X		; 3D 00 00 ; AND accumulator with memory $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $39.b		; 00 39 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($36.b,S),Y		; 33 36 ; AND accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $1800.w,X		; 3C 00 18 ; Test bits $1800.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr $4A25.w		; 4E 25 4A ; Logical shift right $4A25.w [Flags: NCZ]
	jsl $B7220E.l		; 22 0E 22 B7 ; Jump to subroutine long $B7220E.l [Writes: Stack Pointer] [Flow: call]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($3D.b,X)		; 21 3D ; Logical AND ($3D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $C121E6.l		; 22 E6 21 C1 ; Jump to subroutine long $C121E6.l [Writes: Stack Pointer] [Flow: call]
	and ($A9.b,X)		; 21 A9 ; Logical AND ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($98.b,X)		; 21 98 ; Logical AND ($98.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($8E.b,X)		; 21 8E ; Logical AND ($8E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($B5.b,X)		; 21 B5 ; Logical AND ($B5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($82.b,X)		; 21 82 ; Logical AND ($82.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($B9.b,X)		; 21 B9 ; Logical AND ($B9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($4F.b,X)		; 21 4F ; Logical AND ($4F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($5E.b,X)		; 21 5E ; Logical AND ($5E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($3B.b,X)		; 21 3B ; Logical AND ($3B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($6C.b,X)		; 21 6C ; Logical AND ($6C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $2F.b		; 24 2F ; Test bits $2F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($23.b,X)		; 21 23 ; Logical AND ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($A6.b,X)		; 21 A6 ; Logical AND ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $DD.b		; 25 DD ; Logical AND $DD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $250A.w		; 20 0A 25 ; Jump to subroutine at $250A.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $20B6.w,X		; 1E B6 20 ; Arithmetic shift left $20B6.w,X [Reads: X Index] [Flags: NCZ]
	.db $62, $1A, $A6		; 62 1A A6 ; Push effective relative address $62, $1A, $A6 [Writes: Stack Pointer]
	jsr $2091.w		; 20 91 20 ; Jump to subroutine at $2091.w [Writes: Stack Pointer] [Flow: call]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jsr $276C.w		; 20 6C 27 ; Jump to subroutine at $276C.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$27		; E2 27
	cmp $200126.l		; CF 26 01 20 ; Compare accumulator (long) $200126.l [Reads: Accumulator] [Flags: NCZ]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $7B1E.w,X		; 9D 1E 7B ; Store accumulator to $7B1E.w,X [Reads: Accumulator, X Index]
	asl $1E40.w,X		; 1E 40 1E ; Arithmetic shift left $1E40.w,X [Reads: X Index] [Flags: NCZ]
	sbc [$26.b],Y		; F7 26 ; Subtract with carry (long indexed) [$26.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($1E.b,X)		; 21 1E ; Logical AND ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1E.b)		; 12 1E ; OR accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($1D.b,S),Y		; F3 1D ; Subtract with carry (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$1D.b		; C0 1D ; Compare #$1D.b with Y register [Reads: Y Index] [Flags: NCZ]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $801D.w,X		; 5D 1D 80 ; Exclusive OR accumulator with memory $801D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1B53.w,X		; 1D 53 1B ; OR accumulator with memory $1B53.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta ($1D.b,S),Y		; 93 1D ; Store accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ror $1D.b		; 66 1D ; Rotate right $1D.b [Reads: Direct Page] [Flags: NCZ]
	adc ($1D.b,S),Y		; 73 1D ; Add with carry (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda [$1A.b]		; A7 1A ; Load accumulator (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $1D.b,X		; B4 1D ; Load Y register $1D.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sta ($1E.b,S),Y		; 93 1E ; Store accumulator (stack relative indirect indexed) ($1E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora [$20.b],Y		; 17 20 ; OR accumulator with memory (long indexed) [$20.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: NCZ]
	ror $21.b,X		; 76 21 ; Rotate right $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $94.b		; 24 94 ; Test bits $94.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $9E.b		; 24 9E ; Test bits $9E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $80.b		; 24 80 ; Test bits $80.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $39.b		; 00 39 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $33.b,X		; 35 33 ; Logical AND $33.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3F3E.w,X		; 3D 3E 3F ; AND accumulator with memory $3F3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3F3E.w,X		; 3D 3E 3F ; AND accumulator with memory $3F3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $50, $F9		; 50 F9 ; Branch if overflow clear to $50, $F9 [Flow: branch]
	lda $BE0800.l		; AF 00 08 BE ; Load long $BE0800.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $AFF946.l		; 0F 46 F9 AF ; OR accumulator with memory (long) $AFF946.l [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $320B.w,Y		; BE 0B 32 ; Load X register $320B.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $00AF.w,Y		; F9 AF 00 ; Subtract with carry $00AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $1E0F.w,Y		; BE 0F 1E ; Load X register $1E0F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $00AF.w,Y		; F9 AF 00 ; Subtract with carry $00AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00BE.w		; 0C BE 00 ; Test and set bits $00BE.w [Reads: Accumulator] [Flags: Z]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $A16E.w		; 0C 6E A1 ; Test and set bits $A16E.w [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $6E.b		; 24 6E ; Test bits $6E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $9CF9.w,X		; 3C F9 9C ; Test bits $9CF9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($0A.b,X)		; A1 0A ; Load accumulator ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $F9.b		; 46 F9 ; Logical shift right $F9.b [Reads: Direct Page] [Flags: NCZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	lda $0A.b,S		; A3 0A ; Load accumulator (stack relative) $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $F9		; 50 F9 ; Branch if overflow clear to $50, $F9 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $F964.w		; 0C 64 F9 ; Test and set bits $F964.w [Reads: Accumulator] [Flags: Z]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	ora [$7D.b]		; 07 7D ; OR accumulator with memory (long) [$7D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00A1.w,Y		; F9 A1 00 ; Subtract with carry $00A1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $9D.b		; 05 9D ; Logical OR $9D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $A3F9.w,X		; 7D F9 A3 ; Add $A3F9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $00F107.l		; AF 07 F1 00 ; Load long $00F107.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A9.b		; 04 A9 ; Test and set bits $A9.b [Reads: Accumulator] [Flags: Z]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ror $A9F9.w		; 6E F9 A9 ; Rotate right $A9F9.w [Flags: NCZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ror $ADF9.w		; 6E F9 AD ; Rotate right $ADF9.w [Flags: NCZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $0800F1.l,X		; 5F F1 00 08 ; Exclusive OR accumulator with memory (long,X) $0800F1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	.db $50, $F1		; 50 F1 ; Branch if overflow clear to $50, $F1 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($F1.b,X)		; 41 F1 ; Exclusive OR accumulator with memory ($F1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $F12D08.l		; AF 08 2D F1 ; Load long $F12D08.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $F1.b,X		; 16 F1 ; Arithmetic shift left $F1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $07E000.l		; AF 00 E0 07 ; Load long $07E000.l into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $B2F9.w,X		; 3C F9 B2 ; Test bits $B2F9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lsr $F9.b		; 46 F9 ; Logical shift right $F9.b [Reads: Direct Page] [Flags: NCZ]
	ldx $0800.w,Y		; BE 00 08 ; Load X register $0800.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp ($08.b,X)		; C1 08 ; Compare accumulator ($08.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	eor ($F1.b,X)		; 41 F1 ; Exclusive OR accumulator with memory ($F1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $3208.w,Y		; BE 08 32 ; Load X register $3208.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($08.b,X)		; C1 08 ; Compare accumulator ($08.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	and $00F1.w		; 2D F1 00 ; Logical AND $00F1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $BE.b		; 05 BE ; Logical OR $BE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $A1.b,S		; A3 A1 ; Load accumulator (stack relative) $A1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $00E000.l,X		; 9F 00 E0 00 ; Store accumulator (long,X) $00E000.l,X [Reads: Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $9FF9.w,X		; 3C F9 9F ; Test bits $9FF9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BC.b,X		; 15 BC ; OR accumulator with memory $BC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $B7F9.w,X		; 3C F9 B7 ; Test bits $B7F9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $98.b,X		; 15 98 ; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $F964.w		; 0C 64 F9 ; Test and set bits $F964.w [Reads: Accumulator] [Flags: Z]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	tsb $1B9F.w		; 0C 9F 1B ; Test and set bits $1B9F.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $F964.w		; 0C 64 F9 ; Test and set bits $F964.w [Reads: Accumulator] [Flags: Z]
	stz $0C00.w		; 9C 00 0C ; Store zero to $0C00.w
	sta ($1B.b,S),Y		; 93 1B ; Store accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $82, $00, $E0		; 82 00 E0 ; Branch always long to $82, $00, $E0 [Flow: branch]
	asl $2810.w		; 0E 10 28 ; Arithmetic shift left $2810.w [Flags: NCZ]
	ldx $2810.w		; AE 10 28 ; Load $2810.w into X register [Writes: X Index] [Flags: NZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	asl $34B2.w,X		; 1E B2 34 ; Arithmetic shift left $34B2.w,X [Reads: X Index] [Flags: NCZ]
	asl $00BA.w,X		; 1E BA 00 ; Arithmetic shift left $00BA.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	lda ($10.b)		; B2 10 ; Load accumulator (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $10B4.w,X		; 1E B4 10 ; Arithmetic shift left $10B4.w,X [Reads: X Index] [Flags: NCZ]
	asl $00B6.w,X		; 1E B6 00 ; Arithmetic shift left $00B6.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	lda $2810.w,X		; BD 10 28 ; Load $2810.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $10.b,Y		; B6 10 ; Load X register $10.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	asl $10B1.w,X		; 1E B1 10 ; Arithmetic shift left $10B1.w,X [Reads: X Index] [Flags: NCZ]
	trb $AA.b		; 14 AA ; Test and reset bits $AA.b [Reads: Accumulator] [Flags: Z]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	lda ($10.b,S),Y		; B3 10 ; Load accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $AE.b		; 14 AE ; Test and reset bits $AE.b [Reads: Accumulator] [Flags: Z]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	lda [$10.b]		; A7 10 ; Load accumulator (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A2.b		; 05 A2 ; Logical OR $A2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $00B4.w,Y		; F9 B4 00 ; Subtract with carry $00B4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0CB9.w		; 0C B9 0C ; Test and set bits $0CB9.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	asl $1E.b,X		; 16 1E ; Arithmetic shift left $1E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $B2B0.w		; 0E B0 B2 ; Arithmetic shift left $B2B0.w [Flags: NCZ]
	lda [$B2.b],Y		; B7 B2 ; Load accumulator (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B0AB.w		; 0E AB B0 ; Arithmetic shift left $B0AB.w [Flags: NCZ]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $0E.b,X		; B4 0E ; Load Y register $0E.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $B4B2.w		; AD B2 B4 ; Load $B4B2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $66B4.w,Y		; B9 B4 66 ; Load $66B4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B5.b,X		; B4 B5 ; Load Y register $B5.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda [$78.b],Y		; B7 78 ; Load accumulator (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B5		; B0 B5 ; Branch if carry set to $B0, $B5 [Flow: branch]
	lda $BBBE.w,Y		; B9 BE BB ; Load $BBBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $BC.b		; 66 BC ; Rotate right $BC.b [Reads: Direct Page] [Flags: NCZ]
	asl $BBBC.w		; 0E BC BB ; Arithmetic shift left $BBBC.w [Flags: NCZ]
	lda $B9B7.w,Y		; B9 B7 B9 ; Load $B9B7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B2AB.w		; 0E AB B2 ; Arithmetic shift left $B2AB.w [Flags: NCZ]
	ldy $B7.b,X		; B4 B7 ; Load Y register $B7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B2.b,X		; B5 B2 ; Load $B2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $FFB070.l		; AF 70 B0 FF ; Load long $FFB070.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	asl $AB3C.w		; 0E 3C AB ; Arithmetic shift left $AB3C.w [Flags: NCZ]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	lda [$B2.b],Y		; B7 B2 ; Load accumulator (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B0AB.w		; 0E AB B0 ; Arithmetic shift left $B0AB.w [Flags: NCZ]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $0E.b,X		; B4 0E ; Load Y register $0E.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $B4B2.w		; AD B2 B4 ; Load $B4B2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $66B4.w,Y		; B9 B4 66 ; Load $66B4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B5.b,X		; B4 B5 ; Load Y register $B5.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda [$78.b],Y		; B7 78 ; Load accumulator (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B5		; B0 B5 ; Branch if carry set to $B0, $B5 [Flow: branch]
	lda $BBBE.w,Y		; B9 BE BB ; Load $BBBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $BC.b		; 66 BC ; Rotate right $BC.b [Reads: Direct Page] [Flags: NCZ]
	asl $BBBC.w		; 0E BC BB ; Arithmetic shift left $BBBC.w [Flags: NCZ]
	lda $B9B7.w,Y		; B9 B7 B9 ; Load $B9B7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B2AB.w		; 0E AB B2 ; Arithmetic shift left $B2AB.w [Flags: NCZ]
	ldy $B7.b,X		; B4 B7 ; Load Y register $B7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B2.b,X		; B5 B2 ; Load $B2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $FFB078.l		; AF 78 B0 FF ; Load long $FFB078.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	asl $1E.b,X		; 16 1E ; Arithmetic shift left $1E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $B2B0.w		; 0E B0 B2 ; Arithmetic shift left $B2B0.w [Flags: NCZ]
	lda [$B2.b],Y		; B7 B2 ; Load accumulator (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B0AB.w		; 0E AB B0 ; Arithmetic shift left $B0AB.w [Flags: NCZ]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $0E.b,X		; B4 0E ; Load Y register $0E.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $B4B2.w		; AD B2 B4 ; Load $B4B2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $66B4.w,Y		; B9 B4 66 ; Load $66B4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B5.b,X		; B4 B5 ; Load Y register $B5.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda [$78.b],Y		; B7 78 ; Load accumulator (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B5		; B0 B5 ; Branch if carry set to $B0, $B5 [Flow: branch]
	lda $BBBE.w,Y		; B9 BE BB ; Load $BBBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $BC.b		; 66 BC ; Rotate right $BC.b [Reads: Direct Page] [Flags: NCZ]
	asl $BBBC.w		; 0E BC BB ; Arithmetic shift left $BBBC.w [Flags: NCZ]
	lda $B9B7.w,Y		; B9 B7 B9 ; Load $B9B7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B2AB.w		; 0E AB B2 ; Arithmetic shift left $B2AB.w [Flags: NCZ]
	ldy $B7.b,X		; B4 B7 ; Load Y register $B7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B2.b,X		; B5 B2 ; Load $B2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $00B070.l		; AF 70 B0 00 ; Load long $00B070.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	asl $AB3C.w		; 0E 3C AB ; Arithmetic shift left $AB3C.w [Flags: NCZ]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	lda [$B2.b],Y		; B7 B2 ; Load accumulator (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B0AB.w		; 0E AB B0 ; Arithmetic shift left $B0AB.w [Flags: NCZ]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $0E.b,X		; B4 0E ; Load Y register $0E.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $B4B2.w		; AD B2 B4 ; Load $B4B2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $66B4.w,Y		; B9 B4 66 ; Load $66B4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B5.b,X		; B4 B5 ; Load Y register $B5.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda [$78.b],Y		; B7 78 ; Load accumulator (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B5		; B0 B5 ; Branch if carry set to $B0, $B5 [Flow: branch]
	lda $BBBE.w,Y		; B9 BE BB ; Load $BBBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $BC.b		; 66 BC ; Rotate right $BC.b [Reads: Direct Page] [Flags: NCZ]
	asl $BBBC.w		; 0E BC BB ; Arithmetic shift left $BBBC.w [Flags: NCZ]
	lda $B9B7.w,Y		; B9 B7 B9 ; Load $B9B7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B4.b		; 66 B4 ; Rotate right $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $B2AB.w		; 0E AB B2 ; Arithmetic shift left $B2AB.w [Flags: NCZ]
	ldy $B7.b,X		; B4 B7 ; Load Y register $B7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($66.b)		; B2 66 ; Load accumulator (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B2.b,X		; B5 B2 ; Load $B2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $00B078.l		; AF 78 B0 00 ; Load long $00B078.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	stx $4E08.w		; 8E 08 4E ; Store X register to $4E08.w [Reads: X Index]
	sta $640C.w		; 8D 0C 64 ; Store accumulator to $640C.w [Reads: Accumulator]
	sty $7C12.w		; 8C 12 7C ; Store Y register to $7C12.w [Reads: Y Index]
	sta $580C.w		; 8D 0C 58 ; Store accumulator to $580C.w [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($5C.b)		; 12 5C ; OR accumulator with memory (indirect) ($5C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit #$0C.b		; 89 0C ; Test bits #$0C.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $62, $8B, $08		; 62 8B 08 ; Push effective relative address $62, $8B, $08 [Writes: Stack Pointer]
	bit $0C8C.w		; 2C 8C 0C ; Test bits $0C8C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	mvp $18,$89		; 44 89 18 ; Move block positive $18,$89 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	mvp $30,$8C		; 44 8C 30 ; Move block positive $30,$8C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	lsr $008B.w		; 4E 8B 00 ; Logical shift right $008B.w [Flags: NCZ]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($14.b)		; 32 14 ; AND accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0098.w,Y		; F9 98 00 ; Subtract with carry $0098.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $2A60.w,X		; 9E 60 2A ; Store zero to $2A60.w,X [Reads: X Index]
	trb $00F1.w		; 1C F1 00 ; Test and reset bits $00F1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$60.b		; A2 60 ; Load #$60.b into X register [Writes: X Index] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1E60.w,X		; 9E 60 1E ; Store zero to $1E60.w,X [Reads: X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $1960.w,Y		; 99 60 19 ; Store accumulator to $1960.w,Y [Reads: Y Index, Accumulator]
	and $00F1.w		; 2D F1 00 ; Logical AND $00F1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and ($F1.b)		; 32 F1 ; AND accumulator with memory (indirect) ($F1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $3018E0.l,X		; FF E0 18 30 ; Subtract with carry (long,X) $3018E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $32.b		; 14 32 ; Test and reset bits $32.b [Reads: Accumulator] [Flags: Z]
	sbc $0091.w,Y		; F9 91 00 ; Subtract with carry $0091.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $94		; 30 94 ; Branch if minus to $30, $94 [Flow: branch]
	.db $30, $23		; 30 23 ; Branch if minus to $30, $23 [Flow: branch]
	and $F1.b,S		; 23 F1 ; AND accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($30.b),Y		; 91 30 ; Store accumulator ($30.b),Y [Reads: Direct Page, Y Index, Accumulator]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $00F1.w		; 1C F1 00 ; Test and reset bits $00F1.w [Reads: Accumulator] [Flags: Z]
	.db $30, $97		; 30 97 ; Branch if minus to $30, $97 [Flow: branch]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $F1.b		; 14 F1 ; Test and reset bits $F1.b [Reads: Accumulator] [Flags: Z]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($FF.b),Y		; 91 FF ; Store accumulator ($FF.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $9FF9.w,X		; 3C F9 9F ; Test bits $9FF9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $F1		; 50 F1 ; Branch if overflow clear to $50, $F1 [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $F1.b		; 64 F1 ; Store zero to $F1.b
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $5018.w,X		; BC 18 50 ; Load Y register $5018.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $F1.b		; 64 F1 ; Store zero to $F1.b
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $5018.w,X		; BC 18 50 ; Load Y register $5018.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $F1.b		; 64 F1 ; Store zero to $F1.b
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $5018.w,X		; BC 18 50 ; Load Y register $5018.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $00F1.w,X		; 3C F1 00 ; Test bits $00F1.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $9F.b,X		; 15 9F ; OR accumulator with memory $9F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $BE280C.l		; 0F 0C 28 BE ; OR accumulator with memory (long) $BE280C.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $320C.w,Y		; BE 0C 32 ; Load X register $320C.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $BE18.w,Y		; BE 18 BE ; Load X register $BE18.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $BE3C.w		; 0C 3C BE ; Test and set bits $BE3C.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $460C.w,Y		; BE 0C 46 ; Load X register $460C.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $BE18.w,Y		; BE 18 BE ; Load X register $BE18.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $BE3C.w		; 0C 3C BE ; Test and set bits $BE3C.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $320C.w,Y		; BE 0C 32 ; Load X register $320C.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $BE18.w,Y		; BE 18 BE ; Load X register $BE18.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $BE28.w		; 0C 28 BE ; Test and set bits $BE28.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $140C.w,Y		; BE 0C 14 ; Load X register $140C.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $BE18.w,Y		; BE 18 BE ; Load X register $BE18.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $9FF9.w,X		; 3C F9 9F ; Test bits $9FF9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $F1		; 50 F1 ; Branch if overflow clear to $50, $F1 [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $F1.b		; 64 F1 ; Store zero to $F1.b
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $30, $78		; 30 78 ; Branch if minus to $30, $78 [Flow: branch]
	lda $C360B9.l		; AF B9 60 C3 ; Load long $C360B9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $30, $78		; 30 78 ; Branch if minus to $30, $78 [Flow: branch]
	ldx $20.b,Y		; B6 20 ; Load X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $BE60.w,Y		; BE 60 BE ; Load X register $BE60.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $AF00.w		; 20 00 AF ; Jump to subroutine at $AF00.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $78		; 30 78 ; Branch if minus to $30, $78 [Flow: branch]
	ldy $10.b,X		; B4 10 ; Load Y register $10.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $BC60.w,X		; BC 60 BC ; Load Y register $BC60.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2810.w		; 0E 10 28 ; Arithmetic shift left $2810.w [Flags: NCZ]
	lda $B9.b,X		; B5 B9 ; Load $B9.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	ldy $1E10.w,X		; BC 10 1E ; Load Y register $1E10.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $1410.w,X		; BC 10 14 ; Load Y register $1410.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $0A10.w,X		; BC 10 0A ; Load Y register $0A10.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $0008.w		; 0E 08 00 ; Arithmetic shift left $0008.w [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	lda [$BC.b],Y		; B7 BC ; Load accumulator (long indexed) [$BC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	ldy $1410.w,X		; BC 10 14 ; Load Y register $1410.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $0A10.w,X		; BC 10 0A ; Load Y register $0A10.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $0510.w,X		; BC 10 05 ; Load Y register $0510.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $A85010.l		; 0F 10 50 A8 ; OR accumulator with memory (long) $A85010.l [Writes: Accumulator] [Flags: NZ]
	lda $B9B4.w		; AD B4 B9 ; Load $B9B4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $C0		; 30 C0 ; Branch if minus to $30, $C0 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $AA0008.l		; 0F 08 00 AA ; OR accumulator with memory (long) $AA0008.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $50		; 10 50 ; Branch if plus to $10, $50 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $B0, $B7		; B0 B7 ; Branch if carry set to $B0, $B7 [Flow: branch]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $28.b		; 04 28 ; Test and set bits $28.b [Reads: Accumulator] [Flags: Z]
	lda $ADAE.w		; AD AE AD ; Load $ADAE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AF3C04.l		; AF 04 3C AF ; Load long $AF3C04.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $ADAE.w		; AE AE AD ; Load $ADAE.w into X register [Writes: X Index] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	ldx $AFAD.w		; AE AD AF ; Load $AFAD.w into X register [Writes: X Index] [Flags: NZ]
	lda $5A04.w		; AD 04 5A ; Load $5A04.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AFAE.w		; AE AE AF ; Load $AFAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $5004.w		; AE 04 50 ; Load $5004.w into X register [Writes: X Index] [Flags: NZ]
	lda $AFAE.w		; AD AE AF ; Load $AFAE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $3C04.w		; AE 04 3C ; Load $3C04.w into X register [Writes: X Index] [Flags: NZ]
	lda $ADAE.w		; AD AE AD ; Load $ADAE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AD2804.l		; AF 04 28 AD ; Load long $AD2804.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AFAD.w		; AE AD AF ; Load $AFAD.w into X register [Writes: X Index] [Flags: NZ]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	lda $ADAE.w		; AD AE AD ; Load $ADAE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $0AE000.l		; AF 00 E0 0A ; Load long $0AE000.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$64.b]		; 07 64 ; OR accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00A6.w,Y		; F9 A6 00 ; Subtract with carry $00A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	ora [$64.b]		; 07 64 ; OR accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00A6.w,Y		; F9 A6 00 ; Subtract with carry $00A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	ora [$64.b]		; 07 64 ; OR accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00A6.w,Y		; F9 A6 00 ; Subtract with carry $00A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	ora [$64.b]		; 07 64 ; OR accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00A6.w,Y		; F9 A6 00 ; Subtract with carry $00A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $F964.w		; 0C 64 F9 ; Test and set bits $F964.w [Reads: Accumulator] [Flags: Z]
	stz $0C00.w		; 9C 00 0C ; Store zero to $0C00.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stx $E000.w		; 8E 00 E0 ; Store X register to $E000.w [Reads: X Index]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	ldx $0C00.w,Y		; BE 00 0C ; Load X register $0C00.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda [$0F.b],Y		; B7 0F ; Load accumulator (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $F9		; 50 F9 ; Branch if overflow clear to $50, $F9 [Flow: branch]
	ldx $0C00.w,Y		; BE 00 0C ; Load X register $0C00.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda [$0F.b],Y		; B7 0F ; Load accumulator (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $BEF9.w,X		; 3C F9 BE ; Test bits $BEF9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$0F.b],Y		; B7 0F ; Load accumulator (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $00BE.w,Y		; F9 BE 00 ; Subtract with carry $00BE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00B7.w		; 0C B7 00 ; Test and set bits $00B7.w [Reads: Accumulator] [Flags: Z]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	ora $28.b,X		; 15 28 ; OR accumulator with memory $28.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00AB.w,Y		; F9 AB 00 ; Subtract with carry $00AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($B0.b)		; 12 B0 ; OR accumulator with memory (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $32.b,X		; 15 32 ; OR accumulator with memory $32.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00AD.w,Y		; F9 AD 00 ; Subtract with carry $00AD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($B2.b)		; 12 B2 ; OR accumulator with memory (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3C.b,X		; 15 3C ; OR accumulator with memory $3C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00AF.w,Y		; F9 AF 00 ; Subtract with carry $00AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($B4.b)		; 12 B4 ; OR accumulator with memory (indirect) ($B4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $46.b,X		; 15 46 ; OR accumulator with memory $46.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00B1.w,Y		; F9 B1 00 ; Subtract with carry $00B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($B6.b)		; 12 B6 ; OR accumulator with memory (indirect) ($B6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $50.b,X		; 15 50 ; OR accumulator with memory $50.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00B3.w,Y		; F9 B3 00 ; Subtract with carry $00B3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($B8.b)		; 12 B8 ; OR accumulator with memory (indirect) ($B8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $5A.b,X		; 15 5A ; OR accumulator with memory $5A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00B5.w,Y		; F9 B5 00 ; Subtract with carry $00B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($BA.b)		; 12 BA ; OR accumulator with memory (indirect) ($BA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $64.b,X		; 15 64 ; OR accumulator with memory $64.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00B7.w,Y		; F9 B7 00 ; Subtract with carry $00B7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($BC.b)		; 12 BC ; OR accumulator with memory (indirect) ($BC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $6E.b,X		; 15 6E ; OR accumulator with memory $6E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $00B9.w,Y		; F9 B9 00 ; Subtract with carry $00B9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($BE.b)		; 12 BE ; OR accumulator with memory (indirect) ($BE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $F130.w,X		; BC 30 F1 ; Load Y register $F130.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $E000.w		; 8C 00 E0 ; Store Y register to $E000.w [Reads: Y Index]
	ora $AD501C.l		; 0F 1C 50 AD ; OR accumulator with memory (long) $AD501C.l [Writes: Accumulator] [Flags: NZ]
	cpy #$30.b		; C0 30 ; Compare #$30.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	asl $AA00.w		; 0E 00 AA ; Arithmetic shift left $AA00.w [Flags: NCZ]
	trb $B450.w		; 1C 50 B4 ; Test and reset bits $B450.w [Reads: Accumulator] [Flags: Z]
	lda $E000.w,Y		; B9 00 E0 ; Load $E000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,S),Y		; 13 04 ; OR accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $B5.b		; 64 B5 ; Store zero to $B5.b
	ldy $E0.b,X		; B4 E0 ; Load Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $9D		; 50 9D ; Branch if overflow clear to $50, $9D [Flow: branch]
	tsb $5A.b		; 04 5A ; Test and set bits $5A.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $20.b,X		; 16 20 ; Arithmetic shift left $20.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $9D9B.w,X		; 3C 9B 9D ; Test bits $9D9B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $9B209A.l,X		; 7F 9A 20 9B ; Add long $9B209A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $9A7F.w,X		; 9D 7F 9A ; Store accumulator to $9A7F.w,X [Reads: Accumulator, X Index]
	jsr $9D9B.w		; 20 9B 9D ; Jump to subroutine at $9D9B.w [Writes: Stack Pointer] [Flow: call]
	adc $009AF9.l,X		; 7F F9 9A 00 ; Add long $009AF9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $F17F9A.l,X		; 7F 9A 7F F1 ; Add long $F17F9A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $40.b,X		; 16 40 ; Arithmetic shift left $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $7F98.w,X		; 3C 98 7F ; Test bits $7F98.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta [$40.b],Y		; 97 40 ; Store accumulator (long indexed) [$40.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $A42097.l,X		; 7F 97 20 A4 ; Add long $A42097.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $7F.b		; A6 7F ; Load $7F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $00A3.w,Y		; F9 A3 00 ; Subtract with carry $00A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $F17FA3.l,X		; 7F A3 7F F1 ; Add long $F17FA3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $B7F9.w,X		; 3C F9 B7 ; Test bits $B7F9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b,X		; 15 06 ; OR accumulator with memory $06.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ldy $7806.w,X		; BC 06 78 ; Load Y register $7806.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $6E.b		; 06 6E ; Arithmetic shift left $6E.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $5A.b		; 06 5A ; Arithmetic shift left $5A.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b,X		; 15 06 ; OR accumulator with memory $06.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C3.b,S		; 03 C3 ; OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $6E.b		; 06 6E ; Arithmetic shift left $6E.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C1.b,S		; 03 C1 ; OR accumulator with stack relative $C1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $5A.b		; 06 5A ; Arithmetic shift left $5A.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BE.b,S		; 03 BE ; OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $50.b		; 06 50 ; Arithmetic shift left $50.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BE.b,S		; 03 BE ; OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $46.b		; 06 46 ; Arithmetic shift left $46.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BE.b,S		; 03 BE ; OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BE.b,S		; 03 BE ; OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $0098.w,Y		; F9 98 00 ; Subtract with carry $0098.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $00F1.w		; 6E F1 00 ; Rotate right $00F1.w [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0C.b),Y		; 11 0C ; OR accumulator with memory ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $008E.w,Y		; F9 8E 00 ; Subtract with carry $008E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0C9D.w		; 0C 9D 0C ; Test and set bits $0C9D.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$A1.b		; 09 A1 ; Logical OR #$A1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $F964.w		; 0C 64 F9 ; Test and set bits $F964.w [Reads: Accumulator] [Flags: Z]
	bit #$00.b		; 89 00 ; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $0C98.w		; 0C 98 0C ; Test and set bits $0C98.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$9D.b		; 09 9D ; Logical OR #$9D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $F950.w		; 0C 50 F9 ; Test and set bits $F950.w [Reads: Accumulator] [Flags: Z]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tsb $0C95.w		; 0C 95 0C ; Test and set bits $0C95.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$98.b		; 09 98 ; Logical OR #$98.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stx $8C06.w		; 8E 06 8C ; Store X register to $8C06.w [Reads: X Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $009D.w,Y		; F9 9D 00 ; Subtract with carry $009D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0C98.w		; 0C 98 0C ; Test and set bits $0C98.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0C95.w		; 0C 95 0C ; Test and set bits $0C95.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $4893.w		; 0C 93 48 ; Test and set bits $4893.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b),Y		; 91 48 ; Store accumulator ($48.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ror $00F1.w		; 6E F1 00 ; Rotate right $00F1.w [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $90, $48		; 90 48 ; Branch if carry clear to $90, $48 [Flow: branch]
	lsr $F1.b		; 46 F1 ; Logical shift right $F1.b [Reads: Direct Page] [Flags: NCZ]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $284B.w		; 8E 4B 28 ; Store X register to $284B.w [Reads: X Index]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sty $E000.w		; 8C 00 E0 ; Store Y register to $E000.w [Reads: Y Index]
	ora ($0C.b),Y		; 11 0C ; OR accumulator with memory ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($16.b),Y		; 91 16 ; Store accumulator ($16.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stx $900C.w		; 8E 0C 90 ; Store X register to $900C.w [Reads: X Index]
	trb $8C.b		; 14 8C ; Test and reset bits $8C.b [Reads: Accumulator] [Flags: Z]
	tsb $1289.w		; 0C 89 12 ; Test and set bits $1289.w [Reads: Accumulator] [Flags: Z]
	bit #$00.b		; 89 00 ; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $F978.w		; 0C 78 F9 ; Test and set bits $F978.w [Reads: Accumulator] [Flags: Z]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ora #$9F.b		; 09 9F ; Logical OR #$9F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$17.b		; E0 17 ; Compare #$17.b with X register [Reads: X Index] [Flags: NCZ]
	bit $B0.b		; 24 B0 ; Test bits $B0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $A4.b		; 64 A4 ; Store zero to $A4.b
	cpx #$17.b		; E0 17 ; Compare #$17.b with X register [Reads: X Index] [Flags: NCZ]
	bit $64.b		; 24 64 ; Test bits $64.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($B2.b)		; 32 B2 ; AND accumulator with memory (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $B2.b		; 14 B2 ; Test and reset bits $B2.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $F946.w		; 0C 46 F9 ; Test and set bits $F946.w [Reads: Accumulator] [Flags: Z]
	sty $0C00.w		; 8C 00 0C ; Store Y register to $0C00.w [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $F178.w		; 0C 78 F1 ; Test and set bits $F178.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $F178.w		; 0C 78 F1 ; Test and set bits $F178.w [Reads: Accumulator] [Flags: Z]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00BB.w,Y		; F9 BB 00 ; Subtract with carry $00BB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B5.b		; 06 B5 ; Arithmetic shift left $B5.b [Reads: Direct Page] [Flags: NCZ]
	asl $1E.b		; 06 1E ; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $BB.b		; 06 BB ; Arithmetic shift left $BB.b [Reads: Direct Page] [Flags: NCZ]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B5.b		; 06 B5 ; Arithmetic shift left $B5.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BB.b,S		; 03 BB ; OR accumulator with stack relative $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $5006.w		; 0C 06 50 ; Test and set bits $5006.w [Reads: Accumulator] [Flags: Z]
	sbc $008C.w,Y		; F9 8C 00 ; Subtract with carry $008C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $91.b		; 06 91 ; Arithmetic shift left $91.b [Reads: Direct Page] [Flags: NCZ]
	ora #$78.b		; 09 78 ; Logical OR #$78.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1E08.w		; 0D 08 1E ; Logical OR $1E08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $A6.b,S		; A3 A6 ; Load accumulator (stack relative) $A6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $E000.w		; AD 00 E0 ; Load $E000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($AD.b)		; 12 AD ; OR accumulator with memory (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $F15008.l		; AF 08 50 F1 ; Load long $F15008.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $F1.b		; 46 F1 ; Logical shift right $F1.b [Reads: Direct Page] [Flags: NCZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $3C08.w		; AD 08 3C ; Load $3C08.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($F1.b)		; 32 F1 ; AND accumulator with memory (indirect) ($F1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	asl $00F1.w,X		; 1E F1 00 ; Arithmetic shift left $00F1.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	trb $F1.b		; 14 F1 ; Test and reset bits $F1.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $F1.b		; 05 F1 ; Logical OR $F1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	asl $32.b		; 06 32 ; Arithmetic shift left $32.b [Reads: Direct Page] [Flags: NCZ]
	ldy $BCBF.w,X		; BC BF BC ; Load Y register $BCBF.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $BC3C06.l,X		; BF 06 3C BC ; Load long $BC3C06.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $06BFBC.l,X		; BF BC BF 06 ; Load long $06BFBC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $BCBF.w,X		; BC BF BC ; Load Y register $BCBF.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0FE000.l,X		; BF 00 E0 0F ; Load long $0FE000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $32		; 10 32 ; Branch if plus to $10, $32 [Flow: branch]
	sbc $00AB.w,Y		; F9 AB 00 ; Subtract with carry $00AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $AA		; 10 AA ; Branch if plus to $10, $AA [Flow: branch]
	ora ($3C.b),Y		; 11 3C ; OR accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $00AB.w		; 0E AB 00 ; Arithmetic shift left $00AB.w [Flags: NCZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	trb $B73C.w		; 1C 3C B7 ; Test and reset bits $B73C.w [Reads: Accumulator] [Flags: Z]
	lda ($AC.b,S),Y		; B3 AC ; Load accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $B8.b		; 24 B8 ; Test bits $B8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $000E.w		; 0E 0E 00 ; Arithmetic shift left $000E.w [Flags: NCZ]
	lda [$1C.b],Y		; B7 1C ; Load accumulator (long indexed) [$1C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $ADB6.w,X		; 3C B6 AD ; Test bits $ADB6.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldy $24.b,X		; B4 24 ; Load Y register $24.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	bit $00BC.w,X		; 3C BC 00 ; Test bits $00BC.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $B7.b,X		; B5 B7 ; Load $B7.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $BCBB.w,Y		; B9 BB BC ; Load $BCBB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $C1C0.w,Y		; BE C0 C1 ; Load X register $C1C0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $00C3.w		; 0C C3 00 ; Test and set bits $00C3.w [Reads: Accumulator] [Flags: Z]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	sta $91.b,X		; 95 91 ; Store accumulator to $91.b,X [Reads: Accumulator, X Index]
	stx $7805.w		; 8E 05 78 ; Store X register to $7805.w [Reads: X Index]
	sty $8E90.w		; 8C 90 8E ; Store Y register to $8E90.w [Reads: Y Index]
	tsb $6E.b		; 04 6E ; Test and set bits $6E.b [Reads: Accumulator] [Flags: Z]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($06.b,S),Y		; 93 06 ; Store accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ror $9296.w		; 6E 96 92 ; Rotate right $9296.w [Flags: NCZ]
	sta $03.b,X		; 95 03 ; Store accumulator to $03.b,X [Reads: Accumulator, X Index]
	stz $8F.b		; 64 8F ; Store zero to $8F.b
	sta ($91.b,S),Y		; 93 91 ; Store accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $64.b		; 04 64 ; Test and set bits $64.b [Reads: Accumulator] [Flags: Z]
	.db $90, $8E		; 90 8E ; Branch if carry clear to $90, $8E [Flow: branch]
	sta [$05.b],Y		; 97 05 ; Store accumulator (long indexed) [$05.b],Y [Reads: Direct Page, Y Index, Accumulator]
	stz $8E.b		; 64 8E ; Store zero to $8E.b
	sta ($8C.b),Y		; 91 8C ; Store accumulator ($8C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tsb $64.b		; 04 64 ; Test and set bits $64.b [Reads: Accumulator] [Flags: Z]
	.db $90, $8C		; 90 8C ; Branch if carry clear to $90, $8C [Flow: branch]
	stx $05E0.w		; 8E E0 05 ; Store X register to $05E0.w [Reads: X Index]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	sta $91.b,X		; 95 91 ; Store accumulator to $91.b,X [Reads: Accumulator, X Index]
	stx $7805.w		; 8E 05 78 ; Store X register to $7805.w [Reads: X Index]
	sty $8E90.w		; 8C 90 8E ; Store Y register to $8E90.w [Reads: Y Index]
	tsb $6E.b		; 04 6E ; Test and set bits $6E.b [Reads: Accumulator] [Flags: Z]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($06.b,S),Y		; 93 06 ; Store accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ror $9296.w		; 6E 96 92 ; Rotate right $9296.w [Flags: NCZ]
	sta $03.b,X		; 95 03 ; Store accumulator to $03.b,X [Reads: Accumulator, X Index]
	stz $8C.b		; 64 8C ; Store zero to $8C.b
	sta ($8E.b),Y		; 91 8E ; Store accumulator ($8E.b),Y [Reads: Direct Page, Y Index, Accumulator]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,S),Y		; 13 04 ; OR accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $A4		; 50 A4 ; Branch if overflow clear to $50, $A4 [Flow: branch]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $5006.w		; 0D 06 50 ; Logical OR $5006.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $009A.w,Y		; F9 9A 00 ; Subtract with carry $009A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: NCZ]
	asl $F1.b		; 06 F1 ; Arithmetic shift left $F1.b [Reads: Direct Page] [Flags: NCZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($06.b,X)		; A1 06 ; Load accumulator ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $9A.b,S		; 03 9A ; OR accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $F108AB.l		; 22 AB 08 F1 ; Jump to subroutine long $F108AB.l [Writes: Stack Pointer] [Flow: call]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $07E000.l,X		; 9F 00 E0 07 ; Store accumulator (long,X) $07E000.l,X [Reads: Accumulator, X Index]
	bit $32.b		; 24 32 ; Test bits $32.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sbc $009F.w,Y		; F9 9F 00 ; Subtract with carry $009F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $F108AB.l		; 22 AB 08 F1 ; Jump to subroutine long $F108AB.l [Writes: Stack Pointer] [Flow: call]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	ldy $60.b		; A4 60 ; Load $60.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	asl $00B7.w,X		; 1E B7 00 ; Arithmetic shift left $00B7.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	asl $00BC.w,X		; 1E BC 00 ; Arithmetic shift left $00BC.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $0A04.w,Y		; B9 04 0A ; Load $0A04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $5A04.w		; AD 04 5A ; Load $5A04.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $1E08.w		; 0D 08 1E ; Logical OR $1E08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $00A1.w,Y		; F9 A1 00 ; Subtract with carry $00A1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $A3.b		; 06 A3 ; Arithmetic shift left $A3.b [Reads: Direct Page] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; [PATTERN: Memory clearing operation] 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	lda $0600.w		; AD 00 06 ; Load $0600.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	asl $C3.b		; 06 C3 ; Arithmetic shift left $C3.b [Reads: Direct Page] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $B2		; 50 B2 ; Branch if overflow clear to $50, $B2 [Flow: branch]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	.db $50, $B2		; 50 B2 ; Branch if overflow clear to $50, $B2 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $4604.w		; 0E 04 46 ; Arithmetic shift left $4604.w [Flags: NCZ]
	lda $3204.w,Y		; B9 04 32 ; Load $3204.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $1E.b		; 04 1E ; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $5008.w		; 0C 08 50 ; Test and set bits $5008.w [Reads: Accumulator] [Flags: Z]
	sbc $00AF.w,Y		; F9 AF 00 ; Subtract with carry $00AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($08.b,X)		; A1 08 ; Load accumulator ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $97.b		; 05 97 ; Logical OR $97.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $F9.b		; 46 F9 ; Logical shift right $F9.b [Reads: Direct Page] [Flags: NCZ]
	sta $0600.w,X		; 9D 00 06 ; Store accumulator to $0600.w,X [Reads: Accumulator, X Index]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	ora $50.b		; 05 50 ; Logical OR $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00A6.w,Y		; F9 A6 00 ; Subtract with carry $00A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $9F.b		; 05 9F ; Logical OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F1.b]		; 07 F1 ; OR accumulator with memory (long) [$F1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $E000.w		; AD 00 E0 ; Load $E000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $0087.w,Y		; F9 87 00 ; Subtract with carry $0087.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0CB2.w		; 0C B2 0C ; Test and set bits $0CB2.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0CAD.w		; 0C AD 0C ; Test and set bits $0CAD.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $008C.w,Y		; F9 8C 00 ; Subtract with carry $008C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$87.b		; 09 87 ; Logical OR #$87.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	sty $89B5.w		; 8C B5 89 ; Store Y register to $89B5.w [Reads: Y Index]
	lda $04.b,X		; B5 04 ; Load $04.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and ($8C.b)		; 32 8C ; AND accumulator with memory (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $89.b,X		; B5 89 ; Load $89.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $04.b,X		; B5 04 ; Load $04.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sty $89B5.w		; 8C B5 89 ; Store Y register to $89B5.w [Reads: Y Index]
	lda $04.b,X		; B5 04 ; Load $04.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $B58C.w,X		; 1E 8C B5 ; Arithmetic shift left $B58C.w,X [Reads: X Index] [Flags: NCZ]
	bit #$B5.b		; 89 B5 ; Test bits #$B5.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	sty $89B5.w		; 8C B5 89 ; Store Y register to $89B5.w [Reads: Y Index]
	lda $04.b,X		; B5 04 ; Load $04.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sty $89B5.w		; 8C B5 89 ; Store Y register to $89B5.w [Reads: Y Index]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $46.b		; 04 46 ; Test and set bits $46.b [Reads: Accumulator] [Flags: Z]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $F9.b		; 46 F9 ; Logical shift right $F9.b [Reads: Direct Page] [Flags: NCZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ora $93.b,X		; 15 93 ; OR accumulator with memory $93.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda ($30.b,X)		; A1 30 ; Load accumulator ($30.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	sbc $00A4.w,Y		; F9 A4 00 ; Subtract with carry $00A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $B6		; 10 B6 ; Branch if plus to $10, $B6 [Flow: branch]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $F910.w		; AD 10 F9 ; Load $F910.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $F910.w,X		; 9D 10 F9 ; Store accumulator to $F910.w,X [Reads: Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $00F1.w		; 0C F1 00 ; Test and set bits $00F1.w [Reads: Accumulator] [Flags: Z]
	tsb $0C9D.w		; 0C 9D 0C ; Test and set bits $0C9D.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$95.b		; 09 95 ; Logical OR #$95.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $A4.b		; 64 A4 ; Store zero to $A4.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $F964.w		; 0C 64 F9 ; Test and set bits $F964.w [Reads: Accumulator] [Flags: Z]
	lda $0C00.w,Y		; B9 00 0C ; Load $0C00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$B7.b		; 09 B7 ; Logical OR #$B7.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0C.b),Y		; 11 0C ; OR accumulator with memory ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	stx $0C00.w		; 8E 00 0C ; Store X register to $0C00.w [Reads: X Index]
	sta $F10C.w,X		; 9D 0C F1 ; Store accumulator to $F10C.w,X [Reads: Accumulator, X Index]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	.db $30, $64		; 30 64 ; Branch if minus to $30, $64 [Flow: branch]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $98.b		; 64 98 ; Store zero to $98.b
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $AFF9.w,X		; 3C F9 AF ; Test bits $AFF9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $0089.w,Y		; F9 89 00 ; Subtract with carry $0089.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sty $F10A.w		; 8C 0A F1 ; Store Y register to $F10A.w [Reads: Y Index]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E000.w,X		; 9D 00 E0 ; Store accumulator to $E000.w,X [Reads: Accumulator, X Index]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $E0AD.w,X		; 3C AD E0 ; Test bits $E0AD.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $00A3.w,X		; 3C A3 00 ; Test bits $00A3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($3C.b)		; 12 3C ; OR accumulator with memory (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00B2.w,Y		; F9 B2 00 ; Subtract with carry $00B2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($AD.b)		; 12 AD ; OR accumulator with memory (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($F1.b)		; 12 F1 ; OR accumulator with memory (indirect) ($F1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($AD.b)		; 32 AD ; AND accumulator with memory (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $E0.b		; A6 E0 ; Load $E0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda ($AD.b)		; B2 AD ; Load accumulator (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $AB.b		; 46 AB ; Logical shift right $AB.b [Reads: Direct Page] [Flags: NCZ]
	lda ($A4.b,X)		; A1 A4 ; Load accumulator ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $1E.b		; 04 1E ; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	lda $9C.b,S		; A3 9C ; Load accumulator (stack relative) $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $B2.b		; 64 B2 ; Store zero to $B2.b
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $008C.w,Y		; F9 8C 00 ; Subtract with carry $008C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $F109.w,X		; 9D 09 F1 ; Store accumulator to $F109.w,X [Reads: Accumulator, X Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $28.b		; 04 28 ; Test and set bits $28.b [Reads: Accumulator] [Flags: Z]
	sbc $00A4.w,Y		; F9 A4 00 ; Subtract with carry $00A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $A9.b		; 04 A9 ; Test and set bits $A9.b [Reads: Accumulator] [Flags: Z]
	ora $3C.b		; 05 3C ; Logical OR $3C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $A6.b		; 02 A6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $50.b		; 05 50 ; Logical OR $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $A3.b		; 02 A3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($9B.b,S),Y		; 73 9B ; Add with carry (stack relative indirect indexed) ($9B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $189C.w		; 6E 9C 18 ; Rotate right $189C.w [Flags: NCZ]
	adc #$9D.b		; 69 9D ; Add #$9D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $9E.b		; 64 9E ; Store zero to $9E.b
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $5A189F.l,X		; 5F 9F 18 5A ; Exclusive OR accumulator with memory (long,X) $5A189F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $A1.b		; 64 A1 ; Store zero to $A1.b
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$A2.b		; 69 A2 ; Add #$A2.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $18A3.w		; 6E A3 18 ; Rotate right $18A3.w [Flags: NCZ]
	adc ($A4.b,S),Y		; 73 A4 ; Add with carry (stack relative indirect indexed) ($A4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($A4.b,S),Y		; 73 A4 ; Add with carry (stack relative indirect indexed) ($A4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $18A3.w		; 6E A3 18 ; Rotate right $18A3.w [Flags: NCZ]
	adc #$A2.b		; 69 A2 ; Add #$A2.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $A1.b		; 64 A1 ; Store zero to $A1.b
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $5A18A0.l,X		; 5F A0 18 5A ; Exclusive OR accumulator with memory (long,X) $5A18A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $10E000.l,X		; 9F 00 E0 10 ; Store accumulator (long,X) $10E000.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $9E.b		; 64 9E ; Store zero to $9E.b
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$9D.b		; 69 9D ; Add #$9D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $189C.w		; 6E 9C 18 ; Rotate right $189C.w [Flags: NCZ]
	adc ($9B.b,S),Y		; 73 9B ; Add with carry (stack relative indirect indexed) ($9B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $009D.w,Y		; F9 9D 00 ; Subtract with carry $009D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0C9F.w		; 0C 9F 0C ; Test and set bits $0C9F.w [Reads: Accumulator] [Flags: Z]
	and $F1.b,S		; 23 F1 ; AND accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $F928.w		; 0C 28 F9 ; Test and set bits $F928.w [Reads: Accumulator] [Flags: Z]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0C9F.w		; 0C 9F 0C ; Test and set bits $0C9F.w [Reads: Accumulator] [Flags: Z]
	and $F1.b,S		; 23 F1 ; AND accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E000.w,X		; 9D 00 E0 ; Store accumulator to $E000.w,X [Reads: Accumulator, X Index]
	ora $4608.w		; 0D 08 46 ; Logical OR $4608.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	lda [$B2.b],Y		; B7 B2 ; Load accumulator (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	bit $B0AB.w,X		; 3C AB B0 ; Test bits $B0AB.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($60.b)		; B2 60 ; Load accumulator (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $00.b,X		; B4 00 ; Load Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	lda [$B2.b],Y		; B7 B2 ; Load accumulator (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl $B0AB.w,X		; 1E AB B0 ; Arithmetic shift left $B0AB.w,X [Reads: X Index] [Flags: NCZ]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($60.b)		; B2 60 ; Load accumulator (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $00.b,X		; B4 00 ; Load Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $50, $F9		; 50 F9 ; Branch if overflow clear to $50, $F9 [Flow: branch]
	sty $0700.w		; 8C 00 07 ; Store Y register to $0700.w [Reads: Y Index]
	lda [$E0.b],Y		; B7 E0 ; Load accumulator (long indexed) [$E0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	lda $0500.w		; AD 00 05 ; Load $0500.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $10.b		; A4 10 ; Load $10.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc ($B0.b),Y		; F1 B0 ; Subtract with carry ($B0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E000.w,X		; 9D 00 E0 ; Store accumulator to $E000.w,X [Reads: Accumulator, X Index]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	ldx $0500.w,Y		; BE 00 05 ; Load X register $0500.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $E000.w,Y		; B9 00 E0 ; Load $E000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $009F.w,Y		; F9 9F 00 ; Subtract with carry $009F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $98.b		; 05 98 ; Logical OR $98.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A41800.l,X		; 9F 00 18 A4 ; Store accumulator (long,X) $A41800.l,X [Reads: Accumulator, X Index]
	.db $30, $28		; 30 28 ; Branch if minus to $30, $28 [Flow: branch]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0098.w		; 2D 98 00 ; Logical AND $0098.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	lda [$06.b],Y		; B7 06 ; Load accumulator (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($B4.b)		; 32 B4 ; AND accumulator with memory (indirect) ($B4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $73.b		; 06 73 ; Arithmetic shift left $73.b [Reads: Direct Page] [Flags: NCZ]
	lda $06.b,X		; B5 06 ; Load $06.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $B4.b,X		; 55 B4 ; Exclusive OR accumulator with memory $B4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	eor $B2.b,X		; 55 B2 ; Exclusive OR accumulator with memory $B2.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $2D.b		; 04 2D ; Test and set bits $2D.b [Reads: Accumulator] [Flags: Z]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $55.b		; 04 55 ; Test and set bits $55.b [Reads: Accumulator] [Flags: Z]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	and $B9.b,S		; 23 B9 ; AND accumulator with stack relative $B9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1E06.w		; 0D 06 1E ; Logical OR $1E06.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$BE.b		; C0 BE ; Compare #$BE.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$C1.b		; C0 C1 ; Compare #$C1.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $00.b,S		; C3 00 ; Compare accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $B7F9.w,X		; 3C F9 B7 ; Test bits $B7F9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	trb $F9.b		; 14 F9 ; Test and reset bits $F9.b [Reads: Accumulator] [Flags: Z]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$F1.b],Y		; 37 F1 ; AND accumulator with memory (long indexed) [$F1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $F1.b,S		; 23 F1 ; AND accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $B3B0.w,Y		; B9 B0 B3 ; Load $B3B0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $B9.b,Y		; B6 B9 ; Load X register $B9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $B0		; 50 B0 ; Branch if overflow clear to $50, $B0 [Flow: branch]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	lda $5A04.w		; AD 04 5A ; Load $5A04.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	asl $50.b		; 06 50 ; Arithmetic shift left $50.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $00A9.w		; 0C A9 00 ; Test and set bits $00A9.w [Reads: Accumulator] [Flags: Z]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $64		; 10 64 ; Branch if plus to $10, $64 [Flow: branch]
	lda ($A2.b,X)		; A1 A2 ; Load accumulator ($A2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $60.b,S		; A3 60 ; Load accumulator (stack relative) $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $64		; 10 64 ; Branch if plus to $10, $64 [Flow: branch]
	.db $B0, $B1		; B0 B1 ; Branch if carry set to $B0, $B1 [Flow: branch]
	lda ($60.b)		; B2 60 ; Load accumulator (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $64		; 10 64 ; Branch if plus to $10, $64 [Flow: branch]
	lda #$AA.b		; A9 AA ; Load #$AA.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $E000.w		; AC 00 E0 ; Load $E000.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $9A.b		; 64 9A ; Store zero to $9A.b
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	sta $0698.w,X		; 9D 98 06 ; Store accumulator to $0698.w,X [Reads: Accumulator, X Index]
	trb $9D.b		; 14 9D ; Test and reset bits $9D.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	sta $0698.w,X		; 9D 98 06 ; Store accumulator to $0698.w,X [Reads: Accumulator, X Index]
	.db $50, $9D		; 50 9D ; Branch if overflow clear to $50, $9D [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $9D98.w,X		; 9D 98 9D ; Store accumulator to $9D98.w,X [Reads: Accumulator, X Index]
	.db $30, $98		; 30 98 ; Branch if minus to $30, $98 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	lda $BBBA.w,Y		; B9 BA BB ; Load $BBBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora #$B0.b		; 09 B0 ; Logical OR #$B0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $5A.b		; 06 5A ; Arithmetic shift left $5A.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B5.w,Y		; F9 B5 00 ; Subtract with carry $00B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	asl $55.b		; 06 55 ; Arithmetic shift left $55.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: NCZ]
	asl $5F.b		; 06 5F ; Arithmetic shift left $5F.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	asl $4B.b		; 06 4B ; Arithmetic shift left $4B.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B4.b		; 06 B4 ; Arithmetic shift left $B4.b [Reads: Direct Page] [Flags: NCZ]
	asl $55.b		; 06 55 ; Arithmetic shift left $55.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B9.b		; 06 B9 ; Arithmetic shift left $B9.b [Reads: Direct Page] [Flags: NCZ]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B5.b		; 06 B5 ; Arithmetic shift left $B5.b [Reads: Direct Page] [Flags: NCZ]
	asl $46.b		; 06 46 ; Arithmetic shift left $46.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $BB.b		; 06 BB ; Arithmetic shift left $BB.b [Reads: Direct Page] [Flags: NCZ]
	asl $32.b		; 06 32 ; Arithmetic shift left $32.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $BC.b		; 06 BC ; Arithmetic shift left $BC.b [Reads: Direct Page] [Flags: NCZ]
	asl $2D.b		; 06 2D ; Arithmetic shift left $2D.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $00AB.w,Y		; F9 AB 00 ; Subtract with carry $00AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $A8.b		; 05 A8 ; Logical OR $A8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $00F1.w		; 2D F1 00 ; Logical AND $00F1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	asl $00F1.w,X		; 1E F1 00 ; Arithmetic shift left $00F1.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $00F1.w,Y		; 19 F1 00 ; OR accumulator with memory $00F1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $A6.b		; 05 A6 ; Logical OR $A6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $E000.w,X		; BC 00 E0 ; Load Y register $E000.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($AB.b)		; 32 AB ; AND accumulator with memory (indirect) ($AB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($A9.b)		; B2 A9 ; Load accumulator (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	asl $B5AB.w,X		; 1E AB B5 ; Arithmetic shift left $B5AB.w,X [Reads: X Index] [Flags: NCZ]
	lda #$B7.b		; A9 B7 ; Load #$B7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $A4B2.w		; AD B2 A4 ; Load $A4B2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $00AB.w,Y		; F9 AB 00 ; Subtract with carry $00AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $A8.b		; 05 A8 ; Logical OR $A8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $F1.b,S		; 23 F1 ; AND accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $00F1.w,Y		; 19 F1 00 ; OR accumulator with memory $00F1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0500F1.l		; 0F F1 00 05 ; OR accumulator with memory (long) $0500F1.l [Writes: Accumulator] [Flags: NZ]
	sta $01E000.l,X		; 9F 00 E0 01 ; Store accumulator (long,X) $01E000.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $00B7.w,Y		; F9 B7 00 ; Subtract with carry $00B7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $B4.b		; 05 B4 ; Logical OR $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $00F1.w		; 2D F1 00 ; Logical AND $00F1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $F1.b,S		; 23 F1 ; AND accumulator with stack relative $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $00F1.w,X		; 1E F1 00 ; Arithmetic shift left $00F1.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0500F1.l		; 0F F1 00 05 ; OR accumulator with memory (long) $0500F1.l [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $B050.w		; 0C 50 B0 ; Test and set bits $B050.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ora #$50.b		; 09 50 ; Logical OR #$50.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $00B7.w,Y		; F9 B7 00 ; Subtract with carry $00B7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $BC.b		; 06 BC ; Arithmetic shift left $BC.b [Reads: Direct Page] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $F9		; 50 F9 ; Branch if overflow clear to $50, $F9 [Flow: branch]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	asl $50.b		; 06 50 ; Arithmetic shift left $50.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $8C.b,S		; 03 8C ; OR accumulator with stack relative $8C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $B3		; 50 B3 ; Branch if overflow clear to $50, $B3 [Flow: branch]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	tsb $B3.b		; 04 B3 ; Test and set bits $B3.b [Reads: Accumulator] [Flags: Z]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	tsb $B3.b		; 04 B3 ; Test and set bits $B3.b [Reads: Accumulator] [Flags: Z]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $B0		; 50 B0 ; Branch if overflow clear to $50, $B0 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$98.b]		; 07 98 ; OR accumulator with memory (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	asl $32.b		; 06 32 ; Arithmetic shift left $32.b [Reads: Direct Page] [Flags: NCZ]
	sbc $00B5.w,Y		; F9 B5 00 ; Subtract with carry $00B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	asl $2D.b		; 06 2D ; Arithmetic shift left $2D.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: NCZ]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	asl $23.b		; 06 23 ; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $B2.b,S		; 03 B2 ; OR accumulator with stack relative $B2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $F9.b		; 46 F9 ; Logical shift right $F9.b [Reads: Direct Page] [Flags: NCZ]
	sta $8C0400.l,X		; 9F 00 04 8C ; Store accumulator (long,X) $8C0400.l,X [Reads: Accumulator, X Index]
	tsb $F978.w		; 0C 78 F9 ; Test and set bits $F978.w [Reads: Accumulator] [Flags: Z]
	sta $B70900.l,X		; 9F 00 09 B7 ; Store accumulator (long,X) $B70900.l,X [Reads: Accumulator, X Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $0098.w,Y		; F9 98 00 ; Subtract with carry $0098.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	ora [$F1.b]		; 07 F1 ; OR accumulator with memory (long) [$F1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $0093.w,Y		; F9 93 00 ; Subtract with carry $0093.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $07C3.w		; 0C C3 07 ; Test and set bits $07C3.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $A4.b		; 04 A4 ; Test and set bits $A4.b [Reads: Accumulator] [Flags: Z]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $008C.w,Y		; F9 8C 00 ; Subtract with carry $008C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F10DBC.l		; 0F BC 0D F1 ; OR accumulator with memory (long) $F10DBC.l [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $01E000.l,X		; 9F 00 E0 01 ; Store accumulator (long,X) $01E000.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	sbc $009F.w,Y		; F9 9F 00 ; Subtract with carry $009F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00F163.l,X		; 9F 63 F1 00 ; Store accumulator (long,X) $00F163.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $01E0FF.l,X		; 9F FF E0 01 ; Store accumulator (long,X) $01E0FF.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0098.w,Y		; F9 98 00 ; Subtract with carry $0098.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $F1.b,S		; 63 F1 ; Add with carry (stack relative) $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $6001E0.l,X		; FF E0 01 60 ; Subtract with carry (long,X) $6001E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0095.w,Y		; F9 95 00 ; Subtract with carry $0095.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $63.b,X		; 95 63 ; Store accumulator to $63.b,X [Reads: Accumulator, X Index]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $FF.b,X		; 95 FF ; Store accumulator to $FF.b,X [Reads: Accumulator, X Index]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0091.w,Y		; F9 91 00 ; Subtract with carry $0091.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($63.b),Y		; 91 63 ; Store accumulator ($63.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($FF.b),Y		; 91 FF ; Store accumulator ($FF.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $E0009F.l,X		; 7F 9F 00 E0 ; Add long $E0009F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $957F.w		; 0C 7F 95 ; Test and set bits $957F.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $937F.w		; 0C 7F 93 ; Test and set bits $937F.w [Reads: Accumulator] [Flags: Z]
	tsb $907F.w		; 0C 7F 90 ; Test and set bits $907F.w [Reads: Accumulator] [Flags: Z]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	adc $00248E.l,X		; 7F 8E 24 00 ; Add long $00248E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	adc $14E091.l,X		; 7F 91 E0 14 ; Add long $14E091.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $0085F9.l,X		; 7F F9 85 00 ; Add long $0085F9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta [$33.b]		; 87 33 ; Store accumulator (long) [$33.b] [Reads: Direct Page, Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $89		; 30 89 ; Branch if minus to $30, $89 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	adc $0098F9.l,X		; 7F F9 98 00 ; Add long $0098F9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($18.b),Y		; 91 18 ; Store accumulator ($18.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $18.b,X		; 95 18 ; Store accumulator to $18.b,X [Reads: Accumulator, X Index]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stx $F160.w		; 8E 60 F1 ; Store X register to $F160.w [Reads: X Index]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$63.b		; 89 63 ; Test bits #$63.b with accumulator [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $F928.w		; 0C 28 F9 ; Test and set bits $F928.w [Reads: Accumulator] [Flags: Z]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $18C1.w		; 0C C1 18 ; Test and set bits $18C1.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rep #$0C		; C2 0C ; Reset processor status bits #$0C [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	bit $C0F9.w,X		; 3C F9 C0 ; Test bits $C0F9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($18.b,X)		; C1 18 ; Compare accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rep #$0C		; C2 0C ; Reset processor status bits #$0C [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	.db $50, $F9		; 50 F9 ; Branch if overflow clear to $50, $F9 [Flow: branch]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $18C1.w		; 0C C1 18 ; Test and set bits $18C1.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rep #$0C		; C2 0C ; Reset processor status bits #$0C [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	bit $C0F9.w,X		; 3C F9 C0 ; Test bits $C0F9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($18.b,X)		; C1 18 ; Compare accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rep #$0C		; C2 0C ; Reset processor status bits #$0C [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $00C0.w,Y		; F9 C0 00 ; Subtract with carry $00C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $1BC1.w		; 0C C1 1B ; Test and set bits $1BC1.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rep #$00		; C2 00 ; Reset processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $4E08.w		; 8E 08 4E ; Store X register to $4E08.w [Reads: X Index]
	jsl $640C8D.l		; 22 8D 0C 64 ; Jump to subroutine long $640C8D.l [Writes: Stack Pointer] [Flow: call]
	lsr $8C.b,X		; 56 8C ; Logical shift right $8C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($56.b)		; 12 56 ; OR accumulator with memory (indirect) ($56.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($0C8D.w,X)		; 7C 8D 0C ; Jump indirect indexed to ($0C8D.w,X) [Reads: X Index] [Flow: jump]
	bit $8B58.w		; 2C 58 8B ; Test bits $8B58.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora ($5C.b)		; 12 5C ; OR accumulator with memory (indirect) ($5C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit #$0C.b		; 89 0C ; Test bits #$0C.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $62, $4A, $8B		; 62 4A 8B ; Push effective relative address $62, $4A, $8B [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $8C44.w		; 2C 44 8C ; Test bits $8C44.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	tsb $2C44.w		; 0C 44 2C ; Test and set bits $2C44.w [Reads: Accumulator] [Flags: Z]
	bit #$18.b		; 89 18 ; Test bits #$18.b with accumulator [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor ($8B.b),Y		; 51 8B ; Exclusive OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $44.b,X		; 36 44 ; Rotate left $44.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sty $4E30.w		; 8C 30 4E ; Store Y register to $4E30.w [Reads: Y Index]
	lsr $FF8B.w		; 4E 8B FF ; Logical shift right $FF8B.w [Flags: NCZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $3C04.w,Y		; B9 04 3C ; Load $3C04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $2804.w,Y		; B9 04 28 ; Load $2804.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $1404.w,Y		; B9 04 14 ; Load $1404.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $0A04.w,Y		; B9 04 0A ; Load $0A04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $E000.w,Y		; B9 00 E0 ; Load $E000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	trb $F9.b		; 14 F9 ; Test and reset bits $F9.b [Reads: Accumulator] [Flags: Z]
	ldy $00.b,X		; B4 00 ; Load Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $60.b,X		; B5 60 ; Load $60.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $60.b,X		; B5 60 ; Load $60.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $00F1.w,X		; 1E F1 00 ; Arithmetic shift left $00F1.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $60.b,X		; B5 60 ; Load $60.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $F163.w		; AD 63 F1 ; Load $F163.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $00B3.w,Y		; F9 B3 00 ; Subtract with carry $00B3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $60.b,Y		; B6 60 ; Load X register $60.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1800F1.l		; 0F F1 00 18 ; OR accumulator with memory (long) $1800F1.l [Writes: Accumulator] [Flags: NZ]
	ldx $60.b,Y		; B6 60 ; Load X register $60.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $60.b,X		; B4 60 ; Load Y register $60.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($63.b),Y		; B1 63 ; Load accumulator ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $0089.w,Y		; F9 89 00 ; Subtract with carry $0089.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($8D.b)		; 12 8D ; OR accumulator with memory (indirect) ($8D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $00F1.w		; 0C F1 00 ; Test and set bits $00F1.w [Reads: Accumulator] [Flags: Z]
	tsb $2492.w		; 0C 92 24 ; Test and set bits $2492.w [Reads: Accumulator] [Flags: Z]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $97.b		; 24 97 ; Test bits $97.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc $4800F1.l,X		; 7F F1 00 48 ; Add long $4800F1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $00, $E0		; 82 00 E0 ; Branch always long to $82, $00, $E0 [Flow: branch]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $008C.w,Y		; F9 8C 00 ; Subtract with carry $008C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $92.b		; 06 92 ; Arithmetic shift left $92.b [Reads: Direct Page] [Flags: NCZ]
	ora ($F1.b)		; 12 F1 ; OR accumulator with memory (indirect) ($F1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $F112.w,Y		; 99 12 F1 ; Store accumulator to $F112.w,Y [Reads: Y Index, Accumulator]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b),Y		; 91 00 ; Store accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($64.b)		; 12 64 ; OR accumulator with memory (indirect) ($64.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00AB.w,Y		; F9 AB 00 ; Subtract with carry $00AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $12B7.w		; 0C B7 12 ; Test and set bits $12B7.w [Reads: Accumulator] [Flags: Z]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $00BE.w		; 0C BE 00 ; Test and set bits $00BE.w [Reads: Accumulator] [Flags: Z]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($64.b)		; 12 64 ; OR accumulator with memory (indirect) ($64.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00B2.w,Y		; F9 B2 00 ; Subtract with carry $00B2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $12BE.w		; 0C BE 12 ; Test and set bits $12BE.w [Reads: Accumulator] [Flags: Z]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $00C3.w		; 0C C3 00 ; Test and set bits $00C3.w [Reads: Accumulator] [Flags: Z]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($64.b)		; 12 64 ; OR accumulator with memory (indirect) ($64.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00BA.w,Y		; F9 BA 00 ; Subtract with carry $00BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $12AD.w		; 0C AD 12 ; Test and set bits $12AD.w [Reads: Accumulator] [Flags: Z]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $64		; 30 64 ; Branch if minus to $30, $64 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $A4.b		; 06 A4 ; Arithmetic shift left $A4.b [Reads: Direct Page] [Flags: NCZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	ora #$46.b		; 09 46 ; Logical OR #$46.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $00B0.w,Y		; F9 B0 00 ; Subtract with carry $00B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B7.b		; 06 B7 ; Arithmetic shift left $B7.b [Reads: Direct Page] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $18.b,X		; 15 18 ; OR accumulator with memory $18.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3218.w		; 0D 18 32 ; Logical OR $3218.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E100.w		; 8D 00 E1 ; Store accumulator to $E100.w [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $7070.w,X		; 3E 70 70 ; Rotate left $7070.w,X [Reads: X Index] [Flags: NCZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	stx $B8E0.w		; 8E E0 B8 ; Store X register to $B8E0.w [Reads: X Index]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	inc $B86A.w,X		; FE 6A B8 ; Increment memory $B86A.w,X [Reads: X Index] [Flags: NZ]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	inc $B8F8.w,X		; FE F8 B8 ; Increment memory $B8F8.w,X [Reads: X Index] [Flags: NZ]
	ora $7070.w		; 0D 70 70 ; Logical OR $7070.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $707003.l,X		; 7F 03 70 70 ; Add long $707003.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $707003.l,X		; 7F 03 70 70 ; Add long $707003.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FE.b		; 05 FE ; Logical OR $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $70, $01		; 70 01 ; Branch if overflow set to $70, $01 [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FE.b]		; 07 FE ; OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $70, $05		; 70 05 ; Branch if overflow set to $70, $05 [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $B86A.w,X		; FE 6A B8 ; Increment memory $B86A.w,X [Reads: X Index] [Flags: NZ]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	inc $B8E0.w,X		; FE E0 B8 ; Increment memory $B8E0.w,X [Reads: X Index] [Flags: NZ]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	sbc $B86E.w,Y		; F9 6E B8 ; Subtract with carry $B86E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	inc $B8F5.w,X		; FE F5 B8 ; Increment memory $B8F5.w,X [Reads: X Index] [Flags: NZ]
	ora [$70.b]		; 07 70 ; OR accumulator with memory (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	inc $B8F5.w,X		; FE F5 B8 ; Increment memory $B8F5.w,X [Reads: X Index] [Flags: NZ]
	asl $70.b		; 06 70 ; Arithmetic shift left $70.b [Reads: Direct Page] [Flags: NCZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	inc $B8FC.w,X		; FE FC B8 ; Increment memory $B8FC.w,X [Reads: X Index] [Flags: NZ]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	stx $B8E0.w		; 8E E0 B8 ; Store X register to $B8E0.w [Reads: X Index]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	stx $B8E0.w		; 8E E0 B8 ; Store X register to $B8E0.w [Reads: X Index]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	stx $B8E0.w		; 8E E0 B8 ; Store X register to $B8E0.w [Reads: X Index]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$B8.b		; E0 B8 ; Compare #$B8.b with X register [Reads: X Index] [Flags: NCZ]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	stx $B8E0.w		; 8E E0 B8 ; Store X register to $B8E0.w [Reads: X Index]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $10, $15		; 10 15 ; Branch if plus to $10, $15 [Flow: branch]
	sbc $04B8E0.l,X		; FF E0 B8 04 ; Subtract with carry (long,X) $04B8E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $DF.b,S		; 03 DF ; OR accumulator with stack relative $DF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($B8.b),Y		; 11 B8 ; OR accumulator with memory ($B8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $007070.l		; 0F 70 70 00 ; OR accumulator with memory (long) $007070.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$B8.b		; E0 B8 ; Compare #$B8.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $8C28.w		; AC 28 8C ; Load $8C28.w into Y register [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stz $FF28.w		; 9C 28 FF ; Store zero to $FF28.w
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $D528.w,X		; BC 28 D5 ; Load Y register $D528.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and #$26.b		; 29 26 ; Logical AND #$26.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$51.b		; 29 51 ; Logical AND #$51.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$BD.b		; 29 BD ; Logical AND #$BD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$D2.b		; 29 D2 ; Logical AND #$D2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$E7.b		; 29 E7 ; Logical AND #$E7.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$21.b		; 29 21 ; Logical AND #$21.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $2A		; 70 2A ; Branch if overflow set to $70, $2A [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $B8BA.w,X		; 7D BA B8 ; Add $B8BA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldx $B5.b,Y		; B6 B5 ; Load X register $B5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda $B4.b,X		; B5 B4 ; Load $B4.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $B3B3.w,X		; 7D B3 B3 ; Add $B3B3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	bit $AE.b		; 24 AE ; Test bits $AE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $AFAF.w,X		; 7D AF AF ; Add $AFAF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AEAEAF.l		; AF AF AE AE ; Load long $AEAEAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $ACAE.w		; AE AE AC ; Load $ACAE.w into X register [Writes: X Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $AAAA.w		; AC AA AA ; Load $AAAA.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$E0.b]		; A7 E0 ; Load accumulator (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $E1C8ED.l		; 0F ED C8 E1 ; OR accumulator with memory (long) $E1C8ED.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$24.b		; A2 24 ; Load #$24.b into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	bit $8A.b		; 24 8A ; Test bits $8A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $8824.w,Y		; 99 24 88 ; Store accumulator to $8824.w,Y [Reads: Y Index, Accumulator]
	bit $249E.w,X		; 3C 9E 24 ; Test bits $249E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $9918.w,X		; 9D 18 99 ; Store accumulator to $9918.w,X [Reads: Accumulator, X Index]
	bit $86.b		; 24 86 ; Test bits $86.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $249D.w,X		; 3C 9D 24 ; Test bits $249D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	stx $9B.b		; 86 9B ; Store X register to $9B.b [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $E1C8ED.l		; 0F ED C8 E1 ; OR accumulator with memory (long) $E1C8ED.l [Writes: Accumulator] [Flags: NZ]
	asl $C90C.w		; 0E 0C C9 ; Arithmetic shift left $C90C.w [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $0C97.w,X		; 7D 97 0C ; Add $0C97.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $A0.b		; 24 A0 ; Test bits $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $0C,$94		; 54 94 0C ; Move block negative $0C,$94 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $94.b		; 24 94 ; Test bits $94.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index, Accumulator]
	mvn $0C,$92		; 54 92 0C ; Move block negative $0C,$92 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $92.b		; 24 92 ; Test bits $92.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $E0.b,S		; A3 E0 ; Load accumulator (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $E1C8ED.l		; 0F ED C8 E1 ; OR accumulator with memory (long) $E1C8ED.l [Writes: Accumulator] [Flags: NZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189B.w,X		; 7D 9B 18 ; Add $189B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $A0.b		; 24 A0 ; Test bits $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy #$C8.b		; A0 C8 ; Load #$C8.b into Y register [Writes: Y Index] [Flags: NZ]
	mvn $18,$99		; 54 99 18 ; Move block negative $18,$99 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $9E.b		; 24 9E ; Test bits $9E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $48C8.w,X		; 9E C8 48 ; Store zero to $48C8.w,X [Reads: X Index]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $9E.b		; 24 9E ; Test bits $9E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $C818.w,X		; 9D 18 C8 ; Store accumulator to $C818.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $9D.b		; 24 9D ; Test bits $9D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $7D30.w,X		; 9E 30 7D ; Store zero to $7D30.w,X [Reads: X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	lda $BDBA.w,Y		; B9 BA BD ; Load $BDBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldx $B5.b,Y		; B6 B5 ; Load X register $B5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $B3B3.w,X		; 7D B3 B3 ; Add $B3B3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $24AFAF.l		; AF AF AF 24 ; Load long $24AFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $30C918.l		; AF 18 C9 30 ; Load long $30C918.l into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $AFAF.w,X		; 7D AF AF ; Add $AFAF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $B1B1AF.l		; AF AF B1 B1 ; Load long $B1B1AF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $C924.w		; AC 24 C9 ; Load $C924.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ABAB.w		; AC AB AB ; Load $ABAB.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $A9A9.w		; AC A9 A9 ; Load $A9A9.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $3C8B.w,X		; 7D 8B 3C ; Add $3C8B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$24.b		; A2 24 ; Load #$24.b into X register [Writes: X Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $24A5.w,X		; 3C A5 24 ; Test bits $24A5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta $A518A2.l		; 8F A2 18 A5 ; Store accumulator (long) $A518A2.l [Reads: Accumulator]
	bit $88.b		; 24 88 ; Test bits $88.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $24A3.w,X		; 3C A3 24 ; Test bits $24A3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $A33C.w		; 8D 3C A3 ; Store accumulator to $A33C.w [Reads: Accumulator]
	bit $8D.b		; 24 8D ; Test bits $8D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy $C90C.w		; AC 0C C9 ; Load $C90C.w into Y register [Writes: Y Index] [Flags: NZ]
	mvn $97,$7D		; 54 7D 97 ; Move block negative $97,$7D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $24C8.w		; 0C C8 24 ; Test and set bits $24C8.w [Reads: Accumulator] [Flags: Z]
	sta [$A7.b],Y		; 97 A7 ; Store accumulator (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tsb $C89B.w		; 0C 9B C8 ; Test and set bits $C89B.w [Reads: Accumulator] [Flags: Z]
	mvn $0C,$96		; 54 96 0C ; Move block negative $0C,$96 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $9B.b		; 24 9B ; Test bits $9B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $C8A2.w		; 0C A2 C8 ; Test and set bits $C8A2.w [Reads: Accumulator] [Flags: Z]
	mvn $0C,$94		; 54 94 0C ; Move block negative $0C,$94 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $94.b		; 24 94 ; Test bits $94.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $0C,$99		; 54 99 0C ; Move block negative $0C,$99 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $99.b		; 24 99 ; Test bits $99.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189B.w,X		; 7D 9B 18 ; Add $189B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $C818.w,Y		; 99 18 C8 ; Store accumulator to $C818.w,Y [Reads: Y Index, Accumulator]
	bit $A5.b		; 24 A5 ; Test bits $A5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $A3.b		; 24 A3 ; Test bits $A3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $A3.b		; 24 A3 ; Test bits $A3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda [$FA.b]		; A7 FA ; Load accumulator (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $B4E5.w,Y		; 19 E5 B4 ; OR accumulator with memory $B4E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$21.b]		; E7 21 ; Subtract with carry (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $D000.w		; 2D 00 D0 ; Logical AND $D000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $D0.b,X		; 36 D0 ; Rotate left $D0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $D86AD0.l,X		; FF D0 6A D8 ; Subtract with carry (long,X) $D86AD0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$DC.b]		; A7 DC ; Load accumulator (long) [$DC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $DE.b		; E5 DE ; Subtract $DE.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $DC.b,S		; E3 DC ; Subtract stack-relative $DC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora ($EE.b),Y		; 11 EE ; OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $13EF.w		; 6D EF 13 ; Add $13EF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	inc $F8.b,X		; F6 F8 ; Increment memory $F8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $2F.b		; A6 2F ; Load $2F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FED0.w,X		; 3C D0 FE ; Test bits $FED0.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $A3D0.w		; 4C D0 A3 ; Jump to $A3D0.w [Flow: jump]
	.db $D0, $C1		; D0 C1 ; Branch if not equal to $D0, $C1 [Flow: branch]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C8E5.w,Y		; 19 E5 C8 ; OR accumulator with memory $C8E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$1D.b]		; E7 1D ; Subtract with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sty $F529.w		; 8C 29 F5 ; Store Y register to $F529.w [Reads: Y Index]
	sbc $F70000.l,X		; FF 00 00 F7 ; Subtract with carry (long,X) $F70000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $06C8.w		; ED C8 06 ; Subtract $06C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $AEB1.w,X		; 7D B1 AE ; Add $AEB1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $06C8.w		; 0C C8 06 ; Test and set bits $06C8.w [Reads: Accumulator] [Flags: Z]
	ldx $A9AB.w		; AE AB A9 ; Load $A9AB.w into X register [Writes: X Index] [Flags: NZ]
	tsb $06C8.w		; 0C C8 06 ; Test and set bits $06C8.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$A7.b		; A9 A7 ; Load #$A7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $06C8.w		; 0C C8 06 ; Test and set bits $06C8.w [Reads: Accumulator] [Flags: Z]
	lda #$A7.b		; A9 A7 ; Load #$A7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl $A7.b		; 06 A7 ; Arithmetic shift left $A7.b [Reads: Direct Page] [Flags: NCZ]
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $06C8.w		; 0C C8 06 ; Test and set bits $06C8.w [Reads: Accumulator] [Flags: Z]
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06C80C.l,X		; 9F 0C C8 06 ; Store accumulator (long,X) $06C80C.l,X [Reads: Accumulator, X Index]
	ldx #$E8.b		; A2 E8 ; Load #$E8.b into X register [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora [$9F.b],Y		; 17 9F ; OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $C80C.w,X		; 9D 0C C8 ; Store accumulator to $C80C.w,X [Reads: Accumulator, X Index]
	asl $9F.b		; 06 9F ; Arithmetic shift left $9F.b [Reads: Direct Page] [Flags: NCZ]
	sta $C89B.w,X		; 9D 9B C8 ; Store accumulator to $C89B.w,X [Reads: Accumulator, X Index]
	asl $1296.w,X		; 1E 96 12 ; Arithmetic shift left $1296.w,X [Reads: X Index] [Flags: NCZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $1EC8.w		; ED C8 1E ; Subtract $1EC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $B1B3.w,X		; 7D B3 B1 ; Add $B1B3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $AB06.w		; AE 06 AB ; Load $AB06.w into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl $A7A9.w,X		; 1E A9 A7 ; Arithmetic shift left $A7A9.w,X [Reads: X Index] [Flags: NCZ]
	tsb $12A5.w		; 0C A5 12 ; Test and set bits $12A5.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $0C93.w,X		; 1E 93 0C ; Arithmetic shift left $0C93.w,X [Reads: X Index] [Flags: NCZ]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $42, $B7		; 42 B7 ; Reserved instruction
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $A7A9.w,X		; 7D A9 A7 ; Add $A7A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $12A5.w		; 0C A5 12 ; Test and set bits $12A5.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl $9FA2.w,X		; 1E A2 9F ; Arithmetic shift left $9FA2.w,X [Reads: X Index] [Flags: NCZ]
	ora ($9D.b)		; 12 9D ; OR accumulator with memory (indirect) ($9D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $1EC8.w		; 0C C8 1E ; Test and set bits $1EC8.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora ($99.b)		; 12 99 ; OR accumulator with memory (indirect) ($99.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $069D.w,X		; 1E 9D 06 ; Arithmetic shift left $069D.w,X [Reads: X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	mvn $E0,$C8		; 54 C8 E0 ; Move block negative $E0,$C8 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $60C8ED.l		; 0F ED C8 60 ; OR accumulator with memory (long) $60C8ED.l [Writes: Accumulator] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $42, $C9		; 42 C9 ; Reserved instruction
	asl $9F7D.w,X		; 1E 7D 9F ; Arithmetic shift left $9F7D.w,X [Reads: X Index] [Flags: NCZ]
	mvn $E0,$AE		; 54 AE E0 ; Move block negative $E0,$AE [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $60C8ED.l		; 0F ED C8 60 ; OR accumulator with memory (long) $60C8ED.l [Writes: Accumulator] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $06A2.w,X		; 7D A2 06 ; Add $06A2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr $00B1.w		; 4E B1 00 ; Logical shift right $00B1.w [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($1B.b),Y		; D1 1B ; Compare accumulator ($1B.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($2B.b),Y		; D1 2B ; Compare accumulator ($2B.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($FF.b),Y		; D1 FF ; Compare accumulator ($FF.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($8B.b),Y		; D1 8B ; Compare accumulator ($8B.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($D0.b),Y		; D1 D0 ; Compare accumulator ($D0.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($10.b),Y		; D1 10 ; Compare accumulator ($10.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($45.b)		; D2 45 ; Compare accumulator (indirect) ($45.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($7A.b)		; D2 7A ; Compare accumulator (indirect) ($7A.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($C1.b)		; D2 C1 ; Compare accumulator (indirect) ($C1.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($D3.b)		; D2 D3 ; Compare accumulator (indirect) ($D3.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($11.b)		; D2 11 ; Compare accumulator (indirect) ($11.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($32.b,S),Y		; D3 32 ; Compare accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($7F.b,S),Y		; D3 7F ; Compare accumulator (stack relative indirect indexed) ($7F.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($A4.b,S),Y		; D3 A4 ; Compare accumulator (stack relative indirect indexed) ($A4.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($CF.b,S),Y		; D3 CF ; Compare accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($E2.b,S),Y		; D3 E2 ; Compare accumulator (stack relative indirect indexed) ($E2.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($00.b,S),Y		; D3 00 ; Compare accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($79.b)		; D4 79 ; Push effective indirect address ($79.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($9A.b)		; D4 9A ; Push effective indirect address ($9A.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($03.b)		; D4 03 ; Push effective indirect address ($03.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $2C.b,X		; D5 2C ; Compare accumulator $2C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $4D.b,X		; D5 4D ; Compare accumulator $4D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $A2.b,X		; D5 A2 ; Compare accumulator $A2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $04.b,X		; D5 04 ; Compare accumulator $04.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $FA.b,X		; D6 FA ; Decrement memory $FA.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $BBF5.w,Y		; 19 F5 BB ; OR accumulator with memory $BBF5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A0.b		; E5 A0 ; Subtract $A0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E1FA.w		; ED FA E1 ; Subtract $E1FA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $E926.w		; 1C 26 E9 ; Test and reset bits $E926.w [Reads: Accumulator] [Flags: Z]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $10AE.w,X		; 5D AE 10 ; Exclusive OR accumulator with memory $10AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $AEAE.w		; 2D AE AE ; Logical AND $AEAE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldx $08AE.w		; AE AE 08 ; Load $08AE.w into X register [Writes: X Index] [Flags: NZ]
	and $EFAE.w		; 2D AE EF ; Logical AND $EFAE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $D6.b,S		; 23 D6 ; AND accumulator with stack relative $D6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3906AE.l,X		; 3F AE 06 39 ; AND accumulator with memory (long,X) $3906AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A95F.w		; 0C 5F A9 ; Test and set bits $A95F.w [Reads: Accumulator] [Flags: Z]
	asl $4F.b		; 06 4F ; Arithmetic shift left $4F.b [Reads: Direct Page] [Flags: NCZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $5F0CA9.l,X		; 3F A9 0C 5F ; AND accumulator with memory (long,X) $5F0CA9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E111E0.l,X		; FF E0 11 E1 ; Subtract with carry (long,X) $E111E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	asl $181E.w,X		; 1E 1E 18 ; Arithmetic shift left $181E.w,X [Reads: X Index] [Flags: NCZ]
	eor $0896.w,X		; 5D 96 08 ; Exclusive OR accumulator with memory $0896.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	eor $0896.w,X		; 5D 96 08 ; Exclusive OR accumulator with memory $0896.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	eor $0894.w,X		; 5D 94 08 ; Exclusive OR accumulator with memory $0894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $0894.w,X		; 5D 94 08 ; Exclusive OR accumulator with memory $0894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $0892.w,X		; 5D 92 08 ; Exclusive OR accumulator with memory $0892.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	sta ($18.b)		; 92 18 ; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	eor $0892.w,X		; 5D 92 08 ; Exclusive OR accumulator with memory $0892.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	sta ($18.b)		; 92 18 ; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0C91.w,X		; 5D 91 0C ; Exclusive OR accumulator with memory $0C91.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $ED9593.l,X		; 5F 93 95 ED ; Exclusive OR accumulator with memory (long,X) $ED9593.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $79.b		; 06 79 ; Arithmetic shift left $79.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $A6.b,X		; 75 A6 ; Add $A6.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc [$A6.b],Y		; 77 A6 ; Add with carry (long indexed) [$A6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $06A6.w,Y		; 79 A6 06 ; Add $06A6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($06A6.w,X)		; 7C A6 06 ; Jump indirect indexed to ($06A6.w,X) [Reads: X Index] [Flow: jump]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	jmp ($08A6.w,X)		; 7C A6 08 ; Jump indirect indexed to ($08A6.w,X) [Reads: X Index] [Flow: jump]
	adc $A6A6.w,Y		; 79 A6 A6 ; Add $A6A6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $EF.b		; A6 EF ; Load $EF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	bit $02D6.w,X		; 3C D6 02 ; Test bits $02D6.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $15.b		; A6 15 ; Load $15.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $03A6.w,X		; 7D A6 03 ; Add $03A6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $15A6.w,X		; 7E A6 15 ; Rotate right $15A6.w,X [Reads: X Index] [Flags: NCZ]
	adc $03A6.w,X		; 7D A6 03 ; Add $03A6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $15A6.w,X		; 7E A6 15 ; Rotate right $15A6.w,X [Reads: X Index] [Flags: NCZ]
	adc $0CA6.w,X		; 7D A6 0C ; Add $0CA6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $EDA6A6.l,X		; 7F A6 A6 ED ; Add long $EDA6A6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $E1.b		; E6 E1 ; Increment $E1.b [Reads: Direct Page] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $0D.b,S		; E3 0D ; Subtract stack-relative $0D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $3026.w		; 1C 26 30 ; Test and reset bits $3026.w [Reads: Accumulator] [Flags: Z]
	eor $10A9.w,X		; 5D A9 10 ; Exclusive OR accumulator with memory $10A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor [$A9.b],Y		; 57 A9 ; Exclusive OR accumulator with memory (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A9A9.w,Y		; 59 A9 A9 ; Exclusive OR accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor #$A9.b		; 49 A9 ; Exclusive OR #$A9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $02D65C.l		; [PATTERN: Memory clearing operation] EF 5C D6 02 ; Subtract with carry (long) $02D65C.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $A93F.w		; 0C 3F A9 ; Test and set bits $A93F.w [Reads: Accumulator] [Flags: Z]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	stz $5B06.w,X		; 9E 06 5B ; Store zero to $5B06.w,X [Reads: X Index]
	stz $9F0C.w,X		; 9E 0C 9F ; Store zero to $9F0C.w,X [Reads: X Index]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	sta $5F0C9F.l,X		; 9F 9F 0C 5F ; Store accumulator (long,X) $5F0C9F.l,X [Reads: Accumulator, X Index]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	tsb $A1A1.w		; 0C A1 A1 ; Test and set bits $A1A1.w [Reads: Accumulator] [Flags: Z]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $0BE0.w		; 0C E0 0B ; Test and set bits $0BE0.w [Reads: Accumulator] [Flags: Z]
	sbc $0E.b,S		; E3 0E ; Subtract stack-relative $0E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	jsr $302A.w		; 20 2A 30 ; Jump to subroutine at $302A.w [Writes: Stack Pointer] [Flow: call]
	eor $10A4.w,X		; 5D A4 10 ; Exclusive OR accumulator with memory $10A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor [$A4.b],Y		; 57 A4 ; Exclusive OR accumulator with memory (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A4A4.w,Y		; 59 A4 A4 ; Exclusive OR accumulator with memory $A4A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor #$A4.b		; 49 A4 ; Exclusive OR #$A4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $02D674.l		; EF 74 D6 02 ; Subtract with carry (long) $02D674.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $A43F.w		; 0C 3F A4 ; Test and set bits $A43F.w [Reads: Accumulator] [Flags: Z]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $A3A3.w,X		; 5D A3 A3 ; Exclusive OR accumulator with memory $A3A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A45F.w		; 0C 5F A4 ; Test and set bits $A45F.w [Reads: Accumulator] [Flags: Z]
	asl $A4.b		; 06 A4 ; Arithmetic shift left $A4.b [Reads: Direct Page] [Flags: NCZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E0DC.w		; ED DC E0 ; Subtract $E0DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E1.b),Y		; 11 E1 ; OR accumulator with memory ($E1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	asl $181E.w,X		; 1E 1E 18 ; Arithmetic shift left $181E.w,X [Reads: X Index] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta $3908.w,X		; 9D 08 39 ; Store accumulator to $3908.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta $3908.w,X		; 9D 08 39 ; Store accumulator to $3908.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $9B9B.w,Y		; 39 9B 9B ; AND accumulator with memory $9B9B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $9B9B.w,Y		; 39 9B 9B ; AND accumulator with memory $9B9B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta $3908.w,Y		; 99 08 39 ; Store accumulator to $3908.w,Y [Reads: Y Index, Accumulator]
	sta $9999.w,Y		; 99 99 99 ; Store accumulator to $9999.w,Y [Reads: Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta $3908.w,Y		; 99 08 39 ; Store accumulator to $3908.w,Y [Reads: Y Index, Accumulator]
	sta $9999.w,Y		; 99 99 99 ; Store accumulator to $9999.w,Y [Reads: Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $189B.w,Y		; 59 9B 18 ; Exclusive OR accumulator with memory $189B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0C9B.w,X		; 5D 9B 0C ; Exclusive OR accumulator with memory $0C9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $ED9D9C.l,X		; 5F 9C 9D ED ; Exclusive OR accumulator with memory (long,X) $ED9D9C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $03D68C.l		; EF 8C D6 03 ; Subtract with carry (long) $03D68C.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0FF.w		; ED FF E0 ; Subtract $E0FF.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $7F30.w		; 0C 30 7F ; Test and set bits $7F30.w [Reads: Accumulator] [Flags: Z]
	stz $ED9C.w		; 9C 9C ED ; Store zero to $ED9C.w
	ldy $E1.b,X		; B4 E1 ; Load Y register $E1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $13.b,S		; E3 13 ; Subtract stack-relative $13.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $10AE.w,X		; 5D AE 10 ; Exclusive OR accumulator with memory $10AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $AEAE.w		; 2D AE AE ; Logical AND $AEAE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldx $08AE.w		; AE AE 08 ; Load $08AE.w into X register [Writes: X Index] [Flags: NZ]
	and $EFAE.w		; 2D AE EF ; Logical AND $EFAE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $D6.b,S		; 23 D6 ; AND accumulator with stack relative $D6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3906AE.l,X		; 3F AE 06 39 ; AND accumulator with memory (long,X) $3906AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A95F.w		; 0C 5F A9 ; Test and set bits $A95F.w [Reads: Accumulator] [Flags: Z]
	asl $4F.b		; 06 4F ; Arithmetic shift left $4F.b [Reads: Direct Page] [Flags: NCZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $5F0CA9.l,X		; 3F A9 0C 5F ; AND accumulator with memory (long,X) $5F0CA9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec $01.b,X		; D6 01 ; Decrement memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $01D6DA.l		; EF DA D6 01 ; Subtract with carry (long) $01D6DA.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $06B5.w		; 0C B5 06 ; Test and set bits $06B5.w [Reads: Accumulator] [Flags: Z]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A94E.w		; 0C 4E A9 ; Test and set bits $A94E.w [Reads: Accumulator] [Flags: Z]
	asl $3E.b		; 06 3E ; Arithmetic shift left $3E.b [Reads: Direct Page] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A94E.w		; 0C 4E A9 ; Test and set bits $A94E.w [Reads: Accumulator] [Flags: Z]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A94F.w		; 0C 4F A9 ; Test and set bits $A94F.w [Reads: Accumulator] [Flags: Z]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D724.l		; EF 24 D7 01 ; Subtract with carry (long) $01D724.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0892.w,X		; 5D 92 08 ; Exclusive OR accumulator with memory $0892.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9292.w		; 4D 92 92 ; Exclusive OR $9292.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0899.w,X		; 5D 99 08 ; Exclusive OR accumulator with memory $0899.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9999.w		; 4D 99 99 ; Exclusive OR $9999.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $1899.w,Y		; 99 99 18 ; Store accumulator to $1899.w,Y [Reads: Y Index, Accumulator]
	eor $0897.w,X		; 5D 97 08 ; Exclusive OR accumulator with memory $0897.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9797.w		; 4D 97 97 ; Exclusive OR $9797.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index, Accumulator]
	eor $0896.w,X		; 5D 96 08 ; Exclusive OR accumulator with memory $0896.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9696.w		; 4D 96 96 ; Exclusive OR $9696.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	eor $0898.w,X		; 5D 98 08 ; Exclusive OR accumulator with memory $0898.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9898.w		; 4D 98 98 ; Exclusive OR $9898.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $9191.w,X		; 5D 91 91 ; Exclusive OR accumulator with memory $9191.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor $9593.w		; 4D 93 95 ; Exclusive OR $9593.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $E0B4.w		; ED B4 E0 ; Subtract $E0B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E1.b,S),Y		; 13 E1 ; OR accumulator (stack relative indirect indexed) ($E1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $07D73B.l		; EF 3B D7 07 ; Subtract with carry (long) $07D73B.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $A66D.w		; 0C 6D A6 ; Test and set bits $A66D.w [Reads: Accumulator] [Flags: Z]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $A66D.w		; 0C 6D A6 ; Test and set bits $A66D.w [Reads: Accumulator] [Flags: Z]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $A66D.w		; 0C 6D A6 ; Test and set bits $A66D.w [Reads: Accumulator] [Flags: Z]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E0.b)		; 12 E0 ; OR accumulator with memory (indirect) ($E0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $01D74D.l		; EF 4D D7 01 ; Subtract with carry (long) $01D74D.l [Writes: Accumulator] [Flags: NCVZ]
	sta $C808.w,X		; 9D 08 C8 ; Store accumulator to $C808.w,X [Reads: Accumulator, X Index]
	sta $309B.w,X		; 9D 9B 30 ; Store accumulator to $309B.w,X [Reads: Accumulator, X Index]
	sta $9E18.w,X		; 9D 18 9E ; Store accumulator to $9E18.w,X [Reads: Accumulator, X Index]
	tsb $069E.w		; 0C 9E 06 ; Test and set bits $069E.w [Reads: Accumulator] [Flags: Z]
	stz $30A0.w,X		; [PATTERN: Memory clearing operation] 9E A0 30 ; Store zero to $30A0.w,X [Reads: X Index]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	sta $9D0C.w,X		; 9D 0C 9D ; Store accumulator to $9D0C.w,X [Reads: Accumulator, X Index]
	asl $9D.b		; 06 9D ; Arithmetic shift left $9D.b [Reads: Direct Page] [Flags: NCZ]
	stz $A030.w,X		; 9E 30 A0 ; Store zero to $A030.w,X [Reads: X Index]
	sbc $01D76A.l		; EF 6A D7 01 ; Subtract with carry (long) $01D76A.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $01D77E.l		; EF 7E D7 01 ; Subtract with carry (long) $01D77E.l [Writes: Accumulator] [Flags: NCVZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $851885.l,X		; 7F 85 18 85 ; Add long $851885.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $ED.b		; 85 ED ; Store accumulator to $ED.b [Reads: Accumulator]
	inc $E1.b		; E6 E1 ; Increment $E1.b [Reads: Direct Page] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $13.b,S		; E3 13 ; Subtract stack-relative $13.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora $F428.w,Y		; 19 28 F4 ; OR accumulator with memory $F428.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	sty $D7.b		; 84 D7 ; Store Y register to $D7.b [Reads: Y Index]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $10B1.w		; 6D B1 10 ; Add $10B1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($08.b),Y		; B1 08 ; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $08B1.w,X		; 5D B1 08 ; Exclusive OR accumulator with memory $08B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B0.w		; 6D B0 08 ; Add $08B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $B0AE.w		; 4D AE B0 ; Exclusive OR $B0AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$AE.b		; C9 AE ; Compare #$AE.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	ldy $4D18.w		; AC 18 4D ; Load $4D18.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $2D0C.w		; AC 0C 2D ; Load $2D0C.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl $2D.b		; 06 2D ; Arithmetic shift left $2D.b [Reads: Direct Page] [Flags: NCZ]
	ldy $4D30.w		; AC 30 4D ; Load $4D30.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $6D0C.w		; AE 0C 6D ; Load $6D0C.w into X register [Writes: X Index] [Flags: NZ]
	ldy $4D0C.w		; AC 0C 4D ; Load $4D0C.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tsb $A92D.w		; 0C 2D A9 ; Test and set bits $A92D.w [Reads: Accumulator] [Flags: Z]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $30AA.w		; 2D AA 30 ; Logical AND $30AA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CAC.w		; 4D AC 0C ; Exclusive OR $0CAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CAA.w		; 6D AA 0C ; Add $0CAA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $0CA9.w		; 4D A9 0C ; Exclusive OR $0CA9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06A8.w		; 2D A8 06 ; Logical AND $06A8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18AB.w		; 6D AB 18 ; Add $18AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldx $AD0C.w		; AE 0C AD ; Load $AD0C.w into X register [Writes: X Index] [Flags: NZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A14E.w		; 0C 4E A1 ; Test and set bits $A14E.w [Reads: Accumulator] [Flags: Z]
	asl $A1.b		; 06 A1 ; Arithmetic shift left $A1.b [Reads: Direct Page] [Flags: NCZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($06.b,X)		; A1 06 ; Load accumulator ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0CA1A1.l		; 4F A1 A1 0C ; Exclusive OR accumulator with memory (long) $0CA1A1.l [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E178.w		; ED 78 E1 ; Subtract $E178.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and [$F4.b]		; 27 F4 ; AND accumulator with memory (long) [$F4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $A8EF.w,X		; 1E EF A8 ; Arithmetic shift left $A8EF.w,X [Reads: X Index] [Flags: NCZ]
	cmp [$01.b],Y		; D7 01 ; Compare accumulator (long indexed) [$01.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $01D6DA.l		; EF DA D6 01 ; Subtract with carry (long) $01D6DA.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $06B5.w		; 0C B5 06 ; Test and set bits $06B5.w [Reads: Accumulator] [Flags: Z]
	eor $A9A9.w		; 4D A9 A9 ; Exclusive OR $A9A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A94E.w		; 0C 4E A9 ; Test and set bits $A94E.w [Reads: Accumulator] [Flags: Z]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CA9A9.l		; 4F A9 A9 0C ; Exclusive OR accumulator with memory (long) $0CA9A9.l [Writes: Accumulator] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec $01.b,X		; D6 01 ; Decrement memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $01D7CE.l		; EF CE D7 01 ; Subtract with carry (long) $01D7CE.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $06B5.w		; 0C B5 06 ; Test and set bits $06B5.w [Reads: Accumulator] [Flags: Z]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A94E.w		; 0C 4E A9 ; Test and set bits $A94E.w [Reads: Accumulator] [Flags: Z]
	asl $3E.b		; 06 3E ; Arithmetic shift left $3E.b [Reads: Direct Page] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A94E.w		; 0C 4E A9 ; Test and set bits $A94E.w [Reads: Accumulator] [Flags: Z]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A94F.w		; 0C 4F A9 ; Test and set bits $A94F.w [Reads: Accumulator] [Flags: Z]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D724.l		; EF 24 D7 01 ; Subtract with carry (long) $01D724.l [Writes: Accumulator] [Flags: NCVZ]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $919118.l		; 8F 18 91 91 ; Store accumulator (long) $919118.l [Reads: Accumulator]
	sbc $02D806.l		; EF 06 D8 02 ; Subtract with carry (long) $02D806.l [Writes: Accumulator] [Flags: NCVZ]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index, Accumulator]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($95.b,S),Y		; 93 95 ; Store accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $04D73B.l		; EF 3B D7 04 ; Subtract with carry (long) $04D73B.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02D81C.l		; EF 1C D8 02 ; Subtract with carry (long) $02D81C.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $03D73B.l		; EF 3B D7 03 ; Subtract with carry (long) $03D73B.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $A66D.w		; 0C 6D A6 ; Test and set bits $A66D.w [Reads: Accumulator] [Flags: Z]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $A66D.w		; 0C 6D A6 ; Test and set bits $A66D.w [Reads: Accumulator] [Flags: Z]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $A66D.w		; 0C 6D A6 ; Test and set bits $A66D.w [Reads: Accumulator] [Flags: Z]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc ($12.b,X)		; E1 12 ; Subtract with carry ($12.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $01D74D.l		; EF 4D D7 01 ; Subtract with carry (long) $01D74D.l [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $9D		; 30 9D ; Branch if minus to $30, $9D [Flow: branch]
	lda ($EF.b,X)		; A1 EF ; Load accumulator ($EF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $D8		; 50 D8 ; Branch if overflow clear to $50, $D8 [Flow: branch]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $9E0C.w,X		; 9E 0C 9E ; Store zero to $9E0C.w,X [Reads: X Index]
	asl $9E.b		; 06 9E ; Arithmetic shift left $9E.b [Reads: Direct Page] [Flags: NCZ]
	sta $9E30.w,X		; 9D 30 9E ; Store accumulator to $9E30.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $9D0C.w,X		; 9D 0C 9D ; Store accumulator to $9D0C.w,X [Reads: Accumulator, X Index]
	asl $9D.b		; 06 9D ; Arithmetic shift left $9D.b [Reads: Direct Page] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $9D		; 30 9D ; Branch if minus to $30, $9D [Flow: branch]
	sbc $01D76A.l		; EF 6A D7 01 ; Subtract with carry (long) $01D76A.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $13.b,S		; E3 13 ; Subtract stack-relative $13.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora $EF26.w,Y		; 19 26 EF ; OR accumulator with memory $EF26.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $01D7.w,X		; 7E D7 01 ; Rotate right $01D7.w,X [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$A8.b		; A2 A8 ; Load #$A8.b into X register [Writes: X Index] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	ldy $A1.b		; A4 A1 ; Load $A1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx #$A8.b		; A2 A8 ; Load #$A8.b into X register [Writes: X Index] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	ldy $A1.b		; A4 A1 ; Load $A1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $01D77E.l		; EF 7E D7 01 ; Subtract with carry (long) $01D77E.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0E6.w		; ED E6 E0 ; Subtract $E0E6.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $01D784.l		; EF 84 D7 01 ; Subtract with carry (long) $01D784.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda ($18.b),Y		; B1 18 ; Load accumulator ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0C.b,X		; B4 0C ; Load Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($C9.b,S),Y		; B3 C9 ; Load accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AE48.w		; AD 48 AE ; Load $AE48.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($0C.b),Y		; B1 0C ; Load accumulator ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AE48.w		; AD 48 AE ; Load $AE48.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($0C.b),Y		; B1 0C ; Load accumulator ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $C9AE0C.l		; AF 0C AE C9 ; Load long $C9AE0C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: NCZ]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18AB.w		; 6D AB 18 ; Add $18AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldx $AD0C.w		; AE 0C AD ; Load $AD0C.w into X register [Writes: X Index] [Flags: NZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A14E.w		; 0C 4E A1 ; Test and set bits $A14E.w [Reads: Accumulator] [Flags: Z]
	asl $A1.b		; 06 A1 ; Arithmetic shift left $A1.b [Reads: Direct Page] [Flags: NCZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($06.b,X)		; A1 06 ; Load accumulator ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0CA1A1.l		; 4F A1 A1 0C ; Exclusive OR accumulator with memory (long) $0CA1A1.l [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E1.b,S),Y		; 13 E1 ; OR accumulator (stack relative indirect indexed) ($E1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $01D77E.l		; EF 7E D7 01 ; Subtract with carry (long) $01D77E.l [Writes: Accumulator] [Flags: NCVZ]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $79.b		; 06 79 ; Arithmetic shift left $79.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $9A.b,S		; 03 9A ; OR accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $30FA.w		; ED FA 30 ; Subtract $30FA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $58EF9C.l,X		; 7F 9C EF 58 ; Add long $58EF9C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($ED.b,S),Y		; 13 ED ; OR accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	adc $069A.w,X		; 7D 9A 06 ; Add $069A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $79.b		; 06 79 ; Arithmetic shift left $79.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $7B.b,S		; 03 7B ; OR accumulator with stack relative $7B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $30FA.w		; ED FA 30 ; Subtract $30FA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $58EF9C.l,X		; 7F 9C EF 58 ; Add long $58EF9C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $D8.b		; 65 D8 ; Add $D8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $18.b		; 85 18 ; Store accumulator to $18.b [Reads: Accumulator]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	sbc $01D7A8.l		; EF A8 D7 01 ; Subtract with carry (long) $01D7A8.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01D7CE.l		; EF CE D7 01 ; Subtract with carry (long) $01D7CE.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $06B5.w		; 0C B5 06 ; Test and set bits $06B5.w [Reads: Accumulator] [Flags: Z]
	eor $A9A9.w		; 4D A9 A9 ; Exclusive OR $A9A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A94E.w		; 0C 4E A9 ; Test and set bits $A94E.w [Reads: Accumulator] [Flags: Z]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CA9A9.l		; 4F A9 A9 0C ; Exclusive OR accumulator with memory (long) $0CA9A9.l [Writes: Accumulator] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $08C9AE.l,X		; 5F AE C9 08 ; Exclusive OR accumulator with memory (long,X) $08C9AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18AC.w,Y		; 59 AC 18 ; Exclusive OR accumulator with memory $18AC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $10AE.w,X		; 5D AE 10 ; Exclusive OR accumulator with memory $10AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $04C8.w,X		; 3D C8 04 ; AND accumulator with memory $04C8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $AEAE.w		; 2D AE AE ; Logical AND $AEAE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldx $08AE.w		; AE AE 08 ; Load $08AE.w into X register [Writes: X Index] [Flags: NZ]
	and $00AE.w		; 2D AE 00 ; Logical AND $00AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: NCZ]
	asl $75.b		; 06 75 ; Arithmetic shift left $75.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc [$A6.b],Y		; 77 A6 ; Add with carry (long indexed) [$A6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $06A6.w,Y		; 79 A6 06 ; Add $06A6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($06A6.w,X)		; 7C A6 06 ; Jump indirect indexed to ($06A6.w,X) [Reads: X Index] [Flow: jump]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	jmp ($08A6.w,X)		; 7C A6 08 ; Jump indirect indexed to ($08A6.w,X) [Reads: X Index] [Flow: jump]
	adc $A6A6.w,Y		; 79 A6 A6 ; Add $A6A6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $08C9A9.l,X		; 5F A9 C9 08 ; Exclusive OR accumulator with memory (long,X) $08C9A9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A9.w,Y		; 59 A9 18 ; Exclusive OR accumulator with memory $18A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $10A9.w,X		; 5D A9 10 ; Exclusive OR accumulator with memory $10A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$A9.b],Y		; 57 A9 ; Exclusive OR accumulator with memory (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A9A9.w,Y		; 59 A9 A9 ; Exclusive OR accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor #$A9.b		; 49 A9 ; Exclusive OR #$A9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $08C9A4.l,X		; 5F A4 C9 08 ; Exclusive OR accumulator with memory (long,X) $08C9A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A4.w,Y		; 59 A4 18 ; Exclusive OR accumulator with memory $18A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $10A4.w,X		; 5D A4 10 ; Exclusive OR accumulator with memory $10A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$A4.b],Y		; 57 A4 ; Exclusive OR accumulator with memory (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A4A4.w,Y		; 59 A4 A4 ; Exclusive OR accumulator with memory $A4A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor #$A4.b		; 49 A4 ; Exclusive OR #$A4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $06A6.w,Y		; 79 A6 06 ; Add $06A6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$A6.b],Y		; 77 A6 ; Add with carry (long indexed) [$A6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $75.b		; 06 75 ; Arithmetic shift left $75.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ror $A6.b,X		; 76 A6 ; Rotate right $A6.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $06A6.w,Y		; 79 A6 06 ; Add $06A6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $2D.b		; A6 2D ; Load $2D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $E1FA.w		; ED FA E1 ; Subtract $E1FA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $0C26.w		; 1C 26 0C ; Test and reset bits $0C26.w [Reads: Accumulator] [Flags: Z]
	eor $C9AE.w		; 4D AE C9 ; Exclusive OR $C9AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $06A9.w		; 6D A9 06 ; Add $06A9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06AE.w		; 4D AE 06 ; Exclusive OR $06AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06AE.w,X		; 5D AE 06 ; Exclusive OR accumulator with memory $06AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06B0.w		; 4D B0 06 ; Exclusive OR $06B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B2.w,X		; 5D B2 06 ; Exclusive OR accumulator with memory $06B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30B3.w		; 4D B3 30 ; Exclusive OR $30B3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB5.w		; 6D B5 0C ; Add $0CB5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08B5.w		; 2D B5 08 ; Logical AND $08B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $08B5.w,X		; 7D B5 08 ; Add $08B5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B8B6.w,X		; 5D B6 B8 ; Exclusive OR accumulator with memory $B8B6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $10BA.w		; 6D BA 10 ; Add $10BA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08BA.w		; 2D BA 08 ; Logical AND $08BA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $08BA.w,X		; 5D BA 08 ; Exclusive OR accumulator with memory $08BA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B8.w		; 6D B8 08 ; Add $08B8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $B8B6.w		; 4D B6 B8 ; Exclusive OR $B8B6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$B6.b		; C9 B6 ; Compare #$B6.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0CB5.w		; 4D B5 0C ; Exclusive OR $0CB5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06B3.w		; 2D B3 06 ; Logical AND $06B3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B3.w,X		; 5D B3 06 ; Exclusive OR accumulator with memory $06B3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $30B5.w		; 2D B5 30 ; Logical AND $30B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CB6.w		; 4D B6 0C ; Exclusive OR $0CB6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB5.w		; 6D B5 0C ; Add $0CB5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $0CB3.w		; 4D B3 0C ; Exclusive OR $0CB3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06B1.w		; 2D B1 06 ; Logical AND $06B1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B1.w,X		; 5D B1 06 ; Exclusive OR accumulator with memory $06B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $30B3.w		; 2D B3 30 ; Logical AND $30B3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CB5.w		; 4D B5 0C ; Exclusive OR $0CB5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB3.w		; 6D B3 0C ; Add $0CB3.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $0CB1.w		; 4D B1 0C ; Exclusive OR $0CB1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06B0.w		; 2D B0 06 ; Logical AND $06B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0896.w,X		; 5D 96 08 ; Exclusive OR accumulator with memory $0896.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9696.w		; 4D 96 96 ; Exclusive OR $9696.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0894.w,X		; 5D 94 08 ; Exclusive OR accumulator with memory $0894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9494.w		; 4D 94 94 ; Exclusive OR $9494.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($18.b)		; 92 18 ; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $08A6.w		; 6D A6 08 ; Add $08A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	asl $79.b		; 06 79 ; Arithmetic shift left $79.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$30.b		; A2 30 ; Load #$30.b into X register [Writes: X Index] [Flags: NZ]
	sta $C812.w,X		; 9D 12 C8 ; Store accumulator to $C812.w,X [Reads: Accumulator, X Index]
	asl $A2.b		; 06 A2 ; Arithmetic shift left $A2.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$A4.b		; A2 A4 ; Load #$A4.b into X register [Writes: X Index] [Flags: NZ]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	ora ($C8.b)		; 12 C8 ; OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $9E.b		; 06 9E ; Arithmetic shift left $9E.b [Reads: Direct Page] [Flags: NCZ]
	stz $A2A0.w,X		; [PATTERN: Memory clearing operation] 9E A0 A2 ; Store zero to $A2A0.w,X [Reads: X Index]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $9E.b		; A5 9E ; Load $9E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $9C0C.w		; 9C 0C 9C ; Store zero to $9C0C.w
	asl $9C.b		; 06 9C ; Arithmetic shift left $9C.b [Reads: Direct Page] [Flags: NCZ]
	sta $9F0C.w,X		; 9D 0C 9F ; Store accumulator to $9F0C.w,X [Reads: Accumulator, X Index]
	asl $9F.b		; 06 9F ; Arithmetic shift left $9F.b [Reads: Direct Page] [Flags: NCZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$A4.b		; A2 A4 ; Load #$A4.b into X register [Writes: X Index] [Flags: NZ]
	.db $30, $77		; 30 77 ; Branch if minus to $30, $77 [Flow: branch]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $C9A6.w		; 4D A6 C9 ; Exclusive OR $C9A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $06A2.w		; 6D A2 06 ; Add $06A2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A6.w		; 4D A6 06 ; Exclusive OR $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A6.w,X		; 5D A6 06 ; Exclusive OR accumulator with memory $06A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A7.w		; 4D A7 06 ; Exclusive OR $06A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A9.w,X		; 5D A9 06 ; Exclusive OR accumulator with memory $06A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30AB.w		; 4D AB 30 ; Exclusive OR $30AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CAC.w		; 6D AC 0C ; Add $0CAC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08AC.w		; 2D AC 08 ; Logical AND $08AC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $AEAC.w,X		; 5D AC AE ; Exclusive OR accumulator with memory $AEAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	ora #$C9.b		; 09 C9 ; Logical OR #$C9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AE4D.w		; 0C 4D AE ; Test and set bits $AE4D.w [Reads: Accumulator] [Flags: Z]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $06A9.w		; 6D A9 06 ; Add $06A9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06AE.w		; 4D AE 06 ; Exclusive OR $06AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06AE.w,X		; 5D AE 06 ; Exclusive OR accumulator with memory $06AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06B0.w		; 4D B0 06 ; Exclusive OR $06B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B2.w,X		; 5D B2 06 ; Exclusive OR accumulator with memory $06B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30B3.w		; 4D B3 30 ; Exclusive OR $30B3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB5.w		; 6D B5 0C ; Add $0CB5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08B5.w		; 2D B5 08 ; Logical AND $08B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $B6B5.w,X		; 5D B5 B6 ; Exclusive OR accumulator with memory $B6B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $BC0C.w,X		; BD 0C BC ; Load $BC0C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $B518.w,Y		; B9 18 B5 ; Load $B518.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $18.b,Y		; B6 18 ; Load X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $B5		; 30 B5 ; Branch if minus to $30, $B5 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $48.b,X		; B5 48 ; Load $48.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $18.b,Y		; B6 18 ; Load X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $B5		; 30 B5 ; Branch if minus to $30, $B5 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($48.b)		; B2 48 ; Load accumulator (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $0C.b,Y		; B6 0C ; Load X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda $C9.b,X		; B5 C9 ; Load $C9.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $B1		; 30 B1 ; Branch if minus to $30, $B1 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $2B0C.w		; AE 0C 2B ; Load $2B0C.w into X register [Writes: X Index] [Flags: NZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $999690.l		; 4F 90 96 99 ; Exclusive OR accumulator with memory (long) $999690.l [Writes: Accumulator] [Flags: NZ]
	stz $A5A2.w		; 9C A2 A5 ; Store zero to $A5A2.w
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $08A9.w		; 4D A9 08 ; Exclusive OR $08A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($18.b),Y		; 91 18 ; Store accumulator ($18.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($C9.b),Y		; 91 C9 ; Store accumulator ($C9.b),Y [Reads: Direct Page, Y Index, Accumulator]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $06A6.w		; 6D A6 06 ; Add $06A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc [$A6.b]		; 67 A6 ; Add with carry (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc #$A6.b		; 69 A6 ; Add #$A6.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $A6A6.w		; 6D A6 A6 ; Add $A6A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl $79.b		; 06 79 ; Arithmetic shift left $79.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08A6.w		; 6D A6 08 ; Add $08A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	asl $79.b		; 06 79 ; Arithmetic shift left $79.b [Reads: Direct Page] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $A248.w		; 9C 48 A2 ; Store zero to $A248.w
	.db $30, $A1		; 30 A1 ; Branch if minus to $30, $A1 [Flow: branch]
	sta $E000.w,X		; 9D 00 E0 ; Store accumulator to $E000.w,X [Reads: Accumulator, X Index]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc $D86C00.l,X		; FF 00 6C D8 ; Subtract with carry (long,X) $D86C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	nop		; EA ; No operation
	cld		; D8 ; Clear decimal flag [Flags: D]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $D9.b		; 05 D9 ; Logical OR $D9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $D9.b,X		; 16 D9 ; Arithmetic shift left $D9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $0000.w,Y		; D9 00 00 ; Compare accumulator $0000.w,Y [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $6AD9.w,X		; 3E D9 6A ; Rotate left $6AD9.w,X [Reads: X Index] [Flags: NCZ]
	cmp $D983.w,Y		; D9 83 D9 ; Compare accumulator $D983.w,Y [Reads: Y Index] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $0000.w,Y		; D9 00 00 ; Compare accumulator $0000.w,Y [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $D9.b		; A4 D9 ; Load $D9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $D7D9.w,Y		; BE D9 D7 ; Load X register $D7D9.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp $D9DF.w,Y		; D9 DF D9 ; Compare accumulator $D9DF.w,Y [Reads: Y Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $DA42.w,Y		; D9 42 DA ; Compare accumulator $DA42.w,Y [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $96DA.w		; 8C DA 96 ; Store Y register to $96DA.w [Reads: Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $DAAADA.l,X		; 9F DA AA DA ; Store accumulator (long,X) $DAAADA.l,X [Reads: Accumulator, X Index]
	lda ($DA.b,S),Y		; B3 DA ; Load accumulator (stack relative indirect indexed) ($DA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $DA.b,X		; D5 DA ; Compare accumulator $DA.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$DA.b],Y		; F7 DA ; Subtract with carry (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $DB.b		; 24 DB ; Test bits $DB.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $DB.b,X		; 35 DB ; Logical AND $DB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc [$DB.b],Y		; 77 DB ; Add with carry (long indexed) [$DB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $CBDB.w,Y		; B9 DB CB ; Load $CBDB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp.w [$E6DB]		; DC DB E6 ; Jump long indirect [$E6DB] [Flow: jump]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc [$DB.b],Y		; F7 DB ; Subtract with carry (long indexed) [$DB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp.w [$0000]		; DC 00 00 ; Jump long indirect [$0000] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $48C918.l		; AF 18 C9 48 ; Load long $48C918.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($18.b),Y		; B1 18 ; Load accumulator ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7D0C.w		; AD 0C 7D ; Load $7D0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $97		; 90 97 ; Branch if carry clear to $90, $97 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $20EF.w		; 9C EF 20 ; Store zero to $20EF.w
	jmp.w [$1803]		; DC 03 18 ; Jump long indirect [$1803] [Flow: jump]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $01DC26.l		; EF 26 DC 01 ; Subtract with carry (long) $01DC26.l [Writes: Accumulator] [Flags: NCVZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $01DC59.l		; EF 59 DC 01 ; Subtract with carry (long) $01DC59.l [Writes: Accumulator] [Flags: NCVZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $18FA.w		; AD FA 18 ; Load $18FA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $C8.b		; E5 C8 ; Subtract $C8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$1D.b]		; E7 1D ; Subtract with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	asl $2828.w,X		; 1E 28 28 ; Arithmetic shift left $2828.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $E000.w		; AE 00 E0 ; Load $E000.w into X register [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $01DC.w		; 8C DC 01 ; Store Y register to $01DC.w [Reads: Y Index]
	sbc $03DC9B.l		; EF 9B DC 03 ; Subtract with carry (long) $03DC9B.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$E0.b]		; A7 E0 ; Load accumulator (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora $181E.w,Y		; 19 1E 18 ; OR accumulator with memory $181E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $E000.w		; AE 00 E0 ; Load $E000.w into X register [Writes: X Index] [Flags: NZ]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora $181E.w,Y		; 19 1E 18 ; OR accumulator with memory $181E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $01DC.w		; 8C DC 01 ; Store Y register to $01DC.w [Reads: Y Index]
	sbc $03DC9B.l		; EF 9B DC 03 ; Subtract with carry (long) $03DC9B.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$E0.b]		; A7 E0 ; Load accumulator (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ADAD.w		; AC AD AD ; Load $ADAD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AEAD.w		; AD AD AE ; Load $AEAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $C918.w		; AE 18 C9 ; Load $C918.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7D0C.w		; AD 0C 7D ; Load $7D0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $9B.b,X		; 94 9B ; Store Y register $9B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $9C.b,X		; 95 9C ; Store accumulator to $9C.b,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $ADAD.w		; AE AD AD ; Load $ADAD.w into X register [Writes: X Index] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $18AD.w		; AD AD 18 ; Load $18AD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $C918.w		; AE 18 C9 ; Load $C918.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $48C918.l		; AF 18 C9 48 ; Load long $48C918.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $C918.w		; AE 18 C9 ; Load $C918.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7D0C.w		; AD 0C 7D ; Load $7D0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $9B.b,X		; 94 9B ; Store Y register $9B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$EF.b		; A0 EF ; Load #$EF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($DC.b,X)		; A1 DC ; Load accumulator ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AFAF.w		; AE AF AF ; Load $AFAF.w into X register [Writes: X Index] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AEAEAF.l		; AF AF AE AE ; Load long $AEAEAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $ADAE.w		; AE AE AD ; Load $ADAE.w into X register [Writes: X Index] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $48C918.l		; AF 18 C9 48 ; Load long $48C918.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($18.b),Y		; B1 18 ; Load accumulator ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $907D.w		; 0C 7D 90 ; Test and set bits $907D.w [Reads: Accumulator] [Flags: Z]
	sta [$48.b],Y		; 97 48 ; Store accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index, Accumulator]
	stz $20EF.w		; 9C EF 20 ; Store zero to $20EF.w
	jmp.w [$1803]		; DC 03 18 ; Jump long indirect [$1803] [Flow: jump]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rol $DC.b		; 26 DC ; Rotate left $DC.b [Reads: Direct Page] [Flags: NCZ]
	ora ($B0.b,X)		; 01 B0 ; Logical OR ($B0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $EF		; B0 EF ; Branch if carry set to $B0, $EF [Flow: branch]
	eor $01DC.w,Y		; 59 DC 01 ; Exclusive OR accumulator with memory $01DC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $97		; 90 97 ; Branch if carry clear to $90, $97 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $0600.w		; 9C 00 06 ; Store zero to $0600.w
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $E000.w		; AC 00 E0 ; Load $E000.w into Y register [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3D2.w		; ED D2 E3 ; Subtract $E3D2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7D0C.w,X		; 1E 0C 7D ; Arithmetic shift left $7D0C.w,X [Reads: X Index] [Flags: NCZ]
	sty $4893.w		; 8C 93 48 ; Store Y register to $4893.w [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $4893.w		; 8C 93 48 ; Store Y register to $4893.w [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $9B.b,X		; 94 9B ; Store Y register $9B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp $DC.b,X		; D5 DC ; Compare accumulator $DC.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $DC.b,X		; B5 DC ; Load $DC.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DC.b		; C5 DC ; Compare $DC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $DC.b		; E5 DC ; Subtract $DC.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DCA700.l,X		; FF 00 A7 DC ; Subtract with carry (long,X) $DCA700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DC.b,X		; F5 DC ; Subtract $DC.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $DD25DD.l		; 0F DD 25 DD ; OR accumulator with memory (long) $DD25DD.l [Writes: Accumulator] [Flags: NZ]
	and ($DD.b),Y		; 31 DD ; AND accumulator with memory ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $00DD.w,X		; 3E DD 00 ; Rotate left $00DD.w,X [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $DD59.w,X		; DD 59 DD ; Compare accumulator $DD59.w,X [Reads: X Index] [Flags: NCZ]
	adc $DD7BDD.l		; 6F DD 7B DD ; Add with carry (long) $DD7BDD.l [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $0000.w,X		; DD 00 00 ; Compare accumulator $0000.w,X [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $DD.b,X		; 95 DD ; Store accumulator to $DD.b,X [Reads: Accumulator, X Index]
	lda $DD.b,X		; B5 DD ; Load $DD.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	cmp $0000.w,X		; DD 00 00 ; Compare accumulator $0000.w,X [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$DD.b],Y		; D7 DD ; Compare accumulator (long indexed) [$DD.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc ($DD.b),Y		; F1 DD ; Subtract with carry ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dec $DE1B.w,X		; DE 1B DE ; Decrement memory $DE1B.w,X [Reads: X Index] [Flags: NZ]
	bit $DE.b,X		; 34 DE ; Test bits $DE.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C8.b		; E5 C8 ; Subtract $C8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$23.b]		; E7 23 ; Subtract with carry (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	eor $01DE.w		; 4D DE 01 ; Exclusive OR $01DE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda $5D3C.w		; AD 3C 5D ; Load $5D3C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $0C0A.w,X		; 1E 0A 0C ; Arithmetic shift left $0C0A.w,X [Reads: X Index] [Flags: NCZ]
	and $A19A.w,X		; 3D 9A A1 ; AND accumulator with memory $A19A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $03DE63.l		; EF 63 DE 03 ; Subtract with carry (long) $03DE63.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	jmp ($04DE.w)		; 6C DE 04 ; Jump indirect to ($04DE.w) [Flow: jump]
	sbc $01DE79.l		; EF 79 DE 01 ; Subtract with carry (long) $01DE79.l [Writes: Accumulator] [Flags: NCVZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $30A3.w,X		; 5D A3 30 ; Exclusive OR accumulator with memory $30A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta [$DE.b],Y		; 97 DE ; Store accumulator (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $3CB4.w,X		; 7D B4 3C ; Add $3CB4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $30AD.w,X		; 5D AD 30 ; Exclusive OR accumulator with memory $30AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $DE.b,X		; B5 DE ; Load $DE.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $3CAD.w,X		; 7D AD 3C ; Add $3CAD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $30B2.w,X		; 5D B2 30 ; Exclusive OR accumulator with memory $30B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $0C0A.w,X		; 1E 0A 0C ; Arithmetic shift left $0C0A.w,X [Reads: X Index] [Flags: NCZ]
	and $A19A.w,X		; 3D 9A A1 ; AND accumulator with memory $A19A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $03DE63.l		; EF 63 DE 03 ; Subtract with carry (long) $03DE63.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	jmp ($04DE.w)		; 6C DE 04 ; Jump indirect to ($04DE.w) [Flow: jump]
	sbc $01DE79.l		; EF 79 DE 01 ; Subtract with carry (long) $01DE79.l [Writes: Accumulator] [Flags: NCVZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $30AF.w,X		; 5D AF 30 ; Exclusive OR accumulator with memory $30AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta [$DE.b],Y		; 97 DE ; Store accumulator (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $3CB4.w,X		; 7D B4 3C ; Add $3CB4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $30B9.w,X		; 5D B9 30 ; Exclusive OR accumulator with memory $30B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$FA.b		; C9 FA ; Compare #$FA.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora [$E5.b],Y		; 17 E5 ; OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc [$25.b]		; E7 25 ; Subtract with carry (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $02.b		; 14 02 ; Test and reset bits $02.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $60.b		; 14 60 ; Test and reset bits $60.b [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $0C0A.w,X		; 1E 0A 0C ; Arithmetic shift left $0C0A.w,X [Reads: X Index] [Flags: NCZ]
	and $A19A.w,X		; 3D 9A A1 ; AND accumulator with memory $A19A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $03DE63.l		; EF 63 DE 03 ; Subtract with carry (long) $03DE63.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	jmp ($04DE.w)		; 6C DE 04 ; Jump indirect to ($04DE.w) [Flow: jump]
	sbc $01DE97.l		; EF 97 DE 01 ; Subtract with carry (long) $01DE97.l [Writes: Accumulator] [Flags: NCVZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $3C.b,X		; B4 3C ; Load Y register $3C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $30AD.w,X		; 5D AD 30 ; Exclusive OR accumulator with memory $30AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06AD.w,X		; 7D AD 06 ; Add $06AD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $0CAB.w		; AC AB 0C ; Load $0CAB.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $0C0A.w,X		; 1E 0A 0C ; Arithmetic shift left $0C0A.w,X [Reads: X Index] [Flags: NCZ]
	and $A19A.w,X		; 3D 9A A1 ; AND accumulator with memory $A19A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $03DE63.l		; EF 63 DE 03 ; Subtract with carry (long) $03DE63.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02DED3.l		; EF D3 DE 02 ; Subtract with carry (long) $02DED3.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	jmp ($04DE.w)		; 6C DE 04 ; Jump indirect to ($04DE.w) [Flow: jump]
	sbc $02DEDC.l		; EF DC DE 02 ; Subtract with carry (long) $02DEDC.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01DE79.l		; EF 79 DE 01 ; Subtract with carry (long) $01DE79.l [Writes: Accumulator] [Flags: NCVZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $30A3.w,X		; 5D A3 30 ; Exclusive OR accumulator with memory $30A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06A3.w,X		; 7D A3 06 ; Add $06A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$A1.b		; A2 A1 ; Load #$A1.b into X register [Writes: X Index] [Flags: NZ]
	tsb $60A0.w		; 0C A0 60 ; Test and set bits $60A0.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $DE.b,X		; B5 DE ; Load $DE.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $3CAD.w,X		; 7D AD 3C ; Add $3CAD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $30A6.w,X		; 5D A6 30 ; Exclusive OR accumulator with memory $30A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $18A6.w,X		; 3D A6 18 ; AND accumulator with memory $18A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$B0.b		; C9 B0 ; Compare #$B0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $C9ABC9.l		; AF C9 AB C9 ; Load long $C9ABC9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $934D.w		; 0C 4D 93 ; Test and set bits $934D.w [Reads: Accumulator] [Flags: Z]
	tsb $9A3D.w		; 0C 3D 9A ; Test and set bits $9A3D.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	tsb $A33D.w		; 0C 3D A3 ; Test and set bits $A33D.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$AD.b		; C9 AD ; Compare #$AD.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp #$A8.b		; C9 A8 ; Compare #$A8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	and $18AD.w,X		; 3D AD 18 ; AND accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $0CC918.l		; AF 18 C9 0C ; Load long $0CC918.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	cmp #$B7.b		; C9 B7 ; Compare #$B7.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $C9.b,Y		; B6 C9 ; Load X register $C9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda ($C9.b)		; B2 C9 ; Load accumulator (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	tsb $A63D.w		; 0C 3D A6 ; Test and set bits $A63D.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$B0.b		; C9 B0 ; Compare #$B0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $C9ABC9.l		; AF C9 AB C9 ; Load long $C9ABC9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($99.b)		; 92 99 ; Store accumulator (indirect) ($99.b) [Reads: Direct Page, Accumulator]
	sta $9999.w,Y		; 99 99 99 ; Store accumulator to $9999.w,Y [Reads: Y Index, Accumulator]
	sta $9999.w,Y		; 99 99 99 ; Store accumulator to $9999.w,Y [Reads: Y Index, Accumulator]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $DF01.w,X		; DE 01 DF ; Decrement memory $DF01.w,X [Reads: X Index] [Flags: NZ]
	and ($DF.b,X)		; 21 DF ; Logical AND ($DF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $DEE500.l,X		; FF 00 E5 DE ; Subtract with carry (long,X) $DEE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($DF.b),Y		; 31 DF ; AND accumulator with memory ($DF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $B1DF76.l,X		; DF 76 DF B1 ; Compare accumulator (long,X) $B1DF76.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $00DFEC.l,X		; DF EC DF 00 ; Compare accumulator (long,X) $00DFEC.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$2C.b		; E0 2C ; Compare #$2C.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$3C.b		; E0 3C ; Compare #$3C.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$48.b		; E0 48 ; Compare #$48.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$4C.b		; E0 4C ; Compare #$4C.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$75.b		; E0 75 ; Compare #$75.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$C3.b		; E0 C3 ; Compare #$C3.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$D3.b		; E0 D3 ; Compare #$D3.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$E1.b		; E0 E1 ; Compare #$E1.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$E5.b		; E0 E5 ; Compare #$E5.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$31.b		; E0 31 ; Compare #$31.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($8C.b,X)		; E1 8C ; Subtract with carry ($8C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($9F.b,X)		; E1 9F ; Subtract with carry ($9F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($AB.b,X)		; E1 AB ; Subtract with carry ($AB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($D3.b,X)		; E1 D3 ; Subtract with carry ($D3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FC.b,X)		; E1 FC ; Subtract with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
.INDEX 8
	sep #$FA		; E2 FA
	ora [$E5.b],Y		; 17 E5 ; OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc [$1D.b]		; E7 1D ; Subtract with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	asl $ED1E.w,X		; 1E 1E ED ; Arithmetic shift left $ED1E.w,X [Reads: X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$AF.b		; 29 AF ; Logical AND #$AF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AF2B.w		; 0C 2B AF ; Test and set bits $AF2B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $AF290C.l		; AF 0C 29 AF ; Load long $AF290C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $36EFAF.l		; AF AF EF 36 ; Load long $36EFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sep #$01		; E2 01 ; Set processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp #$AF.b		; C9 AF ; Compare #$AF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $AF2B.w		; 0C 2B AF ; Test and set bits $AF2B.w [Reads: Accumulator] [Flags: Z]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	lda $00C90C.l		; AF 0C C9 00 ; Load long $00C90C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1E14.w,X		; 1E 14 1E ; Arithmetic shift left $1E14.w,X [Reads: X Index] [Flags: NCZ]
	sbc $02E250.l		; EF 50 E2 02 ; Subtract with carry (long) $02E250.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0B4.w		; ED B4 E0 ; Subtract $E0B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$AC.b		; 29 AC ; Logical AND #$AC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AC2B.w		; 0C 2B AC ; Test and set bits $AC2B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldy $290C.w		; AC 0C 29 ; Load $290C.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$AD.b		; C9 AD ; Compare #$AD.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $AD2B.w		; 0C 2B AD ; Test and set bits $AD2B.w [Reads: Accumulator] [Flags: Z]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	lda $C90C.w		; AD 0C C9 ; Load $C90C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and #$AC.b		; 29 AC ; Logical AND #$AC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AC2B.w		; 0C 2B AC ; Test and set bits $AC2B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldy $290C.w		; AC 0C 29 ; Load $290C.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$AD.b		; C9 AD ; Compare #$AD.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $AD2B.w		; 0C 2B AD ; Test and set bits $AD2B.w [Reads: Accumulator] [Flags: Z]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	lda $C90C.w		; AD 0C C9 ; Load $C90C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $E0B4.w		; ED B4 E0 ; Subtract $E0B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$A8.b		; 29 A8 ; Logical AND #$A8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A82B.w		; 0C 2B A8 ; Test and set bits $A82B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $A829.w		; 0C 29 A8 ; Test and set bits $A829.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp #$A9.b		; C9 A9 ; Compare #$A9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $A92B.w		; 0C 2B A9 ; Test and set bits $A92B.w [Reads: Accumulator] [Flags: Z]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $A829.w		; 0C 29 A8 ; Test and set bits $A829.w [Reads: Accumulator] [Flags: Z]
	tsb $A82B.w		; 0C 2B A8 ; Test and set bits $A82B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $A829.w		; 0C 29 A8 ; Test and set bits $A829.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp #$A9.b		; C9 A9 ; Compare #$A9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $A92B.w		; 0C 2B A9 ; Test and set bits $A92B.w [Reads: Accumulator] [Flags: Z]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	asl $60.b,X		; 16 60 ; Arithmetic shift left $60.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $7D18.w,Y		; B9 18 7D ; Load $7D18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $7D18.w,Y		; B9 18 7D ; Load $7D18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $E082.w		; ED 82 E0 ; Subtract $E082.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	trb $C9.b		; 14 C9 ; Test and reset bits $C9.b [Reads: Accumulator] [Flags: Z]
	tsb $AF29.w		; 0C 29 AF ; Test and set bits $AF29.w [Reads: Accumulator] [Flags: Z]
	tsb $AF2B.w		; 0C 2B AF ; Test and set bits $AF2B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $AF290C.l		; AF 0C 29 AF ; Load long $AF290C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $36EFAF.l		; AF AF EF 36 ; Load long $36EFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sep #$01		; E2 01 ; Set processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp #$AF.b		; C9 AF ; Compare #$AF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $AF2B.w		; 0C 2B AF ; Test and set bits $AF2B.w [Reads: Accumulator] [Flags: Z]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	lda $EFC904.l		; AF 04 C9 EF ; Load long $EFC904.l into accumulator [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sep #$01		; E2 01 ; Set processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $01E274.l		; EF 74 E2 01 ; Subtract with carry (long) $01E274.l [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $00C9.w		; 0C C9 00 ; Test and set bits $00C9.w [Reads: Accumulator] [Flags: Z]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1E14.w,X		; 1E 14 1E ; Arithmetic shift left $1E14.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $989F.w		; 6D 9F 98 ; Add $989F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $EF96.w,X		; 9D 96 EF ; Store accumulator to $EF96.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sep #$01		; E2 01 ; Set processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$AB.b		; 29 AB ; Logical AND #$AB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AB5B.w		; 0C 5B AB ; Test and set bits $AB5B.w [Reads: Accumulator] [Flags: Z]
	tsb $AB29.w		; 0C 29 AB ; Test and set bits $AB29.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AB59.w		; 0C 59 AB ; Test and set bits $AB59.w [Reads: Accumulator] [Flags: Z]
	tsb $AB2B.w		; 0C 2B AB ; Test and set bits $AB2B.w [Reads: Accumulator] [Flags: Z]
	tsb $AB29.w		; 0C 29 AB ; Test and set bits $AB29.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $02E2CA.l		; EF CA E2 02 ; Subtract with carry (long) $02E2CA.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$A6.b		; 29 A6 ; Logical AND #$A6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $A65B.w		; 0C 5B A6 ; Test and set bits $A65B.w [Reads: Accumulator] [Flags: Z]
	tsb $A629.w		; 0C 29 A6 ; Test and set bits $A629.w [Reads: Accumulator] [Flags: Z]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$A4.b		; C9 A4 ; Compare #$A4.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsb $A45B.w		; 0C 5B A4 ; Test and set bits $A45B.w [Reads: Accumulator] [Flags: Z]
	tsb $A429.w		; 0C 29 A4 ; Test and set bits $A429.w [Reads: Accumulator] [Flags: Z]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$A4.b		; C9 A4 ; Compare #$A4.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsb $A459.w		; 0C 59 A4 ; Test and set bits $A459.w [Reads: Accumulator] [Flags: Z]
	tsb $A42B.w		; 0C 2B A4 ; Test and set bits $A42B.w [Reads: Accumulator] [Flags: Z]
	tsb $A429.w		; 0C 29 A4 ; Test and set bits $A429.w [Reads: Accumulator] [Flags: Z]
	ldy $C9.b		; A4 C9 ; Load $C9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	eor $0CA2.w,Y		; 59 A2 0C ; Exclusive OR accumulator with memory $0CA2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	and #$A2.b		; 29 A2 ; Logical AND #$A2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$EF.b		; A2 EF ; Load #$EF.b into X register [Writes: X Index] [Flags: NZ]
	cmp [$E2.b],Y		; D7 E2 ; Compare accumulator (long indexed) [$E2.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $E2.b,X		; 74 E2 ; Store zero to $E2.b,X [Reads: X Index]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	sbc $01E25A.l		; EF 5A E2 01 ; Subtract with carry (long) $01E25A.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01E274.l		; EF 74 E2 01 ; Subtract with carry (long) $01E274.l [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $00C9.w		; 0C C9 00 ; Test and set bits $00C9.w [Reads: Accumulator] [Flags: Z]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1E14.w,X		; 1E 14 1E ; Arithmetic shift left $1E14.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $989F.w		; 6D 9F 98 ; Add $989F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $EF9C.w,X		; 9D 9C EF ; Store accumulator to $EF9C.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sep #$01		; E2 01 ; Set processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	sbc $02E2F1.l		; EF F1 E2 02 ; Subtract with carry (long) $02E2F1.l [Writes: Accumulator] [Flags: NCVZ]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A9A9.w,Y		; 59 A9 A9 ; Exclusive OR accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A9A9.w,Y		; 59 A9 A9 ; Exclusive OR accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A9.w,X		; 5D A9 06 ; Exclusive OR accumulator with memory $06A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A9A9.w,Y		; 59 A9 A9 ; Exclusive OR accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A9A9.w,Y		; 59 A9 A9 ; Exclusive OR accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A8A8.w,Y		; 59 A8 A8 ; Exclusive OR accumulator with memory $A8A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	eor $A6A6.w,Y		; 59 A6 A6 ; Exclusive OR accumulator with memory $A6A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	eor $A6A6.w,Y		; 59 A6 A6 ; Exclusive OR accumulator with memory $A6A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	eor $06A6.w,X		; 5D A6 06 ; Exclusive OR accumulator with memory $06A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A6A6.w,Y		; 59 A6 A6 ; Exclusive OR accumulator with memory $A6A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	eor $A6A6.w,Y		; 59 A6 A6 ; Exclusive OR accumulator with memory $A6A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $EF.b		; A6 EF ; Load $EF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $06A3.w,X		; 5D A3 06 ; Exclusive OR accumulator with memory $06A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A3A3.w,Y		; 59 A3 A3 ; Exclusive OR accumulator with memory $A3A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $A3A3.w,Y		; 59 A3 A3 ; Exclusive OR accumulator with memory $A3A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $06A3.w,X		; 5D A3 06 ; Exclusive OR accumulator with memory $06A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A3A3.w,Y		; 59 A3 A3 ; Exclusive OR accumulator with memory $A3A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $A3A3.w,Y		; 59 A3 A3 ; Exclusive OR accumulator with memory $A3A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $EF.b,S		; A3 EF ; Load accumulator (stack relative) $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$E2.b],Y		; D7 E2 ; Compare accumulator (long indexed) [$E2.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $E2.b,X		; 74 E2 ; Store zero to $E2.b,X [Reads: X Index]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	sbc $01E333.l		; EF 33 E3 01 ; Subtract with carry (long) $01E333.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9694.w		; 6D 94 96 ; Add $9694.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $E3.b,X		; 16 E3 ; Arithmetic shift left $E3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $1E14.w,X		; 1E 14 1E ; Arithmetic shift left $1E14.w,X [Reads: X Index] [Flags: NCZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$B7.b		; 29 B7 ; Logical AND #$B7.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $B72B.w		; 0C 2B B7 ; Test and set bits $B72B.w [Reads: Accumulator] [Flags: Z]
	lda [$0C.b],Y		; B7 0C ; Load accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $18B7.w		; 2D B7 18 ; Logical AND $18B7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$B0.b		; 29 B0 ; Logical AND #$B0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $C8B0.w		; 0C B0 C8 ; Test and set bits $C8B0.w [Reads: Accumulator] [Flags: Z]
	lda ($B4.b)		; B2 B4 ; Load accumulator (indirect) ($B4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B5.b,X		; B4 B5 ; Load Y register $B5.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda [$60.b],Y		; B7 60 ; Load accumulator (long indexed) [$60.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$A0.b		; 29 A0 ; Logical AND #$A0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	tsb $A05B.w		; 0C 5B A0 ; Test and set bits $A05B.w [Reads: Accumulator] [Flags: Z]
	tsb $A029.w		; 0C 29 A0 ; Test and set bits $A029.w [Reads: Accumulator] [Flags: Z]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$A2.b		; C9 A2 ; Compare #$A2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	eor $0CA2.w,Y		; 59 A2 0C ; Exclusive OR accumulator with memory $0CA2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	and #$A2.b		; 29 A2 ; Logical AND #$A2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	sbc $02E34E.l		; EF 4E E3 02 ; Subtract with carry (long) $02E34E.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$A7.b		; 29 A7 ; Logical AND #$A7.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $A75B.w		; 0C 5B A7 ; Test and set bits $A75B.w [Reads: Accumulator] [Flags: Z]
	tsb $A729.w		; 0C 29 A7 ; Test and set bits $A729.w [Reads: Accumulator] [Flags: Z]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$A9.b		; C9 A9 ; Compare #$A9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A95B.w		; 0C 5B A9 ; Test and set bits $A95B.w [Reads: Accumulator] [Flags: Z]
	tsb $A929.w		; 0C 29 A9 ; Test and set bits $A929.w [Reads: Accumulator] [Flags: Z]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $02E35B.l		; EF 5B E3 02 ; Subtract with carry (long) $02E35B.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E08C.w		; ED 8C E0 ; Subtract $E08C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	sbc $01E333.l		; EF 33 E3 01 ; Subtract with carry (long) $01E333.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $AF2B0C.l		; AF 0C 2B AF ; Load long $AF2B0C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	lda $C9C90C.l		; AF 0C C9 C9 ; Load long $C9C90C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AF29.w		; 0C 29 AF ; Test and set bits $AF29.w [Reads: Accumulator] [Flags: Z]
	tsb $AF2B.w		; 0C 2B AF ; Test and set bits $AF2B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $AF290C.l		; AF 0C 29 AF ; Load long $AF290C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $4800AF.l		; AF AF 00 48 ; Load long $4800AF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$9C.b		; 69 9C ; Add #$9C.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $3097.w		; 6D 97 30 ; Add $3097.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0098.w,X		; 9D 98 00 ; Store accumulator to $0098.w,X [Reads: Accumulator, X Index]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$AF.b		; 29 AF ; Logical AND #$AF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AF2B.w		; 0C 2B AF ; Test and set bits $AF2B.w [Reads: Accumulator] [Flags: Z]
	lda $AF2D0C.l		; AF 0C 2D AF ; Load long $AF2D0C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and #$A9.b		; 29 A9 ; Logical AND #$A9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $00A9.w		; 0C A9 00 ; Test and set bits $00A9.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	tsb $C9C9.w		; 0C C9 C9 ; Test and set bits $C9C9.w [Reads: Accumulator] [Flags: Z]
	lda $2B0C.w		; AD 0C 2B ; Load $2B0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $0CAD.w		; AD AD 0C ; Load $0CAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $18AD.w		; 2D AD 18 ; Logical AND $18AD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$A8.b		; 29 A8 ; Logical AND #$A8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $00A8.w		; 0C A8 00 ; Test and set bits $00A8.w [Reads: Accumulator] [Flags: Z]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $E3.b,X		; 16 E3 ; Arithmetic shift left $E3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $1E14.w,X		; 1E 14 1E ; Arithmetic shift left $1E14.w,X [Reads: X Index] [Flags: NCZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$BB.b		; 29 BB ; Logical AND #$BB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $BB2B.w		; 0C 2B BB ; Test and set bits $BB2B.w [Reads: Accumulator] [Flags: Z]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $BB2D.w		; 0C 2D BB ; Test and set bits $BB2D.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor #$B5.b		; 49 B5 ; Exclusive OR #$B5.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $B529.w		; 0C 29 B5 ; Test and set bits $B529.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $06.b,X		; B4 06 ; Load Y register $06.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B2.b,X		; B4 B2 ; Load Y register $B2.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	ldy $0C.b,X		; B4 0C ; Load Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $B929.w		; 0C 29 B9 ; Test and set bits $B929.w [Reads: Accumulator] [Flags: Z]
	tsb $B92B.w		; 0C 2B B9 ; Test and set bits $B92B.w [Reads: Accumulator] [Flags: Z]
	lda $2D0C.w,Y		; B9 0C 2D ; Load $2D0C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $4918.w,Y		; B9 18 49 ; Load $4918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0C.b,X		; B4 0C ; Load Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	and #$B4.b		; 29 B4 ; Logical AND #$B4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$A9.b		; C9 A9 ; Compare #$A9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A95B.w		; 0C 5B A9 ; Test and set bits $A95B.w [Reads: Accumulator] [Flags: Z]
	tsb $A929.w		; 0C 29 A9 ; Test and set bits $A929.w [Reads: Accumulator] [Flags: Z]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0AE0.w		; 8C E0 0A ; Store Y register to $0AE0.w [Reads: Y Index]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	trb $C9.b		; 14 C9 ; Test and reset bits $C9.b [Reads: Accumulator] [Flags: Z]
	tsb $AF29.w		; 0C 29 AF ; Test and set bits $AF29.w [Reads: Accumulator] [Flags: Z]
	tsb $AF2B.w		; 0C 2B AF ; Test and set bits $AF2B.w [Reads: Accumulator] [Flags: Z]
	lda $AF2D0C.l		; AF 0C 2D AF ; Load long $AF2D0C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and #$A9.b		; 29 A9 ; Logical AND #$A9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $00A9.w		; 0C A9 00 ; Test and set bits $00A9.w [Reads: Accumulator] [Flags: Z]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A4A4.w,Y		; 59 A4 A4 ; Exclusive OR accumulator with memory $A4A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $A4A4.w,Y		; 59 A4 A4 ; Exclusive OR accumulator with memory $A4A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A4A4.w,Y		; 59 A4 A4 ; Exclusive OR accumulator with memory $A4A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $A4A4.w,Y		; 59 A4 A4 ; Exclusive OR accumulator with memory $A4A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and #$AB.b		; 29 AB ; Logical AND #$AB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AB2B.w		; 0C 2B AB ; Test and set bits $AB2B.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AB2D.w		; 0C 2D AB ; Test and set bits $AB2D.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	and #$A4.b		; 29 A4 ; Logical AND #$A4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $C8A4.w		; 0C A4 C8 ; Test and set bits $C8A4.w [Reads: Accumulator] [Flags: Z]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AB5B.w		; 0C 5B AB ; Test and set bits $AB5B.w [Reads: Accumulator] [Flags: Z]
	tsb $AB29.w		; 0C 29 AB ; Test and set bits $AB29.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $0CA4.w,Y		; 59 A4 0C ; Exclusive OR accumulator with memory $0CA4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	and #$A4.b		; 29 A4 ; Logical AND #$A4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sty $9CE3.w		; 8C E3 9C ; Store Y register to $9CE3.w [Reads: Y Index]
	sbc $AC.b,S		; E3 AC ; Subtract stack-relative $AC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $AC.b,S		; E3 AC ; Subtract stack-relative $AC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $BC.b,S		; E3 BC ; Subtract stack-relative $BC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $CC.b,S		; E3 CC ; Subtract stack-relative $CC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EE.b,S		; E3 EE ; Subtract stack-relative $EE.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $0C.b,S		; E3 0C ; Subtract stack-relative $0C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cpx $1A.b		; E4 1A ; Compare $1A.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $58.b		; E4 58 ; Compare $58.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $64.b		; E4 64 ; Compare $64.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $6C.b		; E4 6C ; Compare $6C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $89.b		; E4 89 ; Compare $89.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $95.b		; E4 95 ; Compare $95.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $9D.b		; E4 9D ; Compare $9D.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $A9.b		; E4 A9 ; Compare $A9.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $DD.b		; E4 DD ; Compare $DD.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1D.b		; E5 1D ; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3B.b		; E5 3B ; Subtract $3B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $49.b		; E5 49 ; Subtract $49.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5B.b		; E5 5B ; Subtract $5B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A3.b		; E5 A3 ; Subtract $A3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	inc $33.b		; E6 33 ; Increment $33.b [Reads: Direct Page] [Flags: NZ]
	inc $3E.b		; E6 3E ; Increment $3E.b [Reads: Direct Page] [Flags: NZ]
	inc $4E.b		; E6 4E ; Increment $4E.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $8D.b		; E6 8D ; Increment $8D.b [Reads: Direct Page] [Flags: NZ]
	inc $98.b		; E6 98 ; Increment $98.b [Reads: Direct Page] [Flags: NZ]
	inc $BA.b		; E6 BA ; Increment $BA.b [Reads: Direct Page] [Flags: NZ]
	inc $C5.b		; E6 C5 ; Increment $C5.b [Reads: Direct Page] [Flags: NZ]
	inc $E9.b		; E6 E9 ; Increment $E9.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda $B048AD.l		; AF AD 48 B0 ; Load long $B048AD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $ADAF.w		; 0C AF AD ; Test and set bits $ADAF.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $EF00C8.l		; AF C8 00 EF ; Load long $EF00C8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $C918.w		; AE 18 C9 ; Load $C918.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $01E74E.l		; EF 4E E7 01 ; Subtract with carry (long) $01E74E.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $9A93.w		; 0C 93 9A ; Test and set bits $9A93.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9A930C.l,X		; 9F 0C 93 9A ; Store accumulator (long,X) $9A930C.l,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $E776EF.l,X		; 9F EF 76 E7 ; Store accumulator (long,X) $E776EF.l,X [Reads: Accumulator, X Index]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $01E7.w		; 8C E7 01 ; Store Y register to $01E7.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $60.b		; A6 60 ; Load $60.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora [$E5.b],Y		; 17 E5 ; OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc [$1D.b]		; E7 1D ; Subtract with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	asl $2828.w,X		; 1E 28 28 ; Arithmetic shift left $2828.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $EF00.w		; AE 00 EF ; Load $EF00.w into X register [Writes: X Index] [Flags: NZ]
	sta $E7.b,X		; 95 E7 ; Store accumulator to $E7.b,X [Reads: Accumulator, X Index]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $01E7.w		; 8C E7 01 ; Store Y register to $01E7.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $E7.b,S		; A3 E7 ; Load accumulator (stack relative) $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($E7.b)		; B2 E7 ; Load accumulator (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $EF.b,S		; 03 EF ; OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$EF.b]		; A7 EF ; Load accumulator (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $EF00.w		; AE 00 EF ; Load $EF00.w into X register [Writes: X Index] [Flags: NZ]
	sta $E7.b,X		; 95 E7 ; Store accumulator to $E7.b,X [Reads: Accumulator, X Index]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $01E7.w		; 8C E7 01 ; Store Y register to $01E7.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $E7.b,S		; A3 E7 ; Load accumulator (stack relative) $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($E7.b)		; B2 E7 ; Load accumulator (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $EF.b,S		; 03 EF ; OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$EF.b]		; A7 EF ; Load accumulator (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ADAD.w		; AC AD AD ; Load $ADAD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AEAD.w		; AD AD AE ; Load $AEAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $01E7E5.l		; EF E5 E7 01 ; Subtract with carry (long) $01E7E5.l [Writes: Accumulator] [Flags: NCVZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01E728.l		; EF 28 E7 01 ; Subtract with carry (long) $01E728.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda $B048AD.l		; AF AD 48 B0 ; Load long $B048AD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $ADAF.w		; 0C AF AD ; Test and set bits $ADAF.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $EF00C8.l		; AF C8 00 EF ; Load long $EF00C8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $C918.w		; AE 18 C9 ; Load $C918.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $C918.w		; AC 18 C9 ; Load $C918.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $01E74E.l		; EF 4E E7 01 ; Subtract with carry (long) $01E74E.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $9A93.w		; 0C 93 9A ; Test and set bits $9A93.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9A930C.l,X		; 9F 0C 93 9A ; Store accumulator (long,X) $9A930C.l,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $E776EF.l,X		; 9F EF 76 E7 ; Store accumulator (long,X) $E776EF.l,X [Reads: Accumulator, X Index]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $01E7.w		; 8C E7 01 ; Store Y register to $01E7.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $60.b		; A6 60 ; Load $60.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $01E7CA.l		; EF CA E7 01 ; Subtract with carry (long) $01E7CA.l [Writes: Accumulator] [Flags: NCVZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $ACAC.w		; AE AC AC ; Load $ACAC.w into X register [Writes: X Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $ADAC.w		; AC AC AD ; Load $ADAC.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $03E806.l		; EF 06 E8 03 ; Subtract with carry (long) $03E806.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $01E7E5.l		; EF E5 E7 01 ; Subtract with carry (long) $01E7E5.l [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $02E817.l		; EF 17 E8 02 ; Subtract with carry (long) $02E817.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01E828.l		; EF 28 E8 01 ; Subtract with carry (long) $01E828.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $A930.w		; AD 30 A9 ; Load $A930.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $A8A9.w		; AE A9 A8 ; Load $A8A9.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AD48.w		; AE 48 AD ; Load $AD48.w into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $A901E8.l,X		; 3F E8 01 A9 ; AND accumulator with memory (long,X) $A901E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $ADAC.w		; AE AC AD ; Load $ADAC.w into X register [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $01E84B.l		; EF 4B E8 01 ; Subtract with carry (long) $01E84B.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $9C95.w		; 0C 95 9C ; Test and set bits $9C95.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A1		; 30 A1 ; Branch if minus to $30, $A1 [Flow: branch]
	tsb $9C95.w		; 0C 95 9C ; Test and set bits $9C95.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A1		; 30 A1 ; Branch if minus to $30, $A1 [Flow: branch]
	tsb $9A93.w		; 0C 93 9A ; Test and set bits $9A93.w [Reads: Accumulator] [Flags: Z]
	.db $30, $9F		; 30 9F ; Branch if minus to $30, $9F [Flow: branch]
	tsb $938C.w		; 0C 8C 93 ; Test and set bits $938C.w [Reads: Accumulator] [Flags: Z]
	.db $30, $98		; 30 98 ; Branch if minus to $30, $98 [Flow: branch]
	tsb $9891.w		; 0C 91 98 ; Test and set bits $9891.w [Reads: Accumulator] [Flags: Z]
	.db $30, $9D		; 30 9D ; Branch if minus to $30, $9D [Flow: branch]
	tsb $9891.w		; 0C 91 98 ; Test and set bits $9891.w [Reads: Accumulator] [Flags: Z]
	.db $30, $9D		; 30 9D ; Branch if minus to $30, $9D [Flow: branch]
	sbc $01E85F.l		; EF 5F E8 01 ; Subtract with carry (long) $01E85F.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $AB.b		; A4 AB ; Load $AB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$A8.b]		; A7 A8 ; Load accumulator (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $C8.b		; A6 C8 ; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $01E86B.l		; EF 6B E8 01 ; Subtract with carry (long) $01E86B.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02E88E.l		; EF 8E E8 02 ; Subtract with carry (long) $02E88E.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02E89B.l		; EF 9B E8 02 ; Subtract with carry (long) $02E89B.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02E8A8.l		; EF A8 E8 02 ; Subtract with carry (long) $02E8A8.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $02E8A8.l		; EF A8 E8 02 ; Subtract with carry (long) $02E8A8.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02E8B5.l		; EF B5 E8 02 ; Subtract with carry (long) $02E8B5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02E8C2.l		; EF C2 E8 02 ; Subtract with carry (long) $02E8C2.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01E828.l		; EF 28 E8 01 ; Subtract with carry (long) $01E828.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $AB30.w		; AD 30 AB ; Load $AB30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $AB		; B0 AB ; Branch if carry set to $B0, $AB [Flow: branch]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00AF.w		; AD AF 00 ; Load $00AF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01E83F.l		; EF 3F E8 01 ; Subtract with carry (long) $01E83F.l [Writes: Accumulator] [Flags: NCVZ]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $AAAD.w		; AC AD AA ; Load $AAAD.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $01E84B.l		; EF 4B E8 01 ; Subtract with carry (long) $01E84B.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $9C95.w		; 0C 95 9C ; Test and set bits $9C95.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A1		; 30 A1 ; Branch if minus to $30, $A1 [Flow: branch]
	tsb $9C95.w		; 0C 95 9C ; Test and set bits $9C95.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A1		; 30 A1 ; Branch if minus to $30, $A1 [Flow: branch]
	tsb $9B94.w		; 0C 94 9B ; Test and set bits $9B94.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	tsb $9B94.w		; 0C 94 9B ; Test and set bits $9B94.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	tsb $9A93.w		; 0C 93 9A ; Test and set bits $9A93.w [Reads: Accumulator] [Flags: Z]
	.db $30, $9F		; 30 9F ; Branch if minus to $30, $9F [Flow: branch]
	tsb $9992.w		; 0C 92 99 ; Test and set bits $9992.w [Reads: Accumulator] [Flags: Z]
	.db $30, $9E		; 30 9E ; Branch if minus to $30, $9E [Flow: branch]
	sbc $01E85F.l		; EF 5F E8 01 ; Subtract with carry (long) $01E85F.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $AB.b		; A4 AB ; Load $AB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$A8.b]		; A7 A8 ; Load accumulator (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $C8.b		; A6 C8 ; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $01E86B.l		; EF 6B E8 01 ; Subtract with carry (long) $01E86B.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02E88E.l		; EF 8E E8 02 ; Subtract with carry (long) $02E88E.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02E8CF.l		; EF CF E8 02 ; Subtract with carry (long) $02E8CF.l [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $04E8A8.l		; EF A8 E8 04 ; Subtract with carry (long) $04E8A8.l [Writes: Accumulator] [Flags: NCVZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B48.w,X		; 1E 48 7B ; Arithmetic shift left $7B48.w,X [Reads: X Index] [Flags: NCZ]
	lda $ABAD0C.l		; AF 0C AD AB ; Load long $ABAD0C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B248.w		; AD 48 B2 ; Load $B248.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AEB0.w		; 0C B0 AE ; Test and set bits $AEB0.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3D2.w		; ED D2 E3 ; Subtract $E3D2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7D0C.w,X		; 1E 0C 7D ; Arithmetic shift left $7D0C.w,X [Reads: X Index] [Flags: NCZ]
	sta ($98.b),Y		; 91 98 ; Store accumulator ($98.b),Y [Reads: Direct Page, Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $960C.w,X		; 9D 0C 96 ; Store accumulator to $960C.w,X [Reads: Accumulator, X Index]
	sta $A248.w,X		; 9D 48 A2 ; Store accumulator to $A248.w,X [Reads: Accumulator, X Index]
	tsb $968F.w		; 0C 8F 96 ; Test and set bits $968F.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $9B94.w		; 0C 94 9B ; Test and set bits $9B94.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $9C.b,X		; 95 9C ; Store accumulator to $9C.b,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stx $4895.w		; 8E 95 48 ; Store X register to $4895.w [Reads: X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3D2.w		; ED D2 E3 ; Subtract $E3D2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7D0C.w,X		; 1E 0C 7D ; Arithmetic shift left $7D0C.w,X [Reads: X Index] [Flags: NCZ]
	sty $4893.w		; 8C 93 48 ; Store Y register to $4893.w [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $4893.w		; 8C 93 48 ; Store Y register to $4893.w [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A8.b]		; A7 A8 ; Load accumulator (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B30.w,X		; 1E 30 7B ; Arithmetic shift left $7B30.w,X [Reads: X Index] [Flags: NCZ]
	lda $B218.w		; AD 18 B2 ; Load $B218.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda $E000B0.l		; AF B0 00 E0 ; Load long $E000B0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E300.w		; ED 00 E3 ; Subtract $E300.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B48.w,X		; 1E 48 7B ; Arithmetic shift left $7B48.w,X [Reads: X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3D2.w		; ED D2 E3 ; Subtract $E3D2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7D0C.w,X		; 1E 0C 7D ; Arithmetic shift left $7D0C.w,X [Reads: X Index] [Flags: NCZ]
	stx $9D.b,Y		; 96 9D ; Store X register $9D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	tsb $9D96.w		; 0C 96 9D ; Test and set bits $9D96.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E300.w		; ED 00 E3 ; Subtract $E300.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B48.w,X		; 1E 48 7B ; Arithmetic shift left $7B48.w,X [Reads: X Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $7B06.w,X		; 1E 06 7B ; Arithmetic shift left $7B06.w,X [Reads: X Index] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $42, $E9		; 42 E9 ; Reserved instruction
	sbc ($E8.b)		; F2 E8 ; Subtract with carry (indirect) ($E8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cop $E9.b		; 02 E9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($E8.b)		; F2 E8 ; Subtract with carry (indirect) ($E8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($E9.b)		; 12 E9 ; OR accumulator with memory (indirect) ($E9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $E932E9.l		; 22 E9 32 E9 ; Jump to subroutine long $E932E9.l [Writes: Stack Pointer] [Flow: call]
	eor ($E9.b)		; 52 E9 ; Exclusive OR accumulator with memory (indirect) ($E9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E8DE00.l,X		; FF 00 DE E8 ; Subtract with carry (long,X) $E8DE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $E9, $7B		; 62 E9 7B ; Push effective relative address $62, $E9, $7B [Writes: Stack Pointer]
	sbc #$8F.b		; E9 8F ; Subtract #$8F.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$AF.b		; E9 AF ; Subtract #$AF.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$CF.b		; E9 CF ; Subtract #$CF.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$F1.b		; E9 F1 ; Subtract #$F1.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	and ($EA.b)		; 32 EA ; AND accumulator with memory (indirect) ($EA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $EA.b		; 46 EA ; Logical shift right $EA.b [Reads: Direct Page] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	nop		; EA ; No operation
	stz $EA.b,X		; 74 EA ; Store zero to $EA.b,X [Reads: X Index]
	sty $00EA.w		; 8C EA 00 ; Store Y register to $00EA.w [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	nop		; EA ; No operation
	dec $E2EA.w		; CE EA E2 ; Decrement $E2EA.w [Flags: NZ]
	nop		; EA ; No operation
	jsr ($13EA.w,X)		; FC EA 13 ; Jump to subroutine indirect indexed ($13EA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jmp ($00EB.w)		; 6C EB 00 ; Jump indirect to ($00EB.w) [Flow: jump]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$EB.b		; A2 EB ; Load #$EB.b into X register [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpy $DEEB.w		; CC EB DE ; Compare $DEEB.w with Y register [Reads: Y Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $EB.b,X		; F6 EB ; Increment memory $EB.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $EC33EC.l		; 0F EC 33 EC ; OR accumulator with memory (long) $EC33EC.l [Writes: Accumulator] [Flags: NZ]
	eor #$EC.b		; 49 EC ; Exclusive OR #$EC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($EC.b),Y		; 51 EC ; Exclusive OR accumulator with memory ($EC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $68EC.w,Y		; 59 EC 68 ; Exclusive OR accumulator with memory $68EC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx $0000.w		; EC 00 00 ; Compare $0000.w with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $EC.b,X		; 74 EC ; Store zero to $EC.b,X [Reads: X Index]
	sta $EC.b		; 85 EC ; Store accumulator to $EC.b [Reads: Accumulator]
	sta $AEEC.w,Y		; 99 EC AE ; Store accumulator to $AEEC.w,Y [Reads: Y Index, Accumulator]
	cpx $ECC3.w		; EC C3 EC ; Compare $ECC3.w with X register [Reads: X Index] [Flags: NCZ]
	cmp ($EC.b),Y		; D1 EC ; Compare accumulator ($EC.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01ECDD.l		; EF DD EC 01 ; Subtract with carry (long) $01ECDD.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $30B5.w		; 6D B5 30 ; Add $30B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EFA9.w,X		; 7D A9 EF ; Add $EFA9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $01EC.w,X		; DD EC 01 ; Compare accumulator $01EC.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $30B5.w		; 6D B5 30 ; Add $30B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00B5.w,X		; 7D B5 00 ; Add $00B5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $24966D.l		; 22 6D 96 24 ; Jump to subroutine long $24966D.l [Writes: Stack Pointer] [Flow: call]
	ldx $93.b		; A6 93 ; Load $93.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx #$98.b		; A2 98 ; Load #$98.b into X register [Writes: X Index] [Flags: NZ]
	lda #$91.b		; A9 91 ; Load #$91.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$96.b]		; A7 96 ; Load accumulator (long) [$96.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $93.b		; A6 93 ; Load $93.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx #$98.b		; A2 98 ; Load #$98.b into X register [Writes: X Index] [Flags: NZ]
	lda #$91.b		; A9 91 ; Load #$91.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rol $A7.b		; 26 A7 ; Rotate left $A7.b [Reads: Direct Page] [Flags: NCZ]
	sbc $01ECEA.l		; EF EA EC 01 ; Subtract with carry (long) $01ECEA.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $24C90C.l,X		; 9F 0C C9 24 ; Store accumulator (long,X) $24C90C.l,X [Reads: Accumulator, X Index]
	sta $0CA218.l,X		; 9F 18 A2 0C ; Store accumulator (long,X) $0CA218.l,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A418.w,X		; 9D 18 A4 ; Store accumulator to $A418.w,X [Reads: Accumulator, X Index]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	sta $A218.w,X		; 9D 18 A2 ; Store accumulator to $A218.w,X [Reads: Accumulator, X Index]
	sbc $01ECFC.l		; EF FC EC 01 ; Subtract with carry (long) $01ECFC.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ED0F.l		; EF 0F ED 01 ; Subtract with carry (long) $01ED0F.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $189A0C.l,X		; 9F 0C 9A 18 ; Store accumulator (long,X) $189A0C.l,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $24C918.l,X		; 9F 18 C9 24 ; Store accumulator (long,X) $24C918.l,X [Reads: Accumulator, X Index]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $21EF.w,X		; 9D EF 21 ; Store accumulator to $21EF.w,X [Reads: Accumulator, X Index]
	sbc $E001.w		; ED 01 E0 ; Subtract $E001.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $ED.b,X		; 16 ED ; Arithmetic shift left $ED.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	sbc $01ECDD.l		; EF DD EC 01 ; Subtract with carry (long) $01ECDD.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $30B5.w		; 6D B5 30 ; Add $30B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EFA9.w,X		; 7D A9 EF ; Add $EFA9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $01EC.w,X		; DD EC 01 ; Compare accumulator $01EC.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $30B5.w		; 6D B5 30 ; Add $30B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E0A9.w,X		; 7D A9 E0 ; Add $E0A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $18AE.w		; 6D AE 18 ; Add $18AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $30A9.w,X		; 7D A9 30 ; Add $30A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $48AE.w,X		; 7D AE 48 ; Add $48AE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $30B5.w		; 6D B5 30 ; Add $30B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EFA9.w,X		; 7D A9 EF ; Add $EFA9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $01EC.w,X		; DD EC 01 ; Compare accumulator $01EC.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $30B5.w		; 6D B5 30 ; Add $30B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $7D		; 10 7D ; Branch if plus to $10, $7D [Flow: branch]
	lda $48.b,X		; B5 48 ; Load $48.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $30B7.w		; 6D B7 30 ; Add $30B7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda $7D18.w		; AD 18 7D ; Load $7D18.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$48.b],Y		; B7 48 ; Load accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $B2B5.w		; 6D B5 B2 ; Add $B2B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $ED.b,X		; 34 ED ; Test bits $ED.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00A9.w,X		; 7D A9 00 ; Add $00A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $248F6D.l		; 22 6D 8F 24 ; Jump to subroutine long $248F6D.l [Writes: Stack Pointer] [Flow: call]
	sta $969D91.l,X		; 9F 91 9D 96 ; Store accumulator (long,X) $969D91.l,X [Reads: Accumulator, X Index]
	sta $9A93.w,X		; 9D 93 9A ; Store accumulator to $9A93.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $969891.l,X		; 9F 91 98 96 ; Store accumulator (long,X) $969891.l,X [Reads: Accumulator, X Index]
	sta $2696.w,X		; 9D 96 26 ; Store accumulator to $2696.w,X [Reads: Accumulator, X Index]
	sta $3DEF.w,X		; 9D EF 3D ; Store accumulator to $3DEF.w,X [Reads: Accumulator, X Index]
	sbc $0C01.w		; ED 01 0C ; Subtract $0C01.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx #$EF.b		; A2 EF ; Load #$EF.b into X register [Writes: X Index] [Flags: NZ]
	eor $01ED.w,Y		; 59 ED 01 ; Exclusive OR accumulator with memory $01ED.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	sta $A21A.w,X		; 9D 1A A2 ; Store accumulator to $A21A.w,X [Reads: Accumulator, X Index]
	sbc $01ED6C.l		; EF 6C ED 01 ; Subtract with carry (long) $01ED6C.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $C918.w,X		; 9D 18 C9 ; Store accumulator to $C918.w,X [Reads: Accumulator, X Index]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $EF9A.w		; 0C 9A EF ; Test and set bits $EF9A.w [Reads: Accumulator] [Flags: Z]
	.db $82, $ED, $01		; 82 ED 01 ; Branch always long to $82, $ED, $01 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	sta $6D48.w,X		; 9D 48 6D ; Store accumulator to $6D48.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $30, $A1		; 30 A1 ; Branch if minus to $30, $A1 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$A6.b		; A9 A6 ; Load #$A6.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$30.b		; A2 30 ; Load #$30.b into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EFA9.w,X		; 7D A9 EF ; Add $EFA9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $ED.b,X		; 95 ED ; Store accumulator to $ED.b,X [Reads: Accumulator, X Index]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $7D18.w		; AD 18 7D ; Load $7D18.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$48.b],Y		; B7 48 ; Load accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $B2B5.w		; 6D B5 B2 ; Add $B2B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $ED.b,X		; 34 ED ; Test bits $ED.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $7D		; 10 7D ; Branch if plus to $10, $7D [Flow: branch]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $30B7.w		; 6D B7 30 ; Add $30B7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda $7D18.w		; AD 18 7D ; Load $7D18.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$48.b],Y		; B7 48 ; Load accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $B2B5.w		; 6D B5 B2 ; Add $B2B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $ED.b,X		; 34 ED ; Test bits $ED.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00AE.w,X		; 7D AE 00 ; Add $00AE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $248F6D.l		; 22 6D 8F 24 ; Jump to subroutine long $248F6D.l [Writes: Stack Pointer] [Flow: call]
	sta $969D91.l,X		; 9F 91 9D 96 ; Store accumulator (long,X) $969D91.l,X [Reads: Accumulator, X Index]
	sta $9A93.w,X		; 9D 93 9A ; Store accumulator to $9A93.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $969891.l,X		; 9F 91 98 96 ; Store accumulator (long,X) $969891.l,X [Reads: Accumulator, X Index]
	sta $2696.w,X		; 9D 96 26 ; Store accumulator to $2696.w,X [Reads: Accumulator, X Index]
	sta $3DEF.w,X		; 9D EF 3D ; Store accumulator to $3DEF.w,X [Reads: Accumulator, X Index]
	sbc $0C01.w		; ED 01 0C ; Subtract $0C01.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx #$EF.b		; A2 EF ; Load #$EF.b into X register [Writes: X Index] [Flags: NZ]
	eor $01ED.w,Y		; 59 ED 01 ; Exclusive OR accumulator with memory $01ED.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	sta $A21A.w,X		; 9D 1A A2 ; Store accumulator to $A21A.w,X [Reads: Accumulator, X Index]
	sbc $01ED6C.l		; EF 6C ED 01 ; Subtract with carry (long) $01ED6C.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $C918.w,X		; 9D 18 C9 ; Store accumulator to $C918.w,X [Reads: Accumulator, X Index]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $EF9A.w		; 0C 9A EF ; Test and set bits $EF9A.w [Reads: Accumulator] [Flags: Z]
	.db $82, $ED, $01		; 82 ED 01 ; Branch always long to $82, $ED, $01 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	sta $6D48.w,X		; 9D 48 6D ; Store accumulator to $6D48.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $30, $A1		; 30 A1 ; Branch if minus to $30, $A1 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$A6.b		; A9 A6 ; Load #$A6.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$30.b		; A2 30 ; Load #$30.b into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $ED.b,X		; 95 ED ; Store accumulator to $ED.b,X [Reads: Accumulator, X Index]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $7D18.w		; AD 18 7D ; Load $7D18.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$48.b],Y		; B7 48 ; Load accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $B2B5.w		; 6D B5 B2 ; Add $B2B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $ED.b,X		; 34 ED ; Test bits $ED.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $7D		; 10 7D ; Branch if plus to $10, $7D [Flow: branch]
	ldx $6D48.w		; AE 48 6D ; Load $6D48.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AD30.w		; AE 30 AD ; Load $AD30.w into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $48B0.w,X		; 7D B0 48 ; Add $48B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $A9AE.w		; 6D AE A9 ; Add $A9AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $A7		; 30 A7 ; Branch if minus to $30, $A7 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $48A9.w,X		; 7D A9 48 ; Add $48A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $30A6.w		; 6D A6 30 ; Add $30A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00AE.w,X		; 7D AE 00 ; Add $00AE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $9F8F9F.l		; 8F 9F 8F 9F ; Store accumulator (long) $9F8F9F.l [Reads: Accumulator]
	stx $8E9D.w		; 8E 9D 8E ; Store X register to $8E9D.w [Reads: X Index]
	sta $9F98.w,X		; 9D 98 9F ; Store accumulator to $9F98.w,X [Reads: Accumulator, X Index]
	sta ($98.b),Y		; 91 98 ; Store accumulator ($98.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stx $9D.b,Y		; 96 9D ; Store X register $9D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $9D.b,X		; 94 9D ; Store Y register $9D.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc $01EDA3.l		; EF A3 ED 01 ; Subtract with carry (long) $01EDA3.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02EDB9.l		; EF B9 ED 02 ; Subtract with carry (long) $02EDB9.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ED59.l		; EF 59 ED 01 ; Subtract with carry (long) $01ED59.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	sta $A018.w,X		; 9D 18 A0 ; Store accumulator to $A018.w,X [Reads: Accumulator, X Index]
	sbc $01EDC0.l		; EF C0 ED 01 ; Subtract with carry (long) $01EDC0.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $EDD0EF.l,X		; 9F EF D0 ED ; Store accumulator (long,X) $EDD0EF.l,X [Reads: Accumulator, X Index]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $ED, $01		; 82 ED 01 ; Branch always long to $82, $ED, $01 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $D7EF.w,X		; 9D EF D7 ; Store accumulator to $D7EF.w,X [Reads: Accumulator, X Index]
	sbc $3001.w		; ED 01 30 ; Subtract $3001.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda $7D18.w		; AD 18 7D ; Load $7D18.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	adc $A9AE.w		; 6D AE A9 ; Add $A9AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $A7		; 30 A7 ; Branch if minus to $30, $A7 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $48A9.w,X		; 7D A9 48 ; Add $48A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $30A6.w		; 6D A6 30 ; Add $30A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $7D		; 10 7D ; Branch if plus to $10, $7D [Flow: branch]
	ldx $6D48.w		; AE 48 6D ; Load $6D48.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AD30.w		; AE 30 AD ; Load $AD30.w into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $30B0.w,X		; 7D B0 30 ; Add $30B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $18AE.w		; 6D AE 18 ; Add $18AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $48A9.w,X		; 7D A9 48 ; Add $48A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $B3B5.w		; 6D B5 B3 ; Add $B3B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ED34.l		; EF 34 ED 01 ; Subtract with carry (long) $01ED34.l [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9F8F.w		; 6D 8F 9F ; Add $9F8F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $9D8E9F.l		; 8F 9F 8E 9D ; Store accumulator (long) $9D8E9F.l [Reads: Accumulator]
	stx $989D.w		; 8E 9D 98 ; Store X register to $989D.w [Reads: X Index]
	sta $969891.l,X		; 9F 91 98 96 ; Store accumulator (long,X) $969891.l,X [Reads: Accumulator, X Index]
	sta $A696.w,X		; 9D 96 A6 ; Store accumulator to $A696.w,X [Reads: Accumulator, X Index]
	sbc $01EDA3.l		; EF A3 ED 01 ; Subtract with carry (long) $01EDA3.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02EDB9.l		; EF B9 ED 02 ; Subtract with carry (long) $02EDB9.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ED59.l		; EF 59 ED 01 ; Subtract with carry (long) $01ED59.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	sta $A218.w,X		; 9D 18 A2 ; Store accumulator to $A218.w,X [Reads: Accumulator, X Index]
	sbc $01EDC0.l		; EF C0 ED 01 ; Subtract with carry (long) $01EDC0.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $EDD0EF.l,X		; 9F EF D0 ED ; Store accumulator (long,X) $EDD0EF.l,X [Reads: Accumulator, X Index]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $ED, $01		; 82 ED 01 ; Branch always long to $82, $ED, $01 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $D7EF.w,X		; 9D EF D7 ; Store accumulator to $D7EF.w,X [Reads: Accumulator, X Index]
	sbc $3001.w		; ED 01 30 ; Subtract $3001.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda $7D18.w		; AD 18 7D ; Load $7D18.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
	adc $18AE.w		; 6D AE 18 ; Add $18AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $48A9.w,X		; 7D A9 48 ; Add $48A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $B3B5.w		; 6D B5 B3 ; Add $B3B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ED34.l		; EF 34 ED 01 ; Subtract with carry (long) $01ED34.l [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$15.b]		; E7 15 ; Subtract with carry (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	asl $0A0A.w,X		; 1E 0A 0A ; Arithmetic shift left $0A0A.w,X [Reads: X Index] [Flags: NCZ]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $01EDE5.l		; EF E5 ED 01 ; Subtract with carry (long) $01EDE5.l [Writes: Accumulator] [Flags: NCVZ]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $ED.b		; 05 ED ; Logical OR $ED.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	jsl $24966D.l		; 22 6D 96 24 ; Jump to subroutine long $24966D.l [Writes: Stack Pointer] [Flow: call]
	ldx $93.b		; A6 93 ; Load $93.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx #$98.b		; A2 98 ; Load #$98.b into X register [Writes: X Index] [Flags: NZ]
	lda #$91.b		; A9 91 ; Load #$91.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rol $A7.b		; 26 A7 ; Rotate left $A7.b [Reads: Direct Page] [Flags: NCZ]
	sbc $01ECEA.l		; EF EA EC 01 ; Subtract with carry (long) $01ECEA.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ECFC.l		; EF FC EC 01 ; Subtract with carry (long) $01ECFC.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ED0F.l		; EF 0F ED 01 ; Subtract with carry (long) $01ED0F.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01ED21.l		; EF 21 ED 01 ; Subtract with carry (long) $01ED21.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $48.b		; 14 48 ; Test and reset bits $48.b [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $01EDE5.l		; EF E5 ED 01 ; Subtract with carry (long) $01EDE5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01EDEC.l		; EF EC ED 01 ; Subtract with carry (long) $01EDEC.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	.db $10, $7D		; 10 7D ; Branch if plus to $10, $7D [Flow: branch]
	lda #$E1.b		; A9 E1 ; Load #$E1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $E0C8ED.l		; 0F ED C8 E0 ; OR accumulator with memory (long) $E0C8ED.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $ED.b		; E5 ED ; Subtract $ED.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc ($05.b,X)		; E1 05 ; Subtract with carry ($05.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	jsl $24936D.l		; 22 6D 93 24 ; Jump to subroutine long $24936D.l [Writes: Stack Pointer] [Flow: call]
	ldx #$98.b		; A2 98 ; Load #$98.b into X register [Writes: X Index] [Flags: NZ]
	lda #$91.b		; A9 91 ; Load #$91.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rol $A7.b		; 26 A7 ; Rotate left $A7.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($0D.b,X)		; E1 0D ; Subtract with carry ($0D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189A.w,X		; 7D 9A 18 ; Add $189A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $EDF7EF.l,X		; 9F EF F7 ED ; Store accumulator (long,X) $EDF7EF.l,X [Reads: Accumulator, X Index]
	ora ($E1.b,X)		; 01 E1 ; Logical OR ($E1.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	asl $C9.b,X		; 16 C9 ; Arithmetic shift left $C9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $EF9A0C.l,X		; 9F 0C 9A EF ; Store accumulator (long,X) $EF9A0C.l,X [Reads: Accumulator, X Index]
	tsb $EE.b		; 04 EE ; Test and set bits $EE.b [Reads: Accumulator] [Flags: Z]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $ED.b,X		; 16 ED ; Arithmetic shift left $ED.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $ED.b		; E5 ED ; Subtract $ED.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx $01ED.w		; EC ED 01 ; Compare $01ED.w with X register [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00A9.w,X		; 7D A9 00 ; Add $00A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	ldx $7D18.w		; AE 18 7D ; Load $7D18.w into X register [Writes: X Index] [Flags: NZ]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $00AE.w,X		; 7D AE 00 ; Add $00AE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($0D.b,X)		; E1 0D ; Subtract with carry ($0D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189D.w,X		; 7D 9D 18 ; Add $189D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $24C90C.l,X		; 9F 0C C9 24 ; Store accumulator (long,X) $24C90C.l,X [Reads: Accumulator, X Index]
	sta $0CA218.l,X		; 9F 18 A2 0C ; Store accumulator (long,X) $0CA218.l,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A41A.w,X		; 9D 1A A4 ; Store accumulator to $A41A.w,X [Reads: Accumulator, X Index]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	asl $C9.b,X		; 16 C9 ; Arithmetic shift left $C9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $1800.w,X		; 9D 00 18 ; Store accumulator to $1800.w,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $189A0C.l,X		; 9F 0C 9A 18 ; Store accumulator (long,X) $189A0C.l,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $24C918.l,X		; 9F 18 C9 24 ; Store accumulator (long,X) $24C918.l,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $B2		; 30 B2 ; Branch if minus to $30, $B2 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $48B0.w,X		; 7D B0 48 ; Add $48B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $00AE.w		; 6D AE 00 ; Add $00AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $1896.w,X		; 7D 96 18 ; Add $1896.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A218.w,X		; 9D 18 A2 ; Store accumulator to $A218.w,X [Reads: Accumulator, X Index]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $0CA218.l,X		; 9F 18 A2 0C ; Store accumulator (long,X) $0CA218.l,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A218.w,X		; 9D 18 A2 ; Store accumulator to $A218.w,X [Reads: Accumulator, X Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E3.b,X		; B4 E3 ; Load Y register $E3.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	asl $C9.b,X		; 16 C9 ; Arithmetic shift left $C9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $24C918.l,X		; 9F 18 C9 24 ; Store accumulator (long,X) $24C918.l,X [Reads: Accumulator, X Index]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1800.w,X		; 9D 00 18 ; Store accumulator to $1800.w,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $24C918.l,X		; 9F 18 C9 24 ; Store accumulator (long,X) $24C918.l,X [Reads: Accumulator, X Index]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $E000.w,X		; 9D 00 E0 ; Store accumulator to $E000.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00B7.w		; 6D B7 00 ; Add $00B7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	adc $1896.w,X		; 7D 96 18 ; Add $1896.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	tsb $24C9.w		; 0C C9 24 ; Test and set bits $24C9.w [Reads: Accumulator] [Flags: Z]
	sta $A218.w,X		; 9D 18 A2 ; Store accumulator to $A218.w,X [Reads: Accumulator, X Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E3.b,X		; B4 E3 ; Load Y register $E3.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $0CA2.w,X		; 7D A2 0C ; Add $0CA2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $C91800.l,X		; 9F 00 18 C9 ; Store accumulator (long,X) $C91800.l,X [Reads: Accumulator, X Index]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $009D.w		; 0C 9D 00 ; Test and set bits $009D.w [Reads: Accumulator] [Flags: Z]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00AE.w		; 6D AE 00 ; Add $00AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00A9.w,X		; 7D A9 00 ; Add $00A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: NCZ]
	.db $50, $C9		; 50 C9 ; Branch if overflow clear to $50, $C9 [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $0CA218.l,X		; 9F 18 A2 0C ; Store accumulator (long,X) $0CA218.l,X [Reads: Accumulator, X Index]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A41A.w,X		; 9D 1A A4 ; Store accumulator to $A41A.w,X [Reads: Accumulator, X Index]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	sta $24C918.l,X		; 9F 18 C9 24 ; Store accumulator (long,X) $24C918.l,X [Reads: Accumulator, X Index]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $EE.b,X		; 15 EE ; OR accumulator with memory $EE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $EE.b		; 25 EE ; Logical AND $EE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	inc $EE74.w		; EE 74 EE ; Increment $EE74.w [Flags: NZ]
	.db $B0, $EE		; B0 EE ; Branch if carry set to $B0, $EE [Flow: branch]
	cpy $0AEE.w		; CC EE 0A ; Compare $0AEE.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $00EF3E.l		; EF 3E EF 00 ; Subtract with carry (long) $00EF3E.l [Writes: Accumulator] [Flags: NCVZ]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $82E5.w,Y		; 19 E5 82 ; OR accumulator with memory $82E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $46.b		; E6 46 ; Increment $46.b [Reads: Direct Page] [Flags: NZ]
	ldy #$F5.b		; A0 F5 ; Load #$F5.b into Y register [Writes: Y Index] [Flags: NZ]
	sbc $F70000.l,X		; FF 00 00 F7 ; Subtract with carry (long,X) $F70000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $50.b		; 02 50 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $64.b		; [PATTERN: Memory clearing operation] 64 64 ; Store zero to $64.b
	sbc [$19.b]		; E7 19 ; Subtract with carry (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $E0.b		; 64 E0 ; Store zero to $E0.b
	asl $E1.b		; 06 E1 ; Arithmetic shift left $E1.b [Reads: Direct Page] [Flags: NCZ]
	trb $E2.b		; 14 E2 ; Test and reset bits $E2.b [Reads: Accumulator] [Flags: Z]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $F998.w,X		; 7D 98 F9 ; Add $F998.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	lda #$E6.b		; A9 E6 ; Load #$E6.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $F8.b		; 64 F8 ; Store zero to $F8.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $1818.w,Y		; F9 18 18 ; Subtract with carry $1818.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $E0.b		; 64 E0 ; Store zero to $E0.b
	asl $E1.b		; 06 E1 ; Arithmetic shift left $E1.b [Reads: Direct Page] [Flags: NCZ]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $F993.w,X		; 7D 93 F9 ; Add $F993.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($18.b)		; 32 18 ; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $C8.b		; A4 C8 ; Load $C8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $1818.w,Y		; F9 18 18 ; Subtract with carry $1818.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($ED.b,S),Y		; 93 ED ; Store accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($14.b,X)		; E1 14 ; Subtract with carry ($14.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 8
	sep #$60		; E2 60
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $12BE.w,X		; 7D BE 12 ; Add $12BE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $7D06.w,Y		; BE 06 7D ; Load X register $7D06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7B12.w,Y		; BE 12 7B ; Load X register $7B12.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7D06.w,Y		; BE 06 7D ; Load X register $7D06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7B12.w,Y		; BE 12 7B ; Load X register $7B12.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7D06.w,Y		; BE 06 7D ; Load X register $7D06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7B12.w,Y		; BE 12 7B ; Load X register $7B12.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $60E2.w,Y		; BE E2 60 ; Load X register $60E2.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	adc $12BE.w,X		; 7D BE 12 ; Add $12BE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $7D06.w,Y		; BE 06 7D ; Load X register $7D06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7B12.w,Y		; BE 12 7B ; Load X register $7B12.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7D06.w,Y		; BE 06 7D ; Load X register $7D06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7B12.w,Y		; BE 12 7B ; Load X register $7B12.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7D06.w,Y		; BE 06 7D ; Load X register $7D06.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $7B12.w,Y		; BE 12 7B ; Load X register $7B12.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $FAED.w,Y		; BE ED FA ; Load X register $FAED.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	sta [$F9.b],Y		; 97 F9 ; Store accumulator (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $3000.w,Y		; F9 00 30 ; Subtract with carry $3000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sbc $3000.w,Y		; F9 00 30 ; Subtract with carry $3000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $3000.w,Y		; F9 00 30 ; Subtract with carry $3000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F993.w,X		; 7D 93 F9 ; Add $F993.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($05.b,X)		; E1 05 ; Subtract with carry ($05.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $F9.b,X		; 95 F9 ; Store accumulator to $F9.b,X [Reads: Accumulator, X Index]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $E1		; B0 E1 ; Branch if carry set to $B0, $E1 [Flow: branch]
	ora $00F997.l		; 0F 97 F9 00 ; OR accumulator with memory (long) $00F997.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $05E1.w,X		; BC E1 05 ; Load Y register $05E1.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $00F9.w,Y		; 99 F9 00 ; Store accumulator to $00F9.w,Y [Reads: Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $E1.b,S		; C3 E1 ; Compare accumulator (stack relative) $E1.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora $00F998.l		; 0F 98 F9 00 ; OR accumulator with memory (long) $00F998.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $05E1.w,X		; BC E1 05 ; Load Y register $05E1.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stx $F9.b,Y		; 96 F9 ; Store X register $F9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$E1.b],Y		; B7 E1 ; Load accumulator (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $00F994.l		; 0F 94 F9 00 ; OR accumulator with memory (long) $00F994.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc ($05.b,X)		; E1 05 ; Subtract with carry ($05.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($F9.b)		; 92 F9 ; Store accumulator (indirect) ($F9.b) [Reads: Direct Page, Accumulator]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E0C8ED.l,X		; 9F ED C8 E0 ; Store accumulator (long,X) $E0C8ED.l,X [Reads: Accumulator, X Index]
	ora $E200E1.l		; 0F E1 00 E2 ; OR accumulator with memory (long) $E200E1.l [Writes: Accumulator] [Flags: NZ]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: NCZ]
	ldy $B9.b,X		; B4 B9 ; Load Y register $B9.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx $C0BC.w,Y		; BE BC C0 ; Load X register $C0BC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $E2BC.w,Y		; BE BC E2 ; Load X register $E2BC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	lda $BBB7.w,Y		; B9 B7 BB ; Load $BBB7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $B2B7.w,Y		; B9 B7 B2 ; Load $B2B7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AD		; B0 AD ; Branch if carry set to $B0, $AD [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A6A8.w		; AD A8 A6 ; Load $A6A8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda ($E2.b,X)		; A1 E2 ; Load accumulator ($E2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	sta $9E9A9C.l,X		; 9F 9C 9A 9E ; Store accumulator (long,X) $9E9A9C.l,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta [$96.b],Y		; 97 96 ; Store accumulator (long indexed) [$96.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sty $ED.b,X		; 94 ED ; Store Y register $ED.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F9AB.w,X		; 7D AB F9 ; Add $F9AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $2000.w,Y		; F9 00 20 ; Subtract with carry $2000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $1800.w,Y		; F9 00 18 ; Subtract with carry $1800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $1800.w,Y		; F9 00 18 ; Subtract with carry $1800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $1800.w,Y		; F9 00 18 ; Subtract with carry $1800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $1800.w,Y		; F9 00 18 ; Subtract with carry $1800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $1800.w,Y		; F9 00 18 ; Subtract with carry $1800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $1800.w,Y		; F9 00 18 ; Subtract with carry $1800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $D3EF83.l		; EF 83 EF D3 ; Subtract with carry (long) $D3EF83.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $A3EF93.l		; EF 93 EF A3 ; Subtract with carry (long) $A3EF93.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $E3EFB3.l		; EF B3 EF E3 ; Subtract with carry (long) $E3EFB3.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFEFF3.l		; EF F3 EF FF ; Subtract with carry (long) $FFEFF3.l [Writes: Accumulator] [Flags: NCVZ]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030000.l		; EF 00 00 03 ; Subtract with carry (long) $030000.l [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	.db $F0, $41		; F0 41 ; Branch if equal to $F0, $41 [Flow: branch]
	.db $F0, $49		; F0 49 ; Branch if equal to $F0, $49 [Flow: branch]
	.db $F0, $5F		; F0 5F ; Branch if equal to $F0, $5F [Flow: branch]
	.db $F0, $69		; F0 69 ; Branch if equal to $F0, $69 [Flow: branch]
	.db $F0, $86		; F0 86 ; Branch if equal to $F0, $86 [Flow: branch]
	.db $F0, $8E		; F0 8E ; Branch if equal to $F0, $8E [Flow: branch]
	.db $F0, $AA		; F0 AA ; Branch if equal to $F0, $AA [Flow: branch]
	.db $F0, $FA		; F0 FA ; Branch if equal to $F0, $FA [Flow: branch]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($53.b),Y		; F1 53 ; Subtract with carry ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($63.b),Y		; F1 63 ; Subtract with carry ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($6B.b),Y		; F1 6B ; Subtract with carry ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($8B.b),Y		; F1 8B ; Subtract with carry ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F7.b),Y		; F1 F7 ; Subtract with carry ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($3D.b),Y		; F1 3D ; Subtract with carry ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($4C.b)		; F2 4C ; Subtract with carry (indirect) ($4C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($6E.b)		; F2 6E ; Subtract with carry (indirect) ($6E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($7E.b)		; F2 7E ; Subtract with carry (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($9C.b)		; F2 9C ; Subtract with carry (indirect) ($9C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A4.b)		; F2 A4 ; Subtract with carry (indirect) ($A4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($D9.b)		; F2 D9 ; Subtract with carry (indirect) ($D9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FA.b)		; F2 FA ; Subtract with carry (indirect) ($FA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($4E.b,S),Y		; F3 4E ; Subtract with carry (stack relative indirect indexed) ($4E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($74.b,S),Y		; F3 74 ; Subtract with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($7C.b,S),Y		; F3 7C ; Subtract with carry (stack relative indirect indexed) ($7C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($8C.b,S),Y		; F3 8C ; Subtract with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($90.b,S),Y		; F3 90 ; Subtract with carry (stack relative indirect indexed) ($90.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($94.b,S),Y		; F3 94 ; Subtract with carry (stack relative indirect indexed) ($94.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($B5.b,S),Y		; F3 B5 ; Subtract with carry (stack relative indirect indexed) ($B5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($BD.b,S),Y		; F3 BD ; Subtract with carry (stack relative indirect indexed) ($BD.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($DE.b,S),Y		; F3 DE ; Subtract with carry (stack relative indirect indexed) ($DE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($E2.b,S),Y		; F3 E2 ; Subtract with carry (stack relative indirect indexed) ($E2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($E6.b,S),Y		; F3 E6 ; Subtract with carry (stack relative indirect indexed) ($E6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($EF.b,S),Y		; F3 EF ; Subtract with carry (stack relative indirect indexed) ($EF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($11.b,S),Y		; F3 11 ; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pea $F41D.w		; F4 1D F4 ; Push absolute address $F41D.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sec		; 38 ; Set carry flag [Flags: C]
	pea $F440.w		; F4 40 F4 ; Push absolute address $F440.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	adc $F4.b,X		; 75 F4 ; Add $F4.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	pea $F4DF.w		; F4 DF F4 ; Push absolute address $F4DF.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($F4.b,S),Y		; F3 F4 ; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	jsl $F52AF5.l		; 22 F5 2A F5 ; Jump to subroutine long $F52AF5.l [Writes: Stack Pointer] [Flow: call]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $3E.b,X		; F5 3E ; Subtract $3E.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $42.b,X		; F5 42 ; Subtract $42.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00.b,X		; F5 00 ; Subtract $00.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $F5.b,X		; 56 F5 ; Logical shift right $F5.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $0C,$C9		; 54 C9 0C ; Move block negative $0C,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFA0.w		; ED A0 EF ; Subtract $EFA0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $EF06F5.l,X		; 7F F5 06 EF ; Add long $EF06F5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9191.w,X		; 3D 91 91 ; AND accumulator with memory $9191.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp #$91.b		; C9 91 ; Compare #$91.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $1894.w,X		; 5D 94 18 ; Exclusive OR accumulator with memory $1894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $9696.w,X		; 3D 96 96 ; AND accumulator with memory $9696.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp #$96.b		; C9 96 ; Compare #$96.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $01F5A7.l		; EF A7 F5 01 ; Subtract with carry (long) $01F5A7.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F5B9.l		; EF B9 F5 01 ; Subtract with carry (long) $01F5B9.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F616.l		; EF 16 F6 01 ; Subtract with carry (long) $01F616.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F673.l		; EF 73 F6 01 ; Subtract with carry (long) $01F673.l [Writes: Accumulator] [Flags: NCVZ]
	mvn $0C,$C9		; 54 C9 0C ; Move block negative $0C,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sta $ED09E0.l,X		; 9F E0 09 ED ; Store accumulator (long,X) $ED09E0.l,X [Reads: Accumulator, X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	mvn $06,$C9		; 54 C9 06 ; Move block negative $06,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $B7B0.w		; 6D B0 B7 ; Add $B7B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	mvn $06,$B2		; 54 B2 06 ; Move block negative $06,$B2 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ldx $EFAB.w		; AE AB EF ; Load $EFAB.w into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $01F568.l		; EF 68 F5 01 ; Subtract with carry (long) $01F568.l [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18E3.w		; 0E E3 18 ; Arithmetic shift left $18E3.w [Flags: NCZ]
	trb $4818.w		; 1C 18 48 ; Test and reset bits $4818.w [Reads: Accumulator] [Flags: Z]
	adc $0CAE.w		; 6D AE 0C ; Add $0CAE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx $AFEF.w		; AE EF AF ; Load $AFEF.w into X register [Writes: X Index] [Flags: NZ]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $E000.w		; AD 00 E0 ; Load $E000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	ldy #$EF.b		; A0 EF ; Load #$EF.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $04F6.w,X		; BD F6 04 ; Load $04F6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01F6D5.l		; EF D5 F6 01 ; Subtract with carry (long) $01F6D5.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $1894.w		; 0C 94 18 ; Test and set bits $1894.w [Reads: Accumulator] [Flags: Z]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $08.b,X		; 94 08 ; Store Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $E0.b,Y		; 96 E0 ; Store X register $E0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A4A4.w,X		; 3D A4 A4 ; AND accumulator with memory $A4A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	and $0CA4.w,X		; 3D A4 0C ; AND accumulator with memory $0CA4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$A4.b		; C9 A4 ; Compare #$A4.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A6A6.w,X		; 3D A6 A6 ; AND accumulator with memory $A6A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	and $0CA6.w,X		; 3D A6 0C ; AND accumulator with memory $0CA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $EF.b		; A6 EF ; Load $EF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc ($F6.b,S),Y		; F3 F6 ; Subtract with carry (stack relative indirect indexed) ($F6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$A0.b		; C9 A0 ; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $9D9D.w,X		; 3D 9D 9D ; AND accumulator with memory $9D9D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	sta $3D06.w,X		; 9D 06 3D ; Store accumulator to $3D06.w,X [Reads: Accumulator, X Index]
	sta $9D0C.w,X		; 9D 0C 9D ; Store accumulator to $9D0C.w,X [Reads: Accumulator, X Index]
	sta $9D08.w,X		; 9D 08 9D ; Store accumulator to $9D08.w,X [Reads: Accumulator, X Index]
	sta $E09D.w,X		; 9D 9D E0 ; Store accumulator to $E09D.w,X [Reads: Accumulator, X Index]
	asl $ED.b,X		; 16 ED ; Arithmetic shift left $ED.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $E1.b,X		; B4 E1 ; Load Y register $E1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $4818.w		; 1C 18 48 ; Test and reset bits $4818.w [Reads: Accumulator] [Flags: Z]
	adc $0CAE.w		; 6D AE 0C ; Add $0CAE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx $AFEF.w		; AE EF AF ; Load $AFEF.w into X register [Writes: X Index] [Flags: NZ]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $C902.w		; AD 02 C9 ; Load $C902.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: NCZ]
	lda $AE48.w		; AD 48 AE ; Load $AE48.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AEAB.w		; 0C AB AE ; Test and set bits $AEAB.w [Reads: Accumulator] [Flags: Z]
	sbc $01F6AF.l		; EF AF F6 01 ; Subtract with carry (long) $01F6AF.l [Writes: Accumulator] [Flags: NCVZ]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18E3.w		; 0E E3 18 ; Arithmetic shift left $18E3.w [Flags: NCZ]
	trb $EF18.w		; 1C 18 EF ; Test and reset bits $EF18.w [Reads: Accumulator] [Flags: Z]
	jsr $01F7.w		; 20 F7 01 ; Jump to subroutine at $01F7.w [Writes: Stack Pointer] [Flow: call]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFA0.w		; ED A0 EF ; Subtract $EFA0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda $06F6.w,X		; BD F6 06 ; Load $06F6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01F6D5.l		; EF D5 F6 01 ; Subtract with carry (long) $01F6D5.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $1890.w		; 0C 90 18 ; Test and set bits $1890.w [Reads: Accumulator] [Flags: Z]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	stx $8E18.w		; 8E 18 8E ; Store X register to $8E18.w [Reads: X Index]
	tsb $8E8E.w		; 0C 8E 8E ; Test and set bits $8E8E.w [Reads: Accumulator] [Flags: Z]
	stx $8E08.w		; 8E 08 8E ; Store X register to $8E08.w [Reads: X Index]
	stx $EF8E.w		; 8E 8E EF ; Store X register to $EF8E.w [Reads: X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A4A4.w,X		; 3D A4 A4 ; AND accumulator with memory $A4A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	and $0CA4.w,X		; 3D A4 0C ; AND accumulator with memory $0CA4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$A5.b		; C9 A5 ; Compare #$A5.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A1A1.w,X		; 3D A1 A1 ; AND accumulator with memory $A1A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	lda ($06.b,X)		; A1 06 ; Load accumulator ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $0CA1.w,X		; 3D A1 0C ; AND accumulator with memory $0CA1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$A2.b		; C9 A2 ; Compare #$A2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	and $0CA2.w,X		; 3D A2 0C ; AND accumulator with memory $0CA2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $24.b		; A4 24 ; Load $24.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$A6.b		; C9 A6 ; Compare #$A6.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	and $0CA6.w,X		; 3D A6 0C ; AND accumulator with memory $0CA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $24.b		; A4 24 ; Load $24.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $EF.b		; A4 EF ; Load $EF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc ($F6.b,S),Y		; F3 F6 ; Subtract with carry (stack relative indirect indexed) ($F6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$9F.b		; C9 9F ; Compare #$9F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $9F3B06.l,X		; 9F 06 3B 9F ; Store accumulator (long,X) $9F3B06.l,X [Reads: Accumulator, X Index]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	sta $9F9F0C.l,X		; 9F 0C 9F 9F ; Store accumulator (long,X) $9F9F0C.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $0C9F9F.l,X		; 9F 9F 9F 0C ; Store accumulator (long,X) $0C9F9F.l,X [Reads: Accumulator, X Index]
	cmp #$0C.b		; [PATTERN: Memory clearing operation] C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $9E9E.w,X		; 3D 9E 9E ; AND accumulator with memory $9E9E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	stz $3D06.w,X		; 9E 06 3D ; Store zero to $3D06.w,X [Reads: X Index]
	stz $9E0C.w,X		; 9E 0C 9E ; Store zero to $9E0C.w,X [Reads: X Index]
	stz $9E08.w,X		; [PATTERN: Memory clearing operation] 9E 08 9E ; Store zero to $9E08.w,X [Reads: X Index]
	stz $0C9E.w,X		; 9E 9E 0C ; Store zero to $0C9E.w,X [Reads: X Index]
	cmp #$A6.b		; C9 A6 ; Compare #$A6.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	bit $A8.b		; 24 A8 ; Test bits $A8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	bit $A8.b		; 24 A8 ; Test bits $A8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1A0.w		; ED A0 E1 ; Subtract $E1A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $EF18.w		; 1C 18 EF ; Test and reset bits $EF18.w [Reads: Accumulator] [Flags: Z]
	jsr $01F7.w		; 20 F7 01 ; Jump to subroutine at $01F7.w [Writes: Stack Pointer] [Flow: call]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $0AE1.w		; 8C E1 0A ; Store Y register to $0AE1.w [Reads: Y Index]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $4818.w		; 1C 18 48 ; Test and reset bits $4818.w [Reads: Accumulator] [Flags: Z]
	adc $0CAB.w		; 6D AB 0C ; Add $0CAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda [$AB.b]		; A7 AB ; Load accumulator (long) [$AB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	mvn $48,$AD		; 54 AD 48 ; Move block negative $48,$AD [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $ABAA.w		; 0C AA AB ; Test and set bits $ABAA.w [Reads: Accumulator] [Flags: Z]
	asl $AA.b		; 06 AA ; Arithmetic shift left $AA.b [Reads: Direct Page] [Flags: NCZ]
	lda #$54.b		; A9 54 ; Load #$54.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: NCZ]
	lda $AE48.w		; AD 48 AE ; Load $AE48.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $AEAB.w		; 0C AB AE ; Test and set bits $AEAB.w [Reads: Accumulator] [Flags: Z]
	sbc $01F745.l		; EF 45 F7 01 ; Subtract with carry (long) $01F745.l [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18E3.w		; 0E E3 18 ; Arithmetic shift left $18E3.w [Flags: NCZ]
	trb $0618.w		; 1C 18 06 ; Test and reset bits $0618.w [Reads: Accumulator] [Flags: Z]
	adc $ABB0.w		; 6D B0 AB ; Add $ABB0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $EF		; B0 EF ; Branch if carry set to $B0, $EF [Flow: branch]
	eor [$F7.b],Y		; 57 F7 ; Exclusive OR accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $A6A7.w		; AD A7 A6 ; Load $A6A7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $00A7.w		; 4E A7 00 ; Logical shift right $00A7.w [Flags: NCZ]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFA0.w		; ED A0 EF ; Subtract $EFA0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ror $F7.b		; 66 F7 ; Rotate right $F7.b [Reads: Direct Page] [Flags: NCZ]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $0C94.w,X		; 7D 94 0C ; Add $0C94.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $08.b,X		; 94 08 ; Store Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($18.b,S),Y		; 93 18 ; Store accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Direct Page, Accumulator]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Direct Page, Accumulator]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	sta ($18.b)		; 92 18 ; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($E0.b),Y		; 91 E0 ; Store accumulator ($E0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	and $0CA7.w,X		; 3D A7 0C ; AND accumulator with memory $0CA7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$08.b]		; A7 08 ; Load accumulator (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $EF.b		; A6 EF ; Load $EF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $02F7.w,Y		; 79 F7 02 ; Add $02F7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $18A0.w		; ED A0 18 ; Subtract $18A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $0CA4.w,X		; 3D A4 0C ; AND accumulator with memory $0CA4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b,X)		; A1 08 ; Load accumulator ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1A0.w		; ED A0 E1 ; Subtract $E1A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $18E3.w		; 0C E3 18 ; Test and set bits $18E3.w [Reads: Accumulator] [Flags: Z]
	trb $0518.w		; 1C 18 05 ; Test and reset bits $0518.w [Reads: Accumulator] [Flags: Z]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $ABB0.w		; 6D B0 AB ; Add $ABB0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $EF		; B0 EF ; Branch if carry set to $B0, $EF [Flow: branch]
	eor [$F7.b],Y		; 57 F7 ; Exclusive OR accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $A6A7.w		; AD A7 A6 ; Load $A6A7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$A7.b		; 49 A7 ; Exclusive OR #$A7.b with accumulator [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $C8E5.w,Y		; 19 E5 C8 ; OR accumulator with memory $C8E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	asl $3232.w,X		; 1E 32 32 ; Arithmetic shift left $3232.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	asl $C960.w		; 0E 60 C9 ; Arithmetic shift left $C960.w [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	mvn $0C,$C9		; 54 C9 0C ; Move block negative $0C,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $00A4.w,X		; 7D A4 00 ; Add $00A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFA0.w		; ED A0 EF ; Subtract $EFA0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $EF04F5.l,X		; 7F F5 04 EF ; Add long $EF04F5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $C90C.w		; 8C 0C C9 ; Store Y register to $C90C.w [Reads: Y Index]
	sty $A7EF.w		; 8C EF A7 ; Store Y register to $A7EF.w [Reads: Y Index]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F786.l		; EF 86 F7 01 ; Subtract with carry (long) $01F786.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F7C7.l		; EF C7 F7 01 ; Subtract with carry (long) $01F7C7.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $18E3.w		; 0C E3 18 ; Test and set bits $18E3.w [Reads: Accumulator] [Flags: Z]
	trb $6018.w		; 1C 18 60 ; Test and reset bits $6018.w [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EF9F.w,X		; 7D 9F EF ; Add $EF9F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $F5.b,X		; 56 F5 ; Logical shift right $F5.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $06,$C9		; 54 C9 06 ; Move block negative $06,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $E000.w		; AD 00 E0 ; Load $E000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	ldy #$EF.b		; A0 EF ; Load #$EF.b into Y register [Writes: Y Index] [Flags: NZ]
	adc $EF06F5.l,X		; 7F F5 06 EF ; Add long $EF06F5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9191.w,X		; 3D 91 91 ; AND accumulator with memory $9191.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp #$91.b		; C9 91 ; Compare #$91.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $1894.w,X		; 5D 94 18 ; Exclusive OR accumulator with memory $1894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $9696.w,X		; 3D 96 96 ; AND accumulator with memory $9696.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp #$96.b		; C9 96 ; Compare #$96.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $01F5A7.l		; EF A7 F5 01 ; Subtract with carry (long) $01F5A7.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F5B9.l		; EF B9 F5 01 ; Subtract with carry (long) $01F5B9.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F616.l		; EF 16 F6 01 ; Subtract with carry (long) $01F616.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F673.l		; EF 73 F6 01 ; Subtract with carry (long) $01F673.l [Writes: Accumulator] [Flags: NCVZ]
	mvn $06,$C9		; 54 C9 06 ; Move block negative $06,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	lda [$A9.b]		; A7 A9 ; Load accumulator (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E178.w		; ED 78 E1 ; Subtract $E178.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	.db $B0, $B7		; B0 B7 ; Branch if carry set to $B0, $B7 [Flow: branch]
	mvn $06,$B5		; 54 B5 06 ; Move block negative $06,$B5 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($5A.b,S),Y		; B3 5A ; Load accumulator (stack relative indirect indexed) ($5A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b)		; B2 48 ; Load accumulator (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda $B3.b,X		; B5 B3 ; Load $B3.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $5A46.w		; EE 46 5A ; Increment $5A46.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $01F568.l		; EF 68 F5 01 ; Subtract with carry (long) $01F568.l [Writes: Accumulator] [Flags: NCVZ]
	mvn $04,$C9		; 54 C9 04 ; Move block negative $04,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18E3.w		; 0E E3 18 ; Arithmetic shift left $18E3.w [Flags: NCZ]
	trb $0618.w		; 1C 18 06 ; Test and reset bits $0618.w [Reads: Accumulator] [Flags: Z]
	adc $A6AB.w		; 6D AB A6 ; Add $A6AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda $36.b		; A5 36 ; Load $36.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $01F808.l		; EF 08 F8 01 ; Subtract with carry (long) $01F808.l [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFA0.w		; ED A0 EF ; Subtract $EFA0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ror $F7.b		; 66 F7 ; Rotate right $F7.b [Reads: Direct Page] [Flags: NCZ]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $0C90.w,X		; 7D 90 0C ; Add $0C90.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	sta $18C90C.l		; 8F 0C C9 18 ; Store accumulator (long) $18C90C.l [Reads: Accumulator]
	sta $088F0C.l		; 8F 0C 8F 08 ; Store accumulator (long) $088F0C.l [Reads: Accumulator]
	sta $188F8F.l		; 8F 8F 8F 18 ; Store accumulator (long) $188F8F.l [Reads: Accumulator]
	stx $C90C.w		; 8E 0C C9 ; Store X register to $C90C.w [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	stx $8E0C.w		; 8E 0C 8E ; Store X register to $8E0C.w [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stx $8E8E.w		; 8E 8E 8E ; Store X register to $8E8E.w [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($E0.b,S),Y		; 93 E0 ; Store accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	and $0CA3.w,X		; 3D A3 0C ; AND accumulator with memory $0CA3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $0C.b,S		; A3 0C ; Load accumulator (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $E0.b,S		; A3 E0 ; Load accumulator (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	and $0CA0.w,X		; 3D A0 0C ; AND accumulator with memory $0CA0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $18C90C.l,X		; 9F 0C C9 18 ; Store accumulator (long,X) $18C90C.l,X [Reads: Accumulator, X Index]
	sta $089F0C.l,X		; 9F 0C 9F 08 ; Store accumulator (long,X) $089F0C.l,X [Reads: Accumulator, X Index]
	sta $189F9F.l,X		; 9F 9F 9F 18 ; Store accumulator (long,X) $189F9F.l,X [Reads: Accumulator, X Index]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b,X)		; A1 08 ; Load accumulator ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $18C90C.l,X		; 9F 0C C9 18 ; Store accumulator (long,X) $18C90C.l,X [Reads: Accumulator, X Index]
	sta $089D0C.l,X		; 9F 0C 9D 08 ; Store accumulator (long,X) $089D0C.l,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1A0.w		; ED A0 E1 ; Subtract $E1A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $6018.w		; 1C 18 60 ; Test and reset bits $6018.w [Reads: Accumulator] [Flags: Z]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $60AB.w		; 6D AB 60 ; Add $60AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $18E3.w		; 0C E3 18 ; Test and set bits $18E3.w [Reads: Accumulator] [Flags: Z]
	trb $0518.w		; 1C 18 05 ; Test and reset bits $0518.w [Reads: Accumulator] [Flags: Z]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $A6AB.w		; 6D AB A6 ; Add $A6AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda $36.b		; A5 36 ; Load $36.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $01F808.l		; EF 08 F8 01 ; Subtract with carry (long) $01F808.l [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $6018.w		; 1C 18 60 ; Test and reset bits $6018.w [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00A4.w,X		; 7D A4 00 ; Add $00A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFA0.w		; ED A0 EF ; Subtract $EFA0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $EF04F5.l,X		; 7F F5 04 EF ; Add long $EF04F5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $C90C.w		; 8C 0C C9 ; Store Y register to $C90C.w [Reads: Y Index]
	sty $A7EF.w		; 8C EF A7 ; Store Y register to $A7EF.w [Reads: Y Index]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F786.l		; EF 86 F7 01 ; Subtract with carry (long) $01F786.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01F7C7.l		; EF C7 F7 01 ; Subtract with carry (long) $01F7C7.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $18E3.w		; 0C E3 18 ; Test and set bits $18E3.w [Reads: Accumulator] [Flags: Z]
	trb $6018.w		; 1C 18 60 ; Test and reset bits $6018.w [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $009F.w,X		; 7D 9F 00 ; Add $009F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18E3.w		; 0E E3 18 ; Arithmetic shift left $18E3.w [Flags: NCZ]
	trb $3C18.w		; 1C 18 3C ; Test and reset bits $3C18.w [Reads: Accumulator] [Flags: Z]
	adc $0CAB.w		; 6D AB 0C ; Add $0CAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $AB.b		; A4 AB ; Load $AB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	asl $AD.b		; 06 AD ; Arithmetic shift left $AD.b [Reads: Direct Page] [Flags: NCZ]
	ldx $AD4E.w		; AE 4E AD ; Load $AD4E.w into X register [Writes: X Index] [Flags: NZ]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	bit $0CA4.w,X		; 3C A4 0C ; Test bits $0CA4.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lsr $06A6.w		; 4E A6 06 ; Logical shift right $06A6.w [Flags: NCZ]
	ldx #$60.b		; A2 60 ; Load #$60.b into X register [Writes: X Index] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsb $A93D.w		; 0C 3D A9 ; Test and set bits $A93D.w [Reads: Accumulator] [Flags: Z]
	tsb $A937.w		; 0C 37 A9 ; Test and set bits $A937.w [Reads: Accumulator] [Flags: Z]
	tsb $A93D.w		; 0C 3D A9 ; Test and set bits $A93D.w [Reads: Accumulator] [Flags: Z]
	tsb $A937.w		; 0C 37 A9 ; Test and set bits $A937.w [Reads: Accumulator] [Flags: Z]
	tsb $A93D.w		; 0C 3D A9 ; Test and set bits $A93D.w [Reads: Accumulator] [Flags: Z]
	tsb $A937.w		; 0C 37 A9 ; Test and set bits $A937.w [Reads: Accumulator] [Flags: Z]
	asl $39.b		; 06 39 ; Arithmetic shift left $39.b [Reads: Direct Page] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $C90C.w		; 8C 0C C9 ; Store Y register to $C90C.w [Reads: Y Index]
	tsb $8C5D.w		; 0C 5D 8C ; Test and set bits $8C5D.w [Reads: Accumulator] [Flags: Z]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	eor $188C.w,X		; 5D 8C 18 ; Exclusive OR accumulator with memory $188C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $C90C.w		; 8C 0C C9 ; Store Y register to $C90C.w [Reads: Y Index]
	sty $E000.w		; 8C 00 E0 ; Store Y register to $E000.w [Reads: Y Index]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	sta $9F0C9F.l,X		; 9F 9F 0C 9F ; Store accumulator (long,X) $9F0C9F.l,X [Reads: Accumulator, X Index]
	bit $9F.b		; 24 9F ; Test bits $9F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and $A1A1.w,X		; 3D A1 A1 ; AND accumulator with memory $A1A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	lda ($06.b,X)		; A1 06 ; Load accumulator ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $0CA1.w,X		; 3D A1 0C ; AND accumulator with memory $0CA1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($24.b,X)		; A1 24 ; Load accumulator ($24.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$9F.b		; C9 9F ; Compare #$9F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $9F3B06.l,X		; 9F 06 3B 9F ; Store accumulator (long,X) $9F3B06.l,X [Reads: Accumulator, X Index]
	sta $249F0C.l,X		; 9F 0C 9F 24 ; Store accumulator (long,X) $249F0C.l,X [Reads: Accumulator, X Index]
	sta $0CC90C.l,X		; 9F 0C C9 0C ; Store accumulator (long,X) $0CC90C.l,X [Reads: Accumulator, X Index]
	and $9D9D.w,X		; 3D 9D 9D ; AND accumulator with memory $9D9D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	sta $3D06.w,X		; 9D 06 3D ; Store accumulator to $3D06.w,X [Reads: Accumulator, X Index]
	sta $9D0C.w,X		; 9D 0C 9D ; Store accumulator to $9D0C.w,X [Reads: Accumulator, X Index]
	bit $9D.b		; 24 9D ; Test bits $9D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	sta $9F3B06.l,X		; 9F 06 3B 9F ; Store accumulator (long,X) $9F3B06.l,X [Reads: Accumulator, X Index]
	sta $249F0C.l,X		; 9F 0C 9F 24 ; Store accumulator (long,X) $249F0C.l,X [Reads: Accumulator, X Index]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	and $0CA2.w,X		; 3D A2 0C ; AND accumulator with memory $0CA2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$24.b		; A2 24 ; Load #$24.b into X register [Writes: X Index] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $9B9B.w,X		; 3D 9B 9B ; AND accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $249B.w		; 0C 9B 24 ; Test and set bits $249B.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and $9D9D.w,X		; 3D 9D 9D ; AND accumulator with memory $9D9D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	sta $3D06.w,X		; 9D 06 3D ; Store accumulator to $3D06.w,X [Reads: Accumulator, X Index]
	sta $9D0C.w,X		; 9D 0C 9D ; Store accumulator to $9D0C.w,X [Reads: Accumulator, X Index]
	bit $9D.b		; 24 9D ; Test bits $9D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $9BC9.w		; 0C C9 9B ; Test and set bits $9BC9.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $249B.w		; 0C 9B 24 ; Test and set bits $249B.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and $9A9A.w,X		; 3D 9A 9A ; AND accumulator with memory $9A9A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $249A.w		; 0C 9A 24 ; Test and set bits $249A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $9BC9.w		; 0C C9 9B ; Test and set bits $9BC9.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $249B.w		; 0C 9B 24 ; Test and set bits $249B.w [Reads: Accumulator] [Flags: Z]
	sta $C90C.w,X		; 9D 0C C9 ; Store accumulator to $C90C.w,X [Reads: Accumulator, X Index]
	tsb $9F3D.w		; 0C 3D 9F ; Test and set bits $9F3D.w [Reads: Accumulator] [Flags: Z]
	sta $9F3B06.l,X		; 9F 06 3B 9F ; Store accumulator (long,X) $9F3B06.l,X [Reads: Accumulator, X Index]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: NCZ]
	sta $249F0C.l,X		; 9F 0C 9F 24 ; Store accumulator (long,X) $249F0C.l,X [Reads: Accumulator, X Index]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $18E3.w		; 0C E3 18 ; Test and set bits $18E3.w [Reads: Accumulator] [Flags: Z]
	trb $3C18.w		; 1C 18 3C ; Test and reset bits $3C18.w [Reads: Accumulator] [Flags: Z]
	adc $0CA7.w		; 6D A7 0C ; Add $0CA7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06ABA7.l,X		; 9F A7 AB 06 ; Store accumulator (long,X) $06ABA7.l,X [Reads: Accumulator, X Index]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $06A9.w		; 4E A9 06 ; Logical shift right $06A9.w [Flags: NCZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$3C.b]		; A7 3C ; Load accumulator (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$A4.b		; A2 A4 ; Load #$A4.b into X register [Writes: X Index] [Flags: NZ]
	lsr $06A2.w		; 4E A2 06 ; Logical shift right $06A2.w [Flags: NCZ]
	sta $9F60.w,X		; 9D 60 9F ; Store accumulator to $9F60.w,X [Reads: Accumulator, X Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1A0.w		; ED A0 E1 ; Subtract $E1A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $18E3.w		; 0C E3 18 ; Test and set bits $18E3.w [Reads: Accumulator] [Flags: Z]
	trb $0818.w		; 1C 18 08 ; Test and reset bits $0818.w [Reads: Accumulator] [Flags: Z]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $0CAB.w		; 6D AB 0C ; Add $0CAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $AB.b		; A4 AB ; Load $AB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	asl $AD.b		; 06 AD ; Arithmetic shift left $AD.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$A9.b]		; A7 A9 ; Load accumulator (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $ABA4.w		; 0C A4 AB ; Test and set bits $ABA4.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0CA9.w,X		; 3D A9 0C ; AND accumulator with memory $0CA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$A9.b],Y		; 37 A9 ; AND accumulator with memory (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A93D.w		; 0C 3D A9 ; Test and set bits $A93D.w [Reads: Accumulator] [Flags: Z]
	tsb $A937.w		; 0C 37 A9 ; Test and set bits $A937.w [Reads: Accumulator] [Flags: Z]
	tsb $A93D.w		; 0C 3D A9 ; Test and set bits $A93D.w [Reads: Accumulator] [Flags: Z]
	tsb $A937.w		; 0C 37 A9 ; Test and set bits $A937.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $A9A9.w,Y		; 39 A9 A9 ; AND accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $0CC8.w		; ED C8 0C ; Subtract $0CC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $188F.w,X		; 3D 8F 18 ; AND accumulator with memory $188F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $8F8F0C.l		; 8F 0C 8F 8F ; Store accumulator (long) $8F8F0C.l [Reads: Accumulator]
	sta $8F8F08.l		; 8F 08 8F 8F ; Store accumulator (long) $8F8F08.l [Reads: Accumulator]
	sta $18910C.l		; 8F 0C 91 18 ; Store accumulator (long) $18910C.l [Reads: Accumulator]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($00.b),Y		; 91 00 ; Store accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	sta $9F5B06.l,X		; 9F 06 5B 9F ; Store accumulator (long,X) $9F5B06.l,X [Reads: Accumulator, X Index]
	tsb $9F9F.w		; 0C 9F 9F ; Test and set bits $9F9F.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $0C9F9F.l,X		; 9F 9F 9F 0C ; Store accumulator (long,X) $0C9F9F.l,X [Reads: Accumulator, X Index]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A1A1.w,X		; 3D A1 A1 ; AND accumulator with memory $A1A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	lda ($06.b,X)		; A1 06 ; Load accumulator ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $0CA1.w,X		; 3D A1 0C ; AND accumulator with memory $0CA1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $0CAE.w		; 6D AE 0C ; Add $0CAE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx $AD06.w		; AE 06 AD ; Load $AD06.w into X register [Writes: X Index] [Flags: NZ]
	ldx $B054.w		; AE 54 B0 ; Load $B054.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $AD0C.w		; AE 0C AD ; Load $AD0C.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AD06.w		; AE 06 AD ; Load $AD06.w into X register [Writes: X Index] [Flags: NZ]
	ldy $AD54.w		; AC 54 AD ; Load $AD54.w into Y register [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($18.b,S),Y		; 93 18 ; Store accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	asl $AD.b		; 06 AD ; Arithmetic shift left $AD.b [Reads: Direct Page] [Flags: NCZ]
	ldx $B054.w		; AE 54 B0 ; Load $B054.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $AD0C.w		; AE 0C AD ; Load $AD0C.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AD06.w		; AE 06 AD ; Load $AD06.w into X register [Writes: X Index] [Flags: NZ]
	ldy $AD54.w		; AC 54 AD ; Load $AD54.w into Y register [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A9AB.w		; AE AB A9 ; Load $A9AB.w into X register [Writes: X Index] [Flags: NZ]
	lsr $06AB.w		; 4E AB 06 ; Logical shift right $06AB.w [Flags: NCZ]
	ldx $A7A9.w		; AE A9 A7 ; Load $A7A9.w into X register [Writes: X Index] [Flags: NZ]
	rol $A9.b,X		; 36 A9 ; Rotate left $A9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $1800.w		; AE 00 18 ; Load $1800.w into X register [Writes: X Index] [Flags: NZ]
	and $06A9.w,X		; 3D A9 06 ; AND accumulator with memory $06A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$A9.b],Y		; 37 A9 ; AND accumulator with memory (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $A9A9.w,Y		; 39 A9 A9 ; AND accumulator with memory $A9A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	sta $9F0C9F.l,X		; 9F 9F 0C 9F ; Store accumulator (long,X) $9F0C9F.l,X [Reads: Accumulator, X Index]
	bit $A1.b		; 24 A1 ; Test bits $A1.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	and $0CA2.w,X		; 3D A2 0C ; AND accumulator with memory $0CA2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$24.b		; A2 24 ; Load #$24.b into X register [Writes: X Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$9F.b		; C9 9F ; Compare #$9F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $9F3B06.l,X		; 9F 06 3B 9F ; Store accumulator (long,X) $9F3B06.l,X [Reads: Accumulator, X Index]
	sta $249F0C.l,X		; 9F 0C 9F 24 ; Store accumulator (long,X) $249F0C.l,X [Reads: Accumulator, X Index]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	and $0CA2.w,X		; 3D A2 0C ; AND accumulator with memory $0CA2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$24.b		; A2 24 ; Load #$24.b into X register [Writes: X Index] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $9B9B.w,X		; 3D 9B 9B ; AND accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $249B.w		; 0C 9B 24 ; Test and set bits $249B.w [Reads: Accumulator] [Flags: Z]
	sta $C90C.w,X		; 9D 0C C9 ; Store accumulator to $C90C.w,X [Reads: Accumulator, X Index]
	tsb $9F3D.w		; 0C 3D 9F ; Test and set bits $9F3D.w [Reads: Accumulator] [Flags: Z]
	sta $9F3B06.l,X		; 9F 06 3B 9F ; Store accumulator (long,X) $9F3B06.l,X [Reads: Accumulator, X Index]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: NCZ]
	sta $249F0C.l,X		; 9F 0C 9F 24 ; Store accumulator (long,X) $249F0C.l,X [Reads: Accumulator, X Index]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $249B.w		; 0C 9B 24 ; Test and set bits $249B.w [Reads: Accumulator] [Flags: Z]
	sta $C90C.w,X		; 9D 0C C9 ; Store accumulator to $C90C.w,X [Reads: Accumulator, X Index]
	tsb $9F3D.w		; 0C 3D 9F ; Test and set bits $9F3D.w [Reads: Accumulator] [Flags: Z]
	sta $9F3B06.l,X		; 9F 06 3B 9F ; Store accumulator (long,X) $9F3B06.l,X [Reads: Accumulator, X Index]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: NCZ]
	sta $249F0C.l,X		; 9F 0C 9F 24 ; Store accumulator (long,X) $249F0C.l,X [Reads: Accumulator, X Index]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b],Y		; 17 F8 ; OR accumulator with memory (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$F8.b],Y		; 57 F8 ; Exclusive OR accumulator with memory (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $BAF8.w,Y		; 99 F8 BA ; Store accumulator to $BAF8.w,Y [Reads: Y Index, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp [$F8.b],Y		; D7 F8 ; Compare accumulator (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $E702.w,X		; 1E 02 E7 ; Arithmetic shift left $E702.w,X [Reads: X Index] [Flags: NCZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $E1DCED.l		; 0F ED DC E1 ; OR accumulator with memory (long) $E1DCED.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$BE		; E2 BE
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	adc $ABAB.w,X		; 7D AB AB ; Add $ABAB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	inc $FF.b		; E6 FF ; Increment $FF.b [Reads: Direct Page] [Flags: NZ]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	trb $1E1A.w		; 1C 1A 1E ; Test and reset bits $1E1A.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $AEAD.w		; AC AD AE ; Load $AEAD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $00C8C8.l		; AF C8 C8 00 ; Load long $00C8C8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$BE		; E2 BE
	ora $C90C.w		; 0D 0C C9 ; Logical OR $C90C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	.db $B0, $E0		; B0 E0 ; Branch if carry set to $B0, $E0 [Flow: branch]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $601D.w		; 1C 1D 60 ; Test and reset bits $601D.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $B1		; B0 B1 ; Branch if carry set to $B0, $B1 [Flow: branch]
	lda ($B3.b)		; B2 B3 ; Load accumulator (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$BE		; E2 BE
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $B2B2.w,X		; 7D B2 B2 ; Add $B2B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($E0.b)		; B2 E0 ; Load accumulator (indirect) ($E0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $B360.w		; 1C 60 B3 ; Test and reset bits $B360.w [Reads: Accumulator] [Flags: Z]
	ldy $B5.b,X		; B4 B5 ; Load Y register $B5.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldx $C8.b,Y		; B6 C8 ; Load X register $C8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$BE		; E2 BE
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $B7B7.w,X		; 7D B7 B7 ; Add $B7B7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$0C.b],Y		; B7 0C ; Load accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$E0.b],Y		; B7 E0 ; Load accumulator (long indexed) [$E0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $1E1A.w		; 1C 1A 1E ; Test and reset bits $1E1A.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $BBBA.w,Y		; B9 BA BB ; Load $BBBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$BE		; E2 BE
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $301A.w		; 1C 1A 30 ; Test and reset bits $301A.w [Reads: Accumulator] [Flags: Z]
	adc $A7A0.w,X		; 7D A0 A7 ; Add $A7A0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	lda [$E0.b],Y		; B7 E0 ; Load accumulator (long indexed) [$E0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$A2.b		; 09 A2 ; Logical OR #$A2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E0C8C8.l,X		; 9F C8 C8 E0 ; Store accumulator (long,X) $E0C8C8.l,X [Reads: Accumulator, X Index]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E1.b,X		; B4 E1 ; Load Y register $E1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $C908.w		; 1C 08 C9 ; Test and reset bits $C908.w [Reads: Accumulator] [Flags: Z]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	ldy #$A7.b		; A0 A7 ; Load #$A7.b into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $B0, $58		; B0 58 ; Branch if carry set to $B0, $58 [Flow: branch]
	lda [$08.b],Y		; B7 08 ; Load accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $BBBA.w,Y		; B9 BA BB ; Load $BBBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F912.w,Y		; F9 12 F9 ; Subtract with carry $F912.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $00FFF9.l		; 22 F9 FF 00 ; Jump to subroutine long $00FFF9.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $5BF9.w		; 4E F9 5B ; Logical shift right $5BF9.w [Flags: NCZ]
	sbc $F968.w,Y		; F9 68 F9 ; Subtract with carry $F968.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $F9.b,X		; 75 F9 ; Add $F9.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $F9, $00		; 82 F9 00 ; Branch always long to $82, $F9, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F998.w,Y		; F9 98 F9 ; Subtract with carry $F998.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$F9.b		; A0 F9 ; Load #$F9.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($F9.b,S),Y		; B3 F9 ; Load accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $C9F9.w,X		; BD F9 C9 ; Load $C9F9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0000.w,Y		; F9 00 00 ; Subtract with carry $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($F9.b,S),Y		; D3 F9 ; Compare accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	dec $E6F9.w,X		; DE F9 E6 ; Decrement memory $E6F9.w,X [Reads: X Index] [Flags: NZ]
	sbc $F9F9.w,Y		; F9 F9 F9 ; Subtract with carry $F9F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0000FA.l		; 0F FA 00 00 ; OR accumulator with memory (long) $0000FA.l [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $E0.b		; 25 E0 ; Logical AND $E0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $36.b		; 14 36 ; Test and reset bits $36.b [Reads: Accumulator] [Flags: Z]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00C0.w		; 6D C0 00 ; Add $00C0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $30.b		; 14 30 ; Test and reset bits $30.b [Reads: Accumulator] [Flags: Z]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EDBA.w		; 6D BA ED ; Add $EDBA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	cmp #$42.b		; C9 42 ; Compare #$42.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EDB7.w		; 6D B7 ED ; Add $EDB7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EDB4.w		; 6D B4 ED ; Add $EDB4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	cmp #$5A.b		; C9 5A ; Compare #$5A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EDB1.w		; 6D B1 ED ; Add $EDB1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $60.b		; 14 60 ; Test and reset bits $60.b [Reads: Accumulator] [Flags: Z]
	adc $E7AB.w		; 6D AB E7 ; Add $E7AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $1AEF.w		; 2D EF 1A ; Logical AND $1AEF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0002FA.l		; 2F FA 02 00 ; AND accumulator with memory (long) $0002FA.l [Writes: Accumulator] [Flags: NZ]
	sbc $02FA44.l		; EF 44 FA 02 ; Subtract with carry (long) $02FA44.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FA59.l		; EF 59 FA 02 ; Subtract with carry (long) $02FA59.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	bit $5B.b		; 24 5B ; Test bits $5B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $9A9A.w		; 0C 9A 9A ; Test and set bits $9A9A.w [Reads: Accumulator] [Flags: Z]
	bit $9A.b		; 24 9A ; Test bits $9A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $9A9A.w		; 0C 9A 9A ; Test and set bits $9A9A.w [Reads: Accumulator] [Flags: Z]
	sbc $02FA6E.l		; EF 6E FA 02 ; Subtract with carry (long) $02FA6E.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $01FA75.l		; EF 75 FA 01 ; Subtract with carry (long) $01FA75.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FA83.l		; EF 83 FA 02 ; Subtract with carry (long) $02FA83.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EF78.w		; ED 78 EF ; Subtract $EF78.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $E002FA.l		; 2F FA 02 E0 ; AND accumulator with memory (long) $E002FA.l [Writes: Accumulator] [Flags: NZ]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FA.b,X		; 75 FA ; Add $FA.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $8AEF.w		; 2D EF 8A ; Logical AND $8AEF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0002FA.l,X		; 9F FA 02 00 ; Store accumulator (long,X) $0002FA.l,X [Reads: Accumulator, X Index]
	sbc $02FAB4.l		; EF B4 FA 02 ; Subtract with carry (long) $02FAB4.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FAC9.l		; [PATTERN: Memory clearing operation] EF C9 FA 02 ; Subtract with carry (long) $02FAC9.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	bit $5B.b		; 24 5B ; Test bits $5B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $0C9C.w		; 9C 9C 0C ; Store zero to $0C9C.w
	stz $249C.w		; 9C 9C 24 ; Store zero to $249C.w
	stz $0C9C.w		; [PATTERN: Memory clearing operation] 9C 9C 0C ; Store zero to $0C9C.w
	stz $EF9C.w		; 9C 9C EF ; Store zero to $EF9C.w
	dec $02FA.w,X		; DE FA 02 ; Decrement memory $02FA.w,X [Reads: X Index] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $01FAE5.l		; EF E5 FA 01 ; Subtract with carry (long) $01FAE5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FAF3.l		; EF F3 FA 02 ; Subtract with carry (long) $02FAF3.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EF78.w		; ED 78 EF ; Subtract $EF78.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E002FA.l,X		; 9F FA 02 E0 ; Store accumulator (long,X) $E002FA.l,X [Reads: Accumulator, X Index]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FA.b		; E5 FA ; Subtract $FA.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc ($FA.b,S),Y		; F3 FA ; Subtract with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A75D.w		; 0C 5D A7 ; Test and set bits $A75D.w [Reads: Accumulator] [Flags: Z]
	tsb $A659.w		; 0C 59 A6 ; Test and set bits $A659.w [Reads: Accumulator] [Flags: Z]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $0CA6.w,X		; 5D A6 0C ; Exclusive OR accumulator with memory $0CA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A6A7.w,Y		; 59 A7 A6 ; Exclusive OR accumulator with memory $A6A7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A75D.w		; 0C 5D A7 ; Test and set bits $A75D.w [Reads: Accumulator] [Flags: Z]
	tsb $A659.w		; 0C 59 A6 ; Test and set bits $A659.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0CA6.w,X		; 5D A6 0C ; Exclusive OR accumulator with memory $0CA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A6A5.w,Y		; 59 A5 A6 ; Exclusive OR accumulator with memory $A6A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A55D.w		; 0C 5D A5 ; Test and set bits $A55D.w [Reads: Accumulator] [Flags: Z]
	tsb $A659.w		; 0C 59 A6 ; Test and set bits $A659.w [Reads: Accumulator] [Flags: Z]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $0CA6.w,X		; 5D A6 0C ; Exclusive OR accumulator with memory $0CA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $00A5.w,Y		; 59 A5 00 ; Exclusive OR accumulator with memory $00A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A25D.w		; 0C 5D A2 ; Test and set bits $A25D.w [Reads: Accumulator] [Flags: Z]
	tsb $A259.w		; 0C 59 A2 ; Test and set bits $A259.w [Reads: Accumulator] [Flags: Z]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	eor $0CA2.w,X		; 5D A2 0C ; Exclusive OR accumulator with memory $0CA2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A2A2.w,Y		; 59 A2 A2 ; Exclusive OR accumulator with memory $A2A2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A25D.w		; 0C 5D A2 ; Test and set bits $A25D.w [Reads: Accumulator] [Flags: Z]
	tsb $A259.w		; 0C 59 A2 ; Test and set bits $A259.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0CA1.w,X		; 5D A1 0C ; Exclusive OR accumulator with memory $0CA1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A1A1.w,Y		; 59 A1 A1 ; Exclusive OR accumulator with memory $A1A1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A15D.w		; 0C 5D A1 ; Test and set bits $A15D.w [Reads: Accumulator] [Flags: Z]
	tsb $A159.w		; 0C 59 A1 ; Test and set bits $A159.w [Reads: Accumulator] [Flags: Z]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0CA1.w,X		; 5D A1 0C ; Exclusive OR accumulator with memory $0CA1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $00A1.w,Y		; 59 A1 00 ; Exclusive OR accumulator with memory $00A1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $99.b		; 24 99 ; Test bits $99.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $990C.w,Y		; 99 0C 99 ; Store accumulator to $990C.w,Y [Reads: Y Index, Accumulator]
	sta $2400.w,Y		; 99 00 24 ; Store accumulator to $2400.w,Y [Reads: Y Index, Accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $9393.w		; 0C 93 93 ; Test and set bits $9393.w [Reads: Accumulator] [Flags: Z]
	bit $93.b		; 24 93 ; Test bits $93.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	tsb $9292.w		; 0C 92 92 ; Test and set bits $9292.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0CA9.w,X		; 5D A9 0C ; Exclusive OR accumulator with memory $0CA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A9A8.w,Y		; 59 A8 A9 ; Exclusive OR accumulator with memory $A9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A85D.w		; 0C 5D A8 ; Test and set bits $A85D.w [Reads: Accumulator] [Flags: Z]
	tsb $A959.w		; 0C 59 A9 ; Test and set bits $A959.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $A95D.w		; 0C 5D A9 ; Test and set bits $A95D.w [Reads: Accumulator] [Flags: Z]
	tsb $A859.w		; 0C 59 A8 ; Test and set bits $A859.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0CA8.w,X		; 5D A8 0C ; Exclusive OR accumulator with memory $0CA8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A8A7.w,Y		; 59 A7 A8 ; Exclusive OR accumulator with memory $A8A7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A75D.w		; 0C 5D A7 ; Test and set bits $A75D.w [Reads: Accumulator] [Flags: Z]
	tsb $A859.w		; 0C 59 A8 ; Test and set bits $A859.w [Reads: Accumulator] [Flags: Z]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $0CA8.w,X		; 5D A8 0C ; Exclusive OR accumulator with memory $0CA8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $00A7.w,Y		; 59 A7 00 ; Exclusive OR accumulator with memory $00A7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A45D.w		; 0C 5D A4 ; Test and set bits $A45D.w [Reads: Accumulator] [Flags: Z]
	tsb $A459.w		; 0C 59 A4 ; Test and set bits $A459.w [Reads: Accumulator] [Flags: Z]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $0CA4.w,X		; 5D A4 0C ; Exclusive OR accumulator with memory $0CA4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A4A4.w,Y		; 59 A4 A4 ; Exclusive OR accumulator with memory $A4A4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A45D.w		; 0C 5D A4 ; Test and set bits $A45D.w [Reads: Accumulator] [Flags: Z]
	tsb $A459.w		; 0C 59 A4 ; Test and set bits $A459.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0CA3.w,X		; 5D A3 0C ; Exclusive OR accumulator with memory $0CA3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A3A3.w,Y		; 59 A3 A3 ; Exclusive OR accumulator with memory $A3A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A35D.w		; 0C 5D A3 ; Test and set bits $A35D.w [Reads: Accumulator] [Flags: Z]
	tsb $A359.w		; 0C 59 A3 ; Test and set bits $A359.w [Reads: Accumulator] [Flags: Z]
	lda $0C.b,S		; A3 0C ; Load accumulator (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $0CA3.w,X		; 5D A3 0C ; Exclusive OR accumulator with memory $0CA3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $00A3.w,Y		; 59 A3 00 ; Exclusive OR accumulator with memory $00A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $9B.b		; 24 9B ; Test bits $9B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $9B9B.w		; 0C 9B 9B ; Test and set bits $9B9B.w [Reads: Accumulator] [Flags: Z]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	tsb $9595.w		; 0C 95 95 ; Test and set bits $9595.w [Reads: Accumulator] [Flags: Z]
	bit $95.b		; 24 95 ; Test bits $95.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $0C.b,X		; 95 0C ; Store accumulator to $0C.b,X [Reads: Accumulator, X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $9494.w		; 0C 94 94 ; Test and set bits $9494.w [Reads: Accumulator] [Flags: Z]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3FFB.w		; 0E FB 3F ; Arithmetic shift left $3FFB.w [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	lda #$FB.b		; A9 FB ; Load #$FB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsr ($FC9A.w,X)		; FC 9A FC ; Jump to subroutine indirect indexed ($FC9A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$FD.b]		; 07 FD ; OR accumulator with memory (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $C8E5.w,Y		; 19 E5 C8 ; OR accumulator with memory $C8E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $02.b		; 14 02 ; Test and reset bits $02.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	sbc [$2B.b]		; E7 2B ; Subtract with carry (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	sbc ($0C.b,X)		; E1 0C ; Subtract with carry ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $B8B3.w		; 4D B3 B8 ; Exclusive OR $B8B3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sbc $02FD27.l		; EF 27 FD 02 ; Subtract with carry (long) $02FD27.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01FD39.l		; EF 39 FD 01 ; Subtract with carry (long) $01FD39.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	sbc ($0E.b,X)		; E1 0E ; Subtract with carry ($0E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $A7A2.w		; 4D A2 A7 ; Exclusive OR $A7A2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $FD.b		; 45 FD ; Exclusive OR $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $AC24.w		; AC 24 AC ; Load $AC24.w into Y register [Writes: Y Index] [Flags: NZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $60AC.w		; 6D AC 60 ; Add $60AC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $AEA9.w		; 4D A9 AE ; Exclusive OR $AEA9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $AE4D.w		; 0C 4D AE ; Test and set bits $AE4D.w [Reads: Accumulator] [Flags: Z]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $18B0.w		; 6D B0 18 ; Add $18B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $AE4D.w		; 0C 4D AE ; Test and set bits $AE4D.w [Reads: Accumulator] [Flags: Z]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $C8B0.w		; 2D B0 C8 ; Logical AND $C8B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	lda ($24.b,S),Y		; B3 24 ; Load accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $B0B2.w		; 4D B2 B0 ; Exclusive OR $B0B2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	lda ($60.b,S),Y		; B3 60 ; Load accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$16E3]		; DC E3 16 ; Jump long indirect [$16E3] [Flow: jump]
	trb $E11A.w		; 1C 1A E1 ; Test and reset bits $E11A.w [Reads: Accumulator] [Flags: Z]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	adc $0694.w		; 6D 94 06 ; Add $0694.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $30, $94		; 30 94 ; Branch if minus to $30, $94 [Flow: branch]
	tsb $943D.w		; 0C 3D 94 ; Test and set bits $943D.w [Reads: Accumulator] [Flags: Z]
	cmp #$94.b		; C9 94 ; Compare #$94.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $0697.w		; 6D 97 06 ; Add $0697.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $30, $97		; 30 97 ; Branch if minus to $30, $97 [Flow: branch]
	tsb $973D.w		; 0C 3D 97 ; Test and set bits $973D.w [Reads: Accumulator] [Flags: Z]
	cmp #$97.b		; C9 97 ; Compare #$97.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $0699.w		; 6D 99 06 ; Add $0699.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $9999.w,Y		; 99 99 99 ; Store accumulator to $9999.w,Y [Reads: Y Index, Accumulator]
	sta $9930.w,Y		; 99 30 99 ; Store accumulator to $9930.w,Y [Reads: Y Index, Accumulator]
	tsb $993D.w		; 0C 3D 99 ; Test and set bits $993D.w [Reads: Accumulator] [Flags: Z]
	cmp #$99.b		; C9 99 ; Compare #$99.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $C894.w		; 6D 94 C8 ; Add $C894.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$16E3]		; DC E3 16 ; Jump long indirect [$16E3] [Flow: jump]
	trb $E11A.w		; 1C 1A E1 ; Test and reset bits $E11A.w [Reads: Accumulator] [Flags: Z]
	asl $48.b		; 06 48 ; Arithmetic shift left $48.b [Reads: Direct Page] [Flags: NCZ]
	adc $069B.w		; 6D 9B 06 ; Add $069B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $9B		; 30 9B ; Branch if minus to $30, $9B [Flow: branch]
	tsb $9B3D.w		; 0C 3D 9B ; Test and set bits $9B3D.w [Reads: Accumulator] [Flags: Z]
	cmp #$9B.b		; [PATTERN: Memory clearing operation] C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $069E.w		; 6D 9E 06 ; Add $069E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stz $9E9E.w,X		; 9E 9E 9E ; Store zero to $9E9E.w,X [Reads: X Index]
	stz $9E30.w,X		; 9E 30 9E ; Store zero to $9E30.w,X [Reads: X Index]
	tsb $9E3D.w		; 0C 3D 9E ; Test and set bits $9E3D.w [Reads: Accumulator] [Flags: Z]
	cmp #$9E.b		; C9 9E ; Compare #$9E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $06A0.w		; 6D A0 06 ; Add $06A0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	tsb $A03D.w		; 0C 3D A0 ; Test and set bits $A03D.w [Reads: Accumulator] [Flags: Z]
	cmp #$A0.b		; C9 A0 ; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $C89B.w		; 6D 9B C8 ; Add $C89B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $60C8.w		; ED C8 60 ; Subtract $60C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $EF89.w,X		; 7D 89 EF ; Add $EF89.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$FD.b],Y		; 57 FD ; Exclusive OR accumulator with memory (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $EF89.w,X		; 7D 89 EF ; Add $EF89.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$FD.b],Y		; 57 FD ; Exclusive OR accumulator with memory (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $E089.w,X		; 7D 89 E0 ; Add $E089.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($ED.b,S),Y		; 13 ED ; OR accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	adc $7E06A7.l,X		; 7F A7 06 7E ; Add long $7E06A7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $A7A7.w,Y		; 79 A7 A7 ; Add $A7A7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: NCZ]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $06A7.w,X		; 7E A7 06 ; Rotate right $06A7.w,X [Reads: X Index] [Flags: NCZ]
	adc $A7A7.w,Y		; 79 A7 A7 ; Add $A7A7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $A7.b,S		; 63 A7 ; Add with carry (stack relative) $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $60DC.w		; ED DC 60 ; Subtract $60DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $EF95.w,X		; 7D 95 EF ; Add $EF95.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Stack Pointer, Accumulator]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $EF95.w,X		; 7D 95 EF ; Add $EF95.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Stack Pointer, Accumulator]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $E095.w,X		; 7D 95 E0 ; Add $E095.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($ED.b,S),Y		; 13 ED ; OR accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	adc $7E06A7.l,X		; 7F A7 06 7E ; Add long $7E06A7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $A7A7.w,Y		; 79 A7 A7 ; Add $A7A7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $06A7.w,X		; 7E A7 06 ; Rotate right $06A7.w,X [Reads: X Index] [Flags: NCZ]
	adc $A7A7.w,Y		; 79 A7 A7 ; Add $A7A7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$E0.b]		; A7 E0 ; Load accumulator (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0CC9.w,X		; 1E C9 0C ; Arithmetic shift left $0CC9.w,X [Reads: X Index] [Flags: NCZ]
	eor $B8B3.w		; 4D B3 B8 ; Exclusive OR $B8B3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sbc $02FD27.l		; EF 27 FD 02 ; Subtract with carry (long) $02FD27.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01FD39.l		; EF 39 FD 01 ; Subtract with carry (long) $01FD39.l [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $B84D.w		; 0C 4D B8 ; Test and set bits $B84D.w [Reads: Accumulator] [Flags: Z]
	lda ($B8.b,S),Y		; B3 B8 ; Load accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda ($B8.b,S),Y		; B3 B8 ; Load accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B8.b,S),Y		; B3 B8 ; Load accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00BA.w		; 6D BA 00 ; Add $00BA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $BD24.w,X		; BD 24 BD ; Load $BD24.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	ldy $30BA.w,X		; BC BA 30 ; Load Y register $30BA.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	adc $00BC.w		; 6D BC 00 ; Add $00BC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $A74D.w		; 0C 4D A7 ; Test and set bits $A74D.w [Reads: Accumulator] [Flags: Z]
	ldx #$A7.b		; A2 A7 ; Load #$A7.b into X register [Writes: X Index] [Flags: NZ]
	lda #$A7.b		; A9 A7 ; Load #$A7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$A7.b		; A2 A7 ; Load #$A7.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A7.b		; A2 A7 ; Load #$A7.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $00A9.w		; 6D A9 00 ; Add $00A9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $03A0.w		; ED A0 03 ; Subtract $03A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $7E06A7.l,X		; 7F A7 06 7E ; Add long $7E06A7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $A7A7.w,Y		; 79 A7 A7 ; Add $A7A7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: NCZ]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$E0.b]		; A7 E0 ; Load accumulator (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($ED.b,S),Y		; 13 ED ; OR accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	adc $7E06A7.l,X		; 7F A7 06 7E ; Add long $7E06A7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $A7A7.w,Y		; 79 A7 A7 ; Add $A7A7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7A.b		; 06 7A ; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $00DC.w		; ED DC 00 ; Subtract $00DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	mvn $14,$2B		; 54 2B 14 ; Move block negative $14,$2B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $2B.b		; 24 2B ; Test bits $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	trb $2B.b		; 14 2B ; Test and reset bits $2B.b [Reads: Accumulator] [Flags: Z]
	bit $2B.b		; 24 2B ; Test bits $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $2B.b,X		; 34 2B ; Test bits $2B.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	mvp $FF,$2B		; 44 2B FF ; Move block positive $FF,$2B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	sta $2B.b,X		; 95 2B ; Store accumulator to $2B.b,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp ($2B.b,S),Y		; D3 2B ; Compare accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	inc $1E2B.w		; EE 2B 1E ; Increment $1E2B.w [Flags: NZ]
	bit $0000.w		; 2C 00 00 ; Test bits $0000.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2C6C2C.l,X		; 3F 2C 6C 2C ; AND accumulator with memory (long,X) $2C6C2C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($842C.w,X)		; 7C 2C 84 ; Jump indirect indexed to ($842C.w,X) [Reads: X Index] [Flow: jump]
	bit $2C9B.w		; 2C 9B 2C ; Test bits $2C9B.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
	sep #$2C		; E2 2C
	tsb $282D.w		; 0C 2D 28 ; Test and set bits $282D.w [Reads: Accumulator] [Flags: Z]
	and $2D34.w		; 2D 34 2D ; Logical AND $2D34.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $0000.w		; 2D 00 00 ; Logical AND $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $2D.b		; 84 2D ; Store Y register to $2D.b [Reads: Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	and $2DBD.w		; 2D BD 2D ; Logical AND $2DBD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pei ($2D.b)		; D4 2D ; Push effective indirect address ($2D.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $2E.b		; 04 2E ; Test and set bits $2E.b [Reads: Accumulator] [Flags: Z]
	and [$2E.b],Y		; 37 2E ; AND accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	jmp ($802E.w)		; 6C 2E 80 ; Jump indirect to ($802E.w) [Flow: jump]
	rol $2E8E.w		; 2E 8E 2E ; Rotate left $2E8E.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	eor $08B0.w,X		; 5D B0 08 ; Exclusive OR accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B3AB.w		; 4D AB B3 ; Exclusive OR $B3AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $B05D.w		; 20 5D B0 ; Jump to subroutine at $B05D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $B3AB.w		; 4D AB B3 ; Exclusive OR $B3AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30B0.w		; 2D B0 30 ; Logical AND $30B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $08AB.w		; 6D AB 08 ; Add $08AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $B7B3B0.l		; 4F B0 B3 B7 ; Exclusive OR accumulator with memory (long) $B7B3B0.l [Writes: Accumulator] [Flags: NZ]
	.db $30, $6F		; 30 6F ; Branch if minus to $30, $6F [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	jsr $B86D.w		; 20 6D B8 ; Jump to subroutine at $B86D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $B8B6.w		; 4C B6 B8 ; Jump to $B8B6.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($00B7.w,X)		; 7C B7 00 ; Jump indirect indexed to ($00B7.w,X) [Reads: X Index] [Flow: jump]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $012EC4.l		; EF C4 2E 01 ; Subtract with carry (long) $012EC4.l [Writes: Accumulator] [Flags: NCVZ]
	sta $C9C9.w		; 8D C9 C9 ; Store accumulator to $C9C9.w [Reads: Accumulator]
	sta $C98C.w		; 8D 8C C9 ; Store accumulator to $C98C.w [Reads: Accumulator]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $8F18.w		; 8C 18 8F ; Store Y register to $8F18.w [Reads: Y Index]
	sbc $012ED3.l		; EF D3 2E 01 ; Subtract with carry (long) $012ED3.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $18A9.w,X		; 3D A9 18 ; AND accumulator with memory $18A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $E0A9.w,X		; 3D A9 E0 ; AND accumulator with memory $E0A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $012EE3.l		; EF E3 2E 01 ; Subtract with carry (long) $012EE3.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $8D8D.w		; 8D 8D 8D ; Store accumulator to $8D8D.w [Reads: Accumulator]
	tsb $068D.w		; 0C 8D 06 ; Test and set bits $068D.w [Reads: Accumulator] [Flags: Z]
	eor $8D8D.w,X		; 5D 8D 8D ; Exclusive OR accumulator with memory $8D8D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $8F08.w		; 8C 08 8F ; Store Y register to $8F08.w [Reads: Y Index]
	sta $0BE08F.l		; 8F 8F E0 0B ; Store accumulator (long) $0BE08F.l [Reads: Accumulator]
	sbc $E1A0.w		; ED A0 E1 ; Subtract $E1A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $1CE3.w		; 0D E3 1C ; Logical OR $1CE3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	eor $08A7.w,X		; 5D A7 08 ; Exclusive OR accumulator with memory $08A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $ABA4.w		; 4D A4 AB ; Exclusive OR $ABA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A75D.w		; 20 5D A7 ; Jump to subroutine at $A75D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $ABA4.w		; 4D A4 AB ; Exclusive OR $ABA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30A7.w		; 2D A7 30 ; Logical AND $30A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $08A4.w		; 6D A4 08 ; Add $08A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $B0ABA7.l		; 4F A7 AB B0 ; Exclusive OR accumulator with memory (long) $B0ABA7.l [Writes: Accumulator] [Flags: NZ]
	.db $30, $6F		; 30 6F ; Branch if minus to $30, $6F [Flow: branch]
	lda ($20.b,S),Y		; B3 20 ; Load accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $08B1.w		; 6D B1 08 ; Add $08B1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp $B1AF.w		; 4C AF B1 ; Jump to $B1AF.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($E0B0.w,X)		; 7C B0 E0 ; Jump indirect indexed to ($E0B0.w,X) [Reads: X Index] [Flow: jump]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $E1.b,X		; B4 E1 ; Load Y register $E1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $012EF8.l		; EF F8 2E 01 ; Subtract with carry (long) $012EF8.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A23B08.l,X		; 9F 08 3B A2 ; Store accumulator (long,X) $A23B08.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $B05D.w		; 20 5D B0 ; Jump to subroutine at $B05D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $B3AB.w		; 4D AB B3 ; Exclusive OR $B3AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $B05D.w		; 20 5D B0 ; Jump to subroutine at $B05D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $B3AB.w		; 4D AB B3 ; Exclusive OR $B3AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30B0.w		; 2D B0 30 ; Logical AND $30B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $08AB.w		; 6D AB 08 ; Add $08AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $B0AB.w		; 4D AB B0 ; Exclusive OR $B0AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($20.b,S),Y		; B3 20 ; Load accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $08B7.w,X		; 7D B7 08 ; Add $08B7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B8B6.w		; 4D B6 B8 ; Exclusive OR $B8B6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $B73D.w		; 0C 3D B7 ; Test and set bits $B73D.w [Reads: Accumulator] [Flags: Z]
	lda ($08.b,S),Y		; B3 08 ; Load accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $ABAF.w		; 4D AF AB ; Exclusive OR $ABAF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($60.b,S),Y		; B3 60 ; Load accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $00B0.w,X		; 7D B0 00 ; Add $00B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $012EC4.l		; EF C4 2E 01 ; Subtract with carry (long) $012EC4.l [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $10C9.w		; 8C C9 10 ; Store Y register to $10C9.w [Reads: Y Index]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $8F18.w		; 8C 18 8F ; Store Y register to $8F18.w [Reads: Y Index]
	sbc $012F11.l		; EF 11 2F 01 ; Subtract with carry (long) $012F11.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $012F24.l		; EF 24 2F 01 ; Subtract with carry (long) $012F24.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $012EE3.l		; EF E3 2E 01 ; Subtract with carry (long) $012EE3.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $068B.w		; 0C 8B 06 ; Test and set bits $068B.w [Reads: Accumulator] [Flags: Z]
	eor $8B8B.w,X		; 5D 8B 8B ; Exclusive OR accumulator with memory $8B8B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $8F08.w		; 8C 08 8F ; Store Y register to $8F08.w [Reads: Y Index]
	sta $5D208F.l		; 8F 8F 20 5D ; Store accumulator (long) $5D208F.l [Reads: Accumulator]
	lda [$08.b]		; A7 08 ; Load accumulator (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $ABA4.w		; 4D A4 AB ; Exclusive OR $ABA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A75D.w		; 20 5D A7 ; Jump to subroutine at $A75D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $ABA4.w		; 4D A4 AB ; Exclusive OR $ABA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30A7.w		; 2D A7 30 ; Logical AND $30A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $08A4.w		; 6D A4 08 ; Add $08A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $ABA7A4.l		; 4F A4 A7 AB ; Exclusive OR accumulator with memory (long) $ABA7A4.l [Writes: Accumulator] [Flags: NZ]
	jsr $B06F.w		; 20 6F B0 ; Jump to subroutine at $B06F.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $B1AF.w		; 4D AF B1 ; Exclusive OR $B1AF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $B03D.w		; 0C 3D B0 ; Test and set bits $B03D.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A3A6.w		; 4D A6 A3 ; Exclusive OR $A3A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $EFA7.w,X		; 7D A7 EF ; Add $EFA7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $1801.w		; 2E 01 18 ; Rotate left $1801.w [Flags: NCZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A23B08.l,X		; 9F 08 3B A2 ; Store accumulator (long,X) $A23B08.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($20.b)		; 12 20 ; OR accumulator with memory (indirect) ($20.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $08B0.w		; 6D B0 08 ; Add $08B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	ldx $AC08.w		; AE 08 AC ; Load $AC08.w into X register [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $30, $AC		; 30 AC ; Branch if minus to $30, $AC [Flow: branch]
	jsr $08AE.w		; 20 AE 08 ; Jump to subroutine at $08AE.w [Writes: Stack Pointer] [Flow: call]
	ldx $18AE.w		; AE AE 18 ; Load $18AE.w into X register [Writes: X Index] [Flags: NZ]
	ldx $A90C.w		; AE 0C A9 ; Load $A90C.w into X register [Writes: X Index] [Flags: NZ]
	ldx $AC20.w		; AE 20 AC ; Load $AC20.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($E1.b)		; 12 E1 ; OR accumulator with memory (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A87D30.l		; 0F 30 7D A8 ; OR accumulator with memory (long) $A87D30.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $A8.b		; A4 A8 ; Load $A8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $50, $A9		; 50 A9 ; Branch if overflow clear to $50, $A9 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda [$30.b]		; A7 30 ; Load accumulator (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	lda $E0.b,S		; A3 E0 ; Load accumulator (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $012F11.l		; EF 11 2F 01 ; Subtract with carry (long) $012F11.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $012F24.l		; EF 24 2F 01 ; Subtract with carry (long) $012F24.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $9090.w,X		; 3D 90 90 ; AND accumulator with memory $9090.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($18.b),Y		; 91 18 ; Store accumulator ($18.b),Y [Reads: Direct Page, Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $068A.w		; 0C 8A 06 ; Test and set bits $068A.w [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $088F8F.l		; 8F 8F 8F 08 ; Store accumulator (long) $088F8F.l [Reads: Accumulator]
	sta $E08F8F.l		; 8F 8F 8F E0 ; Store accumulator (long) $E08F8F.l [Reads: Accumulator]
	ora ($E1.b),Y		; 11 E1 ; OR accumulator with memory ($E1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $18B4.w		; ED B4 18 ; Subtract $18B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $069F0C.l,X		; 9F 0C 9F 06 ; Store accumulator (long,X) $069F0C.l,X [Reads: Accumulator, X Index]
	sta $A0189F.l,X		; 9F 9F 18 A0 ; Store accumulator (long,X) $A0189F.l,X [Reads: Accumulator, X Index]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	tsb $069D.w		; 0C 9D 06 ; Test and set bits $069D.w [Reads: Accumulator] [Flags: Z]
	sta $189D.w,X		; 9D 9D 18 ; Store accumulator to $189D.w,X [Reads: Accumulator, X Index]
	sta $089F9F.l,X		; 9F 9F 9F 08 ; Store accumulator (long,X) $089F9F.l,X [Reads: Accumulator, X Index]
	sta $209F9F.l,X		; 9F 9F 9F 20 ; Store accumulator (long,X) $209F9F.l,X [Reads: Accumulator, X Index]
	adc $08A9.w		; 6D A9 08 ; Add $08A9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AC3D.w		; 0C 3D AC ; Test and set bits $AC3D.w [Reads: Accumulator] [Flags: Z]
	jsr $AB6D.w		; 20 6D AB ; Jump to subroutine at $AB6D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$A8.b		; A9 A8 ; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	jsr $08AB.w		; 20 AB 08 ; Jump to subroutine at $08AB.w [Writes: Stack Pointer] [Flow: call]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $AB0C.w		; AC 0C AB ; Load $AB0C.w into Y register [Writes: Y Index] [Flags: NZ]
	lda [$08.b]		; A7 08 ; Load accumulator (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $9F.b,S		; A3 9F ; Load accumulator (stack relative) $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$60.b]		; A7 60 ; Load accumulator (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $C9.b		; A4 C9 ; Load $C9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0CA4.w,X		; 7D A4 0C ; Add $0CA4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $A3		; 30 A3 ; Branch if minus to $30, $A3 [Flow: branch]
	sta $C99F60.l,X		; 9F 60 9F C9 ; Store accumulator (long,X) $C99F60.l,X [Reads: Accumulator, X Index]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $012F11.l		; EF 11 2F 01 ; Subtract with carry (long) $012F11.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $022F36.l		; EF 36 2F 02 ; Subtract with carry (long) $022F36.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $012F40.l		; EF 40 2F 01 ; Subtract with carry (long) $012F40.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $8888.w,X		; 3D 88 88 ; AND accumulator with memory $8888.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $0688.w		; 0C 88 06 ; Test and set bits $0688.w [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stx $8E8E.w		; 8E 8E 8E ; Store X register to $8E8E.w [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stx $8E8E.w		; 8E 8E 8E ; Store X register to $8E8E.w [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($06.b,S),Y		; 93 06 ; Store accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	tsb $068F.w		; 0C 8F 06 ; Test and set bits $068F.w [Reads: Accumulator] [Flags: Z]
	sta $8C188F.l		; 8F 8F 18 8C ; Store accumulator (long) $8C188F.l [Reads: Accumulator]
	sty $088C.w		; 8C 8C 08 ; Store Y register to $088C.w [Reads: Y Index]
	sta $EF8F8F.l		; 8F 8F 8F EF ; Store accumulator (long) $EF8F8F.l [Reads: Accumulator]
	eor [$2F.b],Y		; 57 2F ; Exclusive OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $9B9B.w,X		; 3D 9B 9B ; AND accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $069B.w		; 0C 9B 06 ; Test and set bits $069B.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	tsb $069D.w		; 0C 9D 06 ; Test and set bits $069D.w [Reads: Accumulator] [Flags: Z]
	sta $189D.w,X		; 9D 9D 18 ; Store accumulator to $189D.w,X [Reads: Accumulator, X Index]
	sta $0C9F9F.l,X		; 9F 9F 9F 0C ; Store accumulator (long,X) $0C9F9F.l,X [Reads: Accumulator, X Index]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $089F9F.l,X		; 9F 9F 9F 08 ; Store accumulator (long,X) $089F9F.l,X [Reads: Accumulator, X Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $012F6B.l		; EF 6B 2F 01 ; Subtract with carry (long) $012F6B.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $2F.b,S		; 83 2F ; Store accumulator (stack relative) $2F.b,S [Reads: Stack Pointer, Accumulator]
	ora ($FA.b,X)		; 01 FA ; Logical OR ($FA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $AAE5.w,Y		; 19 E5 AA ; OR accumulator with memory $AAE5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	asl $3232.w,X		; 1E 32 32 ; Arithmetic shift left $3232.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFC8.w		; ED C8 EF ; Subtract $EFC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $2E.b,S		; E3 2E ; Subtract stack-relative $2E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor [$2F.b],Y		; 57 2F ; Exclusive OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFB4.w		; ED B4 EF ; Subtract $EFB4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $2F.b,S		; 83 2F ; Store accumulator (stack relative) $2F.b,S [Reads: Stack Pointer, Accumulator]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp ($2E.b,S),Y		; D3 2E ; Compare accumulator (stack relative indirect indexed) ($2E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $012F40.l		; EF 40 2F 01 ; Subtract with carry (long) $012F40.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $EF.b		; 05 EF ; Logical OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $EF01.w		; 2E 01 EF ; Rotate left $EF01.w [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $11E001.l		; 2F 01 E0 11 ; AND accumulator with memory (long) $11E001.l [Writes: Accumulator] [Flags: NZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9B9B.w,X		; 3D 9B 9B ; AND accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $9E3B.w		; 0C 3B 9E ; Test and set bits $9E3B.w [Reads: Accumulator] [Flags: Z]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	stz $189E.w,X		; 9E 9E 18 ; Store zero to $189E.w,X [Reads: X Index]
	and $9B9B.w,X		; 3D 9B 9B ; AND accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; [PATTERN: Memory clearing operation] 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $3D08.w,X		; 9E 08 3D ; Store zero to $3D08.w,X [Reads: X Index]
	stz $189E.w,X		; 9E 9E 18 ; Store zero to $189E.w,X [Reads: X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $9E3B.w		; 0C 3B 9E ; Test and set bits $9E3B.w [Reads: Accumulator] [Flags: Z]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	stz $189E.w,X		; 9E 9E 18 ; Store zero to $189E.w,X [Reads: X Index]
	and $9B9B.w,X		; 3D 9B 9B ; AND accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; [PATTERN: Memory clearing operation] 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $3D08.w,X		; 9E 08 3D ; Store zero to $3D08.w,X [Reads: X Index]
	stz $009E.w,X		; 9E 9E 00 ; Store zero to $009E.w,X [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C98C.w,X		; 7D 8C C9 ; Add $C98C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$8F.b		; C9 8F ; Compare #$8F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $10C9.w		; 8C C9 10 ; Store Y register to $10C9.w [Reads: Y Index]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $8F18.w		; 8C 18 8F ; Store Y register to $8F18.w [Reads: Y Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $8F0C.w		; 8C 0C 8F ; Store Y register to $8F0C.w [Reads: Y Index]
	asl $5D.b		; 06 5D ; Arithmetic shift left $5D.b [Reads: Direct Page] [Flags: NCZ]
	sta $3D188F.l		; 8F 8F 18 3D ; Store accumulator (long) $3D188F.l [Reads: Accumulator]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $008F8F.l		; 8F 8F 8F 00 ; Store accumulator (long) $008F8F.l [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A23B0C.l,X		; 9F 0C 3B A2 ; Store accumulator (long,X) $A23B0C.l,X [Reads: Accumulator, X Index]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A23B08.l,X		; 9F 08 3B A2 ; Store accumulator (long,X) $A23B08.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $A9A9.w,X		; 3D A9 A9 ; AND accumulator with memory $A9A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	tsb $068F.w		; 0C 8F 06 ; Test and set bits $068F.w [Reads: Accumulator] [Flags: Z]
	eor $8F8F.w,X		; 5D 8F 8F ; Exclusive OR accumulator with memory $8F8F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $8C8C.w,X		; 3D 8C 8C ; AND accumulator with memory $8C8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $8F08.w		; 8C 08 8F ; Store Y register to $8F08.w [Reads: Y Index]
	sta $18008F.l		; 8F 8F 00 18 ; Store accumulator (long) $18008F.l [Reads: Accumulator]
	sta $0C9F9F.l,X		; 9F 9F 9F 0C ; Store accumulator (long,X) $0C9F9F.l,X [Reads: Accumulator, X Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $9F9F.w,X		; 3D 9F 9F ; AND accumulator with memory $9F9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A23B08.l,X		; 9F 08 3B A2 ; Store accumulator (long,X) $A23B08.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $A2A2.w,X		; 3D A2 A2 ; AND accumulator with memory $A2A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $8C8C.w,X		; 7D 8C 8C ; Add $8C8C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $8F08.w		; 8C 08 8F ; Store Y register to $8F08.w [Reads: Y Index]
	sta $8C188F.l		; 8F 8F 18 8C ; Store accumulator (long) $8C188F.l [Reads: Accumulator]
	sty $8C10.w		; 8C 10 8C ; Store Y register to $8C10.w [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $8F18.w		; 8C 18 8F ; Store Y register to $8F18.w [Reads: Y Index]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $188F8F.l		; 8F 8F 8F 18 ; Store accumulator (long) $188F8F.l [Reads: Accumulator]
	sty $108C.w		; 8C 8C 10 ; Store Y register to $108C.w [Reads: Y Index]
	sty $8C08.w		; 8C 08 8C ; Store Y register to $8C08.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $2FEA00.l		; 8F 00 EA 2F ; Store accumulator (long) $2FEA00.l [Reads: Accumulator]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	and $DA2FBA.l		; 2F BA 2F DA ; AND accumulator with memory (long) $DA2FBA.l [Writes: Accumulator] [Flags: NZ]
	and $CA2FDA.l		; 2F DA 2F CA ; AND accumulator with memory (long) $CA2FDA.l [Writes: Accumulator] [Flags: NZ]
	and $FF2FCA.l		; 2F CA 2F FF ; AND accumulator with memory (long) $FF2FCA.l [Writes: Accumulator] [Flags: NZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FA0000.l		; 2F 00 00 FA ; AND accumulator with memory (long) $FA0000.l [Writes: Accumulator] [Flags: NZ]
	and $193003.l		; 2F 03 30 19 ; AND accumulator with memory (long) $193003.l [Writes: Accumulator] [Flags: NZ]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $41		; 30 41 ; Branch if minus to $30, $41 [Flow: branch]
	.db $30, $5E		; 30 5E ; Branch if minus to $30, $5E [Flow: branch]
	.db $30, $66		; 30 66 ; Branch if minus to $30, $66 [Flow: branch]
	.db $30, $83		; 30 83 ; Branch if minus to $30, $83 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	.db $30, $BF		; 30 BF ; Branch if minus to $30, $BF [Flow: branch]
	.db $30, $C7		; 30 C7 ; Branch if minus to $30, $C7 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	and ($0F.b),Y		; 31 0F ; AND accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($1F.b),Y		; 31 1F ; AND accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($2D.b),Y		; 31 2D ; AND accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $ED.b,X		; 16 ED ; Arithmetic shift left $ED.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $01313C.l		; EF 3C 31 01 ; Subtract with carry (long) $01313C.l [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $0CC8.w		; ED C8 0C ; Subtract $0CC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $A094.w,X		; 5D 94 A0 ; Exclusive OR accumulator with memory $A094.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $A0.b,X		; 94 A0 ; Store Y register $A0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Direct Page, Accumulator]
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Direct Page, Accumulator]
	sty $A0.b,X		; 94 A0 ; Store Y register $A0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $A0.b,X		; 94 A0 ; Store Y register $A0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Direct Page, Accumulator]
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Direct Page, Accumulator]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFC8.w		; ED C8 EF ; Subtract $EFC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	bit $0131.w,X		; 3C 31 01 ; Test bits $0131.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $0CC8.w		; ED C8 0C ; Subtract $0CC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $C99B.w,X		; 5D 9B C9 ; Exclusive OR accumulator with memory $C99B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFFA.w		; ED FA EF ; Subtract $EFFA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $31		; 50 31 ; Branch if overflow clear to $50, $31 [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $9494.w,X		; 5D 94 94 ; Exclusive OR accumulator with memory $9494.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $92.b		; 24 92 ; Test bits $92.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $1894.w		; 0C 94 18 ; Test and set bits $1894.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $30.b,X		; 94 30 ; Store Y register $30.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($18.b)		; 92 18 ; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	bit $8E.b		; 24 8E ; Test bits $8E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $1890.w		; 0C 90 18 ; Test and set bits $1890.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	stx $12E0.w		; 8E E0 12 ; Store X register to $12E0.w [Reads: X Index]
	sbc $EFC8.w		; ED C8 EF ; Subtract $EFC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $31		; 50 31 ; Branch if overflow clear to $50, $31 [Flow: branch]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $A0A0.w,X		; 5D A0 A0 ; Exclusive OR accumulator with memory $A0A0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $9E.b		; 24 9E ; Test bits $9E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $18A0.w		; [PATTERN: Memory clearing operation] 0C A0 18 ; Test and set bits $18A0.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy #$30.b		; A0 30 ; Load #$30.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $9C18.w,X		; 9E 18 9C ; Store zero to $9C18.w,X [Reads: X Index]
	stz $9A24.w		; 9C 24 9A ; Store zero to $9A24.w
	tsb $189C.w		; 0C 9C 18 ; Test and set bits $189C.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stz $9A30.w		; 9C 30 9A ; Store zero to $9A30.w
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $9B9B.w,X		; 5D 9B 9B ; Exclusive OR accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $99.b		; 24 99 ; Test bits $99.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $189B.w		; 0C 9B 18 ; Test and set bits $189B.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $99		; 30 99 ; Branch if minus to $30, $99 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	bit $95.b		; 24 95 ; Test bits $95.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $1897.w		; 0C 97 18 ; Test and set bits $1897.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$30.b],Y		; 97 30 ; Store accumulator (long indexed) [$30.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $E0.b,X		; 95 E0 ; Store accumulator to $E0.b,X [Reads: Accumulator, X Index]
	asl $ED.b,X		; 16 ED ; Arithmetic shift left $ED.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $013174.l		; EF 74 31 01 ; Subtract with carry (long) $013174.l [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $0CC8.w		; ED C8 0C ; Subtract $0CC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $9C90.w,X		; 5D 90 9C ; Exclusive OR accumulator with memory $9C90.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $9C		; 90 9C ; Branch if carry clear to $90, $9C [Flow: branch]
	stx $8E9A.w		; 8E 9A 8E ; Store X register to $8E9A.w [Reads: X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $90, $9C		; 90 9C ; Branch if carry clear to $90, $9C [Flow: branch]
	.db $90, $9C		; 90 9C ; Branch if carry clear to $90, $9C [Flow: branch]
	stx $8E9A.w		; 8E 9A 8E ; Store X register to $8E9A.w [Reads: X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $EFC8.w		; ED C8 EF ; Subtract $EFC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	stz $31.b,X		; 74 31 ; Store zero to $31.b,X [Reads: X Index]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $0CC8.w		; ED C8 0C ; Subtract $0CC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $C997.w,X		; 5D 97 C9 ; Exclusive OR accumulator with memory $C997.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$C9.b],Y		; 97 C9 ; Store accumulator (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$C9.b],Y		; 97 C9 ; Store accumulator (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$C9.b],Y		; 97 C9 ; Store accumulator (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$C9.b],Y		; 97 C9 ; Store accumulator (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$C9.b],Y		; 97 C9 ; Store accumulator (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$C9.b],Y		; 97 C9 ; Store accumulator (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$FA.b],Y		; 97 FA ; Store accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora $B4E5.w,Y		; 19 E5 B4 ; OR accumulator with memory $B4E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$27.b]		; E7 27 ; Subtract with carry (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $0CFA.w		; ED FA 0C ; Subtract $0CFA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $AEB0.w,X		; 5D B0 AE ; Exclusive OR accumulator with memory $AEB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	lda $B3.b,X		; B5 B3 ; Load $B3.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $9494.w,X		; 5D 94 94 ; Exclusive OR accumulator with memory $9494.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Direct Page, Accumulator]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $0CC8.w		; ED C8 0C ; Subtract $0CC8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $AEB0.w,X		; 5D B0 AE ; Exclusive OR accumulator with memory $AEB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	lda $B3.b,X		; B5 B3 ; Load $B3.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	cpx #$18.b		; [PATTERN: Memory clearing operation] E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $A0A0.w,X		; 5D A0 A0 ; Exclusive OR accumulator with memory $A0A0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $9E0C.w,X		; 9E 0C 9E ; Store zero to $9E0C.w,X [Reads: X Index]
	stz $C830.w,X		; 9E 30 C8 ; Store zero to $C830.w,X [Reads: X Index]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $18C8.w		; ED C8 18 ; Subtract $18C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $9B9B.w,X		; 5D 9B 9B ; Exclusive OR accumulator with memory $9B9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $990C.w,Y		; 99 0C 99 ; Store accumulator to $990C.w,Y [Reads: Y Index, Accumulator]
	sta $C830.w,Y		; 99 30 C8 ; Store accumulator to $C830.w,Y [Reads: Y Index, Accumulator]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $B0A9.w,X		; 5D A9 B0 ; Exclusive OR accumulator with memory $B0A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $A9.b,X		; B5 A9 ; Load $A9.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $A9B3.w		; AE B3 A9 ; Load $A9B3.w into X register [Writes: X Index] [Flags: NZ]
	.db $B0, $B5		; B0 B5 ; Branch if carry set to $B0, $B5 [Flow: branch]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $AEB0.w,X		; 5D B0 AE ; Exclusive OR accumulator with memory $AEB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp #$B0.b		; C9 B0 ; Compare #$B0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$AE.b		; C9 AE ; Compare #$AE.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $AEAC.w		; AE AC AE ; Load $AEAC.w into X register [Writes: X Index] [Flags: NZ]
	ldy $A6A8.w		; AC A8 A6 ; Load $A6A8.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$AE.b		; C9 AE ; Compare #$AE.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$AC.b		; C9 AC ; Compare #$AC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $A8AC.w		; AE AC A8 ; Load $A8AC.w into X register [Writes: X Index] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $A85D.w		; 0C 5D A8 ; Test and set bits $A85D.w [Reads: Accumulator] [Flags: Z]
	ldy $A6B2.w		; AC B2 A6 ; Load $A6B2.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $B0, $A8		; B0 A8 ; Branch if carry set to $B0, $A8 [Flow: branch]
	ldy $A6B2.w		; AC B2 A6 ; Load $A6B2.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $00C9.w		; AE C9 00 ; Load $00C9.w into X register [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $60FFFF.l,X		; FF FF FF 60 ; Subtract with carry (long,X) $60FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($00.b)		; D2 00 ; Compare accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	.db $D0, $76		; D0 76 ; Branch if not equal to $D0, $76 [Flow: branch]
	.db $D0, $86		; D0 86 ; Branch if not equal to $D0, $86 [Flow: branch]
	.db $D0, $FF		; D0 FF ; Branch if not equal to $D0, $FF [Flow: branch]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $B0		; D0 B0 ; Branch if not equal to $D0, $B0 [Flow: branch]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	.db $D0, $CE		; D0 CE ; Branch if not equal to $D0, $CE [Flow: branch]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($35.b),Y		; D1 35 ; Compare accumulator ($35.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($4E.b),Y		; D1 4E ; Compare accumulator ($4E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($69.b),Y		; D1 69 ; Compare accumulator ($69.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($82.b),Y		; D1 82 ; Compare accumulator ($82.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($B2.b),Y		; D1 B2 ; Compare accumulator ($B2.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($BE.b),Y		; D1 BE ; Compare accumulator ($BE.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($D6.b),Y		; D1 D6 ; Compare accumulator ($D6.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($EF.b),Y		; D1 EF ; Compare accumulator ($EF.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($08.b),Y		; D1 08 ; Compare accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($00.b)		; D2 00 ; Compare accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($47.b)		; D2 47 ; Compare accumulator (indirect) ($47.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($51.b)		; D2 51 ; Compare accumulator (indirect) ($51.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($7A.b)		; D2 7A ; Compare accumulator (indirect) ($7A.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($9B.b)		; D2 9B ; Compare accumulator (indirect) ($9B.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($BC.b)		; D2 BC ; Compare accumulator (indirect) ($BC.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($00.b)		; D2 00 ; Compare accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc $8C.b		; E6 8C ; Increment $8C.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($10.b,X)		; E1 10 ; Subtract with carry ($10.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$17.b]		; E7 17 ; Subtract with carry (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $18A0.w		; ED A0 18 ; Subtract $18A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $38B4.w,X		; 7D B4 38 ; Add $38B4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AFAD08.l		; AF 08 AD AF ; Load long $AFAD08.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D2E3.l		; EF E3 D2 01 ; Subtract with carry (long) $01D2E3.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	adc $488C.w,X		; 7D 8C 48 ; Add $488C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($8C.b),Y		; 91 8C ; Store accumulator ($8C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($ED.b),Y		; 91 ED ; Store accumulator ($ED.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $38B4.w,X		; 7D B4 38 ; Add $38B4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AFAD08.l		; AF 08 AD AF ; Load long $AFAD08.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D2E3.l		; EF E3 D2 01 ; Subtract with carry (long) $01D2E3.l [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	adc $0C93.w,X		; 7D 93 0C ; Add $0C93.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0C98.w,X		; 3C 98 0C ; Test bits $0C98.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0C93.w,X		; 3C 93 0C ; Test bits $0C93.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $18,$98		; 54 98 18 ; Move block negative $18,$98 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $1898.w,X		; 7D 98 18 ; Add $1898.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $9D		; 30 9D ; Branch if minus to $30, $9D [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $98		; 30 98 ; Branch if minus to $30, $98 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $18E0.w,X		; 9D E0 18 ; Store accumulator to $18E0.w,X [Reads: Accumulator, X Index]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $38B4.w,X		; 5D B4 38 ; Exclusive OR accumulator with memory $38B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $AFAD08.l		; AF 08 AD AF ; Load long $AFAD08.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D2E3.l		; EF E3 D2 01 ; Subtract with carry (long) $01D2E3.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $B4E5.w,Y		; 19 E5 B4 ; OR accumulator with memory $B4E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	sbc [$19.b]		; E7 19 ; Subtract with carry (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stz $25.b		; 64 25 ; Store zero to $25.b
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $2018.w		; 1C 18 20 ; Test and reset bits $2018.w [Reads: Accumulator] [Flags: Z]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $18A3.w,X		; 7D A3 18 ; Add $18A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $C810.w		; AD 10 C8 ; Load $C810.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $BE.b,X		; B5 BE ; Load $BE.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $C8		; 50 C8 ; Branch if overflow clear to $50, $C8 [Flow: branch]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	inc $5A.b		; E6 5A ; Increment $5A.b [Reads: Direct Page] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E3.b)		; 12 E3 ; OR accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $2818.w		; 1C 18 28 ; Test and reset bits $2818.w [Reads: Accumulator] [Flags: Z]
	adc $A693.w,X		; 7D 93 A6 ; Add $A693.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $C120.w,Y		; B9 20 C1 ; Load $C120.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18E3.w		; 0E E3 18 ; Arithmetic shift left $18E3.w [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $C908.w		; 1C 08 C9 ; Test and reset bits $C908.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $A99A.w,X		; 7D 9A A9 ; Add $A99A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($20.b)		; B2 20 ; Load accumulator (indirect) ($20.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $30.b,X		; B5 30 ; Load $30.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $101A.w		; 1C 1A 10 ; Test and reset bits $101A.w [Reads: Accumulator] [Flags: Z]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $AD9D.w,X		; 7D 9D AD ; Add $AD9D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $40B938.l		; AF 38 B9 40 ; Load long $40B938.l into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $60C9.w		; 20 C9 60 ; Jump to subroutine at $60C9.w [Writes: Stack Pointer] [Flow: call]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $E3.b		; 06 E3 ; Arithmetic shift left $E3.b [Reads: Direct Page] [Flags: NCZ]
	asl $1C18.w,X		; 1E 18 1C ; Arithmetic shift left $1C18.w,X [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $20A1.w,X		; 7D A1 20 ; Add $20A1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $38B0.w,X		; 7D B0 38 ; Add $38B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D2EE.l		; EF EE D2 01 ; Subtract with carry (long) $01D2EE.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	adc $4894.w,X		; 7D 94 48 ; Add $4894.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $9994.w,Y		; 99 94 99 ; Store accumulator to $9994.w,Y [Reads: Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $38B0.w,X		; 7D B0 38 ; Add $38B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D2EE.l		; EF EE D2 01 ; Subtract with carry (long) $01D2EE.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	adc $0C9B.w,X		; 7D 9B 0C ; Add $0C9B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0CA0.w,X		; 3C A0 0C ; Test bits $0CA0.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0C9B.w,X		; 3C 9B 0C ; Test bits $0C9B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0CA0.w,X		; 3C A0 0C ; Test bits $0CA0.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $54C80C.l,X		; 9F 0C C8 54 ; Store accumulator (long,X) $54C80C.l,X [Reads: Accumulator, X Index]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	adc $18A0.w,X		; 7D A0 18 ; Add $18A0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc $38B0.w,X		; 7D B0 38 ; Add $38B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01D2EE.l		; EF EE D2 01 ; Subtract with carry (long) $01D2EE.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $AB30.w		; AD 30 AB ; Load $AB30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AB30.w		; AD 30 AB ; Load $AB30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $E8.b		; A4 E8 ; Load $E8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $A7.b		; A5 A7 ; Load $A7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$AA.b		; A9 AA ; Load #$AA.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E8AE.w		; AC AE E8 ; Load $E8AE.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $ABA9.w,Y		; 19 A9 AB ; OR accumulator with memory $ABA9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $B0AF.w		; AD AF B0 ; Load $B0AF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $9596.w,X		; 7D 96 95 ; Add $9596.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $93.b,X		; 94 93 ; Store Y register $93.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $95.b,Y		; 96 95 ; Store X register $95.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $93.b,X		; 94 93 ; Store Y register $93.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $18A6.w,X		; 7D A6 18 ; Add $18A6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AB30.w		; AD 30 AB ; Load $AB30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AB30.w		; AD 30 AB ; Load $AB30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $A7.b		; A5 A7 ; Load $A7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$AA.b		; A9 AA ; Load #$AA.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $A9AE.w		; AC AE A9 ; Load $A9AE.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $B0AF.w		; AD AF B0 ; Load $B0AF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $B2.b		; 04 B2 ; Test and set bits $B2.b [Reads: Accumulator] [Flags: Z]
	tsb $3CC9.w		; 0C C9 3C ; Test and set bits $3CC9.w [Reads: Accumulator] [Flags: Z]
	adc $0C9D.w,X		; 7D 9D 0C ; Add $0C9D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	stz $C90C.w		; 9C 0C C9 ; Store zero to $C90C.w
	bit $0C9B.w,X		; 3C 9B 0C ; Test bits $0C9B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $3CC9.w		; 0C C9 3C ; Test and set bits $3CC9.w [Reads: Accumulator] [Flags: Z]
	sta $C90C.w,X		; 9D 0C C9 ; Store accumulator to $C90C.w,X [Reads: Accumulator, X Index]
	bit $0C9C.w,X		; 3C 9C 0C ; Test bits $0C9C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $3CC9.w		; 0C C9 3C ; Test and set bits $3CC9.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $18A2.w,X		; 7D A2 18 ; Add $18A2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $30C918.l,X		; 9F 18 C9 30 ; Store accumulator (long,X) $30C918.l,X [Reads: Accumulator, X Index]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A67D30.l,X		; 9F 30 7D A6 ; Store accumulator (long,X) $A67D30.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AB30.w		; AD 30 AB ; Load $AB30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AB30.w		; AD 30 AB ; Load $AB30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $A7.b		; A5 A7 ; Load $A7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$AA.b		; A9 AA ; Load #$AA.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $A9AE.w		; AC AE A9 ; Load $A9AE.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $B0AF.w		; AD AF B0 ; Load $B0AF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $24.b,X		; B4 24 ; Load Y register $24.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $AFAD06.l		; AF 06 AD AF ; Load long $AFAD06.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $A2.b		; A4 A2 ; Load $A2.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $B0.b		; A4 B0 ; Load $B0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	bit $AB.b		; 24 AB ; Test bits $AB.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and ($D3.b),Y		; 31 D3 ; AND accumulator with memory ($D3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($D3.b,X)		; 41 D3 ; Exclusive OR accumulator with memory ($D3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($D3.b),Y		; 51 D3 ; Exclusive OR accumulator with memory ($D3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($D3.b,X)		; 61 D3 ; Add with carry ($D3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($D3.b),Y		; 71 D3 ; Add with carry ($D3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($D3.b),Y		; 11 D3 ; OR accumulator with memory ($D3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($D3.b,X)		; 21 D3 ; Logical AND ($D3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($D3.b,X)		; 81 D3 ; Store accumulator ($D3.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($D3.b),Y		; 91 D3 ; Store accumulator ($D3.b),Y [Reads: Direct Page, Y Index, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($D3.b,X)		; A1 D3 ; Load accumulator ($D3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($D3.b)		; D2 D3 ; Compare accumulator (indirect) ($D3.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	inc $D3.b		; E6 D3 ; Increment $D3.b [Reads: Direct Page] [Flags: NZ]
	ora $D4.b,S		; 03 D4 ; OR accumulator with stack relative $D4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $D4.b		; 24 D4 ; Test bits $D4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $D4.b		; 45 D4 ; Exclusive OR $D4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($92D4.w,X)		; 7C D4 92 ; Jump indirect indexed to ($92D4.w,X) [Reads: X Index] [Flow: jump]
	pei ($C0.b)		; D4 C0 ; Push effective indirect address ($C0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($EE.b)		; D4 EE ; Push effective indirect address ($EE.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($1F.b)		; D4 1F ; Push effective indirect address ($1F.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $CF.b,X		; D5 CF ; Compare accumulator $CF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $00.b,X		; D5 00 ; Compare accumulator $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $30.b,X		; D5 30 ; Compare accumulator $30.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $6A.b,X		; D6 6A ; Decrement memory $6A.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $97.b,X		; D6 97 ; Decrement memory $97.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $B8.b,X		; D6 B8 ; Decrement memory $B8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $C8.b,X		; D6 C8 ; Decrement memory $C8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $E3.b,X		; D6 E3 ; Decrement memory $E3.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $FA.b,X		; D6 FA ; Decrement memory $FA.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $00.b,X		; D6 00 ; Decrement memory $00.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$25.b],Y		; D7 25 ; Compare accumulator (long indexed) [$25.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$2B.b],Y		; D7 2B ; Compare accumulator (long indexed) [$2B.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$2F.b],Y		; D7 2F ; Compare accumulator (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$3C.b],Y		; D7 3C ; Compare accumulator (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$44.b],Y		; D7 44 ; Compare accumulator (long indexed) [$44.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$79.b],Y		; D7 79 ; Compare accumulator (long indexed) [$79.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$83.b],Y		; D7 83 ; Compare accumulator (long indexed) [$83.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$8F.b],Y		; D7 8F ; Compare accumulator (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$A8.b],Y		; D7 A8 ; Compare accumulator (long indexed) [$A8.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$C2.b],Y		; D7 C2 ; Compare accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $D7.b		; 00 D7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$08.b],Y		; D7 08 ; Compare accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($D8.b),Y		; 11 D8 ; OR accumulator with memory ($D8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $30, $D8		; 30 D8 ; Branch if minus to $30, $D8 [Flow: branch]
	eor #$D8.b		; 49 D8 ; Exclusive OR #$D8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	stz $D8.b		; 64 D8 ; Store zero to $D8.b
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sta $B8D8.w,X		; 9D D8 B8 ; Store accumulator to $B8D8.w,X [Reads: Accumulator, X Index]
	cld		; D8 ; Clear decimal flag [Flags: D]
	dec $D8.b		; C6 D8 ; Decrement $D8.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	cpx $D8.b		; E4 D8 ; Compare $D8.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($D9.b,X)		; 01 D9 ; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00D9.w,Y		; 19 D9 00 ; OR accumulator with memory $00D9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $D948.w,Y		; D9 48 D9 ; Compare accumulator $D948.w,Y [Reads: Y Index] [Flags: NCZ]
	dec $D9.b,X		; D6 D9 ; Decrement memory $D9.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cpx $53D9.w		; EC D9 53 ; Compare $53D9.w with X register [Reads: X Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor [$DA.b],Y		; 57 DA ; Exclusive OR accumulator with memory (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $15DA.w,Y		; D9 DA 15 ; Compare accumulator $15DA.w,Y [Reads: Y Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc $A3DB.w,X		; 7D DB A3 ; Add $A3DB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	inc $16DB.w,X		; FE DB 16 ; Increment memory $16DB.w,X [Reads: X Index] [Flags: NZ]
	jmp.w [$DC1F]		; DC 1F DC ; Jump long indirect [$DC1F] [Flow: jump]
	stz $DC.b		; 64 DC ; Store zero to $DC.b
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC0]		; DC C0 DC ; Jump long indirect [$DCC0] [Flow: jump]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $2AA4.w,X		; 7D A4 2A ; Add $2AA4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $069F.w		; 6D 9F 06 ; Add $069F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A4.w		; 4D A4 06 ; Exclusive OR $06A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A6.w		; 4D A6 06 ; Exclusive OR $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30A9.w		; 4D A9 30 ; Exclusive OR $30A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CAB.w		; 6D AB 0C ; Add $0CAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $AB2D.w		; 0C 2D AB ; Test and set bits $AB2D.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $08AB.w,X		; 7D AB 08 ; Add $08AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $AEAC.w,X		; 5D AC AE ; Exclusive OR accumulator with memory $AEAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01DCDB.l		; EF DB DC 01 ; Subtract with carry (long) $01DCDB.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01DCF6.l		; EF F6 DC 01 ; Subtract with carry (long) $01DCF6.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01DD1B.l		; EF 1B DD 01 ; Subtract with carry (long) $01DD1B.l [Writes: Accumulator] [Flags: NCVZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $968C.w,X		; 5D 8C 96 ; Exclusive OR accumulator with memory $968C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $8F.b,X		; 94 8F ; Store Y register $8F.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $30, $59		; 30 59 ; Branch if minus to $30, $59 [Flow: branch]
	sta $8C8D.w		; 8D 8D 8C ; Store accumulator to $8C8D.w [Reads: Accumulator]
	sty $5D30.w		; 8C 30 5D ; Store Y register to $5D30.w [Reads: Y Index]
	stx $938E.w		; 8E 8E 93 ; Store X register to $938E.w [Reads: X Index]
	.db $30, $4D		; 30 4D ; Branch if minus to $30, $4D [Flow: branch]
	sta [$0C.b],Y		; 97 0C ; Store accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $0C93.w,X		; 7D 93 0C ; Add $0C93.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $C90C.w,X		; 9D 0C C9 ; Store accumulator to $C90C.w,X [Reads: Accumulator, X Index]
	mvn $0C,$9B		; 54 9B 0C ; Move block negative $0C,$9B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($EF.b,S),Y		; 93 EF ; Store accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and $1801DD.l,X		; 3F DD 01 18 ; AND accumulator with memory (long,X) $1801DD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $1898.w,X		; 7D 98 18 ; Add $1898.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $C918.w,Y		; 99 18 C9 ; Store accumulator to $C918.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189C.w,X		; 7D 9C 18 ; Add $189C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	sta $C918.w,X		; 9D 18 C9 ; Store accumulator to $C918.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	stz $C918.w,X		; 9E 18 C9 ; Store zero to $C918.w,X [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $E00AE1.l,X		; 9F E1 0A E0 ; Store accumulator (long,X) $E00AE1.l,X [Reads: Accumulator, X Index]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($36.b,S),Y		; 13 36 ; OR accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $EFA2.w		; 4D A2 EF ; Exclusive OR $EFA2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $0C01.w,X		; DD 01 0C ; Compare accumulator $0C01.w,X [Reads: X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stz $9E06.w,X		; 9E 06 9E ; Store zero to $9E06.w,X [Reads: X Index]
	sta $A16D30.l,X		; 9F 30 6D A1 ; Store accumulator (long,X) $A16D30.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $A3A3.w		; 4D A3 A3 ; Exclusive OR $A3A3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A34E.w		; 0C 4E A3 ; Test and set bits $A34E.w [Reads: Accumulator] [Flags: Z]
	asl $A3.b		; 06 A3 ; Arithmetic shift left $A3.b [Reads: Direct Page] [Flags: NCZ]
	lda $0C.b,S		; A3 0C ; Load accumulator (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $0CA3A3.l		; 4F A3 A3 0C ; Exclusive OR accumulator with memory (long) $0CA3A3.l [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($E1.b),Y		; 11 E1 ; OR accumulator with memory ($E1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $01DD.w		; 6D DD 01 ; Add $01DD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $E178.w		; ED 78 E1 ; Subtract $E178.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $0AE0.w		; 0C E0 0A ; Test and set bits $0AE0.w [Reads: Accumulator] [Flags: Z]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	and $27.b,X		; 35 27 ; Logical AND $27.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	tsb $A44D.w		; 0C 4D A4 ; Test and set bits $A44D.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $069F.w		; 6D 9F 06 ; Add $069F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A4.w		; 4D A4 06 ; Exclusive OR $06A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A6.w		; 4D A6 06 ; Exclusive OR $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EFA9.w		; 4D A9 EF ; Exclusive OR $EFA9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $DD.b		; C5 DD ; Compare $DD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $DC.b,X		; F6 DC ; Increment memory $DC.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $01DD.w		; ED DD 01 ; Subtract $01DD.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $A44D.w		; 0C 4D A4 ; Test and set bits $A44D.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $069F.w		; 6D 9F 06 ; Add $069F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A4.w		; 4D A4 06 ; Exclusive OR $06A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A6.w		; 4D A6 06 ; Exclusive OR $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30A9.w		; 4D A9 30 ; Exclusive OR $30A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CAB.w		; 6D AB 0C ; Add $0CAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08AB.w		; 2D AB 08 ; Logical AND $08AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $08AB.w,X		; 7D AB 08 ; Add $08AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $AEAC.w,X		; 5D AC AE ; Exclusive OR accumulator with memory $AEAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01DE0F.l		; EF 0F DE 01 ; Subtract with carry (long) $01DE0F.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01DD1B.l		; EF 1B DD 01 ; Subtract with carry (long) $01DD1B.l [Writes: Accumulator] [Flags: NCVZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $968C.w,X		; 5D 8C 96 ; Exclusive OR accumulator with memory $968C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $9394.w		; 4D 94 93 ; Exclusive OR $9394.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($98.b)		; 92 98 ; Store accumulator (indirect) ($98.b) [Reads: Direct Page, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stz $A7A4.w,X		; 9E A4 A7 ; Store zero to $A7A4.w,X [Reads: X Index]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($30.b,S),Y		; 93 30 ; Store accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($98.b)		; 92 98 ; Store accumulator (indirect) ($98.b) [Reads: Direct Page, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stz $A7A4.w,X		; 9E A4 A7 ; Store zero to $A7A4.w,X [Reads: X Index]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($30.b,S),Y		; 93 30 ; Store accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($60.b,S),Y		; 93 60 ; Store accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	eor $8C8D.w		; 4D 8D 8C ; Exclusive OR $8C8D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $ED93.w		; 8E 93 ED ; Store X register to $ED93.w [Reads: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	and ($1E.b)		; 32 1E ; AND accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $985D.w		; 0C 5D 98 ; Test and set bits $985D.w [Reads: Accumulator] [Flags: Z]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $965D.w		; 0C 5D 96 ; Test and set bits $965D.w [Reads: Accumulator] [Flags: Z]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $0696.w		; 0C 96 06 ; Test and set bits $0696.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $0696.w		; 0C 96 06 ; Test and set bits $0696.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $0696.w		; 0C 96 06 ; Test and set bits $0696.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $0694.w		; 0C 94 06 ; Test and set bits $0694.w [Reads: Accumulator] [Flags: Z]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $0694.w		; 0C 94 06 ; Test and set bits $0694.w [Reads: Accumulator] [Flags: Z]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $0694.w		; 0C 94 06 ; Test and set bits $0694.w [Reads: Accumulator] [Flags: Z]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $0694.w		; 0C 94 06 ; Test and set bits $0694.w [Reads: Accumulator] [Flags: Z]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $02DE3C.l		; EF 3C DE 02 ; Subtract with carry (long) $02DE3C.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $0699.w		; 0C 99 06 ; Test and set bits $0699.w [Reads: Accumulator] [Flags: Z]
	sta $0C99.w,Y		; 99 99 0C ; Store accumulator to $0C99.w,Y [Reads: Y Index, Accumulator]
	sta $9906.w,Y		; 99 06 99 ; Store accumulator to $9906.w,Y [Reads: Y Index, Accumulator]
	sta $990C.w,Y		; 99 0C 99 ; Store accumulator to $990C.w,Y [Reads: Y Index, Accumulator]
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: NCZ]
	sta $990C.w,Y		; 99 0C 99 ; Store accumulator to $990C.w,Y [Reads: Y Index, Accumulator]
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: NCZ]
	sta $980C.w,Y		; 99 0C 98 ; Store accumulator to $980C.w,Y [Reads: Y Index, Accumulator]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $069A.w		; 0C 9A 06 ; Test and set bits $069A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $069A.w		; 0C 9A 06 ; Test and set bits $069A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $069A.w		; 0C 9A 06 ; Test and set bits $069A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $069A.w		; 0C 9A 06 ; Test and set bits $069A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $9795.w		; 0C 95 97 ; Test and set bits $9795.w [Reads: Accumulator] [Flags: Z]
	sbc $EE3C.w		; ED 3C EE ; Subtract $EE3C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $13E078.l,X		; FF 78 E0 13 ; Subtract with carry (long,X) $13E078.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CDE67.l		; EF 67 DE 0C ; Subtract with carry (long) $0CDE67.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $9C4D.w		; 0C 4D 9C ; Test and set bits $9C4D.w [Reads: Accumulator] [Flags: Z]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $0698.w		; 6D 98 06 ; Add $0698.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $069C.w		; 4D 9C 06 ; Exclusive OR $069C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $069C.w,X		; 5D 9C 06 ; Exclusive OR accumulator with memory $069C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $069D.w		; 4D 9D 06 ; Exclusive OR $069D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $069F.w,X		; 5D 9F 06 ; Exclusive OR accumulator with memory $069F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30A1.w		; 4D A1 30 ; Exclusive OR $30A1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CA2.w		; 6D A2 0C ; Add $0CA2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08A2.w		; 2D A2 08 ; Logical AND $08A2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A4A2.w,X		; 5D A2 A4 ; Exclusive OR accumulator with memory $A4A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tsb $C9A9.w		; 0C A9 C9 ; Test and set bits $C9A9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $48.b,S		; A3 48 ; Load accumulator (stack relative) $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A3		; 30 A3 ; Branch if minus to $30, $A3 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $48.b,S		; A3 48 ; Load accumulator (stack relative) $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A3		; 30 A3 ; Branch if minus to $30, $A3 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $18A048.l,X		; 9F 48 A0 18 ; Store accumulator (long,X) $18A048.l,X [Reads: Accumulator, X Index]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $C9.b		; A4 C9 ; Load $C9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $30, $9F		; 30 9F ; Branch if minus to $30, $9F [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $01DE7E.l		; EF 7E DE 01 ; Subtract with carry (long) $01DE7E.l [Writes: Accumulator] [Flags: NCVZ]
	sbc ($06.b,X)		; E1 06 ; Subtract with carry ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($34.b)		; 12 34 ; OR accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $9FEF.w		; 1C EF 9F ; Test and reset bits $9FEF.w [Reads: Accumulator] [Flags: Z]
	dec $3001.w,X		; DE 01 30 ; Decrement memory $3001.w,X [Reads: X Index] [Flags: NZ]
	sta $BCEFA3.l,X		; 9F A3 EF BC ; Store accumulator (long,X) $BCEFA3.l,X [Reads: Accumulator, X Index]
	dec $1802.w,X		; DE 02 18 ; Decrement memory $1802.w,X [Reads: X Index] [Flags: NZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$9F.b		; A0 9F ; Load #$9F.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $069F0C.l,X		; 9F 0C 9F 06 ; Store accumulator (long,X) $069F0C.l,X [Reads: Accumulator, X Index]
	sta $9F309D.l,X		; 9F 9D 30 9F ; Store accumulator (long,X) $9F309D.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $9E0C.w,X		; 9E 0C 9E ; Store zero to $9E0C.w,X [Reads: X Index]
	asl $9E.b		; 06 9E ; Arithmetic shift left $9E.b [Reads: Direct Page] [Flags: NCZ]
	sta $06A10C.l,X		; 9F 0C A1 06 ; Store accumulator (long,X) $06A10C.l,X [Reads: Accumulator, X Index]
	lda ($A3.b,X)		; A1 A3 ; Load accumulator ($A3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A6A4.w		; 0C A4 A6 ; Test and set bits $A6A4.w [Reads: Accumulator] [Flags: Z]
	.db $30, $77		; 30 77 ; Branch if minus to $30, $77 [Flow: branch]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	tsb $A44D.w		; 0C 4D A4 ; Test and set bits $A44D.w [Reads: Accumulator] [Flags: Z]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $069F.w		; 6D 9F 06 ; Add $069F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A4.w		; 4D A4 06 ; Exclusive OR $06A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A6.w		; 4D A6 06 ; Exclusive OR $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30A9.w		; 4D A9 30 ; Exclusive OR $30A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CAB.w		; 6D AB 0C ; Add $0CAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08AB.w		; 2D AB 08 ; Logical AND $08AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $ACAB.w,X		; 5D AB AC ; Exclusive OR accumulator with memory $ACAB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $0FEF.w		; AE EF 0F ; Load $0FEF.w into X register [Writes: X Index] [Flags: NZ]
	dec $EF01.w,X		; DE 01 EF ; Decrement memory $EF01.w,X [Reads: X Index] [Flags: NZ]
	sbc $01DD.w		; ED DD 01 ; Subtract $01DD.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $FFF5.w,Y		; 19 F5 FF ; OR accumulator with memory $FFF5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $F71E.w,X		; 1E 1E F7 ; Arithmetic shift left $F71E.w,X [Reads: X Index] [Flags: NCZ]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64E5.w		; 0E E5 64 ; Arithmetic shift left $64E5.w [Flags: NCZ]
	inc $FF.b		; E6 FF ; Increment $FF.b [Reads: Direct Page] [Flags: NZ]
	ldy $E0.b,X		; B4 E0 ; Load Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $12E3.w		; 0E E3 12 ; Arithmetic shift left $12E3.w [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $C960.w		; 1C 60 C9 ; Test and reset bits $C960.w [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit $18.b,X		; 34 18 ; Test bits $18.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $8C8C.w,X		; 7D 8C 8C ; Add $8C8C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $ED8C.w		; 8C 8C ED ; Store Y register to $ED8C.w [Reads: Y Index]
	inc $E1.b		; E6 E1 ; Increment $E1.b [Reads: Direct Page] [Flags: NZ]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit $19.b,X		; 34 19 ; Test bits $19.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	adc $0C93.w,X		; 7D 93 0C ; Add $0C93.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $0C.b,X		; 95 0C ; Store accumulator to $0C.b,X [Reads: Accumulator, X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $ED.b,X		; 95 ED ; Store accumulator to $ED.b,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $16.b,S		; E3 16 ; Subtract stack-relative $16.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	rol $16.b,X		; 36 16 ; Rotate left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189C.w,X		; 7D 9C 18 ; Add $189C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $C4EF.w,X		; 9D EF C4 ; Store accumulator to $C4EF.w,X [Reads: Accumulator, X Index]
	dec $ED01.w,X		; DE 01 ED ; Decrement memory $ED01.w,X [Reads: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	.db $42, $1A		; 42 1A ; Reserved instruction
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189F.w,X		; 7D 9F 18 ; Add $189F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($EF.b,X)		; A1 EF ; Load accumulator ($EF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $01DE.w		; CD DE 01 ; Compare $01DE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $24.b		; A4 24 ; Load $24.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $EFA40C.l,X		; 9F 0C A4 EF ; Store accumulator (long,X) $EFA40C.l,X [Reads: Accumulator, X Index]
	dec $DE.b,X		; D6 DE ; Decrement memory $DE.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rol $A8.b,X		; 36 A8 ; Rotate left $A8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $908C.w,X		; 7D 8C 90 ; Add $908C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($93.b),Y		; 91 93 ; Store accumulator ($93.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sbc $01DEE5.l		; EF E5 DE 01 ; Subtract with carry (long) $01DEE5.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EF9C.w,X		; 7D 9C EF ; Add $EF9C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $DE.b		; C4 DE ; Compare $DE.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $DEF7EF.l,X		; 9F EF F7 DE ; Store accumulator (long,X) $DEF7EF.l,X [Reads: Accumulator, X Index]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $E0.b,S		; A3 E0 ; Load accumulator (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E178.w		; ED 78 E1 ; Subtract $E178.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $14E3.w		; 0C E3 14 ; Test and set bits $14E3.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $C904.w		; 1C 04 C9 ; Test and reset bits $C904.w [Reads: Accumulator] [Flags: Z]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $24.b		; A4 24 ; Load $24.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $EFA40C.l,X		; 9F 0C A4 EF ; Store accumulator (long,X) $EFA40C.l,X [Reads: Accumulator, X Index]
	dec $DE.b,X		; D6 DE ; Decrement memory $DE.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and ($A8.b)		; 32 A8 ; AND accumulator with memory (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $EE78.w		; ED 78 EE ; Subtract $EE78.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	sbc $01DF05.l		; EF 05 DF 01 ; Subtract with carry (long) $01DF05.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01DF21.l		; EF 21 DF 01 ; Subtract with carry (long) $01DF21.l [Writes: Accumulator] [Flags: NCVZ]
	bit $B4.b		; 24 B4 ; Test bits $B4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $7D6000.l		; AF 00 60 7D ; Load long $7D6000.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $9190.w		; 8C 90 91 ; Store Y register to $9190.w [Reads: Y Index]
	sta ($8C.b,S),Y		; 93 8C ; Store accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	sta ($EF.b,S),Y		; 93 EF ; Store accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $DE.b		; E5 DE ; Subtract $DE.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($EF.b,S),Y		; 93 EF ; Store accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	mvp $01,$DF		; 44 DF 01 ; Move block positive $01,$DF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EF9C.w,X		; 7D 9C EF ; Add $EF9C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $DE.b		; C4 DE ; Compare $DE.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	stz $C4EF.w		; 9C EF C4 ; Store zero to $C4EF.w
	dec $1801.w,X		; DE 01 18 ; Decrement memory $1801.w,X [Reads: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $DEF7EF.l,X		; 9F EF F7 DE ; Store accumulator (long,X) $DEF7EF.l,X [Reads: Accumulator, X Index]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	adc $18A1.w		; 6D A1 18 ; Add $18A1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EDA3.w,X		; 7D A3 ED ; Add $EDA3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $EE		; 50 EE ; Branch if overflow clear to $50, $EE [Flow: branch]
	.db $50, $78		; 50 78 ; Branch if overflow clear to $50, $78 [Flow: branch]
	sbc $01DF51.l		; EF 51 DF 01 ; Subtract with carry (long) $01DF51.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $01DF21.l		; EF 21 DF 01 ; Subtract with carry (long) $01DF21.l [Writes: Accumulator] [Flags: NCVZ]
	bit $B4.b		; 24 B4 ; Test bits $B4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $ED08E1.l		; AF E1 08 ED ; Load long $ED08E1.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $E0		; 50 E0 ; Branch if overflow clear to $50, $E0 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$EE.b		; C9 EE ; Compare #$EE.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $308C.w,X		; 3C 8C 30 ; Test bits $308C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $18AB.w,X		; 7D AB 18 ; Add $18AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($24.b,X)		; A1 24 ; Load accumulator ($24.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $26.b		; A4 26 ; Load $26.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	mvn $0C,$AB		; 54 AB 0C ; Move block negative $0C,$AB [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $EF01DF.l		; 6F DF 01 EF ; Add with carry (long) $EF01DF.l [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $600001.l,X		; DF 01 00 60 ; Compare accumulator (long,X) $600001.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc $9095.w,X		; 7D 95 90 ; Add $9095.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($93.b),Y		; 91 93 ; Store accumulator ($93.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $91.b,X		; 95 91 ; Store accumulator to $91.b,X [Reads: Accumulator, X Index]
	stx $0C93.w		; 8E 93 0C ; Store X register to $0C93.w [Reads: X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EF98.w,X		; 7D 98 EF ; Add $EF98.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $01,$DF		; 44 DF 01 ; Move block positive $01,$DF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	sta $EF.b,X		; 95 EF ; Store accumulator to $EF.b,X [Reads: Accumulator, X Index]
	and $1801DD.l,X		; 3F DD 01 18 ; AND accumulator with memory (long,X) $1801DD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EF9C.w,X		; 7D 9C EF ; Add $EF9C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $DE.b		; C4 DE ; Compare $DE.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $DEC4EF.l,X		; 9F EF C4 DE ; Store accumulator (long,X) $DEC4EF.l,X [Reads: Accumulator, X Index]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $C918.w,X		; 9D 18 C9 ; Store accumulator to $C918.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	adc $18A1.w,X		; 7D A1 18 ; Add $18A1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189F.w		; 6D 9F 18 ; Add $189F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $18A1.w,X		; 7D A1 18 ; Add $18A1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $EF.b,S		; A3 EF ; Load accumulator (stack relative) $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $DF.b,Y		; B6 DF ; Load X register $DF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $04.b,S		; A3 04 ; Load accumulator (stack relative) $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $06B0.w,X		; 7D B0 06 ; Add $06B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $06B22A.l		; AF 2A B2 06 ; Load long $06B22A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $DFBBEF.l		; AF EF BB DF ; Load long $DFBBEF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda $B22A.w		; AD 2A B2 ; Load $B22A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy $06.b,X		; B4 06 ; Load Y register $06.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	lda $B024.w		; AD 24 B0 ; Load $B024.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $AF.b		; 06 AF ; Arithmetic shift left $AF.b [Reads: Direct Page] [Flags: NCZ]
	and ($AF.b)		; 32 AF ; AND accumulator with memory (indirect) ($AF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	mvp $EF,$16		; 44 16 EF ; Move block positive $EF,$16 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $EF01DF.l		; 6F DF 01 EF ; Add with carry (long) $EF01DF.l [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $7D3001.l,X		; DF 01 30 7D ; Compare accumulator (long,X) $7D3001.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$A8.b		; A9 A8 ; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$A8.b		; A9 A8 ; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $02DFDE.l		; EF DE DF 02 ; Subtract with carry (long) $02DFDE.l [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $DF.b		; 05 DF ; Logical OR $DF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc [$DF.b]		; E7 DF ; Subtract with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $908C.w,X		; 7D 8C 90 ; Add $908C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($93.b),Y		; 91 93 ; Store accumulator ($93.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sty $96.b,X		; 94 96 ; Store Y register $96.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $EF8C.w		; 8C 8C EF ; Store Y register to $EF8C.w [Reads: Y Index]
	sbc $DE.b		; E5 DE ; Subtract $DE.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($18.b,S),Y		; 93 18 ; Store accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $EF9C.w,X		; 7D 9C EF ; Add $EF9C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $DE.b		; C4 DE ; Compare $DE.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $C918.w,X		; [PATTERN: Memory clearing operation] 9D 18 C9 ; Store accumulator to $C918.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $C918.w		; 9C 18 C9 ; Store zero to $C918.w
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $F7EF.w		; 9C EF F7 ; Store zero to $F7EF.w
	dec $1801.w,X		; DE 01 18 ; Decrement memory $1801.w,X [Reads: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	sta $DF51EF.l,X		; 9F EF 51 DF ; Store accumulator (long,X) $DF51EF.l,X [Reads: Accumulator, X Index]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc [$DF.b]		; E7 DF ; Subtract with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jmp $30C838.l		; 5C 38 C8 30 ; Jump long to $30C838.l [Flow: jump]
	adc $18AB.w,X		; 7D AB 18 ; Add $18AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($24.b,X)		; A1 24 ; Load accumulator ($24.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $26.b		; A4 26 ; Load $26.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($08.b,X)		; A1 08 ; Load accumulator ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($60.b,X)		; A1 60 ; Load accumulator ($60.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $A7.b,S		; A3 A7 ; Load accumulator (stack relative) $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	eor $2AB0.w		; 4D B0 2A ; Exclusive OR $2AB0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $06AB.w		; 6D AB 06 ; Add $06AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06B0.w		; 4D B0 06 ; Exclusive OR $06B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B0.w,X		; 5D B0 06 ; Exclusive OR accumulator with memory $06B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06B2.w		; 4D B2 06 ; Exclusive OR $06B2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B4.w,X		; 5D B4 06 ; Exclusive OR accumulator with memory $06B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30B5.w		; 4D B5 30 ; Exclusive OR $30B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB7.w		; 6D B7 0C ; Add $0CB7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $08B7.w		; 2D B7 08 ; Logical AND $08B7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $08B7.w,X		; 7D B7 08 ; Add $08B7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $BAB8.w,X		; 5D B8 BA ; Exclusive OR accumulator with memory $BAB8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	ldy $C910.w,X		; BC 10 C9 ; Load Y register $C910.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $08BC.w		; 2D BC 08 ; Logical AND $08BC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $08BC.w,X		; 5D BC 08 ; Exclusive OR accumulator with memory $08BC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08BA.w		; 6D BA 08 ; Add $08BA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $BAB8.w		; 4D B8 BA ; Exclusive OR $BAB8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$B8.b		; C9 B8 ; Compare #$B8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	lda [$18.b],Y		; B7 18 ; Load accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $0CB7.w		; 4D B7 0C ; Exclusive OR $0CB7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06B5.w		; 2D B5 06 ; Logical AND $06B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B5.w,X		; 5D B5 06 ; Exclusive OR accumulator with memory $06B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $30B7.w		; 2D B7 30 ; Logical AND $30B7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CB8.w		; 4D B8 0C ; Exclusive OR $0CB8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB7.w		; 6D B7 0C ; Add $0CB7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $0CB5.w		; 4D B5 0C ; Exclusive OR $0CB5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06B3.w		; 2D B3 06 ; Logical AND $06B3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B3.w,X		; 5D B3 06 ; Exclusive OR accumulator with memory $06B3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $30B5.w		; 2D B5 30 ; Logical AND $30B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CB7.w		; 4D B7 0C ; Exclusive OR $0CB7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB5.w		; 6D B5 0C ; Add $0CB5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $0CB3.w		; 4D B3 0C ; Exclusive OR $0CB3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06B2.w		; 2D B2 06 ; Logical AND $06B2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($B4.b)		; B2 B4 ; Load accumulator (indirect) ($B4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	ldx $18.b,Y		; B6 18 ; Load X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda $B70C.w,Y		; B9 0C B7 ; Load $B70C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AB4E.w		; 0C 4E AB ; Test and set bits $AB4E.w [Reads: Accumulator] [Flags: Z]
	asl $3E.b		; 06 3E ; Arithmetic shift left $3E.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AB4E.w		; 0C 4E AB ; Test and set bits $AB4E.w [Reads: Accumulator] [Flags: Z]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $AB4F.w		; 0C 4F AB ; Test and set bits $AB4F.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $8C8C.w,X		; 7D 8C 8C ; Add $8C8C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $79308F.l		; 8F 8F 30 79 ; Store accumulator (long) $79308F.l [Reads: Accumulator]
	sta $8C8D.w		; 8D 8D 8C ; Store accumulator to $8C8D.w [Reads: Accumulator]
	sty $7D30.w		; 8C 30 7D ; Store Y register to $7D30.w [Reads: Y Index]
	stx $938E.w		; 8E 8E 93 ; Store X register to $938E.w [Reads: X Index]
	sta [$ED.b],Y		; 97 ED ; Store accumulator (long indexed) [$ED.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	asl $0C1E.w,X		; 1E 1E 0C ; Arithmetic shift left $0C1E.w,X [Reads: X Index] [Flags: NCZ]
	eor $0698.w,Y		; 59 98 06 ; Exclusive OR accumulator with memory $0698.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$98.b		; 49 98 ; Exclusive OR #$98.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $9659.w		; 0C 59 96 ; Test and set bits $9659.w [Reads: Accumulator] [Flags: Z]
	asl $49.b		; 06 49 ; Arithmetic shift left $49.b [Reads: Direct Page] [Flags: NCZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $0696.w		; 0C 96 06 ; Test and set bits $0696.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $0696.w		; 0C 96 06 ; Test and set bits $0696.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $0696.w		; 0C 96 06 ; Test and set bits $0696.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $945D.w		; 0C 5D 94 ; Test and set bits $945D.w [Reads: Accumulator] [Flags: Z]
	asl $94.b		; 06 94 ; Arithmetic shift left $94.b [Reads: Direct Page] [Flags: NCZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	sty $0C.b,X		; 94 0C ; Store Y register $0C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $06.b,X		; 94 06 ; Store Y register $06.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $0694.w		; 0C 94 06 ; Test and set bits $0694.w [Reads: Accumulator] [Flags: Z]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $0694.w		; 0C 94 06 ; Test and set bits $0694.w [Reads: Accumulator] [Flags: Z]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsb $8F5D.w		; 0C 5D 8F ; Test and set bits $8F5D.w [Reads: Accumulator] [Flags: Z]
	asl $8F.b		; 06 8F ; Arithmetic shift left $8F.b [Reads: Direct Page] [Flags: NCZ]
	sta $068F0C.l		; 8F 0C 8F 06 ; Store accumulator (long) $068F0C.l [Reads: Accumulator]
	sta $8F0C8F.l		; 8F 8F 0C 8F ; Store accumulator (long) $8F0C8F.l [Reads: Accumulator]
	asl $8F.b		; 06 8F ; Arithmetic shift left $8F.b [Reads: Direct Page] [Flags: NCZ]
	sta $8F4D0C.l		; 8F 0C 4D 8F ; Store accumulator (long) $8F4D0C.l [Reads: Accumulator]
	asl $8F.b		; 06 8F ; Arithmetic shift left $8F.b [Reads: Direct Page] [Flags: NCZ]
	sta $DD6DEF.l		; 8F EF 6D DD ; Store accumulator (long) $DD6DEF.l [Reads: Accumulator]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $E1E6.w		; ED E6 E1 ; Subtract $E1E6.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C90C.w,Y		; 19 0C C9 ; OR accumulator with memory $C90C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $937D.w		; 0C 7D 93 ; Test and set bits $937D.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $C90C.w		; 9C 0C C9 ; Store zero to $C90C.w
	sta $A648.w,X		; 9D 48 A6 ; Store accumulator to $A648.w,X [Reads: Accumulator, X Index]
	tsb $9BC9.w		; 0C C9 9B ; Test and set bits $9BC9.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp #$96.b		; C9 96 ; Compare #$96.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $94C90C.l,X		; 9F 0C C9 94 ; Store accumulator (long,X) $94C90C.l,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $C90C.w,X		; 9D 0C C9 ; Store accumulator to $C90C.w,X [Reads: Accumulator, X Index]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsb $95C9.w		; 0C C9 95 ; Test and set bits $95C9.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $C90C.w,X		; 9E 0C C9 ; Store zero to $C90C.w,X [Reads: X Index]
	sta [$48.b],Y		; 97 48 ; Store accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $E1C8ED.l,X		; 9F ED C8 E1 ; Store accumulator (long,X) $E1C8ED.l,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $13.b,S		; E3 13 ; Subtract stack-relative $13.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit $0C18.w,X		; 3C 18 0C ; Test bits $0C18.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $C89C.w		; 4D 9C C8 ; Exclusive OR $C89C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0698.w		; 6D 98 06 ; Add $0698.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $069C.w		; 4D 9C 06 ; Exclusive OR $069C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $069C.w,X		; 5D 9C 06 ; Exclusive OR accumulator with memory $069C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $069D.w		; 4D 9D 06 ; Exclusive OR $069D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $069F.w,X		; 5D 9F 06 ; Exclusive OR accumulator with memory $069F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30A1.w		; 4D A1 30 ; Exclusive OR $30A1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CA2.w		; 6D A2 0C ; Add $0CA2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $A22D.w		; 0C 2D A2 ; Test and set bits $A22D.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A4A2.w,X		; 5D A2 A4 ; Exclusive OR accumulator with memory $A4A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	adc $10A7.w		; 6D A7 10 ; Add $10A7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$08.b]		; A7 08 ; Load accumulator (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $08A7.w,X		; 5D A7 08 ; Exclusive OR accumulator with memory $08A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08A6.w		; 6D A6 08 ; Add $08A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $A6A4.w		; 4D A4 A6 ; Exclusive OR $A6A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc $18A2.w		; 6D A2 18 ; Add $18A2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $EFA2.w		; 4D A2 EF ; Exclusive OR $EFA2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $EF01.w,X		; DD 01 EF ; Compare accumulator $EF01.w,X [Reads: X Index] [Flags: NCZ]
	ror $01DE.w,X		; 7E DE 01 ; Rotate right $01DE.w,X [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $E0.b		; 06 E0 ; Arithmetic shift left $E0.b [Reads: Direct Page] [Flags: NCZ]
	asl $E3.b,X		; 16 E3 ; Arithmetic shift left $E3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($3C.b)		; 12 3C ; OR accumulator with memory (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	sta $9F01DE.l,X		; 9F DE 01 9F ; Store accumulator (long,X) $9F01DE.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $9F309D.l,X		; 9F 9D 30 9F ; Store accumulator (long,X) $9F309D.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0CA0.w,Y		; 79 A0 0C ; Add $0CA0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $069F0C.l,X		; 9F 0C 9F 06 ; Store accumulator (long,X) $069F0C.l,X [Reads: Accumulator, X Index]
	sta $A230A0.l,X		; 9F A0 30 A2 ; Store accumulator (long,X) $A230A0.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $9E0C.w,X		; 9E 0C 9E ; Store zero to $9E0C.w,X [Reads: X Index]
	asl $9E.b		; 06 9E ; Arithmetic shift left $9E.b [Reads: Direct Page] [Flags: NCZ]
	sta $06A10C.l,X		; 9F 0C A1 06 ; Store accumulator (long,X) $06A10C.l,X [Reads: Accumulator, X Index]
	lda ($A3.b,X)		; A1 A3 ; Load accumulator ($A3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A6A4.w		; 0C A4 A6 ; Test and set bits $A6A4.w [Reads: Accumulator] [Flags: Z]
	.db $30, $77		; 30 77 ; Branch if minus to $30, $77 [Flow: branch]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $0AE0.w		; 0C E0 0A ; Test and set bits $0AE0.w [Reads: Accumulator] [Flags: Z]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $4D0C.w,Y		; 19 0C 4D ; OR accumulator with memory $4D0C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $C8.b		; A4 C8 ; Load $C8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $069F.w		; 6D 9F 06 ; Add $069F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A4.w		; 4D A4 06 ; Exclusive OR $06A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A6.w		; 4D A6 06 ; Exclusive OR $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EFA9.w		; 4D A9 EF ; Exclusive OR $EFA9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $DD.b		; C5 DD ; Compare $DD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $06A9.w		; 2D A9 06 ; Logical AND $06A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A9.w,X		; 5D A9 06 ; Exclusive OR accumulator with memory $06A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $30AB.w		; 2D AB 30 ; Logical AND $30AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CAC.w		; 4D AC 0C ; Exclusive OR $0CAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CAB.w		; 6D AB 0C ; Add $0CAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $0CA9.w		; 4D A9 0C ; Exclusive OR $0CA9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06A7.w		; 2D A7 06 ; Logical AND $06A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A7.w,X		; 5D A7 06 ; Exclusive OR accumulator with memory $06A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $30A9.w		; 2D A9 30 ; Logical AND $30A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0CAB.w		; 4D AB 0C ; Exclusive OR $0CAB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CA9.w		; 6D A9 0C ; Add $0CA9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $0CA7.w		; 4D A7 0C ; Exclusive OR $0CA7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $06A6.w		; 2D A6 06 ; Logical AND $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AB0C.w		; AD 0C AB ; Load $AB0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	sta $4E0C9F.l,X		; 9F 9F 0C 4E ; Store accumulator (long,X) $4E0C9F.l,X [Reads: Accumulator, X Index]
	sta $9F9F06.l,X		; 9F 06 9F 9F ; Store accumulator (long,X) $9F9F06.l,X [Reads: Accumulator, X Index]
	tsb $069F.w		; 0C 9F 06 ; Test and set bits $069F.w [Reads: Accumulator] [Flags: Z]
	eor $0C9F9F.l		; 4F 9F 9F 0C ; Exclusive OR accumulator with memory (long) $0C9F9F.l [Writes: Accumulator] [Flags: NZ]
	sta $0BE09F.l,X		; 9F 9F E0 0B ; Store accumulator (long,X) $0BE09F.l,X [Reads: Accumulator, X Index]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	mvp $EF,$14		; 44 14 EF ; Move block positive $EF,$14 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $01E0.w,Y		; 19 E0 01 ; OR accumulator with memory $01E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $18B7.w		; 6D B7 18 ; Add $18B7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $ABB0.w,X		; 7D B0 AB ; Add $ABB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $AB		; B0 AB ; Branch if carry set to $B0, $AB [Flow: branch]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: NZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	adc $E6B0.w		; 6D B0 E6 ; Add $E6B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	mvn $54,$F0		; 54 F0 54 ; Move block negative $54,$F0 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inc $18.b		; E6 18 ; Increment $18.b [Reads: Direct Page] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E111E0.l,X		; FF E0 11 E1 ; Subtract with carry (long,X) $E111E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	asl $181E.w,X		; 1E 1E 18 ; Arithmetic shift left $181E.w,X [Reads: X Index] [Flags: NCZ]
	eor $0898.w,X		; 5D 98 08 ; Exclusive OR accumulator with memory $0898.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0898.w,X		; 5D 98 08 ; Exclusive OR accumulator with memory $0898.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $0896.w,X		; 5D 96 08 ; Exclusive OR accumulator with memory $0896.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	eor $0896.w,X		; 5D 96 08 ; Exclusive OR accumulator with memory $0896.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	eor $0894.w,X		; 5D 94 08 ; Exclusive OR accumulator with memory $0894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $0894.w,X		; 5D 94 08 ; Exclusive OR accumulator with memory $0894.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	eor $0892.w,X		; 5D 92 08 ; Exclusive OR accumulator with memory $0892.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $921892.l,X		; 5F 92 18 92 ; Exclusive OR accumulator with memory (long,X) $921892.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	sta ($18.b)		; 92 18 ; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	sta $8D08.w		; 8D 08 8D ; Store accumulator to $8D08.w [Reads: Accumulator]
	sta $608D.w		; 8D 8D 60 ; Store accumulator to $608D.w [Reads: Accumulator]
	sty $C818.w		; 8C 18 C8 ; Store Y register to $C818.w [Reads: Y Index]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($0E.b,X)		; E1 0E ; Subtract with carry ($0E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $01E0.w,Y		; 19 E0 01 ; OR accumulator with memory $01E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	lda [$A5.b],Y		; B7 A5 ; Load accumulator (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $04E003.l		; EF 03 E0 04 ; Subtract with carry (long) $04E003.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $13.b,S		; E3 13 ; Subtract stack-relative $13.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $A84D.w		; 0C 4D A8 ; Test and set bits $A84D.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $06A4.w		; 6D A4 06 ; Add $06A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A8.w		; 4D A8 06 ; Exclusive OR $06A8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A9.w		; 4D A9 06 ; Exclusive OR $06A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06AB.w,X		; 5D AB 06 ; Exclusive OR accumulator with memory $06AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $60AD.w		; 4D AD 60 ; Exclusive OR $60AD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CAE.w		; 6D AE 0C ; Add $0CAE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $C8A7.w		; 4D A7 C8 ; Exclusive OR $C8A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $06A4.w		; 6D A4 06 ; Add $06A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A7.w		; 4D A7 06 ; Exclusive OR $06A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A7.w,X		; 5D A7 06 ; Exclusive OR accumulator with memory $06A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A9.w		; 4D A9 06 ; Exclusive OR $06A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06AB.w,X		; 5D AB 06 ; Exclusive OR accumulator with memory $06AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $60AC.w		; 4D AC 60 ; Exclusive OR $60AC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $30B0.w		; 6D B0 30 ; Add $30B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $B5B4.w,X		; 7D B4 B5 ; Add $B5B4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $18B4.w		; 6D B4 18 ; Add $18B4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $09E0.w		; 0C E0 09 ; Test and set bits $09E0.w [Reads: Accumulator] [Flags: Z]
	sbc $13.b,S		; E3 13 ; Subtract stack-relative $13.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $C8AB.w		; 4D AB C8 ; Exclusive OR $C8AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $06A6.w		; 6D A6 06 ; Add $06A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A8.w		; 4D A8 06 ; Exclusive OR $06A8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A9.w		; 4D A9 06 ; Exclusive OR $06A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06AB.w,X		; 5D AB 06 ; Exclusive OR accumulator with memory $06AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $60AD.w		; 4D AD 60 ; Exclusive OR $60AD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0CB0.w		; 6D B0 0C ; Add $0CB0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $C8A7.w		; 4D A7 C8 ; Exclusive OR $C8A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $06A4.w		; 6D A4 06 ; Add $06A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A7.w		; 4D A7 06 ; Exclusive OR $06A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A7.w,X		; 5D A7 06 ; Exclusive OR accumulator with memory $06A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A9.w		; 4D A9 06 ; Exclusive OR $06A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06AB.w,X		; 5D AB 06 ; Exclusive OR accumulator with memory $06AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $30AD.w		; 4D AD 30 ; Exclusive OR $30AD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $ACB0.w,X		; 7D B0 AC ; Add $ACB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $18AB.w		; 6D AB 18 ; Add $18AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($0E.b,X)		; E1 0E ; Subtract with carry ($0E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	mvp $EF,$14		; 44 14 EF ; Move block positive $EF,$14 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor [$E0.b]		; 47 E0 ; Exclusive OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9FA4.w,X		; 7D A4 9F ; Add $9FA4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $9F.b		; A4 9F ; Load $9F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	ldy $98.b		; A4 98 ; Load $98.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E0FA.w		; ED FA E0 ; Subtract $E0FA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($04.b,X)		; E1 04 ; Subtract with carry ($04.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit $301E.w,X		; 3C 1E 30 ; Test bits $301E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $8C8C.w		; 6D 8C 8C ; Add $8C8C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	.db $90, $8D		; 90 8D ; Branch if carry clear to $90, $8D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $C818.w		; 8C 18 C8 ; Store Y register to $C818.w [Reads: Y Index]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $10B0.w		; 6D B0 10 ; Add $10B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $08B0.w		; 2D B0 08 ; Logical AND $08B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $08B0.w,X		; 5D B0 08 ; Exclusive OR accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08AE.w		; 6D AE 08 ; Add $08AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $AEAC.w		; 4D AC AE ; Exclusive OR $AEAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $6D30.w		; AC 30 6D ; Load $6D30.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $00AB.w		; 4D AB 00 ; Exclusive OR $00AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A927.w		; 0C 27 A9 ; Test and set bits $A927.w [Reads: Accumulator] [Flags: Z]
	asl $57.b		; 06 57 ; Arithmetic shift left $57.b [Reads: Direct Page] [Flags: NCZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and [$AB.b]		; 27 AB ; AND accumulator with memory (long) [$AB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	ldy $690C.w		; AC 0C 69 ; Load $690C.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $A949.w		; 0C 49 A9 ; Test and set bits $A949.w [Reads: Accumulator] [Flags: Z]
	tsb $A727.w		; 0C 27 A7 ; Test and set bits $A727.w [Reads: Accumulator] [Flags: Z]
	asl $57.b		; 06 57 ; Arithmetic shift left $57.b [Reads: Direct Page] [Flags: NCZ]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$A9.b]		; 27 A9 ; AND accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $A969.w		; 0C 69 A9 ; Test and set bits $A969.w [Reads: Accumulator] [Flags: Z]
	tsb $A749.w		; 0C 49 A7 ; Test and set bits $A749.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AB0C.w		; AD 0C AB ; Load $AB0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: NCZ]
	sta $4E0C9F.l,X		; 9F 9F 0C 4E ; Store accumulator (long,X) $4E0C9F.l,X [Reads: Accumulator, X Index]
	sta $9F3E06.l,X		; 9F 06 3E 9F ; Store accumulator (long,X) $9F3E06.l,X [Reads: Accumulator, X Index]
	sta $9F4E0C.l,X		; 9F 0C 4E 9F ; Store accumulator (long,X) $9F4E0C.l,X [Reads: Accumulator, X Index]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: NCZ]
	sta $4F0C9F.l,X		; 9F 9F 0C 4F ; Store accumulator (long,X) $4F0C9F.l,X [Reads: Accumulator, X Index]
	sta $0C009F.l,X		; 9F 9F 00 0C ; Store accumulator (long,X) $0C009F.l,X [Reads: Accumulator, X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $0C.b,X		; 95 0C ; Store accumulator to $0C.b,X [Reads: Accumulator, X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tsb $A027.w		; 0C 27 A0 ; Test and set bits $A027.w [Reads: Accumulator] [Flags: Z]
	asl $57.b		; 06 57 ; Arithmetic shift left $57.b [Reads: Direct Page] [Flags: NCZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	and [$A2.b]		; 27 A2 ; AND accumulator with memory (long) [$A2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc #$A2.b		; 69 A2 ; Add #$A2.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsb $A049.w		; 0C 49 A0 ; Test and set bits $A049.w [Reads: Accumulator] [Flags: Z]
	tsb $9F27.w		; 0C 27 9F ; Test and set bits $9F27.w [Reads: Accumulator] [Flags: Z]
	asl $57.b		; 06 57 ; Arithmetic shift left $57.b [Reads: Direct Page] [Flags: NCZ]
	sta $A02706.l,X		; 9F 06 27 A0 ; Store accumulator (long,X) $A02706.l,X [Reads: Accumulator, X Index]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	adc #$A0.b		; 69 A0 ; Add #$A0.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsb $9F49.w		; 0C 49 9F ; Test and set bits $9F49.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0699.w,Y		; 59 99 06 ; Exclusive OR accumulator with memory $0699.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$99.b		; 49 99 ; Exclusive OR #$99.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $990C.w,Y		; 99 0C 99 ; Store accumulator to $990C.w,Y [Reads: Y Index, Accumulator]
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: NCZ]
	sta $990C.w,Y		; 99 0C 99 ; Store accumulator to $990C.w,Y [Reads: Y Index, Accumulator]
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: NCZ]
	sta $990C.w,Y		; 99 0C 99 ; Store accumulator to $990C.w,Y [Reads: Y Index, Accumulator]
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: NCZ]
	sta $590C.w,Y		; 99 0C 59 ; Store accumulator to $590C.w,Y [Reads: Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $49.b		; 06 49 ; Arithmetic shift left $49.b [Reads: Direct Page] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0698.w		; 0C 98 06 ; Test and set bits $0698.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $9A5D.w		; 0C 5D 9A ; Test and set bits $9A5D.w [Reads: Accumulator] [Flags: Z]
	asl $9A.b		; 06 9A ; Arithmetic shift left $9A.b [Reads: Direct Page] [Flags: NCZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $069A.w		; 0C 9A 06 ; Test and set bits $069A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $069A.w		; 0C 9A 06 ; Test and set bits $069A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $069A.w		; 0C 9A 06 ; Test and set bits $069A.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $935D.w		; 0C 5D 93 ; Test and set bits $935D.w [Reads: Accumulator] [Flags: Z]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: NCZ]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($06.b,S),Y		; 93 06 ; Store accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $954D.w		; 0C 4D 95 ; Test and set bits $954D.w [Reads: Accumulator] [Flags: Z]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $0CC8.w		; 0C C8 0C ; Test and set bits $0CC8.w [Reads: Accumulator] [Flags: Z]
	and $08AB.w		; 2D AB 08 ; Logical AND $08AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $ACAB.w,X		; 5D AB AC ; Exclusive OR accumulator with memory $ACAB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $6D30.w		; AE 30 6D ; Load $6D30.w into X register [Writes: X Index] [Flags: NZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $08B0.w		; 2D B0 08 ; Logical AND $08B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $08B0.w,X		; 5D B0 08 ; Exclusive OR accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08AE.w		; 6D AE 08 ; Add $08AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $AEAC.w		; 4D AC AE ; Exclusive OR $AEAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $6D30.w		; AC 30 6D ; Load $6D30.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $00AB.w		; 4D AB 00 ; Exclusive OR $00AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A62B.w		; 0C 2B A6 ; Test and set bits $A62B.w [Reads: Accumulator] [Flags: Z]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AB0C.w		; AD 0C AB ; Load $AB0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	sta $4E0C9F.l,X		; 9F 9F 0C 4E ; Store accumulator (long,X) $4E0C9F.l,X [Reads: Accumulator, X Index]
	sta $9F9F06.l,X		; 9F 06 9F 9F ; Store accumulator (long,X) $9F9F06.l,X [Reads: Accumulator, X Index]
	tsb $069F.w		; 0C 9F 06 ; Test and set bits $069F.w [Reads: Accumulator] [Flags: Z]
	eor $0C9F9F.l		; 4F 9F 9F 0C ; Exclusive OR accumulator with memory (long) $0C9F9F.l [Writes: Accumulator] [Flags: NZ]
	sta $009F08.l,X		; 9F 08 9F 00 ; Store accumulator (long,X) $009F08.l,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	lda ($0C.b,S),Y		; B3 0C ; Load accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C9.b)		; B2 C9 ; Load accumulator (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $AF		; 30 AF ; Branch if minus to $30, $AF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $B018.w		; AC 18 B0 ; Load $B018.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $C9AF.w		; 0C AF C9 ; Test and set bits $C9AF.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $B018.w		; AC 18 B0 ; Load $B018.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $C9AF.w		; 0C AF C9 ; Test and set bits $C9AF.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $AB0C.w		; AC 0C AB ; Load $AB0C.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsb $924F.w		; 0C 4F 92 ; Test and set bits $924F.w [Reads: Accumulator] [Flags: Z]
	asl $92.b		; 06 92 ; Arithmetic shift left $92.b [Reads: Direct Page] [Flags: NCZ]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Direct Page, Accumulator]
	sta ($06.b)		; 92 06 ; Store accumulator (indirect) ($06.b) [Reads: Direct Page, Accumulator]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	tsb $0692.w		; 0C 92 06 ; Test and set bits $0692.w [Reads: Accumulator] [Flags: Z]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	tsb $0692.w		; 0C 92 06 ; Test and set bits $0692.w [Reads: Accumulator] [Flags: Z]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	tsb $934D.w		; 0C 4D 93 ; Test and set bits $934D.w [Reads: Accumulator] [Flags: Z]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: NCZ]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($06.b,S),Y		; 93 06 ; Store accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $0693.w		; 0C 93 06 ; Test and set bits $0693.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $06A9.w,X		; 5D A9 06 ; Exclusive OR accumulator with memory $06A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A9A9.w		; 4D A9 A9 ; Exclusive OR $A9A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $06A9.w		; 0C A9 06 ; Test and set bits $06A9.w [Reads: Accumulator] [Flags: Z]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $06A9.w		; 0C A9 06 ; Test and set bits $06A9.w [Reads: Accumulator] [Flags: Z]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $06A9.w		; 0C A9 06 ; Test and set bits $06A9.w [Reads: Accumulator] [Flags: Z]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stz $9E06.w,X		; 9E 06 9E ; Store zero to $9E06.w,X [Reads: X Index]
	sta $A16D30.l,X		; 9F 30 6D A1 ; Store accumulator (long,X) $A16D30.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $06.b,S		; A3 06 ; Load accumulator (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $9797.w		; 4D 97 97 ; Exclusive OR $9797.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $974E.w		; 0C 4E 97 ; Test and set bits $974E.w [Reads: Accumulator] [Flags: Z]
	asl $97.b		; 06 97 ; Arithmetic shift left $97.b [Reads: Direct Page] [Flags: NCZ]
	sta [$0C.b],Y		; 97 0C ; Store accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$06.b],Y		; 97 06 ; Store accumulator (long indexed) [$06.b],Y [Reads: Direct Page, Y Index, Accumulator]
	eor $0C9797.l		; 4F 97 97 0C ; Exclusive OR accumulator with memory (long) $0C9797.l [Writes: Accumulator] [Flags: NZ]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $06C812.l,X		; 9F 12 C8 06 ; Store accumulator (long,X) $06C812.l,X [Reads: Accumulator, X Index]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora ($C8.b)		; 12 C8 ; OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $A0.b		; 06 A0 ; Arithmetic shift left $A0.b [Reads: Direct Page] [Flags: NCZ]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda [$A0.b]		; A7 A0 ; Load accumulator (long) [$A0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $A448.w,X		; [PATTERN: Memory clearing operation] 9E 48 A4 ; Store zero to $A448.w,X [Reads: X Index]
	.db $30, $A3		; 30 A3 ; Branch if minus to $30, $A3 [Flow: branch]
	sta $C91800.l,X		; 9F 00 18 C9 ; Store accumulator (long,X) $C91800.l,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $C918.w		; 9C 18 C9 ; Store zero to $C918.w
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $1800.w,X		; 9D 00 18 ; Store accumulator to $1800.w,X [Reads: Accumulator, X Index]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit $A6.b		; 24 A6 ; Test bits $A6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $A4.b		; 06 A4 ; Arithmetic shift left $A4.b [Reads: Direct Page] [Flags: NCZ]
	rol $A8.b,X		; 36 A8 ; Rotate left $A8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $A6.b		; 24 A6 ; Test bits $A6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $24A4.w		; 0C A4 24 ; Test and set bits $24A4.w [Reads: Accumulator] [Flags: Z]
	sta $00A40C.l,X		; 9F 0C A4 00 ; Store accumulator (long,X) $00A40C.l,X [Reads: Accumulator, X Index]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	adc $0C93.w,X		; 7D 93 0C ; Add $0C93.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta [$0C.b],Y		; 97 0C ; Store accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $0C.b,X		; 95 0C ; Store accumulator to $0C.b,X [Reads: Accumulator, X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $189F.w,X		; 7D 9F 18 ; Add $189F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $48C918.l,X		; 9F 18 C9 48 ; Store accumulator (long,X) $48C918.l,X [Reads: Accumulator, X Index]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	bit $A6.b		; 24 A6 ; Test bits $A6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: NCZ]
	rol $A8.b,X		; 36 A8 ; Rotate left $A8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $AD.b		; 24 AD ; Test bits $AD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $18A8.w		; 0C A8 18 ; Test and set bits $18A8.w [Reads: Accumulator] [Flags: Z]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	bit $A8.b		; 24 A8 ; Test bits $A8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: NCZ]
	rol $A6.b,X		; 36 A6 ; Rotate left $A6.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $B2.b		; 24 B2 ; Test bits $B2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $18B0.w		; 0C B0 18 ; Test and set bits $18B0.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	bit $A6.b		; 24 A6 ; Test bits $A6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $AB.b		; 06 AB ; Arithmetic shift left $AB.b [Reads: Direct Page] [Flags: NCZ]
	rol $A8.b,X		; 36 A8 ; Rotate left $A8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $AD.b		; 24 AD ; Test bits $AD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: NCZ]
	ora ($AD.b)		; 12 AD ; OR accumulator with memory (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $08AF.w		; 0C AF 08 ; Test and set bits $08AF.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	tsb $54C9.w		; 0C C9 54 ; Test and set bits $54C9.w [Reads: Accumulator] [Flags: Z]
	sta [$0C.b],Y		; 97 0C ; Store accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $0C.b,X		; 95 0C ; Store accumulator to $0C.b,X [Reads: Accumulator, X Index]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	bit $A6.b		; 24 A6 ; Test bits $A6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: NCZ]
	rol $A8.b,X		; 36 A8 ; Rotate left $A8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $AD.b		; 24 AD ; Test bits $AD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $18A8.w		; 0C A8 18 ; Test and set bits $18A8.w [Reads: Accumulator] [Flags: Z]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $06B0.w,X		; 7D B0 06 ; Add $06B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $06B22A.l		; AF 2A B2 06 ; Load long $06B22A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $06B02A.l		; AF 2A B0 06 ; Load long $06B02A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $06AB2A.l		; AF 2A AB 06 ; Load long $06AB2A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $A406.w		; AD 06 A4 ; Load $A406.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AD08.w		; AD 08 AD ; Load $AD08.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	asl $AF.b		; 06 AF ; Arithmetic shift left $AF.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda $06B22A.l		; AF 2A B2 06 ; Load long $06B22A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $B02A00.l		; AF 00 2A B0 ; Load long $B02A00.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $AD.b		; 06 AD ; Arithmetic shift left $AD.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $B0AF.w		; AD AF B0 ; Load $B0AF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy $06.b,X		; B4 06 ; Load Y register $06.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	lda $B024.w		; AD 24 B0 ; Load $B024.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $AF.b		; 06 AF ; Arithmetic shift left $AF.b [Reads: Direct Page] [Flags: NCZ]
	rol $AF.b,X		; 36 AF ; Rotate left $AF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda $06AB2A.l		; AF 2A AB 06 ; Load long $06AB2A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $A406.w		; AD 06 A4 ; Load $A406.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AD08.w		; AD 08 AD ; Load $AD08.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	asl $AF.b		; 06 AF ; Arithmetic shift left $AF.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda $06B22A.l		; AF 2A B2 06 ; Load long $06B22A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $C91800.l		; AF 00 18 C9 ; Load long $C91800.l into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$A9.b]		; A7 A9 ; Load accumulator (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $A95D.w		; 0C 5D A9 ; Test and set bits $A95D.w [Reads: Accumulator] [Flags: Z]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $06A9.w		; 0C A9 06 ; Test and set bits $06A9.w [Reads: Accumulator] [Flags: Z]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $06A9.w		; 0C A9 06 ; Test and set bits $06A9.w [Reads: Accumulator] [Flags: Z]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $2AB0.w		; 4D B0 2A ; Exclusive OR $2AB0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $06AB.w		; 6D AB 06 ; Add $06AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06B0.w		; 4D B0 06 ; Exclusive OR $06B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B0.w,X		; 5D B0 06 ; Exclusive OR accumulator with memory $06B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06B2.w		; 4D B2 06 ; Exclusive OR $06B2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B4.w,X		; 5D B4 06 ; Exclusive OR accumulator with memory $06B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $60B5.w		; 4D B5 60 ; Exclusive OR $60B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18B7.w		; 6D B7 18 ; Add $18B7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $2AB0.w		; 4D B0 2A ; Exclusive OR $2AB0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $06AB.w		; 6D AB 06 ; Add $06AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06B0.w		; 4D B0 06 ; Exclusive OR $06B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B0.w,X		; 5D B0 06 ; Exclusive OR accumulator with memory $06B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06B2.w		; 4D B2 06 ; Exclusive OR $06B2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06B4.w,X		; 5D B4 06 ; Exclusive OR accumulator with memory $06B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $00B5.w		; 4D B5 00 ; Exclusive OR $00B5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $2AA4.w		; 4D A4 2A ; Exclusive OR $2AA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $069F.w		; 6D 9F 06 ; Add $069F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $06A4.w		; 4D A4 06 ; Exclusive OR $06A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A4.w,X		; 5D A4 06 ; Exclusive OR accumulator with memory $06A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $06A6.w		; 4D A6 06 ; Exclusive OR $06A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $06A8.w,X		; 5D A8 06 ; Exclusive OR accumulator with memory $06A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $60A9.w		; 4D A9 60 ; Exclusive OR $60A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $00AB.w		; 6D AB 00 ; Add $00AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	and #$90.b		; 29 90 ; Logical AND #$90.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$D0.b		; 29 D0 ; Logical AND #$D0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$50.b		; 29 50 ; Logical AND #$50.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$60.b		; 29 60 ; Logical AND #$60.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy #$29.b		; A0 29 ; Load #$29.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $572A.w		; 20 2A 57 ; Jump to subroutine at $572A.w [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy $2A.b		; A4 2A ; Load $2A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc #$2A.b		; E9 2A ; Subtract #$2A.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cop $2B.b		; 02 2B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($2B.b)		; 32 2B ; AND accumulator with memory (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ror $2B.b		; 66 2B ; Rotate right $2B.b [Reads: Direct Page] [Flags: NCZ]
	.db $90, $2B		; 90 2B ; Branch if carry clear to $90, $2B [Flow: branch]
	lda $00002B.l		; AF 2B 00 00 ; Load long $00002B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$2B.b		; E9 2B ; Subtract #$2B.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $2C.b		; 14 2C ; Test and reset bits $2C.b [Reads: Accumulator] [Flags: Z]
	eor ($2C.b,X)		; 41 2C ; Exclusive OR accumulator with memory ($2C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $2C752C.l,X		; 5F 2C 75 2C ; Exclusive OR accumulator with memory (long,X) $2C752C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	bit $2CB5.w		; 2C B5 2C ; Test bits $2CB5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cmp $2C.b,X		; D5 2C ; Compare accumulator $2C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inc $2C.b,X		; F6 2C ; Increment memory $2C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	bit $002D.w,X		; 3C 2D 00 ; Test bits $002D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2D98.w		; 2D 98 2D ; Logical AND $2D98.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$2D.b		; A2 2D ; Load #$2D.b into X register [Writes: X Index] [Flags: NZ]
	lda [$2D.b]		; A7 2D ; Load accumulator (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	and $0000.w		; 2D 00 00 ; Logical AND $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $BE2D.w,Y		; B9 2D BE ; Load $BE2D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $2DC2.w		; 2D C2 2D ; Logical AND $2DC2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($2D.b)		; D2 2D ; Compare accumulator (indirect) ($2D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$2D.b		; E9 2D ; Subtract #$2D.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora [$2E.b],Y		; 17 2E ; OR accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $272E.w,X		; 1E 2E 27 ; Arithmetic shift left $272E.w,X [Reads: X Index] [Flags: NCZ]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: NCZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	rol $2E49.w		; 2E 49 2E ; Rotate left $2E49.w [Flags: NCZ]
	eor [$2E.b],Y		; 57 2E ; Exclusive OR accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rol $2E9A.w		; 2E 9A 2E ; Rotate left $2E9A.w [Flags: NCZ]
	cmp $EB2E.w		; CD 2E EB ; Compare $EB2E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	rol $2F1A.w		; 2E 1A 2F ; Rotate left $2F1A.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $2F.b		; 64 2F ; Store zero to $2F.b
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and $FE2FC6.l		; 2F C6 2F FE ; AND accumulator with memory (long) $FE2FC6.l [Writes: Accumulator] [Flags: NZ]
	and $AB3080.l		; 2F 80 30 AB ; AND accumulator with memory (long) $AB3080.l [Writes: Accumulator] [Flags: NZ]
	.db $30, $1A		; 30 1A ; Branch if minus to $30, $1A [Flow: branch]
	and ($53.b),Y		; 31 53 ; AND accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($73.b),Y		; 31 73 ; AND accumulator with memory ($73.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($86.b),Y		; 31 86 ; AND accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($A5.b),Y		; 31 A5 ; AND accumulator with memory ($A5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($CB.b),Y		; 31 CB ; AND accumulator with memory ($CB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($E8.b),Y		; 31 E8 ; AND accumulator with memory ($E8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($F9.b),Y		; 31 F9 ; AND accumulator with memory ($F9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($07.b),Y		; 31 07 ; AND accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($1C.b)		; 32 1C ; AND accumulator with memory (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($47.b)		; 32 47 ; AND accumulator with memory (indirect) ($47.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($5C.b)		; 32 5C ; AND accumulator with memory (indirect) ($5C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($92.b)		; 32 92 ; AND accumulator with memory (indirect) ($92.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($E4.b)		; 32 E4 ; AND accumulator with memory (indirect) ($E4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($0B.b)		; 32 0B ; AND accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($37.b,S),Y		; 33 37 ; AND accumulator (stack relative indirect indexed) ($37.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($53.b,S),Y		; 33 53 ; AND accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($5D.b,S),Y		; 33 5D ; AND accumulator (stack relative indirect indexed) ($5D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($8B.b,S),Y		; 33 8B ; AND accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($B3.b,S),Y		; 33 B3 ; AND accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($E2.b,S),Y		; 33 E2 ; AND accumulator (stack relative indirect indexed) ($E2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($FF.b,S),Y		; 33 FF ; AND accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($10.b,S),Y		; 33 10 ; AND accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $42.b,X		; 34 42 ; Test bits $42.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $72.b,X		; 34 72 ; Test bits $72.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $AE.b,X		; 34 AE ; Test bits $AE.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $B4.b,X		; 34 B4 ; Test bits $B4.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $BC.b,X		; 34 BC ; Test bits $BC.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $C2.b,X		; 34 C2 ; Test bits $C2.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $CC.b,X		; 34 CC ; Test bits $CC.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $D9.b,X		; 34 D9 ; Test bits $D9.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $E5.b,X		; 34 E5 ; Test bits $E5.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $E5.b,X		; 34 E5 ; Test bits $E5.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $E702.w,X		; 1E 02 E7 ; Arithmetic shift left $E702.w,X [Reads: X Index] [Flags: NCZ]
	ora $E8.b,X		; 15 E8 ; OR accumulator with memory $E8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $0134F5.l		; EF F5 34 01 ; Subtract with carry (long) $0134F5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013525.l		; EF 25 35 01 ; Subtract with carry (long) $013525.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30AD.w,X		; 3D AD 30 ; AND accumulator with memory $30AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $10B5.w		; 6D B5 10 ; Add $10B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08AD.w,X		; 3D AD 08 ; AND accumulator with memory $08AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $AF18.w		; AD 18 AF ; Load $AF18.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $EEB7.w,X		; 5D B7 EE ; Exclusive OR accumulator with memory $EEB7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $C860.w,X		; 3C 60 C8 ; Test bits $C860.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $F5EF.w		; 0C EF F5 ; Test and set bits $F5EF.w [Reads: Accumulator] [Flags: Z]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sbc $013525.l		; EF 25 35 01 ; Subtract with carry (long) $013525.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30AD.w,X		; 3D AD 30 ; AND accumulator with memory $30AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B5.w		; 6D B5 18 ; Add $18B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $AFAD.w,X		; 3D AD AF ; AND accumulator with memory $AFAD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $EEB7.w,X		; 5D B7 EE ; Exclusive OR accumulator with memory $EEB7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $C860.w,X		; 3C 60 C8 ; Test bits $C860.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3DC.w		; ED DC E3 ; Subtract $E3DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $06E1.w		; 1C E1 06 ; Test and reset bits $06E1.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $9798.w,X		; 7D 98 97 ; Add $9798.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b,X		; 95 90 ; Store accumulator to $90.b,X [Reads: Accumulator, X Index]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($97.b,S),Y		; 93 97 ; Store accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$95.b],Y		; 97 95 ; Store accumulator (long indexed) [$95.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	sta ($48.b),Y		; 91 48 ; Store accumulator ($48.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($10.b,S),Y		; 93 10 ; Store accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sty $8C08.w		; 8C 08 8C ; Store Y register to $8C08.w [Reads: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sty $8C06.w		; 8C 06 8C ; Store Y register to $8C06.w [Reads: Y Index]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $013557.l		; EF 57 35 01 ; Subtract with carry (long) $013557.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013587.l		; EF 87 35 01 ; Subtract with carry (long) $013587.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30A4.w,X		; 3D A4 30 ; AND accumulator with memory $30A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18AD.w		; 6D AD 18 ; Add $18AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $A6A4.w,X		; 3D A4 A6 ; AND accumulator with memory $A6A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $EEAF.w,X		; 5D AF EE ; Exclusive OR accumulator with memory $EEAF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $C860.w,X		; 3C 60 C8 ; Test bits $C860.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E38C.w		; ED 8C E3 ; Subtract $E38C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $10E1.w		; 1C E1 10 ; Test and reset bits $10E1.w [Reads: Accumulator] [Flags: Z]
	sbc $0135B9.l		; EF B9 35 01 ; Subtract with carry (long) $0135B9.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $0135C0.l		; EF C0 35 01 ; Subtract with carry (long) $0135C0.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $0AE1.w		; 1C E1 0A ; Test and reset bits $0AE1.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	and $01.b,X		; [PATTERN: Memory clearing operation] 35 01 ; Logical AND $01.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $069C.w,X		; 7D 9C 06 ; Add $069C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $9C9C.w		; 9C 9C 9C ; Store zero to $9C9C.w
	stz $02E0.w		; 9C E0 02 ; Store zero to $02E0.w
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $C918.w		; 0D 18 C9 ; Logical OR $C918.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $0135D4.l		; EF D4 35 01 ; Subtract with carry (long) $0135D4.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$E0.b		; 89 E0 ; Test bits #$E0.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $790C.w		; 0C 0C 79 ; Test and set bits $790C.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $967A.w		; 0C 7A 96 ; Test and set bits $967A.w [Reads: Accumulator] [Flags: Z]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	jmp ($0C96.w,X)		; 7C 96 0C ; Jump indirect indexed to ($0C96.w,X) [Reads: X Index] [Flow: jump]
	adc $0C96.w,X		; 7D 96 0C ; Add $0C96.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $E096.w,X		; 7E 96 E0 ; Rotate right $E096.w,X [Reads: X Index] [Flags: NCZ]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($35.b)		; D4 35 ; Push effective indirect address ($35.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($89.b,X)		; 01 89 ; Logical OR ($89.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$60.b		; 89 60 ; Test bits #$60.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$E0.b		; 89 E0 ; Test bits #$E0.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $C8ED.w		; 0C ED C8 ; Test and set bits $C8ED.w [Reads: Accumulator] [Flags: Z]
	sbc ($0D.b,X)		; E1 0D ; Subtract with carry ($0D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0135B9.l		; EF B9 35 01 ; Subtract with carry (long) $0135B9.l [Writes: Accumulator] [Flags: NCVZ]
	asl $79.b		; 06 79 ; Arithmetic shift left $79.b [Reads: Direct Page] [Flags: NCZ]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $967B.w		; 0C 7B 96 ; Test and set bits $967B.w [Reads: Accumulator] [Flags: Z]
	tsb $967C.w		; 0C 7C 96 ; Test and set bits $967C.w [Reads: Accumulator] [Flags: Z]
	tsb $967D.w		; 0C 7D 96 ; Test and set bits $967D.w [Reads: Accumulator] [Flags: Z]
	ora ($7F.b)		; 12 7F ; OR accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $30.b,Y		; 96 30 ; Store X register $30.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc $9696.w,X		; 7D 96 96 ; Add $9696.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $C9.b,Y		; 96 C9 ; Store X register $C9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lsr $7D.b,X		; 56 7D ; Logical shift right $7D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sty $8C60.w		; 8C 60 8C ; Store Y register to $8C60.w [Reads: Y Index]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	sty $8C6A.w		; 8C 6A 8C ; Store Y register to $8C6A.w [Reads: Y Index]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $DBEF.w		; 1C EF DB ; Test and reset bits $DBEF.w [Reads: Accumulator] [Flags: Z]
	and $01.b,X		; 35 01 ; Logical AND $01.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $A8A8.w,X		; 7D A8 A8 ; Add $A8A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $AC08.w		; AC 08 AC ; Load $AC08.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $06A4.w,X		; 7D A4 06 ; Add $06A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $EF.b		; A4 EF ; Load $EF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp $480335.l,X		; DF 35 03 48 ; Compare accumulator (long,X) $480335.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $7D48.w		; 1C 48 7D ; Test and reset bits $7D48.w [Reads: Accumulator] [Flags: Z]
	sta $9D06.w,X		; 9D 06 9D ; Store accumulator to $9D06.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$9F.b		; A0 9F ; Load #$9F.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $9F48.w,X		; [PATTERN: Memory clearing operation] 9D 48 9F ; Store accumulator to $9F48.w,X [Reads: Accumulator, X Index]
	asl $9C.b		; 06 9C ; Arithmetic shift left $9C.b [Reads: Direct Page] [Flags: NCZ]
	stz $9C9C.w		; 9C 9C 9C ; Store zero to $9C9C.w
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $9C06.w		; 9C 06 9C ; Store zero to $9C06.w
	stz $9C9C.w		; 9C 9C 9C ; Store zero to $9C9C.w
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9D06.w,X		; 9D 06 9D ; Store accumulator to $9D06.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$9F.b		; A0 9F ; Load #$9F.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $9F48.w,X		; 9D 48 9F ; Store accumulator to $9F48.w,X [Reads: Accumulator, X Index]
	sbc ($0E.b,X)		; E1 0E ; Subtract with carry ($0E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $C9AB.w		; 4D AB C9 ; Exclusive OR $C9AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $F5EF.w		; 0E EF F5 ; Arithmetic shift left $F5EF.w [Flags: NCZ]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sbc $013525.l		; EF 25 35 01 ; Subtract with carry (long) $013525.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18AD.w,X		; 3D AD 18 ; AND accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B5.w		; 6D B5 18 ; Add $18B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $B06D48.l		; AF 48 6D B0 ; Load long $B06D48.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $5D		; 10 5D ; Branch if plus to $10, $5D [Flow: branch]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda $0AE000.l		; AF 00 E0 0A ; Load long $0AE000.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $C908.w		; 0C 08 C9 ; Test and set bits $C908.w [Reads: Accumulator] [Flags: Z]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $EFAB.w,X		; 5D AB EF ; Exclusive OR accumulator with memory $EFAB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$35.b]		; E7 35 ; Subtract with carry (long) [$35.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $35.b		; 25 35 ; Logical AND $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $18AD.w,X		; 3D AD 18 ; AND accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B5.w		; 6D B5 18 ; Add $18B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $AFB0.w,X		; 5D B0 AF ; Exclusive OR accumulator with memory $AFB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	.db $B0, $E0		; B0 E0 ; Branch if carry set to $B0, $E0 [Flow: branch]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp.w [$18E3]		; DC E3 18 ; Jump long indirect [$18E3] [Flow: jump]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $02E1.w		; 1C E1 02 ; Test and reset bits $02E1.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $9798.w,X		; 7D 98 97 ; Add $9798.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b,X		; 95 90 ; Store accumulator to $90.b,X [Reads: Accumulator, X Index]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($97.b,S),Y		; 93 97 ; Store accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$95.b],Y		; 97 95 ; Store accumulator (long indexed) [$95.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	sta ($60.b,S),Y		; 93 60 ; Store accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sty $0AE0.w		; 8C E0 0A ; Store Y register to $0AE0.w [Reads: Y Index]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $013557.l		; EF 57 35 01 ; Subtract with carry (long) $013557.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013587.l		; EF 87 35 01 ; Subtract with carry (long) $013587.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013611.l		; EF 11 36 01 ; Subtract with carry (long) $013611.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E38C.w		; ED 8C E3 ; Subtract $E38C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $0AE1.w		; 1C E1 0A ; Test and reset bits $0AE1.w [Reads: Accumulator] [Flags: Z]
	sbc $0135B9.l		; EF B9 35 01 ; Subtract with carry (long) $0135B9.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $0135C0.l		; EF C0 35 01 ; Subtract with carry (long) $0135C0.l [Writes: Accumulator] [Flags: NCVZ]
	lda #$A6.b		; A9 A6 ; Load #$A6.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $E0.b		; A4 E0 ; Load $E0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $5D48.w		; 0E 48 5D ; Arithmetic shift left $5D48.w [Flags: NCZ]
	lda $3D10.w		; AD 10 3D ; Load $3D10.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $B05D08.l		; AF 08 5D B0 ; Load long $B05D08.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $013623.l		; EF 23 36 01 ; Subtract with carry (long) $013623.l [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $08B0.w,X		; 5D B0 08 ; Exclusive OR accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $AFB0.w,X		; 3D B0 AF ; AND accumulator with memory $AFB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $E8		; B0 E8 ; Branch if carry set to $B0, $E8 [Flow: branch]
	bit $4815.w,X		; 3C 15 48 ; Test bits $4815.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $10B2.w,X		; 7D B2 10 ; Add $10B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $08AB.w,X		; 5D AB 08 ; Exclusive OR accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $10AD.w,X		; 5D AD 10 ; Exclusive OR accumulator with memory $10AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $08AF.w,X		; 3D AF 08 ; AND accumulator with memory $08AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EFB0.w,X		; 5D B0 EF ; Exclusive OR accumulator with memory $EFB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $36.b,S		; 23 36 ; AND accumulator with stack relative $36.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $08B0.w,X		; 5D B0 08 ; Exclusive OR accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $AFB0.w,X		; 3D B0 AF ; AND accumulator with memory $AFB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	adc $10B2.w,X		; 7D B2 10 ; Add $10B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $E0AB.w,X		; 5D AB E0 ; Exclusive OR accumulator with memory $E0AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp.w [$18E3]		; DC E3 18 ; Jump long indirect [$18E3] [Flow: jump]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $02E1.w		; 1C E1 02 ; Test and reset bits $02E1.w [Reads: Accumulator] [Flags: Z]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	stx $8C93.w		; 8E 93 8C ; Store X register to $8C93.w [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $3090.w		; 8C 90 30 ; Store Y register to $3090.w [Reads: Y Index]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	stx $938E.w		; 8E 8E 93 ; Store X register to $938E.w [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($97.b,S),Y		; 93 97 ; Store accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $10A4.w,X		; 5D A4 10 ; Exclusive OR accumulator with memory $10A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $08A6.w,X		; 3D A6 08 ; AND accumulator with memory $08A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $48A8.w,X		; 5D A8 48 ; Exclusive OR accumulator with memory $48A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $10A3.w,X		; 7D A3 10 ; Add $10A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $48A3.w		; 4D A3 48 ; Exclusive OR $48A3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $10A1.w		; 6D A1 10 ; Add $10A1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08A3.w,X		; 3D A3 08 ; AND accumulator with memory $08A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $48A4.w		; 6D A4 48 ; Add $48A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $A83D10.l,X		; 9F 10 3D A8 ; Store accumulator (long,X) $A83D10.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $48A6.w,X		; 5D A6 48 ; Exclusive OR accumulator with memory $48A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $10.b		; A4 10 ; Load $10.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	and $08A6.w,X		; 3D A6 08 ; AND accumulator with memory $08A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $48A8.w,X		; 5D A8 48 ; Exclusive OR accumulator with memory $48A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $10A3.w,X		; 7D A3 10 ; Add $10A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $08A8.w		; 4D A8 08 ; Exclusive OR $08A8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $08A8.w,X		; 5D A8 08 ; Exclusive OR accumulator with memory $08A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $A6A8.w,X		; 3D A8 A6 ; AND accumulator with memory $A6A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $10A9.w,X		; 7D A9 10 ; Add $10A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $08A3.w,X		; 3D A3 08 ; AND accumulator with memory $08A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E0A3.w		; 6D A3 E0 ; Add $E0A3.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $E3.b,X		; B4 E3 ; Load Y register $E3.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $08E1.w		; 1C E1 08 ; Test and reset bits $08E1.w [Reads: Accumulator] [Flags: Z]
	tsb $A47D.w		; 0C 7D A4 ; Test and set bits $A47D.w [Reads: Accumulator] [Flags: Z]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A1.b,S		; A3 A1 ; Load accumulator (stack relative) $A1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A3.b,X)		; A1 A3 ; Load accumulator ($A3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $9F.b,S		; A3 9F ; Load accumulator (stack relative) $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $9F9F9F.l,X		; 9F 9F 9F 9F ; Store accumulator (long,X) $9F9F9F.l,X [Reads: Accumulator, X Index]
	sta $A49F9F.l,X		; 9F 9F 9F A4 ; Store accumulator (long,X) $A49F9F.l,X [Reads: Accumulator, X Index]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A1.b,S		; A3 A1 ; Load accumulator (stack relative) $A1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A3.b,X)		; A1 A3 ; Load accumulator ($A3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $64E5.w,X		; 9D E5 64 ; Store accumulator to $64E5.w,X [Reads: Accumulator, X Index]
	inc $5A.b		; E6 5A ; Increment $5A.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E164.w		; ED 64 E1 ; Subtract $E164.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $4DEF.w		; 0E EF 4D ; Arithmetic shift left $4DEF.w [Flags: NCZ]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E164.w		; ED 64 E1 ; Subtract $E164.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $70EF.w		; 0C EF 70 ; Test and set bits $70EF.w [Reads: Accumulator] [Flags: Z]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $01364D.l		; EF 4D 36 01 ; Subtract with carry (long) $01364D.l [Writes: Accumulator] [Flags: NCVZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $36		; 70 36 ; Branch if overflow set to $70, $36 [Flow: branch]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($36.b,S),Y		; 93 36 ; Store accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $EFA860.l,X		; 9F 60 A8 EF ; Store accumulator (long,X) $EFA860.l,X [Reads: Accumulator, X Index]
	eor $0136.w		; 4D 36 01 ; Exclusive OR $0136.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $36		; 70 36 ; Branch if overflow set to $70, $36 [Flow: branch]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($36.b,S),Y		; 93 36 ; Store accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $18A848.l,X		; 9F 48 A8 18 ; Store accumulator (long,X) $18A848.l,X [Reads: Accumulator, X Index]
	ldx $E0.b		; A6 E0 ; Load $E0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $06E1.w		; 1C E1 06 ; Test and reset bits $06E1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $5498.w,X		; 7D 98 54 ; Add $5498.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $6098.w		; 0C 98 60 ; Test and set bits $6098.w [Reads: Accumulator] [Flags: Z]
	sta [$48.b],Y		; 97 48 ; Store accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$FA.b],Y		; 97 FA ; Store accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora $78E5.w,Y		; 19 E5 78 ; OR accumulator with memory $78E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $8C.b		; E6 8C ; Increment $8C.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $E702.w,X		; 1E 02 E7 ; Arithmetic shift left $E702.w,X [Reads: X Index] [Flags: NCZ]
	and $E0.b,S		; 23 E0 ; AND accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	lda ($AC.b,S),Y		; B3 AC ; Load accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $AE.b,X		; B5 AE ; Load $AE.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $E8B7.w,X		; 5D B7 E8 ; Exclusive OR accumulator with memory $E8B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E6C812.l,X		; FF 12 C8 E6 ; Subtract with carry (long,X) $E6C812.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $8C		; 50 8C ; Branch if overflow clear to $50, $8C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $36.b		; A5 36 ; Load $36.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $0136C0.l		; EF C0 36 01 ; Subtract with carry (long) $0136C0.l [Writes: Accumulator] [Flags: NCVZ]
	stx $98.b,Y		; 96 98 ; Store X register $98.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $0136CE.l		; EF CE 36 01 ; Subtract with carry (long) $0136CE.l [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $0136E9.l		; EF E9 36 01 ; Subtract with carry (long) $0136E9.l [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $AB		; B0 AB ; Branch if carry set to $B0, $AB [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy $40.b		; A4 40 ; Load $40.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $EFC860.l,X		; 9F 60 C8 EF ; Store accumulator (long,X) $EFC860.l,X [Reads: Accumulator, X Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $A8AB.w		; 20 AB A8 ; Jump to subroutine at $A8AB.w [Writes: Stack Pointer] [Flow: call]
	ldy $9F.b		; A4 9F ; Load $9F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	stz $C860.w		; 9C 60 C8 ; Store zero to $C860.w
	sbc $013718.l		; EF 18 37 01 ; Subtract with carry (long) $013718.l [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $A4A8.w		; 20 A8 A4 ; Jump to subroutine at $A4A8.w [Writes: Stack Pointer] [Flow: call]
	sta $98309C.l,X		; 9F 9C 30 98 ; Store accumulator (long,X) $98309C.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $013733.l		; EF 33 37 01 ; Subtract with carry (long) $013733.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $9FA4.w		; 20 A4 9F ; Jump to subroutine at $9FA4.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $C818.w		; 9C 18 C8 ; Store zero to $C818.w
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $0134F5.l		; EF F5 34 01 ; Subtract with carry (long) $0134F5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013525.l		; EF 25 35 01 ; Subtract with carry (long) $013525.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18AD.w,X		; 3D AD 18 ; AND accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B5.w		; 6D B5 18 ; Add $18B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $E0B048.l		; AF 48 B0 E0 ; Load long $E0B048.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$17.b]		; E7 17 ; Subtract with carry (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $B0		; 10 B0 ; Branch if plus to $10, $B0 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $00B0.w,X		; 5D B0 00 ; Exclusive OR accumulator with memory $00B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $F5EF.w		; 0E EF F5 ; Arithmetic shift left $F5EF.w [Flags: NCZ]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sbc $013525.l		; EF 25 35 01 ; Subtract with carry (long) $013525.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18AD.w,X		; 3D AD 18 ; AND accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B5.w		; 6D B5 18 ; Add $18B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $AFB0.w,X		; 5D B0 AF ; Exclusive OR accumulator with memory $AFB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $E0		; B0 E0 ; Branch if carry set to $B0, $E0 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: NCZ]
	and $08B0.w,X		; 3D B0 08 ; AND accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $E0B0.w,X		; 5D B0 E0 ; Exclusive OR accumulator with memory $E0B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E3DC.w		; ED DC E3 ; Subtract $E3DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $02E1.w		; 1C E1 02 ; Test and reset bits $02E1.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $9798.w,X		; 7D 98 97 ; Add $9798.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b,X		; 95 90 ; Store accumulator to $90.b,X [Reads: Accumulator, X Index]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($97.b,S),Y		; 93 97 ; Store accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$95.b],Y		; 97 95 ; Store accumulator (long indexed) [$95.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	sta ($8C.b,S),Y		; 93 8C ; Store accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $013557.l		; EF 57 35 01 ; Subtract with carry (long) $013557.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013587.l		; EF 87 35 01 ; Subtract with carry (long) $013587.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18A4.w,X		; 3D A4 18 ; AND accumulator with memory $18A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18AD.w		; 6D AD 18 ; Add $18AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08A9.w,X		; 3D A9 08 ; AND accumulator with memory $08A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A6A8.w,X		; 5D A8 A6 ; Exclusive OR accumulator with memory $A6A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $3D10.w		; 0C 10 3D ; Test and set bits $3D10.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $E0A8.w,X		; 5D A8 E0 ; Exclusive OR accumulator with memory $E0A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $9F98.w,X		; 7D 98 9F ; Add $9F98.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $9F.b		; A4 9F ; Load $9F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta [$9F.b],Y		; 97 9F ; Store accumulator (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $9F.b,S		; A3 9F ; Load accumulator (stack relative) $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $9F.b,X		; 95 9F ; Store accumulator to $9F.b,X [Reads: Accumulator, X Index]
	ldy $9F.b		; A4 9F ; Load $9F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $90, $9F		; 90 9F ; Branch if carry clear to $90, $9F [Flow: branch]
	ldy $9F.b		; A4 9F ; Load $9F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta ($A1.b),Y		; 91 A1 ; Store accumulator ($A1.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy $A1.b		; A4 A1 ; Load $A1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta ($A1.b)		; 92 A1 ; Store accumulator (indirect) ($A1.b) [Reads: Direct Page, Accumulator]
	ldy $A1.b		; A4 A1 ; Load $A1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta ($A3.b,S),Y		; 93 A3 ; Store accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ldx $A3.b		; A6 A3 ; Load $A3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta [$A3.b],Y		; 97 A3 ; Store accumulator (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $A3.b		; A6 A3 ; Load $A3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $979FA4.l,X		; 9F A4 9F 97 ; Store accumulator (long,X) $979FA4.l,X [Reads: Accumulator, X Index]
	sta $959FA3.l,X		; 9F A3 9F 95 ; Store accumulator (long,X) $959FA3.l,X [Reads: Accumulator, X Index]
	sta $909FA4.l,X		; 9F A4 9F 90 ; Store accumulator (long,X) $909FA4.l,X [Reads: Accumulator, X Index]
	sta $919FA4.l,X		; 9F A4 9F 91 ; Store accumulator (long,X) $919FA4.l,X [Reads: Accumulator, X Index]
	lda ($A4.b,X)		; A1 A4 ; Load accumulator ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($93.b,X)		; A1 93 ; Load accumulator ($93.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $989FA3.l,X		; 9F A3 9F 98 ; Store accumulator (long,X) $989FA3.l,X [Reads: Accumulator, X Index]
	sta $969FA4.l,X		; 9F A4 9F 96 ; Store accumulator (long,X) $969FA4.l,X [Reads: Accumulator, X Index]
	sta $E59FA4.l,X		; 9F A4 9F E5 ; Store accumulator (long,X) $E59FA4.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $013750.l		; EF 50 37 01 ; Subtract with carry (long) $013750.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $30B2.w,X		; 3D B2 30 ; AND accumulator with memory $30B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $10BA.w		; 6D BA 10 ; Add $10BA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $30.b,X		; B4 30 ; Load Y register $30.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $18BC.w,X		; 5D BC 18 ; Exclusive OR accumulator with memory $18BC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $E8.b,X		; B4 E8 ; Load Y register $E8.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $12		; 50 12 ; Branch if overflow clear to $50, $12 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$E6.b		; A9 E6 ; Load #$E6.b into accumulator [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $EF.b		; 06 EF ; Arithmetic shift left $EF.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $37		; 50 37 ; Branch if overflow clear to $50, $37 [Flow: branch]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $30B2.w,X		; 3D B2 30 ; AND accumulator with memory $30B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18BA.w		; 6D BA 18 ; Add $18BA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $B4B2.w,X		; 3D B2 B4 ; AND accumulator with memory $B4B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $5D		; 30 5D ; Branch if minus to $30, $5D [Flow: branch]
	ldy $B418.w,X		; BC 18 B4 ; Load Y register $B418.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3DC.w		; ED DC E3 ; Subtract $E3DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $02E1.w		; 1C E1 02 ; Test and reset bits $02E1.w [Reads: Accumulator] [Flags: Z]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	sta $9A9C.w,X		; 9D 9C 9A ; Store accumulator to $9A9C.w,X [Reads: Accumulator, X Index]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	sta [$98.b],Y		; 97 98 ; Store accumulator (long indexed) [$98.b],Y [Reads: Direct Page, Y Index, Accumulator]
	stz $9C9D.w		; 9C 9D 9C ; Store zero to $9C9D.w
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $60.b,X		; 95 60 ; Store accumulator to $60.b,X [Reads: Accumulator, X Index]
	stx $98.b,Y		; 96 98 ; Store X register $98.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $069B.w,Y		; 99 9B 06 ; Store accumulator to $069B.w,Y [Reads: Y Index, Accumulator]
	sta $9A9C.w,X		; 9D 9C 9A ; Store accumulator to $9A9C.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $9A9C.w,X		; 9D 9C 9A ; Store accumulator to $9A9C.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $9A9C.w,X		; 9D 9C 9A ; Store accumulator to $9A9C.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $9A9C.w,X		; 9D 9C 9A ; Store accumulator to $9A9C.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $9110.w,X		; 9D 10 91 ; Store accumulator to $9110.w,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($30.b),Y		; 91 30 ; Store accumulator ($30.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $5D18.w		; 0C 18 5D ; Test and set bits $5D18.w [Reads: Accumulator] [Flags: Z]
	lda $3D10.w		; AD 10 3D ; Load $3D10.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $18AD.w,X		; 5D AD 18 ; Exclusive OR accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $3D10.w		; AE 10 3D ; Load $3D10.w into X register [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $20AE.w,X		; 5D AE 20 ; Exclusive OR accumulator with memory $20AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B2.w,X		; 7D B2 08 ; Add $08B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $AEB0.w		; 4D B0 AE ; Exclusive OR $AEB0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $18AD.w,X		; 5D AD 18 ; Exclusive OR accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A9.w		; 4D A9 18 ; Exclusive OR $18A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18A9.w		; 6D A9 18 ; Add $18A9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $18AE.w,X		; 3D AE 18 ; AND accumulator with memory $18AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18AF.w		; 6D AF 18 ; Add $18AF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $24AF.w,X		; 3D AF 24 ; AND accumulator with memory $24AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $06AE.w		; 6D AE 06 ; Add $06AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $06AB.w,X		; 3D AB 06 ; AND accumulator with memory $06AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A9.w,X		; 5D A9 18 ; Exclusive OR accumulator with memory $18A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $18A8.w,X		; 5D A8 18 ; Exclusive OR accumulator with memory $18A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $3D10.w		; AD 10 3D ; Load $3D10.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $18AD.w,X		; 5D AD 18 ; Exclusive OR accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $3D10.w		; AE 10 3D ; Load $3D10.w into X register [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $20AE.w,X		; 5D AE 20 ; Exclusive OR accumulator with memory $20AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B2.w,X		; 7D B2 08 ; Add $08B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B2B0.w		; 4D B0 B2 ; Exclusive OR $B2B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $10B4.w,X		; 5D B4 10 ; Exclusive OR accumulator with memory $10B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08AD.w		; 6D AD 08 ; Add $08AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $18AB.w,X		; 5D AB 18 ; Exclusive OR accumulator with memory $18AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $30A9.w,X		; 3D A9 30 ; AND accumulator with memory $30A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $ABA9.w,X		; 3D A9 AB ; AND accumulator with memory $ABA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $5D		; 30 5D ; Branch if minus to $30, $5D [Flow: branch]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $B0AE.w		; AC AE B0 ; Load $B0AE.w into Y register [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $A4		; 10 A4 ; Branch if plus to $10, $A4 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $60.b		; A4 60 ; Load $60.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E38C.w		; ED 8C E3 ; Subtract $E38C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $10E1.w		; 1C E1 10 ; Test and reset bits $10E1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $30AE.w,X		; 7D AE 30 ; Add $30AE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $A9AB.w		; AD AB A9 ; Load $A9AB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $A960.w		; AD 60 A9 ; Load $A960.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $C818.w		; AD 18 C8 ; Load $C818.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $A1		; 10 A1 ; Branch if plus to $10, $A1 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($30.b,X)		; A1 30 ; Load accumulator ($30.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($60.b,X)		; A1 60 ; Load accumulator ($60.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $1CE3.w		; 0C E3 1C ; Test and set bits $1CE3.w [Reads: Accumulator] [Flags: Z]
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $B0B0.w,X		; 5D B0 B0 ; Exclusive OR accumulator with memory $B0B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($28.b)		; B2 28 ; Load accumulator (indirect) ($28.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tsb $B43D.w		; 0C 3D B4 ; Test and set bits $B43D.w [Reads: Accumulator] [Flags: Z]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $B4B4.w,X		; 5D B4 B4 ; Exclusive OR accumulator with memory $B4B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $EF.b,X		; B4 EF ; Load Y register $EF.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $0237.w		; AC 37 02 ; Load $0237.w into Y register [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($18.b)		; B2 18 ; Load accumulator (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $30.b,X		; B4 30 ; Load Y register $30.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $B5B5.w,X		; 3D B5 B5 ; AND accumulator with memory $B5B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $B5B5.w,X		; 5D B5 B5 ; Exclusive OR accumulator with memory $B5B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $B5B5.w,X		; 3D B5 B5 ; AND accumulator with memory $B5B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $60.b,X		; B5 60 ; Load $60.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B9.w,X		; 5D B9 18 ; Exclusive OR accumulator with memory $18B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $A4		; 10 A4 ; Branch if plus to $10, $A4 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $60.b		; A4 60 ; Load $60.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1DC.w		; ED DC E1 ; Subtract $E1DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $D4EF.w		; 0D EF D4 ; Logical OR $D4EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $01.b,X		; 35 01 ; Logical AND $01.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $8979.w		; 0C 79 89 ; Test and set bits $8979.w [Reads: Accumulator] [Flags: Z]
	bit #$0C.b		; 89 0C ; Test bits #$0C.b with accumulator [Reads: Accumulator] [Flags: Z]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $897B.w		; 0C 7B 89 ; Test and set bits $897B.w [Reads: Accumulator] [Flags: Z]
	tsb $897C.w		; 0C 7C 89 ; Test and set bits $897C.w [Reads: Accumulator] [Flags: Z]
	tsb $897D.w		; 0C 7D 89 ; Test and set bits $897D.w [Reads: Accumulator] [Flags: Z]
	tsb $897E.w		; 0C 7E 89 ; Test and set bits $897E.w [Reads: Accumulator] [Flags: Z]
	sbc $0135D4.l		; EF D4 35 01 ; Subtract with carry (long) $0135D4.l [Writes: Accumulator] [Flags: NCVZ]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$10.b		; 89 10 ; Test bits #$10.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$08.b		; 89 08 ; Test bits #$08.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$30.b		; 89 30 ; Test bits #$30.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$60.b		; 89 60 ; Test bits #$60.b with accumulator [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $30, $96		; 30 96 ; Branch if minus to $30, $96 [Flow: branch]
	sty $C860.w		; 8C 60 C8 ; Store Y register to $C860.w [Reads: Y Index]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $0AE1.w		; 1C E1 0A ; Test and reset bits $0AE1.w [Reads: Accumulator] [Flags: Z]
	sbc $0137B5.l		; EF B5 37 01 ; Subtract with carry (long) $0137B5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $0137ED.l		; EF ED 37 01 ; Subtract with carry (long) $0137ED.l [Writes: Accumulator] [Flags: NCVZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $08E1.w		; 1C E1 08 ; Test and reset bits $08E1.w [Reads: Accumulator] [Flags: Z]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $01.b,X		; 35 01 ; Logical AND $01.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($ED.b,X)		; 01 ED ; Logical OR ($ED.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $06E1.w		; 1C E1 06 ; Test and reset bits $06E1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9CA1.w,X		; 7D A1 9C ; Add $9CA1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $9A98.w,X		; 9D 98 9A ; Store accumulator to $9A98.w,X [Reads: Accumulator, X Index]
	lda ($9E.b,X)		; A1 9E ; Load accumulator ($9E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $380BEF.l,X		; 9F EF 0B 38 ; Store accumulator (long,X) $380BEF.l,X [Reads: Accumulator, X Index]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$38.b		; 29 38 ; Logical AND #$38.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $70, $38		; 70 38 ; Branch if overflow set to $70, $38 [Flow: branch]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $0EE1.w		; 1C E1 0E ; Test and reset bits $0EE1.w [Reads: Accumulator] [Flags: Z]
	sbc $01388E.l		; EF 8E 38 01 ; Subtract with carry (long) $01388E.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$AF.b		; A9 AF ; Load #$AF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9CA1.w,X		; 7D A1 9C ; Add $9CA1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $9A98.w,X		; 9D 98 9A ; Store accumulator to $9A98.w,X [Reads: Accumulator, X Index]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stz $50E8.w,X		; 9E E8 50 ; Store zero to $50E8.w,X [Reads: X Index]
	ora $9C.b,X		; 15 9C ; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $38B8EF.l,X		; 9F EF B8 38 ; Store accumulator (long,X) $38B8EF.l,X [Reads: Accumulator, X Index]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $A89A.w,X		; 7D 9A A8 ; Add $A89A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $9F.b,X		; B4 9F ; Load Y register $9F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda [$EF.b],Y		; B7 EF ; Load accumulator (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $A99D.w,X		; 7D 9D A9 ; Add $A99D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($B5.b)		; 12 B5 ; OR accumulator with memory (indirect) ($B5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $C9.b		; 06 C9 ; Arithmetic shift left $C9.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AF.b,S		; A3 AF ; Load accumulator (stack relative) $AF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($BB.b)		; 12 BB ; OR accumulator with memory (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $01380B.l		; EF 0B 38 01 ; Subtract with carry (long) $01380B.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $38C7EF.l		; AF EF C7 38 ; Load long $38C7EF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	sbc $0138B8.l		; EF B8 38 01 ; Subtract with carry (long) $0138B8.l [Writes: Accumulator] [Flags: NCVZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $18C9.w		; 0C C9 18 ; Test and set bits $18C9.w [Reads: Accumulator] [Flags: Z]
	adc $ADA1.w,X		; 7D A1 AD ; Add $ADA1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $B2.b		; A6 B2 ; Load $B2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $EFBE.w		; 0C BE EF ; Test and set bits $EFBE.w [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $B0A4.w,X		; 7D A4 B0 ; Add $B0A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $BC.b		; 06 BC ; Arithmetic shift left $BC.b [Reads: Direct Page] [Flags: NCZ]
	ora ($C9.b)		; 12 C9 ; OR accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$B5.b		; A9 B5 ; Load #$B5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $C9.b		; 06 C9 ; Arithmetic shift left $C9.b [Reads: Direct Page] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $5D18.w		; 0E 18 5D ; Arithmetic shift left $5D18.w [Flags: NCZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($10.b)		; B2 10 ; Load accumulator (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EFB2.w,X		; 5D B2 EF ; Exclusive OR accumulator with memory $EFB2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $0138.w		; CE 38 01 ; Decrement $0138.w [Flags: NZ]
	sbc $013525.l		; EF 25 35 01 ; Subtract with carry (long) $013525.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18AD.w,X		; 3D AD 18 ; AND accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B5.w		; 6D B5 18 ; Add $18B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $00B060.l		; AF 60 B0 00 ; Load long $00B060.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $C908.w		; 0C 08 C9 ; Test and set bits $C908.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $10B0.w,X		; 5D B0 10 ; Exclusive OR accumulator with memory $10B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($10.b)		; B2 10 ; Load accumulator (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EFB2.w,X		; 5D B2 EF ; Exclusive OR accumulator with memory $EFB2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $0138.w		; CE 38 01 ; Decrement $0138.w [Flags: NZ]
	sbc $013525.l		; EF 25 35 01 ; Subtract with carry (long) $013525.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18AD.w,X		; 3D AD 18 ; AND accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B5.w		; 6D B5 18 ; Add $18B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $AFB0.w,X		; 5D B0 AF ; Exclusive OR accumulator with memory $AFB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $B0, $E0		; B0 E0 ; Branch if carry set to $B0, $E0 [Flow: branch]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp.w [$18E3]		; DC E3 18 ; Jump long indirect [$18E3] [Flow: jump]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $02E1.w		; 1C E1 02 ; Test and reset bits $02E1.w [Reads: Accumulator] [Flags: Z]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$95.b],Y		; 97 95 ; Store accumulator (long indexed) [$95.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	sta ($93.b)		; 92 93 ; Store accumulator (indirect) ($93.b) [Reads: Direct Page, Accumulator]
	sta [$98.b],Y		; 97 98 ; Store accumulator (long indexed) [$98.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$95.b],Y		; 97 95 ; Store accumulator (long indexed) [$95.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	sta ($60.b,S),Y		; 93 60 ; Store accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sty $0AE0.w		; 8C E0 0A ; Store Y register to $0AE0.w [Reads: Y Index]
	sbc $E3B4.w		; ED B4 E3 ; Subtract $E3B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $5D18.w		; 0C 18 5D ; Test and set bits $5D18.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $18A8.w,X		; 5D A8 18 ; Exclusive OR accumulator with memory $18A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $08A3.w,X		; 3D A3 08 ; AND accumulator with memory $08A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EFA9.w,X		; 5D A9 EF ; Exclusive OR accumulator with memory $EFA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta [$35.b]		; 87 35 ; Store accumulator (long) [$35.b] [Reads: Direct Page, Accumulator]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($36.b),Y		; 11 36 ; OR accumulator with memory ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E38C.w		; ED 8C E3 ; Subtract $E38C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $10E1.w		; 1C E1 10 ; Test and reset bits $10E1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$EF.b		; C9 EF ; Compare #$EF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpy #$35.b		; C0 35 ; Compare #$35.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($A9.b,X)		; 01 A9 ; Logical OR ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx $60.b		; A6 60 ; Load $60.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $ED.b		; A4 ED ; Load $ED.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sty $11E0.w		; 8C E0 11 ; Store Y register to $11E0.w [Reads: Y Index]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $04E1.w		; 1C E1 04 ; Test and reset bits $04E1.w [Reads: Accumulator] [Flags: Z]
	sbc $0137B5.l		; EF B5 37 01 ; Subtract with carry (long) $0137B5.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $0137ED.l		; EF ED 37 01 ; Subtract with carry (long) $0137ED.l [Writes: Accumulator] [Flags: NCVZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $E0.b,X		; B4 E0 ; Load Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $0DE1.w		; 1C E1 0D ; Test and reset bits $0DE1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $0135DB.l		; EF DB 35 01 ; Subtract with carry (long) $0135DB.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013800.l		; EF 00 38 01 ; Subtract with carry (long) $013800.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9095.w,X		; 7D 95 90 ; Add $9095.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($8C.b),Y		; 91 8C ; Store accumulator ($8C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stx $9295.w		; 8E 95 92 ; Store X register to $9295.w [Reads: X Index]
	sta ($E0.b,S),Y		; 93 E0 ; Store accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E164.w		; ED 64 E1 ; Subtract $E164.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $02EF.w		; 0E EF 02 ; Arithmetic shift left $02EF.w [Flags: NCZ]
	and $AD01.w,Y		; 39 01 AD ; AND accumulator with memory $AD01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ABAB.w		; AD AB AB ; Load $ABAB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $EFAD.w		; AD AD EF ; Load $EFAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $39.b,X		; 15 39 ; OR accumulator with memory $39.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $AF.b		; 02 AF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $E0AFAF.l		; AF AF AF E0 ; Load long $E0AFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E164.w		; ED 64 E1 ; Subtract $E164.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $5D0C.w		; 0C 0C 5D ; Test and set bits $5D0C.w [Reads: Accumulator] [Flags: Z]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc $03391E.l		; EF 1E 39 03 ; Subtract with carry (long) $03391E.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013927.l		; EF 27 39 01 ; Subtract with carry (long) $013927.l [Writes: Accumulator] [Flags: NCVZ]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $08A4.w,X		; 7D A4 08 ; Add $08A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $489FC9.l,X		; 9F C9 9F 48 ; Store accumulator (long,X) $489FC9.l,X [Reads: Accumulator, X Index]
	lda ($08.b,X)		; A1 08 ; Load accumulator ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $C9.b		; A4 C9 ; Load $C9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A8.b		; A9 A8 ; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $EF.b		; A6 EF ; Load $EF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	and #$38.b		; 29 38 ; Logical AND #$38.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $70, $38		; 70 38 ; Branch if overflow set to $70, $38 [Flow: branch]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $E0.b,X		; B4 E0 ; Load Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $0EE1.w		; 1C E1 0E ; Test and reset bits $0EE1.w [Reads: Accumulator] [Flags: Z]
	sbc $01388E.l		; EF 8E 38 01 ; Subtract with carry (long) $01388E.l [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $A4		; 10 A4 ; Branch if plus to $10, $A4 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9095.w,X		; 7D 95 90 ; Add $9095.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($8C.b),Y		; 91 8C ; Store accumulator ($8C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stx $9495.w		; 8E 95 94 ; Store X register to $9495.w [Reads: X Index]
	sta ($E8.b)		; 92 E8 ; Store accumulator (indirect) ($E8.b) [Reads: Direct Page, Accumulator]
	.db $50, $15		; 50 15 ; Branch if overflow clear to $50, $15 [Flow: branch]
	.db $90, $48		; 90 48 ; Branch if carry clear to $90, $48 [Flow: branch]
	stx $E093.w		; 8E 93 E0 ; Store X register to $E093.w [Reads: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $E164.w		; ED 64 E1 ; Subtract $E164.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $02EF.w		; 0E EF 02 ; Arithmetic shift left $02EF.w [Flags: NCZ]
	and $AD01.w,Y		; 39 01 AD ; AND accumulator with memory $AD01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ABAB.w		; AD AB AB ; Load $ABAB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $EFAD.w		; AD AD EF ; Load $EFAD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $39.b,X		; 15 39 ; OR accumulator with memory $39.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $B0.b		; 04 B0 ; Test and set bits $B0.b [Reads: Accumulator] [Flags: Z]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	lda $18AFAF.l		; AF AF AF 18 ; Load long $18AFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $ED0AE0.l		; AF E0 0A ED ; Load long $ED0AE0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	stz $E1.b		; 64 E1 ; Store zero to $E1.b
	tsb $5D0C.w		; 0C 0C 5D ; Test and set bits $5D0C.w [Reads: Accumulator] [Flags: Z]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc $03391E.l		; EF 1E 39 03 ; Subtract with carry (long) $03391E.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $013927.l		; EF 27 39 01 ; Subtract with carry (long) $013927.l [Writes: Accumulator] [Flags: NCVZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $02391E.l		; EF 1E 39 02 ; Subtract with carry (long) $02391E.l [Writes: Accumulator] [Flags: NCVZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $EF.b,X		; B5 EF ; Load $EF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $38C7EF.l		; AF EF C7 38 ; Load long $38C7EF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	sbc $C8.b		; E5 C8 ; Subtract $C8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $E702.w,X		; 1E 02 E7 ; Arithmetic shift left $E702.w,X [Reads: X Index] [Flags: NCZ]
	and $E0.b,S		; 23 E0 ; AND accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $12.b,S		; E3 12 ; Subtract stack-relative $12.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	lda ($AC.b,S),Y		; B3 AC ; Load accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $AE.b,X		; B5 AE ; Load $AE.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $C8B7.w,X		; 5D B7 C8 ; Exclusive OR accumulator with memory $C8B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $50.b		; E6 50 ; Increment $50.b [Reads: Direct Page] [Flags: NZ]
	sty $00C8.w		; 8C C8 00 ; Store Y register to $00C8.w [Reads: Y Index]
	sbc $0136A5.l		; EF A5 36 01 ; Subtract with carry (long) $0136A5.l [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $0136C0.l		; EF C0 36 01 ; Subtract with carry (long) $0136C0.l [Writes: Accumulator] [Flags: NCVZ]
	stx $98.b,Y		; 96 98 ; Store X register $98.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta ($C8.b,S),Y		; 93 C8 ; Store accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $0136CE.l		; EF CE 36 01 ; Subtract with carry (long) $0136CE.l [Writes: Accumulator] [Flags: NCVZ]
	lda $E9EFC8.l		; AF C8 EF E9 ; Load long $E9EFC8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda ($A9.b)		; B2 A9 ; Load accumulator (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $EF.b,S		; A3 EF ; Load accumulator (stack relative) $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $AF.b,X		; B5 AF ; Load $AF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $9D38A6.l		; AF A6 38 9D ; Load long $9D38A6.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $013718.l		; EF 18 37 01 ; Subtract with carry (long) $013718.l [Writes: Accumulator] [Flags: NCVZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$A3.b		; A9 A3 ; Load #$A3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	sbc $013733.l		; EF 33 37 01 ; Subtract with carry (long) $013733.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $AF.b,X		; B5 AF ; Load $AF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $18AB.w,X		; 5D AB 18 ; Exclusive OR accumulator with memory $18AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($10.b)		; B2 10 ; Load accumulator (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20B2.w,X		; 5D B2 20 ; Exclusive OR accumulator with memory $20B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B5.w,X		; 7D B5 08 ; Add $08B5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B2B4.w		; 4D B4 B2 ; Exclusive OR $B2B4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18AB.w		; 4D AB 18 ; Exclusive OR $18AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18AD.w		; 6D AD 18 ; Add $18AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $18B0.w,X		; 3D B0 18 ; AND accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $00B0.w,X		; 3D B0 00 ; AND accumulator with memory $00B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	and $06AF.w,X		; 3D AF 06 ; AND accumulator with memory $06AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18AD.w,X		; 5D AD 18 ; Exclusive OR accumulator with memory $18AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $18AB.w,X		; 5D AB 18 ; Exclusive OR accumulator with memory $18AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($10.b)		; B2 10 ; Load accumulator (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20B2.w,X		; 5D B2 20 ; Exclusive OR accumulator with memory $20B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B5.w,X		; 7D B5 08 ; Add $08B5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B5B4.w		; 4D B4 B5 ; Exclusive OR $B5B4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $10B7.w,X		; 5D B7 10 ; Exclusive OR accumulator with memory $10B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B0.w		; 6D B0 08 ; Add $08B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $00AF.w,X		; 5D AF 00 ; Exclusive OR accumulator with memory $00AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $18A3.w,X		; 5D A3 18 ; Exclusive OR accumulator with memory $18A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $18A8.w,X		; 5D A8 18 ; Exclusive OR accumulator with memory $18A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $08A3.w,X		; 3D A3 08 ; AND accumulator with memory $08A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20A9.w,X		; 5D A9 20 ; Exclusive OR accumulator with memory $20A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08AD.w,X		; 7D AD 08 ; Add $08AD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $A9AB.w		; 4D AB A9 ; Exclusive OR $A9AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $18A8.w,X		; 5D A8 18 ; Exclusive OR accumulator with memory $18A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A4.w		; 4D A4 18 ; Exclusive OR $18A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18A4.w		; 6D A4 18 ; Add $18A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $18A9.w,X		; 3D A9 18 ; AND accumulator with memory $18A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18AA.w		; 6D AA 18 ; Add $18AA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $00AA.w,X		; 3D AA 00 ; AND accumulator with memory $00AA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $06A6.w,X		; 3D A6 06 ; AND accumulator with memory $06A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A4.w,X		; 5D A4 18 ; Exclusive OR accumulator with memory $18A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $10.b,S		; A3 10 ; Load accumulator (stack relative) $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $08A3.w,X		; 3D A3 08 ; AND accumulator with memory $08A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A3.w,X		; 5D A3 18 ; Exclusive OR accumulator with memory $18A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $18A8.w,X		; 5D A8 18 ; Exclusive OR accumulator with memory $18A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $08A3.w,X		; 3D A3 08 ; AND accumulator with memory $08A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20A9.w,X		; 5D A9 20 ; Exclusive OR accumulator with memory $20A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08AD.w,X		; 7D AD 08 ; Add $08AD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $ADAB.w		; 4D AB AD ; Exclusive OR $ADAB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $10AF.w,X		; 5D AF 10 ; Exclusive OR accumulator with memory $10AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08A8.w		; 6D A8 08 ; Add $08A8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $00A6.w,X		; 5D A6 00 ; Exclusive OR accumulator with memory $00A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $30A9.w,X		; 7D A9 30 ; Add $30A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($10.b)		; B2 10 ; Load accumulator (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20B2.w,X		; 5D B2 20 ; Exclusive OR accumulator with memory $20B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B5.w,X		; 7D B5 08 ; Add $08B5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B2B4.w		; 4D B4 B2 ; Exclusive OR $B2B4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18AB.w		; 4D AB 18 ; Exclusive OR $18AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18AD.w		; 6D AD 18 ; Add $18AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $18B0.w,X		; 3D B0 18 ; AND accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $00B0.w,X		; 3D B0 00 ; AND accumulator with memory $00B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18A4.w,X		; 3D A4 18 ; AND accumulator with memory $18A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18AD.w		; 6D AD 18 ; Add $18AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08A9.w,X		; 3D A9 08 ; AND accumulator with memory $08A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A6A8.w,X		; 5D A8 A6 ; Exclusive OR accumulator with memory $A6A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $10AB.w,X		; 7D AB 10 ; Add $10AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $08AB.w		; 4D AB 08 ; Exclusive OR $08AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $10A9.w		; 6D A9 10 ; Add $10A9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $08AB.w,X		; 3D AB 08 ; AND accumulator with memory $08AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $48AD.w		; 6D AD 48 ; Add $48AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $3D		; 10 3D ; Branch if plus to $10, $3D [Flow: branch]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	eor $48AF.w,X		; 5D AF 48 ; Exclusive OR accumulator with memory $48AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $3D10.w		; AD 10 3D ; Load $3D10.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $B05D08.l		; AF 08 5D B0 ; Load long $B05D08.l into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $10AB.w,X		; 7D AB 10 ; Add $10AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $08B0.w		; 4D B0 08 ; Exclusive OR $08B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	tsb $B45D.w		; 0C 5D B4 ; Test and set bits $B45D.w [Reads: Accumulator] [Flags: Z]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $C8.b,X		; B5 C8 ; Load $C8.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $C8.b,X		; B4 C8 ; Load Y register $C8.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $00.b,X		; B4 00 ; Load Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tsb $B75D.w		; 0C 5D B7 ; Test and set bits $B75D.w [Reads: Accumulator] [Flags: Z]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $B9C8.w,Y		; B9 C8 B9 ; Load $B9C8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $B9B9.w,Y		; B9 B9 B9 ; Load $B9B9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5B9.w,Y		; B9 B9 B5 ; Load $B5B9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$C8.b],Y		; B7 C8 ; Load accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $08E1.w		; 1C E1 08 ; Test and reset bits $08E1.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $10A8.w,X		; 7D A8 10 ; Add $10A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	ldy $20.b		; A4 20 ; Load $20.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $20.b		; A6 20 ; Load $20.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda ($60.b)		; B2 60 ; Load accumulator (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $00B2.w,X		; 5D B2 00 ; Exclusive OR accumulator with memory $00B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3DC.w		; ED DC E3 ; Subtract $E3DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $06E1.w		; 1C E1 06 ; Test and reset bits $06E1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $0094.w,X		; 7D 94 00 ; Add $0094.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $30C9.w		; 20 C9 30 ; Jump to subroutine at $30C9.w [Writes: Stack Pointer] [Flow: call]
	adc $10A7.w,X		; 7D A7 10 ; Add $10A7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($20.b,S),Y		; B3 20 ; Load accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $60.b,X		; B5 60 ; Load $60.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $00B0.w,X		; 5D B0 00 ; Exclusive OR accumulator with memory $00B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $7D20.w		; 0D 20 7D ; Logical OR $7D20.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $B4B7.w,X		; BC B7 B4 ; Load Y register $B4B7.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E1B4ED.l		; 0F ED B4 E1 ; OR accumulator with memory (long) $E1B4ED.l [Writes: Accumulator] [Flags: NZ]
	ora $C908.w		; 0D 08 C9 ; Logical OR $C908.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $B37D.w		; 20 7D B3 ; Jump to subroutine at $B37D.w [Writes: Stack Pointer] [Flow: call]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $C908.w		; AC 08 C9 ; Load $C908.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A6B5.w		; 20 B5 A6 ; Jump to subroutine at $A6B5.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $C908.w		; AE 08 C9 ; Load $C908.w into X register [Writes: X Index] [Flags: NZ]
	jsr $B4B7.w		; 20 B7 B4 ; Jump to subroutine at $B4B7.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $C910.w		; 0D 10 C9 ; Logical OR $C910.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $B07D.w		; 20 7D B0 ; Jump to subroutine at $B07D.w [Writes: Stack Pointer] [Flow: call]
	ldy #$10.b		; A0 10 ; Load #$10.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	jsr $A2B2.w		; 20 B2 A2 ; Jump to subroutine at $A2B2.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $B2		; 10 B2 ; Branch if plus to $10, $B2 [Flow: branch]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $B0.b,X		; B4 B0 ; Load Y register $B0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $AB		; 10 AB ; Branch if plus to $10, $AB [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E1B4ED.l		; 0F ED B4 E1 ; OR accumulator with memory (long) $E1B4ED.l [Writes: Accumulator] [Flags: NZ]
	ora $C918.w		; 0D 18 C9 ; Logical OR $C918.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $AC7D.w		; 20 7D AC ; Jump to subroutine at $AC7D.w [Writes: Stack Pointer] [Flow: call]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $08A6.w		; AE A6 08 ; Load $08A6.w into X register [Writes: X Index] [Flags: NZ]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $AB		; B0 AB ; Branch if carry set to $B0, $AB [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $10B5.w,X		; 5D B5 10 ; Exclusive OR accumulator with memory $10B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $08B0.w,X		; 3D B0 08 ; AND accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B5.w,X		; 5D B5 18 ; Exclusive OR accumulator with memory $18B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$10.b],Y		; B7 10 ; Load accumulator (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $08B0.w,X		; 3D B0 08 ; AND accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20B7.w,X		; 5D B7 20 ; Exclusive OR accumulator with memory $20B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08BA.w,X		; 7D BA 08 ; Add $08BA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B7B9.w		; 4D B9 B7 ; Exclusive OR $B7B9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $18B5.w,X		; 5D B5 18 ; Exclusive OR accumulator with memory $18B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B0.w		; 4D B0 18 ; Exclusive OR $18B0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $18B5.w,X		; 3D B5 18 ; AND accumulator with memory $18B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B7.w		; 6D B7 18 ; Add $18B7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $24B5.w,X		; 3D B5 24 ; AND accumulator with memory $24B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $06B5.w		; 6D B5 06 ; Add $06B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $06B4.w,X		; 3D B4 06 ; AND accumulator with memory $06B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B2.w,X		; 5D B2 18 ; Exclusive OR accumulator with memory $18B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	and $08B0.w,X		; 3D B0 08 ; AND accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $10.b,X		; B5 10 ; Load $10.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $08B0.w,X		; 3D B0 08 ; AND accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18B5.w,X		; 5D B5 18 ; Exclusive OR accumulator with memory $18B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$10.b],Y		; B7 10 ; Load accumulator (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $08B0.w,X		; 3D B0 08 ; AND accumulator with memory $08B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20B7.w,X		; 5D B7 20 ; Exclusive OR accumulator with memory $20B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08BA.w,X		; 7D BA 08 ; Add $08BA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $BAB9.w		; 4D B9 BA ; Exclusive OR $BAB9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $10BC.w,X		; 5D BC 10 ; Exclusive OR accumulator with memory $10BC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $08B5.w		; 6D B5 08 ; Add $08B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $00B4.w,X		; 5D B4 00 ; Exclusive OR accumulator with memory $00B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $9C98.w,X		; 7D 98 9C ; Add $9C98.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($A4.b,X)		; A1 A4 ; Load accumulator ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $ABA8A3.l,X		; 9F A3 A8 AB ; Store accumulator (long,X) $ABA8A3.l,X [Reads: Accumulator, X Index]
	.db $30, $AF		; 30 AF ; Branch if minus to $30, $AF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($A4.b,X)		; A1 A4 ; Load accumulator ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$AD.b		; A9 AD ; Load #$AD.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	stz $A49F.w		; 9C 9F A4 ; Store zero to $A49F.w
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A6A4.w,X		; 9D A4 A6 ; Store accumulator to $A6A4.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $A4.b		; 06 A4 ; Arithmetic shift left $A4.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $B030.w		; AD 30 B0 ; Load $B030.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($A4.b,X)		; A1 A4 ; Load accumulator ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $A6.b,S		; A3 A6 ; Load accumulator (stack relative) $A6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $AF		; 30 AF ; Branch if minus to $30, $AF [Flow: branch]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $C9A3.w		; 4D A3 C9 ; Exclusive OR $C9A3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $08B0.w,X		; 7D B0 08 ; Add $08B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	lda $AF48.w		; AD 48 AF ; Load $AF48.w into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $AD08.w		; AD 08 AD ; Load $AD08.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A8.b		; A9 A8 ; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $C9AB.w		; 4D AB C9 ; Exclusive OR $C9AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $A19C.w,X		; 7D 9C A1 ; Add $A19C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $A8.b		; A4 A8 ; Load $A8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $ABA8A3.l,X		; 9F A3 A8 AB ; Store accumulator (long,X) $ABA8A3.l,X [Reads: Accumulator, X Index]
	.db $30, $AF		; 30 AF ; Branch if minus to $30, $AF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda ($A4.b,X)		; A1 A4 ; Load accumulator ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$AD.b		; A9 AD ; Load #$AD.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	stz $A49F.w		; 9C 9F A4 ; Store zero to $A49F.w
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A6A4.w,X		; 9D A4 A6 ; Store accumulator to $A6A4.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $C918.w		; AD 18 C9 ; Load $C918.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $A4.b		; 06 A4 ; Arithmetic shift left $A4.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $B030.w		; AD 30 B0 ; Load $B030.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $A7.b		; A4 A7 ; Load $A7.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $B030.w		; AC 30 B0 ; Load $B030.w into Y register [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$A5.b		; A2 A5 ; Load #$A5.b into X register [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$A4.b		; A0 A4 ; Load #$A4.b into Y register [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy $B030.w		; AC 30 B0 ; Load $B030.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $08A8.w,X		; 7D A8 08 ; Add $08A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $C9.b,S		; A3 C9 ; Load accumulator (stack relative) $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $48.b,S		; A3 48 ; Load accumulator (stack relative) $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($48.b,X)		; A1 48 ; Load accumulator ($48.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $A148.w		; 9C 48 A1 ; Store zero to $A148.w
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($9F.b,X)		; A1 9F ; Load accumulator ($9F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A448.w,X		; 9D 48 A4 ; Store accumulator to $A448.w,X [Reads: Accumulator, X Index]
	.db $10, $A4		; 10 A4 ; Branch if plus to $10, $A4 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda [$10.b]		; A7 10 ; Load accumulator (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $E08C.w		; ED 8C E0 ; Subtract $E08C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $6012E1.l		; 0F E1 12 60 ; OR accumulator with memory (long) $6012E1.l [Writes: Accumulator] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	ldy $AE08.w		; AC 08 AE ; Load $AE08.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $08B5.w,X		; 7D B5 08 ; Add $08B5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B2B4.w		; 4D B4 B2 ; Exclusive OR $B2B4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $18B0.w,X		; 5D B0 18 ; Exclusive OR accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18AB.w		; 4D AB 18 ; Exclusive OR $18AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18AD.w		; 6D AD 18 ; Add $18AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $18B0.w,X		; 3D B0 18 ; AND accumulator with memory $18B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18B2.w		; 6D B2 18 ; Add $18B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $00B0.w,X		; 3D B0 00 ; AND accumulator with memory $00B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $AD7D.w		; 20 7D AD ; Jump to subroutine at $AD7D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A9AB.w		; 4D AB A9 ; Exclusive OR $A9AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $18A8.w,X		; 5D A8 18 ; Exclusive OR accumulator with memory $18A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $18A4.w		; 4D A4 18 ; Exclusive OR $18A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $18A4.w		; 6D A4 18 ; Add $18A4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $18A9.w,X		; 3D A9 18 ; AND accumulator with memory $18A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $18AA.w		; 6D AA 18 ; Add $18AA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $00AA.w,X		; 3D AA 00 ; AND accumulator with memory $00AA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $B05D.w		; 0C 5D B0 ; Test and set bits $B05D.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $00AFAF.l		; AF AF AF 00 ; Load long $00AFAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $00.b,X		; B4 00 ; Load Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00045B.l,X		; FF 5B 04 00 ; Subtract with carry (long,X) $00045B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFFC.l,X		; FF FC FF 64 ; Subtract with carry (long,X) $64FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $49FFFC.l,X		; FF FC FF 49 ; Subtract with carry (long,X) $49FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6CFFF7.l,X		; FF F7 FF 6C ; Subtract with carry (long,X) $6CFFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00446C.l,X		; FF 6C 44 00 ; Subtract with carry (long,X) $00446C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4CFFF9.l,X		; FF F9 FF 4C ; Subtract with carry (long,X) $4CFFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00444C.l,X		; FF 4C 44 00 ; Subtract with carry (long,X) $00444C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $44FFF7.l,X		; FF F7 FF 44 ; Subtract with carry (long,X) $44FFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004444.l,X		; FF 44 44 00 ; Subtract with carry (long,X) $004444.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62FFF8.l,X		; FF F8 FF 62 ; Subtract with carry (long,X) $62FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004462.l,X		; FF 62 44 00 ; Subtract with carry (long,X) $004462.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $60FFF9.l,X		; FF F9 FF 60 ; Subtract with carry (long,X) $60FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004460.l,X		; FF 60 44 00 ; Subtract with carry (long,X) $004460.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$00		; 44 00 02 ; Move block positive $02,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ror $0004.w		; 6E 04 00 ; Rotate right $0004.w [Flags: NCZ]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$00		; 44 00 02 ; Move block positive $02,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$F007]		; DC 07 F0 ; Jump long indirect [$F007] [Flow: jump]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $3606.w		; 2E 06 36 ; Rotate left $3606.w [Flags: NCZ]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: NCZ]
	asl $E0.b		; 06 E0 ; Arithmetic shift left $E0.b [Reads: Direct Page] [Flags: NCZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $F5AD.w		; 20 AD F5 ; Jump to subroutine at $F5AD.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $D9.b,X		; F5 D9 ; Subtract $D9.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $22,$F9		; 54 F9 22 ; Move block negative $22,$F9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and #$F1.b		; 29 F1 ; Logical AND #$F1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $90.b		; 06 90 ; Arithmetic shift left $90.b [Reads: Direct Page] [Flags: NCZ]
	tsb $8AA5.w		; 0C A5 8A ; Test and set bits $8AA5.w [Reads: Accumulator] [Flags: Z]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $099B68.l		; 22 68 9B 09 ; Jump to subroutine long $099B68.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $099B83.l		; 22 83 9B 09 ; Jump to subroutine long $099B83.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $F833.w		; 20 33 F8 ; Jump to subroutine at $F833.w [Writes: Stack Pointer] [Flow: call]
	jsr $F954.w		; [PATTERN: Memory clearing operation] 20 54 F9 ; Jump to subroutine at $F954.w [Writes: Stack Pointer] [Flow: call]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	jsr $F750.w		; 20 50 F7 ; Jump to subroutine at $F750.w [Writes: Stack Pointer] [Flow: call]
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	lda $0EE0.w,X		; BD E0 0E ; Load $0EE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $012D.w		; 8C 2D 01 ; Store Y register to $012D.w [Reads: Y Index]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $F5D5.w,Y		; B9 D5 F5 ; Load $F5D5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
	lda $F5D7.w,Y		; B9 D7 F5 ; Load $F5D7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $011D.w		; 8D 1D 01 ; Store accumulator to $011D.w [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $F5A0.w,Y		; B9 A0 F5 ; Load $F5A0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and $84F6.w,X		; 3D F6 84 ; AND accumulator with memory $84F6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $C8.b,X		; F6 C8 ; Increment memory $C8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $E9.b,X		; F6 E9 ; Increment memory $E9.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $BD.b,X		; F6 BD ; Increment memory $BD.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $F590.w,Y		; B9 90 F5 ; Load $F590.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0FD8.w		; CD D8 0F ; Compare $0FD8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $B0, $12		; B0 12 ; Branch if carry set to $B0, $12 [Flow: branch]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: NZ]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $F598.w,Y		; B9 98 F5 ; Load $F598.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0FDA.w		; CD DA 0F ; Compare $0FDA.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: NZ]
	lda #$E8.b		; A9 E8 ; Load #$E8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: NZ]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jmp $F660.w		; 4C 60 F6 ; Jump to $F660.w [Flow: jump]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jsr $F7E5.w		; 20 E5 F7 ; Jump to subroutine at $F7E5.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $1BC2A7.l		; 22 A7 C2 1B ; Jump to subroutine long $1BC2A7.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$37.b		; A9 37 ; Load #$37.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Y Index, Accumulator]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Y Index, Accumulator]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Y Index, Accumulator]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Y Index, Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Y Index, Accumulator]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Y Index, Accumulator]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Y Index, Accumulator]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Y Index, Accumulator]
	lda #$CC.b		; A9 CC ; Load #$CC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Y Index, Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Y Index, Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Y Index, Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Y Index, Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Y Index, Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta [$57.b],Y		; 97 57 ; Store accumulator (long indexed) [$57.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta [$57.b],Y		; 97 57 ; Store accumulator (long indexed) [$57.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta [$57.b],Y		; 97 57 ; Store accumulator (long indexed) [$57.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($68.b,X)		; 01 68 ; Logical OR ($68.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda [$57.b]		; A7 57 ; Load accumulator (long) [$57.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda [$57.b]		; A7 57 ; Load accumulator (long) [$57.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda [$57.b]		; A7 57 ; Load accumulator (long) [$57.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($65.b,X)		; 01 65 ; Logical OR ($65.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $90, $57		; 90 57 ; Branch if carry clear to $90, $57 [Flow: branch]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $90, $57		; 90 57 ; Branch if carry clear to $90, $57 [Flow: branch]
	ora ($C2.b,X)		; 01 C2 ; Logical OR ($C2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $20A0.w		; 20 A0 20 ; Jump to subroutine at $20A0.w [Writes: Stack Pointer] [Flow: call]
	lda $F72E.w,Y		; B9 2E F7 ; Load $F72E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $092E.w,Y		; 99 2E 09 ; Store accumulator to $092E.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $99.b		; 02 99 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($880A.w)		; 6C 0A 88 ; Jump indirect to ($880A.w) [Flow: jump]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $00F8.w		; 20 F8 00 ; Jump to subroutine at $00F8.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $00F8.w		; 20 F8 00 ; Jump to subroutine at $00F8.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $00F8.w		; 20 F8 00 ; Jump to subroutine at $00F8.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $00F8.w		; 20 F8 00 ; Jump to subroutine at $00F8.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $3030.w		; 20 30 30 ; Jump to subroutine at $3030.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
.ACCU 8
	sep #$E7		; E2 E7
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $CE1E.w,Y		; 19 1E CE ; OR accumulator with memory $CE1E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($EC.b,S),Y		; D3 EC ; Compare accumulator (stack relative indirect indexed) ($EC.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	trb $2D.b		; 14 2D ; Test and reset bits $2D.b [Reads: Accumulator] [Flags: Z]
	and ($CE.b)		; 32 CE ; AND accumulator with memory (indirect) ($CE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $19E7.w,X		; DD E7 19 ; Compare accumulator $19E7.w,X [Reads: X Index] [Flags: NCZ]
	and $32.b,S		; 23 32 ; AND accumulator with stack relative $32.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($CE.b,S),Y		; D3 CE ; Compare accumulator (stack relative indirect indexed) ($CE.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cpy $3C.b		; C4 3C ; Compare $3C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	and ($2D.b)		; 32 2D ; AND accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$DD		; E2 DD
	cld		; D8 ; Clear decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $1E.b,S		; 23 1E ; AND accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $141E.w,X		; 1E 1E 14 ; Arithmetic shift left $141E.w,X [Reads: X Index] [Flags: NCZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $2828.w,X		; 1E 28 28 ; Arithmetic shift left $2828.w,X [Reads: X Index] [Flags: NCZ]
	asl $EC0A.w,X		; 1E 0A EC ; Arithmetic shift left $EC0A.w,X [Reads: X Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy $C4.b		; C4 C4 ; Compare $C4.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpx $ECF6.w		; EC F6 EC ; Compare $ECF6.w with X register [Reads: X Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpx $A0F6.w		; EC F6 A0 ; Compare $A0F6.w with X register [Reads: X Index] [Flags: NCZ]
	ora $6DB9.w,X		; 1D B9 6D ; OR accumulator with memory $6DB9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$85.b],Y		; F7 85 ; Subtract with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc [$85.b],Y		; F7 85 ; Subtract with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($B9.b,X)		; 01 B9 ; Logical OR ($B9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda #$F7.b		; A9 F7 ; Load #$F7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $F7C7.w,Y		; B9 C7 F7 ; Load $F7C7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $09B1BD.l		; 22 BD B1 09 ; Jump to subroutine long $09B1BD.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E3		; 10 E3 ; Branch if plus to $10, $E3 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EE0.w,X		; 9D E0 0E ; Store accumulator to $0EE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $3020.w		; 20 20 30 ; Jump to subroutine at $3020.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	.db $50, $70		; 50 70 ; Branch if overflow clear to $50, $70 [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	.db $70, $F5		; 70 F5 ; Branch if overflow set to $70, $F5 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
.ACCU 16
	rep #$20		; C2 20
	lda #$0960.w		; A9 60 09 ; Load #$0960.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A78.w		; A9 78 0A ; Load #$0A78.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $F80A.w,Y		; B9 0A F8 ; Load $F80A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $F81E.w		; AD 1E F8 ; Load $F81E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $F81F.w,Y		; B9 1F F8 ; Load $F81F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000822.l,X		; FF 22 08 00 ; Subtract with carry (long,X) $000822.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000822.l,X		; FF 22 08 00 ; Subtract with carry (long,X) $000822.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$5C.b		; 69 5C ; Add #$5C.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	jmp $F94A.w		; 4C 4A F9 ; Jump to $F94A.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000E0.l,X		; FF E0 00 00 ; Subtract with carry (long,X) $0000E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000E0.l,X		; FF E0 00 00 ; Subtract with carry (long,X) $0000E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000C0.l,X		; FF C0 00 00 ; Subtract with carry (long,X) $0000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000C0.l,X		; FF C0 00 00 ; Subtract with carry (long,X) $0000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000E2.l,X		; FF E2 00 00 ; Subtract with carry (long,X) $0000E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000E2.l,X		; FF E2 00 00 ; Subtract with carry (long,X) $0000E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040E2.l,X		; FF E2 40 00 ; Subtract with carry (long,X) $0040E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E2FF.w,Y		; F9 FF E2 ; Subtract with carry $E2FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $40.b		; E6 40 ; Increment $40.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$AC.b		; 69 AC ; Add #$AC.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0FC1.w		; AD C1 0F ; Load $0FC1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $1CE4.w		; 1C E4 1C ; Test and reset bits $1CE4.w [Reads: Accumulator] [Flags: Z]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jmp.w [$E4E4]		; DC E4 E4 ; Jump long indirect [$E4E4] [Flow: jump]
	trb $DC1C.w		; 1C 1C DC ; Test and reset bits $DC1C.w [Reads: Accumulator] [Flags: Z]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $AD.b,S		; 03 AD ; OR accumulator with stack relative $AD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DD1.w		; 6D D1 0D ; Add $0DD1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $0DD2.w		; 6D D2 0D ; Add $0DD2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $0FB5.w		; 8C B5 0F ; Store Y register to $0FB5.w [Reads: Y Index]
	lda #$C2.b		; A9 C2 ; Load #$C2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $42		; 30 42 ; Branch if minus to $30, $42 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Y Index, Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Y Index, Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Y Index, Accumulator]
	sta $0CD2.w,Y		; 99 D2 0C ; Store accumulator to $0CD2.w,Y [Reads: Y Index, Accumulator]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Y Index, Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Y Index, Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Y Index, Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: NZ]
	lda $1AF979.l,X		; BF 79 F9 1A ; Load long $1AF979.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Y Index, Accumulator]
	lda $1AF971.l,X		; BF 71 F9 1A ; Load long $1AF971.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Y Index, Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,Y		; 99 C0 0D ; Store accumulator to $0DC0.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: NZ]
	.db $10, $B1		; 10 B1 ; Branch if plus to $10, $B1 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FDA.w		; 6D DA 0F ; Add $0FDA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $0FDB.w		; 6D DB 0F ; Add $0FDB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $1AFA0C.l		; 22 0C FA 1A ; Jump to subroutine long $1AFA0C.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $6C		; F0 6C ; Branch if equal to $F0, $6C [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $0E30.w,X		; FE 30 0E ; Increment memory $0E30.w,X [Reads: X Index] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$7A.b		; 69 7A ; Add #$7A.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $FB0E.w		; 20 0E FB ; Jump to subroutine at $FB0E.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora #$0D.b		; 09 0D ; Logical OR #$0D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($01.b,S),Y		; F3 01 ; Subtract with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($41.b,S),Y		; F3 41 ; Subtract with carry (stack relative indirect indexed) ($41.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002FF.l,X		; FF FF 02 00 ; Subtract with carry (long,X) $0002FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($01.b,S),Y		; F3 01 ; Subtract with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc ($41.b,S),Y		; F3 41 ; Subtract with carry (stack relative indirect indexed) ($41.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F30000.l,X		; FF 00 00 F3 ; Subtract with carry (long,X) $F30000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F30000.l,X		; FF 00 00 F3 ; Subtract with carry (long,X) $F30000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc #$FA7E.w		; 69 7E FA ; Add #$FA7E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0CBA.w,X		; FE BA 0C ; Increment memory $0CBA.w,X [Reads: X Index] [Flags: NZ]
	lda $0CBA.w,X		; BD BA 0C ; Load $0CBA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: NZ]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$1C.b		; 69 1C ; Add #$1C.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05040F.l		; 0F 0F 04 05 ; OR accumulator with memory (long) $05040F.l [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $05040F.l		; 0F 0F 04 05 ; OR accumulator with memory (long) $05040F.l [Writes: Accumulator] [Flags: NZ]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $07041F.l,X		; 1F 1F 04 07 ; Logical OR long $07041F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $120101.l		; 0F 01 01 12 ; OR accumulator with memory (long) $120101.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $49		; D0 49 ; Branch if not equal to $D0, $49 [Flow: branch]
	stz $0D.b		; 64 0D ; Store zero to $0D.b
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$6C.b		; C9 6C ; Compare #$6C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $0D.b		; E6 0D ; Increment $0D.b [Reads: Direct Page] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $2E		; B0 2E ; Branch if carry set to $B0, $2E [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $26		; 90 26 ; Branch if carry clear to $90, $26 [Flow: branch]
	lda $0CF7.w		; AD F7 0C ; Load $0CF7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $0CF7.w		; EE F7 0C ; Increment $0CF7.w [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0FFF.w		; AC FF 0F ; Load $0FFF.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $FB7B.w,X		; BD 7B FB ; Load $FB7B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FBCB.w,Y		; 39 CB FB ; AND accumulator with memory $FBCB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $FBBB.w,Y		; B9 BB FB ; Load $FBBB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0B9C.w		; 8D 9C 0B ; Store accumulator to $0B9C.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $FC39.w		; 20 39 FC ; Jump to subroutine at $FC39.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $FCB3.w		; 20 B3 FC ; Jump to subroutine at $FCB3.w [Writes: Stack Pointer] [Flow: call]
	jsr $F954.w		; 20 54 F9 ; Jump to subroutine at $F954.w [Writes: Stack Pointer] [Flow: call]
	jsl $06F129.l		; 22 29 F1 06 ; Jump to subroutine long $06F129.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $55		; 90 55 ; Branch if carry clear to $90, $55 [Flow: branch]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	jsl $079291.l		; 22 91 92 07 ; Jump to subroutine long $079291.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $45		; D0 45 ; Branch if not equal to $D0, $45 [Flow: branch]
	lda $7EF34A.l		; AF 4A F3 7E ; Load long $7EF34A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$90.b		; C9 90 ; Compare #$90.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $2D		; 30 2D ; Branch if minus to $30, $2D [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3C8.l		; 8F C8 F3 7E ; Store accumulator (long) $7EF3C8.l [Reads: Accumulator]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: NZ]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: NZ]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	tsb $0C0E.w		; 0C 0E 0C ; Test and set bits $0C0E.w [Reads: Accumulator] [Flags: Z]
	bit $2C2E.w		; 2C 2E 2C ; Test bits $2C2E.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($31.b),Y		; 71 31 ; Add with carry ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($71.b),Y		; 31 71 ; AND accumulator with memory ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $2D		; B0 2D ; Branch if carry set to $B0, $2D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FC9B.w,X		; 7D 9B FC ; Add $FC9B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FCA1.w,X		; 7D A1 FC ; Add $FCA1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $FCA7.w,X		; BD A7 FC ; Load $FCA7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $FCAD.w,X		; BD AD FC ; Load $FCAD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $DF		; 10 DF ; Branch if plus to $10, $DF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $06FEB4.l		; 22 B4 FE 06 ; Jump to subroutine long $06FEB4.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $80FFF8.l,X		; FF F8 FF 80 ; Subtract with carry (long,X) $80FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $82FFF8.l,X		; FF F8 FF 82 ; Subtract with carry (long,X) $82FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004082.l,X		; FF 82 40 00 ; Subtract with carry (long,X) $004082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004080.l,X		; FF 80 40 00 ; Subtract with carry (long,X) $004080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00008.l,X		; FF 08 00 A0 ; Subtract with carry (long,X) $A00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A20008.l,X		; FF 08 00 A2 ; Subtract with carry (long,X) $A20008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $84FFF8.l,X		; FF F8 FF 84 ; Subtract with carry (long,X) $84FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFF8.l,X		; FF F8 FF 86 ; Subtract with carry (long,X) $86FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004086.l,X		; FF 86 40 00 ; Subtract with carry (long,X) $004086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004084.l,X		; FF 84 40 00 ; Subtract with carry (long,X) $004084.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A40008.l,X		; FF 08 00 A4 ; Subtract with carry (long,X) $A40008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A60008.l,X		; FF 08 00 A6 ; Subtract with carry (long,X) $A60008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $88FFF8.l,X		; FF F8 FF 88 ; Subtract with carry (long,X) $88FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $88FFF8.l,X		; FF F8 FF 88 ; Subtract with carry (long,X) $88FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004088.l,X		; FF 88 40 00 ; Subtract with carry (long,X) $004088.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004088.l,X		; FF 88 40 00 ; Subtract with carry (long,X) $004088.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A80008.l,X		; FF 08 00 A8 ; Subtract with carry (long,X) $A80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A80008.l,X		; FF 08 00 A8 ; Subtract with carry (long,X) $A80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $FDB5.w		; 20 B5 FD ; Jump to subroutine at $FDB5.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$FCED.w		; 69 ED FC ; Add #$FCED.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$0920.w		; A9 20 09 ; Load #$0920.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A68.w		; A9 68 0A ; Load #$0A68.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $68		; D0 68 ; Branch if not equal to $D0, $68 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F70.w,X		; 7D 70 0F ; Add $0F70.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldy #$28.b		; A0 28 ; Load #$28.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FE48.w,X		; 7D 48 FE ; Add $FE48.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$6C.b		; A9 6C ; Load #$6C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $B7		; 10 B7 ; Branch if plus to $10, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $FD00.w		; 0C 00 FD ; Test and set bits $FD00.w [Reads: Accumulator] [Flags: Z]
	sbc $F7FFFA.l,X		; FF FA FF F7 ; Subtract with carry (long,X) $F7FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFF4.l,X		; FF F4 FF 00 ; Subtract with carry (long,X) $00FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FAFFFC.l,X		; FF FC FF FA ; Subtract with carry (long,X) $FAFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FDFFFE.l,X		; FF FE FF FD ; Subtract with carry (long,X) $FDFFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FAFFFC.l,X		; FF FC FF FA ; Subtract with carry (long,X) $FAFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0400.w,X		; FD 00 04 ; Subtract with carry $0400.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0E10.w		; 0E 10 0E ; Arithmetic shift left $0E10.w [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda #$DB.b		; A9 DB ; Load #$DB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $2A		; 30 2A ; Branch if minus to $30, $2A [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Y Index, Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Y Index, Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: NZ]
	lda $FE7E.w,X		; BD 7E FE ; Load $FE7E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Y Index, Accumulator]
	lda $FE83.w,X		; BD 83 FE ; Load $FE83.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Y Index, Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Y Index, Accumulator]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: NZ]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $FED3.w		; 20 D3 FE ; Jump to subroutine at $FED3.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsl $1AF92C.l		; 22 2C F9 1A ; Jump to subroutine long $1AF92C.l [Writes: Stack Pointer] [Flow: call]
	jsr $F954.w		; 20 54 F9 ; Jump to subroutine at $F954.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$7D.b		; A9 7D ; Load #$7D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$09.b		; E9 09 ; Subtract #$09.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $F800.w		; 0C 00 F8 ; Test and set bits $F800.w [Reads: Accumulator] [Flags: Z]
	sbc $080018.l,X		; FF 18 00 08 ; Subtract with carry (long,X) $080018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02E4.w		; 0D E4 02 ; Logical OR $02E4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F5		; D0 F5 ; Branch if not equal to $D0, $F5 [Flow: branch]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $2F.b		; A6 2F ; Load $2F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1AFF2B.l,X		; 7F 2B FF 1A ; Add long $1AFF2B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1AFF33.l,X		; 7F 33 FF 1A ; Add long $1AFF33.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $05.b		; 64 05 ; Store zero to $05.b
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $05.b		; 65 05 ; Add $05.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $05FAA2.l		; 22 A2 FA 05 ; Jump to subroutine long $05FAA2.l [Writes: Stack Pointer] [Flow: call]
.INDEX 16
	rep #$10		; C2 10
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $46		; D0 46 ; Branch if not equal to $D0, $46 [Flow: branch]
	jsl $1EA820.l		; 22 20 A8 1E ; Jump to subroutine long $1EA820.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	ldx $2F.b		; A6 2F ; Load $2F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1AFF33.l,X		; 7F 33 FF 1A ; Add long $1AFF33.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Y Index, Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $1AFF34.l,X		; 7F 34 FF 1A ; Add long $1AFF34.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Y Index, Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1AFF2B.l,X		; 7F 2B FF 1A ; Add long $1AFF2B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Y Index, Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $1AFF2C.l,X		; 7F 2C FF 1A ; Add long $1AFF2C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Y Index, Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $FF		; Opcode FF overrunning bank boundry at 0D7FFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 0D7FFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ENDS
